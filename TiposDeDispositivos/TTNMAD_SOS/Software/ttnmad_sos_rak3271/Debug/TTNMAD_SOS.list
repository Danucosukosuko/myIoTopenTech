
TTNMAD_SOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ff98  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  080200d8  080200d8  000300d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08020c14  08020c14  00030c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020cd4  08020cd4  00040320  2**0
                  CONTENTS
  5 .ARM          00000008  08020cd4  08020cd4  00030cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020cdc  08020cdc  00040320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08020cdc  08020cdc  00030cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08020ce0  08020ce0  00030ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000320  20000000  08020ce4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002250  20000320  08021004  00040320  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002570  08021004  00042570  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00040320  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041bee  00000000  00000000  0004034a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009db4  00000000  00000000  00081f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003238  00000000  00000000  0008bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e40  00000000  00000000  0008ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027fcc  00000000  00000000  00091d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b642  00000000  00000000  000b9d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca4be  00000000  00000000  000f5376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bf834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dec4  00000000  00000000  001bf884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000320 	.word	0x20000320
 800015c:	00000000 	.word	0x00000000
 8000160:	080200c0 	.word	0x080200c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000324 	.word	0x20000324
 800017c:	080200c0 	.word	0x080200c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_frsub>:
 8000c0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c10:	e002      	b.n	8000c18 <__addsf3>
 8000c12:	bf00      	nop

08000c14 <__aeabi_fsub>:
 8000c14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c18 <__addsf3>:
 8000c18:	0042      	lsls	r2, r0, #1
 8000c1a:	bf1f      	itttt	ne
 8000c1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c20:	ea92 0f03 	teqne	r2, r3
 8000c24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2c:	d06a      	beq.n	8000d04 <__addsf3+0xec>
 8000c2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c36:	bfc1      	itttt	gt
 8000c38:	18d2      	addgt	r2, r2, r3
 8000c3a:	4041      	eorgt	r1, r0
 8000c3c:	4048      	eorgt	r0, r1
 8000c3e:	4041      	eorgt	r1, r0
 8000c40:	bfb8      	it	lt
 8000c42:	425b      	neglt	r3, r3
 8000c44:	2b19      	cmp	r3, #25
 8000c46:	bf88      	it	hi
 8000c48:	4770      	bxhi	lr
 8000c4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c56:	bf18      	it	ne
 8000c58:	4240      	negne	r0, r0
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4249      	negne	r1, r1
 8000c6a:	ea92 0f03 	teq	r2, r3
 8000c6e:	d03f      	beq.n	8000cf0 <__addsf3+0xd8>
 8000c70:	f1a2 0201 	sub.w	r2, r2, #1
 8000c74:	fa41 fc03 	asr.w	ip, r1, r3
 8000c78:	eb10 000c 	adds.w	r0, r0, ip
 8000c7c:	f1c3 0320 	rsb	r3, r3, #32
 8000c80:	fa01 f103 	lsl.w	r1, r1, r3
 8000c84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__addsf3+0x78>
 8000c8a:	4249      	negs	r1, r1
 8000c8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c94:	d313      	bcc.n	8000cbe <__addsf3+0xa6>
 8000c96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c9a:	d306      	bcc.n	8000caa <__addsf3+0x92>
 8000c9c:	0840      	lsrs	r0, r0, #1
 8000c9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ca2:	f102 0201 	add.w	r2, r2, #1
 8000ca6:	2afe      	cmp	r2, #254	; 0xfe
 8000ca8:	d251      	bcs.n	8000d4e <__addsf3+0x136>
 8000caa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb2:	bf08      	it	eq
 8000cb4:	f020 0001 	biceq.w	r0, r0, #1
 8000cb8:	ea40 0003 	orr.w	r0, r0, r3
 8000cbc:	4770      	bx	lr
 8000cbe:	0049      	lsls	r1, r1, #1
 8000cc0:	eb40 0000 	adc.w	r0, r0, r0
 8000cc4:	3a01      	subs	r2, #1
 8000cc6:	bf28      	it	cs
 8000cc8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ccc:	d2ed      	bcs.n	8000caa <__addsf3+0x92>
 8000cce:	fab0 fc80 	clz	ip, r0
 8000cd2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cd6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cda:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cde:	bfaa      	itet	ge
 8000ce0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce4:	4252      	neglt	r2, r2
 8000ce6:	4318      	orrge	r0, r3
 8000ce8:	bfbc      	itt	lt
 8000cea:	40d0      	lsrlt	r0, r2
 8000cec:	4318      	orrlt	r0, r3
 8000cee:	4770      	bx	lr
 8000cf0:	f092 0f00 	teq	r2, #0
 8000cf4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf8:	bf06      	itte	eq
 8000cfa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cfe:	3201      	addeq	r2, #1
 8000d00:	3b01      	subne	r3, #1
 8000d02:	e7b5      	b.n	8000c70 <__addsf3+0x58>
 8000d04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	bf18      	it	ne
 8000d0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d12:	d021      	beq.n	8000d58 <__addsf3+0x140>
 8000d14:	ea92 0f03 	teq	r2, r3
 8000d18:	d004      	beq.n	8000d24 <__addsf3+0x10c>
 8000d1a:	f092 0f00 	teq	r2, #0
 8000d1e:	bf08      	it	eq
 8000d20:	4608      	moveq	r0, r1
 8000d22:	4770      	bx	lr
 8000d24:	ea90 0f01 	teq	r0, r1
 8000d28:	bf1c      	itt	ne
 8000d2a:	2000      	movne	r0, #0
 8000d2c:	4770      	bxne	lr
 8000d2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d32:	d104      	bne.n	8000d3e <__addsf3+0x126>
 8000d34:	0040      	lsls	r0, r0, #1
 8000d36:	bf28      	it	cs
 8000d38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	4770      	bx	lr
 8000d3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d42:	bf3c      	itt	cc
 8000d44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d48:	4770      	bxcc	lr
 8000d4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d56:	4770      	bx	lr
 8000d58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d5c:	bf16      	itet	ne
 8000d5e:	4608      	movne	r0, r1
 8000d60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d64:	4601      	movne	r1, r0
 8000d66:	0242      	lsls	r2, r0, #9
 8000d68:	bf06      	itte	eq
 8000d6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d6e:	ea90 0f01 	teqeq	r0, r1
 8000d72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_ui2f>:
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e004      	b.n	8000d88 <__aeabi_i2f+0x8>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_i2f>:
 8000d80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d84:	bf48      	it	mi
 8000d86:	4240      	negmi	r0, r0
 8000d88:	ea5f 0c00 	movs.w	ip, r0
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d94:	4601      	mov	r1, r0
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	e01c      	b.n	8000dd6 <__aeabi_l2f+0x2a>

08000d9c <__aeabi_ul2f>:
 8000d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000da0:	bf08      	it	eq
 8000da2:	4770      	bxeq	lr
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e00a      	b.n	8000dc0 <__aeabi_l2f+0x14>
 8000daa:	bf00      	nop

08000dac <__aeabi_l2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db8:	d502      	bpl.n	8000dc0 <__aeabi_l2f+0x14>
 8000dba:	4240      	negs	r0, r0
 8000dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc0:	ea5f 0c01 	movs.w	ip, r1
 8000dc4:	bf02      	ittt	eq
 8000dc6:	4684      	moveq	ip, r0
 8000dc8:	4601      	moveq	r1, r0
 8000dca:	2000      	moveq	r0, #0
 8000dcc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dd0:	bf08      	it	eq
 8000dd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dda:	fabc f28c 	clz	r2, ip
 8000dde:	3a08      	subs	r2, #8
 8000de0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de4:	db10      	blt.n	8000e08 <__aeabi_l2f+0x5c>
 8000de6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dea:	4463      	add	r3, ip
 8000dec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df0:	f1c2 0220 	rsb	r2, r2, #32
 8000df4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfc:	eb43 0002 	adc.w	r0, r3, r2
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f102 0220 	add.w	r2, r2, #32
 8000e0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e10:	f1c2 0220 	rsb	r2, r2, #32
 8000e14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e18:	fa21 f202 	lsr.w	r2, r1, r2
 8000e1c:	eb43 0002 	adc.w	r0, r3, r2
 8000e20:	bf08      	it	eq
 8000e22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e26:	4770      	bx	lr

08000e28 <__aeabi_f2iz>:
 8000e28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e30:	d30f      	bcc.n	8000e52 <__aeabi_f2iz+0x2a>
 8000e32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e3a:	d90d      	bls.n	8000e58 <__aeabi_f2iz+0x30>
 8000e3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e44:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e48:	fa23 f002 	lsr.w	r0, r3, r2
 8000e4c:	bf18      	it	ne
 8000e4e:	4240      	negne	r0, r0
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr
 8000e58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_f2iz+0x3a>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d105      	bne.n	8000e6e <__aeabi_f2iz+0x46>
 8000e62:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	bf08      	it	eq
 8000e68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e6c:	4770      	bx	lr
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b9ac 	b.w	80011e4 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f83e 	bl	8000f14 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_d2lz>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4605      	mov	r5, r0
 8000ea8:	460c      	mov	r4, r1
 8000eaa:	4628      	mov	r0, r5
 8000eac:	4621      	mov	r1, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f7ff fdeb 	bl	8000a8c <__aeabi_dcmplt>
 8000eb6:	b928      	cbnz	r0, 8000ec4 <__aeabi_d2lz+0x20>
 8000eb8:	4628      	mov	r0, r5
 8000eba:	4621      	mov	r1, r4
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f000 b80a 	b.w	8000ed8 <__aeabi_d2ulz>
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eca:	f000 f805 	bl	8000ed8 <__aeabi_d2ulz>
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_d2ulz>:
 8000ed8:	b5d0      	push	{r4, r6, r7, lr}
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__aeabi_d2ulz+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	4606      	mov	r6, r0
 8000ee0:	460f      	mov	r7, r1
 8000ee2:	f7ff fb61 	bl	80005a8 <__aeabi_dmul>
 8000ee6:	f7ff fe21 	bl	8000b2c <__aeabi_d2uiz>
 8000eea:	4604      	mov	r4, r0
 8000eec:	f7ff fae2 	bl	80004b4 <__aeabi_ui2d>
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <__aeabi_d2ulz+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f7ff fb58 	bl	80005a8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4630      	mov	r0, r6
 8000efe:	4639      	mov	r1, r7
 8000f00:	f7ff f99a 	bl	8000238 <__aeabi_dsub>
 8000f04:	f7ff fe12 	bl	8000b2c <__aeabi_d2uiz>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f0c:	3df00000 	.word	0x3df00000
 8000f10:	41f00000 	.word	0x41f00000

08000f14 <__udivmoddi4>:
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	9e08      	ldr	r6, [sp, #32]
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	4688      	mov	r8, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d14d      	bne.n	8000fc0 <__udivmoddi4+0xac>
 8000f24:	428a      	cmp	r2, r1
 8000f26:	4694      	mov	ip, r2
 8000f28:	d968      	bls.n	8000ffc <__udivmoddi4+0xe8>
 8000f2a:	fab2 f282 	clz	r2, r2
 8000f2e:	b152      	cbz	r2, 8000f46 <__udivmoddi4+0x32>
 8000f30:	fa01 f302 	lsl.w	r3, r1, r2
 8000f34:	f1c2 0120 	rsb	r1, r2, #32
 8000f38:	fa20 f101 	lsr.w	r1, r0, r1
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	ea41 0803 	orr.w	r8, r1, r3
 8000f44:	4094      	lsls	r4, r2
 8000f46:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000f4a:	0c21      	lsrs	r1, r4, #16
 8000f4c:	fbb8 fef5 	udiv	lr, r8, r5
 8000f50:	fa1f f78c 	uxth.w	r7, ip
 8000f54:	fb05 831e 	mls	r3, r5, lr, r8
 8000f58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f5c:	fb0e f107 	mul.w	r1, lr, r7
 8000f60:	4299      	cmp	r1, r3
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x68>
 8000f64:	eb1c 0303 	adds.w	r3, ip, r3
 8000f68:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000f6c:	f080 811e 	bcs.w	80011ac <__udivmoddi4+0x298>
 8000f70:	4299      	cmp	r1, r3
 8000f72:	f240 811b 	bls.w	80011ac <__udivmoddi4+0x298>
 8000f76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1a5b      	subs	r3, r3, r1
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb3 f0f5 	udiv	r0, r3, r5
 8000f84:	fb05 3310 	mls	r3, r5, r0, r3
 8000f88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f8c:	fb00 f707 	mul.w	r7, r0, r7
 8000f90:	42a7      	cmp	r7, r4
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x96>
 8000f94:	eb1c 0404 	adds.w	r4, ip, r4
 8000f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f9c:	f080 8108 	bcs.w	80011b0 <__udivmoddi4+0x29c>
 8000fa0:	42a7      	cmp	r7, r4
 8000fa2:	f240 8105 	bls.w	80011b0 <__udivmoddi4+0x29c>
 8000fa6:	4464      	add	r4, ip
 8000fa8:	3802      	subs	r0, #2
 8000faa:	1be4      	subs	r4, r4, r7
 8000fac:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	b11e      	cbz	r6, 8000fbc <__udivmoddi4+0xa8>
 8000fb4:	40d4      	lsrs	r4, r2
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0xc2>
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	f000 80ee 	beq.w	80011a6 <__udivmoddi4+0x292>
 8000fca:	2100      	movs	r1, #0
 8000fcc:	e9c6 0500 	strd	r0, r5, [r6]
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	fab3 f183 	clz	r1, r3
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d14a      	bne.n	8001074 <__udivmoddi4+0x160>
 8000fde:	42ab      	cmp	r3, r5
 8000fe0:	d302      	bcc.n	8000fe8 <__udivmoddi4+0xd4>
 8000fe2:	4282      	cmp	r2, r0
 8000fe4:	f200 80f9 	bhi.w	80011da <__udivmoddi4+0x2c6>
 8000fe8:	1a84      	subs	r4, r0, r2
 8000fea:	eb65 0303 	sbc.w	r3, r5, r3
 8000fee:	2001      	movs	r0, #1
 8000ff0:	4698      	mov	r8, r3
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d0e2      	beq.n	8000fbc <__udivmoddi4+0xa8>
 8000ff6:	e9c6 4800 	strd	r4, r8, [r6]
 8000ffa:	e7df      	b.n	8000fbc <__udivmoddi4+0xa8>
 8000ffc:	b902      	cbnz	r2, 8001000 <__udivmoddi4+0xec>
 8000ffe:	deff      	udf	#255	; 0xff
 8001000:	fab2 f282 	clz	r2, r2
 8001004:	2a00      	cmp	r2, #0
 8001006:	f040 8091 	bne.w	800112c <__udivmoddi4+0x218>
 800100a:	eba1 050c 	sub.w	r5, r1, ip
 800100e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001012:	fa1f fe8c 	uxth.w	lr, ip
 8001016:	2101      	movs	r1, #1
 8001018:	fbb5 f3f7 	udiv	r3, r5, r7
 800101c:	fb07 5013 	mls	r0, r7, r3, r5
 8001020:	0c25      	lsrs	r5, r4, #16
 8001022:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001026:	fb0e f003 	mul.w	r0, lr, r3
 800102a:	42a8      	cmp	r0, r5
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x12c>
 800102e:	eb1c 0505 	adds.w	r5, ip, r5
 8001032:	f103 38ff 	add.w	r8, r3, #4294967295
 8001036:	d202      	bcs.n	800103e <__udivmoddi4+0x12a>
 8001038:	42a8      	cmp	r0, r5
 800103a:	f200 80cb 	bhi.w	80011d4 <__udivmoddi4+0x2c0>
 800103e:	4643      	mov	r3, r8
 8001040:	1a2d      	subs	r5, r5, r0
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb5 f0f7 	udiv	r0, r5, r7
 8001048:	fb07 5510 	mls	r5, r7, r0, r5
 800104c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001050:	fb0e fe00 	mul.w	lr, lr, r0
 8001054:	45a6      	cmp	lr, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x156>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001060:	d202      	bcs.n	8001068 <__udivmoddi4+0x154>
 8001062:	45a6      	cmp	lr, r4
 8001064:	f200 80bb 	bhi.w	80011de <__udivmoddi4+0x2ca>
 8001068:	4628      	mov	r0, r5
 800106a:	eba4 040e 	sub.w	r4, r4, lr
 800106e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001072:	e79e      	b.n	8000fb2 <__udivmoddi4+0x9e>
 8001074:	f1c1 0720 	rsb	r7, r1, #32
 8001078:	408b      	lsls	r3, r1
 800107a:	fa22 fc07 	lsr.w	ip, r2, r7
 800107e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001082:	fa20 f407 	lsr.w	r4, r0, r7
 8001086:	fa05 f301 	lsl.w	r3, r5, r1
 800108a:	431c      	orrs	r4, r3
 800108c:	40fd      	lsrs	r5, r7
 800108e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001092:	fa00 f301 	lsl.w	r3, r0, r1
 8001096:	fbb5 f8f9 	udiv	r8, r5, r9
 800109a:	0c20      	lsrs	r0, r4, #16
 800109c:	fa1f fe8c 	uxth.w	lr, ip
 80010a0:	fb09 5518 	mls	r5, r9, r8, r5
 80010a4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80010a8:	fb08 f00e 	mul.w	r0, r8, lr
 80010ac:	42a8      	cmp	r0, r5
 80010ae:	fa02 f201 	lsl.w	r2, r2, r1
 80010b2:	d90b      	bls.n	80010cc <__udivmoddi4+0x1b8>
 80010b4:	eb1c 0505 	adds.w	r5, ip, r5
 80010b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80010bc:	f080 8088 	bcs.w	80011d0 <__udivmoddi4+0x2bc>
 80010c0:	42a8      	cmp	r0, r5
 80010c2:	f240 8085 	bls.w	80011d0 <__udivmoddi4+0x2bc>
 80010c6:	f1a8 0802 	sub.w	r8, r8, #2
 80010ca:	4465      	add	r5, ip
 80010cc:	1a2d      	subs	r5, r5, r0
 80010ce:	b2a4      	uxth	r4, r4
 80010d0:	fbb5 f0f9 	udiv	r0, r5, r9
 80010d4:	fb09 5510 	mls	r5, r9, r0, r5
 80010d8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80010dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80010e0:	45ae      	cmp	lr, r5
 80010e2:	d908      	bls.n	80010f6 <__udivmoddi4+0x1e2>
 80010e4:	eb1c 0505 	adds.w	r5, ip, r5
 80010e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ec:	d26c      	bcs.n	80011c8 <__udivmoddi4+0x2b4>
 80010ee:	45ae      	cmp	lr, r5
 80010f0:	d96a      	bls.n	80011c8 <__udivmoddi4+0x2b4>
 80010f2:	3802      	subs	r0, #2
 80010f4:	4465      	add	r5, ip
 80010f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010fa:	fba0 9402 	umull	r9, r4, r0, r2
 80010fe:	eba5 050e 	sub.w	r5, r5, lr
 8001102:	42a5      	cmp	r5, r4
 8001104:	46c8      	mov	r8, r9
 8001106:	46a6      	mov	lr, r4
 8001108:	d356      	bcc.n	80011b8 <__udivmoddi4+0x2a4>
 800110a:	d053      	beq.n	80011b4 <__udivmoddi4+0x2a0>
 800110c:	b15e      	cbz	r6, 8001126 <__udivmoddi4+0x212>
 800110e:	ebb3 0208 	subs.w	r2, r3, r8
 8001112:	eb65 050e 	sbc.w	r5, r5, lr
 8001116:	fa05 f707 	lsl.w	r7, r5, r7
 800111a:	fa22 f301 	lsr.w	r3, r2, r1
 800111e:	40cd      	lsrs	r5, r1
 8001120:	431f      	orrs	r7, r3
 8001122:	e9c6 7500 	strd	r7, r5, [r6]
 8001126:	2100      	movs	r1, #0
 8001128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112c:	f1c2 0320 	rsb	r3, r2, #32
 8001130:	fa20 f103 	lsr.w	r1, r0, r3
 8001134:	fa0c fc02 	lsl.w	ip, ip, r2
 8001138:	fa25 f303 	lsr.w	r3, r5, r3
 800113c:	4095      	lsls	r5, r2
 800113e:	430d      	orrs	r5, r1
 8001140:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001144:	fa1f fe8c 	uxth.w	lr, ip
 8001148:	fbb3 f1f7 	udiv	r1, r3, r7
 800114c:	fb07 3011 	mls	r0, r7, r1, r3
 8001150:	0c2b      	lsrs	r3, r5, #16
 8001152:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001156:	fb01 f00e 	mul.w	r0, r1, lr
 800115a:	4298      	cmp	r0, r3
 800115c:	fa04 f402 	lsl.w	r4, r4, r2
 8001160:	d908      	bls.n	8001174 <__udivmoddi4+0x260>
 8001162:	eb1c 0303 	adds.w	r3, ip, r3
 8001166:	f101 38ff 	add.w	r8, r1, #4294967295
 800116a:	d22f      	bcs.n	80011cc <__udivmoddi4+0x2b8>
 800116c:	4298      	cmp	r0, r3
 800116e:	d92d      	bls.n	80011cc <__udivmoddi4+0x2b8>
 8001170:	3902      	subs	r1, #2
 8001172:	4463      	add	r3, ip
 8001174:	1a1b      	subs	r3, r3, r0
 8001176:	b2ad      	uxth	r5, r5
 8001178:	fbb3 f0f7 	udiv	r0, r3, r7
 800117c:	fb07 3310 	mls	r3, r7, r0, r3
 8001180:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001184:	fb00 f30e 	mul.w	r3, r0, lr
 8001188:	42ab      	cmp	r3, r5
 800118a:	d908      	bls.n	800119e <__udivmoddi4+0x28a>
 800118c:	eb1c 0505 	adds.w	r5, ip, r5
 8001190:	f100 38ff 	add.w	r8, r0, #4294967295
 8001194:	d216      	bcs.n	80011c4 <__udivmoddi4+0x2b0>
 8001196:	42ab      	cmp	r3, r5
 8001198:	d914      	bls.n	80011c4 <__udivmoddi4+0x2b0>
 800119a:	3802      	subs	r0, #2
 800119c:	4465      	add	r5, ip
 800119e:	1aed      	subs	r5, r5, r3
 80011a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011a4:	e738      	b.n	8001018 <__udivmoddi4+0x104>
 80011a6:	4631      	mov	r1, r6
 80011a8:	4630      	mov	r0, r6
 80011aa:	e707      	b.n	8000fbc <__udivmoddi4+0xa8>
 80011ac:	4686      	mov	lr, r0
 80011ae:	e6e5      	b.n	8000f7c <__udivmoddi4+0x68>
 80011b0:	4618      	mov	r0, r3
 80011b2:	e6fa      	b.n	8000faa <__udivmoddi4+0x96>
 80011b4:	454b      	cmp	r3, r9
 80011b6:	d2a9      	bcs.n	800110c <__udivmoddi4+0x1f8>
 80011b8:	ebb9 0802 	subs.w	r8, r9, r2
 80011bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011c0:	3801      	subs	r0, #1
 80011c2:	e7a3      	b.n	800110c <__udivmoddi4+0x1f8>
 80011c4:	4640      	mov	r0, r8
 80011c6:	e7ea      	b.n	800119e <__udivmoddi4+0x28a>
 80011c8:	4620      	mov	r0, r4
 80011ca:	e794      	b.n	80010f6 <__udivmoddi4+0x1e2>
 80011cc:	4641      	mov	r1, r8
 80011ce:	e7d1      	b.n	8001174 <__udivmoddi4+0x260>
 80011d0:	46d0      	mov	r8, sl
 80011d2:	e77b      	b.n	80010cc <__udivmoddi4+0x1b8>
 80011d4:	3b02      	subs	r3, #2
 80011d6:	4465      	add	r5, ip
 80011d8:	e732      	b.n	8001040 <__udivmoddi4+0x12c>
 80011da:	4608      	mov	r0, r1
 80011dc:	e709      	b.n	8000ff2 <__udivmoddi4+0xde>
 80011de:	4464      	add	r4, ip
 80011e0:	3802      	subs	r0, #2
 80011e2:	e742      	b.n	800106a <__udivmoddi4+0x156>

080011e4 <__aeabi_idiv0>:
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop

080011e8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800120c:	68fb      	ldr	r3, [r7, #12]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	43db      	mvns	r3, r3
 800122a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800122e:	4013      	ands	r3, r2
 8001230:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_ADC_Init+0x94>)
 8001242:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <MX_ADC_Init+0x98>)
 8001244:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <MX_ADC_Init+0x94>)
 8001248:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800124c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_ADC_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_ADC_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_ADC_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_ADC_Init+0x94>)
 8001262:	2204      	movs	r2, #4
 8001264:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_ADC_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_ADC_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_ADC_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_ADC_Init+0x94>)
 800127a:	2201      	movs	r2, #1
 800127c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_ADC_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_ADC_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_ADC_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_ADC_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <MX_ADC_Init+0x94>)
 800129c:	2200      	movs	r2, #0
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_ADC_Init+0x94>)
 80012a2:	2207      	movs	r2, #7
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_ADC_Init+0x94>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_ADC_Init+0x94>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_ADC_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_ADC_Init+0x94>)
 80012bc:	f002 f858 	bl	8003370 <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 80012c6:	f000 fc39 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000033c 	.word	0x2000033c
 80012d4:	40012400 	.word	0x40012400

080012d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_ADC_MspInit+0x24>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d103      	bne.n	80012f2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ee:	f7ff ff7b 	bl	80011e8 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40012400 	.word	0x40012400

08001300 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_ADC_MspDeInit+0x24>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d103      	bne.n	800131a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001312:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001316:	f7ff ff7f 	bl	8001218 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012400 	.word	0x40012400

08001328 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <SYS_InitMeasurement+0x14>)
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <SYS_InitMeasurement+0x18>)
 8001330:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000033c 	.word	0x2000033c
 8001340:	40012400 	.word	0x40012400

08001344 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001352:	f000 f869 	bl	8001428 <SYS_GetBatteryLevel>
 8001356:	4603      	mov	r3, r0
 8001358:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800135a:	482d      	ldr	r0, [pc, #180]	; (8001410 <SYS_GetTemperatureLevel+0xcc>)
 800135c:	f000 f898 	bl	8001490 <ADC_ReadChannels>
 8001360:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <SYS_GetTemperatureLevel+0xd0>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <SYS_GetTemperatureLevel+0xd4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d026      	beq.n	80013bc <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <SYS_GetTemperatureLevel+0xd0>)
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <SYS_GetTemperatureLevel+0xd4>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d01c      	beq.n	80013b4 <SYS_GetTemperatureLevel+0x70>
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <SYS_GetTemperatureLevel+0xd8>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	461a      	mov	r2, r3
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <SYS_GetTemperatureLevel+0xd4>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2264      	movs	r2, #100	; 0x64
 8001396:	fb03 f202 	mul.w	r2, r3, r2
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <SYS_GetTemperatureLevel+0xd0>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <SYS_GetTemperatureLevel+0xd4>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	1acb      	subs	r3, r1, r3
 80013a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	331e      	adds	r3, #30
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	e001      	b.n	80013b8 <SYS_GetTemperatureLevel+0x74>
 80013b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80013b8:	803b      	strh	r3, [r7, #0]
 80013ba:	e01d      	b.n	80013f8 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	fb03 f202 	mul.w	r2, r3, r2
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <SYS_GetTemperatureLevel+0xdc>)
 80013c6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	0852      	lsrs	r2, r2, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	0adb      	lsrs	r3, r3, #11
 80013d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 80013de:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <SYS_GetTemperatureLevel+0xe0>)
 80013e4:	fb82 1203 	smull	r1, r2, r2, r3
 80013e8:	1292      	asrs	r2, r2, #10
 80013ea:	17db      	asrs	r3, r3, #31
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	331e      	adds	r3, #30
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21b      	sxth	r3, r3
 8001400:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8001402:	883b      	ldrh	r3, [r7, #0]
 8001404:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	b0001000 	.word	0xb0001000
 8001414:	1fff75c8 	.word	0x1fff75c8
 8001418:	1fff75a8 	.word	0x1fff75a8
 800141c:	09ee009f 	.word	0x09ee009f
 8001420:	00100101 	.word	0x00100101
 8001424:	68db8bad 	.word	0x68db8bad

08001428 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <SYS_GetBatteryLevel+0x5c>)
 8001438:	f000 f82a 	bl	8001490 <ADC_ReadChannels>
 800143c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	e016      	b.n	8001478 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <SYS_GetBatteryLevel+0x60>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001452:	4293      	cmp	r3, r2
 8001454:	d00b      	beq.n	800146e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <SYS_GetBatteryLevel+0x60>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001460:	fb03 f202 	mul.w	r2, r3, r2
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	e004      	b.n	8001478 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <SYS_GetBatteryLevel+0x64>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001478:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	b4002000 	.word	0xb4002000
 8001488:	1fff75aa 	.word	0x1fff75aa
 800148c:	004c08d8 	.word	0x004c08d8

08001490 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80014a8:	f7ff fec8 	bl	800123c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80014ac:	481a      	ldr	r0, [pc, #104]	; (8001518 <ADC_ReadChannels+0x88>)
 80014ae:	f002 fd8e 	bl	8003fce <HAL_ADCEx_Calibration_Start>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80014b8:	f000 fb40 	bl	8001b3c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4619      	mov	r1, r3
 80014ce:	4812      	ldr	r0, [pc, #72]	; (8001518 <ADC_ReadChannels+0x88>)
 80014d0:	f002 fa9a 	bl	8003a08 <HAL_ADC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80014da:	f000 fb2f 	bl	8001b3c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <ADC_ReadChannels+0x88>)
 80014e0:	f002 f976 	bl	80037d0 <HAL_ADC_Start>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80014ea:	f000 fb27 	bl	8001b3c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80014ee:	f04f 31ff 	mov.w	r1, #4294967295
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <ADC_ReadChannels+0x88>)
 80014f4:	f002 f9e4 	bl	80038c0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <ADC_ReadChannels+0x88>)
 80014fa:	f002 f9af 	bl	800385c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <ADC_ReadChannels+0x88>)
 8001500:	f002 fa75 	bl	80039ee <HAL_ADC_GetValue>
 8001504:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <ADC_ReadChannels+0x88>)
 8001508:	f002 f8e6 	bl	80036d8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800150c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000033c 	.word	0x2000033c

0800151c <LL_AHB1_GRP1_EnableClock>:
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800152a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001550:	2004      	movs	r0, #4
 8001552:	f7ff ffe3 	bl	800151c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff ffe0 	bl	800151c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	200b      	movs	r0, #11
 8001562:	f002 ff12 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001566:	200b      	movs	r0, #11
 8001568:	f002 ff29 	bl	80043be <HAL_NVIC_EnableIRQ>

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001580:	d101      	bne.n	8001586 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001586:	2300      	movs	r3, #0
#endif
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	58004000 	.word	0x58004000

08001594 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <FLASH_IF_Write+0x174>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0299      	lsls	r1, r3, #10
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <FLASH_IF_Write+0x178>)
 80015b4:	400b      	ands	r3, r1
 80015b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	0adb      	lsrs	r3, r3, #11
 80015c2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <FLASH_IF_Write+0x174>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	0291      	lsls	r1, r2, #10
 80015d6:	4a4d      	ldr	r2, [pc, #308]	; (800170c <FLASH_IF_Write+0x178>)
 80015d8:	400a      	ands	r2, r1
 80015da:	fbb3 f1f2 	udiv	r1, r3, r2
 80015de:	fb01 f202 	mul.w	r2, r1, r2
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	0adb      	lsrs	r3, r3, #11
 80015e6:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <FLASH_IF_Write+0x7a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	2b00      	cmp	r3, #0
 8001602:	d104      	bne.n	800160e <FLASH_IF_Write+0x7a>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800160e:	f06f 0304 	mvn.w	r3, #4
 8001612:	e074      	b.n	80016fe <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <FLASH_IF_Write+0x17c>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da02      	bge.n	8001622 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800161c:	f06f 0303 	mvn.w	r3, #3
 8001620:	e06d      	b.n	80016fe <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	429a      	cmp	r2, r3
 8001628:	d005      	beq.n	8001636 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001630:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e05b      	b.n	80016f4 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f8f8 	bl	8001836 <FLASH_IF_IsEmpty>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d037      	beq.n	80016bc <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001652:	f06f 0304 	mvn.w	r3, #4
 8001656:	e052      	b.n	80016fe <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800165e:	02db      	lsls	r3, r3, #11
 8001660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001664:	4619      	mov	r1, r3
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f01a fa90 	bl	801bb8c <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	6a39      	ldr	r1, [r7, #32]
 8001678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167a:	b292      	uxth	r2, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f01a fa85 	bl	801bb8c <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001682:	2200      	movs	r2, #0
 8001684:	2101      	movs	r1, #1
 8001686:	69f8      	ldr	r0, [r7, #28]
 8001688:	f000 f865 	bl	8001756 <FLASH_IF_EraseByPages>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001692:	f06f 0301 	mvn.w	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001698:	e030      	b.n	80016fc <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80016a0:	02db      	lsls	r3, r3, #11
 80016a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f88a 	bl	80017c2 <FLASH_IF_Write_Buffer>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d010      	beq.n	80016d6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80016b4:	f06f 0302 	mvn.w	r3, #2
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80016ba:	e01f      	b.n	80016fc <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c0:	4619      	mov	r1, r3
 80016c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c4:	f000 f87d 	bl	80017c2 <FLASH_IF_Write_Buffer>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80016ce:	f06f 0302 	mvn.w	r3, #2
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80016d4:	e012      	b.n	80016fc <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	4413      	add	r3, r2
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	4413      	add	r3, r2
 80016e4:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d99f      	bls.n	800163c <FLASH_IF_Write+0xa8>
  }

  return status;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	1fff75e0 	.word	0x1fff75e0
 800170c:	03fffc00 	.word	0x03fffc00
 8001710:	58004000 	.word	0x58004000

08001714 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001720:	e00b      	b.n	800173a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001722:	bf00      	nop
 8001724:	f7ff ff24 	bl	8001570 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1fa      	bne.n	8001724 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800172e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	2001      	movs	r0, #1
 8001736:	f003 fa59 	bl	8004bec <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001744:	4299      	cmp	r1, r3
 8001746:	bf08      	it	eq
 8001748:	4290      	cmpeq	r0, r2
 800174a:	d1ea      	bne.n	8001722 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800174c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b08a      	sub	sp, #40	; 0x28
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	460b      	mov	r3, r1
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800176c:	897b      	ldrh	r3, [r7, #10]
 800176e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fbd4 	bl	8004f28 <HAL_FLASHEx_Erase_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001786:	e00a      	b.n	800179e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001788:	f107 0214 	add.w	r2, r7, #20
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fb70 	bl	8004e78 <HAL_FLASHEx_Erase>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800179e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <FLASH_IF_EraseByPages+0x62>
 80017a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d101      	bne.n	80017b2 <FLASH_IF_EraseByPages+0x5c>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e003      	b.n	80017ba <FLASH_IF_EraseByPages+0x64>
 80017b2:	f06f 0301 	mvn.w	r3, #1
 80017b6:	e000      	b.n	80017ba <FLASH_IF_EraseByPages+0x64>
 80017b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b08a      	sub	sp, #40	; 0x28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	e020      	b.n	800181e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2208      	movs	r2, #8
 80017e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e4:	4618      	mov	r0, r3
 80017e6:	f01a f9d1 	bl	801bb8c <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80017ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f2:	bf08      	it	eq
 80017f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80017f8:	d005      	beq.n	8001806 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80017fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7ff ff88 	bl	8001714 <FLASH_IF_Write64>
 8001804:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3308      	adds	r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3308      	adds	r3, #8
 8001810:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3d9      	bcc.n	80017dc <FLASH_IF_Write_Buffer+0x1a>
 8001828:	e000      	b.n	800182c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800182a:	bf00      	nop
    }
  }

  return status;
 800182c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800182e:	4618      	mov	r0, r3
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001840:	e00a      	b.n	8001858 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d001      	beq.n	8001852 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800184e:	2301      	movs	r3, #1
 8001850:	e039      	b.n	80018c6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ef      	bne.n	8001842 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	e010      	b.n	800188e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f103 0208 	add.w	r2, r3, #8
 8001872:	60fa      	str	r2, [r7, #12]
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	bf08      	it	eq
 800187e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001882:	d001      	beq.n	8001888 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001884:	2301      	movs	r3, #1
 8001886:	e01e      	b.n	80018c6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3301      	adds	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	429a      	cmp	r2, r3
 8001896:	d3e9      	bcc.n	800186c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80018a6:	e00a      	b.n	80018be <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2bff      	cmp	r3, #255	; 0xff
 80018b2:	d001      	beq.n	80018b8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e006      	b.n	80018c6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f1      	bne.n	80018a8 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80018c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <LL_AHB2_GRP1_EnableClock>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	2002      	movs	r0, #2
 8001916:	f7ff ffdb 	bl	80018d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff ffd8 	bl	80018d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001920:	2080      	movs	r0, #128	; 0x80
 8001922:	f7ff ffd5 	bl	80018d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	2004      	movs	r0, #4
 8001928:	f7ff ffd2 	bl	80018d0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_GPS_Pin|RF_CTRL1_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001932:	483c      	ldr	r0, [pc, #240]	; (8001a24 <MX_GPIO_Init+0x124>)
 8001934:	f003 fdea 	bl	800550c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_ESP_Pin|LED_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f003 fde3 	bl	800550c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194c:	4836      	ldr	r0, [pc, #216]	; (8001a28 <MX_GPIO_Init+0x128>)
 800194e:	f003 fddd 	bl	800550c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB0 PB2
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_2
 8001952:	f241 031d 	movw	r3, #4125	; 0x101d
 8001956:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001958:	2303      	movs	r3, #3
 800195a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	482f      	ldr	r0, [pc, #188]	; (8001a24 <MX_GPIO_Init+0x124>)
 8001966:	f003 fba3 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EN_GPS_Pin|RF_CTRL1_Pin;
 800196a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800196e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <MX_GPIO_Init+0x124>)
 8001982:	f003 fb95 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA10 PA11 PA12
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001986:	f64f 43f1 	movw	r3, #64753	; 0xfcf1
 800198a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f003 fb88 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN_ESP_Pin|LED_Pin;
 80019a0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80019a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ba:	f003 fb79 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 80019be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d6:	f003 fb6b 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019da:	2308      	movs	r3, #8
 80019dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019de:	2303      	movs	r3, #3
 80019e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4810      	ldr	r0, [pc, #64]	; (8001a2c <MX_GPIO_Init+0x12c>)
 80019ec:	f003 fb60 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_CTRL2_Pin;
 80019f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_CTRL2_GPIO_Port, &GPIO_InitStruct);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4808      	ldr	r0, [pc, #32]	; (8001a28 <MX_GPIO_Init+0x128>)
 8001a08:	f003 fb52 	bl	80050b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2016      	movs	r0, #22
 8001a12:	f002 fcba 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a16:	2016      	movs	r0, #22
 8001a18:	f002 fcd1 	bl	80043be <HAL_NVIC_EnableIRQ>

}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	48000400 	.word	0x48000400
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48001c00 	.word	0x48001c00

08001a30 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	f023 0218 	bic.w	r2, r3, #24
 8001a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f001 fa4d 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a62:	f000 f811 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f7ff ff4b 	bl	8001900 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a6a:	f7ff fd6f 	bl	800154c <MX_DMA_Init>
  MX_ADC_Init();
 8001a6e:	f7ff fbe5 	bl	800123c <MX_ADC_Init>
  MX_RTC_Init();
 8001a72:	f000 f891 	bl	8001b98 <MX_RTC_Init>
  MX_LoRaWAN_Init();
 8001a76:	f008 fd23 	bl	800a4c0 <MX_LoRaWAN_Init>
  MX_USART1_UART_Init();
 8001a7a:	f000 ff47 	bl	800290c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a7e:	f000 ff91 	bl	80029a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001a82:	f008 fd25 	bl	800a4d0 <MX_LoRaWAN_Process>
 8001a86:	e7fc      	b.n	8001a82 <main+0x28>

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09a      	sub	sp, #104	; 0x68
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	2248      	movs	r2, #72	; 0x48
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f01b fb72 	bl	801d180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aae:	f003 fd5d 	bl	800556c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff ffbc 	bl	8001a30 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <SystemClock_Config+0xb0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <SystemClock_Config+0xb0>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <SystemClock_Config+0xb0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ad4:	2324      	movs	r3, #36	; 0x24
 8001ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ad8:	2381      	movs	r3, #129	; 0x81
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001ae4:	23b0      	movs	r3, #176	; 0xb0
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 f887 	bl	8005c04 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001afc:	f000 f81e 	bl	8001b3c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b00:	234f      	movs	r3, #79	; 0x4f
 8001b02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fc0c 	bl	800633c <HAL_RCC_ClockConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b2a:	f000 f807 	bl	8001b3c <Error_Handler>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3768      	adds	r7, #104	; 0x68
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	58000400 	.word	0x58000400

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>

08001b46 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <LL_APB1_GRP1_EnableClock>:
{
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	222c      	movs	r2, #44	; 0x2c
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f01b faeb 	bl	801d180 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <MX_RTC_Init+0xa4>)
 8001bae:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bb2:	221f      	movs	r2, #31
 8001bb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001be0:	f005 f868 	bl	8006cb4 <HAL_RTC_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001bea:	f7ff ffa7 	bl	8001b3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001bf0:	f005 fb56 	bl	80072a0 <HAL_RTCEx_SetSSRU_IT>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001bfa:	f7ff ff9f 	bl	8001b3c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 8001bfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c02:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c10:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_RTC_Init+0xa0>)
 8001c20:	f005 f8c2 	bl	8006da8 <HAL_RTC_SetAlarm_IT>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_RTC_Init+0x96>
  {
    Error_Handler();
 8001c2a:	f7ff ff87 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3730      	adds	r7, #48	; 0x30
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200003a0 	.word	0x200003a0
 8001c3c:	40002800 	.word	0x40002800

08001c40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b090      	sub	sp, #64	; 0x40
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	2238      	movs	r2, #56	; 0x38
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f01b fa95 	bl	801d180 <memset>
  if(rtcHandle->Instance==RTC)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_RTC_MspInit+0x74>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d125      	bne.n	8001cac <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c64:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 ff05 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c7c:	f7ff ff5e 	bl	8001b3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c80:	f7ff ff61 	bl	8001b46 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c88:	f7ff ff6d 	bl	8001b66 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2002      	movs	r0, #2
 8001c92:	f002 fb7a 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c96:	2002      	movs	r0, #2
 8001c98:	f002 fb91 	bl	80043be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	202a      	movs	r0, #42	; 0x2a
 8001ca2:	f002 fb72 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ca6:	202a      	movs	r0, #42	; 0x2a
 8001ca8:	f002 fb89 	bl	80043be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cac:	bf00      	nop
 8001cae:	3740      	adds	r7, #64	; 0x40
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40002800 	.word	0x40002800

08001cb8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	58000400 	.word	0x58000400

08001cd0 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001cec:	f001 f972 	bl	8002fd4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001cf0:	f7ff ffe2 	bl	8001cb8 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f003 fccb 	bl	8005690 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d02:	f001 f975 	bl	8002ff0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d06:	f001 f839 	bl	8002d7c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d12:	f001 f95f 	bl	8002fd4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d16:	2101      	movs	r1, #1
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f003 fc35 	bl	8005588 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d26:	f001 f963 	bl	8002ff0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <HardFault_Handler+0x4>

08001d46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <MemManage_Handler+0x4>

08001d4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <BusFault_Handler+0x4>

08001d52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f001 f916 	bl	8002fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d8e:	f005 fac3 	bl	8007318 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003a0 	.word	0x200003a0

08001d9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA1_Channel1_IRQHandler+0x10>)
 8001da2:	f002 fdb3 	bl	800490c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000514 	.word	0x20000514

08001db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 8001db4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001db8:	f003 fbc0 	bl	800553c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <USART1_IRQHandler+0x10>)
 8001dc6:	f006 f9af 	bl	8008128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200003f4 	.word	0x200003f4

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f006 f9a5 	bl	8008128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000484 	.word	0x20000484

08001de8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <RTC_Alarm_IRQHandler+0x10>)
 8001dee:	f005 f943 	bl	8007078 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200003a0 	.word	0x200003a0

08001dfc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e02:	f005 fdf1 	bl	80079e8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200003d8 	.word	0x200003d8

08001e10 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_SUBGHZ_Init+0x20>)
 8001e46:	2210      	movs	r2, #16
 8001e48:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_SUBGHZ_Init+0x20>)
 8001e4c:	f005 fb50 	bl	80074f0 <HAL_SUBGHZ_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e56:	f7ff fe71 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003d8 	.word	0x200003d8

08001e64 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7ff ffcf 	bl	8001e10 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2032      	movs	r0, #50	; 0x32
 8001e78:	f002 fa87 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e7c:	2032      	movs	r0, #50	; 0x32
 8001e7e:	f002 fa9e 	bl	80043be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <LL_FLASH_GetUDN+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	1fff7580 	.word	0x1fff7580

08001ec4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <LL_FLASH_GetDeviceID+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	1fff7584 	.word	0x1fff7584

08001edc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <LL_FLASH_GetSTCompanyID+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	1fff7584 	.word	0x1fff7584

08001ef4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff ffc6 	bl	8001e8a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001efe:	f01a fbd7 	bl	801c6b0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <SystemApp_Init+0x48>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f08:	f000 f948 	bl	800219c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f0c:	f01a fe60 	bl	801cbd0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f10:	480b      	ldr	r0, [pc, #44]	; (8001f40 <SystemApp_Init+0x4c>)
 8001f12:	f01a ff0b 	bl	801cd2c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <SystemApp_Init+0x50>)
 8001f18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f1c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f01a ff12 	bl	801cd48 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f24:	f7ff fa00 	bl	8001328 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f28:	f000 f974 	bl	8002214 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f2c:	f019 fd88 	bl	801ba40 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f30:	2101      	movs	r1, #1
 8001f32:	2001      	movs	r0, #1
 8001f34:	f019 fdc4 	bl	801bac0 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200003e4 	.word	0x200003e4
 8001f40:	080020d1 	.word	0x080020d1
 8001f44:	58004000 	.word	0x58004000

08001f48 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f4c:	f019 fde8 	bl	801bb20 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  uint16_t batteryLevelmV;

  /* USER CODE BEGIN GetBatteryLevel_0 */
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f5e:	f7ff fa63 	bl	8001428 <SYS_GetBatteryLevel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	80bb      	strh	r3, [r7, #4]
  return batteryLevelmV;
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	b2db      	uxtb	r3, r3
  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f916 	bl	80021b0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe ff4e 	bl	8000e28 <__aeabi_f2iz>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001f90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001fa8:	f7ff ff82 	bl	8001eb0 <LL_FLASH_GetUDN>
 8001fac:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d138      	bne.n	8002028 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001fb6:	f001 f829 	bl	800300c <HAL_GetUIDw0>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	f001 f83a 	bl	8003034 <HAL_GetUIDw2>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4423      	add	r3, r4
 8001fc4:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001fc6:	f001 f82b 	bl	8003020 <HAL_GetUIDw1>
 8001fca:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	0e1a      	lsrs	r2, r3, #24
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3307      	adds	r3, #7
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	0c1a      	lsrs	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3306      	adds	r3, #6
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	0a1a      	lsrs	r2, r3, #8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3305      	adds	r3, #5
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0e1a      	lsrs	r2, r3, #24
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3303      	adds	r3, #3
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0c1a      	lsrs	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3302      	adds	r3, #2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0a1a      	lsrs	r2, r3, #8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3301      	adds	r3, #1
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002026:	e031      	b.n	800208c <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3307      	adds	r3, #7
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	0a1a      	lsrs	r2, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3306      	adds	r3, #6
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	0c1a      	lsrs	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3305      	adds	r3, #5
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	0e1a      	lsrs	r2, r3, #24
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002056:	f7ff ff35 	bl	8001ec4 <LL_FLASH_GetDeviceID>
 800205a:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3303      	adds	r3, #3
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002066:	f7ff ff39 	bl	8001edc <LL_FLASH_GetSTCompanyID>
 800206a:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3302      	adds	r3, #2
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	0a1a      	lsrs	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	b2da      	uxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	701a      	strb	r2, [r3, #0]
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 800209e:	f7ff ff07 	bl	8001eb0 <LL_FLASH_GetUDN>
 80020a2:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d10b      	bne.n	80020c4 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80020ac:	f000 ffae 	bl	800300c <HAL_GetUIDw0>
 80020b0:	4604      	mov	r4, r0
 80020b2:	f000 ffb5 	bl	8003020 <HAL_GetUIDw1>
 80020b6:	4603      	mov	r3, r0
 80020b8:	405c      	eors	r4, r3
 80020ba:	f000 ffbb 	bl	8003034 <HAL_GetUIDw2>
 80020be:	4603      	mov	r3, r0
 80020c0:	4063      	eors	r3, r4
 80020c2:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 80020c4:	687b      	ldr	r3, [r7, #4]

}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}
	...

080020d0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f019 fe2e 	bl	801bd40 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <TimestampNow+0x3c>)
 80020ee:	2110      	movs	r1, #16
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f81d 	bl	8002130 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe f842 	bl	8000180 <strlen>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b29a      	uxth	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	080200d8 	.word	0x080200d8

08002110 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002114:	2101      	movs	r1, #1
 8002116:	2002      	movs	r0, #2
 8002118:	f019 fca2 	bl	801ba60 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002124:	2100      	movs	r1, #0
 8002126:	2002      	movs	r0, #2
 8002128:	f019 fc9a 	bl	801ba60 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002130:	b40c      	push	{r2, r3}
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f019 ffcb 	bl	801c0e4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002158:	b002      	add	sp, #8
 800215a:	4770      	bx	lr

0800215c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_GetTick+0x24>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800216e:	f000 f9df 	bl	8002530 <TIMER_IF_GetTimerValue>
 8002172:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200003e4 	.word	0x200003e4

08002184 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fa55 	bl	800263e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80021a0:	f000 ff52 	bl	8003048 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80021a4:	f000 ff56 	bl	8003054 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80021a8:	f000 ff5a 	bl	8003060 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <EnvSensors_Read+0x50>)
 80021ba:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <EnvSensors_Read+0x54>)
 80021be:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <EnvSensors_Read+0x58>)
 80021c2:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80021c4:	f7ff f8be 	bl	8001344 <SYS_GetTemperatureLevel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	121b      	asrs	r3, r3, #8
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fdd6 	bl	8000d80 <__aeabi_i2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <EnvSensors_Read+0x5c>)
 80021ee:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <EnvSensors_Read+0x60>)
 80021f4:	611a      	str	r2, [r3, #16]

  return 0;
 80021f6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	42480000 	.word	0x42480000
 8002204:	41900000 	.word	0x41900000
 8002208:	447a0000 	.word	0x447a0000
 800220c:	003e090d 	.word	0x003e090d
 8002210:	000503ab 	.word	0x000503ab

08002214 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
#else
  int32_t ret = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
	return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <_kill>:

int _kill(int pid, int sig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002242:	f01a ff73 	bl	801d12c <__errno>
 8002246:	4603      	mov	r3, r0
 8002248:	2216      	movs	r2, #22
 800224a:	601a      	str	r2, [r3, #0]
	return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_exit>:

void _exit (int status)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffe7 	bl	8002238 <_kill>
	while (1) {}		/* Make sure we hang here */
 800226a:	e7fe      	b.n	800226a <_exit+0x12>

0800226c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e00a      	b.n	8002294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800227e:	f3af 8000 	nop.w
 8002282:	4601      	mov	r1, r0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	b2ca      	uxtb	r2, r1
 800228c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbf0      	blt.n	800227e <_read+0x12>
	}

return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e009      	b.n	80022cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf1      	blt.n	80022b8 <_write+0x12>
	}
	return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_close>:

int _close(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	return -1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002304:	605a      	str	r2, [r3, #4]
	return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_isatty>:

int _isatty(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return 1;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	return 0;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f01a fedc 	bl	801d12c <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20010000 	.word	0x20010000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	200003e8 	.word	0x200003e8
 80023a8:	20002570 	.word	0x20002570

080023ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <TIMER_IF_Init+0x5c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <TIMER_IF_Init+0x60>)
 80023ea:	f04f 32ff 	mov.w	r2, #4294967295
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80023f0:	f7ff fbd2 	bl	8001b98 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80023f4:	f000 f856 	bl	80024a4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <TIMER_IF_Init+0x60>)
 80023fe:	f004 fddf 	bl	8006fc0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <TIMER_IF_Init+0x60>)
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <TIMER_IF_Init+0x60>)
 800240c:	f004 ff16 	bl	800723c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002410:	2000      	movs	r0, #0
 8002412:	f000 f9d3 	bl	80027bc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002416:	f000 f85f 	bl	80024d8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <TIMER_IF_Init+0x5c>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002420:	79fb      	ldrb	r3, [r7, #7]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200003ec 	.word	0x200003ec
 8002430:	200003a0 	.word	0x200003a0

08002434 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	222c      	movs	r2, #44	; 0x2c
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f01a fe98 	bl	801d180 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002450:	f000 f828 	bl	80024a4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <TIMER_IF_StartTimer+0x68>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	43db      	mvns	r3, r3
 8002466:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800246c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002470:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	2201      	movs	r2, #1
 800247e:	4619      	mov	r1, r3
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <TIMER_IF_StartTimer+0x6c>)
 8002482:	f004 fc91 	bl	8006da8 <HAL_RTC_SetAlarm_IT>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800248c:	f7ff fb56 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002490:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002494:	4618      	mov	r0, r3
 8002496:	3738      	adds	r7, #56	; 0x38
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200003f0 	.word	0x200003f0
 80024a0:	200003a0 	.word	0x200003a0

080024a4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <TIMER_IF_StopTimer+0x2c>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80024b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b8:	4806      	ldr	r0, [pc, #24]	; (80024d4 <TIMER_IF_StopTimer+0x30>)
 80024ba:	f004 fd81 	bl	8006fc0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <TIMER_IF_StopTimer+0x30>)
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80024c6:	79fb      	ldrb	r3, [r7, #7]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40002800 	.word	0x40002800
 80024d4:	200003a0 	.word	0x200003a0

080024d8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80024dc:	f000 f98e 	bl	80027fc <GetTimerTicks>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <TIMER_IF_SetTimerContext+0x18>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80024e6:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <TIMER_IF_SetTimerContext+0x18>)
 80024e8:	681b      	ldr	r3, [r3, #0]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003f0 	.word	0x200003f0

080024f4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <TIMER_IF_GetTimerContext+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	200003f0 	.word	0x200003f0

08002508 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002512:	f000 f973 	bl	80027fc <GetTimerTicks>
 8002516:	4602      	mov	r2, r0
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200003f0 	.word	0x200003f0

08002530 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <TIMER_IF_GetTimerValue+0x24>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002542:	f000 f95b 	bl	80027fc <GetTimerTicks>
 8002546:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200003ec 	.word	0x200003ec

08002558 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002562:	2303      	movs	r3, #3
 8002564:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002566:	687b      	ldr	r3, [r7, #4]
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002572:	b5b0      	push	{r4, r5, r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800257a:	2100      	movs	r1, #0
 800257c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	2000      	movs	r0, #0
 8002582:	460a      	mov	r2, r1
 8002584:	4603      	mov	r3, r0
 8002586:	0d95      	lsrs	r5, r2, #22
 8002588:	0294      	lsls	r4, r2, #10
 800258a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fe fc6d 	bl	8000e74 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4613      	mov	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bdb0      	pop	{r4, r5, r7, pc}

080025ac <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80025ac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025b6:	2100      	movs	r1, #0
 80025b8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	2000      	movs	r0, #0
 80025be:	460c      	mov	r4, r1
 80025c0:	4605      	mov	r5, r0
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f04f 0a00 	mov.w	sl, #0
 80025ca:	f04f 0b00 	mov.w	fp, #0
 80025ce:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80025d2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80025d6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80025da:	4650      	mov	r0, sl
 80025dc:	4659      	mov	r1, fp
 80025de:	1b02      	subs	r2, r0, r4
 80025e0:	eb61 0305 	sbc.w	r3, r1, r5
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	0099      	lsls	r1, r3, #2
 80025ee:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80025f2:	0090      	lsls	r0, r2, #2
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	eb12 0804 	adds.w	r8, r2, r4
 80025fc:	eb43 0905 	adc.w	r9, r3, r5
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002610:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002614:	4690      	mov	r8, r2
 8002616:	4699      	mov	r9, r3
 8002618:	4640      	mov	r0, r8
 800261a:	4649      	mov	r1, r9
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	0a82      	lsrs	r2, r0, #10
 8002626:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800262a:	0a8b      	lsrs	r3, r1, #10
 800262c:	4613      	mov	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800263c:	4770      	bx	lr

0800263e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff93 	bl	8002572 <TIMER_IF_Convert_ms2Tick>
 800264c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800264e:	f000 f8d5 	bl	80027fc <GetTimerTicks>
 8002652:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002654:	e000      	b.n	8002658 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002656:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002658:	f000 f8d0 	bl	80027fc <GetTimerTicks>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f6      	bhi.n	8002656 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800267a:	f01a f967 	bl	801c94c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800268e:	f000 f8a5 	bl	80027dc <TIMER_IF_BkUp_Read_MSBticks>
 8002692:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3301      	adds	r3, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f88f 	bl	80027bc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80026a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80026b4:	f000 f8a2 	bl	80027fc <GetTimerTicks>
 80026b8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80026ba:	f000 f88f 	bl	80027dc <TIMER_IF_BkUp_Read_MSBticks>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2200      	movs	r2, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	60fa      	str	r2, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	000b      	movs	r3, r1
 80026d4:	2200      	movs	r2, #0
 80026d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d8:	2000      	movs	r0, #0
 80026da:	460c      	mov	r4, r1
 80026dc:	4605      	mov	r5, r0
 80026de:	eb12 0804 	adds.w	r8, r2, r4
 80026e2:	eb43 0905 	adc.w	r9, r3, r5
 80026e6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80026ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	0a82      	lsrs	r2, r0, #10
 80026f8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80026fc:	0a8b      	lsrs	r3, r1, #10
 80026fe:	4613      	mov	r3, r2
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2200      	movs	r2, #0
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002710:	f04f 0b00 	mov.w	fp, #0
 8002714:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff46 	bl	80025ac <TIMER_IF_Convert_Tick2ms>
 8002720:	4603      	mov	r3, r0
 8002722:	b29a      	uxth	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800272a:	4618      	mov	r0, r3
 800272c:	3730      	adds	r7, #48	; 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002734 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	2100      	movs	r1, #0
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002742:	f004 fe0d 	bl	8007360 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200003a0 	.word	0x200003a0

08002754 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	2101      	movs	r1, #1
 8002760:	4803      	ldr	r0, [pc, #12]	; (8002770 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002762:	f004 fdfd 	bl	8007360 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200003a0 	.word	0x200003a0

08002774 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800277e:	2100      	movs	r1, #0
 8002780:	4804      	ldr	r0, [pc, #16]	; (8002794 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002782:	f004 fe05 	bl	8007390 <HAL_RTCEx_BKUPRead>
 8002786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200003a0 	.word	0x200003a0

08002798 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80027a2:	2101      	movs	r1, #1
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80027a6:	f004 fdf3 	bl	8007390 <HAL_RTCEx_BKUPRead>
 80027aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200003a0 	.word	0x200003a0

080027bc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2102      	movs	r1, #2
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80027ca:	f004 fdc9 	bl	8007360 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200003a0 	.word	0x200003a0

080027dc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80027e2:	2102      	movs	r1, #2
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80027e6:	f004 fdd3 	bl	8007390 <HAL_RTCEx_BKUPRead>
 80027ea:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80027ec:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200003a0 	.word	0x200003a0

080027fc <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002802:	480b      	ldr	r0, [pc, #44]	; (8002830 <GetTimerTicks+0x34>)
 8002804:	f7ff fdd8 	bl	80023b8 <LL_RTC_TIME_GetSubSecond>
 8002808:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800280a:	e003      	b.n	8002814 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800280c:	4808      	ldr	r0, [pc, #32]	; (8002830 <GetTimerTicks+0x34>)
 800280e:	f7ff fdd3 	bl	80023b8 <LL_RTC_TIME_GetSubSecond>
 8002812:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <GetTimerTicks+0x34>)
 8002816:	f7ff fdcf 	bl	80023b8 <LL_RTC_TIME_GetSubSecond>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4293      	cmp	r3, r2
 8002820:	d1f4      	bne.n	800280c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40002800 	.word	0x40002800

08002834 <LL_AHB2_GRP1_EnableClock>:
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4313      	orrs	r3, r2
 800284a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002858:	68fb      	ldr	r3, [r7, #12]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_APB1_GRP1_EnableClock>:
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4313      	orrs	r3, r2
 800287a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <LL_APB1_GRP1_DisableClock>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028aa:	4013      	ands	r3, r2
 80028ac:	658b      	str	r3, [r1, #88]	; 0x58
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <LL_APB2_GRP1_EnableClock>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028dc:	68fb      	ldr	r3, [r7, #12]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <LL_APB2_GRP1_DisableClock>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fe:	4013      	ands	r3, r2
 8002900:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <MX_USART1_UART_Init+0x94>)
 8002914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <MX_USART1_UART_Init+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_USART1_UART_Init+0x90>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_USART1_UART_Init+0x90>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002954:	4811      	ldr	r0, [pc, #68]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002956:	f005 fa06 	bl	8007d66 <HAL_UART_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002960:	f7ff f8ec 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002964:	2100      	movs	r1, #0
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <MX_USART1_UART_Init+0x90>)
 8002968:	f007 fcc0 	bl	800a2ec <HAL_UARTEx_SetTxFifoThreshold>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002972:	f7ff f8e3 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002976:	2100      	movs	r1, #0
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <MX_USART1_UART_Init+0x90>)
 800297a:	f007 fcf5 	bl	800a368 <HAL_UARTEx_SetRxFifoThreshold>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002984:	f7ff f8da 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_USART1_UART_Init+0x90>)
 800298a:	f007 fc77 	bl	800a27c <HAL_UARTEx_DisableFifoMode>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002994:	f7ff f8d2 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200003f4 	.word	0x200003f4
 80029a0:	40013800 	.word	0x40013800

080029a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029aa:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <MX_USART2_UART_Init+0x94>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029ca:	2204      	movs	r2, #4
 80029cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ec:	4811      	ldr	r0, [pc, #68]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 80029ee:	f005 f9ba 	bl	8007d66 <HAL_UART_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80029f8:	f7ff f8a0 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029fc:	2100      	movs	r1, #0
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 8002a00:	f007 fc74 	bl	800a2ec <HAL_UARTEx_SetTxFifoThreshold>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a0a:	f7ff f897 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4808      	ldr	r0, [pc, #32]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 8002a12:	f007 fca9 	bl	800a368 <HAL_UARTEx_SetRxFifoThreshold>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a1c:	f7ff f88e 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <MX_USART2_UART_Init+0x90>)
 8002a22:	f007 fc2b 	bl	800a27c <HAL_UARTEx_DisableFifoMode>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a2c:	f7ff f886 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000484 	.word	0x20000484
 8002a38:	40004400 	.word	0x40004400

08002a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b096      	sub	sp, #88	; 0x58
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	2238      	movs	r2, #56	; 0x38
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f01a fb8f 	bl	801d180 <memset>
  if(uartHandle->Instance==USART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_UART_MspInit+0x14c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d156      	bne.n	8002b1a <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_UART_MspInit+0x150>)
 8002a72:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 f801 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a84:	f7ff f85a 	bl	8001b3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a8c:	f7ff ff14 	bl	80028b8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7ff fecf 	bl	8002834 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4837      	ldr	r0, [pc, #220]	; (8002b90 <HAL_UART_MspInit+0x154>)
 8002ab2:	f002 fafd 	bl	80050b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002ab6:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002ab8:	4a37      	ldr	r2, [pc, #220]	; (8002b98 <HAL_UART_MspInit+0x15c>)
 8002aba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002abe:	2212      	movs	r2, #18
 8002ac0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac2:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ace:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002aec:	4829      	ldr	r0, [pc, #164]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002aee:	f001 fc93 	bl	8004418 <HAL_DMA_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002af8:	f7ff f820 	bl	8001b3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002b00:	679a      	str	r2, [r3, #120]	; 0x78
 8002b02:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_UART_MspInit+0x158>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2024      	movs	r0, #36	; 0x24
 8002b0e:	f001 fc3c 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b12:	2024      	movs	r0, #36	; 0x24
 8002b14:	f001 fc53 	bl	80043be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b18:	e032      	b.n	8002b80 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_UART_MspInit+0x160>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d12d      	bne.n	8002b80 <HAL_UART_MspInit+0x144>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b24:	2302      	movs	r3, #2
 8002b26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_UART_MspInit+0x164>)
 8002b2a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 ffa5 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8002b3c:	f7fe fffe 	bl	8001b3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b44:	f7ff fe8e 	bl	8002864 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff fe73 	bl	8002834 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b4e:	230c      	movs	r3, #12
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b56:	2301      	movs	r3, #1
 8002b58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5e:	2307      	movs	r3, #7
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6c:	f002 faa0 	bl	80050b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	2025      	movs	r0, #37	; 0x25
 8002b76:	f001 fc08 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7a:	2025      	movs	r0, #37	; 0x25
 8002b7c:	f001 fc1f 	bl	80043be <HAL_NVIC_EnableIRQ>
}
 8002b80:	bf00      	nop
 8002b82:	3758      	adds	r7, #88	; 0x58
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	00030001 	.word	0x00030001
 8002b90:	48000400 	.word	0x48000400
 8002b94:	20000514 	.word	0x20000514
 8002b98:	40020008 	.word	0x40020008
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	000c0004 	.word	0x000c0004

08002ba4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_UART_MspDeInit+0x60>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d110      	bne.n	8002bd8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bba:	f7ff fe95 	bl	80028e8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8002bbe:	21c0      	movs	r1, #192	; 0xc0
 8002bc0:	4811      	ldr	r0, [pc, #68]	; (8002c08 <HAL_UART_MspDeInit+0x64>)
 8002bc2:	f002 fbd5 	bl	8005370 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fccc 	bl	8004568 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002bd0:	2024      	movs	r0, #36	; 0x24
 8002bd2:	f001 fc02 	bl	80043da <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002bd6:	e010      	b.n	8002bfa <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_UART_MspDeInit+0x68>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10b      	bne.n	8002bfa <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002be2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002be6:	f7ff fe55 	bl	8002894 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002bea:	210c      	movs	r1, #12
 8002bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf0:	f002 fbbe 	bl	8005370 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002bf4:	2025      	movs	r0, #37	; 0x25
 8002bf6:	f001 fbf0 	bl	80043da <HAL_NVIC_DisableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40013800 	.word	0x40013800
 8002c08:	48000400 	.word	0x48000400
 8002c0c:	40004400 	.word	0x40004400

08002c10 <LL_APB2_GRP1_ForceReset>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <LL_APB2_GRP1_ReleaseReset>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c48:	4013      	ands	r3, r2
 8002c4a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <LL_EXTI_EnableIT_0_31+0x24>)
 8002c62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c66:	4905      	ldr	r1, [pc, #20]	; (8002c7c <LL_EXTI_EnableIT_0_31+0x24>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	58000800 	.word	0x58000800

08002c80 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c88:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <vcom_Init+0x28>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002c8e:	f7fe fc5d 	bl	800154c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002c92:	f7ff fe3b 	bl	800290c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002c96:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c9a:	f7ff ffdd 	bl	8002c58 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002c9e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000578 	.word	0x20000578

08002cac <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002cb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cb4:	f7ff ffac 	bl	8002c10 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002cb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cbc:	f7ff ffb9 	bl	8002c32 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002cc0:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <vcom_DeInit+0x28>)
 8002cc2:	f7ff ff6f 	bl	8002ba4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
	HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f001 fb87 	bl	80043da <HAL_NVIC_DisableIRQ>

	return UTIL_ADV_TRACE_OK;
 8002ccc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200003f4 	.word	0x200003f4

08002cd8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4804      	ldr	r0, [pc, #16]	; (8002cfc <vcom_Trace_DMA+0x24>)
 8002cec:	f005 f98a 	bl	8008004 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002cf0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200003f4 	.word	0x200003f4

08002d00 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <vcom_ReceiveInit+0x70>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002d0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d12:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d1c:	4815      	ldr	r0, [pc, #84]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d1e:	f007 fa20 	bl	800a162 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002d22:	bf00      	nop
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d0f7      	beq.n	8002d24 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002d34:	bf00      	nop
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d44:	d1f7      	bne.n	8002d36 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d54:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002d56:	4807      	ldr	r0, [pc, #28]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d58:	f007 fa5e 	bl	800a218 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4906      	ldr	r1, [pc, #24]	; (8002d78 <vcom_ReceiveInit+0x78>)
 8002d60:	4804      	ldr	r0, [pc, #16]	; (8002d74 <vcom_ReceiveInit+0x74>)
 8002d62:	f005 f8f9 	bl	8007f58 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002d66:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	2000057c 	.word	0x2000057c
 8002d74:	200003f4 	.word	0x200003f4
 8002d78:	20000574 	.word	0x20000574

08002d7c <vcom_Resume>:

void vcom_Resume(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d80:	4808      	ldr	r0, [pc, #32]	; (8002da4 <vcom_Resume+0x28>)
 8002d82:	f004 fff0 	bl	8007d66 <HAL_UART_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002d8c:	f7fe fed6 	bl	8001b3c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d90:	4805      	ldr	r0, [pc, #20]	; (8002da8 <vcom_Resume+0x2c>)
 8002d92:	f001 fb41 	bl	8004418 <HAL_DMA_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002d9c:	f7fe fece 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200003f4 	.word	0x200003f4
 8002da8:	20000514 	.word	0x20000514

08002dac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <HAL_UART_TxCpltCallback+0x24>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d103      	bne.n	8002dc6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_UART_TxCpltCallback+0x28>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	20000578 	.word	0x20000578

08002dd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */
	if (huart->Instance == USART1) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <HAL_UART_RxCpltCallback+0x64>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d103      	bne.n	8002df2 <HAL_UART_RxCpltCallback+0x1a>
		esp_byte_recibido = 1;
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_UART_RxCpltCallback+0x68>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
		return;
 8002df0:	e021      	b.n	8002e36 <HAL_UART_RxCpltCallback+0x5e>
	}
	if (huart->Instance == USART2) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <HAL_UART_RxCpltCallback+0x6c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <HAL_UART_RxCpltCallback+0x2c>
		gps_byte_recibido = 1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_UART_RxCpltCallback+0x70>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
		return;
 8002e02:	e018      	b.n	8002e36 <HAL_UART_RxCpltCallback+0x5e>
	}
  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <HAL_UART_RxCpltCallback+0x64>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <HAL_UART_RxCpltCallback+0x5e>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_UART_RxCpltCallback+0x74>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_UART_RxCpltCallback+0x54>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_UART_RxCpltCallback+0x54>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_UART_RxCpltCallback+0x74>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2101      	movs	r1, #1
 8002e28:	4809      	ldr	r0, [pc, #36]	; (8002e50 <HAL_UART_RxCpltCallback+0x78>)
 8002e2a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <HAL_UART_RxCpltCallback+0x78>)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f005 f891 	bl	8007f58 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	20000716 	.word	0x20000716
 8002e44:	40004400 	.word	0x40004400
 8002e48:	20000717 	.word	0x20000717
 8002e4c:	2000057c 	.word	0x2000057c
 8002e50:	20000574 	.word	0x20000574

08002e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e54:	480d      	ldr	r0, [pc, #52]	; (8002e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e58:	f7ff faa8 	bl	80023ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5e:	490d      	ldr	r1, [pc, #52]	; (8002e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <LoopForever+0xe>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e74:	4c0a      	ldr	r4, [pc, #40]	; (8002ea0 <LoopForever+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e82:	f01a f959 	bl	801d138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e86:	f7fe fde8 	bl	8001a5a <main>

08002e8a <LoopForever>:

LoopForever:
    b LoopForever
 8002e8a:	e7fe      	b.n	8002e8a <LoopForever>
  ldr   r0, =_estack
 8002e8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8002e98:	08020ce4 	.word	0x08020ce4
  ldr r2, =_sbss
 8002e9c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8002ea0:	20002570 	.word	0x20002570

08002ea4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC_IRQHandler>
	...

08002ea8 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	6053      	str	r3, [r2, #4]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	e0042000 	.word	0xe0042000

08002ec4 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ece:	f023 0302 	bic.w	r3, r3, #2
 8002ed2:	6053      	str	r3, [r2, #4]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	e0042000 	.word	0xe0042000

08002ee0 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a03      	ldr	r2, [pc, #12]	; (8002ef8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6053      	str	r3, [r2, #4]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	e0042000 	.word	0xe0042000

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f06:	2003      	movs	r0, #3
 8002f08:	f001 fa34 	bl	8004374 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f0c:	f003 fbda 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_Init+0x3c>)
 8002f14:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f16:	200f      	movs	r0, #15
 8002f18:	f000 f810 	bl	8002f3c <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	e001      	b.n	8002f2c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f28:	f7fe ff01 	bl	8001d2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_InitTick+0x6c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d024      	beq.n	8002f9a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f50:	f003 fbb8 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_InitTick+0x6c>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f60:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 fa48 	bl	80043fe <HAL_SYSTICK_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	d809      	bhi.n	8002f8e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f82:	f001 fa02 	bl	800438a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_InitTick+0x70>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	e007      	b.n	8002f9e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	e004      	b.n	8002f9e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e001      	b.n	8002f9e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_IncTick+0x1c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	20000580 	.word	0x20000580

08002fd4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_SuspendTick+0x18>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a03      	ldr	r2, [pc, #12]	; (8002fec <HAL_SuspendTick+0x18>)
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <HAL_ResumeTick+0x18>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <HAL_ResumeTick+0x18>)
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_GetUIDw0+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	1fff7590 	.word	0x1fff7590

08003020 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <HAL_GetUIDw1+0x10>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	1fff7594 	.word	0x1fff7594

08003034 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003038:	4b02      	ldr	r3, [pc, #8]	; (8003044 <HAL_GetUIDw2+0x10>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	1fff7598 	.word	0x1fff7598

08003048 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800304c:	f7ff ff2c 	bl	8002ea8 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003058:	f7ff ff34 	bl	8002ec4 <LL_DBGMCU_DisableDBGStopMode>
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003064:	f7ff ff3c 	bl	8002ee0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2107      	movs	r1, #7
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	401a      	ands	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2107      	movs	r1, #7
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	210f      	movs	r1, #15
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	401a      	ands	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	0e9b      	lsrs	r3, r3, #26
 800315e:	f003 010f 	and.w	r1, r3, #15
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	43db      	mvns	r3, r3
 80031dc:	401a      	ands	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0219      	lsls	r1, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	400b      	ands	r3, r1
 80031e6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80031ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800320e:	f023 0317 	bic.w	r3, r3, #23
 8003212:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003234:	f023 0317 	bic.w	r3, r3, #23
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6093      	str	r3, [r2, #8]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325a:	d101      	bne.n	8003260 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800327c:	f023 0317 	bic.w	r3, r3, #23
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032a2:	f023 0317 	bic.w	r3, r3, #23
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_IsEnabled+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_IsEnabled+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d101      	bne.n	80032f4 <LL_ADC_IsDisableOngoing+0x18>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_ADC_IsDisableOngoing+0x1a>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003310:	f023 0317 	bic.w	r3, r3, #23
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003336:	f023 0317 	bic.w	r3, r3, #23
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d101      	bne.n	8003364 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e19e      	b.n	80036d0 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd ff99 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff44 	bl	8003246 <LL_ADC_IsInternalRegulatorEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d115      	bne.n	80033f0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff18 	bl	80031fe <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ce:	4b99      	ldr	r3, [pc, #612]	; (8003634 <HAL_ADC_Init+0x2c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	4a98      	ldr	r2, [pc, #608]	; (8003638 <HAL_ADC_Init+0x2c8>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	3301      	adds	r3, #1
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033e2:	e002      	b.n	80033ea <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff26 	bl	8003246 <LL_ADC_IsInternalRegulatorEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff93 	bl	800334c <LL_ADC_REG_IsConversionOngoing>
 8003426:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 8144 	bne.w	80036be <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 8140 	bne.w	80036be <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff30 	bl	80032b8 <LL_ADC_IsEnabled>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 80a7 	bne.w	80035ae <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7e1b      	ldrb	r3, [r3, #24]
 8003468:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800346a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7e5b      	ldrb	r3, [r3, #25]
 8003470:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003472:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7e9b      	ldrb	r3, [r3, #26]
 8003478:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800347a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003480:	2a00      	cmp	r2, #0
 8003482:	d002      	beq.n	800348a <HAL_ADC_Init+0x11a>
 8003484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003488:	e000      	b.n	800348c <HAL_ADC_Init+0x11c>
 800348a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800348c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003492:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da04      	bge.n	80034a6 <HAL_ADC_Init+0x136>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034a4:	e001      	b.n	80034aa <HAL_ADC_Init+0x13a>
 80034a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80034aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034b2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034b4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d114      	bne.n	80034f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7e9b      	ldrb	r3, [r3, #26]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e00b      	b.n	80034f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003504:	4313      	orrs	r3, r2
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003516:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	430b      	orrs	r3, r1
 8003522:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003530:	4313      	orrs	r3, r2
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353e:	2b01      	cmp	r3, #1
 8003540:	d111      	bne.n	8003566 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800354e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003554:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800355a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_ADC_Init+0x2cc>)
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	430b      	orrs	r3, r1
 8003578:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003582:	d014      	beq.n	80035ae <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d00f      	beq.n	80035ae <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003596:	d00a      	beq.n	80035ae <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_ADC_Init+0x2d0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035a8:	4925      	ldr	r1, [pc, #148]	; (8003640 <HAL_ADC_Init+0x2d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	461a      	mov	r2, r3
 80035b8:	2100      	movs	r1, #0
 80035ba:	f7ff fd76 	bl	80030aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	461a      	mov	r2, r3
 80035c8:	491e      	ldr	r1, [pc, #120]	; (8003644 <HAL_ADC_Init+0x2d4>)
 80035ca:	f7ff fd6e 	bl	80030aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f062 020f 	orn	r2, r2, #15
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
 80035e6:	e042      	b.n	800366e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f0:	d13d      	bne.n	800366e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e00c      	b.n	8003612 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d006      	beq.n	800361a <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3301      	adds	r3, #1
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b07      	cmp	r3, #7
 8003616:	d9ef      	bls.n	80035f8 <HAL_ADC_Init+0x288>
 8003618:	e000      	b.n	800361c <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800361a:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d112      	bne.n	8003648 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f062 020f 	orn	r2, r2, #15
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
 8003632:	e01c      	b.n	800366e <HAL_ADC_Init+0x2fe>
 8003634:	20000000 	.word	0x20000000
 8003638:	053e2d63 	.word	0x053e2d63
 800363c:	1ffffc02 	.word	0x1ffffc02
 8003640:	40012708 	.word	0x40012708
 8003644:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	3b01      	subs	r3, #1
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	f003 031c 	and.w	r3, r3, #28
 800365a:	f06f 020f 	mvn.w	r2, #15
 800365e:	fa02 f103 	lsl.w	r1, r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fd36 	bl	80030e6 <LL_ADC_GetSamplingTimeCommonChannels>
 800367a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003680:	429a      	cmp	r2, r3
 8003682:	d10b      	bne.n	800369c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	f023 0303 	bic.w	r3, r3, #3
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800369a:	e018      	b.n	80036ce <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f023 0312 	bic.w	r3, r3, #18
 80036a4:	f043 0210 	orr.w	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036bc:	e007      	b.n	80036ce <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f043 0210 	orr.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06a      	b.n	80037c0 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fabe 	bl	8003c78 <ADC_ConversionStop>
 80036fc:	4603      	mov	r3, r0
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb82 	bl	8003e10 <ADC_Disable>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fd7f 	bl	8003224 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003734:	f023 0303 	bic.w	r3, r3, #3
 8003738:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f240 329f 	movw	r2, #927	; 0x39f
 8003742:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68d9      	ldr	r1, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_ADC_DeInit+0xf0>)
 8003750:	400b      	ands	r3, r1
 8003752:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003762:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0207 	bic.w	r2, r2, #7
 8003772:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003782:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_ADC_DeInit+0xf4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <HAL_ADC_DeInit+0xf4>)
 8003798:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800379c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fdae 	bl	8001300 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	833e0200 	.word	0x833e0200
 80037cc:	40012708 	.word	0x40012708

080037d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fdb5 	bl	800334c <LL_ADC_REG_IsConversionOngoing>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d132      	bne.n	800384e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_Start+0x26>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e02e      	b.n	8003854 <HAL_ADC_Start+0x84>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa80 	bl	8003d04 <ADC_Enable>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11a      	bne.n	8003844 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	221c      	movs	r2, #28
 800382e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fd5f 	bl	8003300 <LL_ADC_REG_StartConversion>
 8003842:	e006      	b.n	8003852 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800384c:	e001      	b.n	8003852 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800384e:	2302      	movs	r3, #2
 8003850:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_ADC_Stop+0x16>
 800386e:	2302      	movs	r3, #2
 8003870:	e022      	b.n	80038b8 <HAL_ADC_Stop+0x5c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9fc 	bl	8003c78 <ADC_ConversionStop>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d111      	bne.n	80038ae <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fac0 	bl	8003e10 <ADC_Disable>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d102      	bne.n	80038d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80038d2:	2308      	movs	r3, #8
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e010      	b.n	80038fa <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e077      	b.n	80039e6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80038f6:	2304      	movs	r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038fa:	f7fe fc2f 	bl	800215c <HAL_GetTick>
 80038fe:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003900:	e021      	b.n	8003946 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d01d      	beq.n	8003946 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800390a:	f7fe fc27 	bl	800215c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <HAL_ADC_PollForConversion+0x60>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d112      	bne.n	8003946 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f043 0204 	orr.w	r2, r3, #4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0d6      	beq.n	8003902 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fbd6 	bl	8003116 <LL_ADC_REG_IsTriggerSourceSWStart>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d031      	beq.n	80039d4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e9b      	ldrb	r3, [r3, #26]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d12d      	bne.n	80039d4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d126      	bne.n	80039d4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fcde 	bl	800334c <LL_ADC_REG_IsConversionOngoing>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d112      	bne.n	80039bc <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 020c 	bic.w	r2, r2, #12
 80039a4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	; 0x58
 80039ba:	e00b      	b.n	80039d4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7e1b      	ldrb	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	220c      	movs	r2, #12
 80039e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x28>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e110      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x24a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fc85 	bl	800334c <LL_ADC_REG_IsConversionOngoing>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f040 80f7 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	f000 80b1 	beq.w	8003bb6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5c:	d004      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a62:	4a7e      	ldr	r2, [pc, #504]	; (8003c5c <HAL_ADC_ConfigChannel+0x254>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7ff fb82 	bl	800317c <LL_ADC_REG_SetSequencerChAdd>
 8003a78:	e041      	b.n	8003afe <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	210f      	movs	r1, #15
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0xa0>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	e011      	b.n	8003acc <HAL_ADC_ConfigChannel+0xc4>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	e003      	b.n	8003acc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	6849      	ldr	r1, [r1, #4]
 8003ad0:	f001 011f 	and.w	r1, r1, #31
 8003ad4:	408b      	lsls	r3, r1
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d808      	bhi.n	8003afe <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f7ff fb1e 	bl	800313a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7ff fb5b 	bl	80031c6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f280 8097 	bge.w	8003c48 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b1a:	4851      	ldr	r0, [pc, #324]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003b1c:	f7ff fab8 	bl	8003090 <LL_ADC_GetCommonPathInternalCh>
 8003b20:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4f      	ldr	r2, [pc, #316]	; (8003c64 <HAL_ADC_ConfigChannel+0x25c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d120      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11b      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4848      	ldr	r0, [pc, #288]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003b40:	f7ff fa94 	bl	800306c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b44:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <HAL_ADC_ConfigChannel+0x260>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	4a48      	ldr	r2, [pc, #288]	; (8003c6c <HAL_ADC_ConfigChannel+0x264>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b5e:	e002      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f9      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b6c:	e06c      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3f      	ldr	r2, [pc, #252]	; (8003c70 <HAL_ADC_ConfigChannel+0x268>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10c      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x18a>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4835      	ldr	r0, [pc, #212]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003b8c:	f7ff fa6e 	bl	800306c <LL_ADC_SetCommonPathInternalCh>
 8003b90:	e05a      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a37      	ldr	r2, [pc, #220]	; (8003c74 <HAL_ADC_ConfigChannel+0x26c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d155      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d150      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bac:	4619      	mov	r1, r3
 8003bae:	482c      	ldr	r0, [pc, #176]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003bb0:	f7ff fa5c 	bl	800306c <LL_ADC_SetCommonPathInternalCh>
 8003bb4:	e048      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bbe:	d004      	beq.n	8003bca <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bc4:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <HAL_ADC_ConfigChannel+0x254>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d107      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7ff fae3 	bl	80031a0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da32      	bge.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be2:	481f      	ldr	r0, [pc, #124]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003be4:	f7ff fa54 	bl	8003090 <LL_ADC_GetCommonPathInternalCh>
 8003be8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_ADC_ConfigChannel+0x25c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d107      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4818      	ldr	r0, [pc, #96]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003bfe:	f7ff fa35 	bl	800306c <LL_ADC_SetCommonPathInternalCh>
 8003c02:	e021      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_ADC_ConfigChannel+0x268>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d107      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c14:	4619      	mov	r1, r3
 8003c16:	4812      	ldr	r0, [pc, #72]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003c18:	f7ff fa28 	bl	800306c <LL_ADC_SetCommonPathInternalCh>
 8003c1c:	e014      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_ADC_ConfigChannel+0x26c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10f      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c2e:	4619      	mov	r1, r3
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <HAL_ADC_ConfigChannel+0x258>)
 8003c32:	f7ff fa1b 	bl	800306c <LL_ADC_SetCommonPathInternalCh>
 8003c36:	e007      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	80000004 	.word	0x80000004
 8003c60:	40012708 	.word	0x40012708
 8003c64:	b0001000 	.word	0xb0001000
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	053e2d63 	.word	0x053e2d63
 8003c70:	b8004000 	.word	0xb8004000
 8003c74:	b4002000 	.word	0xb4002000

08003c78 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fb61 	bl	800334c <LL_ADC_REG_IsConversionOngoing>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d033      	beq.n	8003cf8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fb21 	bl	80032dc <LL_ADC_IsDisableOngoing>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fb3e 	bl	8003326 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003caa:	f7fe fa57 	bl	800215c <HAL_GetTick>
 8003cae:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cb0:	e01b      	b.n	8003cea <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cb2:	f7fe fa53 	bl	800215c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d914      	bls.n	8003cea <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	f043 0210 	orr.w	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e007      	b.n	8003cfa <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1dc      	bne.n	8003cb2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff facf 	bl	80032b8 <LL_ADC_IsEnabled>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d169      	bne.n	8003df4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <ADC_Enable+0xfc>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00d      	beq.n	8003d4a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e055      	b.n	8003df6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fa8c 	bl	800326c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d54:	482b      	ldr	r0, [pc, #172]	; (8003e04 <ADC_Enable+0x100>)
 8003d56:	f7ff f99b 	bl	8003090 <LL_ADC_GetCommonPathInternalCh>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00f      	beq.n	8003d84 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <ADC_Enable+0x104>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <ADC_Enable+0x108>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	3301      	adds	r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d76:	e002      	b.n	8003d7e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f9      	bne.n	8003d78 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7e5b      	ldrb	r3, [r3, #25]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d033      	beq.n	8003df4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d8c:	f7fe f9e6 	bl	800215c <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d92:	e028      	b.n	8003de6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fa8d 	bl	80032b8 <LL_ADC_IsEnabled>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fa5f 	bl	800326c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dae:	f7fe f9d5 	bl	800215c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d914      	bls.n	8003de6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d00d      	beq.n	8003de6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f043 0210 	orr.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d1cf      	bne.n	8003d94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	80000017 	.word	0x80000017
 8003e04:	40012708 	.word	0x40012708
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	053e2d63 	.word	0x053e2d63

08003e10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fa5d 	bl	80032dc <LL_ADC_IsDisableOngoing>
 8003e22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fa45 	bl	80032b8 <LL_ADC_IsEnabled>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d047      	beq.n	8003ec4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d144      	bne.n	8003ec4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0305 	and.w	r3, r3, #5
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10c      	bne.n	8003e62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fa20 	bl	8003292 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2203      	movs	r2, #3
 8003e58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e5a:	f7fe f97f 	bl	800215c <HAL_GetTick>
 8003e5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e60:	e029      	b.n	8003eb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e023      	b.n	8003ec6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e7e:	f7fe f96d 	bl	800215c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d914      	bls.n	8003eb6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1dc      	bne.n	8003e7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <LL_ADC_SetCalibrationFactor>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ede:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <LL_ADC_GetCalibrationFactor>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <LL_ADC_Enable>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f22:	f023 0317 	bic.w	r3, r3, #23
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_Disable>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	f023 0317 	bic.w	r3, r3, #23
 8003f4c:	f043 0202 	orr.w	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <LL_ADC_IsEnabled>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <LL_ADC_IsEnabled+0x18>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <LL_ADC_IsEnabled+0x1a>
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <LL_ADC_StartCalibration>:
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	f023 0317 	bic.w	r3, r3, #23
 8003f96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fbc:	d101      	bne.n	8003fc2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b088      	sub	sp, #32
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_ADCEx_Calibration_Start+0x1e>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0b9      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x192>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff0b 	bl	8003e10 <ADC_Disable>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ffab 	bl	8003f5e <LL_ADC_IsEnabled>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 809d 	bne.w	800414a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004018:	f043 0202 	orr.w	r2, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	f248 0303 	movw	r3, #32771	; 0x8003
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800403c:	f023 0303 	bic.w	r3, r3, #3
 8004040:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e02e      	b.n	80040a6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff98 	bl	8003f82 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004052:	e014      	b.n	800407e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3301      	adds	r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004060:	d30d      	bcc.n	800407e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f023 0312 	bic.w	r3, r3, #18
 800406a:	f043 0210 	orr.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e070      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff90 	bl	8003fa8 <LL_ADC_IsCalibrationOnGoing>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e2      	bne.n	8004054 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff2f 	bl	8003ef6 <LL_ADC_GetCalibrationFactor>
 8004098:	4602      	mov	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3301      	adds	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b07      	cmp	r3, #7
 80040aa:	d9cd      	bls.n	8004048 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff29 	bl	8003f12 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff01 	bl	8003ece <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff31 	bl	8003f38 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040d6:	f7fe f841 	bl	800215c <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040dc:	e01c      	b.n	8004118 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040de:	f7fe f83d 	bl	800215c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d915      	bls.n	8004118 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff34 	bl	8003f5e <LL_ADC_IsEnabled>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00d      	beq.n	8004118 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e023      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff1e 	bl	8003f5e <LL_ADC_IsEnabled>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1da      	bne.n	80040de <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68d9      	ldr	r1, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	f023 0303 	bic.w	r3, r3, #3
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	659a      	str	r2, [r3, #88]	; 0x58
 8004148:	e005      	b.n	8004156 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	f043 0210 	orr.w	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <__NVIC_SetPriorityGrouping+0x44>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004184:	4013      	ands	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419a:	4a04      	ldr	r2, [pc, #16]	; (80041ac <__NVIC_SetPriorityGrouping+0x44>)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	60d3      	str	r3, [r2, #12]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <__NVIC_GetPriorityGrouping+0x18>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	f003 0307 	and.w	r3, r3, #7
}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	db0b      	blt.n	80041f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	f003 021f 	and.w	r2, r3, #31
 80041e4:	4906      	ldr	r1, [pc, #24]	; (8004200 <__NVIC_EnableIRQ+0x34>)
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2001      	movs	r0, #1
 80041ee:	fa00 f202 	lsl.w	r2, r0, r2
 80041f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	e000e100 	.word	0xe000e100

08004204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db12      	blt.n	800423c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	490a      	ldr	r1, [pc, #40]	; (8004248 <__NVIC_DisableIRQ+0x44>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2001      	movs	r0, #1
 8004226:	fa00 f202 	lsl.w	r2, r0, r2
 800422a:	3320      	adds	r3, #32
 800422c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004230:	f3bf 8f4f 	dsb	sy
}
 8004234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004236:	f3bf 8f6f 	isb	sy
}
 800423a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db0a      	blt.n	8004276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	490c      	ldr	r1, [pc, #48]	; (8004298 <__NVIC_SetPriority+0x4c>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	440b      	add	r3, r1
 8004270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004274:	e00a      	b.n	800428c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <__NVIC_SetPriority+0x50>)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3b04      	subs	r3, #4
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	440b      	add	r3, r1
 800428a:	761a      	strb	r2, [r3, #24]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf28      	it	cs
 80042be:	2304      	movcs	r3, #4
 80042c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d902      	bls.n	80042d0 <NVIC_EncodePriority+0x30>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3b03      	subs	r3, #3
 80042ce:	e000      	b.n	80042d2 <NVIC_EncodePriority+0x32>
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	4313      	orrs	r3, r2
         );
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004308:	f3bf 8f4f 	dsb	sy
}
 800430c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <__NVIC_SystemReset+0x24>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004316:	4904      	ldr	r1, [pc, #16]	; (8004328 <__NVIC_SystemReset+0x24>)
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <__NVIC_SystemReset+0x28>)
 800431a:	4313      	orrs	r3, r2
 800431c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800431e:	f3bf 8f4f 	dsb	sy
}
 8004322:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <__NVIC_SystemReset+0x20>
 8004328:	e000ed00 	.word	0xe000ed00
 800432c:	05fa0004 	.word	0x05fa0004

08004330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3b01      	subs	r3, #1
 800433c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004340:	d301      	bcc.n	8004346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004342:	2301      	movs	r3, #1
 8004344:	e00f      	b.n	8004366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004346:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <SysTick_Config+0x40>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3b01      	subs	r3, #1
 800434c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800434e:	210f      	movs	r1, #15
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	f7ff ff7a 	bl	800424c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <SysTick_Config+0x40>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <SysTick_Config+0x40>)
 8004360:	2207      	movs	r2, #7
 8004362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000e010 	.word	0xe000e010

08004374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fef3 	bl	8004168 <__NVIC_SetPriorityGrouping>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	4603      	mov	r3, r0
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004398:	f7ff ff0a 	bl	80041b0 <__NVIC_GetPriorityGrouping>
 800439c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7ff ff7c 	bl	80042a0 <NVIC_EncodePriority>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff4b 	bl	800424c <__NVIC_SetPriority>
}
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fefd 	bl	80041cc <__NVIC_EnableIRQ>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4603      	mov	r3, r0
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff0b 	bl	8004204 <__NVIC_DisableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043fa:	f7ff ff83 	bl	8004304 <__NVIC_SystemReset>

080043fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff ff92 	bl	8004330 <SysTick_Config>
 800440c:	4603      	mov	r3, r0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e08e      	b.n	8004548 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_DMA_Init+0x138>)
 8004432:	429a      	cmp	r2, r3
 8004434:	d80f      	bhi.n	8004456 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	4b45      	ldr	r3, [pc, #276]	; (8004554 <HAL_DMA_Init+0x13c>)
 800443e:	4413      	add	r3, r2
 8004440:	4a45      	ldr	r2, [pc, #276]	; (8004558 <HAL_DMA_Init+0x140>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	009a      	lsls	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a42      	ldr	r2, [pc, #264]	; (800455c <HAL_DMA_Init+0x144>)
 8004452:	641a      	str	r2, [r3, #64]	; 0x40
 8004454:	e00e      	b.n	8004474 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_DMA_Init+0x148>)
 800445e:	4413      	add	r3, r2
 8004460:	4a3d      	ldr	r2, [pc, #244]	; (8004558 <HAL_DMA_Init+0x140>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	009a      	lsls	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <HAL_DMA_Init+0x14c>)
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb24 	bl	8004b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d4:	d102      	bne.n	80044dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_DMA_Init+0x106>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d80c      	bhi.n	800451e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fb4d 	bl	8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800451a:	605a      	str	r2, [r3, #4]
 800451c:	e008      	b.n	8004530 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40020407 	.word	0x40020407
 8004554:	bffdfff8 	.word	0xbffdfff8
 8004558:	cccccccd 	.word	0xcccccccd
 800455c:	40020000 	.word	0x40020000
 8004560:	bffdfbf8 	.word	0xbffdfbf8
 8004564:	40020400 	.word	0x40020400

08004568 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07b      	b.n	8004672 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_DMA_DeInit+0x114>)
 8004592:	429a      	cmp	r2, r3
 8004594:	d80f      	bhi.n	80045b6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	4b38      	ldr	r3, [pc, #224]	; (8004680 <HAL_DMA_DeInit+0x118>)
 800459e:	4413      	add	r3, r2
 80045a0:	4a38      	ldr	r2, [pc, #224]	; (8004684 <HAL_DMA_DeInit+0x11c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	009a      	lsls	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a35      	ldr	r2, [pc, #212]	; (8004688 <HAL_DMA_DeInit+0x120>)
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
 80045b4:	e00e      	b.n	80045d4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_DMA_DeInit+0x124>)
 80045be:	4413      	add	r3, r2
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <HAL_DMA_DeInit+0x11c>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	009a      	lsls	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <HAL_DMA_DeInit+0x128>)
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f003 021c 	and.w	r2, r3, #28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f202 	lsl.w	r2, r1, r2
 80045ee:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa8f 	bl	8004b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004606:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00f      	beq.n	8004630 <HAL_DMA_DeInit+0xc8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d80b      	bhi.n	8004630 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fac3 	bl	8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800462e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40020407 	.word	0x40020407
 8004680:	bffdfff8 	.word	0xbffdfff8
 8004684:	cccccccd 	.word	0xcccccccd
 8004688:	40020000 	.word	0x40020000
 800468c:	bffdfbf8 	.word	0xbffdfbf8
 8004690:	40020400 	.word	0x40020400

08004694 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_DMA_Start_IT+0x20>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e069      	b.n	8004788 <HAL_DMA_Start_IT+0xf4>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d155      	bne.n	8004774 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f9d3 	bl	8004a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 020e 	orr.w	r2, r2, #14
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e00f      	b.n	800472c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 020a 	orr.w	r2, r2, #10
 800472a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004748:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004760:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e008      	b.n	8004786 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e04f      	b.n	8004842 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d008      	beq.n	80047c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2204      	movs	r2, #4
 80047b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e040      	b.n	8004842 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 020e 	bic.w	r2, r2, #14
 80047ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	f003 021c 	and.w	r2, r3, #28
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2101      	movs	r1, #1
 80047fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004802:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800480c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004824:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800482e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d005      	beq.n	8004870 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	e047      	b.n	8004900 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 020e 	bic.w	r2, r2, #14
 800487e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800489e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	f003 021c 	and.w	r2, r3, #28
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f202 	lsl.w	r2, r1, r2
 80048b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
    }
  }
  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f003 031c 	and.w	r3, r3, #28
 800492c:	2204      	movs	r2, #4
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d027      	beq.n	8004988 <HAL_DMA_IRQHandler+0x7c>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d022      	beq.n	8004988 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004964:	f003 021c 	and.w	r2, r3, #28
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2104      	movs	r1, #4
 800496e:	fa01 f202 	lsl.w	r2, r1, r2
 8004972:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8081 	beq.w	8004a80 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004986:	e07b      	b.n	8004a80 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	f003 031c 	and.w	r3, r3, #28
 8004990:	2202      	movs	r2, #2
 8004992:	409a      	lsls	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d03d      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x10c>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d038      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 020a 	bic.w	r2, r2, #10
 80049c2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	4b2e      	ldr	r3, [pc, #184]	; (8004a8c <HAL_DMA_IRQHandler+0x180>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d909      	bls.n	80049ec <HAL_DMA_IRQHandler+0xe0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	f003 031c 	and.w	r3, r3, #28
 80049e0:	4a2b      	ldr	r2, [pc, #172]	; (8004a90 <HAL_DMA_IRQHandler+0x184>)
 80049e2:	2102      	movs	r1, #2
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	6053      	str	r3, [r2, #4]
 80049ea:	e008      	b.n	80049fe <HAL_DMA_IRQHandler+0xf2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f003 031c 	and.w	r3, r3, #28
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <HAL_DMA_IRQHandler+0x188>)
 80049f6:	2102      	movs	r1, #2
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d038      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004a16:	e033      	b.n	8004a80 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f003 031c 	and.w	r3, r3, #28
 8004a20:	2208      	movs	r2, #8
 8004a22:	409a      	lsls	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02a      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x176>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d025      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 020e 	bic.w	r2, r2, #14
 8004a44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f003 021c 	and.w	r2, r3, #28
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
}
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40020080 	.word	0x40020080
 8004a90:	40020400 	.word	0x40020400
 8004a94:	40020000 	.word	0x40020000

08004a98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f003 021c 	and.w	r2, r3, #28
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d108      	bne.n	8004af8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004af6:	e007      	b.n	8004b08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
	...

08004b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d813      	bhi.n	8004b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2c:	089b      	lsrs	r3, r3, #2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b34:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	3b08      	subs	r3, #8
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e011      	b.n	8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004b5a:	4413      	add	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3b08      	subs	r3, #8
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	3307      	adds	r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004b78:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2201      	movs	r2, #1
 8004b82:	409a      	lsls	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40020407 	.word	0x40020407
 8004b98:	cccccccd 	.word	0xcccccccd
 8004b9c:	4002081c 	.word	0x4002081c
 8004ba0:	40020880 	.word	0x40020880

08004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	1000823f 	.word	0x1000823f
 8004be8:	40020940 	.word	0x40020940

08004bec <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <HAL_FLASH_Program+0x80>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_FLASH_Program+0x1a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e02d      	b.n	8004c62 <HAL_FLASH_Program+0x76>
 8004c06:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_FLASH_Program+0x80>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_FLASH_Program+0x80>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c16:	f000 f869 	bl	8004cec <FLASH_WaitForLastOperation>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11a      	bne.n	8004c5a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2e:	68b8      	ldr	r0, [r7, #8]
 8004c30:	f000 f8be 	bl	8004db0 <FLASH_Program_DoubleWord>
 8004c34:	e004      	b.n	8004c40 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	68b8      	ldr	r0, [r7, #8]
 8004c3c:	f000 f8de 	bl	8004dfc <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c44:	f000 f852 	bl	8004cec <FLASH_WaitForLastOperation>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_FLASH_Program+0x84>)
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	4906      	ldr	r1, [pc, #24]	; (8004c70 <HAL_FLASH_Program+0x84>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <HAL_FLASH_Program+0x80>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000584 	.word	0x20000584
 8004c70:	58004000 	.word	0x58004000

08004c74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_FLASH_Unlock+0x38>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	da0b      	bge.n	8004c9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_FLASH_Unlock+0x38>)
 8004c88:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_FLASH_Unlock+0x3c>)
 8004c8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <HAL_FLASH_Unlock+0x38>)
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <HAL_FLASH_Unlock+0x40>)
 8004c90:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_FLASH_Unlock+0x38>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da01      	bge.n	8004c9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	58004000 	.word	0x58004000
 8004cb0:	45670123 	.word	0x45670123
 8004cb4:	cdef89ab 	.word	0xcdef89ab

08004cb8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_FLASH_Lock+0x30>)
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <HAL_FLASH_Lock+0x30>)
 8004cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ccc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_FLASH_Lock+0x30>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	db01      	blt.n	8004cda <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004cda:	79fb      	ldrb	r3, [r7, #7]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	58004000 	.word	0x58004000

08004cec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7fd fa32 	bl	800215c <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004cfa:	e009      	b.n	8004d10 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004cfc:	f7fd fa2e 	bl	800215c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d801      	bhi.n	8004d10 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e047      	b.n	8004da0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d0ee      	beq.n	8004cfc <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <FLASH_WaitForLastOperation+0x6c>
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d52:	4915      	ldr	r1, [pc, #84]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	618b      	str	r3, [r1, #24]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <FLASH_WaitForLastOperation+0x80>
 8004d62:	4a11      	ldr	r2, [pc, #68]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d6a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00e      	beq.n	8004d90 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004d72:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <FLASH_WaitForLastOperation+0xc0>)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e011      	b.n	8004da0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d7c:	f7fd f9ee 	bl	800215c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d801      	bhi.n	8004d90 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e007      	b.n	8004da0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <FLASH_WaitForLastOperation+0xbc>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d9c:	d0ee      	beq.n	8004d7c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	58004000 	.word	0x58004000
 8004dac:	20000584 	.word	0x20000584

08004db0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <FLASH_Program_DoubleWord+0x48>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <FLASH_Program_DoubleWord+0x48>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004dce:	f3bf 8f6f 	isb	sy
}
 8004dd2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004dd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	000a      	movs	r2, r1
 8004de2:	2300      	movs	r3, #0
 8004de4:	68f9      	ldr	r1, [r7, #12]
 8004de6:	3104      	adds	r1, #4
 8004de8:	4613      	mov	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	58004000 	.word	0x58004000

08004dfc <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	; 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e12:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <FLASH_Program_Fast+0x78>)
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <FLASH_Program_Fast+0x78>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e24:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e28:	b672      	cpsid	i
}
 8004e2a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	3304      	adds	r3, #4
 8004e38:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004e40:	7ffb      	ldrb	r3, [r7, #31]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ef      	bne.n	8004e2c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004e4c:	bf00      	nop
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <FLASH_Program_Fast+0x78>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5a:	d0f8      	beq.n	8004e4e <FLASH_Program_Fast+0x52>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004e68:	bf00      	nop
 8004e6a:	3724      	adds	r7, #36	; 0x24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	58004000 	.word	0x58004000

08004e78 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e82:	4b28      	ldr	r3, [pc, #160]	; (8004f24 <HAL_FLASHEx_Erase+0xac>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_FLASHEx_Erase+0x16>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e046      	b.n	8004f1c <HAL_FLASHEx_Erase+0xa4>
 8004e8e:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <HAL_FLASHEx_Erase+0xac>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e94:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <HAL_FLASHEx_Erase+0xac>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e9e:	f7ff ff25 	bl	8004cec <FLASH_WaitForLastOperation>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d133      	bne.n	8004f14 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d108      	bne.n	8004ec6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004eb4:	f000 f880 	bl	8004fb8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ebc:	f7ff ff16 	bl	8004cec <FLASH_WaitForLastOperation>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e024      	b.n	8004f10 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ecc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	e012      	b.n	8004efc <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	f000 f87e 	bl	8004fd8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ee0:	f7ff ff04 	bl	8004cec <FLASH_WaitForLastOperation>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	601a      	str	r2, [r3, #0]
          break;
 8004ef4:	e00a      	b.n	8004f0c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3e4      	bcc.n	8004ed6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004f0c:	f000 f8c0 	bl	8005090 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f10:	f000 f87a 	bl	8005008 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_FLASHEx_Erase+0xac>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]

  return status;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000584 	.word	0x20000584

08004f28 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f30:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_FLASHEx_Erase_IT+0x14>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e034      	b.n	8004fa6 <HAL_FLASHEx_Erase_IT+0x7e>
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f4e:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f54:	f7ff feca 	bl	8004cec <FLASH_WaitForLastOperation>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e01c      	b.n	8004fa4 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004f70:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004f74:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d105      	bne.n	8004f8a <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004f84:	f000 f818 	bl	8004fb8 <FLASH_MassErase>
 8004f88:	e00c      	b.n	8004fa4 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f90:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4a06      	ldr	r2, [pc, #24]	; (8004fb0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004f98:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f81a 	bl	8004fd8 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000584 	.word	0x20000584
 8004fb4:	58004000 	.word	0x58004000

08004fb8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <FLASH_MassErase+0x1c>)
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <FLASH_MassErase+0x1c>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6153      	str	r3, [r2, #20]
#endif
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	58004000 	.word	0x58004000

08004fd8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <FLASH_PageErase+0x2c>)
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4313      	orrs	r3, r2
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <FLASH_PageErase+0x2c>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6153      	str	r3, [r2, #20]
#endif
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	58004000 	.word	0x58004000

08005008 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <FLASH_FlushCaches+0x84>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005014:	2b01      	cmp	r3, #1
 8005016:	d117      	bne.n	8005048 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005018:	4b1c      	ldr	r3, [pc, #112]	; (800508c <FLASH_FlushCaches+0x84>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1b      	ldr	r2, [pc, #108]	; (800508c <FLASH_FlushCaches+0x84>)
 800501e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005022:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <FLASH_FlushCaches+0x84>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <FLASH_FlushCaches+0x84>)
 800502a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <FLASH_FlushCaches+0x84>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <FLASH_FlushCaches+0x84>)
 8005036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800503a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800503c:	4b13      	ldr	r3, [pc, #76]	; (800508c <FLASH_FlushCaches+0x84>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a12      	ldr	r2, [pc, #72]	; (800508c <FLASH_FlushCaches+0x84>)
 8005042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005046:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <FLASH_FlushCaches+0x84>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	2b01      	cmp	r3, #1
 8005052:	d117      	bne.n	8005084 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <FLASH_FlushCaches+0x84>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <FLASH_FlushCaches+0x84>)
 800505a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <FLASH_FlushCaches+0x84>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a09      	ldr	r2, [pc, #36]	; (800508c <FLASH_FlushCaches+0x84>)
 8005066:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <FLASH_FlushCaches+0x84>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a06      	ldr	r2, [pc, #24]	; (800508c <FLASH_FlushCaches+0x84>)
 8005072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005076:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <FLASH_FlushCaches+0x84>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a03      	ldr	r2, [pc, #12]	; (800508c <FLASH_FlushCaches+0x84>)
 800507e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005082:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	58004000 	.word	0x58004000

08005090 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <FLASH_AcknowledgePageErase+0x1c>)
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4a04      	ldr	r2, [pc, #16]	; (80050ac <FLASH_AcknowledgePageErase+0x1c>)
 800509a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800509e:	f023 0302 	bic.w	r3, r3, #2
 80050a2:	6153      	str	r3, [r2, #20]
#endif
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	58004000 	.word	0x58004000

080050b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050be:	e140      	b.n	8005342 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	4013      	ands	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8132 	beq.w	800533c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d005      	beq.n	80050f0 <HAL_GPIO_Init+0x40>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d130      	bne.n	8005152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	2203      	movs	r2, #3
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4013      	ands	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005126:	2201      	movs	r2, #1
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 0201 	and.w	r2, r3, #1
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b03      	cmp	r3, #3
 800515c:	d017      	beq.n	800518e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2203      	movs	r2, #3
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d123      	bne.n	80051e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	08da      	lsrs	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3208      	adds	r2, #8
 80051a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	220f      	movs	r2, #15
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	08da      	lsrs	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3208      	adds	r2, #8
 80051dc:	6939      	ldr	r1, [r7, #16]
 80051de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	2203      	movs	r2, #3
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0203 	and.w	r2, r3, #3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 808c 	beq.w	800533c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005224:	4a4e      	ldr	r2, [pc, #312]	; (8005360 <HAL_GPIO_Init+0x2b0>)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	3302      	adds	r3, #2
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	2207      	movs	r2, #7
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800524e:	d00d      	beq.n	800526c <HAL_GPIO_Init+0x1bc>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a44      	ldr	r2, [pc, #272]	; (8005364 <HAL_GPIO_Init+0x2b4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <HAL_GPIO_Init+0x1b8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a43      	ldr	r2, [pc, #268]	; (8005368 <HAL_GPIO_Init+0x2b8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d101      	bne.n	8005264 <HAL_GPIO_Init+0x1b4>
 8005260:	2302      	movs	r3, #2
 8005262:	e004      	b.n	800526e <HAL_GPIO_Init+0x1be>
 8005264:	2307      	movs	r3, #7
 8005266:	e002      	b.n	800526e <HAL_GPIO_Init+0x1be>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_GPIO_Init+0x1be>
 800526c:	2300      	movs	r3, #0
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	f002 0203 	and.w	r2, r2, #3
 8005274:	0092      	lsls	r2, r2, #2
 8005276:	4093      	lsls	r3, r2
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800527e:	4938      	ldr	r1, [pc, #224]	; (8005360 <HAL_GPIO_Init+0x2b0>)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	3302      	adds	r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800528c:	4b37      	ldr	r3, [pc, #220]	; (800536c <HAL_GPIO_Init+0x2bc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	43db      	mvns	r3, r3
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052b0:	4a2e      	ldr	r2, [pc, #184]	; (800536c <HAL_GPIO_Init+0x2bc>)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052b6:	4b2d      	ldr	r3, [pc, #180]	; (800536c <HAL_GPIO_Init+0x2bc>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052da:	4a24      	ldr	r2, [pc, #144]	; (800536c <HAL_GPIO_Init+0x2bc>)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80052e0:	4b22      	ldr	r3, [pc, #136]	; (800536c <HAL_GPIO_Init+0x2bc>)
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_GPIO_Init+0x2bc>)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <HAL_GPIO_Init+0x2bc>)
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005314:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	43db      	mvns	r3, r3
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4013      	ands	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005334:	4a0d      	ldr	r2, [pc, #52]	; (800536c <HAL_GPIO_Init+0x2bc>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	3301      	adds	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	f47f aeb7 	bne.w	80050c0 <HAL_GPIO_Init+0x10>
  }
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	48000400 	.word	0x48000400
 8005368:	48000800 	.word	0x48000800
 800536c:	58000800 	.word	0x58000800

08005370 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800537e:	e0af      	b.n	80054e0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005380:	2201      	movs	r2, #1
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a2 	beq.w	80054da <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005396:	4a59      	ldr	r2, [pc, #356]	; (80054fc <HAL_GPIO_DeInit+0x18c>)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	3302      	adds	r3, #2
 800539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	2207      	movs	r2, #7
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053be:	d00d      	beq.n	80053dc <HAL_GPIO_DeInit+0x6c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a4f      	ldr	r2, [pc, #316]	; (8005500 <HAL_GPIO_DeInit+0x190>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <HAL_GPIO_DeInit+0x68>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a4e      	ldr	r2, [pc, #312]	; (8005504 <HAL_GPIO_DeInit+0x194>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <HAL_GPIO_DeInit+0x64>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e004      	b.n	80053de <HAL_GPIO_DeInit+0x6e>
 80053d4:	2307      	movs	r3, #7
 80053d6:	e002      	b.n	80053de <HAL_GPIO_DeInit+0x6e>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_GPIO_DeInit+0x6e>
 80053dc:	2300      	movs	r3, #0
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	f002 0203 	and.w	r2, r2, #3
 80053e4:	0092      	lsls	r2, r2, #2
 80053e6:	4093      	lsls	r3, r2
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d136      	bne.n	800545c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80053ee:	4b46      	ldr	r3, [pc, #280]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 80053f0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	4943      	ldr	r1, [pc, #268]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005400:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 8005402:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	493f      	ldr	r1, [pc, #252]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 800540c:	4013      	ands	r3, r2
 800540e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005412:	4b3d      	ldr	r3, [pc, #244]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	43db      	mvns	r3, r3
 800541a:	493b      	ldr	r1, [pc, #236]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 800541c:	4013      	ands	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005420:	4b39      	ldr	r3, [pc, #228]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	43db      	mvns	r3, r3
 8005428:	4937      	ldr	r1, [pc, #220]	; (8005508 <HAL_GPIO_DeInit+0x198>)
 800542a:	4013      	ands	r3, r2
 800542c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	2207      	movs	r2, #7
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800543e:	4a2f      	ldr	r2, [pc, #188]	; (80054fc <HAL_GPIO_DeInit+0x18c>)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	3302      	adds	r3, #2
 8005446:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	43da      	mvns	r2, r3
 800544e:	482b      	ldr	r0, [pc, #172]	; (80054fc <HAL_GPIO_DeInit+0x18c>)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	089b      	lsrs	r3, r3, #2
 8005454:	400a      	ands	r2, r1
 8005456:	3302      	adds	r3, #2
 8005458:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	2103      	movs	r1, #3
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	08da      	lsrs	r2, r3, #3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3208      	adds	r2, #8
 8005478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	220f      	movs	r2, #15
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	08d2      	lsrs	r2, r2, #3
 8005490:	4019      	ands	r1, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3208      	adds	r2, #8
 8005496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	2103      	movs	r1, #3
 80054a4:	fa01 f303 	lsl.w	r3, r1, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	2101      	movs	r1, #1
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	401a      	ands	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2103      	movs	r1, #3
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	401a      	ands	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	3301      	adds	r3, #1
 80054de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af49 	bne.w	8005380 <HAL_GPIO_DeInit+0x10>
  }
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	48000400 	.word	0x48000400
 8005504:	48000800 	.word	0x48000800
 8005508:	58000800 	.word	0x58000800

0800550c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	807b      	strh	r3, [r7, #2]
 8005518:	4613      	mov	r3, r2
 800551a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800551c:	787b      	ldrb	r3, [r7, #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005522:	887a      	ldrh	r2, [r7, #2]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005528:	e002      	b.n	8005530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800552a:	887a      	ldrh	r2, [r7, #2]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
	...

0800553c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005552:	4a05      	ldr	r2, [pc, #20]	; (8005568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	4618      	mov	r0, r3
 800555c:	f005 f88a 	bl	800a674 <HAL_GPIO_EXTI_Callback>
  }
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	58000800 	.word	0x58000800

0800556c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005570:	4b04      	ldr	r3, [pc, #16]	; (8005584 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a03      	ldr	r2, [pc, #12]	; (8005584 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557a:	6013      	str	r3, [r2, #0]
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	58000400 	.word	0x58000400

08005588 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10c      	bne.n	80055b4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a6:	d10d      	bne.n	80055c4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80055a8:	f000 f83c 	bl	8005624 <HAL_PWREx_DisableLowPowerRunMode>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80055b2:	e015      	b.n	80055e0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_PWR_EnterSLEEPMode+0x60>)
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80055c0:	f000 f822 	bl	8005608 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_PWR_EnterSLEEPMode+0x64>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <HAL_PWR_EnterSLEEPMode+0x64>)
 80055ca:	f023 0304 	bic.w	r3, r3, #4
 80055ce:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80055d6:	bf30      	wfi
 80055d8:	e002      	b.n	80055e0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80055da:	bf40      	sev
    __WFE();
 80055dc:	bf20      	wfe
    __WFE();
 80055de:	bf20      	wfe
  }
}
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	58000400 	.word	0x58000400
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <HAL_PWREx_GetVoltageRange+0x14>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	58000400 	.word	0x58000400

08005608 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a03      	ldr	r2, [pc, #12]	; (8005620 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005616:	6013      	str	r3, [r2, #0]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	58000400 	.word	0x58000400

08005624 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005634:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2232      	movs	r2, #50	; 0x32
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	4a12      	ldr	r2, [pc, #72]	; (800568c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0c9b      	lsrs	r3, r3, #18
 8005648:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800564a:	e002      	b.n	8005652 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3b01      	subs	r3, #1
 8005650:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565e:	d102      	bne.n	8005666 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f2      	bne.n	800564c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800566e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005672:	d101      	bne.n	8005678 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e000      	b.n	800567a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	58000400 	.word	0x58000400
 8005688:	20000000 	.word	0x20000000
 800568c:	431bde83 	.word	0x431bde83

08005690 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 0307 	bic.w	r3, r3, #7
 80056a2:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056b0:	f043 0304 	orr.w	r3, r3, #4
 80056b4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80056bc:	bf30      	wfi
 80056be:	e002      	b.n	80056c6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056c0:	bf40      	sev
    __WFE();
 80056c2:	bf20      	wfe
    __WFE();
 80056c4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	4a05      	ldr	r2, [pc, #20]	; (80056e0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	6113      	str	r3, [r2, #16]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	58000400 	.word	0x58000400
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d101      	bne.n	80056fa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	58000400 	.word	0x58000400

08005708 <LL_RCC_HSE_EnableTcxo>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <LL_RCC_HSE_DisableTcxo>:
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005736:	6013      	str	r3, [r2, #0]
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005752:	d101      	bne.n	8005758 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <LL_RCC_HSE_Enable>:
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005774:	6013      	str	r3, [r2, #0]
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <LL_RCC_HSE_Disable>:
{
 800577e:	b480      	push	{r7}
 8005780:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005790:	6013      	str	r3, [r2, #0]
}
 8005792:	bf00      	nop
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <LL_RCC_HSE_IsReady>:
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ac:	d101      	bne.n	80057b2 <LL_RCC_HSE_IsReady+0x18>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_RCC_HSE_IsReady+0x1a>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <LL_RCC_HSI_Enable>:
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <LL_RCC_HSI_Disable>:
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ea:	6013      	str	r3, [r2, #0]
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_HSI_IsReady>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d101      	bne.n	800580c <LL_RCC_HSI_IsReady+0x18>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <LL_RCC_HSI_IsReady+0x1a>
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005830:	4313      	orrs	r3, r2
 8005832:	604b      	str	r3, [r1, #4]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <LL_RCC_LSE_IsReady>:
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d101      	bne.n	8005856 <LL_RCC_LSE_IsReady+0x18>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <LL_RCC_LSE_IsReady+0x1a>
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <LL_RCC_LSI_Enable>:
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <LL_RCC_LSI_Disable>:
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_LSI_IsReady>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d101      	bne.n	80058b8 <LL_RCC_LSI_IsReady+0x18>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <LL_RCC_LSI_IsReady+0x1a>
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <LL_RCC_MSI_Enable>:
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6013      	str	r3, [r2, #0]
}
 80058d6:	bf00      	nop
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <LL_RCC_MSI_Disable>:
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	6013      	str	r3, [r2, #0]
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <LL_RCC_MSI_IsReady>:
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80058fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d101      	bne.n	8005910 <LL_RCC_MSI_IsReady+0x16>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <LL_RCC_MSI_IsReady+0x18>
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800591a:	b480      	push	{r7}
 800591c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800591e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d101      	bne.n	8005930 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <LL_RCC_MSI_GetRange>:
{
 800593a:	b480      	push	{r7}
 800593c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005948:	4618      	mov	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005982:	4313      	orrs	r3, r2
 8005984:	604b      	str	r3, [r1, #4]
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <LL_RCC_SetSysClkSource>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <LL_RCC_GetSysClkSource>:
{
 80059b6:	b480      	push	{r7}
 80059b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 030c 	and.w	r3, r3, #12
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_SetAHBPrescaler>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	608b      	str	r3, [r1, #8]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_SetAHB3Prescaler>:
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a02:	f023 020f 	bic.w	r2, r3, #15
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_SetAPB1Prescaler>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <LL_RCC_SetAPB2Prescaler>:
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	608b      	str	r3, [r1, #8]
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <LL_RCC_GetAHBPrescaler>:
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <LL_RCC_GetAHB3Prescaler>:
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <LL_RCC_GetAPB1Prescaler>:
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <LL_RCC_GetAPB2Prescaler>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad8:	6013      	str	r3, [r2, #0]
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af4:	6013      	str	r3, [r2, #0]
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005afe:	b480      	push	{r7}
 8005b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b10:	d101      	bne.n	8005b16 <LL_RCC_PLL_IsReady+0x18>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <LL_RCC_PLL_IsReady+0x1a>
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d101      	bne.n	8005b92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb0:	d101      	bne.n	8005bb6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd2:	d101      	bne.n	8005bd8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005be2:	b480      	push	{r7}
 8005be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf4:	d101      	bne.n	8005bfa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e38b      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c16:	f7ff fece 	bl	80059b6 <LL_RCC_GetSysClkSource>
 8005c1a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c1c:	f7ff ffa2 	bl	8005b64 <LL_RCC_PLL_GetMainSource>
 8005c20:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80c9 	beq.w	8005dc2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <HAL_RCC_OscConfig+0x3e>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d17b      	bne.n	8005d34 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d178      	bne.n	8005d34 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c42:	f7ff fe5a 	bl	80058fa <LL_RCC_MSI_IsReady>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCC_OscConfig+0x54>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e36a      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_RCC_OscConfig+0x72>
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c74:	e006      	b.n	8005c84 <HAL_RCC_OscConfig+0x80>
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d222      	bcs.n	8005cce <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fd51 	bl	8006734 <RCC_SetFlashLatencyFromMSIRange>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e348      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	f043 0308 	orr.w	r3, r3, #8
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fe4e 	bl	8005968 <LL_RCC_MSI_SetCalibTrimming>
 8005ccc:	e021      	b.n	8005d12 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd8:	f043 0308 	orr.w	r3, r3, #8
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fe35 	bl	8005968 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fd16 	bl	8006734 <RCC_SetFlashLatencyFromMSIRange>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e30d      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d12:	f000 fcd7 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4aa1      	ldr	r2, [pc, #644]	; (8005fa0 <HAL_RCC_OscConfig+0x39c>)
 8005d1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d1c:	4ba1      	ldr	r3, [pc, #644]	; (8005fa4 <HAL_RCC_OscConfig+0x3a0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fd f90b 	bl	8002f3c <HAL_InitTick>
 8005d26:	4603      	mov	r3, r0
 8005d28:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d047      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	e2fc      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d02c      	beq.n	8005d96 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d3c:	f7ff fdc1 	bl	80058c2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d40:	f7fc fa0c 	bl	800215c <HAL_GetTick>
 8005d44:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d48:	f7fc fa08 	bl	800215c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e2e9      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d5a:	f7ff fdce 	bl	80058fa <LL_RCC_MSI_IsReady>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f1      	beq.n	8005d48 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6e:	f043 0308 	orr.w	r3, r3, #8
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fdea 	bl	8005968 <LL_RCC_MSI_SetCalibTrimming>
 8005d94:	e015      	b.n	8005dc2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d96:	f7ff fda2 	bl	80058de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d9a:	f7fc f9df 	bl	800215c <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005da2:	f7fc f9db 	bl	800215c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e2bc      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005db4:	f7ff fda1 	bl	80058fa <LL_RCC_MSI_IsReady>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f1      	bne.n	8005da2 <HAL_RCC_OscConfig+0x19e>
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dc0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d05f      	beq.n	8005e8e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d005      	beq.n	8005de0 <HAL_RCC_OscConfig+0x1dc>
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d10d      	bne.n	8005df6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d10a      	bne.n	8005df6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de0:	f7ff fcdb 	bl	800579a <LL_RCC_HSE_IsReady>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d050      	beq.n	8005e8c <HAL_RCC_OscConfig+0x288>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d14c      	bne.n	8005e8c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e29b      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e14:	d102      	bne.n	8005e1c <HAL_RCC_OscConfig+0x218>
 8005e16:	f7ff fca4 	bl	8005762 <LL_RCC_HSE_Enable>
 8005e1a:	e00d      	b.n	8005e38 <HAL_RCC_OscConfig+0x234>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e24:	d104      	bne.n	8005e30 <HAL_RCC_OscConfig+0x22c>
 8005e26:	f7ff fc6f 	bl	8005708 <LL_RCC_HSE_EnableTcxo>
 8005e2a:	f7ff fc9a 	bl	8005762 <LL_RCC_HSE_Enable>
 8005e2e:	e003      	b.n	8005e38 <HAL_RCC_OscConfig+0x234>
 8005e30:	f7ff fca5 	bl	800577e <LL_RCC_HSE_Disable>
 8005e34:	f7ff fc76 	bl	8005724 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d012      	beq.n	8005e66 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fc f98c 	bl	800215c <HAL_GetTick>
 8005e44:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e48:	f7fc f988 	bl	800215c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b64      	cmp	r3, #100	; 0x64
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e269      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e5a:	f7ff fc9e 	bl	800579a <LL_RCC_HSE_IsReady>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f1      	beq.n	8005e48 <HAL_RCC_OscConfig+0x244>
 8005e64:	e013      	b.n	8005e8e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fc f979 	bl	800215c <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e6e:	f7fc f975 	bl	800215c <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b64      	cmp	r3, #100	; 0x64
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e256      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e80:	f7ff fc8b 	bl	800579a <LL_RCC_HSE_IsReady>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f1      	bne.n	8005e6e <HAL_RCC_OscConfig+0x26a>
 8005e8a:	e000      	b.n	8005e8e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e8c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04b      	beq.n	8005f32 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_OscConfig+0x2a8>
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d113      	bne.n	8005ece <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d110      	bne.n	8005ece <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eac:	f7ff fca2 	bl	80057f4 <LL_RCC_HSI_IsReady>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x2be>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e235      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fca5 	bl	8005816 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ecc:	e031      	b.n	8005f32 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d019      	beq.n	8005f0a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed6:	f7ff fc71 	bl	80057bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fc f93f 	bl	800215c <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee2:	f7fc f93b 	bl	800215c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e21c      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ef4:	f7ff fc7e 	bl	80057f4 <LL_RCC_HSI_IsReady>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f1      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fc87 	bl	8005816 <LL_RCC_HSI_SetCalibTrimming>
 8005f08:	e013      	b.n	8005f32 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f0a:	f7ff fc65 	bl	80057d8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fc f925 	bl	800215c <HAL_GetTick>
 8005f12:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fc f921 	bl	800215c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e202      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f28:	f7ff fc64 	bl	80057f4 <LL_RCC_HSI_IsReady>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f1      	bne.n	8005f16 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d06f      	beq.n	800601e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d057      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d036      	beq.n	8005fcc <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e1db      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d018      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005f80:	f7ff fc7e 	bl	8005880 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f84:	f7fc f8ea 	bl	800215c <HAL_GetTick>
 8005f88:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005f8a:	e00d      	b.n	8005fa8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f8c:	f7fc f8e6 	bl	800215c <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b11      	cmp	r3, #17
 8005f98:	d906      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e1c7      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
 8005f9e:	bf00      	nop
 8005fa0:	20000000 	.word	0x20000000
 8005fa4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8005fa8:	f7ff fc7a 	bl	80058a0 <LL_RCC_LSI_IsReady>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1ec      	bne.n	8005f8c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fba:	f023 0210 	bic.w	r2, r3, #16
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fcc:	f7ff fc48 	bl	8005860 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd0:	f7fc f8c4 	bl	800215c <HAL_GetTick>
 8005fd4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd8:	f7fc f8c0 	bl	800215c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b11      	cmp	r3, #17
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e1a1      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005fea:	f7ff fc59 	bl	80058a0 <LL_RCC_LSI_IsReady>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f1      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x3d4>
 8005ff4:	e013      	b.n	800601e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff6:	f7ff fc43 	bl	8005880 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fc f8af 	bl	800215c <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006002:	f7fc f8ab 	bl	800215c <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b11      	cmp	r3, #17
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e18c      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006014:	f7ff fc44 	bl	80058a0 <LL_RCC_LSI_IsReady>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f1      	bne.n	8006002 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80d8 	beq.w	80061dc <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800602c:	f7ff fb5a 	bl	80056e4 <LL_PWR_IsEnabledBkUpAccess>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d113      	bne.n	800605e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006036:	f7ff fa99 	bl	800556c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603a:	f7fc f88f 	bl	800215c <HAL_GetTick>
 800603e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006042:	f7fc f88b 	bl	800215c <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e16c      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006054:	f7ff fb46 	bl	80056e4 <LL_PWR_IsEnabledBkUpAccess>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f1      	beq.n	8006042 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d07b      	beq.n	800615e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	2b85      	cmp	r3, #133	; 0x85
 800606c:	d003      	beq.n	8006076 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b05      	cmp	r3, #5
 8006074:	d109      	bne.n	800608a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608a:	f7fc f867 	bl	800215c <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f7fc f859 	bl	800215c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e138      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060bc:	f7ff fbbf 	bl	800583e <LL_RCC_LSE_IsReady>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0ef      	beq.n	80060a6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b81      	cmp	r3, #129	; 0x81
 80060cc:	d003      	beq.n	80060d6 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b85      	cmp	r3, #133	; 0x85
 80060d4:	d121      	bne.n	800611a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d6:	f7fc f841 	bl	800215c <HAL_GetTick>
 80060da:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060f0:	e00a      	b.n	8006108 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f2:	f7fc f833 	bl	800215c <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e112      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0ec      	beq.n	80060f2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006118:	e060      	b.n	80061dc <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611a:	f7fc f81f 	bl	800215c <HAL_GetTick>
 800611e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006134:	e00a      	b.n	800614c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fc f811 	bl	800215c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f241 3288 	movw	r2, #5000	; 0x1388
 8006144:	4293      	cmp	r3, r2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e0f0      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ec      	bne.n	8006136 <HAL_RCC_OscConfig+0x532>
 800615c:	e03e      	b.n	80061dc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615e:	f7fb fffd 	bl	800215c <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006178:	e00a      	b.n	8006190 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617a:	f7fb ffef 	bl	800215c <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f241 3288 	movw	r2, #5000	; 0x1388
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e0ce      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1ec      	bne.n	800617a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fb ffdc 	bl	800215c <HAL_GetTick>
 80061a4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80061ba:	e00a      	b.n	80061d2 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061bc:	f7fb ffce 	bl	800215c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0ad      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80061d2:	f7ff fb34 	bl	800583e <LL_RCC_LSE_IsReady>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1ef      	bne.n	80061bc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80a3 	beq.w	800632c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d076      	beq.n	80062da <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d14b      	bne.n	800628c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f4:	f7ff fc75 	bl	8005ae2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fb ffb0 	bl	800215c <HAL_GetTick>
 80061fc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006200:	f7fb ffac 	bl	800215c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b0a      	cmp	r3, #10
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e08d      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006212:	f7ff fc74 	bl	8005afe <LL_RCC_PLL_IsReady>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f1      	bne.n	8006200 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	4b45      	ldr	r3, [pc, #276]	; (8006338 <HAL_RCC_OscConfig+0x734>)
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800622e:	4311      	orrs	r1, r2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006234:	0212      	lsls	r2, r2, #8
 8006236:	4311      	orrs	r1, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800623c:	4311      	orrs	r1, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006242:	4311      	orrs	r1, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006248:	430a      	orrs	r2, r1
 800624a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800624e:	4313      	orrs	r3, r2
 8006250:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006252:	f7ff fc38 	bl	8005ac6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006264:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fb ff79 	bl	800215c <HAL_GetTick>
 800626a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626e:	f7fb ff75 	bl	800215c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b0a      	cmp	r3, #10
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e056      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006280:	f7ff fc3d 	bl	8005afe <LL_RCC_PLL_IsReady>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f1      	beq.n	800626e <HAL_RCC_OscConfig+0x66a>
 800628a:	e04f      	b.n	800632c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628c:	f7ff fc29 	bl	8005ae2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062aa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80062ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fb ff52 	bl	800215c <HAL_GetTick>
 80062b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fb ff4e 	bl	800215c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b0a      	cmp	r3, #10
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e02f      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062ce:	f7ff fc16 	bl	8005afe <LL_RCC_PLL_IsReady>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f1      	bne.n	80062bc <HAL_RCC_OscConfig+0x6b8>
 80062d8:	e028      	b.n	800632c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e023      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f003 0203 	and.w	r2, r3, #3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d115      	bne.n	8006328 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	429a      	cmp	r2, r3
 8006308:	d10e      	bne.n	8006328 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	429a      	cmp	r2, r3
 8006318:	d106      	bne.n	8006328 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	11c1808c 	.word	0x11c1808c

0800633c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e10f      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006350:	4b89      	ldr	r3, [pc, #548]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d91b      	bls.n	8006396 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b86      	ldr	r3, [pc, #536]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 0207 	bic.w	r2, r3, #7
 8006366:	4984      	ldr	r1, [pc, #528]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636e:	f7fb fef5 	bl	800215c <HAL_GetTick>
 8006372:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006374:	e008      	b.n	8006388 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006376:	f7fb fef1 	bl	800215c <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e0f3      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006388:	4b7b      	ldr	r3, [pc, #492]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d1ef      	bne.n	8006376 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d016      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fb10 	bl	80059cc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063ac:	f7fb fed6 	bl	800215c <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063b4:	f7fb fed2 	bl	800215c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e0d4      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063c6:	f7ff fbd8 	bl	8005b7a <LL_RCC_IsActiveFlag_HPRE>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f1      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d016      	beq.n	800640a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fb06 	bl	80059f2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063e6:	f7fb feb9 	bl	800215c <HAL_GetTick>
 80063ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063ee:	f7fb feb5 	bl	800215c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0b7      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006400:	f7ff fbcc 	bl	8005b9c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f1      	beq.n	80063ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff faff 	bl	8005a1e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006420:	f7fb fe9c 	bl	800215c <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006426:	e008      	b.n	800643a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006428:	f7fb fe98 	bl	800215c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e09a      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800643a:	f7ff fbc1 	bl	8005bc0 <LL_RCC_IsActiveFlag_PPRE1>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f1      	beq.n	8006428 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d017      	beq.n	8006480 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff faf4 	bl	8005a44 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800645c:	f7fb fe7e 	bl	800215c <HAL_GetTick>
 8006460:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006464:	f7fb fe7a 	bl	800215c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e07c      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006476:	f7ff fbb4 	bl	8005be2 <LL_RCC_IsActiveFlag_PPRE2>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f1      	beq.n	8006464 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d043      	beq.n	8006514 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006494:	f7ff f981 	bl	800579a <LL_RCC_HSE_IsReady>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11e      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e066      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064aa:	f7ff fb28 	bl	8005afe <LL_RCC_PLL_IsReady>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d113      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e05b      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064c0:	f7ff fa1b 	bl	80058fa <LL_RCC_MSI_IsReady>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e050      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80064ce:	f7ff f991 	bl	80057f4 <LL_RCC_HSI_IsReady>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e049      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fa55 	bl	8005990 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e6:	f7fb fe39 	bl	800215c <HAL_GetTick>
 80064ea:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ec:	e00a      	b.n	8006504 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ee:	f7fb fe35 	bl	800215c <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e035      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006504:	f7ff fa57 	bl	80059b6 <LL_RCC_GetSysClkSource>
 8006508:	4602      	mov	r2, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	429a      	cmp	r2, r3
 8006512:	d1ec      	bne.n	80064ee <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006514:	4b18      	ldr	r3, [pc, #96]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d21b      	bcs.n	800655a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 0207 	bic.w	r2, r3, #7
 800652a:	4913      	ldr	r1, [pc, #76]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006532:	f7fb fe13 	bl	800215c <HAL_GetTick>
 8006536:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006538:	e008      	b.n	800654c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800653a:	f7fb fe0f 	bl	800215c <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e011      	b.n	8006570 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <HAL_RCC_ClockConfig+0x23c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d1ef      	bne.n	800653a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800655a:	f000 f8b3 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 800655e:	4603      	mov	r3, r0
 8006560:	4a06      	ldr	r2, [pc, #24]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 8006562:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f7fc fce7 	bl	8002f3c <HAL_InitTick>
 800656e:	4603      	mov	r3, r0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	58004000 	.word	0x58004000
 800657c:	20000000 	.word	0x20000000
 8006580:	20000004 	.word	0x20000004

08006584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006592:	f7ff fa10 	bl	80059b6 <LL_RCC_GetSysClkSource>
 8006596:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006598:	f7ff fae4 	bl	8005b64 <LL_RCC_PLL_GetMainSource>
 800659c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d139      	bne.n	800661e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d136      	bne.n	800661e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065b0:	f7ff f9b3 	bl	800591a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d115      	bne.n	80065e6 <HAL_RCC_GetSysClockFreq+0x62>
 80065ba:	f7ff f9ae 	bl	800591a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_GetSysClockFreq+0x4e>
 80065c4:	f7ff f9b9 	bl	800593a <LL_RCC_MSI_GetRange>
 80065c8:	4603      	mov	r3, r0
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	e005      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x5a>
 80065d2:	f7ff f9bd 	bl	8005950 <LL_RCC_MSI_GetRangeAfterStandby>
 80065d6:	4603      	mov	r3, r0
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	4a36      	ldr	r2, [pc, #216]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x134>)
 80065e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e4:	e014      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x8c>
 80065e6:	f7ff f998 	bl	800591a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d106      	bne.n	80065fe <HAL_RCC_GetSysClockFreq+0x7a>
 80065f0:	f7ff f9a3 	bl	800593a <LL_RCC_MSI_GetRange>
 80065f4:	4603      	mov	r3, r0
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	e005      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x86>
 80065fe:	f7ff f9a7 	bl	8005950 <LL_RCC_MSI_GetRangeAfterStandby>
 8006602:	4603      	mov	r3, r0
 8006604:	091b      	lsrs	r3, r3, #4
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	4a2b      	ldr	r2, [pc, #172]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800660c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006610:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d115      	bne.n	8006644 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800661c:	e012      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d102      	bne.n	800662a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006624:	4b25      	ldr	r3, [pc, #148]	; (80066bc <HAL_RCC_GetSysClockFreq+0x138>)
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e00c      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b08      	cmp	r3, #8
 800662e:	d109      	bne.n	8006644 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006630:	f7ff f886 	bl	8005740 <LL_RCC_HSE_IsEnabledDiv2>
 8006634:	4603      	mov	r3, r0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d102      	bne.n	8006640 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800663a:	4b20      	ldr	r3, [pc, #128]	; (80066bc <HAL_RCC_GetSysClockFreq+0x138>)
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e001      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006640:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006642:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006644:	f7ff f9b7 	bl	80059b6 <LL_RCC_GetSysClkSource>
 8006648:	4603      	mov	r3, r0
 800664a:	2b0c      	cmp	r3, #12
 800664c:	d12f      	bne.n	80066ae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800664e:	f7ff fa89 	bl	8005b64 <LL_RCC_PLL_GetMainSource>
 8006652:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d003      	beq.n	8006662 <HAL_RCC_GetSysClockFreq+0xde>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d003      	beq.n	8006668 <HAL_RCC_GetSysClockFreq+0xe4>
 8006660:	e00d      	b.n	800667e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006662:	4b16      	ldr	r3, [pc, #88]	; (80066bc <HAL_RCC_GetSysClockFreq+0x138>)
 8006664:	60fb      	str	r3, [r7, #12]
        break;
 8006666:	e00d      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006668:	f7ff f86a 	bl	8005740 <LL_RCC_HSE_IsEnabledDiv2>
 800666c:	4603      	mov	r3, r0
 800666e:	2b01      	cmp	r3, #1
 8006670:	d102      	bne.n	8006678 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <HAL_RCC_GetSysClockFreq+0x138>)
 8006674:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006676:	e005      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006678:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800667a:	60fb      	str	r3, [r7, #12]
        break;
 800667c:	e002      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	60fb      	str	r3, [r7, #12]
        break;
 8006682:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006684:	f7ff fa4c 	bl	8005b20 <LL_RCC_PLL_GetN>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	fb03 f402 	mul.w	r4, r3, r2
 8006690:	f7ff fa5d 	bl	8005b4e <LL_RCC_PLL_GetDivider>
 8006694:	4603      	mov	r3, r0
 8006696:	091b      	lsrs	r3, r3, #4
 8006698:	3301      	adds	r3, #1
 800669a:	fbb4 f4f3 	udiv	r4, r4, r3
 800669e:	f7ff fa4b 	bl	8005b38 <LL_RCC_PLL_GetR>
 80066a2:	4603      	mov	r3, r0
 80066a4:	0f5b      	lsrs	r3, r3, #29
 80066a6:	3301      	adds	r3, #1
 80066a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80066ac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80066ae:	697b      	ldr	r3, [r7, #20]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd90      	pop	{r4, r7, pc}
 80066b8:	080202a0 	.word	0x080202a0
 80066bc:	00f42400 	.word	0x00f42400
 80066c0:	01e84800 	.word	0x01e84800

080066c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c4:	b598      	push	{r3, r4, r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066c8:	f7ff ff5c 	bl	8006584 <HAL_RCC_GetSysClockFreq>
 80066cc:	4604      	mov	r4, r0
 80066ce:	f7ff f9cc 	bl	8005a6a <LL_RCC_GetAHBPrescaler>
 80066d2:	4603      	mov	r3, r0
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	4a03      	ldr	r2, [pc, #12]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80066dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd98      	pop	{r3, r4, r7, pc}
 80066e8:	08020240 	.word	0x08020240

080066ec <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b598      	push	{r3, r4, r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80066f0:	f7ff ffe8 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 80066f4:	4604      	mov	r4, r0
 80066f6:	f7ff f9d0 	bl	8005a9a <LL_RCC_GetAPB1Prescaler>
 80066fa:	4603      	mov	r3, r0
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	4a03      	ldr	r2, [pc, #12]	; (800670c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd98      	pop	{r3, r4, r7, pc}
 800670c:	08020280 	.word	0x08020280

08006710 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006710:	b598      	push	{r3, r4, r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006714:	f7ff ffd6 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8006718:	4604      	mov	r4, r0
 800671a:	f7ff f9c9 	bl	8005ab0 <LL_RCC_GetAPB2Prescaler>
 800671e:	4603      	mov	r3, r0
 8006720:	0adb      	lsrs	r3, r3, #11
 8006722:	4a03      	ldr	r2, [pc, #12]	; (8006730 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006728:	fa24 f303 	lsr.w	r3, r4, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd98      	pop	{r3, r4, r7, pc}
 8006730:	08020280 	.word	0x08020280

08006734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006734:	b590      	push	{r4, r7, lr}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	4a10      	ldr	r2, [pc, #64]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800674c:	f7ff f998 	bl	8005a80 <LL_RCC_GetAHB3Prescaler>
 8006750:	4603      	mov	r3, r0
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	4a0c      	ldr	r2, [pc, #48]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800675a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0c9c      	lsrs	r4, r3, #18
 8006770:	f7fe ff3e 	bl	80055f0 <HAL_PWREx_GetVoltageRange>
 8006774:	4603      	mov	r3, r0
 8006776:	4619      	mov	r1, r3
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f80b 	bl	8006794 <RCC_SetFlashLatency>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	bd90      	pop	{r4, r7, pc}
 8006788:	080202a0 	.word	0x080202a0
 800678c:	08020240 	.word	0x08020240
 8006790:	431bde83 	.word	0x431bde83

08006794 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08e      	sub	sp, #56	; 0x38
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800679e:	4a3a      	ldr	r2, [pc, #232]	; (8006888 <RCC_SetFlashLatency+0xf4>)
 80067a0:	f107 0320 	add.w	r3, r7, #32
 80067a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	3304      	adds	r3, #4
 80067ac:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80067ae:	4a37      	ldr	r2, [pc, #220]	; (800688c <RCC_SetFlashLatency+0xf8>)
 80067b0:	f107 0318 	add.w	r3, r7, #24
 80067b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067b8:	6018      	str	r0, [r3, #0]
 80067ba:	3304      	adds	r3, #4
 80067bc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80067be:	4a34      	ldr	r2, [pc, #208]	; (8006890 <RCC_SetFlashLatency+0xfc>)
 80067c0:	f107 030c 	add.w	r3, r7, #12
 80067c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80067c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80067ca:	2300      	movs	r3, #0
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	d11b      	bne.n	800680e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30
 80067da:	e014      	b.n	8006806 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	3338      	adds	r3, #56	; 0x38
 80067e2:	443b      	add	r3, r7
 80067e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d807      	bhi.n	8006800 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	3338      	adds	r3, #56	; 0x38
 80067f6:	443b      	add	r3, r7
 80067f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067fe:	e021      	b.n	8006844 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	3301      	adds	r3, #1
 8006804:	633b      	str	r3, [r7, #48]	; 0x30
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2b02      	cmp	r3, #2
 800680a:	d9e7      	bls.n	80067dc <RCC_SetFlashLatency+0x48>
 800680c:	e01a      	b.n	8006844 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800680e:	2300      	movs	r3, #0
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006812:	e014      	b.n	800683e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	3338      	adds	r3, #56	; 0x38
 800681a:	443b      	add	r3, r7
 800681c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4293      	cmp	r3, r2
 8006826:	d807      	bhi.n	8006838 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	3338      	adds	r3, #56	; 0x38
 800682e:	443b      	add	r3, r7
 8006830:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006834:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006836:	e005      	b.n	8006844 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	3301      	adds	r3, #1
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	2b02      	cmp	r3, #2
 8006842:	d9e7      	bls.n	8006814 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006844:	4b13      	ldr	r3, [pc, #76]	; (8006894 <RCC_SetFlashLatency+0x100>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 0207 	bic.w	r2, r3, #7
 800684c:	4911      	ldr	r1, [pc, #68]	; (8006894 <RCC_SetFlashLatency+0x100>)
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006854:	f7fb fc82 	bl	800215c <HAL_GetTick>
 8006858:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800685a:	e008      	b.n	800686e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800685c:	f7fb fc7e 	bl	800215c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e007      	b.n	800687e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <RCC_SetFlashLatency+0x100>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006878:	429a      	cmp	r2, r3
 800687a:	d1ef      	bne.n	800685c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3738      	adds	r7, #56	; 0x38
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	080200e4 	.word	0x080200e4
 800688c:	080200ec 	.word	0x080200ec
 8006890:	080200f4 	.word	0x080200f4
 8006894:	58004000 	.word	0x58004000

08006898 <LL_RCC_LSE_IsReady>:
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800689c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d101      	bne.n	80068b0 <LL_RCC_LSE_IsReady+0x18>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <LL_RCC_LSE_IsReady+0x1a>
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <LL_RCC_SetUSARTClockSource>:
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80068c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	43db      	mvns	r3, r3
 80068d0:	401a      	ands	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <LL_RCC_SetI2SClockSource>:
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80068f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr

08006914 <LL_RCC_SetLPUARTClockSource>:
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <LL_RCC_SetI2CClockSource>:
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	091b      	lsrs	r3, r3, #4
 8006952:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006956:	43db      	mvns	r3, r3
 8006958:	401a      	ands	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr

08006976 <LL_RCC_SetLPTIMClockSource>:
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	43db      	mvns	r3, r3
 800698e:	401a      	ands	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <LL_RCC_SetRNGClockSource>:
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80069bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <LL_RCC_SetADCClockSource>:
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <LL_RCC_SetRTCClockSource>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <LL_RCC_GetRTCClockSource>:
{
 8006a26:	b480      	push	{r7}
 8006a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <LL_RCC_ForceBackupDomainReset>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a56:	bf00      	nop
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <LL_RCC_ReleaseBackupDomainReset>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr
	...

08006a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006a90:	2300      	movs	r3, #0
 8006a92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d058      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006aa0:	f7fe fd64 	bl	800556c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aa4:	f7fb fb5a 	bl	800215c <HAL_GetTick>
 8006aa8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006aaa:	e009      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fb fb56 	bl	800215c <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d902      	bls.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	74fb      	strb	r3, [r7, #19]
        break;
 8006abe:	e006      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ac0:	4b7b      	ldr	r3, [pc, #492]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006acc:	d1ee      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006ace:	7cfb      	ldrb	r3, [r7, #19]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d13c      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006ad4:	f7ff ffa7 	bl	8006a26 <LL_RCC_GetRTCClockSource>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d00f      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006af0:	f7ff ffa5 	bl	8006a3e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006af4:	f7ff ffb3 	bl	8006a5e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d014      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fb fb26 	bl	800215c <HAL_GetTick>
 8006b10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b12:	e00b      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fb fb22 	bl	800215c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d902      	bls.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	74fb      	strb	r3, [r7, #19]
            break;
 8006b2a:	e004      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b2c:	f7ff feb4 	bl	8006898 <LL_RCC_LSE_IsReady>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d1ee      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff ff5b 	bl	80069fc <LL_RCC_SetRTCClockSource>
 8006b46:	e004      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b48:	7cfb      	ldrb	r3, [r7, #19]
 8006b4a:	74bb      	strb	r3, [r7, #18]
 8006b4c:	e001      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d004      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fea9 	bl	80068ba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fe9e 	bl	80068ba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fec0 	bl	8006914 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fee6 	bl	8006976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fedb 	bl	8006976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fed0 	bl	8006976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fea9 	bl	800693e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fe9e 	bl	800693e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff fe93 	bl	800693e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d011      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fe5e 	bl	80068ea <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c36:	d107      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fea5 	bl	80069a8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d107      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c74:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d011      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fea3 	bl	80069d2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006ca6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	58000400 	.word	0x58000400

08006cb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d068      	beq.n	8006d98 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fa ffb0 	bl	8001c40 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ce8:	4b2e      	ldr	r3, [pc, #184]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006cea:	22ca      	movs	r2, #202	; 0xca
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24
 8006cee:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006cf0:	2253      	movs	r2, #83	; 0x53
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa0f 	bl	8007118 <RTC_EnterInitMode>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d13f      	bne.n	8006d84 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d04:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	4a26      	ldr	r2, [pc, #152]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d0a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d12:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d14:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6859      	ldr	r1, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	4319      	orrs	r1, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	430b      	orrs	r3, r1
 8006d28:	491e      	ldr	r1, [pc, #120]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	491a      	ldr	r1, [pc, #104]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006d3e:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	4914      	ldr	r1, [pc, #80]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa12 	bl	8007180 <RTC_ExitInitMode>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10e      	bne.n	8006d84 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006d66:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a19      	ldr	r1, [r3, #32]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	4319      	orrs	r1, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	4909      	ldr	r1, [pc, #36]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d84:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <HAL_RTC_Init+0xf0>)
 8006d86:	22ff      	movs	r2, #255	; 0xff
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	40002800 	.word	0x40002800

08006da8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_RTC_SetAlarm_IT+0x1e>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e0f3      	b.n	8006fae <HAL_RTC_SetAlarm_IT+0x206>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006dd6:	4b78      	ldr	r3, [pc, #480]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	d06a      	beq.n	8006ebe <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d13a      	bne.n	8006e64 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006dee:	4b72      	ldr	r3, [pc, #456]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f9f5 	bl	80071fc <RTC_ByteToBcd2>
 8006e12:	4603      	mov	r3, r0
 8006e14:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f9ee 	bl	80071fc <RTC_ByteToBcd2>
 8006e20:	4603      	mov	r3, r0
 8006e22:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e24:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	789b      	ldrb	r3, [r3, #2]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f9e6 	bl	80071fc <RTC_ByteToBcd2>
 8006e30:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e32:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	78db      	ldrb	r3, [r3, #3]
 8006e3a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e3c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f9d8 	bl	80071fc <RTC_ByteToBcd2>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e50:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e58:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e02c      	b.n	8006ebe <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006e6c:	d00d      	beq.n	8006e8a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e76:	d008      	beq.n	8006e8a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e78:	4b4f      	ldr	r3, [pc, #316]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e96:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e9c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ea4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eac:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006eae:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006eb4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ebe:	4b3e      	ldr	r3, [pc, #248]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ec0:	22ca      	movs	r2, #202	; 0xca
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec4:	4b3c      	ldr	r3, [pc, #240]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ec6:	2253      	movs	r2, #83	; 0x53
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed2:	d12c      	bne.n	8006f2e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ed4:	4b38      	ldr	r3, [pc, #224]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	4a37      	ldr	r2, [pc, #220]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ede:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ee0:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eec:	d107      	bne.n	8006efe <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	4930      	ldr	r1, [pc, #192]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	644b      	str	r3, [r1, #68]	; 0x44
 8006efc:	e006      	b.n	8006f0c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006efe:	4a2e      	ldr	r2, [pc, #184]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006f04:	4a2c      	ldr	r2, [pc, #176]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	f043 0201 	orr.w	r2, r3, #1
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f26:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006f2a:	6193      	str	r3, [r2, #24]
 8006f2c:	e02b      	b.n	8006f86 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f2e:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f34:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006f38:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f3a:	4b1f      	ldr	r3, [pc, #124]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	d107      	bne.n	8006f58 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4919      	ldr	r1, [pc, #100]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f56:	e006      	b.n	8006f66 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006f58:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006f5e:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006f66:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f043 0202 	orr.w	r2, r3, #2
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f80:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006f84:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006f86:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <HAL_RTC_SetAlarm_IT+0x214>)
 8006f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8c:	4a0b      	ldr	r2, [pc, #44]	; (8006fbc <HAL_RTC_SetAlarm_IT+0x214>)
 8006f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f96:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f98:	22ff      	movs	r2, #255	; 0xff
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd90      	pop	{r4, r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40002800 	.word	0x40002800
 8006fbc:	58000800 	.word	0x58000800

08006fc0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RTC_DeactivateAlarm+0x18>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e048      	b.n	800706a <HAL_RTC_DeactivateAlarm+0xaa>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fe8:	4b22      	ldr	r3, [pc, #136]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fea:	22ca      	movs	r2, #202	; 0xca
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ff0:	2253      	movs	r2, #83	; 0x53
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffa:	d115      	bne.n	8007028 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007006:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007008:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 800700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700c:	4a19      	ldr	r2, [pc, #100]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 800700e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007012:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	f023 0201 	bic.w	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007020:	4b14      	ldr	r3, [pc, #80]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007022:	2201      	movs	r2, #1
 8007024:	65da      	str	r2, [r3, #92]	; 0x5c
 8007026:	e014      	b.n	8007052 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	4a11      	ldr	r2, [pc, #68]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 800702e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007032:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007038:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 800703a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	f023 0202 	bic.w	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800704c:	4b09      	ldr	r3, [pc, #36]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 800704e:	2202      	movs	r2, #2
 8007050:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40002800 	.word	0x40002800

08007078 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007080:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	4013      	ands	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007098:	2201      	movs	r2, #1
 800709a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7fb fae8 	bl	8002672 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80070ae:	2202      	movs	r2, #2
 80070b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f94a 	bl	800734c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40002800 	.word	0x40002800

080070cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <HAL_RTC_WaitForSynchro+0x48>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <HAL_RTC_WaitForSynchro+0x48>)
 80070da:	f023 0320 	bic.w	r3, r3, #32
 80070de:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80070e0:	f7fb f83c 	bl	800215c <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80070e6:	e009      	b.n	80070fc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070e8:	f7fb f838 	bl	800215c <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070f6:	d901      	bls.n	80070fc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e006      	b.n	800710a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <HAL_RTC_WaitForSynchro+0x48>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0ef      	beq.n	80070e8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40002800 	.word	0x40002800

08007118 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007124:	4b15      	ldr	r3, [pc, #84]	; (800717c <RTC_EnterInitMode+0x64>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d120      	bne.n	8007172 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007130:	4b12      	ldr	r3, [pc, #72]	; (800717c <RTC_EnterInitMode+0x64>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4a11      	ldr	r2, [pc, #68]	; (800717c <RTC_EnterInitMode+0x64>)
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800713c:	f7fb f80e 	bl	800215c <HAL_GetTick>
 8007140:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007142:	e00d      	b.n	8007160 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007144:	f7fb f80a 	bl	800215c <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007152:	d905      	bls.n	8007160 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2203      	movs	r2, #3
 800715c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <RTC_EnterInitMode+0x64>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <RTC_EnterInitMode+0x5a>
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d1e8      	bne.n	8007144 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40002800 	.word	0x40002800

08007180 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800718c:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <RTC_ExitInitMode+0x78>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <RTC_ExitInitMode+0x78>)
 8007192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007196:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007198:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <RTC_ExitInitMode+0x78>)
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10c      	bne.n	80071be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ff91 	bl	80070cc <HAL_RTC_WaitForSynchro>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01e      	beq.n	80071ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2203      	movs	r2, #3
 80071b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	73fb      	strb	r3, [r7, #15]
 80071bc:	e017      	b.n	80071ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071be:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <RTC_ExitInitMode+0x78>)
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	4a0d      	ldr	r2, [pc, #52]	; (80071f8 <RTC_ExitInitMode+0x78>)
 80071c4:	f023 0320 	bic.w	r3, r3, #32
 80071c8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff ff7e 	bl	80070cc <HAL_RTC_WaitForSynchro>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2203      	movs	r2, #3
 80071da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071e2:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <RTC_ExitInitMode+0x78>)
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <RTC_ExitInitMode+0x78>)
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	6193      	str	r3, [r2, #24]
  }

  return status;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40002800 	.word	0x40002800

080071fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800720e:	e005      	b.n	800721c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	3b0a      	subs	r3, #10
 800721a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	2b09      	cmp	r3, #9
 8007220:	d8f6      	bhi.n	8007210 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	b2da      	uxtb	r2, r3
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	4313      	orrs	r3, r2
 800722e:	b2db      	uxtb	r3, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
	...

0800723c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_RTCEx_EnableBypassShadow+0x16>
 800724e:	2302      	movs	r3, #2
 8007250:	e01f      	b.n	8007292 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007262:	4b0e      	ldr	r3, [pc, #56]	; (800729c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007264:	22ca      	movs	r2, #202	; 0xca
 8007266:	625a      	str	r2, [r3, #36]	; 0x24
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800726a:	2253      	movs	r2, #83	; 0x53
 800726c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800726e:	4b0b      	ldr	r3, [pc, #44]	; (800729c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	4a0a      	ldr	r2, [pc, #40]	; (800729c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007274:	f043 0320 	orr.w	r3, r3, #32
 8007278:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800727c:	22ff      	movs	r2, #255	; 0xff
 800727e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	40002800 	.word	0x40002800

080072a0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e027      	b.n	8007306 <HAL_RTCEx_SetSSRU_IT+0x66>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072c8:	22ca      	movs	r2, #202	; 0xca
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072ce:	2253      	movs	r2, #83	; 0x53
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4a0e      	ldr	r2, [pc, #56]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072dc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80072de:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80072e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072e4:	4a0b      	ldr	r2, [pc, #44]	; (8007314 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80072e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ee:	4b08      	ldr	r3, [pc, #32]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072f0:	22ff      	movs	r2, #255	; 0xff
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr
 8007310:	40002800 	.word	0x40002800
 8007314:	58000800 	.word	0x58000800

08007318 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fb f9a7 	bl	8002686 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40002800 	.word	0x40002800

0800734c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr
	...

08007360 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <HAL_RTCEx_BKUPWrite+0x2c>)
 800736e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	bc80      	pop	{r7}
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	4000b100 	.word	0x4000b100

08007390 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <HAL_RTCEx_BKUPRead+0x28>)
 800739c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	4000b100 	.word	0x4000b100

080073bc <LL_PWR_SetRadioBusyTrigger>:
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80073c4:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	608b      	str	r3, [r1, #8]
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	58000400 	.word	0x58000400

080073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ee:	4a04      	ldr	r2, [pc, #16]	; (8007400 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80073f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073f8:	bf00      	nop
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	58000400 	.word	0x58000400

08007404 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740e:	4a04      	ldr	r2, [pc, #16]	; (8007420 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	58000400 	.word	0x58000400

08007424 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007428:	4b03      	ldr	r3, [pc, #12]	; (8007438 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800742a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800742e:	619a      	str	r2, [r3, #24]
}
 8007430:	bf00      	nop
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	58000400 	.word	0x58000400

0800743c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b02      	cmp	r3, #2
 800744a:	d101      	bne.n	8007450 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	46bd      	mov	sp, r7
 8007456:	bc80      	pop	{r7}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	58000400 	.word	0x58000400

08007460 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b04      	cmp	r3, #4
 800746e:	d101      	bne.n	8007474 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	58000400 	.word	0x58000400

08007484 <LL_RCC_RF_DisableReset>:
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800749c:	bf00      	nop
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <LL_RCC_IsRFUnderReset>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80074a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074b8:	d101      	bne.n	80074be <LL_RCC_IsRFUnderReset+0x1a>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <LL_RCC_IsRFUnderReset+0x1c>
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80074d0:	4b06      	ldr	r3, [pc, #24]	; (80074ec <LL_EXTI_EnableIT_32_63+0x24>)
 80074d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80074d6:	4905      	ldr	r1, [pc, #20]	; (80074ec <LL_EXTI_EnableIT_32_63+0x24>)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	58000800 	.word	0x58000800

080074f0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
    return status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	e04b      	b.n	800759e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	799b      	ldrb	r3, [r3, #6]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fa fca2 	bl	8001e64 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007526:	f7ff ffad 	bl	8007484 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800752a:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <HAL_SUBGHZ_Init+0xb8>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4613      	mov	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	0cdb      	lsrs	r3, r3, #19
 8007538:	2264      	movs	r2, #100	; 0x64
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	609a      	str	r2, [r3, #8]
      break;
 8007550:	e007      	b.n	8007562 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	3b01      	subs	r3, #1
 8007556:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007558:	f7ff ffa4 	bl	80074a4 <LL_RCC_IsRFUnderReset>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1ee      	bne.n	8007540 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007562:	f7ff ff3f 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007566:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800756a:	f7ff ffad 	bl	80074c8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800756e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007572:	f7ff ff23 	bl	80073bc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007576:	f7ff ff55 	bl	8007424 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 faad 	bl	8007ae4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	719a      	strb	r2, [r3, #6]

  return status;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000000 	.word	0x20000000

080075ac <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	461a      	mov	r2, r3
 80075b8:	460b      	mov	r3, r1
 80075ba:	817b      	strh	r3, [r7, #10]
 80075bc:	4613      	mov	r3, r2
 80075be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	799b      	ldrb	r3, [r3, #6]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d14a      	bne.n	8007660 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e045      	b.n	8007662 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2202      	movs	r2, #2
 80075e0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fb4c 	bl	8007c80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075e8:	f7ff ff0c 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80075ec:	210d      	movs	r1, #13
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa98 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80075f4:	897b      	ldrh	r3, [r7, #10]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	4619      	mov	r1, r3
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fa90 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007604:	897b      	ldrh	r3, [r7, #10]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	4619      	mov	r1, r3
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fa8a 	bl	8007b24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007610:	2300      	movs	r3, #0
 8007612:	82bb      	strh	r3, [r7, #20]
 8007614:	e00a      	b.n	800762c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007616:	8abb      	ldrh	r3, [r7, #20]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	4619      	mov	r1, r3
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fa7f 	bl	8007b24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007626:	8abb      	ldrh	r3, [r7, #20]
 8007628:	3301      	adds	r3, #1
 800762a:	82bb      	strh	r3, [r7, #20]
 800762c:	8aba      	ldrh	r2, [r7, #20]
 800762e:	893b      	ldrh	r3, [r7, #8]
 8007630:	429a      	cmp	r2, r3
 8007632:	d3f0      	bcc.n	8007616 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007634:	f7ff fed6 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fb45 	bl	8007cc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e001      	b.n	8007650 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	715a      	strb	r2, [r3, #5]

    return status;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	e000      	b.n	8007662 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b088      	sub	sp, #32
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	461a      	mov	r2, r3
 8007676:	460b      	mov	r3, r1
 8007678:	817b      	strh	r3, [r7, #10]
 800767a:	4613      	mov	r3, r2
 800767c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	799b      	ldrb	r3, [r3, #6]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d14a      	bne.n	8007722 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	795b      	ldrb	r3, [r3, #5]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007694:	2302      	movs	r3, #2
 8007696:	e045      	b.n	8007724 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 faee 	bl	8007c80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076a4:	f7ff feae 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80076a8:	211d      	movs	r1, #29
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fa3a 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80076b0:	897b      	ldrh	r3, [r7, #10]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fa32 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80076c0:	897b      	ldrh	r3, [r7, #10]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fa2c 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fa28 	bl	8007b24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076d4:	2300      	movs	r3, #0
 80076d6:	82fb      	strh	r3, [r7, #22]
 80076d8:	e009      	b.n	80076ee <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80076da:	69b9      	ldr	r1, [r7, #24]
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fa77 	bl	8007bd0 <SUBGHZSPI_Receive>
      pData++;
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	3301      	adds	r3, #1
 80076e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80076e8:	8afb      	ldrh	r3, [r7, #22]
 80076ea:	3301      	adds	r3, #1
 80076ec:	82fb      	strh	r3, [r7, #22]
 80076ee:	8afa      	ldrh	r2, [r7, #22]
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d3f1      	bcc.n	80076da <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076f6:	f7ff fe75 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fae4 	bl	8007cc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e001      	b.n	8007712 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	715a      	strb	r2, [r3, #5]

    return status;
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	e000      	b.n	8007724 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007722:	2302      	movs	r3, #2
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	461a      	mov	r2, r3
 8007738:	460b      	mov	r3, r1
 800773a:	72fb      	strb	r3, [r7, #11]
 800773c:	4613      	mov	r3, r2
 800773e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	799b      	ldrb	r3, [r3, #6]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d14a      	bne.n	80077e0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	795b      	ldrb	r3, [r3, #5]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007752:	2302      	movs	r3, #2
 8007754:	e045      	b.n	80077e2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fa8f 	bl	8007c80 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	2b84      	cmp	r3, #132	; 0x84
 8007766:	d002      	beq.n	800776e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	2b94      	cmp	r3, #148	; 0x94
 800776c:	d103      	bne.n	8007776 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	711a      	strb	r2, [r3, #4]
 8007774:	e002      	b.n	800777c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800777c:	f7ff fe42 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	4619      	mov	r1, r3
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f9cd 	bl	8007b24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800778a:	2300      	movs	r3, #0
 800778c:	82bb      	strh	r3, [r7, #20]
 800778e:	e00a      	b.n	80077a6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007790:	8abb      	ldrh	r3, [r7, #20]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4619      	mov	r1, r3
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f9c2 	bl	8007b24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80077a0:	8abb      	ldrh	r3, [r7, #20]
 80077a2:	3301      	adds	r3, #1
 80077a4:	82bb      	strh	r3, [r7, #20]
 80077a6:	8aba      	ldrh	r2, [r7, #20]
 80077a8:	893b      	ldrh	r3, [r7, #8]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d3f0      	bcc.n	8007790 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077ae:	f7ff fe19 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	2b84      	cmp	r3, #132	; 0x84
 80077b6:	d002      	beq.n	80077be <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fa85 	bl	8007cc8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	75fb      	strb	r3, [r7, #23]
 80077ca:	e001      	b.n	80077d0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	715a      	strb	r2, [r3, #5]

    return status;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	e000      	b.n	80077e2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b088      	sub	sp, #32
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	461a      	mov	r2, r3
 80077f6:	460b      	mov	r3, r1
 80077f8:	72fb      	strb	r3, [r7, #11]
 80077fa:	4613      	mov	r3, r2
 80077fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	799b      	ldrb	r3, [r3, #6]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b01      	cmp	r3, #1
 800780a:	d13d      	bne.n	8007888 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	795b      	ldrb	r3, [r3, #5]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007814:	2302      	movs	r3, #2
 8007816:	e038      	b.n	800788a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fa2e 	bl	8007c80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007824:	f7ff fdee 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f979 	bl	8007b24 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007832:	2100      	movs	r1, #0
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f975 	bl	8007b24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800783a:	2300      	movs	r3, #0
 800783c:	82fb      	strh	r3, [r7, #22]
 800783e:	e009      	b.n	8007854 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f9c4 	bl	8007bd0 <SUBGHZSPI_Receive>
      pData++;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	3301      	adds	r3, #1
 800784c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800784e:	8afb      	ldrh	r3, [r7, #22]
 8007850:	3301      	adds	r3, #1
 8007852:	82fb      	strh	r3, [r7, #22]
 8007854:	8afa      	ldrh	r2, [r7, #22]
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	429a      	cmp	r2, r3
 800785a:	d3f1      	bcc.n	8007840 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800785c:	f7ff fdc2 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fa31 	bl	8007cc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e001      	b.n	8007878 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	715a      	strb	r2, [r3, #5]

    return status;
 8007884:	7ffb      	ldrb	r3, [r7, #31]
 8007886:	e000      	b.n	800788a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	461a      	mov	r2, r3
 800789e:	460b      	mov	r3, r1
 80078a0:	72fb      	strb	r3, [r7, #11]
 80078a2:	4613      	mov	r3, r2
 80078a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	799b      	ldrb	r3, [r3, #6]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d13e      	bne.n	800792e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	795b      	ldrb	r3, [r3, #5]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e039      	b.n	8007930 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f9dc 	bl	8007c80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078c8:	f7ff fd9c 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80078cc:	210e      	movs	r1, #14
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f928 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	4619      	mov	r1, r3
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f923 	bl	8007b24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078de:	2300      	movs	r3, #0
 80078e0:	82bb      	strh	r3, [r7, #20]
 80078e2:	e00a      	b.n	80078fa <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80078e4:	8abb      	ldrh	r3, [r7, #20]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f918 	bl	8007b24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80078f4:	8abb      	ldrh	r3, [r7, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	82bb      	strh	r3, [r7, #20]
 80078fa:	8aba      	ldrh	r2, [r7, #20]
 80078fc:	893b      	ldrh	r3, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d3f0      	bcc.n	80078e4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007902:	f7ff fd6f 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f9de 	bl	8007cc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
 8007918:	e001      	b.n	800791e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	715a      	strb	r2, [r3, #5]

    return status;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	e000      	b.n	8007930 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	461a      	mov	r2, r3
 8007944:	460b      	mov	r3, r1
 8007946:	72fb      	strb	r3, [r7, #11]
 8007948:	4613      	mov	r3, r2
 800794a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	799b      	ldrb	r3, [r3, #6]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d141      	bne.n	80079de <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	795b      	ldrb	r3, [r3, #5]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007962:	2302      	movs	r3, #2
 8007964:	e03c      	b.n	80079e0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f987 	bl	8007c80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007972:	f7ff fd47 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007976:	211e      	movs	r1, #30
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f8d3 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	4619      	mov	r1, r3
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f8ce 	bl	8007b24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007988:	2100      	movs	r1, #0
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f8ca 	bl	8007b24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007990:	2300      	movs	r3, #0
 8007992:	82fb      	strh	r3, [r7, #22]
 8007994:	e009      	b.n	80079aa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007996:	69b9      	ldr	r1, [r7, #24]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f919 	bl	8007bd0 <SUBGHZSPI_Receive>
      pData++;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	3301      	adds	r3, #1
 80079a2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80079a4:	8afb      	ldrh	r3, [r7, #22]
 80079a6:	3301      	adds	r3, #1
 80079a8:	82fb      	strh	r3, [r7, #22]
 80079aa:	8afa      	ldrh	r2, [r7, #22]
 80079ac:	893b      	ldrh	r3, [r7, #8]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d3f1      	bcc.n	8007996 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079b2:	f7ff fd17 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f986 	bl	8007cc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e001      	b.n	80079ce <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	715a      	strb	r2, [r3, #5]

    return status;
 80079da:	7ffb      	ldrb	r3, [r7, #31]
 80079dc:	e000      	b.n	80079e0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80079f0:	2300      	movs	r3, #0
 80079f2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80079f4:	f107 020c 	add.w	r2, r7, #12
 80079f8:	2302      	movs	r3, #2
 80079fa:	2112      	movs	r1, #18
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fef4 	bl	80077ea <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007a02:	7b3b      	ldrb	r3, [r7, #12]
 8007a04:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007a06:	89fb      	ldrh	r3, [r7, #14]
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	b21a      	sxth	r2, r3
 8007a0c:	7b7b      	ldrb	r3, [r7, #13]
 8007a0e:	b21b      	sxth	r3, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	b21b      	sxth	r3, r3
 8007a14:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f013 fe41 	bl	801b6a8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007a26:	89fb      	ldrh	r3, [r7, #14]
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f013 fe46 	bl	801b6c4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	089b      	lsrs	r3, r3, #2
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f013 fe95 	bl	801b774 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007a4a:	89fb      	ldrh	r3, [r7, #14]
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f013 fe9a 	bl	801b790 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007a5c:	89fb      	ldrh	r3, [r7, #14]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f013 fe9f 	bl	801b7ac <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007a6e:	89fb      	ldrh	r3, [r7, #14]
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f013 fe6c 	bl	801b758 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	099b      	lsrs	r3, r3, #6
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f013 fe27 	bl	801b6e0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007a92:	89fb      	ldrh	r3, [r7, #14]
 8007a94:	09db      	lsrs	r3, r3, #7
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007a9e:	89fb      	ldrh	r3, [r7, #14]
 8007aa0:	0a1b      	lsrs	r3, r3, #8
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007aaa:	2101      	movs	r1, #1
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f013 fe25 	bl	801b6fc <HAL_SUBGHZ_CADStatusCallback>
 8007ab2:	e003      	b.n	8007abc <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f013 fe20 	bl	801b6fc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007abc:	89fb      	ldrh	r3, [r7, #14]
 8007abe:	0a5b      	lsrs	r3, r3, #9
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f013 fe35 	bl	801b738 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007ace:	f107 020c 	add.w	r2, r7, #12
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fe28 	bl	800772c <HAL_SUBGHZ_ExecSetCmd>
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <SUBGHZSPI_Init+0x3c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <SUBGHZSPI_Init+0x3c>)
 8007af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <SUBGHZSPI_Init+0x3c>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007b00:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <SUBGHZSPI_Init+0x3c>)
 8007b04:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007b08:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b0a:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <SUBGHZSPI_Init+0x3c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <SUBGHZSPI_Init+0x3c>)
 8007b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b14:	6013      	str	r3, [r2, #0]
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr
 8007b20:	58010000 	.word	0x58010000

08007b24 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b34:	4b23      	ldr	r3, [pc, #140]	; (8007bc4 <SUBGHZSPI_Transmit+0xa0>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	0cdb      	lsrs	r3, r3, #19
 8007b42:	2264      	movs	r2, #100	; 0x64
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	609a      	str	r2, [r3, #8]
      break;
 8007b5a:	e008      	b.n	8007b6e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <SUBGHZSPI_Transmit+0xa4>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d1ed      	bne.n	8007b4a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007b6e:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <SUBGHZSPI_Transmit+0xa8>)
 8007b70:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <SUBGHZSPI_Transmit+0xa0>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	0cdb      	lsrs	r3, r3, #19
 8007b86:	2264      	movs	r2, #100	; 0x64
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d105      	bne.n	8007ba0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	609a      	str	r2, [r3, #8]
      break;
 8007b9e:	e008      	b.n	8007bb2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <SUBGHZSPI_Transmit+0xa4>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d1ed      	bne.n	8007b8e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <SUBGHZSPI_Transmit+0xa4>)
 8007bb4:	68db      	ldr	r3, [r3, #12]

  return status;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000000 	.word	0x20000000
 8007bc8:	58010000 	.word	0x58010000
 8007bcc:	5801000c 	.word	0x5801000c

08007bd0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007bde:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <SUBGHZSPI_Receive+0xa4>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	1a9b      	subs	r3, r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	0cdb      	lsrs	r3, r3, #19
 8007bec:	2264      	movs	r2, #100	; 0x64
 8007bee:	fb02 f303 	mul.w	r3, r2, r3
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	609a      	str	r2, [r3, #8]
      break;
 8007c04:	e008      	b.n	8007c18 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c0c:	4b1a      	ldr	r3, [pc, #104]	; (8007c78 <SUBGHZSPI_Receive+0xa8>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d1ed      	bne.n	8007bf4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c18:	4b18      	ldr	r3, [pc, #96]	; (8007c7c <SUBGHZSPI_Receive+0xac>)
 8007c1a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	22ff      	movs	r2, #255	; 0xff
 8007c20:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <SUBGHZSPI_Receive+0xa4>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4613      	mov	r3, r2
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	0cdb      	lsrs	r3, r3, #19
 8007c30:	2264      	movs	r2, #100	; 0x64
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	609a      	str	r2, [r3, #8]
      break;
 8007c48:	e008      	b.n	8007c5c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c50:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <SUBGHZSPI_Receive+0xa8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d1ed      	bne.n	8007c38 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <SUBGHZSPI_Receive+0xa8>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	701a      	strb	r2, [r3, #0]

  return status;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000000 	.word	0x20000000
 8007c78:	58010000 	.word	0x58010000
 8007c7c:	5801000c 	.word	0x5801000c

08007c80 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	791b      	ldrb	r3, [r3, #4]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d111      	bne.n	8007cb4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <SUBGHZ_CheckDeviceReady+0x44>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	4413      	add	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ca0:	f7ff fbb0 	bl	8007404 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f9      	bne.n	8007ca4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007cb0:	f7ff fb98 	bl	80073e4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f807 	bl	8007cc8 <SUBGHZ_WaitOnBusy>
 8007cba:	4603      	mov	r3, r0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000000 	.word	0x20000000

08007cc8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007cd4:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <SUBGHZ_WaitOnBusy+0x58>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	0d1b      	lsrs	r3, r3, #20
 8007ce2:	2264      	movs	r2, #100	; 0x64
 8007ce4:	fb02 f303 	mul.w	r3, r2, r3
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007cea:	f7ff fbb9 	bl	8007460 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007cee:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d105      	bne.n	8007d02 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	609a      	str	r2, [r3, #8]
      break;
 8007d00:	e009      	b.n	8007d16 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007d08:	f7ff fb98 	bl	800743c <LL_PWR_IsActiveFlag_RFBUSYS>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d0e9      	beq.n	8007cea <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000000 	.word	0x20000000

08007d24 <LL_RCC_GetUSARTClockSource>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	401a      	ands	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	4313      	orrs	r3, r2
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <LL_RCC_GetLPUARTClockSource>:
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4013      	ands	r3, r2
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr

08007d66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e042      	b.n	8007dfe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fa fe56 	bl	8002a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2224      	movs	r2, #36	; 0x24
 8007d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fcf3 	bl	8008794 <UART_SetConfig>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e022      	b.n	8007dfe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 ff5b 	bl	8008c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007de4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0201 	orr.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 ffe1 	bl	8008dbe <UART_CheckIdleState>
 8007dfc:	4603      	mov	r3, r0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b091      	sub	sp, #68	; 0x44
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	f040 808c 	bne.w	8007f3a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_UART_Transmit_IT+0x26>
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e084      	b.n	8007f3c <HAL_UART_Transmit_IT+0x134>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_UART_Transmit_IT+0x38>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e07d      	b.n	8007f3c <HAL_UART_Transmit_IT+0x134>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	88fa      	ldrh	r2, [r7, #6]
 8007e52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	88fa      	ldrh	r2, [r7, #6]
 8007e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2221      	movs	r2, #33	; 0x21
 8007e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7c:	d12e      	bne.n	8007edc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e86:	d107      	bne.n	8007e98 <HAL_UART_Transmit_IT+0x90>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a2d      	ldr	r2, [pc, #180]	; (8007f48 <HAL_UART_Transmit_IT+0x140>)
 8007e94:	675a      	str	r2, [r3, #116]	; 0x74
 8007e96:	e002      	b.n	8007e9e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <HAL_UART_Transmit_IT+0x144>)
 8007e9c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec6:	637a      	str	r2, [r7, #52]	; 0x34
 8007ec8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <HAL_UART_Transmit_IT+0x9e>
 8007eda:	e02c      	b.n	8007f36 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee4:	d107      	bne.n	8007ef6 <HAL_UART_Transmit_IT+0xee>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <HAL_UART_Transmit_IT+0x148>)
 8007ef2:	675a      	str	r2, [r3, #116]	; 0x74
 8007ef4:	e002      	b.n	8007efc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <HAL_UART_Transmit_IT+0x14c>)
 8007efa:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	613b      	str	r3, [r7, #16]
   return(result);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f22:	623b      	str	r3, [r7, #32]
 8007f24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	69f9      	ldr	r1, [r7, #28]
 8007f28:	6a3a      	ldr	r2, [r7, #32]
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e6      	bne.n	8007f04 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007f3a:	2302      	movs	r3, #2
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3744      	adds	r7, #68	; 0x44
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	08009735 	.word	0x08009735
 8007f4c:	08009657 	.word	0x08009657
 8007f50:	08009597 	.word	0x08009597
 8007f54:	080094e1 	.word	0x080094e1

08007f58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d142      	bne.n	8007ff6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_UART_Receive_IT+0x24>
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e03b      	b.n	8007ff8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Receive_IT+0x36>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e034      	b.n	8007ff8 <HAL_UART_Receive_IT+0xa0>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a17      	ldr	r2, [pc, #92]	; (8008000 <HAL_UART_Receive_IT+0xa8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01f      	beq.n	8007fe6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d018      	beq.n	8007fe6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	623b      	str	r3, [r7, #32]
 8007fd4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	69f9      	ldr	r1, [r7, #28]
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fff9 	bl	8008fe4 <UART_Start_Receive_IT>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	e000      	b.n	8007ff8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3728      	adds	r7, #40	; 0x28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40008000 	.word	0x40008000

08008004 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008018:	2b20      	cmp	r3, #32
 800801a:	d17a      	bne.n	8008112 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Transmit_DMA+0x24>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e073      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_UART_Transmit_DMA+0x36>
 8008036:	2302      	movs	r3, #2
 8008038:	e06c      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2221      	movs	r2, #33	; 0x21
 8008064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02c      	beq.n	80080ca <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008074:	4a29      	ldr	r2, [pc, #164]	; (800811c <HAL_UART_Transmit_DMA+0x118>)
 8008076:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800807c:	4a28      	ldr	r2, [pc, #160]	; (8008120 <HAL_UART_Transmit_DMA+0x11c>)
 800807e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008084:	4a27      	ldr	r2, [pc, #156]	; (8008124 <HAL_UART_Transmit_DMA+0x120>)
 8008086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800808c:	2200      	movs	r2, #0
 800808e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008098:	4619      	mov	r1, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3328      	adds	r3, #40	; 0x28
 80080a0:	461a      	mov	r2, r3
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	f7fc faf6 	bl	8004694 <HAL_DMA_Start_IT>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00d      	beq.n	80080ca <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2210      	movs	r2, #16
 80080b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e024      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2240      	movs	r2, #64	; 0x40
 80080d0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3308      	adds	r3, #8
 80080e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3308      	adds	r3, #8
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	623a      	str	r2, [r7, #32]
 80080fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	69f9      	ldr	r1, [r7, #28]
 8008100:	6a3a      	ldr	r2, [r7, #32]
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	61bb      	str	r3, [r7, #24]
   return(result);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e5      	bne.n	80080da <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e000      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3728      	adds	r7, #40	; 0x28
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	0800937f 	.word	0x0800937f
 8008120:	08009419 	.word	0x08009419
 8008124:	08009435 	.word	0x08009435

08008128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b0ba      	sub	sp, #232	; 0xe8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800814e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008152:	f640 030f 	movw	r3, #2063	; 0x80f
 8008156:	4013      	ands	r3, r2
 8008158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800815c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11b      	bne.n	800819c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d015      	beq.n	800819c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d105      	bne.n	8008188 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800817c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 82d6 	beq.w	800873e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
      }
      return;
 800819a:	e2d0      	b.n	800873e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800819c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 811f 	beq.w	80083e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081aa:	4b8b      	ldr	r3, [pc, #556]	; (80083d8 <HAL_UART_IRQHandler+0x2b0>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80081b6:	4b89      	ldr	r3, [pc, #548]	; (80083dc <HAL_UART_IRQHandler+0x2b4>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8112 	beq.w	80083e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <HAL_UART_IRQHandler+0xc8>
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2201      	movs	r2, #1
 80081de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e6:	f043 0201 	orr.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d011      	beq.n	8008220 <HAL_UART_IRQHandler+0xf8>
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2202      	movs	r2, #2
 800820e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008216:	f043 0204 	orr.w	r2, r3, #4
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d011      	beq.n	8008250 <HAL_UART_IRQHandler+0x128>
 800822c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2204      	movs	r2, #4
 800823e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008246:	f043 0202 	orr.w	r2, r3, #2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d017      	beq.n	800828c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008260:	f003 0320 	and.w	r3, r3, #32
 8008264:	2b00      	cmp	r3, #0
 8008266:	d105      	bne.n	8008274 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008268:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800826c:	4b5a      	ldr	r3, [pc, #360]	; (80083d8 <HAL_UART_IRQHandler+0x2b0>)
 800826e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2208      	movs	r2, #8
 800827a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008294:	2b00      	cmp	r3, #0
 8008296:	d012      	beq.n	80082be <HAL_UART_IRQHandler+0x196>
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 823c 	beq.w	8008742 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d005      	beq.n	8008322 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800831a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04f      	beq.n	80083c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 ffc6 	bl	80092b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d141      	bne.n	80083ba <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800834c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800836e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800837a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1d9      	bne.n	8008336 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d013      	beq.n	80083b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <HAL_UART_IRQHandler+0x2b8>)
 8008390:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008396:	4618      	mov	r0, r3
 8008398:	f7fc fa58 	bl	800484c <HAL_DMA_Abort_IT>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d017      	beq.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	e00f      	b.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9d9 	bl	800876a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	e00b      	b.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9d5 	bl	800876a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	e007      	b.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f9d1 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083d0:	e1b7      	b.n	8008742 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d2:	bf00      	nop
    return;
 80083d4:	e1b5      	b.n	8008742 <HAL_UART_IRQHandler+0x61a>
 80083d6:	bf00      	nop
 80083d8:	10000001 	.word	0x10000001
 80083dc:	04000120 	.word	0x04000120
 80083e0:	080094b5 	.word	0x080094b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	f040 814a 	bne.w	8008682 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8143 	beq.w	8008682 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80083fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 813c 	beq.w	8008682 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2210      	movs	r2, #16
 8008410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841c:	2b40      	cmp	r3, #64	; 0x40
 800841e:	f040 80b5 	bne.w	800858c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800842e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8187 	beq.w	8008746 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800843e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008442:	429a      	cmp	r2, r3
 8008444:	f080 817f 	bcs.w	8008746 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800844e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	f040 8086 	bne.w	8008570 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800847c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800848e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800849a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1da      	bne.n	8008464 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e1      	bne.n	80084ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800850e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800851c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e3      	bne.n	80084ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800853e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008540:	f023 0310 	bic.w	r3, r3, #16
 8008544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008552:	65bb      	str	r3, [r7, #88]	; 0x58
 8008554:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856a:	4618      	mov	r0, r3
 800856c:	f7fc f910 	bl	8004790 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800857c:	b29b      	uxth	r3, r3
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8f9 	bl	800877c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800858a:	e0dc      	b.n	8008746 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008598:	b29b      	uxth	r3, r3
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80ce 	beq.w	800874a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80085ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80c9 	beq.w	800874a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085da:	647b      	str	r3, [r7, #68]	; 0x44
 80085dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e4      	bne.n	80085b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3308      	adds	r3, #8
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	623b      	str	r3, [r7, #32]
   return(result);
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3308      	adds	r3, #8
 8008612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008616:	633a      	str	r2, [r7, #48]	; 0x30
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e1      	bne.n	80085ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	60fb      	str	r3, [r7, #12]
   return(result);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0310 	bic.w	r3, r3, #16
 8008652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	617b      	str	r3, [r7, #20]
   return(result);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e4      	bne.n	800863e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f87e 	bl	800877c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008680:	e063      	b.n	800874a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <HAL_UART_IRQHandler+0x584>
 800868e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fd41 	bl	800a12c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086aa:	e051      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d014      	beq.n	80086e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d03a      	beq.n	800874e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
    }
    return;
 80086e0:	e035      	b.n	800874e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <HAL_UART_IRQHandler+0x5da>
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 f88e 	bl	800981c <UART_EndTransmit_IT>
    return;
 8008700:	e026      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <HAL_UART_IRQHandler+0x5fa>
 800870e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008712:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fd18 	bl	800a150 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008720:	e016      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d010      	beq.n	8008750 <HAL_UART_IRQHandler+0x628>
 800872e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008732:	2b00      	cmp	r3, #0
 8008734:	da0c      	bge.n	8008750 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fd01 	bl	800a13e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873c:	e008      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
      return;
 800873e:	bf00      	nop
 8008740:	e006      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
    return;
 8008742:	bf00      	nop
 8008744:	e004      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
      return;
 8008746:	bf00      	nop
 8008748:	e002      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
      return;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
    return;
 800874e:	bf00      	nop
  }
}
 8008750:	37e8      	adds	r7, #232	; 0xe8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop

08008758 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr

0800876a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr
	...

08008794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008798:	b08c      	sub	sp, #48	; 0x30
 800879a:	af00      	add	r7, sp, #0
 800879c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	431a      	orrs	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b94      	ldr	r3, [pc, #592]	; (8008a14 <UART_SetConfig+0x280>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087cc:	430b      	orrs	r3, r1
 80087ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a89      	ldr	r2, [pc, #548]	; (8008a18 <UART_SetConfig+0x284>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087fc:	4313      	orrs	r3, r2
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800880a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008814:	430b      	orrs	r3, r1
 8008816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	f023 010f 	bic.w	r1, r3, #15
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a7a      	ldr	r2, [pc, #488]	; (8008a1c <UART_SetConfig+0x288>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d127      	bne.n	8008888 <UART_SetConfig+0xf4>
 8008838:	2003      	movs	r0, #3
 800883a:	f7ff fa73 	bl	8007d24 <LL_RCC_GetUSARTClockSource>
 800883e:	4603      	mov	r3, r0
 8008840:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008844:	2b03      	cmp	r3, #3
 8008846:	d81b      	bhi.n	8008880 <UART_SetConfig+0xec>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0xbc>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008861 	.word	0x08008861
 8008854:	08008871 	.word	0x08008871
 8008858:	08008869 	.word	0x08008869
 800885c:	08008879 	.word	0x08008879
 8008860:	2301      	movs	r3, #1
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e080      	b.n	800896a <UART_SetConfig+0x1d6>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886e:	e07c      	b.n	800896a <UART_SetConfig+0x1d6>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008876:	e078      	b.n	800896a <UART_SetConfig+0x1d6>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e074      	b.n	800896a <UART_SetConfig+0x1d6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008886:	e070      	b.n	800896a <UART_SetConfig+0x1d6>
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a64      	ldr	r2, [pc, #400]	; (8008a20 <UART_SetConfig+0x28c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d138      	bne.n	8008904 <UART_SetConfig+0x170>
 8008892:	200c      	movs	r0, #12
 8008894:	f7ff fa46 	bl	8007d24 <LL_RCC_GetUSARTClockSource>
 8008898:	4603      	mov	r3, r0
 800889a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800889e:	2b0c      	cmp	r3, #12
 80088a0:	d82c      	bhi.n	80088fc <UART_SetConfig+0x168>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x114>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088dd 	.word	0x080088dd
 80088ac:	080088fd 	.word	0x080088fd
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	080088fd 	.word	0x080088fd
 80088b8:	080088ed 	.word	0x080088ed
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088fd 	.word	0x080088fd
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088fd 	.word	0x080088fd
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e2:	e042      	b.n	800896a <UART_SetConfig+0x1d6>
 80088e4:	2302      	movs	r3, #2
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ea:	e03e      	b.n	800896a <UART_SetConfig+0x1d6>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f2:	e03a      	b.n	800896a <UART_SetConfig+0x1d6>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fa:	e036      	b.n	800896a <UART_SetConfig+0x1d6>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008902:	e032      	b.n	800896a <UART_SetConfig+0x1d6>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a43      	ldr	r2, [pc, #268]	; (8008a18 <UART_SetConfig+0x284>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d12a      	bne.n	8008964 <UART_SetConfig+0x1d0>
 800890e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008912:	f7ff fa19 	bl	8007d48 <LL_RCC_GetLPUARTClockSource>
 8008916:	4603      	mov	r3, r0
 8008918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800891c:	d01a      	beq.n	8008954 <UART_SetConfig+0x1c0>
 800891e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008922:	d81b      	bhi.n	800895c <UART_SetConfig+0x1c8>
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008928:	d00c      	beq.n	8008944 <UART_SetConfig+0x1b0>
 800892a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892e:	d815      	bhi.n	800895c <UART_SetConfig+0x1c8>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <UART_SetConfig+0x1a8>
 8008934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008938:	d008      	beq.n	800894c <UART_SetConfig+0x1b8>
 800893a:	e00f      	b.n	800895c <UART_SetConfig+0x1c8>
 800893c:	2300      	movs	r3, #0
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008942:	e012      	b.n	800896a <UART_SetConfig+0x1d6>
 8008944:	2302      	movs	r3, #2
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894a:	e00e      	b.n	800896a <UART_SetConfig+0x1d6>
 800894c:	2304      	movs	r3, #4
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008952:	e00a      	b.n	800896a <UART_SetConfig+0x1d6>
 8008954:	2308      	movs	r3, #8
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800895a:	e006      	b.n	800896a <UART_SetConfig+0x1d6>
 800895c:	2310      	movs	r3, #16
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008962:	e002      	b.n	800896a <UART_SetConfig+0x1d6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a2a      	ldr	r2, [pc, #168]	; (8008a18 <UART_SetConfig+0x284>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f040 80a4 	bne.w	8008abe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800897a:	2b08      	cmp	r3, #8
 800897c:	d823      	bhi.n	80089c6 <UART_SetConfig+0x232>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <UART_SetConfig+0x1f0>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089c7 	.word	0x080089c7
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089c7 	.word	0x080089c7
 8008994:	080089b7 	.word	0x080089b7
 8008998:	080089c7 	.word	0x080089c7
 800899c:	080089c7 	.word	0x080089c7
 80089a0:	080089c7 	.word	0x080089c7
 80089a4:	080089bf 	.word	0x080089bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a8:	f7fd fea0 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 80089ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089ae:	e010      	b.n	80089d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089b0:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <UART_SetConfig+0x290>)
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b4:	e00d      	b.n	80089d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b6:	f7fd fde5 	bl	8006584 <HAL_RCC_GetSysClockFreq>
 80089ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089bc:	e009      	b.n	80089d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089c4:	e005      	b.n	80089d2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8137 	beq.w	8008c48 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <UART_SetConfig+0x294>)
 80089e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d305      	bcc.n	8008a0a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d910      	bls.n	8008a2c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a10:	e11a      	b.n	8008c48 <UART_SetConfig+0x4b4>
 8008a12:	bf00      	nop
 8008a14:	cfff69f3 	.word	0xcfff69f3
 8008a18:	40008000 	.word	0x40008000
 8008a1c:	40013800 	.word	0x40013800
 8008a20:	40004400 	.word	0x40004400
 8008a24:	00f42400 	.word	0x00f42400
 8008a28:	08020330 	.word	0x08020330
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	2200      	movs	r2, #0
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	60fa      	str	r2, [r7, #12]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	4a8e      	ldr	r2, [pc, #568]	; (8008c74 <UART_SetConfig+0x4e0>)
 8008a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	2200      	movs	r2, #0
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a4e:	f7f8 fa11 	bl	8000e74 <__aeabi_uldivmod>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	f04f 0200 	mov.w	r2, #0
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	020b      	lsls	r3, r1, #8
 8008a64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a68:	0202      	lsls	r2, r0, #8
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	6849      	ldr	r1, [r1, #4]
 8008a6e:	0849      	lsrs	r1, r1, #1
 8008a70:	2000      	movs	r0, #0
 8008a72:	460c      	mov	r4, r1
 8008a74:	4605      	mov	r5, r0
 8008a76:	eb12 0804 	adds.w	r8, r2, r4
 8008a7a:	eb43 0905 	adc.w	r9, r3, r5
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	469a      	mov	sl, r3
 8008a86:	4693      	mov	fp, r2
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f9f0 	bl	8000e74 <__aeabi_uldivmod>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4613      	mov	r3, r2
 8008a9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aa2:	d308      	bcc.n	8008ab6 <UART_SetConfig+0x322>
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aaa:	d204      	bcs.n	8008ab6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	60da      	str	r2, [r3, #12]
 8008ab4:	e0c8      	b.n	8008c48 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008abc:	e0c4      	b.n	8008c48 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac6:	d168      	bne.n	8008b9a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d828      	bhi.n	8008b22 <UART_SetConfig+0x38e>
 8008ad0:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <UART_SetConfig+0x344>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	08008b23 	.word	0x08008b23
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b23 	.word	0x08008b23
 8008af8:	08008b1b 	.word	0x08008b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008afc:	f7fd fdf6 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8008b00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b02:	e014      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b04:	f7fd fe04 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b0a:	e010      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b0c:	4b5a      	ldr	r3, [pc, #360]	; (8008c78 <UART_SetConfig+0x4e4>)
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b10:	e00d      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b12:	f7fd fd37 	bl	8006584 <HAL_RCC_GetSysClockFreq>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b18:	e009      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b20:	e005      	b.n	8008b2e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 8089 	beq.w	8008c48 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	4a4e      	ldr	r2, [pc, #312]	; (8008c74 <UART_SetConfig+0x4e0>)
 8008b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b48:	005a      	lsls	r2, r3, #1
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	441a      	add	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	2b0f      	cmp	r3, #15
 8008b62:	d916      	bls.n	8008b92 <UART_SetConfig+0x3fe>
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6a:	d212      	bcs.n	8008b92 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	f023 030f 	bic.w	r3, r3, #15
 8008b74:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	8bfb      	ldrh	r3, [r7, #30]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	8bfa      	ldrh	r2, [r7, #30]
 8008b8e:	60da      	str	r2, [r3, #12]
 8008b90:	e05a      	b.n	8008c48 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b98:	e056      	b.n	8008c48 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d827      	bhi.n	8008bf2 <UART_SetConfig+0x45e>
 8008ba2:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <UART_SetConfig+0x414>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	08008bf3 	.word	0x08008bf3
 8008bb8:	08008be3 	.word	0x08008be3
 8008bbc:	08008bf3 	.word	0x08008bf3
 8008bc0:	08008bf3 	.word	0x08008bf3
 8008bc4:	08008bf3 	.word	0x08008bf3
 8008bc8:	08008beb 	.word	0x08008beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fd fd8e 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8008bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bd2:	e014      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd4:	f7fd fd9c 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 8008bd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bda:	e010      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bdc:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <UART_SetConfig+0x4e4>)
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008be0:	e00d      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be2:	f7fd fccf 	bl	8006584 <HAL_RCC_GetSysClockFreq>
 8008be6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008be8:	e009      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bf0:	e005      	b.n	8008bfe <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d021      	beq.n	8008c48 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	4a1a      	ldr	r2, [pc, #104]	; (8008c74 <UART_SetConfig+0x4e0>)
 8008c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	441a      	add	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	2b0f      	cmp	r3, #15
 8008c2e:	d908      	bls.n	8008c42 <UART_SetConfig+0x4ae>
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c36:	d204      	bcs.n	8008c42 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	60da      	str	r2, [r3, #12]
 8008c40:	e002      	b.n	8008c48 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3730      	adds	r7, #48	; 0x30
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c72:	bf00      	nop
 8008c74:	08020330 	.word	0x08020330
 8008c78:	00f42400 	.word	0x00f42400

08008c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00a      	beq.n	8008ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01a      	beq.n	8008d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d7a:	d10a      	bne.n	8008d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]
  }
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af02      	add	r7, sp, #8
 8008dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dce:	f7f9 f9c5 	bl	800215c <HAL_GetTick>
 8008dd2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b08      	cmp	r3, #8
 8008de0:	d10e      	bne.n	8008e00 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f82f 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e025      	b.n	8008e4c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d10e      	bne.n	8008e2c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f819 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e00f      	b.n	8008e4c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b09c      	sub	sp, #112	; 0x70
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4613      	mov	r3, r2
 8008e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e64:	e0a9      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	f000 80a5 	beq.w	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e70:	f7f9 f974 	bl	800215c <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d302      	bcc.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d140      	bne.n	8008f08 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e6      	bne.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	f023 0301 	bic.w	r3, r3, #1
 8008ece:	663b      	str	r3, [r7, #96]	; 0x60
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ed8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e5      	bne.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e069      	b.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d051      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f24:	d149      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e6      	bne.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	613b      	str	r3, [r7, #16]
   return(result);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f82:	623a      	str	r2, [r7, #32]
 8008f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	69f9      	ldr	r1, [r7, #28]
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e5      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e010      	b.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	f43f af46 	beq.w	8008e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3770      	adds	r7, #112	; 0x70
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b0a3      	sub	sp, #140	; 0x8c
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009016:	d10e      	bne.n	8009036 <UART_Start_Receive_IT+0x52>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <UART_Start_Receive_IT+0x48>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800902a:	e02d      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009034:	e028      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10d      	bne.n	800905a <UART_Start_Receive_IT+0x76>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <UART_Start_Receive_IT+0x6c>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	22ff      	movs	r2, #255	; 0xff
 800904a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800904e:	e01b      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	227f      	movs	r2, #127	; 0x7f
 8009054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009058:	e016      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009062:	d10d      	bne.n	8009080 <UART_Start_Receive_IT+0x9c>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <UART_Start_Receive_IT+0x92>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	227f      	movs	r2, #127	; 0x7f
 8009070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009074:	e008      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	223f      	movs	r2, #63	; 0x3f
 800907a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800907e:	e003      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2222      	movs	r2, #34	; 0x22
 8009094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80090bc:	673a      	str	r2, [r7, #112]	; 0x70
 80090be:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80090c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80090ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e3      	bne.n	8009098 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d8:	d153      	bne.n	8009182 <UART_Start_Receive_IT+0x19e>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090e0:	88fa      	ldrh	r2, [r7, #6]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d34d      	bcc.n	8009182 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ee:	d107      	bne.n	8009100 <UART_Start_Receive_IT+0x11c>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4a4a      	ldr	r2, [pc, #296]	; (8009224 <UART_Start_Receive_IT+0x240>)
 80090fc:	671a      	str	r2, [r3, #112]	; 0x70
 80090fe:	e002      	b.n	8009106 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4a49      	ldr	r2, [pc, #292]	; (8009228 <UART_Start_Receive_IT+0x244>)
 8009104:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01a      	beq.n	800914c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800912a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800913a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800913e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3308      	adds	r3, #8
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3308      	adds	r3, #8
 800916a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800916c:	64ba      	str	r2, [r7, #72]	; 0x48
 800916e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800917a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <UART_Start_Receive_IT+0x168>
 8009180:	e04a      	b.n	8009218 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918a:	d107      	bne.n	800919c <UART_Start_Receive_IT+0x1b8>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a25      	ldr	r2, [pc, #148]	; (800922c <UART_Start_Receive_IT+0x248>)
 8009198:	671a      	str	r2, [r3, #112]	; 0x70
 800919a:	e002      	b.n	80091a2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a24      	ldr	r2, [pc, #144]	; (8009230 <UART_Start_Receive_IT+0x24c>)
 80091a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d019      	beq.n	80091e6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80091c6:	677b      	str	r3, [r7, #116]	; 0x74
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
 80091d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e6      	bne.n	80091b2 <UART_Start_Receive_IT+0x1ce>
 80091e4:	e018      	b.n	8009218 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f043 0320 	orr.w	r3, r3, #32
 80091fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009204:	623b      	str	r3, [r7, #32]
 8009206:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	61bb      	str	r3, [r7, #24]
   return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e6      	bne.n	80091e6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	378c      	adds	r7, #140	; 0x8c
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr
 8009224:	08009e2d 	.word	0x08009e2d
 8009228:	08009b35 	.word	0x08009b35
 800922c:	080099d3 	.word	0x080099d3
 8009230:	08009873 	.word	0x08009873

08009234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b08f      	sub	sp, #60	; 0x3c
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	61fb      	str	r3, [r7, #28]
   return(result);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800925c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e6      	bne.n	800923c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	60bb      	str	r3, [r7, #8]
   return(result);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009284:	633b      	str	r3, [r7, #48]	; 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928e:	61ba      	str	r2, [r7, #24]
 8009290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6979      	ldr	r1, [r7, #20]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	613b      	str	r3, [r7, #16]
   return(result);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80092aa:	bf00      	nop
 80092ac:	373c      	adds	r7, #60	; 0x3c
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr

080092b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b095      	sub	sp, #84	; 0x54
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092da:	643b      	str	r3, [r7, #64]	; 0x40
 80092dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009304:	f023 0301 	bic.w	r3, r3, #1
 8009308:	64bb      	str	r3, [r7, #72]	; 0x48
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932a:	2b01      	cmp	r3, #1
 800932c:	d118      	bne.n	8009360 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	60bb      	str	r3, [r7, #8]
   return(result);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f023 0310 	bic.w	r3, r3, #16
 8009342:	647b      	str	r3, [r7, #68]	; 0x44
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934c:	61bb      	str	r3, [r7, #24]
 800934e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6979      	ldr	r1, [r7, #20]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	613b      	str	r3, [r7, #16]
   return(result);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009374:	bf00      	nop
 8009376:	3754      	adds	r7, #84	; 0x54
 8009378:	46bd      	mov	sp, r7
 800937a:	bc80      	pop	{r7}
 800937c:	4770      	bx	lr

0800937e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b090      	sub	sp, #64	; 0x40
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d137      	bne.n	800940a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800939a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939c:	2200      	movs	r2, #0
 800939e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	623b      	str	r3, [r7, #32]
   return(result);
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c2:	633a      	str	r2, [r7, #48]	; 0x30
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ea:	637b      	str	r3, [r7, #52]	; 0x34
 80093ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f4:	61fb      	str	r3, [r7, #28]
 80093f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	617b      	str	r3, [r7, #20]
   return(result);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e6      	bne.n	80093d6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009408:	e002      	b.n	8009410 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800940a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800940c:	f7f9 fcce 	bl	8002dac <HAL_UART_TxCpltCallback>
}
 8009410:	bf00      	nop
 8009412:	3740      	adds	r7, #64	; 0x40
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff f996 	bl	8008758 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009448:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009450:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	d109      	bne.n	8009474 <UART_DMAError+0x40>
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	2b21      	cmp	r3, #33	; 0x21
 8009464:	d106      	bne.n	8009474 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2200      	movs	r2, #0
 800946a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f7ff fee0 	bl	8009234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d109      	bne.n	8009496 <UART_DMAError+0x62>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b22      	cmp	r3, #34	; 0x22
 8009486:	d106      	bne.n	8009496 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2200      	movs	r2, #0
 800948c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	f7ff ff0f 	bl	80092b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800949c:	f043 0210 	orr.w	r2, r3, #16
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff f95f 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff f949 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b08f      	sub	sp, #60	; 0x3c
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ee:	2b21      	cmp	r3, #33	; 0x21
 80094f0:	d14c      	bne.n	800958c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d132      	bne.n	8009564 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	61fb      	str	r3, [r7, #28]
   return(result);
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009512:	637b      	str	r3, [r7, #52]	; 0x34
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800951e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e6      	bne.n	80094fe <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	60bb      	str	r3, [r7, #8]
   return(result);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009544:	633b      	str	r3, [r7, #48]	; 0x30
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	61bb      	str	r3, [r7, #24]
 8009550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6979      	ldr	r1, [r7, #20]
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	613b      	str	r3, [r7, #16]
   return(result);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e6      	bne.n	8009530 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009562:	e013      	b.n	800958c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009568:	781a      	ldrb	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800958c:	bf00      	nop
 800958e:	373c      	adds	r7, #60	; 0x3c
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009596:	b480      	push	{r7}
 8009598:	b091      	sub	sp, #68	; 0x44
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095a4:	2b21      	cmp	r3, #33	; 0x21
 80095a6:	d151      	bne.n	800964c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d132      	bne.n	800961a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	623b      	str	r3, [r7, #32]
   return(result);
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	633b      	str	r3, [r7, #48]	; 0x30
 80095d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e6      	bne.n	80095b4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fa:	637b      	str	r3, [r7, #52]	; 0x34
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e6      	bne.n	80095e6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009618:	e018      	b.n	800964c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800962e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	1c9a      	adds	r2, r3, #2
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800964c:	bf00      	nop
 800964e:	3744      	adds	r7, #68	; 0x44
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr

08009656 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009656:	b480      	push	{r7}
 8009658:	b091      	sub	sp, #68	; 0x44
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009664:	2b21      	cmp	r3, #33	; 0x21
 8009666:	d160      	bne.n	800972a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800966e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009670:	e057      	b.n	8009722 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009678:	b29b      	uxth	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d133      	bne.n	80096e6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	623b      	str	r3, [r7, #32]
   return(result);
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009694:	63bb      	str	r3, [r7, #56]	; 0x38
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800969e:	633a      	str	r2, [r7, #48]	; 0x30
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e5      	bne.n	800967e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	60fb      	str	r3, [r7, #12]
   return(result);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d4:	69b9      	ldr	r1, [r7, #24]
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	e841 2300 	strex	r3, r2, [r1]
 80096dc:	617b      	str	r3, [r7, #20]
   return(result);
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e6      	bne.n	80096b2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80096e4:	e021      	b.n	800972a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d013      	beq.n	800971c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800971c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800971e:	3b01      	subs	r3, #1
 8009720:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009722:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1a4      	bne.n	8009672 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009728:	e7ff      	b.n	800972a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800972a:	bf00      	nop
 800972c:	3744      	adds	r7, #68	; 0x44
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr

08009734 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b091      	sub	sp, #68	; 0x44
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009742:	2b21      	cmp	r3, #33	; 0x21
 8009744:	d165      	bne.n	8009812 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800974c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800974e:	e05c      	b.n	800980a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009756:	b29b      	uxth	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d133      	bne.n	80097c4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3308      	adds	r3, #8
 8009762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	61fb      	str	r3, [r7, #28]
   return(result);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3308      	adds	r3, #8
 800977a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800977c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	60bb      	str	r3, [r7, #8]
   return(result);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a4:	633b      	str	r3, [r7, #48]	; 0x30
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	61bb      	str	r3, [r7, #24]
 80097b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6979      	ldr	r1, [r7, #20]
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	613b      	str	r3, [r7, #16]
   return(result);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e6      	bne.n	8009790 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80097c2:	e026      	b.n	8009812 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d018      	beq.n	8009804 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d6:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ec:	1c9a      	adds	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009806:	3b01      	subs	r3, #1
 8009808:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800980a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800980c:	2b00      	cmp	r3, #0
 800980e:	d19f      	bne.n	8009750 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009810:	e7ff      	b.n	8009812 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009812:	bf00      	nop
 8009814:	3744      	adds	r7, #68	; 0x44
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	60bb      	str	r3, [r7, #8]
   return(result);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009838:	61fb      	str	r3, [r7, #28]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	61bb      	str	r3, [r7, #24]
 8009844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009846:	6979      	ldr	r1, [r7, #20]
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	613b      	str	r3, [r7, #16]
   return(result);
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e6      	bne.n	8009824 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7f9 faa1 	bl	8002dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800986a:	bf00      	nop
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b096      	sub	sp, #88	; 0x58
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009880:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988a:	2b22      	cmp	r3, #34	; 0x22
 800988c:	f040 8095 	bne.w	80099ba <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800989a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800989e:	b2d9      	uxtb	r1, r3
 80098a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098aa:	400a      	ands	r2, r1
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d178      	bne.n	80099ca <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098ec:	653b      	str	r3, [r7, #80]	; 0x50
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f6:	647b      	str	r3, [r7, #68]	; 0x44
 80098f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e6      	bne.n	80098d8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	623b      	str	r3, [r7, #32]
   return(result);
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3308      	adds	r3, #8
 8009928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800992a:	633a      	str	r2, [r7, #48]	; 0x30
 800992c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e5      	bne.n	800990a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2220      	movs	r2, #32
 8009942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009950:	2b01      	cmp	r3, #1
 8009952:	d12e      	bne.n	80099b2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	60fb      	str	r3, [r7, #12]
   return(result);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0310 	bic.w	r3, r3, #16
 800996e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	69b9      	ldr	r1, [r7, #24]
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	617b      	str	r3, [r7, #20]
   return(result);
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e6      	bne.n	800995a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b10      	cmp	r3, #16
 8009998:	d103      	bne.n	80099a2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2210      	movs	r2, #16
 80099a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fe fee6 	bl	800877c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099b0:	e00b      	b.n	80099ca <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7f9 fa10 	bl	8002dd8 <HAL_UART_RxCpltCallback>
}
 80099b8:	e007      	b.n	80099ca <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0208 	orr.w	r2, r2, #8
 80099c8:	619a      	str	r2, [r3, #24]
}
 80099ca:	bf00      	nop
 80099cc:	3758      	adds	r7, #88	; 0x58
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b096      	sub	sp, #88	; 0x58
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ea:	2b22      	cmp	r3, #34	; 0x22
 80099ec:	f040 8095 	bne.w	8009b1a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099fe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a00:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009a04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a08:	4013      	ands	r3, r2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a14:	1c9a      	adds	r2, r3, #2
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	3b01      	subs	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d178      	bne.n	8009b2a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a56:	643b      	str	r3, [r7, #64]	; 0x40
 8009a58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e6      	bne.n	8009a38 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d12e      	bne.n	8009b12 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f023 0310 	bic.w	r3, r3, #16
 8009ace:	647b      	str	r3, [r7, #68]	; 0x44
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6979      	ldr	r1, [r7, #20]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e6      	bne.n	8009aba <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	f003 0310 	and.w	r3, r3, #16
 8009af6:	2b10      	cmp	r3, #16
 8009af8:	d103      	bne.n	8009b02 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2210      	movs	r2, #16
 8009b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7fe fe36 	bl	800877c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b10:	e00b      	b.n	8009b2a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7f9 f960 	bl	8002dd8 <HAL_UART_RxCpltCallback>
}
 8009b18:	e007      	b.n	8009b2a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	699a      	ldr	r2, [r3, #24]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f042 0208 	orr.w	r2, r2, #8
 8009b28:	619a      	str	r2, [r3, #24]
}
 8009b2a:	bf00      	nop
 8009b2c:	3758      	adds	r7, #88	; 0x58
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b0a6      	sub	sp, #152	; 0x98
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b42:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	2b22      	cmp	r3, #34	; 0x22
 8009b6c:	f040 814f 	bne.w	8009e0e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b76:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b7a:	e0f6      	b.n	8009d6a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b86:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009b8a:	b2d9      	uxtb	r1, r3
 8009b8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b96:	400a      	ands	r2, r1
 8009b98:	b2d2      	uxtb	r2, r2
 8009b9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d053      	beq.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d011      	beq.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0xca>
 8009bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2201      	movs	r2, #1
 8009bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf4:	f043 0201 	orr.w	r2, r3, #1
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d011      	beq.n	8009c2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00b      	beq.n	8009c2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c24:	f043 0204 	orr.w	r2, r3, #4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d011      	beq.n	8009c5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00b      	beq.n	8009c5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2204      	movs	r2, #4
 8009c4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c54:	f043 0202 	orr.w	r2, r3, #2
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fe fd7e 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d173      	bne.n	8009d6a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ca6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009caa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3308      	adds	r3, #8
 8009cda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009cdc:	657a      	str	r2, [r7, #84]	; 0x54
 8009cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ce2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ce4:	e841 2300 	strex	r3, r2, [r1]
 8009ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e3      	bne.n	8009cb8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d12e      	bne.n	8009d64 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	f023 0310 	bic.w	r3, r3, #16
 8009d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e6      	bne.n	8009d0c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	f003 0310 	and.w	r3, r3, #16
 8009d48:	2b10      	cmp	r3, #16
 8009d4a:	d103      	bne.n	8009d54 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2210      	movs	r2, #16
 8009d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe fd0d 	bl	800877c <HAL_UARTEx_RxEventCallback>
 8009d62:	e002      	b.n	8009d6a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7f9 f837 	bl	8002dd8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d006      	beq.n	8009d80 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f47f aefe 	bne.w	8009b7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d8a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d045      	beq.n	8009e1e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d23e      	bcs.n	8009e1e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3308      	adds	r3, #8
 8009da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009db6:	673b      	str	r3, [r7, #112]	; 0x70
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e5      	bne.n	8009da0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a14      	ldr	r2, [pc, #80]	; (8009e28 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009dd8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f043 0320 	orr.w	r3, r3, #32
 8009dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df8:	61bb      	str	r3, [r7, #24]
 8009dfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfc:	6979      	ldr	r1, [r7, #20]
 8009dfe:	69ba      	ldr	r2, [r7, #24]
 8009e00:	e841 2300 	strex	r3, r2, [r1]
 8009e04:	613b      	str	r3, [r7, #16]
   return(result);
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e6      	bne.n	8009dda <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e0c:	e007      	b.n	8009e1e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f042 0208 	orr.w	r2, r2, #8
 8009e1c:	619a      	str	r2, [r3, #24]
}
 8009e1e:	bf00      	nop
 8009e20:	3798      	adds	r7, #152	; 0x98
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	08009873 	.word	0x08009873

08009e2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b0a8      	sub	sp, #160	; 0xa0
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e3a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e62:	2b22      	cmp	r3, #34	; 0x22
 8009e64:	f040 8153 	bne.w	800a10e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e6e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e72:	e0fa      	b.n	800a06a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009e86:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009e8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009e8e:	4013      	ands	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	1c9a      	adds	r2, r3, #2
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	69db      	ldr	r3, [r3, #28]
 8009eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d053      	beq.n	8009f72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d011      	beq.n	8009efa <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ef0:	f043 0201 	orr.w	r2, r3, #1
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d011      	beq.n	8009f2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00b      	beq.n	8009f2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2202      	movs	r2, #2
 8009f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f20:	f043 0204 	orr.w	r2, r3, #4
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d011      	beq.n	8009f5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2204      	movs	r2, #4
 8009f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f50:	f043 0202 	orr.w	r2, r3, #2
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7fe fc00 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d175      	bne.n	800a06a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fa2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e1      	bne.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d12e      	bne.n	800a064 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01c:	f023 0310 	bic.w	r3, r3, #16
 800a020:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a02a:	647b      	str	r3, [r7, #68]	; 0x44
 800a02c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e6      	bne.n	800a00c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	f003 0310 	and.w	r3, r3, #16
 800a048:	2b10      	cmp	r3, #16
 800a04a:	d103      	bne.n	800a054 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2210      	movs	r2, #16
 800a052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fe fb8d 	bl	800877c <HAL_UARTEx_RxEventCallback>
 800a062:	e002      	b.n	800a06a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7f8 feb7 	bl	8002dd8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a06a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d006      	beq.n	800a080 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a072:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f47f aefa 	bne.w	8009e74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a086:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a08a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d045      	beq.n	800a11e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a098:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d23e      	bcs.n	800a11e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b6:	677b      	str	r3, [r7, #116]	; 0x74
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0c0:	633a      	str	r2, [r7, #48]	; 0x30
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a14      	ldr	r2, [pc, #80]	; (800a128 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a0d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f043 0320 	orr.w	r3, r3, #32
 800a0ee:	673b      	str	r3, [r7, #112]	; 0x70
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0f8:	61fb      	str	r3, [r7, #28]
 800a0fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	69b9      	ldr	r1, [r7, #24]
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	617b      	str	r3, [r7, #20]
   return(result);
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e6      	bne.n	800a0da <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a10c:	e007      	b.n	800a11e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0208 	orr.w	r2, r2, #8
 800a11c:	619a      	str	r2, [r3, #24]
}
 800a11e:	bf00      	nop
 800a120:	37a0      	adds	r7, #160	; 0xa0
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	080099d3 	.word	0x080099d3

0800a12c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	bc80      	pop	{r7}
 800a13c:	4770      	bx	lr

0800a13e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr

0800a150 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr

0800a162 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b088      	sub	sp, #32
 800a166:	af02      	add	r7, sp, #8
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	1d3b      	adds	r3, r7, #4
 800a16c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a17e:	2302      	movs	r3, #2
 800a180:	e046      	b.n	800a210 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2224      	movs	r2, #36	; 0x24
 800a18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0201 	bic.w	r2, r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d105      	bne.n	800a1c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a1bc:	1d3b      	adds	r3, r7, #4
 800a1be:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f90e 	bl	800a3e4 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1d8:	f7f7 ffc0 	bl	800215c <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7fe fe31 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	75fb      	strb	r3, [r7, #23]
 800a1fc:	e003      	b.n	800a206 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_UARTEx_EnableStopMode+0x16>
 800a22a:	2302      	movs	r3, #2
 800a22c:	e021      	b.n	800a272 <HAL_UARTEx_EnableStopMode+0x5a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60bb      	str	r3, [r7, #8]
   return(result);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f043 0302 	orr.w	r3, r3, #2
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	61bb      	str	r3, [r7, #24]
 800a256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6979      	ldr	r1, [r7, #20]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	613b      	str	r3, [r7, #16]
   return(result);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e6      	bne.n	800a236 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr

0800a27c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d101      	bne.n	800a292 <HAL_UARTEx_DisableFifoMode+0x16>
 800a28e:	2302      	movs	r3, #2
 800a290:	e027      	b.n	800a2e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2224      	movs	r2, #36	; 0x24
 800a29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0201 	bic.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bc80      	pop	{r7}
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a300:	2302      	movs	r3, #2
 800a302:	e02d      	b.n	800a360 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2224      	movs	r2, #36	; 0x24
 800a310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 0201 	bic.w	r2, r2, #1
 800a32a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	430a      	orrs	r2, r1
 800a33e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f871 	bl	800a428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2220      	movs	r2, #32
 800a352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d101      	bne.n	800a380 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e02d      	b.n	800a3dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2224      	movs	r2, #36	; 0x24
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f022 0201 	bic.w	r2, r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f833 	bl	800a428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	1d3b      	adds	r3, r7, #4
 800a3ee:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f023 0210 	bic.w	r2, r3, #16
 800a3fc:	893b      	ldrh	r3, [r7, #8]
 800a3fe:	4619      	mov	r1, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a412:	7abb      	ldrb	r3, [r7, #10]
 800a414:	061a      	lsls	r2, r3, #24
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	605a      	str	r2, [r3, #4]
}
 800a41e:	bf00      	nop
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr

0800a428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a434:	2b00      	cmp	r3, #0
 800a436:	d108      	bne.n	800a44a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a448:	e031      	b.n	800a4ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a44a:	2308      	movs	r3, #8
 800a44c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a44e:	2308      	movs	r3, #8
 800a450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	0e5b      	lsrs	r3, r3, #25
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	0f5b      	lsrs	r3, r3, #29
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	7b3a      	ldrb	r2, [r7, #12]
 800a476:	4910      	ldr	r1, [pc, #64]	; (800a4b8 <UARTEx_SetNbDataToProcess+0x90>)
 800a478:	5c8a      	ldrb	r2, [r1, r2]
 800a47a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a47e:	7b3a      	ldrb	r2, [r7, #12]
 800a480:	490e      	ldr	r1, [pc, #56]	; (800a4bc <UARTEx_SetNbDataToProcess+0x94>)
 800a482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a484:	fb93 f3f2 	sdiv	r3, r3, r2
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	7b7a      	ldrb	r2, [r7, #13]
 800a494:	4908      	ldr	r1, [pc, #32]	; (800a4b8 <UARTEx_SetNbDataToProcess+0x90>)
 800a496:	5c8a      	ldrb	r2, [r1, r2]
 800a498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a49c:	7b7a      	ldrb	r2, [r7, #13]
 800a49e:	4907      	ldr	r1, [pc, #28]	; (800a4bc <UARTEx_SetNbDataToProcess+0x94>)
 800a4a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr
 800a4b8:	08020348 	.word	0x08020348
 800a4bc:	08020350 	.word	0x08020350

0800a4c0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a4c4:	f7f7 fd16 	bl	8001ef4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a4c8:	f000 f820 	bl	800a50c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a4cc:	bf00      	nop
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	f011 ff5a 	bl	801c390 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a4dc:	bf00      	nop
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <__NVIC_SystemReset>:
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a4e4:	f3bf 8f4f 	dsb	sy
}
 800a4e8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <__NVIC_SystemReset+0x24>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a4f2:	4904      	ldr	r1, [pc, #16]	; (800a504 <__NVIC_SystemReset+0x24>)
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <__NVIC_SystemReset+0x28>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4fa:	f3bf 8f4f 	dsb	sy
}
 800a4fe:	bf00      	nop
    __NOP();
 800a500:	bf00      	nop
 800a502:	e7fd      	b.n	800a500 <__NVIC_SystemReset+0x20>
 800a504:	e000ed00 	.word	0xe000ed00
 800a508:	05fa0004 	.word	0x05fa0004

0800a50c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af02      	add	r7, sp, #8

  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

	uint64_t *RDAddr = (uint64_t*) CONFIGURACION_NVM_BASE_ADDRESS;
 800a512:	4b46      	ldr	r3, [pc, #280]	; (800a62c <LoRaWAN_Init+0x120>)
 800a514:	60bb      	str	r3, [r7, #8]
	uint64_t RData = *RDAddr;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	e9c7 2300 	strd	r2, r3, [r7]

	for (int i = 0; i < (uint8_t) RData; i++) {
 800a520:	2300      	movs	r3, #0
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	e018      	b.n	800a558 <LoRaWAN_Init+0x4c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800a526:	2201      	movs	r2, #1
 800a528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a52c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a530:	f7fa ffec 	bl	800550c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800a534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a538:	f7f7 fe24 	bl	8002184 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800a53c:	2200      	movs	r2, #0
 800a53e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a546:	f7fa ffe1 	bl	800550c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800a54a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a54e:	f7f7 fe19 	bl	8002184 <HAL_Delay>
	for (int i = 0; i < (uint8_t) RData; i++) {
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	783b      	ldrb	r3, [r7, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4293      	cmp	r3, r2
 800a560:	dbe1      	blt.n	800a526 <LoRaWAN_Init+0x1a>
	}

	if (RData < 10) {
 800a562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a566:	2a0a      	cmp	r2, #10
 800a568:	f173 0300 	sbcs.w	r3, r3, #0
 800a56c:	d206      	bcs.n	800a57c <LoRaWAN_Init+0x70>
		heartbeat_alarma = RData * 60 * 1000;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a574:	fb02 f303 	mul.w	r3, r2, r3
 800a578:	4a2d      	ldr	r2, [pc, #180]	; (800a630 <LoRaWAN_Init+0x124>)
 800a57a:	6013      	str	r3, [r2, #0]
	}

	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_GuardarConfiguracion), UTIL_SEQ_RFU,
 800a57c:	4a2d      	ldr	r2, [pc, #180]	; (800a634 <LoRaWAN_Init+0x128>)
 800a57e:	2100      	movs	r1, #0
 800a580:	2010      	movs	r0, #16
 800a582:	f012 f801 	bl	801c588 <UTIL_SEQ_RegTask>
			GuardarConfiguracion);
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a586:	2300      	movs	r3, #0
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	4b2b      	ldr	r3, [pc, #172]	; (800a638 <LoRaWAN_Init+0x12c>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a592:	482a      	ldr	r0, [pc, #168]	; (800a63c <LoRaWAN_Init+0x130>)
 800a594:	f012 f89c 	bl	801c6d0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a598:	4a29      	ldr	r2, [pc, #164]	; (800a640 <LoRaWAN_Init+0x134>)
 800a59a:	2100      	movs	r1, #0
 800a59c:	2001      	movs	r0, #1
 800a59e:	f011 fff3 	bl	801c588 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a5a2:	4a28      	ldr	r2, [pc, #160]	; (800a644 <LoRaWAN_Init+0x138>)
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	2002      	movs	r0, #2
 800a5a8:	f011 ffee 	bl	801c588 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a5ac:	4a26      	ldr	r2, [pc, #152]	; (800a648 <LoRaWAN_Init+0x13c>)
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	2004      	movs	r0, #4
 800a5b2:	f011 ffe9 	bl	801c588 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a5b6:	4a25      	ldr	r2, [pc, #148]	; (800a64c <LoRaWAN_Init+0x140>)
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	2008      	movs	r0, #8
 800a5bc:	f011 ffe4 	bl	801c588 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a5c0:	f002 f99e 	bl	800c900 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a5c4:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800a5c8:	4821      	ldr	r0, [pc, #132]	; (800a650 <LoRaWAN_Init+0x144>)
 800a5ca:	f003 fda7 	bl	800e11c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a5ce:	4821      	ldr	r0, [pc, #132]	; (800a654 <LoRaWAN_Init+0x148>)
 800a5d0:	f003 fdf0 	bl	800e1b4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a5d4:	4b20      	ldr	r3, [pc, #128]	; (800a658 <LoRaWAN_Init+0x14c>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	4a20      	ldr	r2, [pc, #128]	; (800a65c <LoRaWAN_Init+0x150>)
 800a5da:	7812      	ldrb	r2, [r2, #0]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f003 ff0c 	bl	800e3fc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a5e4:	4b1e      	ldr	r3, [pc, #120]	; (800a660 <LoRaWAN_Init+0x154>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10c      	bne.n	800a606 <LoRaWAN_Init+0xfa>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a5ec:	4b1d      	ldr	r3, [pc, #116]	; (800a664 <LoRaWAN_Init+0x158>)
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	; (800a668 <LoRaWAN_Init+0x15c>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	481c      	ldr	r0, [pc, #112]	; (800a66c <LoRaWAN_Init+0x160>)
 800a5fa:	f012 f869 	bl	801c6d0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a5fe:	481b      	ldr	r0, [pc, #108]	; (800a66c <LoRaWAN_Init+0x160>)
 800a600:	f012 f89c 	bl	801c73c <UTIL_TIMER_Start>
 800a604:	e00b      	b.n	800a61e <LoRaWAN_Init+0x112>
  }
  else
  {
    /* USER CODE BEGIN LoRaWAN_Init_3 */
		UTIL_TIMER_Create(&TxTimer, heartbeat_reposo, UTIL_TIMER_ONESHOT,
 800a606:	4b1a      	ldr	r3, [pc, #104]	; (800a670 <LoRaWAN_Init+0x164>)
 800a608:	6819      	ldr	r1, [r3, #0]
 800a60a:	2300      	movs	r3, #0
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	4b16      	ldr	r3, [pc, #88]	; (800a668 <LoRaWAN_Init+0x15c>)
 800a610:	2200      	movs	r2, #0
 800a612:	4816      	ldr	r0, [pc, #88]	; (800a66c <LoRaWAN_Init+0x160>)
 800a614:	f012 f85c 	bl	801c6d0 <UTIL_TIMER_Create>
				OnTxTimerEvent, NULL);
		UTIL_TIMER_Start(&TxTimer);
 800a618:	4814      	ldr	r0, [pc, #80]	; (800a66c <LoRaWAN_Init+0x160>)
 800a61a:	f012 f88f 	bl	801c73c <UTIL_TIMER_Start>
    /* USER CODE END LoRaWAN_Init_3 */
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */
	LmHandlerSetDutyCycleEnable(true);
 800a61e:	2001      	movs	r0, #1
 800a620:	f004 fc5e 	bl	800eee0 <LmHandlerSetDutyCycleEnable>

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	0803e000 	.word	0x0803e000
 800a630:	20000080 	.word	0x20000080
 800a634:	0800a711 	.word	0x0800a711
 800a638:	0800c825 	.word	0x0800c825
 800a63c:	200005b4 	.word	0x200005b4
 800a640:	0800e3d9 	.word	0x0800e3d9
 800a644:	0800aac1 	.word	0x0800aac1
 800a648:	0800c849 	.word	0x0800c849
 800a64c:	0800c7d9 	.word	0x0800c7d9
 800a650:	2000000c 	.word	0x2000000c
 800a654:	20000058 	.word	0x20000058
 800a658:	20000009 	.word	0x20000009
 800a65c:	2000000a 	.word	0x2000000a
 800a660:	2000006c 	.word	0x2000006c
 800a664:	20000070 	.word	0x20000070
 800a668:	0800c6ad 	.word	0x0800c6ad
 800a66c:	2000059c 	.word	0x2000059c
 800a670:	2000007c 	.word	0x2000007c

0800a674 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a684:	d136      	bne.n	800a6f4 <HAL_GPIO_EXTI_Callback+0x80>
	case BOTON_Pin:
		if (modo_de_funcionamiento == 0) {
 800a686:	4b1d      	ldr	r3, [pc, #116]	; (800a6fc <HAL_GPIO_EXTI_Callback+0x88>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d111      	bne.n	800a6b2 <HAL_GPIO_EXTI_Callback+0x3e>
			//Pasamos al modo alarma
			modo_de_funcionamiento = 1;
 800a68e:	4b1b      	ldr	r3, [pc, #108]	; (800a6fc <HAL_GPIO_EXTI_Callback+0x88>)
 800a690:	2201      	movs	r2, #1
 800a692:	701a      	strb	r2, [r3, #0]
			cambiar_a_modo_alarma = 1;
 800a694:	4b1a      	ldr	r3, [pc, #104]	; (800a700 <HAL_GPIO_EXTI_Callback+0x8c>)
 800a696:	2201      	movs	r2, #1
 800a698:	701a      	strb	r2, [r3, #0]
			//Encendemos el LED
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800a69a:	2201      	movs	r2, #1
 800a69c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6a4:	f7fa ff32 	bl	800550c <HAL_GPIO_WritePin>
			//Hacemos un envío inmediato
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent),
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	2002      	movs	r0, #2
 800a6ac:	f011 ff8e 	bl	801c5cc <UTIL_SEQ_SetTask>
			UTIL_TIMER_Stop(&TxTimer);
			UTIL_TIMER_SetPeriod(&TxTimer, heartbeat_reposo);
			UTIL_TIMER_Start(&TxTimer);
		}
	}
}
 800a6b0:	e020      	b.n	800a6f4 <HAL_GPIO_EXTI_Callback+0x80>
			modo_de_funcionamiento = 0;
 800a6b2:	4b12      	ldr	r3, [pc, #72]	; (800a6fc <HAL_GPIO_EXTI_Callback+0x88>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6c2:	f7fa ff23 	bl	800550c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_GPS_GPIO_Port, EN_GPS_Pin, GPIO_PIN_RESET);
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2120      	movs	r1, #32
 800a6ca:	480e      	ldr	r0, [pc, #56]	; (800a704 <HAL_GPIO_EXTI_Callback+0x90>)
 800a6cc:	f7fa ff1e 	bl	800550c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_ESP_GPIO_Port, EN_ESP_Pin, GPIO_PIN_RESET);
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6d8:	f7fa ff18 	bl	800550c <HAL_GPIO_WritePin>
			UTIL_TIMER_Stop(&TxTimer);
 800a6dc:	480a      	ldr	r0, [pc, #40]	; (800a708 <HAL_GPIO_EXTI_Callback+0x94>)
 800a6de:	f012 f89b 	bl	801c818 <UTIL_TIMER_Stop>
			UTIL_TIMER_SetPeriod(&TxTimer, heartbeat_reposo);
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <HAL_GPIO_EXTI_Callback+0x98>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4807      	ldr	r0, [pc, #28]	; (800a708 <HAL_GPIO_EXTI_Callback+0x94>)
 800a6ea:	f012 f905 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
			UTIL_TIMER_Start(&TxTimer);
 800a6ee:	4806      	ldr	r0, [pc, #24]	; (800a708 <HAL_GPIO_EXTI_Callback+0x94>)
 800a6f0:	f012 f824 	bl	801c73c <UTIL_TIMER_Start>
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	2000070f 	.word	0x2000070f
 800a700:	20000710 	.word	0x20000710
 800a704:	48000400 	.word	0x48000400
 800a708:	2000059c 	.word	0x2000059c
 800a70c:	2000007c 	.word	0x2000007c

0800a710 <GuardarConfiguracion>:

/* USER CODE END PB_Callbacks */

/* Private functions ---------------------------------------------------------*/
/* USER CODE BEGIN PrFD */
static void GuardarConfiguracion(void) {
 800a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
	uint64_t configuration_data[3];
	configuration_data[0] = (uint64_t) heartbeat_alarma / 60000;
 800a716:	4e45      	ldr	r6, [pc, #276]	; (800a82c <GuardarConfiguracion+0x11c>)
 800a718:	6836      	ldr	r6, [r6, #0]
 800a71a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800a830 <GuardarConfiguracion+0x120>
 800a71e:	fbac c606 	umull	ip, r6, ip, r6
 800a722:	0bb6      	lsrs	r6, r6, #14
 800a724:	f04f 0c00 	mov.w	ip, #0
 800a728:	4634      	mov	r4, r6
 800a72a:	4665      	mov	r5, ip
 800a72c:	e9c7 4500 	strd	r4, r5, [r7]
	configuration_data[1] = (uint64_t) heartbeat_reposo / 60000;
 800a730:	4c40      	ldr	r4, [pc, #256]	; (800a834 <GuardarConfiguracion+0x124>)
 800a732:	6824      	ldr	r4, [r4, #0]
 800a734:	4d3e      	ldr	r5, [pc, #248]	; (800a830 <GuardarConfiguracion+0x120>)
 800a736:	fba5 5404 	umull	r5, r4, r5, r4
 800a73a:	0ba4      	lsrs	r4, r4, #14
 800a73c:	2500      	movs	r5, #0
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	e9c7 0102 	strd	r0, r1, [r7, #8]
	configuration_data[2] = (uint64_t) modo_geolocalizacion;
 800a746:	493c      	ldr	r1, [pc, #240]	; (800a838 <GuardarConfiguracion+0x128>)
 800a748:	7809      	ldrb	r1, [r1, #0]
 800a74a:	b2c9      	uxtb	r1, r1
 800a74c:	2000      	movs	r0, #0
 800a74e:	460a      	mov	r2, r1
 800a750:	4603      	mov	r3, r0
 800a752:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (HAL_FLASH_Unlock() == HAL_OK) {
 800a756:	f7fa fa8d 	bl	8004c74 <HAL_FLASH_Unlock>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d161      	bne.n	800a824 <GuardarConfiguracion+0x114>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800a760:	2200      	movs	r2, #0
 800a762:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a76a:	f7fa fecf 	bl	800550c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800a76e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a772:	f7f7 fd07 	bl	8002184 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800a776:	2201      	movs	r2, #1
 800a778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a77c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a780:	f7fa fec4 	bl	800550c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800a784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a788:	f7f7 fcfc 	bl	8002184 <HAL_Delay>
		if (FLASH_IF_EraseByPages(PAGE(CONFIGURACION_NVM_BASE_ADDRESS), 1, 0U)
 800a78c:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <GuardarConfiguracion+0x12c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	029a      	lsls	r2, r3, #10
 800a792:	4b2b      	ldr	r3, [pc, #172]	; (800a840 <GuardarConfiguracion+0x130>)
 800a794:	4013      	ands	r3, r2
 800a796:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 800a79a:	fbb2 f1f3 	udiv	r1, r2, r3
 800a79e:	fb01 f303 	mul.w	r3, r1, r3
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	0adb      	lsrs	r3, r3, #11
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f6 ffd3 	bl	8001756 <FLASH_IF_EraseByPages>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d134      	bne.n	800a820 <GuardarConfiguracion+0x110>
				== FLASH_OK) {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7c0:	f7fa fea4 	bl	800550c <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800a7c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7c8:	f7f7 fcdc 	bl	8002184 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7d6:	f7fa fe99 	bl	800550c <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800a7da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7de:	f7f7 fcd1 	bl	8002184 <HAL_Delay>
			if (FLASH_IF_Write(
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2218      	movs	r2, #24
 800a7e8:	4816      	ldr	r0, [pc, #88]	; (800a844 <GuardarConfiguracion+0x134>)
 800a7ea:	f7f6 fed3 	bl	8001594 <FLASH_IF_Write>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d115      	bne.n	800a820 <GuardarConfiguracion+0x110>
			CONFIGURACION_NVM_BASE_ADDRESS, (uint8_t*) configuration_data, 24,
			NULL) == FLASH_OK) {
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7fe:	f7fa fe85 	bl	800550c <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800a802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a806:	f7f7 fcbd 	bl	8002184 <HAL_Delay>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800a80a:	2201      	movs	r2, #1
 800a80c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a814:	f7fa fe7a 	bl	800550c <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800a818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a81c:	f7f7 fcb2 	bl	8002184 <HAL_Delay>
			}
		}
		HAL_FLASH_Lock();
 800a820:	f7fa fa4a 	bl	8004cb8 <HAL_FLASH_Lock>
	}
}
 800a824:	bf00      	nop
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82c:	20000080 	.word	0x20000080
 800a830:	45e7b273 	.word	0x45e7b273
 800a834:	2000007c 	.word	0x2000007c
 800a838:	20000084 	.word	0x20000084
 800a83c:	1fff75e0 	.word	0x1fff75e0
 800a840:	03fffc00 	.word	0x03fffc00
 800a844:	0803e000 	.word	0x0803e000

0800a848 <OnRxData>:
/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
	uint8_t RxPort = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]

	if (params != NULL) {
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 8111 	beq.w	800aa80 <OnRxData+0x238>
		if (params->IsMcpsIndication) {
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 810c 	beq.w	800aa80 <OnRxData+0x238>
			if (appData != NULL) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 8108 	beq.w	800aa80 <OnRxData+0x238>
				RxPort = appData->Port;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	73fb      	strb	r3, [r7, #15]
				if (appData->Buffer != NULL) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8100 	beq.w	800aa80 <OnRxData+0x238>
					if (RxPort == 99) {
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	2b63      	cmp	r3, #99	; 0x63
 800a884:	f040 80fc 	bne.w	800aa80 <OnRxData+0x238>
						switch (appData->Buffer[0]) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	3b03      	subs	r3, #3
 800a890:	2b04      	cmp	r3, #4
 800a892:	f200 8100 	bhi.w	800aa96 <OnRxData+0x24e>
 800a896:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <OnRxData+0x54>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800aa25 	.word	0x0800aa25
 800a8a0:	0800a8b1 	.word	0x0800a8b1
 800a8a4:	0800a91d 	.word	0x0800a91d
 800a8a8:	0800a989 	.word	0x0800a989
 800a8ac:	0800aa63 	.word	0x0800aa63
						case 0x04:
							//Heartbeat alarma
							if (appData->Buffer[1] == 0x01) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	f040 80e3 	bne.w	800aa84 <OnRxData+0x23c>
								if (heartbeat_alarma
										!= appData->Buffer[2] * 60 * 1000) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	3302      	adds	r3, #2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
 800a8d0:	4a73      	ldr	r2, [pc, #460]	; (800aaa0 <OnRxData+0x258>)
 800a8d2:	6812      	ldr	r2, [r2, #0]
								if (heartbeat_alarma
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	f000 80d5 	beq.w	800aa84 <OnRxData+0x23c>
									heartbeat_alarma = appData->Buffer[2] * 60
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	3302      	adds	r3, #2
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
											* 1000;
 800a8e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ec:	461a      	mov	r2, r3
									heartbeat_alarma = appData->Buffer[2] * 60
 800a8ee:	4b6c      	ldr	r3, [pc, #432]	; (800aaa0 <OnRxData+0x258>)
 800a8f0:	601a      	str	r2, [r3, #0]
									if (modo_de_funcionamiento == 1) {
 800a8f2:	4b6c      	ldr	r3, [pc, #432]	; (800aaa4 <OnRxData+0x25c>)
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d10b      	bne.n	800a912 <OnRxData+0xca>
										UTIL_TIMER_Stop(&TxTimer);
 800a8fa:	486b      	ldr	r0, [pc, #428]	; (800aaa8 <OnRxData+0x260>)
 800a8fc:	f011 ff8c 	bl	801c818 <UTIL_TIMER_Stop>
										UTIL_TIMER_SetPeriod(&TxTimer,
 800a900:	4b67      	ldr	r3, [pc, #412]	; (800aaa0 <OnRxData+0x258>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4619      	mov	r1, r3
 800a906:	4868      	ldr	r0, [pc, #416]	; (800aaa8 <OnRxData+0x260>)
 800a908:	f011 fff6 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
												heartbeat_alarma);
										UTIL_TIMER_Start(&TxTimer);
 800a90c:	4866      	ldr	r0, [pc, #408]	; (800aaa8 <OnRxData+0x260>)
 800a90e:	f011 ff15 	bl	801c73c <UTIL_TIMER_Start>
									}
									UTIL_SEQ_SetTask(
 800a912:	2100      	movs	r1, #0
 800a914:	2010      	movs	r0, #16
 800a916:	f011 fe59 	bl	801c5cc <UTIL_SEQ_SetTask>
											(1
													<< CFG_SEQ_Task_GuardarConfiguracion),
											CFG_SEQ_Prio_0);
								}
							}
							break;
 800a91a:	e0b3      	b.n	800aa84 <OnRxData+0x23c>
						case 0x05:
							//Heartbeat reposo
							if (appData->Buffer[1] == 0x01) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	3301      	adds	r3, #1
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b01      	cmp	r3, #1
 800a926:	f040 80af 	bne.w	800aa88 <OnRxData+0x240>
								if (heartbeat_reposo
										!= appData->Buffer[2] * 60 * 1000) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	3302      	adds	r3, #2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a938:	fb02 f303 	mul.w	r3, r2, r3
 800a93c:	4a5b      	ldr	r2, [pc, #364]	; (800aaac <OnRxData+0x264>)
 800a93e:	6812      	ldr	r2, [r2, #0]
								if (heartbeat_reposo
 800a940:	4293      	cmp	r3, r2
 800a942:	f000 80a1 	beq.w	800aa88 <OnRxData+0x240>
									heartbeat_reposo = appData->Buffer[2] * 60
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	3302      	adds	r3, #2
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
											* 1000;
 800a950:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	461a      	mov	r2, r3
									heartbeat_reposo = appData->Buffer[2] * 60
 800a95a:	4b54      	ldr	r3, [pc, #336]	; (800aaac <OnRxData+0x264>)
 800a95c:	601a      	str	r2, [r3, #0]
									if (modo_de_funcionamiento == 0) {
 800a95e:	4b51      	ldr	r3, [pc, #324]	; (800aaa4 <OnRxData+0x25c>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <OnRxData+0x136>
										UTIL_TIMER_Stop(&TxTimer);
 800a966:	4850      	ldr	r0, [pc, #320]	; (800aaa8 <OnRxData+0x260>)
 800a968:	f011 ff56 	bl	801c818 <UTIL_TIMER_Stop>
										UTIL_TIMER_SetPeriod(&TxTimer,
 800a96c:	4b4f      	ldr	r3, [pc, #316]	; (800aaac <OnRxData+0x264>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4619      	mov	r1, r3
 800a972:	484d      	ldr	r0, [pc, #308]	; (800aaa8 <OnRxData+0x260>)
 800a974:	f011 ffc0 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
												heartbeat_reposo);
										UTIL_TIMER_Start(&TxTimer);
 800a978:	484b      	ldr	r0, [pc, #300]	; (800aaa8 <OnRxData+0x260>)
 800a97a:	f011 fedf 	bl	801c73c <UTIL_TIMER_Start>
									}
									UTIL_SEQ_SetTask(
 800a97e:	2100      	movs	r1, #0
 800a980:	2010      	movs	r0, #16
 800a982:	f011 fe23 	bl	801c5cc <UTIL_SEQ_SetTask>
											(1
													<< CFG_SEQ_Task_GuardarConfiguracion),
											CFG_SEQ_Prio_0);
								}
							}
							break;
 800a986:	e07f      	b.n	800aa88 <OnRxData+0x240>
						case 0x06:
							//Modo alarma
							if (appData->Buffer[1] == 0x01) {
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	3301      	adds	r3, #1
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d17b      	bne.n	800aa8c <OnRxData+0x244>
								if (modo_de_funcionamiento == 0
 800a994:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <OnRxData+0x25c>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d117      	bne.n	800a9cc <OnRxData+0x184>
										&& appData->Buffer[2] == 0x01) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d111      	bne.n	800a9cc <OnRxData+0x184>
									//Pasamos al modo alarma
									cambiar_a_modo_alarma = 1;
 800a9a8:	4b41      	ldr	r3, [pc, #260]	; (800aab0 <OnRxData+0x268>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	701a      	strb	r2, [r3, #0]
									modo_de_funcionamiento = 1;
 800a9ae:	4b3d      	ldr	r3, [pc, #244]	; (800aaa4 <OnRxData+0x25c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	701a      	strb	r2, [r3, #0]
									//Encendemos el LED
									HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9be:	f7fa fda5 	bl	800550c <HAL_GPIO_WritePin>
											GPIO_PIN_SET);
									//Hacemos un envío inmediato
									UTIL_SEQ_SetTask(
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	2002      	movs	r0, #2
 800a9c6:	f011 fe01 	bl	801c5cc <UTIL_SEQ_SetTask>
									UTIL_TIMER_SetPeriod(&TxTimer,
											heartbeat_reposo);
									UTIL_TIMER_Start(&TxTimer);
								}
							}
							break;
 800a9ca:	e05f      	b.n	800aa8c <OnRxData+0x244>
								} else if (modo_de_funcionamiento == 1
 800a9cc:	4b35      	ldr	r3, [pc, #212]	; (800aaa4 <OnRxData+0x25c>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d15b      	bne.n	800aa8c <OnRxData+0x244>
										&& appData->Buffer[2] == 0x00) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d155      	bne.n	800aa8c <OnRxData+0x244>
									modo_de_funcionamiento = 0;
 800a9e0:	4b30      	ldr	r3, [pc, #192]	; (800aaa4 <OnRxData+0x25c>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9f0:	f7fa fd8c 	bl	800550c <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(EN_GPS_GPIO_Port,
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2120      	movs	r1, #32
 800a9f8:	482e      	ldr	r0, [pc, #184]	; (800aab4 <OnRxData+0x26c>)
 800a9fa:	f7fa fd87 	bl	800550c <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(EN_ESP_GPIO_Port,
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2102      	movs	r1, #2
 800aa02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa06:	f7fa fd81 	bl	800550c <HAL_GPIO_WritePin>
									UTIL_TIMER_Stop(&TxTimer);
 800aa0a:	4827      	ldr	r0, [pc, #156]	; (800aaa8 <OnRxData+0x260>)
 800aa0c:	f011 ff04 	bl	801c818 <UTIL_TIMER_Stop>
									UTIL_TIMER_SetPeriod(&TxTimer,
 800aa10:	4b26      	ldr	r3, [pc, #152]	; (800aaac <OnRxData+0x264>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4619      	mov	r1, r3
 800aa16:	4824      	ldr	r0, [pc, #144]	; (800aaa8 <OnRxData+0x260>)
 800aa18:	f011 ff6e 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
									UTIL_TIMER_Start(&TxTimer);
 800aa1c:	4822      	ldr	r0, [pc, #136]	; (800aaa8 <OnRxData+0x260>)
 800aa1e:	f011 fe8d 	bl	801c73c <UTIL_TIMER_Start>
							break;
 800aa22:	e033      	b.n	800aa8c <OnRxData+0x244>
						case 0x03:
							if (appData->Buffer[1] == 0x01
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d12f      	bne.n	800aa90 <OnRxData+0x248>
									&& appData->Buffer[2] <= 2) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	3302      	adds	r3, #2
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d829      	bhi.n	800aa90 <OnRxData+0x248>

								if (modo_geolocalizacion
										!= appData->Buffer[2]) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	3302      	adds	r3, #2
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	4b1c      	ldr	r3, [pc, #112]	; (800aab8 <OnRxData+0x270>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
								if (modo_geolocalizacion
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d021      	beq.n	800aa90 <OnRxData+0x248>
									modo_geolocalizacion = appData->Buffer[2];
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	3302      	adds	r3, #2
 800aa52:	781a      	ldrb	r2, [r3, #0]
 800aa54:	4b18      	ldr	r3, [pc, #96]	; (800aab8 <OnRxData+0x270>)
 800aa56:	701a      	strb	r2, [r3, #0]

									UTIL_SEQ_SetTask(
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2010      	movs	r0, #16
 800aa5c:	f011 fdb6 	bl	801c5cc <UTIL_SEQ_SetTask>
													<< CFG_SEQ_Task_GuardarConfiguracion),
											CFG_SEQ_Prio_0);
								}
							}

							break;
 800aa60:	e016      	b.n	800aa90 <OnRxData+0x248>
						case 0x07:
							if (appData->Buffer[1] == 0x01
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	3301      	adds	r3, #1
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d112      	bne.n	800aa94 <OnRxData+0x24c>
									&& appData->Buffer[2] == 1) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	3302      	adds	r3, #2
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d10c      	bne.n	800aa94 <OnRxData+0x24c>
								HAL_NVIC_SystemReset();
 800aa7a:	f7f9 fcbc 	bl	80043f6 <HAL_NVIC_SystemReset>
							}
							break;
 800aa7e:	e009      	b.n	800aa94 <OnRxData+0x24c>

						}
					}
 800aa80:	bf00      	nop
 800aa82:	e008      	b.n	800aa96 <OnRxData+0x24e>
							break;
 800aa84:	bf00      	nop
 800aa86:	e006      	b.n	800aa96 <OnRxData+0x24e>
							break;
 800aa88:	bf00      	nop
 800aa8a:	e004      	b.n	800aa96 <OnRxData+0x24e>
							break;
 800aa8c:	bf00      	nop
 800aa8e:	e002      	b.n	800aa96 <OnRxData+0x24e>
							break;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <OnRxData+0x24e>
							break;
 800aa94:	bf00      	nop
		 slotStrings[params->RxSlot], params->Rssi, params->Snr);
		 }
		 */
	}
  /* USER CODE END OnRxData_1 */
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000080 	.word	0x20000080
 800aaa4:	2000070f 	.word	0x2000070f
 800aaa8:	2000059c 	.word	0x2000059c
 800aaac:	2000007c 	.word	0x2000007c
 800aab0:	20000710 	.word	0x20000710
 800aab4:	48000400 	.word	0x48000400
 800aab8:	20000084 	.word	0x20000084
 800aabc:	00000000 	.word	0x00000000

0800aac0 <SendTxData>:

static void SendTxData(void)
{
 800aac0:	b5b0      	push	{r4, r5, r7, lr}
 800aac2:	b0a6      	sub	sp, #152	; 0x98
 800aac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
	uint16_t batteryLevel = SYS_GetBatteryLevel();
 800aac6:	f7f6 fcaf 	bl	8001428 <SYS_GetBatteryLevel>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	AppData.Buffer[0] = (uint8_t) ((batteryLevel >> 8) & 0xFF);
 800aad0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800aad4:	0a1b      	lsrs	r3, r3, #8
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	4b93      	ldr	r3, [pc, #588]	; (800ad28 <SendTxData+0x268>)
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	b2d2      	uxtb	r2, r2
 800aade:	701a      	strb	r2, [r3, #0]
	AppData.Buffer[1] = (uint8_t) (batteryLevel & 0xFF);
 800aae0:	4b91      	ldr	r3, [pc, #580]	; (800ad28 <SendTxData+0x268>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	3301      	adds	r3, #1
 800aae6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
	//En el tercer byte codifico el modo de funcionamiento, el modo de geolocalización
	//y el hdop copado a 32 (5 bits)
	AppData.Buffer[2] = (modo_de_funcionamiento << 7)
 800aaee:	4b8f      	ldr	r3, [pc, #572]	; (800ad2c <SendTxData+0x26c>)
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	01db      	lsls	r3, r3, #7
			| (modo_geolocalizacion << 5);
 800aaf4:	b25a      	sxtb	r2, r3
 800aaf6:	4b8e      	ldr	r3, [pc, #568]	; (800ad30 <SendTxData+0x270>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	015b      	lsls	r3, r3, #5
 800aafc:	b25b      	sxtb	r3, r3
 800aafe:	4313      	orrs	r3, r2
 800ab00:	b25a      	sxtb	r2, r3
	AppData.Buffer[2] = (modo_de_funcionamiento << 7)
 800ab02:	4b89      	ldr	r3, [pc, #548]	; (800ad28 <SendTxData+0x268>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	3302      	adds	r3, #2
			| (modo_geolocalizacion << 5);
 800ab08:	b2d2      	uxtb	r2, r2
	AppData.Buffer[2] = (modo_de_funcionamiento << 7)
 800ab0a:	701a      	strb	r2, [r3, #0]
	AppData.BufferSize = 3;
 800ab0c:	4b86      	ldr	r3, [pc, #536]	; (800ad28 <SendTxData+0x268>)
 800ab0e:	2203      	movs	r2, #3
 800ab10:	705a      	strb	r2, [r3, #1]
	if (modo_de_funcionamiento == 1 && cambiar_a_modo_alarma==0) {
 800ab12:	4b86      	ldr	r3, [pc, #536]	; (800ad2c <SendTxData+0x26c>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	f041 855b 	bne.w	800c5d2 <SendTxData+0x1b12>
 800ab1c:	4b85      	ldr	r3, [pc, #532]	; (800ad34 <SendTxData+0x274>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f041 8556 	bne.w	800c5d2 <SendTxData+0x1b12>
		for (int j = 3; j < 9; j++) {
 800ab26:	2303      	movs	r3, #3
 800ab28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab2c:	e00b      	b.n	800ab46 <SendTxData+0x86>
			AppData.Buffer[j] = 0;
 800ab2e:	4b7e      	ldr	r3, [pc, #504]	; (800ad28 <SendTxData+0x268>)
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab36:	4413      	add	r3, r2
 800ab38:	2200      	movs	r2, #0
 800ab3a:	701a      	strb	r2, [r3, #0]
		for (int j = 3; j < 9; j++) {
 800ab3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab40:	3301      	adds	r3, #1
 800ab42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab4a:	2b08      	cmp	r3, #8
 800ab4c:	ddef      	ble.n	800ab2e <SendTxData+0x6e>
		SysTime_t tiempoActual;
		SysTime_t tiempoParcial;
		//Estamos en modo de alarma
		//GPS?

		AppData.BufferSize = 9;		//Luego se amplia con las MAC si es preciso
 800ab4e:	4b76      	ldr	r3, [pc, #472]	; (800ad28 <SendTxData+0x268>)
 800ab50:	2209      	movs	r2, #9
 800ab52:	705a      	strb	r2, [r3, #1]

		if (modo_geolocalizacion == 0 || modo_geolocalizacion == 2) {
 800ab54:	4b76      	ldr	r3, [pc, #472]	; (800ad30 <SendTxData+0x270>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <SendTxData+0xa6>
 800ab5c:	4b74      	ldr	r3, [pc, #464]	; (800ad30 <SendTxData+0x270>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	f040 822c 	bne.w	800afbe <SendTxData+0x4fe>
			gps_fix_conseguido = 0;
 800ab66:	4b74      	ldr	r3, [pc, #464]	; (800ad38 <SendTxData+0x278>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
			gps_fix_quality = '\0';
 800ab6c:	4b73      	ldr	r3, [pc, #460]	; (800ad3c <SendTxData+0x27c>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
			latitud[0] = '\0';
 800ab72:	4b73      	ldr	r3, [pc, #460]	; (800ad40 <SendTxData+0x280>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
			longitud[0] = '\0';
 800ab78:	4b72      	ldr	r3, [pc, #456]	; (800ad44 <SendTxData+0x284>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
			latitud_tentativa[0] = '\0';
 800ab7e:	4b72      	ldr	r3, [pc, #456]	; (800ad48 <SendTxData+0x288>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	701a      	strb	r2, [r3, #0]
			longitud_tentativa[0] = '\0';
 800ab84:	4b71      	ldr	r3, [pc, #452]	; (800ad4c <SendTxData+0x28c>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	701a      	strb	r2, [r3, #0]
			gps_hdop[0] = '\0';
 800ab8a:	4b71      	ldr	r3, [pc, #452]	; (800ad50 <SendTxData+0x290>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	701a      	strb	r2, [r3, #0]
			gps_hdop_tentativo[0] = '\0';
 800ab90:	4b70      	ldr	r3, [pc, #448]	; (800ad54 <SendTxData+0x294>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	701a      	strb	r2, [r3, #0]
			gps_number_of_satellites[0] = '\0';
 800ab96:	4b70      	ldr	r3, [pc, #448]	; (800ad58 <SendTxData+0x298>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	701a      	strb	r2, [r3, #0]
			gps_number_of_satellites_tentativo[0] = '\0';
 800ab9c:	4b6f      	ldr	r3, [pc, #444]	; (800ad5c <SendTxData+0x29c>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	701a      	strb	r2, [r3, #0]
			//Habilitamos la alimentación del GPS
			APP_LOG(TS_ON, VLEVEL_L, "GPS ENCENDIDO\r\n");
			HAL_GPIO_WritePin(EN_GPS_GPIO_Port, EN_GPS_Pin, GPIO_PIN_SET);
 800aba2:	2201      	movs	r2, #1
 800aba4:	2120      	movs	r1, #32
 800aba6:	486e      	ldr	r0, [pc, #440]	; (800ad60 <SendTxData+0x2a0>)
 800aba8:	f7fa fcb0 	bl	800550c <HAL_GPIO_WritePin>
			tiempoParcial = SysTimeGet();
 800abac:	f107 030c 	add.w	r3, r7, #12
 800abb0:	4618      	mov	r0, r3
 800abb2:	f011 f8c5 	bl	801bd40 <SysTimeGet>
			 */
			//Si no reinicio la uart no es capaz de recibir los datos del GPS
			//en modo bajo consumo????!!!
			//Podría estar relacionado con esto
			//https://stackoverflow.com/questions/56378415/uart-doesnt-work-after-waking-up-from-stop-mode-in-stm32f4
			MX_USART2_UART_Init();
 800abb6:	f7f7 fef5 	bl	80029a4 <MX_USART2_UART_Init>
			tiempoActual = SysTimeGet();
 800abba:	f107 0314 	add.w	r3, r7, #20
 800abbe:	4618      	mov	r0, r3
 800abc0:	f011 f8be 	bl	801bd40 <SysTimeGet>
			gps_byte_recibido = 0;
 800abc4:	4b67      	ldr	r3, [pc, #412]	; (800ad64 <SendTxData+0x2a4>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, (uint8_t*) gps_buffer, 1);
 800abca:	2201      	movs	r2, #1
 800abcc:	4966      	ldr	r1, [pc, #408]	; (800ad68 <SendTxData+0x2a8>)
 800abce:	4867      	ldr	r0, [pc, #412]	; (800ad6c <SendTxData+0x2ac>)
 800abd0:	f7fd f9c2 	bl	8007f58 <HAL_UART_Receive_IT>
			while ((gps_fix_conseguido == 0)
 800abd4:	e1e2      	b.n	800af9c <SendTxData+0x4dc>
					&& (SysTimeGet().Seconds - tiempoActual.Seconds
							< tiempo_maximo_GPS)) {
				//$GPGGA,131242.000,4022.4644,N,00343.8720,W,1,7,2.49,572.8,M,51.7,M,,*45
				//Simplemente esperamos a que el GPS obtenga un FIX
				if (gps_byte_recibido == 1) {
 800abd6:	4b63      	ldr	r3, [pc, #396]	; (800ad64 <SendTxData+0x2a4>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b01      	cmp	r3, #1
 800abde:	f040 81dd 	bne.w	800af9c <SendTxData+0x4dc>
					//APP_LOG(TS_ON, VLEVEL_L, "%c\r\n",gps_buffer[0]);
					//HAL_UART_Transmit(&huart1, gps_buffer, 1, 100);
					if (contador_caracter == 0 && gps_buffer[0] == '$') {
 800abe2:	4b63      	ldr	r3, [pc, #396]	; (800ad70 <SendTxData+0x2b0>)
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d107      	bne.n	800abfa <SendTxData+0x13a>
 800abea:	4b5f      	ldr	r3, [pc, #380]	; (800ad68 <SendTxData+0x2a8>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b24      	cmp	r3, #36	; 0x24
 800abf0:	d103      	bne.n	800abfa <SendTxData+0x13a>
						contador_caracter = 1;
 800abf2:	4b5f      	ldr	r3, [pc, #380]	; (800ad70 <SendTxData+0x2b0>)
 800abf4:	2201      	movs	r2, #1
 800abf6:	801a      	strh	r2, [r3, #0]
 800abf8:	e1c8      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_caracter == 1 && gps_buffer[0] == 'G') {
 800abfa:	4b5d      	ldr	r3, [pc, #372]	; (800ad70 <SendTxData+0x2b0>)
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d107      	bne.n	800ac12 <SendTxData+0x152>
 800ac02:	4b59      	ldr	r3, [pc, #356]	; (800ad68 <SendTxData+0x2a8>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b47      	cmp	r3, #71	; 0x47
 800ac08:	d103      	bne.n	800ac12 <SendTxData+0x152>
						contador_caracter = 2;
 800ac0a:	4b59      	ldr	r3, [pc, #356]	; (800ad70 <SendTxData+0x2b0>)
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	801a      	strh	r2, [r3, #0]
 800ac10:	e1bc      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_caracter == 2 && gps_buffer[0] == 'P') {
 800ac12:	4b57      	ldr	r3, [pc, #348]	; (800ad70 <SendTxData+0x2b0>)
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d107      	bne.n	800ac2a <SendTxData+0x16a>
 800ac1a:	4b53      	ldr	r3, [pc, #332]	; (800ad68 <SendTxData+0x2a8>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b50      	cmp	r3, #80	; 0x50
 800ac20:	d103      	bne.n	800ac2a <SendTxData+0x16a>
						contador_caracter = 3;
 800ac22:	4b53      	ldr	r3, [pc, #332]	; (800ad70 <SendTxData+0x2b0>)
 800ac24:	2203      	movs	r2, #3
 800ac26:	801a      	strh	r2, [r3, #0]
 800ac28:	e1b0      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_caracter == 3 && gps_buffer[0] == 'G') {
 800ac2a:	4b51      	ldr	r3, [pc, #324]	; (800ad70 <SendTxData+0x2b0>)
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d107      	bne.n	800ac42 <SendTxData+0x182>
 800ac32:	4b4d      	ldr	r3, [pc, #308]	; (800ad68 <SendTxData+0x2a8>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b47      	cmp	r3, #71	; 0x47
 800ac38:	d103      	bne.n	800ac42 <SendTxData+0x182>
						contador_caracter = 4;
 800ac3a:	4b4d      	ldr	r3, [pc, #308]	; (800ad70 <SendTxData+0x2b0>)
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	801a      	strh	r2, [r3, #0]
 800ac40:	e1a4      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_caracter == 4 && gps_buffer[0] == 'G') {
 800ac42:	4b4b      	ldr	r3, [pc, #300]	; (800ad70 <SendTxData+0x2b0>)
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d107      	bne.n	800ac5a <SendTxData+0x19a>
 800ac4a:	4b47      	ldr	r3, [pc, #284]	; (800ad68 <SendTxData+0x2a8>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	2b47      	cmp	r3, #71	; 0x47
 800ac50:	d103      	bne.n	800ac5a <SendTxData+0x19a>
						contador_caracter = 5;
 800ac52:	4b47      	ldr	r3, [pc, #284]	; (800ad70 <SendTxData+0x2b0>)
 800ac54:	2205      	movs	r2, #5
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	e198      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_caracter == 5 && gps_buffer[0] == 'A') {
 800ac5a:	4b45      	ldr	r3, [pc, #276]	; (800ad70 <SendTxData+0x2b0>)
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	2b05      	cmp	r3, #5
 800ac60:	d107      	bne.n	800ac72 <SendTxData+0x1b2>
 800ac62:	4b41      	ldr	r3, [pc, #260]	; (800ad68 <SendTxData+0x2a8>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b41      	cmp	r3, #65	; 0x41
 800ac68:	d103      	bne.n	800ac72 <SendTxData+0x1b2>
						contador_caracter = 6;
 800ac6a:	4b41      	ldr	r3, [pc, #260]	; (800ad70 <SendTxData+0x2b0>)
 800ac6c:	2206      	movs	r2, #6
 800ac6e:	801a      	strh	r2, [r3, #0]
 800ac70:	e18c      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_caracter == 6 && gps_buffer[0] == ',') {
 800ac72:	4b3f      	ldr	r3, [pc, #252]	; (800ad70 <SendTxData+0x2b0>)
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	2b06      	cmp	r3, #6
 800ac78:	d10a      	bne.n	800ac90 <SendTxData+0x1d0>
 800ac7a:	4b3b      	ldr	r3, [pc, #236]	; (800ad68 <SendTxData+0x2a8>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b2c      	cmp	r3, #44	; 0x2c
 800ac80:	d106      	bne.n	800ac90 <SendTxData+0x1d0>
						contador_caracter = 0;
 800ac82:	4b3b      	ldr	r3, [pc, #236]	; (800ad70 <SendTxData+0x2b0>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	801a      	strh	r2, [r3, #0]
						contador_comas = 1;
 800ac88:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <SendTxData+0x2b4>)
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	801a      	strh	r2, [r3, #0]
 800ac8e:	e17d      	b.n	800af8c <SendTxData+0x4cc>
					} else if (contador_comas == 1) {
 800ac90:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <SendTxData+0x2b4>)
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d108      	bne.n	800acaa <SendTxData+0x1ea>
						if (gps_buffer[0] == ',') {
 800ac98:	4b33      	ldr	r3, [pc, #204]	; (800ad68 <SendTxData+0x2a8>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b2c      	cmp	r3, #44	; 0x2c
 800ac9e:	f040 8175 	bne.w	800af8c <SendTxData+0x4cc>
							contador_comas = 2;
 800aca2:	4b34      	ldr	r3, [pc, #208]	; (800ad74 <SendTxData+0x2b4>)
 800aca4:	2202      	movs	r2, #2
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e170      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 2) {
 800acaa:	4b32      	ldr	r3, [pc, #200]	; (800ad74 <SendTxData+0x2b4>)
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d113      	bne.n	800acda <SendTxData+0x21a>
						if (gps_buffer[0] == ',') {
 800acb2:	4b2d      	ldr	r3, [pc, #180]	; (800ad68 <SendTxData+0x2a8>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b2c      	cmp	r3, #44	; 0x2c
 800acb8:	d103      	bne.n	800acc2 <SendTxData+0x202>
							contador_comas = 3;
 800acba:	4b2e      	ldr	r3, [pc, #184]	; (800ad74 <SendTxData+0x2b4>)
 800acbc:	2203      	movs	r2, #3
 800acbe:	801a      	strh	r2, [r3, #0]
 800acc0:	e164      	b.n	800af8c <SendTxData+0x4cc>
						} else {
							latitud[contador_latitud++] = gps_buffer[0];
 800acc2:	4b2d      	ldr	r3, [pc, #180]	; (800ad78 <SendTxData+0x2b8>)
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	b291      	uxth	r1, r2
 800acca:	4a2b      	ldr	r2, [pc, #172]	; (800ad78 <SendTxData+0x2b8>)
 800accc:	8011      	strh	r1, [r2, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	4b25      	ldr	r3, [pc, #148]	; (800ad68 <SendTxData+0x2a8>)
 800acd2:	7819      	ldrb	r1, [r3, #0]
 800acd4:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <SendTxData+0x280>)
 800acd6:	5499      	strb	r1, [r3, r2]
 800acd8:	e158      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 3) {
 800acda:	4b26      	ldr	r3, [pc, #152]	; (800ad74 <SendTxData+0x2b4>)
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d116      	bne.n	800ad10 <SendTxData+0x250>
						if (gps_buffer[0] == ',') {
 800ace2:	4b21      	ldr	r3, [pc, #132]	; (800ad68 <SendTxData+0x2a8>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b2c      	cmp	r3, #44	; 0x2c
 800ace8:	d103      	bne.n	800acf2 <SendTxData+0x232>
							contador_comas = 4;
 800acea:	4b22      	ldr	r3, [pc, #136]	; (800ad74 <SendTxData+0x2b4>)
 800acec:	2204      	movs	r2, #4
 800acee:	801a      	strh	r2, [r3, #0]
 800acf0:	e14c      	b.n	800af8c <SendTxData+0x4cc>
						} else {
							latitud[contador_latitud++] = gps_buffer[0]; //N o S
 800acf2:	4b21      	ldr	r3, [pc, #132]	; (800ad78 <SendTxData+0x2b8>)
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	b291      	uxth	r1, r2
 800acfa:	4a1f      	ldr	r2, [pc, #124]	; (800ad78 <SendTxData+0x2b8>)
 800acfc:	8011      	strh	r1, [r2, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <SendTxData+0x2a8>)
 800ad02:	7819      	ldrb	r1, [r3, #0]
 800ad04:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <SendTxData+0x280>)
 800ad06:	5499      	strb	r1, [r3, r2]
							latitud[10] = '\0';
 800ad08:	4b0d      	ldr	r3, [pc, #52]	; (800ad40 <SendTxData+0x280>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	729a      	strb	r2, [r3, #10]
 800ad0e:	e13d      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 4) {
 800ad10:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <SendTxData+0x2b4>)
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d13d      	bne.n	800ad94 <SendTxData+0x2d4>
						if (gps_buffer[0] == ',') {
 800ad18:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <SendTxData+0x2a8>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b2c      	cmp	r3, #44	; 0x2c
 800ad1e:	d12d      	bne.n	800ad7c <SendTxData+0x2bc>
							contador_comas = 5;
 800ad20:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <SendTxData+0x2b4>)
 800ad22:	2205      	movs	r2, #5
 800ad24:	801a      	strh	r2, [r3, #0]
 800ad26:	e131      	b.n	800af8c <SendTxData+0x4cc>
 800ad28:	20000074 	.word	0x20000074
 800ad2c:	2000070f 	.word	0x2000070f
 800ad30:	20000084 	.word	0x20000084
 800ad34:	20000710 	.word	0x20000710
 800ad38:	2000070e 	.word	0x2000070e
 800ad3c:	200006f4 	.word	0x200006f4
 800ad40:	200006c4 	.word	0x200006c4
 800ad44:	200006d0 	.word	0x200006d0
 800ad48:	200006dc 	.word	0x200006dc
 800ad4c:	200006e8 	.word	0x200006e8
 800ad50:	20000700 	.word	0x20000700
 800ad54:	20000708 	.word	0x20000708
 800ad58:	200006f8 	.word	0x200006f8
 800ad5c:	200006fc 	.word	0x200006fc
 800ad60:	48000400 	.word	0x48000400
 800ad64:	20000717 	.word	0x20000717
 800ad68:	200006c0 	.word	0x200006c0
 800ad6c:	20000484 	.word	0x20000484
 800ad70:	20000736 	.word	0x20000736
 800ad74:	20000738 	.word	0x20000738
 800ad78:	2000073a 	.word	0x2000073a
						} else {
							longitud[contador_longitud++] = gps_buffer[0];
 800ad7c:	4b68      	ldr	r3, [pc, #416]	; (800af20 <SendTxData+0x460>)
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	b291      	uxth	r1, r2
 800ad84:	4a66      	ldr	r2, [pc, #408]	; (800af20 <SendTxData+0x460>)
 800ad86:	8011      	strh	r1, [r2, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4b66      	ldr	r3, [pc, #408]	; (800af24 <SendTxData+0x464>)
 800ad8c:	7819      	ldrb	r1, [r3, #0]
 800ad8e:	4b66      	ldr	r3, [pc, #408]	; (800af28 <SendTxData+0x468>)
 800ad90:	5499      	strb	r1, [r3, r2]
 800ad92:	e0fb      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 5) {
 800ad94:	4b65      	ldr	r3, [pc, #404]	; (800af2c <SendTxData+0x46c>)
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	2b05      	cmp	r3, #5
 800ad9a:	d116      	bne.n	800adca <SendTxData+0x30a>
						if (gps_buffer[0] == ',') {
 800ad9c:	4b61      	ldr	r3, [pc, #388]	; (800af24 <SendTxData+0x464>)
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b2c      	cmp	r3, #44	; 0x2c
 800ada2:	d103      	bne.n	800adac <SendTxData+0x2ec>
							contador_comas = 6;
 800ada4:	4b61      	ldr	r3, [pc, #388]	; (800af2c <SendTxData+0x46c>)
 800ada6:	2206      	movs	r2, #6
 800ada8:	801a      	strh	r2, [r3, #0]
 800adaa:	e0ef      	b.n	800af8c <SendTxData+0x4cc>
						} else {
							longitud[contador_longitud++] = gps_buffer[0]; //E o W
 800adac:	4b5c      	ldr	r3, [pc, #368]	; (800af20 <SendTxData+0x460>)
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	b291      	uxth	r1, r2
 800adb4:	4a5a      	ldr	r2, [pc, #360]	; (800af20 <SendTxData+0x460>)
 800adb6:	8011      	strh	r1, [r2, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	4b5a      	ldr	r3, [pc, #360]	; (800af24 <SendTxData+0x464>)
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	4b5a      	ldr	r3, [pc, #360]	; (800af28 <SendTxData+0x468>)
 800adc0:	5499      	strb	r1, [r3, r2]
							longitud[11] = '\0';
 800adc2:	4b59      	ldr	r3, [pc, #356]	; (800af28 <SendTxData+0x468>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	72da      	strb	r2, [r3, #11]
 800adc8:	e0e0      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 6) {
 800adca:	4b58      	ldr	r3, [pc, #352]	; (800af2c <SendTxData+0x46c>)
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	2b06      	cmp	r3, #6
 800add0:	d10c      	bne.n	800adec <SendTxData+0x32c>
						if (gps_buffer[0] == ',') {
 800add2:	4b54      	ldr	r3, [pc, #336]	; (800af24 <SendTxData+0x464>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b2c      	cmp	r3, #44	; 0x2c
 800add8:	d103      	bne.n	800ade2 <SendTxData+0x322>
							contador_comas = 7;
 800adda:	4b54      	ldr	r3, [pc, #336]	; (800af2c <SendTxData+0x46c>)
 800addc:	2207      	movs	r2, #7
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	e0d4      	b.n	800af8c <SendTxData+0x4cc>
						} else {
							gps_fix_quality = gps_buffer[0];
 800ade2:	4b50      	ldr	r3, [pc, #320]	; (800af24 <SendTxData+0x464>)
 800ade4:	781a      	ldrb	r2, [r3, #0]
 800ade6:	4b52      	ldr	r3, [pc, #328]	; (800af30 <SendTxData+0x470>)
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	e0cf      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 7) {
 800adec:	4b4f      	ldr	r3, [pc, #316]	; (800af2c <SendTxData+0x46c>)
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	2b07      	cmp	r3, #7
 800adf2:	d116      	bne.n	800ae22 <SendTxData+0x362>
						if (gps_buffer[0] == ',') {
 800adf4:	4b4b      	ldr	r3, [pc, #300]	; (800af24 <SendTxData+0x464>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b2c      	cmp	r3, #44	; 0x2c
 800adfa:	d106      	bne.n	800ae0a <SendTxData+0x34a>
							gps_number_of_satellites[2] = '\0';
 800adfc:	4b4d      	ldr	r3, [pc, #308]	; (800af34 <SendTxData+0x474>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	709a      	strb	r2, [r3, #2]
							contador_comas = 8;
 800ae02:	4b4a      	ldr	r3, [pc, #296]	; (800af2c <SendTxData+0x46c>)
 800ae04:	2208      	movs	r2, #8
 800ae06:	801a      	strh	r2, [r3, #0]
 800ae08:	e0c0      	b.n	800af8c <SendTxData+0x4cc>
						} else {
							gps_number_of_satellites[contador_gps_number_of_satellites++] =
 800ae0a:	4b4b      	ldr	r3, [pc, #300]	; (800af38 <SendTxData+0x478>)
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	b291      	uxth	r1, r2
 800ae12:	4a49      	ldr	r2, [pc, #292]	; (800af38 <SendTxData+0x478>)
 800ae14:	8011      	strh	r1, [r2, #0]
 800ae16:	461a      	mov	r2, r3
									gps_buffer[0];
 800ae18:	4b42      	ldr	r3, [pc, #264]	; (800af24 <SendTxData+0x464>)
 800ae1a:	7819      	ldrb	r1, [r3, #0]
							gps_number_of_satellites[contador_gps_number_of_satellites++] =
 800ae1c:	4b45      	ldr	r3, [pc, #276]	; (800af34 <SendTxData+0x474>)
 800ae1e:	5499      	strb	r1, [r3, r2]
 800ae20:	e0b4      	b.n	800af8c <SendTxData+0x4cc>
						}
					} else if (contador_comas == 8) {
 800ae22:	4b42      	ldr	r3, [pc, #264]	; (800af2c <SendTxData+0x46c>)
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	f040 809e 	bne.w	800af68 <SendTxData+0x4a8>
						if (gps_buffer[0] == ',') {
 800ae2c:	4b3d      	ldr	r3, [pc, #244]	; (800af24 <SendTxData+0x464>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	2b2c      	cmp	r3, #44	; 0x2c
 800ae32:	d168      	bne.n	800af06 <SendTxData+0x446>
							gps_hdop[contador_gps_hdop] = '\0';
 800ae34:	4b41      	ldr	r3, [pc, #260]	; (800af3c <SendTxData+0x47c>)
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4b41      	ldr	r3, [pc, #260]	; (800af40 <SendTxData+0x480>)
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	5499      	strb	r1, [r3, r2]
							if (((int) gps_fix_quality - (int) '0') > 0) {
 800ae40:	4b3b      	ldr	r3, [pc, #236]	; (800af30 <SendTxData+0x470>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b30      	cmp	r3, #48	; 0x30
 800ae46:	d94b      	bls.n	800aee0 <SendTxData+0x420>
								if ((atof(gps_hdop) < 2.0)
 800ae48:	483d      	ldr	r0, [pc, #244]	; (800af40 <SendTxData+0x480>)
 800ae4a:	f012 f967 	bl	801d11c <atof>
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae56:	f7f5 fe19 	bl	8000a8c <__aeabi_dcmplt>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00e      	beq.n	800ae7e <SendTxData+0x3be>
										&& (atof(gps_hdop) >= 1.0)) {
 800ae60:	4837      	ldr	r0, [pc, #220]	; (800af40 <SendTxData+0x480>)
 800ae62:	f012 f95b 	bl	801d11c <atof>
 800ae66:	f04f 0200 	mov.w	r2, #0
 800ae6a:	4b36      	ldr	r3, [pc, #216]	; (800af44 <SendTxData+0x484>)
 800ae6c:	f7f5 fe22 	bl	8000ab4 <__aeabi_dcmpge>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <SendTxData+0x3be>
									gps_fix_conseguido = 1;
 800ae76:	4b34      	ldr	r3, [pc, #208]	; (800af48 <SendTxData+0x488>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	701a      	strb	r2, [r3, #0]
 800ae7c:	e030      	b.n	800aee0 <SendTxData+0x420>
								} else {
									if (atof(gps_hdop_tentativo) == 0
 800ae7e:	4833      	ldr	r0, [pc, #204]	; (800af4c <SendTxData+0x48c>)
 800ae80:	f012 f94c 	bl	801d11c <atof>
 800ae84:	f04f 0200 	mov.w	r2, #0
 800ae88:	f04f 0300 	mov.w	r3, #0
 800ae8c:	f7f5 fdf4 	bl	8000a78 <__aeabi_dcmpeq>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d110      	bne.n	800aeb8 <SendTxData+0x3f8>
											|| (atof(gps_hdop_tentativo)
 800ae96:	482d      	ldr	r0, [pc, #180]	; (800af4c <SendTxData+0x48c>)
 800ae98:	f012 f940 	bl	801d11c <atof>
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
													> atof(gps_hdop))) {
 800aea0:	4827      	ldr	r0, [pc, #156]	; (800af40 <SendTxData+0x480>)
 800aea2:	f012 f93b 	bl	801d11c <atof>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
											|| (atof(gps_hdop_tentativo)
 800aeaa:	4620      	mov	r0, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	f7f5 fe0b 	bl	8000ac8 <__aeabi_dcmpgt>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d013      	beq.n	800aee0 <SendTxData+0x420>
										strncpy(latitud_tentativa, latitud, 11);
 800aeb8:	220b      	movs	r2, #11
 800aeba:	4925      	ldr	r1, [pc, #148]	; (800af50 <SendTxData+0x490>)
 800aebc:	4825      	ldr	r0, [pc, #148]	; (800af54 <SendTxData+0x494>)
 800aebe:	f012 f967 	bl	801d190 <strncpy>
										strncpy(longitud_tentativa, longitud,
 800aec2:	220c      	movs	r2, #12
 800aec4:	4918      	ldr	r1, [pc, #96]	; (800af28 <SendTxData+0x468>)
 800aec6:	4824      	ldr	r0, [pc, #144]	; (800af58 <SendTxData+0x498>)
 800aec8:	f012 f962 	bl	801d190 <strncpy>
												12);
										strncpy(
 800aecc:	2203      	movs	r2, #3
 800aece:	4919      	ldr	r1, [pc, #100]	; (800af34 <SendTxData+0x474>)
 800aed0:	4822      	ldr	r0, [pc, #136]	; (800af5c <SendTxData+0x49c>)
 800aed2:	f012 f95d 	bl	801d190 <strncpy>
												gps_number_of_satellites_tentativo,
												gps_number_of_satellites, 3);
										strncpy(gps_hdop_tentativo, gps_hdop,
 800aed6:	2206      	movs	r2, #6
 800aed8:	4919      	ldr	r1, [pc, #100]	; (800af40 <SendTxData+0x480>)
 800aeda:	481c      	ldr	r0, [pc, #112]	; (800af4c <SendTxData+0x48c>)
 800aedc:	f012 f958 	bl	801d190 <strncpy>
												6);
									}
								}
							}
							contador_caracter = 0;
 800aee0:	4b1f      	ldr	r3, [pc, #124]	; (800af60 <SendTxData+0x4a0>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	801a      	strh	r2, [r3, #0]
							contador_comas = 0;
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <SendTxData+0x46c>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	801a      	strh	r2, [r3, #0]
							contador_latitud = 0;
 800aeec:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <SendTxData+0x4a4>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	801a      	strh	r2, [r3, #0]
							contador_longitud = 0;
 800aef2:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <SendTxData+0x460>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	801a      	strh	r2, [r3, #0]
							contador_gps_number_of_satellites = 0;
 800aef8:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <SendTxData+0x478>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	801a      	strh	r2, [r3, #0]
							contador_gps_hdop = 0;
 800aefe:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <SendTxData+0x47c>)
 800af00:	2200      	movs	r2, #0
 800af02:	801a      	strh	r2, [r3, #0]
 800af04:	e042      	b.n	800af8c <SendTxData+0x4cc>
						} else {
							gps_hdop[contador_gps_hdop++] = gps_buffer[0];
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <SendTxData+0x47c>)
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	b291      	uxth	r1, r2
 800af0e:	4a0b      	ldr	r2, [pc, #44]	; (800af3c <SendTxData+0x47c>)
 800af10:	8011      	strh	r1, [r2, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	4b03      	ldr	r3, [pc, #12]	; (800af24 <SendTxData+0x464>)
 800af16:	7819      	ldrb	r1, [r3, #0]
 800af18:	4b09      	ldr	r3, [pc, #36]	; (800af40 <SendTxData+0x480>)
 800af1a:	5499      	strb	r1, [r3, r2]
 800af1c:	e036      	b.n	800af8c <SendTxData+0x4cc>
 800af1e:	bf00      	nop
 800af20:	2000073c 	.word	0x2000073c
 800af24:	200006c0 	.word	0x200006c0
 800af28:	200006d0 	.word	0x200006d0
 800af2c:	20000738 	.word	0x20000738
 800af30:	200006f4 	.word	0x200006f4
 800af34:	200006f8 	.word	0x200006f8
 800af38:	2000073e 	.word	0x2000073e
 800af3c:	20000740 	.word	0x20000740
 800af40:	20000700 	.word	0x20000700
 800af44:	3ff00000 	.word	0x3ff00000
 800af48:	2000070e 	.word	0x2000070e
 800af4c:	20000708 	.word	0x20000708
 800af50:	200006c4 	.word	0x200006c4
 800af54:	200006dc 	.word	0x200006dc
 800af58:	200006e8 	.word	0x200006e8
 800af5c:	200006fc 	.word	0x200006fc
 800af60:	20000736 	.word	0x20000736
 800af64:	2000073a 	.word	0x2000073a
						}
					} else {
						contador_caracter = 0;
 800af68:	4b99      	ldr	r3, [pc, #612]	; (800b1d0 <SendTxData+0x710>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	801a      	strh	r2, [r3, #0]
						contador_comas = 0;
 800af6e:	4b99      	ldr	r3, [pc, #612]	; (800b1d4 <SendTxData+0x714>)
 800af70:	2200      	movs	r2, #0
 800af72:	801a      	strh	r2, [r3, #0]
						contador_latitud = 0;
 800af74:	4b98      	ldr	r3, [pc, #608]	; (800b1d8 <SendTxData+0x718>)
 800af76:	2200      	movs	r2, #0
 800af78:	801a      	strh	r2, [r3, #0]
						contador_longitud = 0;
 800af7a:	4b98      	ldr	r3, [pc, #608]	; (800b1dc <SendTxData+0x71c>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	801a      	strh	r2, [r3, #0]
						contador_gps_number_of_satellites = 0;
 800af80:	4b97      	ldr	r3, [pc, #604]	; (800b1e0 <SendTxData+0x720>)
 800af82:	2200      	movs	r2, #0
 800af84:	801a      	strh	r2, [r3, #0]
						contador_gps_hdop = 0;
 800af86:	4b97      	ldr	r3, [pc, #604]	; (800b1e4 <SendTxData+0x724>)
 800af88:	2200      	movs	r2, #0
 800af8a:	801a      	strh	r2, [r3, #0]
					}
					gps_byte_recibido = 0;
 800af8c:	4b96      	ldr	r3, [pc, #600]	; (800b1e8 <SendTxData+0x728>)
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2, (uint8_t*) gps_buffer, 1);
 800af92:	2201      	movs	r2, #1
 800af94:	4995      	ldr	r1, [pc, #596]	; (800b1ec <SendTxData+0x72c>)
 800af96:	4896      	ldr	r0, [pc, #600]	; (800b1f0 <SendTxData+0x730>)
 800af98:	f7fc ffde 	bl	8007f58 <HAL_UART_Receive_IT>
			while ((gps_fix_conseguido == 0)
 800af9c:	4b95      	ldr	r3, [pc, #596]	; (800b1f4 <SendTxData+0x734>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10c      	bne.n	800afbe <SendTxData+0x4fe>
					&& (SysTimeGet().Seconds - tiempoActual.Seconds
 800afa4:	f107 031c 	add.w	r3, r7, #28
 800afa8:	4618      	mov	r0, r3
 800afaa:	f010 fec9 	bl	801bd40 <SysTimeGet>
 800afae:	69fa      	ldr	r2, [r7, #28]
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	1ad3      	subs	r3, r2, r3
							< tiempo_maximo_GPS)) {
 800afb4:	4a90      	ldr	r2, [pc, #576]	; (800b1f8 <SendTxData+0x738>)
 800afb6:	6812      	ldr	r2, [r2, #0]
					&& (SysTimeGet().Seconds - tiempoActual.Seconds
 800afb8:	4293      	cmp	r3, r2
 800afba:	f4ff ae0c 	bcc.w	800abd6 <SendTxData+0x116>
			}
		}
		//Deshabilitamos la alimentación del GPS

		APP_LOG(TS_ON, VLEVEL_L, "GPS APAGADO\r\n");
		HAL_GPIO_WritePin(EN_GPS_GPIO_Port, EN_GPS_Pin, GPIO_PIN_RESET);
 800afbe:	2200      	movs	r2, #0
 800afc0:	2120      	movs	r1, #32
 800afc2:	488e      	ldr	r0, [pc, #568]	; (800b1fc <SendTxData+0x73c>)
 800afc4:	f7fa faa2 	bl	800550c <HAL_GPIO_WritePin>
		if (gps_fix_conseguido == 1 || atof(gps_hdop_tentativo) > 1) {
 800afc8:	4b8a      	ldr	r3, [pc, #552]	; (800b1f4 <SendTxData+0x734>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d00b      	beq.n	800afe8 <SendTxData+0x528>
 800afd0:	488b      	ldr	r0, [pc, #556]	; (800b200 <SendTxData+0x740>)
 800afd2:	f012 f8a3 	bl	801d11c <atof>
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	4b8a      	ldr	r3, [pc, #552]	; (800b204 <SendTxData+0x744>)
 800afdc:	f7f5 fd74 	bl	8000ac8 <__aeabi_dcmpgt>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 8130 	beq.w	800b248 <SendTxData+0x788>
			long lat = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			long lon = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (gps_fix_conseguido == 0) {
 800aff2:	4b80      	ldr	r3, [pc, #512]	; (800b1f4 <SendTxData+0x734>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d113      	bne.n	800b022 <SendTxData+0x562>
				strncpy(latitud, latitud_tentativa, 11);
 800affa:	220b      	movs	r2, #11
 800affc:	4982      	ldr	r1, [pc, #520]	; (800b208 <SendTxData+0x748>)
 800affe:	4883      	ldr	r0, [pc, #524]	; (800b20c <SendTxData+0x74c>)
 800b000:	f012 f8c6 	bl	801d190 <strncpy>
				strncpy(longitud, longitud_tentativa, 12);
 800b004:	220c      	movs	r2, #12
 800b006:	4982      	ldr	r1, [pc, #520]	; (800b210 <SendTxData+0x750>)
 800b008:	4882      	ldr	r0, [pc, #520]	; (800b214 <SendTxData+0x754>)
 800b00a:	f012 f8c1 	bl	801d190 <strncpy>
				strncpy(gps_hdop, gps_hdop_tentativo, 6);
 800b00e:	2206      	movs	r2, #6
 800b010:	497b      	ldr	r1, [pc, #492]	; (800b200 <SendTxData+0x740>)
 800b012:	4881      	ldr	r0, [pc, #516]	; (800b218 <SendTxData+0x758>)
 800b014:	f012 f8bc 	bl	801d190 <strncpy>
				strncpy(gps_number_of_satellites,
 800b018:	2203      	movs	r2, #3
 800b01a:	4980      	ldr	r1, [pc, #512]	; (800b21c <SendTxData+0x75c>)
 800b01c:	4880      	ldr	r0, [pc, #512]	; (800b220 <SendTxData+0x760>)
 800b01e:	f012 f8b7 	bl	801d190 <strncpy>

			//Tengo que convertir la latitud y longitud a grados
			//y multiplicarlas por 40000 quedándome sólo con la parte
			//entera... porque así lo tengo en myIoT
			float comodin;
			comodin = atof(&latitud[2]) / 60.0;
 800b022:	4880      	ldr	r0, [pc, #512]	; (800b224 <SendTxData+0x764>)
 800b024:	f012 f87a 	bl	801d11c <atof>
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	4b7e      	ldr	r3, [pc, #504]	; (800b228 <SendTxData+0x768>)
 800b02e:	f7f5 fbe5 	bl	80007fc <__aeabi_ddiv>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	f7f5 fd97 	bl	8000b6c <__aeabi_d2f>
 800b03e:	4603      	mov	r3, r0
 800b040:	67bb      	str	r3, [r7, #120]	; 0x78
			latitud[2] = '\0';
 800b042:	4b72      	ldr	r3, [pc, #456]	; (800b20c <SendTxData+0x74c>)
 800b044:	2200      	movs	r2, #0
 800b046:	709a      	strb	r2, [r3, #2]
			lat = (long) ((atof(latitud) + comodin) * 40000.0);
 800b048:	4870      	ldr	r0, [pc, #448]	; (800b20c <SendTxData+0x74c>)
 800b04a:	f012 f867 	bl	801d11c <atof>
 800b04e:	4604      	mov	r4, r0
 800b050:	460d      	mov	r5, r1
 800b052:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b054:	f7f5 fa50 	bl	80004f8 <__aeabi_f2d>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 f8ec 	bl	800023c <__adddf3>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4610      	mov	r0, r2
 800b06a:	4619      	mov	r1, r3
 800b06c:	a356      	add	r3, pc, #344	; (adr r3, 800b1c8 <SendTxData+0x708>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 fa99 	bl	80005a8 <__aeabi_dmul>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4610      	mov	r0, r2
 800b07c:	4619      	mov	r1, r3
 800b07e:	f7f5 fd2d 	bl	8000adc <__aeabi_d2iz>
 800b082:	4603      	mov	r3, r0
 800b084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (latitud[9] == 'S') {
 800b088:	4b60      	ldr	r3, [pc, #384]	; (800b20c <SendTxData+0x74c>)
 800b08a:	7a5b      	ldrb	r3, [r3, #9]
 800b08c:	2b53      	cmp	r3, #83	; 0x53
 800b08e:	d10c      	bne.n	800b0aa <SendTxData+0x5ea>

				AppData.Buffer[3] = (lat >> 16) | 0x80;
 800b090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b094:	141b      	asrs	r3, r3, #16
 800b096:	b25b      	sxtb	r3, r3
 800b098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b09c:	b25a      	sxtb	r2, r3
 800b09e:	4b63      	ldr	r3, [pc, #396]	; (800b22c <SendTxData+0x76c>)
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	3303      	adds	r3, #3
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	e007      	b.n	800b0ba <SendTxData+0x5fa>
			} else {
				AppData.Buffer[3] = (lat >> 16);
 800b0aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0ae:	141a      	asrs	r2, r3, #16
 800b0b0:	4b5e      	ldr	r3, [pc, #376]	; (800b22c <SendTxData+0x76c>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	3303      	adds	r3, #3
 800b0b6:	b2d2      	uxtb	r2, r2
 800b0b8:	701a      	strb	r2, [r3, #0]
			}
			AppData.Buffer[4] = lat >> 8;
 800b0ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0be:	121a      	asrs	r2, r3, #8
 800b0c0:	4b5a      	ldr	r3, [pc, #360]	; (800b22c <SendTxData+0x76c>)
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[5] = lat;
 800b0ca:	4b58      	ldr	r3, [pc, #352]	; (800b22c <SendTxData+0x76c>)
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	3305      	adds	r3, #5
 800b0d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]

			//HAL_UART_Transmit(&huart1, latitud, 11, 100);
			//char str[32];
			//int size_len = sprintf (str, "Lat : %d\n", lat);
			//HAL_UART_Transmit (&huart1, (uint8_t *)str, size_len, HAL_MAX_DELAY);
			comodin = atof(&longitud[3]) / 60.0;
 800b0d8:	4855      	ldr	r0, [pc, #340]	; (800b230 <SendTxData+0x770>)
 800b0da:	f012 f81f 	bl	801d11c <atof>
 800b0de:	f04f 0200 	mov.w	r2, #0
 800b0e2:	4b51      	ldr	r3, [pc, #324]	; (800b228 <SendTxData+0x768>)
 800b0e4:	f7f5 fb8a 	bl	80007fc <__aeabi_ddiv>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	f7f5 fd3c 	bl	8000b6c <__aeabi_d2f>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	67bb      	str	r3, [r7, #120]	; 0x78
			longitud[3] = '\0';
 800b0f8:	4b46      	ldr	r3, [pc, #280]	; (800b214 <SendTxData+0x754>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	70da      	strb	r2, [r3, #3]

			lon = (long) ((atof(longitud) + comodin) * 40000.0);
 800b0fe:	4845      	ldr	r0, [pc, #276]	; (800b214 <SendTxData+0x754>)
 800b100:	f012 f80c 	bl	801d11c <atof>
 800b104:	4604      	mov	r4, r0
 800b106:	460d      	mov	r5, r1
 800b108:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b10a:	f7f5 f9f5 	bl	80004f8 <__aeabi_f2d>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	4620      	mov	r0, r4
 800b114:	4629      	mov	r1, r5
 800b116:	f7f5 f891 	bl	800023c <__adddf3>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4610      	mov	r0, r2
 800b120:	4619      	mov	r1, r3
 800b122:	a329      	add	r3, pc, #164	; (adr r3, 800b1c8 <SendTxData+0x708>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f7f5 fa3e 	bl	80005a8 <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4610      	mov	r0, r2
 800b132:	4619      	mov	r1, r3
 800b134:	f7f5 fcd2 	bl	8000adc <__aeabi_d2iz>
 800b138:	4603      	mov	r3, r0
 800b13a:	67fb      	str	r3, [r7, #124]	; 0x7c

			if (longitud[10] == 'W') {
 800b13c:	4b35      	ldr	r3, [pc, #212]	; (800b214 <SendTxData+0x754>)
 800b13e:	7a9b      	ldrb	r3, [r3, #10]
 800b140:	2b57      	cmp	r3, #87	; 0x57
 800b142:	d10b      	bne.n	800b15c <SendTxData+0x69c>
				AppData.Buffer[6] = (lon >> 16) | 0x80;
 800b144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b146:	141b      	asrs	r3, r3, #16
 800b148:	b25b      	sxtb	r3, r3
 800b14a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b14e:	b25a      	sxtb	r2, r3
 800b150:	4b36      	ldr	r3, [pc, #216]	; (800b22c <SendTxData+0x76c>)
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	3306      	adds	r3, #6
 800b156:	b2d2      	uxtb	r2, r2
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	e006      	b.n	800b16a <SendTxData+0x6aa>
			} else {
				AppData.Buffer[6] = (lon >> 16);
 800b15c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b15e:	141a      	asrs	r2, r3, #16
 800b160:	4b32      	ldr	r3, [pc, #200]	; (800b22c <SendTxData+0x76c>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	3306      	adds	r3, #6
 800b166:	b2d2      	uxtb	r2, r2
 800b168:	701a      	strb	r2, [r3, #0]
			}

			AppData.Buffer[7] = lon >> 8;
 800b16a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b16c:	121a      	asrs	r2, r3, #8
 800b16e:	4b2f      	ldr	r3, [pc, #188]	; (800b22c <SendTxData+0x76c>)
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	3307      	adds	r3, #7
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[8] = lon;
 800b178:	4b2c      	ldr	r3, [pc, #176]	; (800b22c <SendTxData+0x76c>)
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	3308      	adds	r3, #8
 800b17e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	701a      	strb	r2, [r3, #0]
			comodin = atof(gps_hdop) * 100.0;
 800b184:	4824      	ldr	r0, [pc, #144]	; (800b218 <SendTxData+0x758>)
 800b186:	f011 ffc9 	bl	801d11c <atof>
 800b18a:	f04f 0200 	mov.w	r2, #0
 800b18e:	4b29      	ldr	r3, [pc, #164]	; (800b234 <SendTxData+0x774>)
 800b190:	f7f5 fa0a 	bl	80005a8 <__aeabi_dmul>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4610      	mov	r0, r2
 800b19a:	4619      	mov	r1, r3
 800b19c:	f7f5 fce6 	bl	8000b6c <__aeabi_d2f>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	67bb      	str	r3, [r7, #120]	; 0x78
			AppData.Buffer[2] = AppData.Buffer[2]
 800b1a4:	4b21      	ldr	r3, [pc, #132]	; (800b22c <SendTxData+0x76c>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b25c      	sxtb	r4, r3
					| (32 < (char) (atoi(gps_hdop)) ?
 800b1ae:	481a      	ldr	r0, [pc, #104]	; (800b218 <SendTxData+0x758>)
 800b1b0:	f011 ffb7 	bl	801d122 <atoi>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b20      	cmp	r3, #32
 800b1ba:	d83d      	bhi.n	800b238 <SendTxData+0x778>
							32 : (char) (atoi(gps_hdop)));
 800b1bc:	4816      	ldr	r0, [pc, #88]	; (800b218 <SendTxData+0x758>)
 800b1be:	f011 ffb0 	bl	801d122 <atoi>
 800b1c2:	4603      	mov	r3, r0
					| (32 < (char) (atoi(gps_hdop)) ?
 800b1c4:	b25b      	sxtb	r3, r3
 800b1c6:	e038      	b.n	800b23a <SendTxData+0x77a>
 800b1c8:	00000000 	.word	0x00000000
 800b1cc:	40e38800 	.word	0x40e38800
 800b1d0:	20000736 	.word	0x20000736
 800b1d4:	20000738 	.word	0x20000738
 800b1d8:	2000073a 	.word	0x2000073a
 800b1dc:	2000073c 	.word	0x2000073c
 800b1e0:	2000073e 	.word	0x2000073e
 800b1e4:	20000740 	.word	0x20000740
 800b1e8:	20000717 	.word	0x20000717
 800b1ec:	200006c0 	.word	0x200006c0
 800b1f0:	20000484 	.word	0x20000484
 800b1f4:	2000070e 	.word	0x2000070e
 800b1f8:	20000088 	.word	0x20000088
 800b1fc:	48000400 	.word	0x48000400
 800b200:	20000708 	.word	0x20000708
 800b204:	3ff00000 	.word	0x3ff00000
 800b208:	200006dc 	.word	0x200006dc
 800b20c:	200006c4 	.word	0x200006c4
 800b210:	200006e8 	.word	0x200006e8
 800b214:	200006d0 	.word	0x200006d0
 800b218:	20000700 	.word	0x20000700
 800b21c:	200006fc 	.word	0x200006fc
 800b220:	200006f8 	.word	0x200006f8
 800b224:	200006c6 	.word	0x200006c6
 800b228:	404e0000 	.word	0x404e0000
 800b22c:	20000074 	.word	0x20000074
 800b230:	200006d3 	.word	0x200006d3
 800b234:	40590000 	.word	0x40590000
 800b238:	2320      	movs	r3, #32
 800b23a:	4323      	orrs	r3, r4
 800b23c:	b25a      	sxtb	r2, r3
			AppData.Buffer[2] = AppData.Buffer[2]
 800b23e:	4b9a      	ldr	r3, [pc, #616]	; (800b4a8 <SendTxData+0x9e8>)
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	3302      	adds	r3, #2
					| (32 < (char) (atoi(gps_hdop)) ?
 800b244:	b2d2      	uxtb	r2, r2
			AppData.Buffer[2] = AppData.Buffer[2]
 800b246:	701a      	strb	r2, [r3, #0]
					gps_fix_conseguido, lat, lon, gps_fix_quality,
					gps_number_of_satellites, gps_hdop, (long ) atof(gps_hdop));
		}
		//Wi-Fi?

		if (modo_geolocalizacion == 1 || modo_geolocalizacion == 2) {
 800b248:	4b98      	ldr	r3, [pc, #608]	; (800b4ac <SendTxData+0x9ec>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d004      	beq.n	800b25a <SendTxData+0x79a>
 800b250:	4b96      	ldr	r3, [pc, #600]	; (800b4ac <SendTxData+0x9ec>)
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b02      	cmp	r3, #2
 800b256:	f041 81bc 	bne.w	800c5d2 <SendTxData+0x1b12>
			APP_LOG(TS_ON, VLEVEL_L, "ESP ENCENDIDO\r\n");
			mac1[0] = '\0';
 800b25a:	4b95      	ldr	r3, [pc, #596]	; (800b4b0 <SendTxData+0x9f0>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
			mac2[0] = '\0';
 800b260:	4b94      	ldr	r3, [pc, #592]	; (800b4b4 <SendTxData+0x9f4>)
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
			esp_mac_conseguido = 0;
 800b266:	4b94      	ldr	r3, [pc, #592]	; (800b4b8 <SendTxData+0x9f8>)
 800b268:	2200      	movs	r2, #0
 800b26a:	701a      	strb	r2, [r3, #0]
			tiempoParcial = SysTimeGet();
 800b26c:	463b      	mov	r3, r7
 800b26e:	4618      	mov	r0, r3
 800b270:	f010 fd66 	bl	801bd40 <SysTimeGet>
 800b274:	f107 030c 	add.w	r3, r7, #12
 800b278:	463a      	mov	r2, r7
 800b27a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b27e:	e883 0003 	stmia.w	r3, {r0, r1}
			//Espero un par de segundos para estabilizar la alimentación
			while (SysTimeGet().Seconds - tiempoParcial.Seconds < 2) {
 800b282:	bf00      	nop
 800b284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b288:	4618      	mov	r0, r3
 800b28a:	f010 fd59 	bl	801bd40 <SysTimeGet>
 800b28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b01      	cmp	r3, #1
 800b296:	d9f5      	bls.n	800b284 <SendTxData+0x7c4>
			}
			HAL_GPIO_WritePin(EN_ESP_GPIO_Port, EN_ESP_Pin, GPIO_PIN_SET);
 800b298:	2201      	movs	r2, #1
 800b29a:	2102      	movs	r1, #2
 800b29c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2a0:	f7fa f934 	bl	800550c <HAL_GPIO_WritePin>

			estado_esp = 0;
 800b2a4:	4b85      	ldr	r3, [pc, #532]	; (800b4bc <SendTxData+0x9fc>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	801a      	strh	r2, [r3, #0]
			esp_byte_recibido = 0;
 800b2aa:	4b85      	ldr	r3, [pc, #532]	; (800b4c0 <SendTxData+0xa00>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, (uint8_t*) esp_buffer, 1);
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	4984      	ldr	r1, [pc, #528]	; (800b4c4 <SendTxData+0xa04>)
 800b2b4:	4884      	ldr	r0, [pc, #528]	; (800b4c8 <SendTxData+0xa08>)
 800b2b6:	f7fc fe4f 	bl	8007f58 <HAL_UART_Receive_IT>
			tiempoActual = SysTimeGet();
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f010 fd3f 	bl	801bd40 <SysTimeGet>
 800b2c2:	f107 0314 	add.w	r3, r7, #20
 800b2c6:	463a      	mov	r2, r7
 800b2c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2cc:	e883 0003 	stmia.w	r3, {r0, r1}
			while (esp_mac_conseguido == 0
 800b2d0:	bf00      	nop
 800b2d2:	f001 b963 	b.w	800c59c <SendTxData+0x1adc>
					&& (SysTimeGet().Seconds - tiempoActual.Seconds
							< tiempo_maximo_ESP && (esp_mac_conseguido == 0))) {
				//Simplemente esperamos a que el ESP obtenga las MACS
				switch (estado_esp) {
 800b2d6:	4b79      	ldr	r3, [pc, #484]	; (800b4bc <SendTxData+0x9fc>)
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	f201 815e 	bhi.w	800c59c <SendTxData+0x1adc>
 800b2e0:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <SendTxData+0x828>)
 800b2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e6:	bf00      	nop
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b377 	.word	0x0800b377
 800b2f0:	0800b595 	.word	0x0800b595
 800b2f4:	0800b8ab 	.word	0x0800b8ab
 800b2f8:	0800bc45 	.word	0x0800bc45
				case 0:
					//Espero a que n 2 segundos sin recibir nada (vaciado del bufer)
					if (esp_byte_recibido == 1) {
 800b2fc:	4b70      	ldr	r3, [pc, #448]	; (800b4c0 <SendTxData+0xa00>)
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b01      	cmp	r3, #1
 800b304:	d114      	bne.n	800b330 <SendTxData+0x870>
						esp_byte_recibido = 0;
 800b306:	4b6e      	ldr	r3, [pc, #440]	; (800b4c0 <SendTxData+0xa00>)
 800b308:	2200      	movs	r2, #0
 800b30a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Receive_IT(&huart1, (uint8_t*) esp_buffer, 1);
 800b30c:	2201      	movs	r2, #1
 800b30e:	496d      	ldr	r1, [pc, #436]	; (800b4c4 <SendTxData+0xa04>)
 800b310:	486d      	ldr	r0, [pc, #436]	; (800b4c8 <SendTxData+0xa08>)
 800b312:	f7fc fe21 	bl	8007f58 <HAL_UART_Receive_IT>
						tiempoParcial = SysTimeGet();
 800b316:	463b      	mov	r3, r7
 800b318:	4618      	mov	r0, r3
 800b31a:	f010 fd11 	bl	801bd40 <SysTimeGet>
 800b31e:	f107 030c 	add.w	r3, r7, #12
 800b322:	463a      	mov	r2, r7
 800b324:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b328:	e883 0003 	stmia.w	r3, {r0, r1}
 800b32c:	f001 b936 	b.w	800c59c <SendTxData+0x1adc>
					} else if (SysTimeGet().Seconds - tiempoParcial.Seconds
 800b330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b334:	4618      	mov	r0, r3
 800b336:	f010 fd03 	bl	801bd40 <SysTimeGet>
 800b33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	f241 812b 	bls.w	800c59c <SendTxData+0x1adc>
							> 2) {
						estado_esp = 1;
 800b346:	4b5d      	ldr	r3, [pc, #372]	; (800b4bc <SendTxData+0x9fc>)
 800b348:	2201      	movs	r2, #1
 800b34a:	801a      	strh	r2, [r3, #0]
						contador_caracter_esp = 0;
 800b34c:	4b5f      	ldr	r3, [pc, #380]	; (800b4cc <SendTxData+0xa0c>)
 800b34e:	2200      	movs	r2, #0
 800b350:	801a      	strh	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart1, "AT\r\n", 4);
 800b352:	2204      	movs	r2, #4
 800b354:	495e      	ldr	r1, [pc, #376]	; (800b4d0 <SendTxData+0xa10>)
 800b356:	485c      	ldr	r0, [pc, #368]	; (800b4c8 <SendTxData+0xa08>)
 800b358:	f7fc fd56 	bl	8007e08 <HAL_UART_Transmit_IT>
						tiempoParcial = SysTimeGet();
 800b35c:	463b      	mov	r3, r7
 800b35e:	4618      	mov	r0, r3
 800b360:	f010 fcee 	bl	801bd40 <SysTimeGet>
 800b364:	f107 030c 	add.w	r3, r7, #12
 800b368:	463a      	mov	r2, r7
 800b36a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b36e:	e883 0003 	stmia.w	r3, {r0, r1}
					}
					break;
 800b372:	f001 b913 	b.w	800c59c <SendTxData+0x1adc>
				case 1:
					if (esp_byte_recibido == 1) {
 800b376:	4b52      	ldr	r3, [pc, #328]	; (800b4c0 <SendTxData+0xa00>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	f040 80ee 	bne.w	800b55e <SendTxData+0xa9e>
						tiempoParcial = SysTimeGet();
 800b382:	463b      	mov	r3, r7
 800b384:	4618      	mov	r0, r3
 800b386:	f010 fcdb 	bl	801bd40 <SysTimeGet>
 800b38a:	f107 030c 	add.w	r3, r7, #12
 800b38e:	463a      	mov	r2, r7
 800b390:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b394:	e883 0003 	stmia.w	r3, {r0, r1}
						if (contador_caracter_esp == 0
 800b398:	4b4c      	ldr	r3, [pc, #304]	; (800b4cc <SendTxData+0xa0c>)
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10a      	bne.n	800b3b6 <SendTxData+0x8f6>
								&& esp_buffer[0] == 'A') {
 800b3a0:	4b48      	ldr	r3, [pc, #288]	; (800b4c4 <SendTxData+0xa04>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	2b41      	cmp	r3, #65	; 0x41
 800b3a6:	d106      	bne.n	800b3b6 <SendTxData+0x8f6>
							contador_caracter_esp++;
 800b3a8:	4b48      	ldr	r3, [pc, #288]	; (800b4cc <SendTxData+0xa0c>)
 800b3aa:	881b      	ldrh	r3, [r3, #0]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	4b46      	ldr	r3, [pc, #280]	; (800b4cc <SendTxData+0xa0c>)
 800b3b2:	801a      	strh	r2, [r3, #0]
 800b3b4:	e0c9      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 1
 800b3b6:	4b45      	ldr	r3, [pc, #276]	; (800b4cc <SendTxData+0xa0c>)
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d10a      	bne.n	800b3d4 <SendTxData+0x914>
								&& esp_buffer[0] == 'T') {
 800b3be:	4b41      	ldr	r3, [pc, #260]	; (800b4c4 <SendTxData+0xa04>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b54      	cmp	r3, #84	; 0x54
 800b3c4:	d106      	bne.n	800b3d4 <SendTxData+0x914>
							contador_caracter_esp++;
 800b3c6:	4b41      	ldr	r3, [pc, #260]	; (800b4cc <SendTxData+0xa0c>)
 800b3c8:	881b      	ldrh	r3, [r3, #0]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	4b3f      	ldr	r3, [pc, #252]	; (800b4cc <SendTxData+0xa0c>)
 800b3d0:	801a      	strh	r2, [r3, #0]
 800b3d2:	e0ba      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 2
 800b3d4:	4b3d      	ldr	r3, [pc, #244]	; (800b4cc <SendTxData+0xa0c>)
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d10a      	bne.n	800b3f2 <SendTxData+0x932>
								&& esp_buffer[0] == 0x0D) {
 800b3dc:	4b39      	ldr	r3, [pc, #228]	; (800b4c4 <SendTxData+0xa04>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2b0d      	cmp	r3, #13
 800b3e2:	d106      	bne.n	800b3f2 <SendTxData+0x932>
							contador_caracter_esp++;
 800b3e4:	4b39      	ldr	r3, [pc, #228]	; (800b4cc <SendTxData+0xa0c>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	4b37      	ldr	r3, [pc, #220]	; (800b4cc <SendTxData+0xa0c>)
 800b3ee:	801a      	strh	r2, [r3, #0]
 800b3f0:	e0ab      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 3
 800b3f2:	4b36      	ldr	r3, [pc, #216]	; (800b4cc <SendTxData+0xa0c>)
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d10a      	bne.n	800b410 <SendTxData+0x950>
								&& esp_buffer[0] == 0x0D) {
 800b3fa:	4b32      	ldr	r3, [pc, #200]	; (800b4c4 <SendTxData+0xa04>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b0d      	cmp	r3, #13
 800b400:	d106      	bne.n	800b410 <SendTxData+0x950>
							contador_caracter_esp++;
 800b402:	4b32      	ldr	r3, [pc, #200]	; (800b4cc <SendTxData+0xa0c>)
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	b29a      	uxth	r2, r3
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <SendTxData+0xa0c>)
 800b40c:	801a      	strh	r2, [r3, #0]
 800b40e:	e09c      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 4
 800b410:	4b2e      	ldr	r3, [pc, #184]	; (800b4cc <SendTxData+0xa0c>)
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	2b04      	cmp	r3, #4
 800b416:	d10a      	bne.n	800b42e <SendTxData+0x96e>
								&& esp_buffer[0] == 0x0A) {
 800b418:	4b2a      	ldr	r3, [pc, #168]	; (800b4c4 <SendTxData+0xa04>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b0a      	cmp	r3, #10
 800b41e:	d106      	bne.n	800b42e <SendTxData+0x96e>
							contador_caracter_esp++;
 800b420:	4b2a      	ldr	r3, [pc, #168]	; (800b4cc <SendTxData+0xa0c>)
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	b29a      	uxth	r2, r3
 800b428:	4b28      	ldr	r3, [pc, #160]	; (800b4cc <SendTxData+0xa0c>)
 800b42a:	801a      	strh	r2, [r3, #0]
 800b42c:	e08d      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 5
 800b42e:	4b27      	ldr	r3, [pc, #156]	; (800b4cc <SendTxData+0xa0c>)
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	2b05      	cmp	r3, #5
 800b434:	d10a      	bne.n	800b44c <SendTxData+0x98c>
								&& esp_buffer[0] == 0x0D) {
 800b436:	4b23      	ldr	r3, [pc, #140]	; (800b4c4 <SendTxData+0xa04>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	2b0d      	cmp	r3, #13
 800b43c:	d106      	bne.n	800b44c <SendTxData+0x98c>
							contador_caracter_esp++;
 800b43e:	4b23      	ldr	r3, [pc, #140]	; (800b4cc <SendTxData+0xa0c>)
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	b29a      	uxth	r2, r3
 800b446:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <SendTxData+0xa0c>)
 800b448:	801a      	strh	r2, [r3, #0]
 800b44a:	e07e      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 6
 800b44c:	4b1f      	ldr	r3, [pc, #124]	; (800b4cc <SendTxData+0xa0c>)
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	2b06      	cmp	r3, #6
 800b452:	d10a      	bne.n	800b46a <SendTxData+0x9aa>
								&& esp_buffer[0] == 0x0A) {
 800b454:	4b1b      	ldr	r3, [pc, #108]	; (800b4c4 <SendTxData+0xa04>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b0a      	cmp	r3, #10
 800b45a:	d106      	bne.n	800b46a <SendTxData+0x9aa>
							contador_caracter_esp++;
 800b45c:	4b1b      	ldr	r3, [pc, #108]	; (800b4cc <SendTxData+0xa0c>)
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	b29a      	uxth	r2, r3
 800b464:	4b19      	ldr	r3, [pc, #100]	; (800b4cc <SendTxData+0xa0c>)
 800b466:	801a      	strh	r2, [r3, #0]
 800b468:	e06f      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 7
 800b46a:	4b18      	ldr	r3, [pc, #96]	; (800b4cc <SendTxData+0xa0c>)
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	2b07      	cmp	r3, #7
 800b470:	d10a      	bne.n	800b488 <SendTxData+0x9c8>
								&& esp_buffer[0] == 'O') {
 800b472:	4b14      	ldr	r3, [pc, #80]	; (800b4c4 <SendTxData+0xa04>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b4f      	cmp	r3, #79	; 0x4f
 800b478:	d106      	bne.n	800b488 <SendTxData+0x9c8>
							contador_caracter_esp++;
 800b47a:	4b14      	ldr	r3, [pc, #80]	; (800b4cc <SendTxData+0xa0c>)
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <SendTxData+0xa0c>)
 800b484:	801a      	strh	r2, [r3, #0]
 800b486:	e060      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 8
 800b488:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <SendTxData+0xa0c>)
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d121      	bne.n	800b4d4 <SendTxData+0xa14>
								&& esp_buffer[0] == 'K') {
 800b490:	4b0c      	ldr	r3, [pc, #48]	; (800b4c4 <SendTxData+0xa04>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b4b      	cmp	r3, #75	; 0x4b
 800b496:	d11d      	bne.n	800b4d4 <SendTxData+0xa14>
							contador_caracter_esp++;
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <SendTxData+0xa0c>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <SendTxData+0xa0c>)
 800b4a2:	801a      	strh	r2, [r3, #0]
 800b4a4:	e051      	b.n	800b54a <SendTxData+0xa8a>
 800b4a6:	bf00      	nop
 800b4a8:	20000074 	.word	0x20000074
 800b4ac:	20000084 	.word	0x20000084
 800b4b0:	20000718 	.word	0x20000718
 800b4b4:	20000728 	.word	0x20000728
 800b4b8:	20000715 	.word	0x20000715
 800b4bc:	20000742 	.word	0x20000742
 800b4c0:	20000716 	.word	0x20000716
 800b4c4:	20000714 	.word	0x20000714
 800b4c8:	200003f4 	.word	0x200003f4
 800b4cc:	20000712 	.word	0x20000712
 800b4d0:	08020100 	.word	0x08020100
						} else if (contador_caracter_esp == 9
 800b4d4:	4b8a      	ldr	r3, [pc, #552]	; (800b700 <SendTxData+0xc40>)
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	2b09      	cmp	r3, #9
 800b4da:	d10a      	bne.n	800b4f2 <SendTxData+0xa32>
								&& esp_buffer[0] == 0x0D) {
 800b4dc:	4b89      	ldr	r3, [pc, #548]	; (800b704 <SendTxData+0xc44>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	2b0d      	cmp	r3, #13
 800b4e2:	d106      	bne.n	800b4f2 <SendTxData+0xa32>
							contador_caracter_esp++;
 800b4e4:	4b86      	ldr	r3, [pc, #536]	; (800b700 <SendTxData+0xc40>)
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	4b84      	ldr	r3, [pc, #528]	; (800b700 <SendTxData+0xc40>)
 800b4ee:	801a      	strh	r2, [r3, #0]
 800b4f0:	e02b      	b.n	800b54a <SendTxData+0xa8a>
						} else if (contador_caracter_esp == 10
 800b4f2:	4b83      	ldr	r3, [pc, #524]	; (800b700 <SendTxData+0xc40>)
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	2b0a      	cmp	r3, #10
 800b4f8:	d124      	bne.n	800b544 <SendTxData+0xa84>
								&& esp_buffer[0] == 0x0A) {
 800b4fa:	4b82      	ldr	r3, [pc, #520]	; (800b704 <SendTxData+0xc44>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	2b0a      	cmp	r3, #10
 800b500:	d120      	bne.n	800b544 <SendTxData+0xa84>
							contador_caracter_esp = 0;
 800b502:	4b7f      	ldr	r3, [pc, #508]	; (800b700 <SendTxData+0xc40>)
 800b504:	2200      	movs	r2, #0
 800b506:	801a      	strh	r2, [r3, #0]
							estado_esp = 2;
 800b508:	4b7f      	ldr	r3, [pc, #508]	; (800b708 <SendTxData+0xc48>)
 800b50a:	2202      	movs	r2, #2
 800b50c:	801a      	strh	r2, [r3, #0]
							//Espero 1 segundo
							tiempoParcial = SysTimeGet();
 800b50e:	463b      	mov	r3, r7
 800b510:	4618      	mov	r0, r3
 800b512:	f010 fc15 	bl	801bd40 <SysTimeGet>
 800b516:	f107 030c 	add.w	r3, r7, #12
 800b51a:	463a      	mov	r2, r7
 800b51c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b520:	e883 0003 	stmia.w	r3, {r0, r1}
							while (SysTimeGet().Seconds - tiempoParcial.Seconds
 800b524:	bf00      	nop
 800b526:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b52a:	4618      	mov	r0, r3
 800b52c:	f010 fc08 	bl	801bd40 <SysTimeGet>
 800b530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	429a      	cmp	r2, r3
 800b536:	d0f6      	beq.n	800b526 <SendTxData+0xa66>
									< 1) {
							}
							HAL_UART_Transmit_IT(&huart1, "AT+CWMODE=1\r\n",
 800b538:	220d      	movs	r2, #13
 800b53a:	4974      	ldr	r1, [pc, #464]	; (800b70c <SendTxData+0xc4c>)
 800b53c:	4874      	ldr	r0, [pc, #464]	; (800b710 <SendTxData+0xc50>)
 800b53e:	f7fc fc63 	bl	8007e08 <HAL_UART_Transmit_IT>
 800b542:	e002      	b.n	800b54a <SendTxData+0xa8a>
									13);
						} else {

							estado_esp = 0;
 800b544:	4b70      	ldr	r3, [pc, #448]	; (800b708 <SendTxData+0xc48>)
 800b546:	2200      	movs	r2, #0
 800b548:	801a      	strh	r2, [r3, #0]
						}
						esp_byte_recibido = 0;
 800b54a:	4b72      	ldr	r3, [pc, #456]	; (800b714 <SendTxData+0xc54>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Receive_IT(&huart1, (uint8_t*) esp_buffer, 1);
 800b550:	2201      	movs	r2, #1
 800b552:	496c      	ldr	r1, [pc, #432]	; (800b704 <SendTxData+0xc44>)
 800b554:	486e      	ldr	r0, [pc, #440]	; (800b710 <SendTxData+0xc50>)
 800b556:	f7fc fcff 	bl	8007f58 <HAL_UART_Receive_IT>
 800b55a:	f001 b81f 	b.w	800c59c <SendTxData+0x1adc>
					} else if (SysTimeGet().Seconds - tiempoParcial.Seconds
 800b55e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b562:	4618      	mov	r0, r3
 800b564:	f010 fbec 	bl	801bd40 <SysTimeGet>
 800b568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	2b01      	cmp	r3, #1
 800b570:	f241 8014 	bls.w	800c59c <SendTxData+0x1adc>
							> 1) {
						tiempoParcial = SysTimeGet();
 800b574:	463b      	mov	r3, r7
 800b576:	4618      	mov	r0, r3
 800b578:	f010 fbe2 	bl	801bd40 <SysTimeGet>
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	463a      	mov	r2, r7
 800b582:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b586:	e883 0003 	stmia.w	r3, {r0, r1}
						estado_esp = 0;
 800b58a:	4b5f      	ldr	r3, [pc, #380]	; (800b708 <SendTxData+0xc48>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	801a      	strh	r2, [r3, #0]
					}
					break;
 800b590:	f001 b804 	b.w	800c59c <SendTxData+0x1adc>
				case 2:
					if (esp_byte_recibido == 1) {
 800b594:	4b5f      	ldr	r3, [pc, #380]	; (800b714 <SendTxData+0xc54>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	f040 816a 	bne.w	800b874 <SendTxData+0xdb4>
						tiempoParcial = SysTimeGet();
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f010 fbcc 	bl	801bd40 <SysTimeGet>
 800b5a8:	f107 030c 	add.w	r3, r7, #12
 800b5ac:	463a      	mov	r2, r7
 800b5ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b5b2:	e883 0003 	stmia.w	r3, {r0, r1}
						if (contador_caracter_esp == 0
 800b5b6:	4b52      	ldr	r3, [pc, #328]	; (800b700 <SendTxData+0xc40>)
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <SendTxData+0xb14>
								&& esp_buffer[0] == 'A') {
 800b5be:	4b51      	ldr	r3, [pc, #324]	; (800b704 <SendTxData+0xc44>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b41      	cmp	r3, #65	; 0x41
 800b5c4:	d106      	bne.n	800b5d4 <SendTxData+0xb14>
							contador_caracter_esp++;
 800b5c6:	4b4e      	ldr	r3, [pc, #312]	; (800b700 <SendTxData+0xc40>)
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	4b4c      	ldr	r3, [pc, #304]	; (800b700 <SendTxData+0xc40>)
 800b5d0:	801a      	strh	r2, [r3, #0]
 800b5d2:	e145      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 1
 800b5d4:	4b4a      	ldr	r3, [pc, #296]	; (800b700 <SendTxData+0xc40>)
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d10a      	bne.n	800b5f2 <SendTxData+0xb32>
								&& esp_buffer[0] == 'T') {
 800b5dc:	4b49      	ldr	r3, [pc, #292]	; (800b704 <SendTxData+0xc44>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b54      	cmp	r3, #84	; 0x54
 800b5e2:	d106      	bne.n	800b5f2 <SendTxData+0xb32>
							contador_caracter_esp++;
 800b5e4:	4b46      	ldr	r3, [pc, #280]	; (800b700 <SendTxData+0xc40>)
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	4b44      	ldr	r3, [pc, #272]	; (800b700 <SendTxData+0xc40>)
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	e136      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 2
 800b5f2:	4b43      	ldr	r3, [pc, #268]	; (800b700 <SendTxData+0xc40>)
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10a      	bne.n	800b610 <SendTxData+0xb50>
								&& esp_buffer[0] == '+') {
 800b5fa:	4b42      	ldr	r3, [pc, #264]	; (800b704 <SendTxData+0xc44>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2b2b      	cmp	r3, #43	; 0x2b
 800b600:	d106      	bne.n	800b610 <SendTxData+0xb50>
							contador_caracter_esp++;
 800b602:	4b3f      	ldr	r3, [pc, #252]	; (800b700 <SendTxData+0xc40>)
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	4b3d      	ldr	r3, [pc, #244]	; (800b700 <SendTxData+0xc40>)
 800b60c:	801a      	strh	r2, [r3, #0]
 800b60e:	e127      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 3
 800b610:	4b3b      	ldr	r3, [pc, #236]	; (800b700 <SendTxData+0xc40>)
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	2b03      	cmp	r3, #3
 800b616:	d10a      	bne.n	800b62e <SendTxData+0xb6e>
								&& esp_buffer[0] == 'C') {
 800b618:	4b3a      	ldr	r3, [pc, #232]	; (800b704 <SendTxData+0xc44>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b43      	cmp	r3, #67	; 0x43
 800b61e:	d106      	bne.n	800b62e <SendTxData+0xb6e>
							contador_caracter_esp++;
 800b620:	4b37      	ldr	r3, [pc, #220]	; (800b700 <SendTxData+0xc40>)
 800b622:	881b      	ldrh	r3, [r3, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	b29a      	uxth	r2, r3
 800b628:	4b35      	ldr	r3, [pc, #212]	; (800b700 <SendTxData+0xc40>)
 800b62a:	801a      	strh	r2, [r3, #0]
 800b62c:	e118      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 4
 800b62e:	4b34      	ldr	r3, [pc, #208]	; (800b700 <SendTxData+0xc40>)
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	2b04      	cmp	r3, #4
 800b634:	d10a      	bne.n	800b64c <SendTxData+0xb8c>
								&& esp_buffer[0] == 'W') {
 800b636:	4b33      	ldr	r3, [pc, #204]	; (800b704 <SendTxData+0xc44>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b57      	cmp	r3, #87	; 0x57
 800b63c:	d106      	bne.n	800b64c <SendTxData+0xb8c>
							contador_caracter_esp++;
 800b63e:	4b30      	ldr	r3, [pc, #192]	; (800b700 <SendTxData+0xc40>)
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	3301      	adds	r3, #1
 800b644:	b29a      	uxth	r2, r3
 800b646:	4b2e      	ldr	r3, [pc, #184]	; (800b700 <SendTxData+0xc40>)
 800b648:	801a      	strh	r2, [r3, #0]
 800b64a:	e109      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 5
 800b64c:	4b2c      	ldr	r3, [pc, #176]	; (800b700 <SendTxData+0xc40>)
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	2b05      	cmp	r3, #5
 800b652:	d10a      	bne.n	800b66a <SendTxData+0xbaa>
								&& esp_buffer[0] == 'M') {
 800b654:	4b2b      	ldr	r3, [pc, #172]	; (800b704 <SendTxData+0xc44>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b4d      	cmp	r3, #77	; 0x4d
 800b65a:	d106      	bne.n	800b66a <SendTxData+0xbaa>
							contador_caracter_esp++;
 800b65c:	4b28      	ldr	r3, [pc, #160]	; (800b700 <SendTxData+0xc40>)
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	3301      	adds	r3, #1
 800b662:	b29a      	uxth	r2, r3
 800b664:	4b26      	ldr	r3, [pc, #152]	; (800b700 <SendTxData+0xc40>)
 800b666:	801a      	strh	r2, [r3, #0]
 800b668:	e0fa      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 6
 800b66a:	4b25      	ldr	r3, [pc, #148]	; (800b700 <SendTxData+0xc40>)
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	2b06      	cmp	r3, #6
 800b670:	d10a      	bne.n	800b688 <SendTxData+0xbc8>
								&& esp_buffer[0] == 'O') {
 800b672:	4b24      	ldr	r3, [pc, #144]	; (800b704 <SendTxData+0xc44>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b4f      	cmp	r3, #79	; 0x4f
 800b678:	d106      	bne.n	800b688 <SendTxData+0xbc8>
							contador_caracter_esp++;
 800b67a:	4b21      	ldr	r3, [pc, #132]	; (800b700 <SendTxData+0xc40>)
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	3301      	adds	r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	4b1f      	ldr	r3, [pc, #124]	; (800b700 <SendTxData+0xc40>)
 800b684:	801a      	strh	r2, [r3, #0]
 800b686:	e0eb      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 7
 800b688:	4b1d      	ldr	r3, [pc, #116]	; (800b700 <SendTxData+0xc40>)
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	2b07      	cmp	r3, #7
 800b68e:	d10a      	bne.n	800b6a6 <SendTxData+0xbe6>
								&& esp_buffer[0] == 'D') {
 800b690:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <SendTxData+0xc44>)
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2b44      	cmp	r3, #68	; 0x44
 800b696:	d106      	bne.n	800b6a6 <SendTxData+0xbe6>
							contador_caracter_esp++;
 800b698:	4b19      	ldr	r3, [pc, #100]	; (800b700 <SendTxData+0xc40>)
 800b69a:	881b      	ldrh	r3, [r3, #0]
 800b69c:	3301      	adds	r3, #1
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	4b17      	ldr	r3, [pc, #92]	; (800b700 <SendTxData+0xc40>)
 800b6a2:	801a      	strh	r2, [r3, #0]
 800b6a4:	e0dc      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 8
 800b6a6:	4b16      	ldr	r3, [pc, #88]	; (800b700 <SendTxData+0xc40>)
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	2b08      	cmp	r3, #8
 800b6ac:	d10a      	bne.n	800b6c4 <SendTxData+0xc04>
								&& esp_buffer[0] == 'E') {
 800b6ae:	4b15      	ldr	r3, [pc, #84]	; (800b704 <SendTxData+0xc44>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b45      	cmp	r3, #69	; 0x45
 800b6b4:	d106      	bne.n	800b6c4 <SendTxData+0xc04>
							contador_caracter_esp++;
 800b6b6:	4b12      	ldr	r3, [pc, #72]	; (800b700 <SendTxData+0xc40>)
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	4b10      	ldr	r3, [pc, #64]	; (800b700 <SendTxData+0xc40>)
 800b6c0:	801a      	strh	r2, [r3, #0]
 800b6c2:	e0cd      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 9
 800b6c4:	4b0e      	ldr	r3, [pc, #56]	; (800b700 <SendTxData+0xc40>)
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	2b09      	cmp	r3, #9
 800b6ca:	d10a      	bne.n	800b6e2 <SendTxData+0xc22>
								&& esp_buffer[0] == '=') {
 800b6cc:	4b0d      	ldr	r3, [pc, #52]	; (800b704 <SendTxData+0xc44>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b3d      	cmp	r3, #61	; 0x3d
 800b6d2:	d106      	bne.n	800b6e2 <SendTxData+0xc22>
							contador_caracter_esp++;
 800b6d4:	4b0a      	ldr	r3, [pc, #40]	; (800b700 <SendTxData+0xc40>)
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	4b08      	ldr	r3, [pc, #32]	; (800b700 <SendTxData+0xc40>)
 800b6de:	801a      	strh	r2, [r3, #0]
 800b6e0:	e0be      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 10
 800b6e2:	4b07      	ldr	r3, [pc, #28]	; (800b700 <SendTxData+0xc40>)
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	2b0a      	cmp	r3, #10
 800b6e8:	d116      	bne.n	800b718 <SendTxData+0xc58>
								&& esp_buffer[0] == '1') {
 800b6ea:	4b06      	ldr	r3, [pc, #24]	; (800b704 <SendTxData+0xc44>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b31      	cmp	r3, #49	; 0x31
 800b6f0:	d112      	bne.n	800b718 <SendTxData+0xc58>
							contador_caracter_esp++;
 800b6f2:	4b03      	ldr	r3, [pc, #12]	; (800b700 <SendTxData+0xc40>)
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	4b01      	ldr	r3, [pc, #4]	; (800b700 <SendTxData+0xc40>)
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	e0af      	b.n	800b860 <SendTxData+0xda0>
 800b700:	20000712 	.word	0x20000712
 800b704:	20000714 	.word	0x20000714
 800b708:	20000742 	.word	0x20000742
 800b70c:	08020108 	.word	0x08020108
 800b710:	200003f4 	.word	0x200003f4
 800b714:	20000716 	.word	0x20000716
						} else if (contador_caracter_esp == 11
 800b718:	4b8a      	ldr	r3, [pc, #552]	; (800b944 <SendTxData+0xe84>)
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	2b0b      	cmp	r3, #11
 800b71e:	d10a      	bne.n	800b736 <SendTxData+0xc76>
								&& esp_buffer[0] == 0x0D) {
 800b720:	4b89      	ldr	r3, [pc, #548]	; (800b948 <SendTxData+0xe88>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b0d      	cmp	r3, #13
 800b726:	d106      	bne.n	800b736 <SendTxData+0xc76>
							contador_caracter_esp++;
 800b728:	4b86      	ldr	r3, [pc, #536]	; (800b944 <SendTxData+0xe84>)
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	4b84      	ldr	r3, [pc, #528]	; (800b944 <SendTxData+0xe84>)
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e094      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 12
 800b736:	4b83      	ldr	r3, [pc, #524]	; (800b944 <SendTxData+0xe84>)
 800b738:	881b      	ldrh	r3, [r3, #0]
 800b73a:	2b0c      	cmp	r3, #12
 800b73c:	d10a      	bne.n	800b754 <SendTxData+0xc94>
								&& esp_buffer[0] == 0x0D) {
 800b73e:	4b82      	ldr	r3, [pc, #520]	; (800b948 <SendTxData+0xe88>)
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	2b0d      	cmp	r3, #13
 800b744:	d106      	bne.n	800b754 <SendTxData+0xc94>
							contador_caracter_esp++;
 800b746:	4b7f      	ldr	r3, [pc, #508]	; (800b944 <SendTxData+0xe84>)
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	4b7d      	ldr	r3, [pc, #500]	; (800b944 <SendTxData+0xe84>)
 800b750:	801a      	strh	r2, [r3, #0]
 800b752:	e085      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 13
 800b754:	4b7b      	ldr	r3, [pc, #492]	; (800b944 <SendTxData+0xe84>)
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	2b0d      	cmp	r3, #13
 800b75a:	d10a      	bne.n	800b772 <SendTxData+0xcb2>
								&& esp_buffer[0] == 0x0A) {
 800b75c:	4b7a      	ldr	r3, [pc, #488]	; (800b948 <SendTxData+0xe88>)
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b0a      	cmp	r3, #10
 800b762:	d106      	bne.n	800b772 <SendTxData+0xcb2>
							contador_caracter_esp++;
 800b764:	4b77      	ldr	r3, [pc, #476]	; (800b944 <SendTxData+0xe84>)
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	4b75      	ldr	r3, [pc, #468]	; (800b944 <SendTxData+0xe84>)
 800b76e:	801a      	strh	r2, [r3, #0]
 800b770:	e076      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 14
 800b772:	4b74      	ldr	r3, [pc, #464]	; (800b944 <SendTxData+0xe84>)
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	2b0e      	cmp	r3, #14
 800b778:	d10a      	bne.n	800b790 <SendTxData+0xcd0>
								&& esp_buffer[0] == 0x0D) {
 800b77a:	4b73      	ldr	r3, [pc, #460]	; (800b948 <SendTxData+0xe88>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b0d      	cmp	r3, #13
 800b780:	d106      	bne.n	800b790 <SendTxData+0xcd0>
							contador_caracter_esp++;
 800b782:	4b70      	ldr	r3, [pc, #448]	; (800b944 <SendTxData+0xe84>)
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	3301      	adds	r3, #1
 800b788:	b29a      	uxth	r2, r3
 800b78a:	4b6e      	ldr	r3, [pc, #440]	; (800b944 <SendTxData+0xe84>)
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	e067      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 15
 800b790:	4b6c      	ldr	r3, [pc, #432]	; (800b944 <SendTxData+0xe84>)
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	2b0f      	cmp	r3, #15
 800b796:	d10a      	bne.n	800b7ae <SendTxData+0xcee>
								&& esp_buffer[0] == 0x0A) {
 800b798:	4b6b      	ldr	r3, [pc, #428]	; (800b948 <SendTxData+0xe88>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b0a      	cmp	r3, #10
 800b79e:	d106      	bne.n	800b7ae <SendTxData+0xcee>
							contador_caracter_esp++;
 800b7a0:	4b68      	ldr	r3, [pc, #416]	; (800b944 <SendTxData+0xe84>)
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	4b66      	ldr	r3, [pc, #408]	; (800b944 <SendTxData+0xe84>)
 800b7aa:	801a      	strh	r2, [r3, #0]
 800b7ac:	e058      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 16
 800b7ae:	4b65      	ldr	r3, [pc, #404]	; (800b944 <SendTxData+0xe84>)
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	2b10      	cmp	r3, #16
 800b7b4:	d10a      	bne.n	800b7cc <SendTxData+0xd0c>
								&& esp_buffer[0] == 'O') {
 800b7b6:	4b64      	ldr	r3, [pc, #400]	; (800b948 <SendTxData+0xe88>)
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b4f      	cmp	r3, #79	; 0x4f
 800b7bc:	d106      	bne.n	800b7cc <SendTxData+0xd0c>
							contador_caracter_esp++;
 800b7be:	4b61      	ldr	r3, [pc, #388]	; (800b944 <SendTxData+0xe84>)
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	4b5f      	ldr	r3, [pc, #380]	; (800b944 <SendTxData+0xe84>)
 800b7c8:	801a      	strh	r2, [r3, #0]
 800b7ca:	e049      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 17
 800b7cc:	4b5d      	ldr	r3, [pc, #372]	; (800b944 <SendTxData+0xe84>)
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	2b11      	cmp	r3, #17
 800b7d2:	d10a      	bne.n	800b7ea <SendTxData+0xd2a>
								&& esp_buffer[0] == 'K') {
 800b7d4:	4b5c      	ldr	r3, [pc, #368]	; (800b948 <SendTxData+0xe88>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b4b      	cmp	r3, #75	; 0x4b
 800b7da:	d106      	bne.n	800b7ea <SendTxData+0xd2a>
							contador_caracter_esp++;
 800b7dc:	4b59      	ldr	r3, [pc, #356]	; (800b944 <SendTxData+0xe84>)
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	4b57      	ldr	r3, [pc, #348]	; (800b944 <SendTxData+0xe84>)
 800b7e6:	801a      	strh	r2, [r3, #0]
 800b7e8:	e03a      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 18
 800b7ea:	4b56      	ldr	r3, [pc, #344]	; (800b944 <SendTxData+0xe84>)
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	2b12      	cmp	r3, #18
 800b7f0:	d10a      	bne.n	800b808 <SendTxData+0xd48>
								&& esp_buffer[0] == 0x0D) {
 800b7f2:	4b55      	ldr	r3, [pc, #340]	; (800b948 <SendTxData+0xe88>)
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	2b0d      	cmp	r3, #13
 800b7f8:	d106      	bne.n	800b808 <SendTxData+0xd48>
							contador_caracter_esp++;
 800b7fa:	4b52      	ldr	r3, [pc, #328]	; (800b944 <SendTxData+0xe84>)
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	b29a      	uxth	r2, r3
 800b802:	4b50      	ldr	r3, [pc, #320]	; (800b944 <SendTxData+0xe84>)
 800b804:	801a      	strh	r2, [r3, #0]
 800b806:	e02b      	b.n	800b860 <SendTxData+0xda0>
						} else if (contador_caracter_esp == 19
 800b808:	4b4e      	ldr	r3, [pc, #312]	; (800b944 <SendTxData+0xe84>)
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	2b13      	cmp	r3, #19
 800b80e:	d124      	bne.n	800b85a <SendTxData+0xd9a>
								&& esp_buffer[0] == 0x0A) {
 800b810:	4b4d      	ldr	r3, [pc, #308]	; (800b948 <SendTxData+0xe88>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b0a      	cmp	r3, #10
 800b816:	d120      	bne.n	800b85a <SendTxData+0xd9a>
							contador_caracter_esp = 0;
 800b818:	4b4a      	ldr	r3, [pc, #296]	; (800b944 <SendTxData+0xe84>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	801a      	strh	r2, [r3, #0]
							estado_esp = 3;
 800b81e:	4b4b      	ldr	r3, [pc, #300]	; (800b94c <SendTxData+0xe8c>)
 800b820:	2203      	movs	r2, #3
 800b822:	801a      	strh	r2, [r3, #0]
							//Espero 1 segundo
							tiempoParcial = SysTimeGet();
 800b824:	463b      	mov	r3, r7
 800b826:	4618      	mov	r0, r3
 800b828:	f010 fa8a 	bl	801bd40 <SysTimeGet>
 800b82c:	f107 030c 	add.w	r3, r7, #12
 800b830:	463a      	mov	r2, r7
 800b832:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b836:	e883 0003 	stmia.w	r3, {r0, r1}
							while (SysTimeGet().Seconds - tiempoParcial.Seconds
 800b83a:	bf00      	nop
 800b83c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b840:	4618      	mov	r0, r3
 800b842:	f010 fa7d 	bl	801bd40 <SysTimeGet>
 800b846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d0f6      	beq.n	800b83c <SendTxData+0xd7c>
									< 1) {
							}
							HAL_UART_Transmit_IT(&huart1, "AT+CWLAPOPT=1,8\r\n",
 800b84e:	2211      	movs	r2, #17
 800b850:	493f      	ldr	r1, [pc, #252]	; (800b950 <SendTxData+0xe90>)
 800b852:	4840      	ldr	r0, [pc, #256]	; (800b954 <SendTxData+0xe94>)
 800b854:	f7fc fad8 	bl	8007e08 <HAL_UART_Transmit_IT>
 800b858:	e002      	b.n	800b860 <SendTxData+0xda0>
									17);
						} else {
							estado_esp = 0;
 800b85a:	4b3c      	ldr	r3, [pc, #240]	; (800b94c <SendTxData+0xe8c>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	801a      	strh	r2, [r3, #0]
						}
						esp_byte_recibido = 0;
 800b860:	4b3d      	ldr	r3, [pc, #244]	; (800b958 <SendTxData+0xe98>)
 800b862:	2200      	movs	r2, #0
 800b864:	701a      	strb	r2, [r3, #0]
						HAL_UART_Receive_IT(&huart1, (uint8_t*) esp_buffer, 1);
 800b866:	2201      	movs	r2, #1
 800b868:	4937      	ldr	r1, [pc, #220]	; (800b948 <SendTxData+0xe88>)
 800b86a:	483a      	ldr	r0, [pc, #232]	; (800b954 <SendTxData+0xe94>)
 800b86c:	f7fc fb74 	bl	8007f58 <HAL_UART_Receive_IT>
 800b870:	f000 be94 	b.w	800c59c <SendTxData+0x1adc>
					} else if (SysTimeGet().Seconds - tiempoParcial.Seconds
 800b874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b878:	4618      	mov	r0, r3
 800b87a:	f010 fa61 	bl	801bd40 <SysTimeGet>
 800b87e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	2b01      	cmp	r3, #1
 800b886:	f240 8689 	bls.w	800c59c <SendTxData+0x1adc>
							> 1) {
						tiempoParcial = SysTimeGet();
 800b88a:	463b      	mov	r3, r7
 800b88c:	4618      	mov	r0, r3
 800b88e:	f010 fa57 	bl	801bd40 <SysTimeGet>
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	463a      	mov	r2, r7
 800b898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b89c:	e883 0003 	stmia.w	r3, {r0, r1}
						estado_esp = 0;
 800b8a0:	4b2a      	ldr	r3, [pc, #168]	; (800b94c <SendTxData+0xe8c>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	801a      	strh	r2, [r3, #0]
					}
					break;
 800b8a6:	f000 be79 	b.w	800c59c <SendTxData+0x1adc>
				case 3:
					if (esp_byte_recibido == 1) {
 800b8aa:	4b2b      	ldr	r3, [pc, #172]	; (800b958 <SendTxData+0xe98>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	f040 81ac 	bne.w	800bc0e <SendTxData+0x114e>
						tiempoParcial = SysTimeGet();
 800b8b6:	463b      	mov	r3, r7
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f010 fa41 	bl	801bd40 <SysTimeGet>
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	463a      	mov	r2, r7
 800b8c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b8c8:	e883 0003 	stmia.w	r3, {r0, r1}
						if (contador_caracter_esp == 0
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	; (800b944 <SendTxData+0xe84>)
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <SendTxData+0xe2a>
								&& esp_buffer[0] == 'A') {
 800b8d4:	4b1c      	ldr	r3, [pc, #112]	; (800b948 <SendTxData+0xe88>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b41      	cmp	r3, #65	; 0x41
 800b8da:	d106      	bne.n	800b8ea <SendTxData+0xe2a>
							contador_caracter_esp++;
 800b8dc:	4b19      	ldr	r3, [pc, #100]	; (800b944 <SendTxData+0xe84>)
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	4b17      	ldr	r3, [pc, #92]	; (800b944 <SendTxData+0xe84>)
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	e187      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 1
 800b8ea:	4b16      	ldr	r3, [pc, #88]	; (800b944 <SendTxData+0xe84>)
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d10a      	bne.n	800b908 <SendTxData+0xe48>
								&& esp_buffer[0] == 'T') {
 800b8f2:	4b15      	ldr	r3, [pc, #84]	; (800b948 <SendTxData+0xe88>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b54      	cmp	r3, #84	; 0x54
 800b8f8:	d106      	bne.n	800b908 <SendTxData+0xe48>
							contador_caracter_esp++;
 800b8fa:	4b12      	ldr	r3, [pc, #72]	; (800b944 <SendTxData+0xe84>)
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	3301      	adds	r3, #1
 800b900:	b29a      	uxth	r2, r3
 800b902:	4b10      	ldr	r3, [pc, #64]	; (800b944 <SendTxData+0xe84>)
 800b904:	801a      	strh	r2, [r3, #0]
 800b906:	e178      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 2
 800b908:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <SendTxData+0xe84>)
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d10a      	bne.n	800b926 <SendTxData+0xe66>
								&& esp_buffer[0] == '+') {
 800b910:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <SendTxData+0xe88>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b2b      	cmp	r3, #43	; 0x2b
 800b916:	d106      	bne.n	800b926 <SendTxData+0xe66>
							contador_caracter_esp++;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <SendTxData+0xe84>)
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	3301      	adds	r3, #1
 800b91e:	b29a      	uxth	r2, r3
 800b920:	4b08      	ldr	r3, [pc, #32]	; (800b944 <SendTxData+0xe84>)
 800b922:	801a      	strh	r2, [r3, #0]
 800b924:	e169      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 3
 800b926:	4b07      	ldr	r3, [pc, #28]	; (800b944 <SendTxData+0xe84>)
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d116      	bne.n	800b95c <SendTxData+0xe9c>
								&& esp_buffer[0] == 'C') {
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <SendTxData+0xe88>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	2b43      	cmp	r3, #67	; 0x43
 800b934:	d112      	bne.n	800b95c <SendTxData+0xe9c>
							contador_caracter_esp++;
 800b936:	4b03      	ldr	r3, [pc, #12]	; (800b944 <SendTxData+0xe84>)
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	3301      	adds	r3, #1
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	4b01      	ldr	r3, [pc, #4]	; (800b944 <SendTxData+0xe84>)
 800b940:	801a      	strh	r2, [r3, #0]
 800b942:	e15a      	b.n	800bbfa <SendTxData+0x113a>
 800b944:	20000712 	.word	0x20000712
 800b948:	20000714 	.word	0x20000714
 800b94c:	20000742 	.word	0x20000742
 800b950:	08020118 	.word	0x08020118
 800b954:	200003f4 	.word	0x200003f4
 800b958:	20000716 	.word	0x20000716
						} else if (contador_caracter_esp == 4
 800b95c:	4b7f      	ldr	r3, [pc, #508]	; (800bb5c <SendTxData+0x109c>)
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	2b04      	cmp	r3, #4
 800b962:	d10a      	bne.n	800b97a <SendTxData+0xeba>
								&& esp_buffer[0] == 'W') {
 800b964:	4b7e      	ldr	r3, [pc, #504]	; (800bb60 <SendTxData+0x10a0>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	2b57      	cmp	r3, #87	; 0x57
 800b96a:	d106      	bne.n	800b97a <SendTxData+0xeba>
							contador_caracter_esp++;
 800b96c:	4b7b      	ldr	r3, [pc, #492]	; (800bb5c <SendTxData+0x109c>)
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	3301      	adds	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	4b79      	ldr	r3, [pc, #484]	; (800bb5c <SendTxData+0x109c>)
 800b976:	801a      	strh	r2, [r3, #0]
 800b978:	e13f      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 5
 800b97a:	4b78      	ldr	r3, [pc, #480]	; (800bb5c <SendTxData+0x109c>)
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	2b05      	cmp	r3, #5
 800b980:	d10a      	bne.n	800b998 <SendTxData+0xed8>
								&& esp_buffer[0] == 'L') {
 800b982:	4b77      	ldr	r3, [pc, #476]	; (800bb60 <SendTxData+0x10a0>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	2b4c      	cmp	r3, #76	; 0x4c
 800b988:	d106      	bne.n	800b998 <SendTxData+0xed8>
							contador_caracter_esp++;
 800b98a:	4b74      	ldr	r3, [pc, #464]	; (800bb5c <SendTxData+0x109c>)
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	3301      	adds	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	4b72      	ldr	r3, [pc, #456]	; (800bb5c <SendTxData+0x109c>)
 800b994:	801a      	strh	r2, [r3, #0]
 800b996:	e130      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 6
 800b998:	4b70      	ldr	r3, [pc, #448]	; (800bb5c <SendTxData+0x109c>)
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	2b06      	cmp	r3, #6
 800b99e:	d10a      	bne.n	800b9b6 <SendTxData+0xef6>
								&& esp_buffer[0] == 'A') {
 800b9a0:	4b6f      	ldr	r3, [pc, #444]	; (800bb60 <SendTxData+0x10a0>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b41      	cmp	r3, #65	; 0x41
 800b9a6:	d106      	bne.n	800b9b6 <SendTxData+0xef6>
							contador_caracter_esp++;
 800b9a8:	4b6c      	ldr	r3, [pc, #432]	; (800bb5c <SendTxData+0x109c>)
 800b9aa:	881b      	ldrh	r3, [r3, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	4b6a      	ldr	r3, [pc, #424]	; (800bb5c <SendTxData+0x109c>)
 800b9b2:	801a      	strh	r2, [r3, #0]
 800b9b4:	e121      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 7
 800b9b6:	4b69      	ldr	r3, [pc, #420]	; (800bb5c <SendTxData+0x109c>)
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	2b07      	cmp	r3, #7
 800b9bc:	d10a      	bne.n	800b9d4 <SendTxData+0xf14>
								&& esp_buffer[0] == 'P') {
 800b9be:	4b68      	ldr	r3, [pc, #416]	; (800bb60 <SendTxData+0x10a0>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b50      	cmp	r3, #80	; 0x50
 800b9c4:	d106      	bne.n	800b9d4 <SendTxData+0xf14>
							contador_caracter_esp++;
 800b9c6:	4b65      	ldr	r3, [pc, #404]	; (800bb5c <SendTxData+0x109c>)
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	4b63      	ldr	r3, [pc, #396]	; (800bb5c <SendTxData+0x109c>)
 800b9d0:	801a      	strh	r2, [r3, #0]
 800b9d2:	e112      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 8
 800b9d4:	4b61      	ldr	r3, [pc, #388]	; (800bb5c <SendTxData+0x109c>)
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d10a      	bne.n	800b9f2 <SendTxData+0xf32>
								&& esp_buffer[0] == 'O') {
 800b9dc:	4b60      	ldr	r3, [pc, #384]	; (800bb60 <SendTxData+0x10a0>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b4f      	cmp	r3, #79	; 0x4f
 800b9e2:	d106      	bne.n	800b9f2 <SendTxData+0xf32>
							contador_caracter_esp++;
 800b9e4:	4b5d      	ldr	r3, [pc, #372]	; (800bb5c <SendTxData+0x109c>)
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	4b5b      	ldr	r3, [pc, #364]	; (800bb5c <SendTxData+0x109c>)
 800b9ee:	801a      	strh	r2, [r3, #0]
 800b9f0:	e103      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 9
 800b9f2:	4b5a      	ldr	r3, [pc, #360]	; (800bb5c <SendTxData+0x109c>)
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	2b09      	cmp	r3, #9
 800b9f8:	d10a      	bne.n	800ba10 <SendTxData+0xf50>
								&& esp_buffer[0] == 'P') {
 800b9fa:	4b59      	ldr	r3, [pc, #356]	; (800bb60 <SendTxData+0x10a0>)
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	2b50      	cmp	r3, #80	; 0x50
 800ba00:	d106      	bne.n	800ba10 <SendTxData+0xf50>
							contador_caracter_esp++;
 800ba02:	4b56      	ldr	r3, [pc, #344]	; (800bb5c <SendTxData+0x109c>)
 800ba04:	881b      	ldrh	r3, [r3, #0]
 800ba06:	3301      	adds	r3, #1
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	4b54      	ldr	r3, [pc, #336]	; (800bb5c <SendTxData+0x109c>)
 800ba0c:	801a      	strh	r2, [r3, #0]
 800ba0e:	e0f4      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 10
 800ba10:	4b52      	ldr	r3, [pc, #328]	; (800bb5c <SendTxData+0x109c>)
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	2b0a      	cmp	r3, #10
 800ba16:	d10a      	bne.n	800ba2e <SendTxData+0xf6e>
								&& esp_buffer[0] == 'T') {
 800ba18:	4b51      	ldr	r3, [pc, #324]	; (800bb60 <SendTxData+0x10a0>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b54      	cmp	r3, #84	; 0x54
 800ba1e:	d106      	bne.n	800ba2e <SendTxData+0xf6e>
							contador_caracter_esp++;
 800ba20:	4b4e      	ldr	r3, [pc, #312]	; (800bb5c <SendTxData+0x109c>)
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	3301      	adds	r3, #1
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	4b4c      	ldr	r3, [pc, #304]	; (800bb5c <SendTxData+0x109c>)
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	e0e5      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 11
 800ba2e:	4b4b      	ldr	r3, [pc, #300]	; (800bb5c <SendTxData+0x109c>)
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	2b0b      	cmp	r3, #11
 800ba34:	d10a      	bne.n	800ba4c <SendTxData+0xf8c>
								&& esp_buffer[0] == '=') {
 800ba36:	4b4a      	ldr	r3, [pc, #296]	; (800bb60 <SendTxData+0x10a0>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b3d      	cmp	r3, #61	; 0x3d
 800ba3c:	d106      	bne.n	800ba4c <SendTxData+0xf8c>
							contador_caracter_esp++;
 800ba3e:	4b47      	ldr	r3, [pc, #284]	; (800bb5c <SendTxData+0x109c>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	4b45      	ldr	r3, [pc, #276]	; (800bb5c <SendTxData+0x109c>)
 800ba48:	801a      	strh	r2, [r3, #0]
 800ba4a:	e0d6      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 12
 800ba4c:	4b43      	ldr	r3, [pc, #268]	; (800bb5c <SendTxData+0x109c>)
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	2b0c      	cmp	r3, #12
 800ba52:	d10a      	bne.n	800ba6a <SendTxData+0xfaa>
								&& esp_buffer[0] == '1') {
 800ba54:	4b42      	ldr	r3, [pc, #264]	; (800bb60 <SendTxData+0x10a0>)
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b31      	cmp	r3, #49	; 0x31
 800ba5a:	d106      	bne.n	800ba6a <SendTxData+0xfaa>
							contador_caracter_esp++;
 800ba5c:	4b3f      	ldr	r3, [pc, #252]	; (800bb5c <SendTxData+0x109c>)
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	3301      	adds	r3, #1
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	4b3d      	ldr	r3, [pc, #244]	; (800bb5c <SendTxData+0x109c>)
 800ba66:	801a      	strh	r2, [r3, #0]
 800ba68:	e0c7      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 13
 800ba6a:	4b3c      	ldr	r3, [pc, #240]	; (800bb5c <SendTxData+0x109c>)
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	2b0d      	cmp	r3, #13
 800ba70:	d10a      	bne.n	800ba88 <SendTxData+0xfc8>
								&& esp_buffer[0] == ',') {
 800ba72:	4b3b      	ldr	r3, [pc, #236]	; (800bb60 <SendTxData+0x10a0>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b2c      	cmp	r3, #44	; 0x2c
 800ba78:	d106      	bne.n	800ba88 <SendTxData+0xfc8>
							contador_caracter_esp++;
 800ba7a:	4b38      	ldr	r3, [pc, #224]	; (800bb5c <SendTxData+0x109c>)
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	4b36      	ldr	r3, [pc, #216]	; (800bb5c <SendTxData+0x109c>)
 800ba84:	801a      	strh	r2, [r3, #0]
 800ba86:	e0b8      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 14
 800ba88:	4b34      	ldr	r3, [pc, #208]	; (800bb5c <SendTxData+0x109c>)
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	2b0e      	cmp	r3, #14
 800ba8e:	d10a      	bne.n	800baa6 <SendTxData+0xfe6>
								&& esp_buffer[0] == '8') {
 800ba90:	4b33      	ldr	r3, [pc, #204]	; (800bb60 <SendTxData+0x10a0>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b38      	cmp	r3, #56	; 0x38
 800ba96:	d106      	bne.n	800baa6 <SendTxData+0xfe6>
							contador_caracter_esp++;
 800ba98:	4b30      	ldr	r3, [pc, #192]	; (800bb5c <SendTxData+0x109c>)
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	4b2e      	ldr	r3, [pc, #184]	; (800bb5c <SendTxData+0x109c>)
 800baa2:	801a      	strh	r2, [r3, #0]
 800baa4:	e0a9      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 15
 800baa6:	4b2d      	ldr	r3, [pc, #180]	; (800bb5c <SendTxData+0x109c>)
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	2b0f      	cmp	r3, #15
 800baac:	d10a      	bne.n	800bac4 <SendTxData+0x1004>
								&& esp_buffer[0] == 0x0D) {
 800baae:	4b2c      	ldr	r3, [pc, #176]	; (800bb60 <SendTxData+0x10a0>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b0d      	cmp	r3, #13
 800bab4:	d106      	bne.n	800bac4 <SendTxData+0x1004>
							contador_caracter_esp++;
 800bab6:	4b29      	ldr	r3, [pc, #164]	; (800bb5c <SendTxData+0x109c>)
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	3301      	adds	r3, #1
 800babc:	b29a      	uxth	r2, r3
 800babe:	4b27      	ldr	r3, [pc, #156]	; (800bb5c <SendTxData+0x109c>)
 800bac0:	801a      	strh	r2, [r3, #0]
 800bac2:	e09a      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 16
 800bac4:	4b25      	ldr	r3, [pc, #148]	; (800bb5c <SendTxData+0x109c>)
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	2b10      	cmp	r3, #16
 800baca:	d10a      	bne.n	800bae2 <SendTxData+0x1022>
								&& esp_buffer[0] == 0x0D) {
 800bacc:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <SendTxData+0x10a0>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b0d      	cmp	r3, #13
 800bad2:	d106      	bne.n	800bae2 <SendTxData+0x1022>
							contador_caracter_esp++;
 800bad4:	4b21      	ldr	r3, [pc, #132]	; (800bb5c <SendTxData+0x109c>)
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	b29a      	uxth	r2, r3
 800badc:	4b1f      	ldr	r3, [pc, #124]	; (800bb5c <SendTxData+0x109c>)
 800bade:	801a      	strh	r2, [r3, #0]
 800bae0:	e08b      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 17
 800bae2:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <SendTxData+0x109c>)
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	2b11      	cmp	r3, #17
 800bae8:	d10a      	bne.n	800bb00 <SendTxData+0x1040>
								&& esp_buffer[0] == 0x0A) {
 800baea:	4b1d      	ldr	r3, [pc, #116]	; (800bb60 <SendTxData+0x10a0>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b0a      	cmp	r3, #10
 800baf0:	d106      	bne.n	800bb00 <SendTxData+0x1040>
							contador_caracter_esp++;
 800baf2:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <SendTxData+0x109c>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	3301      	adds	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	4b18      	ldr	r3, [pc, #96]	; (800bb5c <SendTxData+0x109c>)
 800bafc:	801a      	strh	r2, [r3, #0]
 800bafe:	e07c      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 18
 800bb00:	4b16      	ldr	r3, [pc, #88]	; (800bb5c <SendTxData+0x109c>)
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	2b12      	cmp	r3, #18
 800bb06:	d10a      	bne.n	800bb1e <SendTxData+0x105e>
								&& esp_buffer[0] == 0x0D) {
 800bb08:	4b15      	ldr	r3, [pc, #84]	; (800bb60 <SendTxData+0x10a0>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b0d      	cmp	r3, #13
 800bb0e:	d106      	bne.n	800bb1e <SendTxData+0x105e>
							contador_caracter_esp++;
 800bb10:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <SendTxData+0x109c>)
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	3301      	adds	r3, #1
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	4b10      	ldr	r3, [pc, #64]	; (800bb5c <SendTxData+0x109c>)
 800bb1a:	801a      	strh	r2, [r3, #0]
 800bb1c:	e06d      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 19
 800bb1e:	4b0f      	ldr	r3, [pc, #60]	; (800bb5c <SendTxData+0x109c>)
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	2b13      	cmp	r3, #19
 800bb24:	d10a      	bne.n	800bb3c <SendTxData+0x107c>
								&& esp_buffer[0] == 0x0A) {
 800bb26:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <SendTxData+0x10a0>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2b0a      	cmp	r3, #10
 800bb2c:	d106      	bne.n	800bb3c <SendTxData+0x107c>
							contador_caracter_esp++;
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	; (800bb5c <SendTxData+0x109c>)
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <SendTxData+0x109c>)
 800bb38:	801a      	strh	r2, [r3, #0]
 800bb3a:	e05e      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 20
 800bb3c:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <SendTxData+0x109c>)
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	2b14      	cmp	r3, #20
 800bb42:	d10f      	bne.n	800bb64 <SendTxData+0x10a4>
								&& esp_buffer[0] == 'O') {
 800bb44:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <SendTxData+0x10a0>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b4f      	cmp	r3, #79	; 0x4f
 800bb4a:	d10b      	bne.n	800bb64 <SendTxData+0x10a4>
							contador_caracter_esp++;
 800bb4c:	4b03      	ldr	r3, [pc, #12]	; (800bb5c <SendTxData+0x109c>)
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	4b01      	ldr	r3, [pc, #4]	; (800bb5c <SendTxData+0x109c>)
 800bb56:	801a      	strh	r2, [r3, #0]
 800bb58:	e04f      	b.n	800bbfa <SendTxData+0x113a>
 800bb5a:	bf00      	nop
 800bb5c:	20000712 	.word	0x20000712
 800bb60:	20000714 	.word	0x20000714
						} else if (contador_caracter_esp == 21
 800bb64:	4b8e      	ldr	r3, [pc, #568]	; (800bda0 <SendTxData+0x12e0>)
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	2b15      	cmp	r3, #21
 800bb6a:	d10a      	bne.n	800bb82 <SendTxData+0x10c2>
								&& esp_buffer[0] == 'K') {
 800bb6c:	4b8d      	ldr	r3, [pc, #564]	; (800bda4 <SendTxData+0x12e4>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b4b      	cmp	r3, #75	; 0x4b
 800bb72:	d106      	bne.n	800bb82 <SendTxData+0x10c2>
							contador_caracter_esp++;
 800bb74:	4b8a      	ldr	r3, [pc, #552]	; (800bda0 <SendTxData+0x12e0>)
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	4b88      	ldr	r3, [pc, #544]	; (800bda0 <SendTxData+0x12e0>)
 800bb7e:	801a      	strh	r2, [r3, #0]
 800bb80:	e03b      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 22
 800bb82:	4b87      	ldr	r3, [pc, #540]	; (800bda0 <SendTxData+0x12e0>)
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	2b16      	cmp	r3, #22
 800bb88:	d10a      	bne.n	800bba0 <SendTxData+0x10e0>
								&& esp_buffer[0] == 0x0D) {
 800bb8a:	4b86      	ldr	r3, [pc, #536]	; (800bda4 <SendTxData+0x12e4>)
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	2b0d      	cmp	r3, #13
 800bb90:	d106      	bne.n	800bba0 <SendTxData+0x10e0>
							contador_caracter_esp++;
 800bb92:	4b83      	ldr	r3, [pc, #524]	; (800bda0 <SendTxData+0x12e0>)
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	3301      	adds	r3, #1
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	4b81      	ldr	r3, [pc, #516]	; (800bda0 <SendTxData+0x12e0>)
 800bb9c:	801a      	strh	r2, [r3, #0]
 800bb9e:	e02c      	b.n	800bbfa <SendTxData+0x113a>
						} else if (contador_caracter_esp == 23
 800bba0:	4b7f      	ldr	r3, [pc, #508]	; (800bda0 <SendTxData+0x12e0>)
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	2b17      	cmp	r3, #23
 800bba6:	d125      	bne.n	800bbf4 <SendTxData+0x1134>
								&& esp_buffer[0] == 0x0A) {
 800bba8:	4b7e      	ldr	r3, [pc, #504]	; (800bda4 <SendTxData+0x12e4>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b0a      	cmp	r3, #10
 800bbae:	d121      	bne.n	800bbf4 <SendTxData+0x1134>
							contador_caracter_esp = 0;
 800bbb0:	4b7b      	ldr	r3, [pc, #492]	; (800bda0 <SendTxData+0x12e0>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	801a      	strh	r2, [r3, #0]
							estado_esp = 4;
 800bbb6:	4b7c      	ldr	r3, [pc, #496]	; (800bda8 <SendTxData+0x12e8>)
 800bbb8:	2204      	movs	r2, #4
 800bbba:	801a      	strh	r2, [r3, #0]
							//Espero 2 segundos
							tiempoParcial = SysTimeGet();
 800bbbc:	463b      	mov	r3, r7
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f010 f8be 	bl	801bd40 <SysTimeGet>
 800bbc4:	f107 030c 	add.w	r3, r7, #12
 800bbc8:	463a      	mov	r2, r7
 800bbca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbce:	e883 0003 	stmia.w	r3, {r0, r1}
							while (SysTimeGet().Seconds - tiempoParcial.Seconds
 800bbd2:	bf00      	nop
 800bbd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f010 f8b1 	bl	801bd40 <SysTimeGet>
 800bbde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d9f5      	bls.n	800bbd4 <SendTxData+0x1114>
									< 2) {
							}
							HAL_UART_Transmit_IT(&huart1, "AT+CWLAP\r\n", 10);
 800bbe8:	220a      	movs	r2, #10
 800bbea:	4970      	ldr	r1, [pc, #448]	; (800bdac <SendTxData+0x12ec>)
 800bbec:	4870      	ldr	r0, [pc, #448]	; (800bdb0 <SendTxData+0x12f0>)
 800bbee:	f7fc f90b 	bl	8007e08 <HAL_UART_Transmit_IT>
 800bbf2:	e002      	b.n	800bbfa <SendTxData+0x113a>
						} else {
							estado_esp = 0;
 800bbf4:	4b6c      	ldr	r3, [pc, #432]	; (800bda8 <SendTxData+0x12e8>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	801a      	strh	r2, [r3, #0]
						}
						esp_byte_recibido = 0;
 800bbfa:	4b6e      	ldr	r3, [pc, #440]	; (800bdb4 <SendTxData+0x12f4>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	701a      	strb	r2, [r3, #0]
						HAL_UART_Receive_IT(&huart1, (uint8_t*) esp_buffer, 1);
 800bc00:	2201      	movs	r2, #1
 800bc02:	4968      	ldr	r1, [pc, #416]	; (800bda4 <SendTxData+0x12e4>)
 800bc04:	486a      	ldr	r0, [pc, #424]	; (800bdb0 <SendTxData+0x12f0>)
 800bc06:	f7fc f9a7 	bl	8007f58 <HAL_UART_Receive_IT>
 800bc0a:	f000 bcc7 	b.w	800c59c <SendTxData+0x1adc>
					} else if (SysTimeGet().Seconds - tiempoParcial.Seconds
 800bc0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bc12:	4618      	mov	r0, r3
 800bc14:	f010 f894 	bl	801bd40 <SysTimeGet>
 800bc18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	f240 84bc 	bls.w	800c59c <SendTxData+0x1adc>
							> 2) {
						tiempoParcial = SysTimeGet();
 800bc24:	463b      	mov	r3, r7
 800bc26:	4618      	mov	r0, r3
 800bc28:	f010 f88a 	bl	801bd40 <SysTimeGet>
 800bc2c:	f107 030c 	add.w	r3, r7, #12
 800bc30:	463a      	mov	r2, r7
 800bc32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc36:	e883 0003 	stmia.w	r3, {r0, r1}
						estado_esp = 0;
 800bc3a:	4b5b      	ldr	r3, [pc, #364]	; (800bda8 <SendTxData+0x12e8>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	801a      	strh	r2, [r3, #0]
					}
					break;
 800bc40:	f000 bcac 	b.w	800c59c <SendTxData+0x1adc>
				case 4:
					if (esp_byte_recibido == 1) {
 800bc44:	4b5b      	ldr	r3, [pc, #364]	; (800bdb4 <SendTxData+0x12f4>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	f040 848d 	bne.w	800c56a <SendTxData+0x1aaa>
						tiempoParcial = SysTimeGet();
 800bc50:	463b      	mov	r3, r7
 800bc52:	4618      	mov	r0, r3
 800bc54:	f010 f874 	bl	801bd40 <SysTimeGet>
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	463a      	mov	r2, r7
 800bc5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc62:	e883 0003 	stmia.w	r3, {r0, r1}
						if (contador_caracter_esp == 0
 800bc66:	4b4e      	ldr	r3, [pc, #312]	; (800bda0 <SendTxData+0x12e0>)
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10b      	bne.n	800bc86 <SendTxData+0x11c6>
								&& esp_buffer[0] == 'A') {
 800bc6e:	4b4d      	ldr	r3, [pc, #308]	; (800bda4 <SendTxData+0x12e4>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	2b41      	cmp	r3, #65	; 0x41
 800bc74:	d107      	bne.n	800bc86 <SendTxData+0x11c6>
							contador_caracter_esp++;
 800bc76:	4b4a      	ldr	r3, [pc, #296]	; (800bda0 <SendTxData+0x12e0>)
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	4b48      	ldr	r3, [pc, #288]	; (800bda0 <SendTxData+0x12e0>)
 800bc80:	801a      	strh	r2, [r3, #0]
 800bc82:	f000 bc69 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 1
 800bc86:	4b46      	ldr	r3, [pc, #280]	; (800bda0 <SendTxData+0x12e0>)
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d10b      	bne.n	800bca6 <SendTxData+0x11e6>
								&& esp_buffer[0] == 'T') {
 800bc8e:	4b45      	ldr	r3, [pc, #276]	; (800bda4 <SendTxData+0x12e4>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b54      	cmp	r3, #84	; 0x54
 800bc94:	d107      	bne.n	800bca6 <SendTxData+0x11e6>
							contador_caracter_esp++;
 800bc96:	4b42      	ldr	r3, [pc, #264]	; (800bda0 <SendTxData+0x12e0>)
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	4b40      	ldr	r3, [pc, #256]	; (800bda0 <SendTxData+0x12e0>)
 800bca0:	801a      	strh	r2, [r3, #0]
 800bca2:	f000 bc59 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 2
 800bca6:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <SendTxData+0x12e0>)
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d10b      	bne.n	800bcc6 <SendTxData+0x1206>
								&& esp_buffer[0] == '+') {
 800bcae:	4b3d      	ldr	r3, [pc, #244]	; (800bda4 <SendTxData+0x12e4>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b2b      	cmp	r3, #43	; 0x2b
 800bcb4:	d107      	bne.n	800bcc6 <SendTxData+0x1206>
							contador_caracter_esp++;
 800bcb6:	4b3a      	ldr	r3, [pc, #232]	; (800bda0 <SendTxData+0x12e0>)
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	4b38      	ldr	r3, [pc, #224]	; (800bda0 <SendTxData+0x12e0>)
 800bcc0:	801a      	strh	r2, [r3, #0]
 800bcc2:	f000 bc49 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 3
 800bcc6:	4b36      	ldr	r3, [pc, #216]	; (800bda0 <SendTxData+0x12e0>)
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d10b      	bne.n	800bce6 <SendTxData+0x1226>
								&& esp_buffer[0] == 'C') {
 800bcce:	4b35      	ldr	r3, [pc, #212]	; (800bda4 <SendTxData+0x12e4>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b43      	cmp	r3, #67	; 0x43
 800bcd4:	d107      	bne.n	800bce6 <SendTxData+0x1226>
							contador_caracter_esp++;
 800bcd6:	4b32      	ldr	r3, [pc, #200]	; (800bda0 <SendTxData+0x12e0>)
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	4b30      	ldr	r3, [pc, #192]	; (800bda0 <SendTxData+0x12e0>)
 800bce0:	801a      	strh	r2, [r3, #0]
 800bce2:	f000 bc39 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 4
 800bce6:	4b2e      	ldr	r3, [pc, #184]	; (800bda0 <SendTxData+0x12e0>)
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d10b      	bne.n	800bd06 <SendTxData+0x1246>
								&& esp_buffer[0] == 'W') {
 800bcee:	4b2d      	ldr	r3, [pc, #180]	; (800bda4 <SendTxData+0x12e4>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b57      	cmp	r3, #87	; 0x57
 800bcf4:	d107      	bne.n	800bd06 <SendTxData+0x1246>
							contador_caracter_esp++;
 800bcf6:	4b2a      	ldr	r3, [pc, #168]	; (800bda0 <SendTxData+0x12e0>)
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	4b28      	ldr	r3, [pc, #160]	; (800bda0 <SendTxData+0x12e0>)
 800bd00:	801a      	strh	r2, [r3, #0]
 800bd02:	f000 bc29 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 5
 800bd06:	4b26      	ldr	r3, [pc, #152]	; (800bda0 <SendTxData+0x12e0>)
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	2b05      	cmp	r3, #5
 800bd0c:	d10b      	bne.n	800bd26 <SendTxData+0x1266>
								&& esp_buffer[0] == 'L') {
 800bd0e:	4b25      	ldr	r3, [pc, #148]	; (800bda4 <SendTxData+0x12e4>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b4c      	cmp	r3, #76	; 0x4c
 800bd14:	d107      	bne.n	800bd26 <SendTxData+0x1266>
							contador_caracter_esp++;
 800bd16:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <SendTxData+0x12e0>)
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	4b20      	ldr	r3, [pc, #128]	; (800bda0 <SendTxData+0x12e0>)
 800bd20:	801a      	strh	r2, [r3, #0]
 800bd22:	f000 bc19 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 6
 800bd26:	4b1e      	ldr	r3, [pc, #120]	; (800bda0 <SendTxData+0x12e0>)
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	2b06      	cmp	r3, #6
 800bd2c:	d10b      	bne.n	800bd46 <SendTxData+0x1286>
								&& esp_buffer[0] == 'A') {
 800bd2e:	4b1d      	ldr	r3, [pc, #116]	; (800bda4 <SendTxData+0x12e4>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	2b41      	cmp	r3, #65	; 0x41
 800bd34:	d107      	bne.n	800bd46 <SendTxData+0x1286>
							contador_caracter_esp++;
 800bd36:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <SendTxData+0x12e0>)
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	4b18      	ldr	r3, [pc, #96]	; (800bda0 <SendTxData+0x12e0>)
 800bd40:	801a      	strh	r2, [r3, #0]
 800bd42:	f000 bc09 	b.w	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 7
 800bd46:	4b16      	ldr	r3, [pc, #88]	; (800bda0 <SendTxData+0x12e0>)
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	2b07      	cmp	r3, #7
 800bd4c:	d10a      	bne.n	800bd64 <SendTxData+0x12a4>
								&& esp_buffer[0] == 'P') {
 800bd4e:	4b15      	ldr	r3, [pc, #84]	; (800bda4 <SendTxData+0x12e4>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b50      	cmp	r3, #80	; 0x50
 800bd54:	d106      	bne.n	800bd64 <SendTxData+0x12a4>
							contador_caracter_esp++;
 800bd56:	4b12      	ldr	r3, [pc, #72]	; (800bda0 <SendTxData+0x12e0>)
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <SendTxData+0x12e0>)
 800bd60:	801a      	strh	r2, [r3, #0]
 800bd62:	e3f9      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 8
 800bd64:	4b0e      	ldr	r3, [pc, #56]	; (800bda0 <SendTxData+0x12e0>)
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	2b08      	cmp	r3, #8
 800bd6a:	d10a      	bne.n	800bd82 <SendTxData+0x12c2>
								&& esp_buffer[0] == 0x0D) {
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <SendTxData+0x12e4>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b0d      	cmp	r3, #13
 800bd72:	d106      	bne.n	800bd82 <SendTxData+0x12c2>
							contador_caracter_esp++;
 800bd74:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <SendTxData+0x12e0>)
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	4b08      	ldr	r3, [pc, #32]	; (800bda0 <SendTxData+0x12e0>)
 800bd7e:	801a      	strh	r2, [r3, #0]
 800bd80:	e3ea      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 9
 800bd82:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <SendTxData+0x12e0>)
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	2b09      	cmp	r3, #9
 800bd88:	d116      	bne.n	800bdb8 <SendTxData+0x12f8>
								&& esp_buffer[0] == 0x0D) {
 800bd8a:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <SendTxData+0x12e4>)
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	2b0d      	cmp	r3, #13
 800bd90:	d112      	bne.n	800bdb8 <SendTxData+0x12f8>
							contador_caracter_esp++;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <SendTxData+0x12e0>)
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	3301      	adds	r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	4b01      	ldr	r3, [pc, #4]	; (800bda0 <SendTxData+0x12e0>)
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	e3db      	b.n	800c558 <SendTxData+0x1a98>
 800bda0:	20000712 	.word	0x20000712
 800bda4:	20000714 	.word	0x20000714
 800bda8:	20000742 	.word	0x20000742
 800bdac:	0802012c 	.word	0x0802012c
 800bdb0:	200003f4 	.word	0x200003f4
 800bdb4:	20000716 	.word	0x20000716
						} else if (contador_caracter_esp == 10
 800bdb8:	4b7f      	ldr	r3, [pc, #508]	; (800bfb8 <SendTxData+0x14f8>)
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	2b0a      	cmp	r3, #10
 800bdbe:	d10a      	bne.n	800bdd6 <SendTxData+0x1316>
								&& esp_buffer[0] == 0x0A) {
 800bdc0:	4b7e      	ldr	r3, [pc, #504]	; (800bfbc <SendTxData+0x14fc>)
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b0a      	cmp	r3, #10
 800bdc6:	d106      	bne.n	800bdd6 <SendTxData+0x1316>
							contador_caracter_esp++;
 800bdc8:	4b7b      	ldr	r3, [pc, #492]	; (800bfb8 <SendTxData+0x14f8>)
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	4b79      	ldr	r3, [pc, #484]	; (800bfb8 <SendTxData+0x14f8>)
 800bdd2:	801a      	strh	r2, [r3, #0]
 800bdd4:	e3c0      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 11
 800bdd6:	4b78      	ldr	r3, [pc, #480]	; (800bfb8 <SendTxData+0x14f8>)
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	2b0b      	cmp	r3, #11
 800bddc:	d10a      	bne.n	800bdf4 <SendTxData+0x1334>
								&& esp_buffer[0] == '+') {
 800bdde:	4b77      	ldr	r3, [pc, #476]	; (800bfbc <SendTxData+0x14fc>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b2b      	cmp	r3, #43	; 0x2b
 800bde4:	d106      	bne.n	800bdf4 <SendTxData+0x1334>
							contador_caracter_esp++;
 800bde6:	4b74      	ldr	r3, [pc, #464]	; (800bfb8 <SendTxData+0x14f8>)
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	4b72      	ldr	r3, [pc, #456]	; (800bfb8 <SendTxData+0x14f8>)
 800bdf0:	801a      	strh	r2, [r3, #0]
 800bdf2:	e3b1      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 12
 800bdf4:	4b70      	ldr	r3, [pc, #448]	; (800bfb8 <SendTxData+0x14f8>)
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	2b0c      	cmp	r3, #12
 800bdfa:	d10a      	bne.n	800be12 <SendTxData+0x1352>
								&& esp_buffer[0] == 'C') {
 800bdfc:	4b6f      	ldr	r3, [pc, #444]	; (800bfbc <SendTxData+0x14fc>)
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b43      	cmp	r3, #67	; 0x43
 800be02:	d106      	bne.n	800be12 <SendTxData+0x1352>
							contador_caracter_esp++;
 800be04:	4b6c      	ldr	r3, [pc, #432]	; (800bfb8 <SendTxData+0x14f8>)
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	3301      	adds	r3, #1
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	4b6a      	ldr	r3, [pc, #424]	; (800bfb8 <SendTxData+0x14f8>)
 800be0e:	801a      	strh	r2, [r3, #0]
 800be10:	e3a2      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 13
 800be12:	4b69      	ldr	r3, [pc, #420]	; (800bfb8 <SendTxData+0x14f8>)
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	2b0d      	cmp	r3, #13
 800be18:	d10a      	bne.n	800be30 <SendTxData+0x1370>
								&& esp_buffer[0] == 'W') {
 800be1a:	4b68      	ldr	r3, [pc, #416]	; (800bfbc <SendTxData+0x14fc>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b57      	cmp	r3, #87	; 0x57
 800be20:	d106      	bne.n	800be30 <SendTxData+0x1370>
							contador_caracter_esp++;
 800be22:	4b65      	ldr	r3, [pc, #404]	; (800bfb8 <SendTxData+0x14f8>)
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	3301      	adds	r3, #1
 800be28:	b29a      	uxth	r2, r3
 800be2a:	4b63      	ldr	r3, [pc, #396]	; (800bfb8 <SendTxData+0x14f8>)
 800be2c:	801a      	strh	r2, [r3, #0]
 800be2e:	e393      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 14
 800be30:	4b61      	ldr	r3, [pc, #388]	; (800bfb8 <SendTxData+0x14f8>)
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	2b0e      	cmp	r3, #14
 800be36:	d10a      	bne.n	800be4e <SendTxData+0x138e>
								&& esp_buffer[0] == 'L') {
 800be38:	4b60      	ldr	r3, [pc, #384]	; (800bfbc <SendTxData+0x14fc>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b4c      	cmp	r3, #76	; 0x4c
 800be3e:	d106      	bne.n	800be4e <SendTxData+0x138e>
							contador_caracter_esp++;
 800be40:	4b5d      	ldr	r3, [pc, #372]	; (800bfb8 <SendTxData+0x14f8>)
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	3301      	adds	r3, #1
 800be46:	b29a      	uxth	r2, r3
 800be48:	4b5b      	ldr	r3, [pc, #364]	; (800bfb8 <SendTxData+0x14f8>)
 800be4a:	801a      	strh	r2, [r3, #0]
 800be4c:	e384      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 15
 800be4e:	4b5a      	ldr	r3, [pc, #360]	; (800bfb8 <SendTxData+0x14f8>)
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	2b0f      	cmp	r3, #15
 800be54:	d10a      	bne.n	800be6c <SendTxData+0x13ac>
								&& esp_buffer[0] == 'A') {
 800be56:	4b59      	ldr	r3, [pc, #356]	; (800bfbc <SendTxData+0x14fc>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b41      	cmp	r3, #65	; 0x41
 800be5c:	d106      	bne.n	800be6c <SendTxData+0x13ac>
							contador_caracter_esp++;
 800be5e:	4b56      	ldr	r3, [pc, #344]	; (800bfb8 <SendTxData+0x14f8>)
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	3301      	adds	r3, #1
 800be64:	b29a      	uxth	r2, r3
 800be66:	4b54      	ldr	r3, [pc, #336]	; (800bfb8 <SendTxData+0x14f8>)
 800be68:	801a      	strh	r2, [r3, #0]
 800be6a:	e375      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 16
 800be6c:	4b52      	ldr	r3, [pc, #328]	; (800bfb8 <SendTxData+0x14f8>)
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	2b10      	cmp	r3, #16
 800be72:	d10a      	bne.n	800be8a <SendTxData+0x13ca>
								&& esp_buffer[0] == 'P') {
 800be74:	4b51      	ldr	r3, [pc, #324]	; (800bfbc <SendTxData+0x14fc>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2b50      	cmp	r3, #80	; 0x50
 800be7a:	d106      	bne.n	800be8a <SendTxData+0x13ca>
							contador_caracter_esp++;
 800be7c:	4b4e      	ldr	r3, [pc, #312]	; (800bfb8 <SendTxData+0x14f8>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	3301      	adds	r3, #1
 800be82:	b29a      	uxth	r2, r3
 800be84:	4b4c      	ldr	r3, [pc, #304]	; (800bfb8 <SendTxData+0x14f8>)
 800be86:	801a      	strh	r2, [r3, #0]
 800be88:	e366      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 17
 800be8a:	4b4b      	ldr	r3, [pc, #300]	; (800bfb8 <SendTxData+0x14f8>)
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	2b11      	cmp	r3, #17
 800be90:	d10a      	bne.n	800bea8 <SendTxData+0x13e8>
								&& esp_buffer[0] == ':') {
 800be92:	4b4a      	ldr	r3, [pc, #296]	; (800bfbc <SendTxData+0x14fc>)
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	2b3a      	cmp	r3, #58	; 0x3a
 800be98:	d106      	bne.n	800bea8 <SendTxData+0x13e8>
							contador_caracter_esp++;
 800be9a:	4b47      	ldr	r3, [pc, #284]	; (800bfb8 <SendTxData+0x14f8>)
 800be9c:	881b      	ldrh	r3, [r3, #0]
 800be9e:	3301      	adds	r3, #1
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	4b45      	ldr	r3, [pc, #276]	; (800bfb8 <SendTxData+0x14f8>)
 800bea4:	801a      	strh	r2, [r3, #0]
 800bea6:	e357      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 18
 800bea8:	4b43      	ldr	r3, [pc, #268]	; (800bfb8 <SendTxData+0x14f8>)
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	2b12      	cmp	r3, #18
 800beae:	d10a      	bne.n	800bec6 <SendTxData+0x1406>
								&& esp_buffer[0] == '(') {
 800beb0:	4b42      	ldr	r3, [pc, #264]	; (800bfbc <SendTxData+0x14fc>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b28      	cmp	r3, #40	; 0x28
 800beb6:	d106      	bne.n	800bec6 <SendTxData+0x1406>
							contador_caracter_esp++;
 800beb8:	4b3f      	ldr	r3, [pc, #252]	; (800bfb8 <SendTxData+0x14f8>)
 800beba:	881b      	ldrh	r3, [r3, #0]
 800bebc:	3301      	adds	r3, #1
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	4b3d      	ldr	r3, [pc, #244]	; (800bfb8 <SendTxData+0x14f8>)
 800bec2:	801a      	strh	r2, [r3, #0]
 800bec4:	e348      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 19
 800bec6:	4b3c      	ldr	r3, [pc, #240]	; (800bfb8 <SendTxData+0x14f8>)
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	2b13      	cmp	r3, #19
 800becc:	d10a      	bne.n	800bee4 <SendTxData+0x1424>
								&& esp_buffer[0] == '"') {
 800bece:	4b3b      	ldr	r3, [pc, #236]	; (800bfbc <SendTxData+0x14fc>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b22      	cmp	r3, #34	; 0x22
 800bed4:	d106      	bne.n	800bee4 <SendTxData+0x1424>
							contador_caracter_esp++;
 800bed6:	4b38      	ldr	r3, [pc, #224]	; (800bfb8 <SendTxData+0x14f8>)
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	3301      	adds	r3, #1
 800bedc:	b29a      	uxth	r2, r3
 800bede:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <SendTxData+0x14f8>)
 800bee0:	801a      	strh	r2, [r3, #0]
 800bee2:	e339      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 20) {
 800bee4:	4b34      	ldr	r3, [pc, #208]	; (800bfb8 <SendTxData+0x14f8>)
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	2b14      	cmp	r3, #20
 800beea:	d10a      	bne.n	800bf02 <SendTxData+0x1442>
							mac1[0] = esp_buffer[0];
 800beec:	4b33      	ldr	r3, [pc, #204]	; (800bfbc <SendTxData+0x14fc>)
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	4b33      	ldr	r3, [pc, #204]	; (800bfc0 <SendTxData+0x1500>)
 800bef2:	701a      	strb	r2, [r3, #0]
							contador_caracter_esp++;
 800bef4:	4b30      	ldr	r3, [pc, #192]	; (800bfb8 <SendTxData+0x14f8>)
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	b29a      	uxth	r2, r3
 800befc:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <SendTxData+0x14f8>)
 800befe:	801a      	strh	r2, [r3, #0]
 800bf00:	e32a      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 21) {
 800bf02:	4b2d      	ldr	r3, [pc, #180]	; (800bfb8 <SendTxData+0x14f8>)
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	2b15      	cmp	r3, #21
 800bf08:	d10a      	bne.n	800bf20 <SendTxData+0x1460>
							mac1[1] = esp_buffer[0];
 800bf0a:	4b2c      	ldr	r3, [pc, #176]	; (800bfbc <SendTxData+0x14fc>)
 800bf0c:	781a      	ldrb	r2, [r3, #0]
 800bf0e:	4b2c      	ldr	r3, [pc, #176]	; (800bfc0 <SendTxData+0x1500>)
 800bf10:	705a      	strb	r2, [r3, #1]
							contador_caracter_esp++;
 800bf12:	4b29      	ldr	r3, [pc, #164]	; (800bfb8 <SendTxData+0x14f8>)
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	3301      	adds	r3, #1
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	4b27      	ldr	r3, [pc, #156]	; (800bfb8 <SendTxData+0x14f8>)
 800bf1c:	801a      	strh	r2, [r3, #0]
 800bf1e:	e31b      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 22
 800bf20:	4b25      	ldr	r3, [pc, #148]	; (800bfb8 <SendTxData+0x14f8>)
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	2b16      	cmp	r3, #22
 800bf26:	d10a      	bne.n	800bf3e <SendTxData+0x147e>
								&& esp_buffer[0] == ':') {
 800bf28:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <SendTxData+0x14fc>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b3a      	cmp	r3, #58	; 0x3a
 800bf2e:	d106      	bne.n	800bf3e <SendTxData+0x147e>
							contador_caracter_esp++;
 800bf30:	4b21      	ldr	r3, [pc, #132]	; (800bfb8 <SendTxData+0x14f8>)
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	3301      	adds	r3, #1
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	4b1f      	ldr	r3, [pc, #124]	; (800bfb8 <SendTxData+0x14f8>)
 800bf3a:	801a      	strh	r2, [r3, #0]
 800bf3c:	e30c      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 23) {
 800bf3e:	4b1e      	ldr	r3, [pc, #120]	; (800bfb8 <SendTxData+0x14f8>)
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	2b17      	cmp	r3, #23
 800bf44:	d10a      	bne.n	800bf5c <SendTxData+0x149c>
							mac1[2] = esp_buffer[0];
 800bf46:	4b1d      	ldr	r3, [pc, #116]	; (800bfbc <SendTxData+0x14fc>)
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <SendTxData+0x1500>)
 800bf4c:	709a      	strb	r2, [r3, #2]
							contador_caracter_esp++;
 800bf4e:	4b1a      	ldr	r3, [pc, #104]	; (800bfb8 <SendTxData+0x14f8>)
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	3301      	adds	r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <SendTxData+0x14f8>)
 800bf58:	801a      	strh	r2, [r3, #0]
 800bf5a:	e2fd      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 24) {
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <SendTxData+0x14f8>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	2b18      	cmp	r3, #24
 800bf62:	d10a      	bne.n	800bf7a <SendTxData+0x14ba>
							mac1[3] = esp_buffer[0];
 800bf64:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <SendTxData+0x14fc>)
 800bf66:	781a      	ldrb	r2, [r3, #0]
 800bf68:	4b15      	ldr	r3, [pc, #84]	; (800bfc0 <SendTxData+0x1500>)
 800bf6a:	70da      	strb	r2, [r3, #3]
							contador_caracter_esp++;
 800bf6c:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <SendTxData+0x14f8>)
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	3301      	adds	r3, #1
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	4b10      	ldr	r3, [pc, #64]	; (800bfb8 <SendTxData+0x14f8>)
 800bf76:	801a      	strh	r2, [r3, #0]
 800bf78:	e2ee      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 25
 800bf7a:	4b0f      	ldr	r3, [pc, #60]	; (800bfb8 <SendTxData+0x14f8>)
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	2b19      	cmp	r3, #25
 800bf80:	d10a      	bne.n	800bf98 <SendTxData+0x14d8>
								&& esp_buffer[0] == ':') {
 800bf82:	4b0e      	ldr	r3, [pc, #56]	; (800bfbc <SendTxData+0x14fc>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b3a      	cmp	r3, #58	; 0x3a
 800bf88:	d106      	bne.n	800bf98 <SendTxData+0x14d8>
							contador_caracter_esp++;
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <SendTxData+0x14f8>)
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <SendTxData+0x14f8>)
 800bf94:	801a      	strh	r2, [r3, #0]
 800bf96:	e2df      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 26) {
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <SendTxData+0x14f8>)
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	2b1a      	cmp	r3, #26
 800bf9e:	d111      	bne.n	800bfc4 <SendTxData+0x1504>
							mac1[4] = esp_buffer[0];
 800bfa0:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <SendTxData+0x14fc>)
 800bfa2:	781a      	ldrb	r2, [r3, #0]
 800bfa4:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <SendTxData+0x1500>)
 800bfa6:	711a      	strb	r2, [r3, #4]
							contador_caracter_esp++;
 800bfa8:	4b03      	ldr	r3, [pc, #12]	; (800bfb8 <SendTxData+0x14f8>)
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	3301      	adds	r3, #1
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	4b01      	ldr	r3, [pc, #4]	; (800bfb8 <SendTxData+0x14f8>)
 800bfb2:	801a      	strh	r2, [r3, #0]
 800bfb4:	e2d0      	b.n	800c558 <SendTxData+0x1a98>
 800bfb6:	bf00      	nop
 800bfb8:	20000712 	.word	0x20000712
 800bfbc:	20000714 	.word	0x20000714
 800bfc0:	20000718 	.word	0x20000718
						} else if (contador_caracter_esp == 27) {
 800bfc4:	4b87      	ldr	r3, [pc, #540]	; (800c1e4 <SendTxData+0x1724>)
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	2b1b      	cmp	r3, #27
 800bfca:	d10a      	bne.n	800bfe2 <SendTxData+0x1522>
							mac1[5] = esp_buffer[0];
 800bfcc:	4b86      	ldr	r3, [pc, #536]	; (800c1e8 <SendTxData+0x1728>)
 800bfce:	781a      	ldrb	r2, [r3, #0]
 800bfd0:	4b86      	ldr	r3, [pc, #536]	; (800c1ec <SendTxData+0x172c>)
 800bfd2:	715a      	strb	r2, [r3, #5]
							contador_caracter_esp++;
 800bfd4:	4b83      	ldr	r3, [pc, #524]	; (800c1e4 <SendTxData+0x1724>)
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	4b81      	ldr	r3, [pc, #516]	; (800c1e4 <SendTxData+0x1724>)
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	e2ba      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 28
 800bfe2:	4b80      	ldr	r3, [pc, #512]	; (800c1e4 <SendTxData+0x1724>)
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	2b1c      	cmp	r3, #28
 800bfe8:	d10a      	bne.n	800c000 <SendTxData+0x1540>
								&& esp_buffer[0] == ':') {
 800bfea:	4b7f      	ldr	r3, [pc, #508]	; (800c1e8 <SendTxData+0x1728>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b3a      	cmp	r3, #58	; 0x3a
 800bff0:	d106      	bne.n	800c000 <SendTxData+0x1540>
							contador_caracter_esp++;
 800bff2:	4b7c      	ldr	r3, [pc, #496]	; (800c1e4 <SendTxData+0x1724>)
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	3301      	adds	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	4b7a      	ldr	r3, [pc, #488]	; (800c1e4 <SendTxData+0x1724>)
 800bffc:	801a      	strh	r2, [r3, #0]
 800bffe:	e2ab      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 29) {
 800c000:	4b78      	ldr	r3, [pc, #480]	; (800c1e4 <SendTxData+0x1724>)
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	2b1d      	cmp	r3, #29
 800c006:	d10a      	bne.n	800c01e <SendTxData+0x155e>
							mac1[6] = esp_buffer[0];
 800c008:	4b77      	ldr	r3, [pc, #476]	; (800c1e8 <SendTxData+0x1728>)
 800c00a:	781a      	ldrb	r2, [r3, #0]
 800c00c:	4b77      	ldr	r3, [pc, #476]	; (800c1ec <SendTxData+0x172c>)
 800c00e:	719a      	strb	r2, [r3, #6]
							contador_caracter_esp++;
 800c010:	4b74      	ldr	r3, [pc, #464]	; (800c1e4 <SendTxData+0x1724>)
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	3301      	adds	r3, #1
 800c016:	b29a      	uxth	r2, r3
 800c018:	4b72      	ldr	r3, [pc, #456]	; (800c1e4 <SendTxData+0x1724>)
 800c01a:	801a      	strh	r2, [r3, #0]
 800c01c:	e29c      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 30) {
 800c01e:	4b71      	ldr	r3, [pc, #452]	; (800c1e4 <SendTxData+0x1724>)
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	2b1e      	cmp	r3, #30
 800c024:	d10a      	bne.n	800c03c <SendTxData+0x157c>
							mac1[7] = esp_buffer[0];
 800c026:	4b70      	ldr	r3, [pc, #448]	; (800c1e8 <SendTxData+0x1728>)
 800c028:	781a      	ldrb	r2, [r3, #0]
 800c02a:	4b70      	ldr	r3, [pc, #448]	; (800c1ec <SendTxData+0x172c>)
 800c02c:	71da      	strb	r2, [r3, #7]
							contador_caracter_esp++;
 800c02e:	4b6d      	ldr	r3, [pc, #436]	; (800c1e4 <SendTxData+0x1724>)
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	3301      	adds	r3, #1
 800c034:	b29a      	uxth	r2, r3
 800c036:	4b6b      	ldr	r3, [pc, #428]	; (800c1e4 <SendTxData+0x1724>)
 800c038:	801a      	strh	r2, [r3, #0]
 800c03a:	e28d      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 31
 800c03c:	4b69      	ldr	r3, [pc, #420]	; (800c1e4 <SendTxData+0x1724>)
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	2b1f      	cmp	r3, #31
 800c042:	d10a      	bne.n	800c05a <SendTxData+0x159a>
								&& esp_buffer[0] == ':') {
 800c044:	4b68      	ldr	r3, [pc, #416]	; (800c1e8 <SendTxData+0x1728>)
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b3a      	cmp	r3, #58	; 0x3a
 800c04a:	d106      	bne.n	800c05a <SendTxData+0x159a>
							contador_caracter_esp++;
 800c04c:	4b65      	ldr	r3, [pc, #404]	; (800c1e4 <SendTxData+0x1724>)
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	3301      	adds	r3, #1
 800c052:	b29a      	uxth	r2, r3
 800c054:	4b63      	ldr	r3, [pc, #396]	; (800c1e4 <SendTxData+0x1724>)
 800c056:	801a      	strh	r2, [r3, #0]
 800c058:	e27e      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 32) {
 800c05a:	4b62      	ldr	r3, [pc, #392]	; (800c1e4 <SendTxData+0x1724>)
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	2b20      	cmp	r3, #32
 800c060:	d10a      	bne.n	800c078 <SendTxData+0x15b8>
							mac1[8] = esp_buffer[0];
 800c062:	4b61      	ldr	r3, [pc, #388]	; (800c1e8 <SendTxData+0x1728>)
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	4b61      	ldr	r3, [pc, #388]	; (800c1ec <SendTxData+0x172c>)
 800c068:	721a      	strb	r2, [r3, #8]
							contador_caracter_esp++;
 800c06a:	4b5e      	ldr	r3, [pc, #376]	; (800c1e4 <SendTxData+0x1724>)
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	3301      	adds	r3, #1
 800c070:	b29a      	uxth	r2, r3
 800c072:	4b5c      	ldr	r3, [pc, #368]	; (800c1e4 <SendTxData+0x1724>)
 800c074:	801a      	strh	r2, [r3, #0]
 800c076:	e26f      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 33) {
 800c078:	4b5a      	ldr	r3, [pc, #360]	; (800c1e4 <SendTxData+0x1724>)
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	2b21      	cmp	r3, #33	; 0x21
 800c07e:	d10a      	bne.n	800c096 <SendTxData+0x15d6>
							mac1[9] = esp_buffer[0];
 800c080:	4b59      	ldr	r3, [pc, #356]	; (800c1e8 <SendTxData+0x1728>)
 800c082:	781a      	ldrb	r2, [r3, #0]
 800c084:	4b59      	ldr	r3, [pc, #356]	; (800c1ec <SendTxData+0x172c>)
 800c086:	725a      	strb	r2, [r3, #9]
							contador_caracter_esp++;
 800c088:	4b56      	ldr	r3, [pc, #344]	; (800c1e4 <SendTxData+0x1724>)
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	b29a      	uxth	r2, r3
 800c090:	4b54      	ldr	r3, [pc, #336]	; (800c1e4 <SendTxData+0x1724>)
 800c092:	801a      	strh	r2, [r3, #0]
 800c094:	e260      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 34
 800c096:	4b53      	ldr	r3, [pc, #332]	; (800c1e4 <SendTxData+0x1724>)
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	2b22      	cmp	r3, #34	; 0x22
 800c09c:	d10a      	bne.n	800c0b4 <SendTxData+0x15f4>
								&& esp_buffer[0] == ':') {
 800c09e:	4b52      	ldr	r3, [pc, #328]	; (800c1e8 <SendTxData+0x1728>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b3a      	cmp	r3, #58	; 0x3a
 800c0a4:	d106      	bne.n	800c0b4 <SendTxData+0x15f4>
							contador_caracter_esp++;
 800c0a6:	4b4f      	ldr	r3, [pc, #316]	; (800c1e4 <SendTxData+0x1724>)
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	4b4d      	ldr	r3, [pc, #308]	; (800c1e4 <SendTxData+0x1724>)
 800c0b0:	801a      	strh	r2, [r3, #0]
 800c0b2:	e251      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 35) {
 800c0b4:	4b4b      	ldr	r3, [pc, #300]	; (800c1e4 <SendTxData+0x1724>)
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	2b23      	cmp	r3, #35	; 0x23
 800c0ba:	d10a      	bne.n	800c0d2 <SendTxData+0x1612>
							mac1[10] = esp_buffer[0];
 800c0bc:	4b4a      	ldr	r3, [pc, #296]	; (800c1e8 <SendTxData+0x1728>)
 800c0be:	781a      	ldrb	r2, [r3, #0]
 800c0c0:	4b4a      	ldr	r3, [pc, #296]	; (800c1ec <SendTxData+0x172c>)
 800c0c2:	729a      	strb	r2, [r3, #10]
							contador_caracter_esp++;
 800c0c4:	4b47      	ldr	r3, [pc, #284]	; (800c1e4 <SendTxData+0x1724>)
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	4b45      	ldr	r3, [pc, #276]	; (800c1e4 <SendTxData+0x1724>)
 800c0ce:	801a      	strh	r2, [r3, #0]
 800c0d0:	e242      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 36) {
 800c0d2:	4b44      	ldr	r3, [pc, #272]	; (800c1e4 <SendTxData+0x1724>)
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	2b24      	cmp	r3, #36	; 0x24
 800c0d8:	d138      	bne.n	800c14c <SendTxData+0x168c>
							AppData.BufferSize = 15;
 800c0da:	4b45      	ldr	r3, [pc, #276]	; (800c1f0 <SendTxData+0x1730>)
 800c0dc:	220f      	movs	r2, #15
 800c0de:	705a      	strb	r2, [r3, #1]
							mac1[11] = esp_buffer[0];
 800c0e0:	4b41      	ldr	r3, [pc, #260]	; (800c1e8 <SendTxData+0x1728>)
 800c0e2:	781a      	ldrb	r2, [r3, #0]
 800c0e4:	4b41      	ldr	r3, [pc, #260]	; (800c1ec <SendTxData+0x172c>)
 800c0e6:	72da      	strb	r2, [r3, #11]
							contador_caracter_esp++;
 800c0e8:	4b3e      	ldr	r3, [pc, #248]	; (800c1e4 <SendTxData+0x1724>)
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	4b3c      	ldr	r3, [pc, #240]	; (800c1e4 <SendTxData+0x1724>)
 800c0f2:	801a      	strh	r2, [r3, #0]
							for (int i = 0; i < 6; i++) {
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0fa:	e022      	b.n	800c142 <SendTxData+0x1682>
								mac1[12 - (2 * i)] = '\0';
 800c0fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c100:	f1c3 0306 	rsb	r3, r3, #6
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	4a39      	ldr	r2, [pc, #228]	; (800c1ec <SendTxData+0x172c>)
 800c108:	2100      	movs	r1, #0
 800c10a:	54d1      	strb	r1, [r2, r3]
								AppData.Buffer[14 - i] = (uint8_t) strtol(
										&mac1[10 - (2 * i)], NULL, 16);
 800c10c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c110:	f1c3 0305 	rsb	r3, r3, #5
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	4a35      	ldr	r2, [pc, #212]	; (800c1ec <SendTxData+0x172c>)
 800c118:	4413      	add	r3, r2
								AppData.Buffer[14 - i] = (uint8_t) strtol(
 800c11a:	2210      	movs	r2, #16
 800c11c:	2100      	movs	r1, #0
 800c11e:	4618      	mov	r0, r3
 800c120:	f011 feda 	bl	801ded8 <strtol>
 800c124:	4601      	mov	r1, r0
 800c126:	4b32      	ldr	r3, [pc, #200]	; (800c1f0 <SendTxData+0x1730>)
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c12e:	f1c2 020e 	rsb	r2, r2, #14
 800c132:	4413      	add	r3, r2
 800c134:	b2ca      	uxtb	r2, r1
 800c136:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 6; i++) {
 800c138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c13c:	3301      	adds	r3, #1
 800c13e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c146:	2b05      	cmp	r3, #5
 800c148:	ddd8      	ble.n	800c0fc <SendTxData+0x163c>
 800c14a:	e205      	b.n	800c558 <SendTxData+0x1a98>
							}

						} else if (contador_caracter_esp == 37
 800c14c:	4b25      	ldr	r3, [pc, #148]	; (800c1e4 <SendTxData+0x1724>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	2b25      	cmp	r3, #37	; 0x25
 800c152:	d10a      	bne.n	800c16a <SendTxData+0x16aa>
								&& esp_buffer[0] == '"') {
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <SendTxData+0x1728>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b22      	cmp	r3, #34	; 0x22
 800c15a:	d106      	bne.n	800c16a <SendTxData+0x16aa>
							contador_caracter_esp++;
 800c15c:	4b21      	ldr	r3, [pc, #132]	; (800c1e4 <SendTxData+0x1724>)
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	3301      	adds	r3, #1
 800c162:	b29a      	uxth	r2, r3
 800c164:	4b1f      	ldr	r3, [pc, #124]	; (800c1e4 <SendTxData+0x1724>)
 800c166:	801a      	strh	r2, [r3, #0]
 800c168:	e1f6      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 38
 800c16a:	4b1e      	ldr	r3, [pc, #120]	; (800c1e4 <SendTxData+0x1724>)
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	2b26      	cmp	r3, #38	; 0x26
 800c170:	d10a      	bne.n	800c188 <SendTxData+0x16c8>
								&& esp_buffer[0] == ')') {
 800c172:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <SendTxData+0x1728>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b29      	cmp	r3, #41	; 0x29
 800c178:	d106      	bne.n	800c188 <SendTxData+0x16c8>
							contador_caracter_esp++;
 800c17a:	4b1a      	ldr	r3, [pc, #104]	; (800c1e4 <SendTxData+0x1724>)
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	b29a      	uxth	r2, r3
 800c182:	4b18      	ldr	r3, [pc, #96]	; (800c1e4 <SendTxData+0x1724>)
 800c184:	801a      	strh	r2, [r3, #0]
 800c186:	e1e7      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 39
 800c188:	4b16      	ldr	r3, [pc, #88]	; (800c1e4 <SendTxData+0x1724>)
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	2b27      	cmp	r3, #39	; 0x27
 800c18e:	d10a      	bne.n	800c1a6 <SendTxData+0x16e6>
								&& esp_buffer[0] == 0x0D) {
 800c190:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <SendTxData+0x1728>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b0d      	cmp	r3, #13
 800c196:	d106      	bne.n	800c1a6 <SendTxData+0x16e6>
							contador_caracter_esp++;
 800c198:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <SendTxData+0x1724>)
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	3301      	adds	r3, #1
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <SendTxData+0x1724>)
 800c1a2:	801a      	strh	r2, [r3, #0]
 800c1a4:	e1d8      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 40
 800c1a6:	4b0f      	ldr	r3, [pc, #60]	; (800c1e4 <SendTxData+0x1724>)
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	2b28      	cmp	r3, #40	; 0x28
 800c1ac:	d10a      	bne.n	800c1c4 <SendTxData+0x1704>
								&& esp_buffer[0] == 0x0A) {
 800c1ae:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <SendTxData+0x1728>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b0a      	cmp	r3, #10
 800c1b4:	d106      	bne.n	800c1c4 <SendTxData+0x1704>
							contador_caracter_esp++;
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <SendTxData+0x1724>)
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	4b09      	ldr	r3, [pc, #36]	; (800c1e4 <SendTxData+0x1724>)
 800c1c0:	801a      	strh	r2, [r3, #0]
 800c1c2:	e1c9      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 41
 800c1c4:	4b07      	ldr	r3, [pc, #28]	; (800c1e4 <SendTxData+0x1724>)
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	2b29      	cmp	r3, #41	; 0x29
 800c1ca:	d113      	bne.n	800c1f4 <SendTxData+0x1734>
								&& esp_buffer[0] == '+') {
 800c1cc:	4b06      	ldr	r3, [pc, #24]	; (800c1e8 <SendTxData+0x1728>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b2b      	cmp	r3, #43	; 0x2b
 800c1d2:	d10f      	bne.n	800c1f4 <SendTxData+0x1734>
							contador_caracter_esp++;
 800c1d4:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <SendTxData+0x1724>)
 800c1d6:	881b      	ldrh	r3, [r3, #0]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	4b01      	ldr	r3, [pc, #4]	; (800c1e4 <SendTxData+0x1724>)
 800c1de:	801a      	strh	r2, [r3, #0]
 800c1e0:	e1ba      	b.n	800c558 <SendTxData+0x1a98>
 800c1e2:	bf00      	nop
 800c1e4:	20000712 	.word	0x20000712
 800c1e8:	20000714 	.word	0x20000714
 800c1ec:	20000718 	.word	0x20000718
 800c1f0:	20000074 	.word	0x20000074
						} else if (contador_caracter_esp == 42
 800c1f4:	4b7f      	ldr	r3, [pc, #508]	; (800c3f4 <SendTxData+0x1934>)
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1fa:	d10a      	bne.n	800c212 <SendTxData+0x1752>
								&& esp_buffer[0] == 'C') {
 800c1fc:	4b7e      	ldr	r3, [pc, #504]	; (800c3f8 <SendTxData+0x1938>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b43      	cmp	r3, #67	; 0x43
 800c202:	d106      	bne.n	800c212 <SendTxData+0x1752>
							contador_caracter_esp++;
 800c204:	4b7b      	ldr	r3, [pc, #492]	; (800c3f4 <SendTxData+0x1934>)
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	3301      	adds	r3, #1
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	4b79      	ldr	r3, [pc, #484]	; (800c3f4 <SendTxData+0x1934>)
 800c20e:	801a      	strh	r2, [r3, #0]
 800c210:	e1a2      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 43
 800c212:	4b78      	ldr	r3, [pc, #480]	; (800c3f4 <SendTxData+0x1934>)
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	2b2b      	cmp	r3, #43	; 0x2b
 800c218:	d10a      	bne.n	800c230 <SendTxData+0x1770>
								&& esp_buffer[0] == 'W') {
 800c21a:	4b77      	ldr	r3, [pc, #476]	; (800c3f8 <SendTxData+0x1938>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b57      	cmp	r3, #87	; 0x57
 800c220:	d106      	bne.n	800c230 <SendTxData+0x1770>
							contador_caracter_esp++;
 800c222:	4b74      	ldr	r3, [pc, #464]	; (800c3f4 <SendTxData+0x1934>)
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	3301      	adds	r3, #1
 800c228:	b29a      	uxth	r2, r3
 800c22a:	4b72      	ldr	r3, [pc, #456]	; (800c3f4 <SendTxData+0x1934>)
 800c22c:	801a      	strh	r2, [r3, #0]
 800c22e:	e193      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 44
 800c230:	4b70      	ldr	r3, [pc, #448]	; (800c3f4 <SendTxData+0x1934>)
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	2b2c      	cmp	r3, #44	; 0x2c
 800c236:	d10a      	bne.n	800c24e <SendTxData+0x178e>
								&& esp_buffer[0] == 'L') {
 800c238:	4b6f      	ldr	r3, [pc, #444]	; (800c3f8 <SendTxData+0x1938>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b4c      	cmp	r3, #76	; 0x4c
 800c23e:	d106      	bne.n	800c24e <SendTxData+0x178e>
							contador_caracter_esp++;
 800c240:	4b6c      	ldr	r3, [pc, #432]	; (800c3f4 <SendTxData+0x1934>)
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	3301      	adds	r3, #1
 800c246:	b29a      	uxth	r2, r3
 800c248:	4b6a      	ldr	r3, [pc, #424]	; (800c3f4 <SendTxData+0x1934>)
 800c24a:	801a      	strh	r2, [r3, #0]
 800c24c:	e184      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 45
 800c24e:	4b69      	ldr	r3, [pc, #420]	; (800c3f4 <SendTxData+0x1934>)
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	2b2d      	cmp	r3, #45	; 0x2d
 800c254:	d10a      	bne.n	800c26c <SendTxData+0x17ac>
								&& esp_buffer[0] == 'A') {
 800c256:	4b68      	ldr	r3, [pc, #416]	; (800c3f8 <SendTxData+0x1938>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b41      	cmp	r3, #65	; 0x41
 800c25c:	d106      	bne.n	800c26c <SendTxData+0x17ac>
							contador_caracter_esp++;
 800c25e:	4b65      	ldr	r3, [pc, #404]	; (800c3f4 <SendTxData+0x1934>)
 800c260:	881b      	ldrh	r3, [r3, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	b29a      	uxth	r2, r3
 800c266:	4b63      	ldr	r3, [pc, #396]	; (800c3f4 <SendTxData+0x1934>)
 800c268:	801a      	strh	r2, [r3, #0]
 800c26a:	e175      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 46
 800c26c:	4b61      	ldr	r3, [pc, #388]	; (800c3f4 <SendTxData+0x1934>)
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	2b2e      	cmp	r3, #46	; 0x2e
 800c272:	d10a      	bne.n	800c28a <SendTxData+0x17ca>
								&& esp_buffer[0] == 'P') {
 800c274:	4b60      	ldr	r3, [pc, #384]	; (800c3f8 <SendTxData+0x1938>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b50      	cmp	r3, #80	; 0x50
 800c27a:	d106      	bne.n	800c28a <SendTxData+0x17ca>
							contador_caracter_esp++;
 800c27c:	4b5d      	ldr	r3, [pc, #372]	; (800c3f4 <SendTxData+0x1934>)
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	b29a      	uxth	r2, r3
 800c284:	4b5b      	ldr	r3, [pc, #364]	; (800c3f4 <SendTxData+0x1934>)
 800c286:	801a      	strh	r2, [r3, #0]
 800c288:	e166      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 47
 800c28a:	4b5a      	ldr	r3, [pc, #360]	; (800c3f4 <SendTxData+0x1934>)
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	2b2f      	cmp	r3, #47	; 0x2f
 800c290:	d10a      	bne.n	800c2a8 <SendTxData+0x17e8>
								&& esp_buffer[0] == ':') {
 800c292:	4b59      	ldr	r3, [pc, #356]	; (800c3f8 <SendTxData+0x1938>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b3a      	cmp	r3, #58	; 0x3a
 800c298:	d106      	bne.n	800c2a8 <SendTxData+0x17e8>
							contador_caracter_esp++;
 800c29a:	4b56      	ldr	r3, [pc, #344]	; (800c3f4 <SendTxData+0x1934>)
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	4b54      	ldr	r3, [pc, #336]	; (800c3f4 <SendTxData+0x1934>)
 800c2a4:	801a      	strh	r2, [r3, #0]
 800c2a6:	e157      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 48
 800c2a8:	4b52      	ldr	r3, [pc, #328]	; (800c3f4 <SendTxData+0x1934>)
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	2b30      	cmp	r3, #48	; 0x30
 800c2ae:	d10a      	bne.n	800c2c6 <SendTxData+0x1806>
								&& esp_buffer[0] == '(') {
 800c2b0:	4b51      	ldr	r3, [pc, #324]	; (800c3f8 <SendTxData+0x1938>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b28      	cmp	r3, #40	; 0x28
 800c2b6:	d106      	bne.n	800c2c6 <SendTxData+0x1806>
							contador_caracter_esp++;
 800c2b8:	4b4e      	ldr	r3, [pc, #312]	; (800c3f4 <SendTxData+0x1934>)
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	4b4c      	ldr	r3, [pc, #304]	; (800c3f4 <SendTxData+0x1934>)
 800c2c2:	801a      	strh	r2, [r3, #0]
 800c2c4:	e148      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 49
 800c2c6:	4b4b      	ldr	r3, [pc, #300]	; (800c3f4 <SendTxData+0x1934>)
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	2b31      	cmp	r3, #49	; 0x31
 800c2cc:	d10a      	bne.n	800c2e4 <SendTxData+0x1824>
								&& esp_buffer[0] == '"') {
 800c2ce:	4b4a      	ldr	r3, [pc, #296]	; (800c3f8 <SendTxData+0x1938>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b22      	cmp	r3, #34	; 0x22
 800c2d4:	d106      	bne.n	800c2e4 <SendTxData+0x1824>
							contador_caracter_esp++;
 800c2d6:	4b47      	ldr	r3, [pc, #284]	; (800c3f4 <SendTxData+0x1934>)
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	4b45      	ldr	r3, [pc, #276]	; (800c3f4 <SendTxData+0x1934>)
 800c2e0:	801a      	strh	r2, [r3, #0]
 800c2e2:	e139      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 50) {
 800c2e4:	4b43      	ldr	r3, [pc, #268]	; (800c3f4 <SendTxData+0x1934>)
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	2b32      	cmp	r3, #50	; 0x32
 800c2ea:	d10a      	bne.n	800c302 <SendTxData+0x1842>
							mac2[0] = esp_buffer[0];
 800c2ec:	4b42      	ldr	r3, [pc, #264]	; (800c3f8 <SendTxData+0x1938>)
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	4b42      	ldr	r3, [pc, #264]	; (800c3fc <SendTxData+0x193c>)
 800c2f2:	701a      	strb	r2, [r3, #0]
							contador_caracter_esp++;
 800c2f4:	4b3f      	ldr	r3, [pc, #252]	; (800c3f4 <SendTxData+0x1934>)
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	4b3d      	ldr	r3, [pc, #244]	; (800c3f4 <SendTxData+0x1934>)
 800c2fe:	801a      	strh	r2, [r3, #0]
 800c300:	e12a      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 51) {
 800c302:	4b3c      	ldr	r3, [pc, #240]	; (800c3f4 <SendTxData+0x1934>)
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	2b33      	cmp	r3, #51	; 0x33
 800c308:	d10a      	bne.n	800c320 <SendTxData+0x1860>
							mac2[1] = esp_buffer[0];
 800c30a:	4b3b      	ldr	r3, [pc, #236]	; (800c3f8 <SendTxData+0x1938>)
 800c30c:	781a      	ldrb	r2, [r3, #0]
 800c30e:	4b3b      	ldr	r3, [pc, #236]	; (800c3fc <SendTxData+0x193c>)
 800c310:	705a      	strb	r2, [r3, #1]
							contador_caracter_esp++;
 800c312:	4b38      	ldr	r3, [pc, #224]	; (800c3f4 <SendTxData+0x1934>)
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	3301      	adds	r3, #1
 800c318:	b29a      	uxth	r2, r3
 800c31a:	4b36      	ldr	r3, [pc, #216]	; (800c3f4 <SendTxData+0x1934>)
 800c31c:	801a      	strh	r2, [r3, #0]
 800c31e:	e11b      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 52
 800c320:	4b34      	ldr	r3, [pc, #208]	; (800c3f4 <SendTxData+0x1934>)
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	2b34      	cmp	r3, #52	; 0x34
 800c326:	d10a      	bne.n	800c33e <SendTxData+0x187e>
								&& esp_buffer[0] == ':') {
 800c328:	4b33      	ldr	r3, [pc, #204]	; (800c3f8 <SendTxData+0x1938>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b3a      	cmp	r3, #58	; 0x3a
 800c32e:	d106      	bne.n	800c33e <SendTxData+0x187e>
							contador_caracter_esp++;
 800c330:	4b30      	ldr	r3, [pc, #192]	; (800c3f4 <SendTxData+0x1934>)
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	3301      	adds	r3, #1
 800c336:	b29a      	uxth	r2, r3
 800c338:	4b2e      	ldr	r3, [pc, #184]	; (800c3f4 <SendTxData+0x1934>)
 800c33a:	801a      	strh	r2, [r3, #0]
 800c33c:	e10c      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 53) {
 800c33e:	4b2d      	ldr	r3, [pc, #180]	; (800c3f4 <SendTxData+0x1934>)
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	2b35      	cmp	r3, #53	; 0x35
 800c344:	d10a      	bne.n	800c35c <SendTxData+0x189c>
							mac2[2] = esp_buffer[0];
 800c346:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <SendTxData+0x1938>)
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	4b2c      	ldr	r3, [pc, #176]	; (800c3fc <SendTxData+0x193c>)
 800c34c:	709a      	strb	r2, [r3, #2]
							contador_caracter_esp++;
 800c34e:	4b29      	ldr	r3, [pc, #164]	; (800c3f4 <SendTxData+0x1934>)
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	3301      	adds	r3, #1
 800c354:	b29a      	uxth	r2, r3
 800c356:	4b27      	ldr	r3, [pc, #156]	; (800c3f4 <SendTxData+0x1934>)
 800c358:	801a      	strh	r2, [r3, #0]
 800c35a:	e0fd      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 54) {
 800c35c:	4b25      	ldr	r3, [pc, #148]	; (800c3f4 <SendTxData+0x1934>)
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	2b36      	cmp	r3, #54	; 0x36
 800c362:	d10a      	bne.n	800c37a <SendTxData+0x18ba>
							mac2[3] = esp_buffer[0];
 800c364:	4b24      	ldr	r3, [pc, #144]	; (800c3f8 <SendTxData+0x1938>)
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	4b24      	ldr	r3, [pc, #144]	; (800c3fc <SendTxData+0x193c>)
 800c36a:	70da      	strb	r2, [r3, #3]
							contador_caracter_esp++;
 800c36c:	4b21      	ldr	r3, [pc, #132]	; (800c3f4 <SendTxData+0x1934>)
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	3301      	adds	r3, #1
 800c372:	b29a      	uxth	r2, r3
 800c374:	4b1f      	ldr	r3, [pc, #124]	; (800c3f4 <SendTxData+0x1934>)
 800c376:	801a      	strh	r2, [r3, #0]
 800c378:	e0ee      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 55
 800c37a:	4b1e      	ldr	r3, [pc, #120]	; (800c3f4 <SendTxData+0x1934>)
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	2b37      	cmp	r3, #55	; 0x37
 800c380:	d10a      	bne.n	800c398 <SendTxData+0x18d8>
								&& esp_buffer[0] == ':') {
 800c382:	4b1d      	ldr	r3, [pc, #116]	; (800c3f8 <SendTxData+0x1938>)
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	2b3a      	cmp	r3, #58	; 0x3a
 800c388:	d106      	bne.n	800c398 <SendTxData+0x18d8>
							contador_caracter_esp++;
 800c38a:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <SendTxData+0x1934>)
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	3301      	adds	r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	4b18      	ldr	r3, [pc, #96]	; (800c3f4 <SendTxData+0x1934>)
 800c394:	801a      	strh	r2, [r3, #0]
 800c396:	e0df      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 56) {
 800c398:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <SendTxData+0x1934>)
 800c39a:	881b      	ldrh	r3, [r3, #0]
 800c39c:	2b38      	cmp	r3, #56	; 0x38
 800c39e:	d10a      	bne.n	800c3b6 <SendTxData+0x18f6>
							mac2[4] = esp_buffer[0];
 800c3a0:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <SendTxData+0x1938>)
 800c3a2:	781a      	ldrb	r2, [r3, #0]
 800c3a4:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <SendTxData+0x193c>)
 800c3a6:	711a      	strb	r2, [r3, #4]
							contador_caracter_esp++;
 800c3a8:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <SendTxData+0x1934>)
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <SendTxData+0x1934>)
 800c3b2:	801a      	strh	r2, [r3, #0]
 800c3b4:	e0d0      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 57) {
 800c3b6:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <SendTxData+0x1934>)
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	2b39      	cmp	r3, #57	; 0x39
 800c3bc:	d10a      	bne.n	800c3d4 <SendTxData+0x1914>
							mac2[5] = esp_buffer[0];
 800c3be:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <SendTxData+0x1938>)
 800c3c0:	781a      	ldrb	r2, [r3, #0]
 800c3c2:	4b0e      	ldr	r3, [pc, #56]	; (800c3fc <SendTxData+0x193c>)
 800c3c4:	715a      	strb	r2, [r3, #5]
							contador_caracter_esp++;
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <SendTxData+0x1934>)
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <SendTxData+0x1934>)
 800c3d0:	801a      	strh	r2, [r3, #0]
 800c3d2:	e0c1      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 58
 800c3d4:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <SendTxData+0x1934>)
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	2b3a      	cmp	r3, #58	; 0x3a
 800c3da:	d111      	bne.n	800c400 <SendTxData+0x1940>
								&& esp_buffer[0] == ':') {
 800c3dc:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <SendTxData+0x1938>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b3a      	cmp	r3, #58	; 0x3a
 800c3e2:	d10d      	bne.n	800c400 <SendTxData+0x1940>
							contador_caracter_esp++;
 800c3e4:	4b03      	ldr	r3, [pc, #12]	; (800c3f4 <SendTxData+0x1934>)
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	4b01      	ldr	r3, [pc, #4]	; (800c3f4 <SendTxData+0x1934>)
 800c3ee:	801a      	strh	r2, [r3, #0]
 800c3f0:	e0b2      	b.n	800c558 <SendTxData+0x1a98>
 800c3f2:	bf00      	nop
 800c3f4:	20000712 	.word	0x20000712
 800c3f8:	20000714 	.word	0x20000714
 800c3fc:	20000728 	.word	0x20000728
						} else if (contador_caracter_esp == 59) {
 800c400:	4b9b      	ldr	r3, [pc, #620]	; (800c670 <SendTxData+0x1bb0>)
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	2b3b      	cmp	r3, #59	; 0x3b
 800c406:	d10a      	bne.n	800c41e <SendTxData+0x195e>
							mac2[6] = esp_buffer[0];
 800c408:	4b9a      	ldr	r3, [pc, #616]	; (800c674 <SendTxData+0x1bb4>)
 800c40a:	781a      	ldrb	r2, [r3, #0]
 800c40c:	4b9a      	ldr	r3, [pc, #616]	; (800c678 <SendTxData+0x1bb8>)
 800c40e:	719a      	strb	r2, [r3, #6]
							contador_caracter_esp++;
 800c410:	4b97      	ldr	r3, [pc, #604]	; (800c670 <SendTxData+0x1bb0>)
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	b29a      	uxth	r2, r3
 800c418:	4b95      	ldr	r3, [pc, #596]	; (800c670 <SendTxData+0x1bb0>)
 800c41a:	801a      	strh	r2, [r3, #0]
 800c41c:	e09c      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 60) {
 800c41e:	4b94      	ldr	r3, [pc, #592]	; (800c670 <SendTxData+0x1bb0>)
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	2b3c      	cmp	r3, #60	; 0x3c
 800c424:	d10a      	bne.n	800c43c <SendTxData+0x197c>
							mac2[7] = esp_buffer[0];
 800c426:	4b93      	ldr	r3, [pc, #588]	; (800c674 <SendTxData+0x1bb4>)
 800c428:	781a      	ldrb	r2, [r3, #0]
 800c42a:	4b93      	ldr	r3, [pc, #588]	; (800c678 <SendTxData+0x1bb8>)
 800c42c:	71da      	strb	r2, [r3, #7]
							contador_caracter_esp++;
 800c42e:	4b90      	ldr	r3, [pc, #576]	; (800c670 <SendTxData+0x1bb0>)
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	b29a      	uxth	r2, r3
 800c436:	4b8e      	ldr	r3, [pc, #568]	; (800c670 <SendTxData+0x1bb0>)
 800c438:	801a      	strh	r2, [r3, #0]
 800c43a:	e08d      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 61
 800c43c:	4b8c      	ldr	r3, [pc, #560]	; (800c670 <SendTxData+0x1bb0>)
 800c43e:	881b      	ldrh	r3, [r3, #0]
 800c440:	2b3d      	cmp	r3, #61	; 0x3d
 800c442:	d10a      	bne.n	800c45a <SendTxData+0x199a>
								&& esp_buffer[0] == ':') {
 800c444:	4b8b      	ldr	r3, [pc, #556]	; (800c674 <SendTxData+0x1bb4>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b3a      	cmp	r3, #58	; 0x3a
 800c44a:	d106      	bne.n	800c45a <SendTxData+0x199a>
							contador_caracter_esp++;
 800c44c:	4b88      	ldr	r3, [pc, #544]	; (800c670 <SendTxData+0x1bb0>)
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	3301      	adds	r3, #1
 800c452:	b29a      	uxth	r2, r3
 800c454:	4b86      	ldr	r3, [pc, #536]	; (800c670 <SendTxData+0x1bb0>)
 800c456:	801a      	strh	r2, [r3, #0]
 800c458:	e07e      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 62) {
 800c45a:	4b85      	ldr	r3, [pc, #532]	; (800c670 <SendTxData+0x1bb0>)
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	2b3e      	cmp	r3, #62	; 0x3e
 800c460:	d10a      	bne.n	800c478 <SendTxData+0x19b8>
							mac2[8] = esp_buffer[0];
 800c462:	4b84      	ldr	r3, [pc, #528]	; (800c674 <SendTxData+0x1bb4>)
 800c464:	781a      	ldrb	r2, [r3, #0]
 800c466:	4b84      	ldr	r3, [pc, #528]	; (800c678 <SendTxData+0x1bb8>)
 800c468:	721a      	strb	r2, [r3, #8]
							contador_caracter_esp++;
 800c46a:	4b81      	ldr	r3, [pc, #516]	; (800c670 <SendTxData+0x1bb0>)
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	3301      	adds	r3, #1
 800c470:	b29a      	uxth	r2, r3
 800c472:	4b7f      	ldr	r3, [pc, #508]	; (800c670 <SendTxData+0x1bb0>)
 800c474:	801a      	strh	r2, [r3, #0]
 800c476:	e06f      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 63) {
 800c478:	4b7d      	ldr	r3, [pc, #500]	; (800c670 <SendTxData+0x1bb0>)
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	2b3f      	cmp	r3, #63	; 0x3f
 800c47e:	d10a      	bne.n	800c496 <SendTxData+0x19d6>
							mac2[9] = esp_buffer[0];
 800c480:	4b7c      	ldr	r3, [pc, #496]	; (800c674 <SendTxData+0x1bb4>)
 800c482:	781a      	ldrb	r2, [r3, #0]
 800c484:	4b7c      	ldr	r3, [pc, #496]	; (800c678 <SendTxData+0x1bb8>)
 800c486:	725a      	strb	r2, [r3, #9]
							contador_caracter_esp++;
 800c488:	4b79      	ldr	r3, [pc, #484]	; (800c670 <SendTxData+0x1bb0>)
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	b29a      	uxth	r2, r3
 800c490:	4b77      	ldr	r3, [pc, #476]	; (800c670 <SendTxData+0x1bb0>)
 800c492:	801a      	strh	r2, [r3, #0]
 800c494:	e060      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 64
 800c496:	4b76      	ldr	r3, [pc, #472]	; (800c670 <SendTxData+0x1bb0>)
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	2b40      	cmp	r3, #64	; 0x40
 800c49c:	d10a      	bne.n	800c4b4 <SendTxData+0x19f4>
								&& esp_buffer[0] == ':') {
 800c49e:	4b75      	ldr	r3, [pc, #468]	; (800c674 <SendTxData+0x1bb4>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b3a      	cmp	r3, #58	; 0x3a
 800c4a4:	d106      	bne.n	800c4b4 <SendTxData+0x19f4>
							contador_caracter_esp++;
 800c4a6:	4b72      	ldr	r3, [pc, #456]	; (800c670 <SendTxData+0x1bb0>)
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	4b70      	ldr	r3, [pc, #448]	; (800c670 <SendTxData+0x1bb0>)
 800c4b0:	801a      	strh	r2, [r3, #0]
 800c4b2:	e051      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 65) {
 800c4b4:	4b6e      	ldr	r3, [pc, #440]	; (800c670 <SendTxData+0x1bb0>)
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	2b41      	cmp	r3, #65	; 0x41
 800c4ba:	d10a      	bne.n	800c4d2 <SendTxData+0x1a12>
							mac2[10] = esp_buffer[0];
 800c4bc:	4b6d      	ldr	r3, [pc, #436]	; (800c674 <SendTxData+0x1bb4>)
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	4b6d      	ldr	r3, [pc, #436]	; (800c678 <SendTxData+0x1bb8>)
 800c4c2:	729a      	strb	r2, [r3, #10]
							contador_caracter_esp++;
 800c4c4:	4b6a      	ldr	r3, [pc, #424]	; (800c670 <SendTxData+0x1bb0>)
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	4b68      	ldr	r3, [pc, #416]	; (800c670 <SendTxData+0x1bb0>)
 800c4ce:	801a      	strh	r2, [r3, #0]
 800c4d0:	e042      	b.n	800c558 <SendTxData+0x1a98>
						} else if (contador_caracter_esp == 66) {
 800c4d2:	4b67      	ldr	r3, [pc, #412]	; (800c670 <SendTxData+0x1bb0>)
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	2b42      	cmp	r3, #66	; 0x42
 800c4d8:	d13b      	bne.n	800c552 <SendTxData+0x1a92>
							AppData.BufferSize = 21;
 800c4da:	4b68      	ldr	r3, [pc, #416]	; (800c67c <SendTxData+0x1bbc>)
 800c4dc:	2215      	movs	r2, #21
 800c4de:	705a      	strb	r2, [r3, #1]
							mac2[11] = esp_buffer[0];
 800c4e0:	4b64      	ldr	r3, [pc, #400]	; (800c674 <SendTxData+0x1bb4>)
 800c4e2:	781a      	ldrb	r2, [r3, #0]
 800c4e4:	4b64      	ldr	r3, [pc, #400]	; (800c678 <SendTxData+0x1bb8>)
 800c4e6:	72da      	strb	r2, [r3, #11]
							contador_caracter_esp++;
 800c4e8:	4b61      	ldr	r3, [pc, #388]	; (800c670 <SendTxData+0x1bb0>)
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	4b5f      	ldr	r3, [pc, #380]	; (800c670 <SendTxData+0x1bb0>)
 800c4f2:	801a      	strh	r2, [r3, #0]

							for (int i = 0; i < 6; i++) {
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c4fa:	e022      	b.n	800c542 <SendTxData+0x1a82>
								mac2[12 - (2 * i)] = '\0';
 800c4fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c500:	f1c3 0306 	rsb	r3, r3, #6
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4a5c      	ldr	r2, [pc, #368]	; (800c678 <SendTxData+0x1bb8>)
 800c508:	2100      	movs	r1, #0
 800c50a:	54d1      	strb	r1, [r2, r3]
								AppData.Buffer[20 - i] = (uint8_t) strtol(
										&mac2[10 - (2 * i)], NULL, 16);
 800c50c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c510:	f1c3 0305 	rsb	r3, r3, #5
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	4a58      	ldr	r2, [pc, #352]	; (800c678 <SendTxData+0x1bb8>)
 800c518:	4413      	add	r3, r2
								AppData.Buffer[20 - i] = (uint8_t) strtol(
 800c51a:	2210      	movs	r2, #16
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f011 fcda 	bl	801ded8 <strtol>
 800c524:	4601      	mov	r1, r0
 800c526:	4b55      	ldr	r3, [pc, #340]	; (800c67c <SendTxData+0x1bbc>)
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c52e:	f1c2 0214 	rsb	r2, r2, #20
 800c532:	4413      	add	r3, r2
 800c534:	b2ca      	uxtb	r2, r1
 800c536:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 6; i++) {
 800c538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c53c:	3301      	adds	r3, #1
 800c53e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c546:	2b05      	cmp	r3, #5
 800c548:	ddd8      	ble.n	800c4fc <SendTxData+0x1a3c>
							}

							esp_mac_conseguido = 1;
 800c54a:	4b4d      	ldr	r3, [pc, #308]	; (800c680 <SendTxData+0x1bc0>)
 800c54c:	2201      	movs	r2, #1
 800c54e:	701a      	strb	r2, [r3, #0]
							break;
 800c550:	e024      	b.n	800c59c <SendTxData+0x1adc>
						} else {
							estado_esp = 0;
 800c552:	4b4c      	ldr	r3, [pc, #304]	; (800c684 <SendTxData+0x1bc4>)
 800c554:	2200      	movs	r2, #0
 800c556:	801a      	strh	r2, [r3, #0]
						}
						esp_byte_recibido = 0;
 800c558:	4b4b      	ldr	r3, [pc, #300]	; (800c688 <SendTxData+0x1bc8>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Receive_IT(&huart1, (uint8_t*) esp_buffer, 1);
 800c55e:	2201      	movs	r2, #1
 800c560:	4944      	ldr	r1, [pc, #272]	; (800c674 <SendTxData+0x1bb4>)
 800c562:	484a      	ldr	r0, [pc, #296]	; (800c68c <SendTxData+0x1bcc>)
 800c564:	f7fb fcf8 	bl	8007f58 <HAL_UART_Receive_IT>
 800c568:	e017      	b.n	800c59a <SendTxData+0x1ada>
					} else if (SysTimeGet().Seconds - tiempoParcial.Seconds
 800c56a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c56e:	4618      	mov	r0, r3
 800c570:	f00f fbe6 	bl	801bd40 <SysTimeGet>
 800c574:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d90d      	bls.n	800c59a <SendTxData+0x1ada>
							> 2) {
						tiempoParcial = SysTimeGet();
 800c57e:	463b      	mov	r3, r7
 800c580:	4618      	mov	r0, r3
 800c582:	f00f fbdd 	bl	801bd40 <SysTimeGet>
 800c586:	f107 030c 	add.w	r3, r7, #12
 800c58a:	463a      	mov	r2, r7
 800c58c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c590:	e883 0003 	stmia.w	r3, {r0, r1}
						estado_esp = 0;
 800c594:	4b3b      	ldr	r3, [pc, #236]	; (800c684 <SendTxData+0x1bc4>)
 800c596:	2200      	movs	r2, #0
 800c598:	801a      	strh	r2, [r3, #0]
					}
					break;
 800c59a:	bf00      	nop
			while (esp_mac_conseguido == 0
 800c59c:	4b38      	ldr	r3, [pc, #224]	; (800c680 <SendTxData+0x1bc0>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d110      	bne.n	800c5c6 <SendTxData+0x1b06>
					&& (SysTimeGet().Seconds - tiempoActual.Seconds
 800c5a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f00f fbc9 	bl	801bd40 <SysTimeGet>
 800c5ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	1ad3      	subs	r3, r2, r3
							< tiempo_maximo_ESP && (esp_mac_conseguido == 0))) {
 800c5b4:	4a36      	ldr	r2, [pc, #216]	; (800c690 <SendTxData+0x1bd0>)
 800c5b6:	6812      	ldr	r2, [r2, #0]
					&& (SysTimeGet().Seconds - tiempoActual.Seconds
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d204      	bcs.n	800c5c6 <SendTxData+0x1b06>
							< tiempo_maximo_ESP && (esp_mac_conseguido == 0))) {
 800c5bc:	4b30      	ldr	r3, [pc, #192]	; (800c680 <SendTxData+0x1bc0>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f43e ae88 	beq.w	800b2d6 <SendTxData+0x816>
				}
			}
			//APP_LOG(TS_ON, VLEVEL_L, "ESP APAGADO\r\n");
			HAL_GPIO_WritePin(EN_ESP_GPIO_Port, EN_ESP_Pin, GPIO_PIN_RESET);
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2102      	movs	r1, #2
 800c5ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c5ce:	f7f8 ff9d 	bl	800550c <HAL_GPIO_WritePin>
		}

	}

	LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c5d2:	23ff      	movs	r3, #255	; 0xff
 800c5d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	UTIL_TIMER_Time_t nextTxIn = 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	AppData.Port = LORAWAN_USER_APP_PORT;
 800c5de:	4b27      	ldr	r3, [pc, #156]	; (800c67c <SendTxData+0x1bbc>)
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	701a      	strb	r2, [r3, #0]
	status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, true);
 800c5e4:	4b2b      	ldr	r3, [pc, #172]	; (800c694 <SendTxData+0x1bd4>)
 800c5e6:	78db      	ldrb	r3, [r3, #3]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4823      	ldr	r0, [pc, #140]	; (800c67c <SendTxData+0x1bbc>)
 800c5ee:	f001 ffa1 	bl	800e534 <LmHandlerSend>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (LORAMAC_HANDLER_SUCCESS == status) {
 800c5f8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <SendTxData+0x1b52>
		APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
	} else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status) {
 800c600:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800c604:	f113 0f06 	cmn.w	r3, #6
 800c608:	d103      	bne.n	800c612 <SendTxData+0x1b52>
		nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c60a:	f001 feed 	bl	800e3e8 <LmHandlerGetDutyCycleWaitTime>
 800c60e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n",
					(nextTxIn / 1000));
		}
	}

	UTIL_TIMER_Stop(&TxTimer);
 800c612:	4821      	ldr	r0, [pc, #132]	; (800c698 <SendTxData+0x1bd8>)
 800c614:	f010 f900 	bl	801c818 <UTIL_TIMER_Stop>
	if (modo_de_funcionamiento == 1 || cambiar_a_modo_alarma == 1) {
 800c618:	4b20      	ldr	r3, [pc, #128]	; (800c69c <SendTxData+0x1bdc>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d003      	beq.n	800c628 <SendTxData+0x1b68>
 800c620:	4b1f      	ldr	r3, [pc, #124]	; (800c6a0 <SendTxData+0x1be0>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d111      	bne.n	800c64c <SendTxData+0x1b8c>
		APP_LOG(TS_ON, VLEVEL_L, "MODO ALARMA ACTIVADO\r\n");
		UTIL_TIMER_SetPeriod(&TxTimer, MAX(heartbeat_alarma, nextTxIn));
 800c628:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <SendTxData+0x1be4>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c630:	4293      	cmp	r3, r2
 800c632:	bf38      	it	cc
 800c634:	4613      	movcc	r3, r2
 800c636:	4619      	mov	r1, r3
 800c638:	4817      	ldr	r0, [pc, #92]	; (800c698 <SendTxData+0x1bd8>)
 800c63a:	f010 f95d 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
		cambiar_a_modo_alarma = 0;
 800c63e:	4b18      	ldr	r3, [pc, #96]	; (800c6a0 <SendTxData+0x1be0>)
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
		modo_de_funcionamiento = 1;
 800c644:	4b15      	ldr	r3, [pc, #84]	; (800c69c <SendTxData+0x1bdc>)
 800c646:	2201      	movs	r2, #1
 800c648:	701a      	strb	r2, [r3, #0]
 800c64a:	e00a      	b.n	800c662 <SendTxData+0x1ba2>
	} else {
		APP_LOG(TS_ON, VLEVEL_L, "MODO REPOSO ACTIVADO\r\n");
		UTIL_TIMER_SetPeriod(&TxTimer, MAX(heartbeat_reposo, nextTxIn));
 800c64c:	4b16      	ldr	r3, [pc, #88]	; (800c6a8 <SendTxData+0x1be8>)
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c654:	4293      	cmp	r3, r2
 800c656:	bf38      	it	cc
 800c658:	4613      	movcc	r3, r2
 800c65a:	4619      	mov	r1, r3
 800c65c:	480e      	ldr	r0, [pc, #56]	; (800c698 <SendTxData+0x1bd8>)
 800c65e:	f010 f94b 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
	}
	UTIL_TIMER_Start(&TxTimer);
 800c662:	480d      	ldr	r0, [pc, #52]	; (800c698 <SendTxData+0x1bd8>)
 800c664:	f010 f86a 	bl	801c73c <UTIL_TIMER_Start>

  /* USER CODE END SendTxData_1 */
}
 800c668:	bf00      	nop
 800c66a:	3798      	adds	r7, #152	; 0x98
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bdb0      	pop	{r4, r5, r7, pc}
 800c670:	20000712 	.word	0x20000712
 800c674:	20000714 	.word	0x20000714
 800c678:	20000728 	.word	0x20000728
 800c67c:	20000074 	.word	0x20000074
 800c680:	20000715 	.word	0x20000715
 800c684:	20000742 	.word	0x20000742
 800c688:	20000716 	.word	0x20000716
 800c68c:	200003f4 	.word	0x200003f4
 800c690:	2000008c 	.word	0x2000008c
 800c694:	20000058 	.word	0x20000058
 800c698:	2000059c 	.word	0x2000059c
 800c69c:	2000070f 	.word	0x2000070f
 800c6a0:	20000710 	.word	0x20000710
 800c6a4:	20000080 	.word	0x20000080
 800c6a8:	2000007c 	.word	0x2000007c

0800c6ac <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	2002      	movs	r0, #2
 800c6b8:	f00f ff88 	bl	801c5cc <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c6bc:	4804      	ldr	r0, [pc, #16]	; (800c6d0 <OnTxTimerEvent+0x24>)
 800c6be:	f010 f83d 	bl	801c73c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */
	//Detengo el timer porque lo voy a arrancar
	//al terminar el envío en SendTxData
	UTIL_TIMER_Stop(&TxTimer);
 800c6c2:	4803      	ldr	r0, [pc, #12]	; (800c6d0 <OnTxTimerEvent+0x24>)
 800c6c4:	f010 f8a8 	bl	801c818 <UTIL_TIMER_Stop>

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	2000059c 	.word	0x2000059c

0800c6d4 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bc80      	pop	{r7}
 800c6e4:	4770      	bx	lr

0800c6e6 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 800c6ee:	bf00      	nop
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr

0800c6f8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	bc80      	pop	{r7}
 800c708:	4770      	bx	lr

0800c70a <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b083      	sub	sp, #12
 800c70e:	af00      	add	r7, sp, #0
 800c710:	4603      	mov	r3, r0
 800c712:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	bc80      	pop	{r7}
 800c71c:	4770      	bx	lr

0800c71e <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c722:	2100      	movs	r1, #0
 800c724:	2001      	movs	r0, #1
 800c726:	f00f ff51 	bl	801c5cc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c72a:	bf00      	nop
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c738:	4a0d      	ldr	r2, [pc, #52]	; (800c770 <OnTxPeriodicityChanged+0x40>)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c73e:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <OnTxPeriodicityChanged+0x40>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d103      	bne.n	800c74e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c746:	4b0a      	ldr	r3, [pc, #40]	; (800c770 <OnTxPeriodicityChanged+0x40>)
 800c748:	f242 7210 	movw	r2, #10000	; 0x2710
 800c74c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c74e:	4809      	ldr	r0, [pc, #36]	; (800c774 <OnTxPeriodicityChanged+0x44>)
 800c750:	f010 f862 	bl	801c818 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c754:	4b06      	ldr	r3, [pc, #24]	; (800c770 <OnTxPeriodicityChanged+0x40>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	4806      	ldr	r0, [pc, #24]	; (800c774 <OnTxPeriodicityChanged+0x44>)
 800c75c:	f010 f8cc 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c760:	4804      	ldr	r0, [pc, #16]	; (800c774 <OnTxPeriodicityChanged+0x44>)
 800c762:	f00f ffeb 	bl	801c73c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000070 	.word	0x20000070
 800c774:	2000059c 	.word	0x2000059c

0800c778 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c782:	4a04      	ldr	r2, [pc, #16]	; (800c794 <OnTxFrameCtrlChanged+0x1c>)
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bc80      	pop	{r7}
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	20000058 	.word	0x20000058

0800c798 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c7a2:	4a04      	ldr	r2, [pc, #16]	; (800c7b4 <OnPingSlotPeriodicityChanged+0x1c>)
 800c7a4:	79fb      	ldrb	r3, [r7, #7]
 800c7a6:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	20000058 	.word	0x20000058

0800c7b8 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c7bc:	f002 fb83 	bl	800eec6 <LmHandlerHalt>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d106      	bne.n	800c7d4 <OnSystemReset+0x1c>
 800c7c6:	f001 fe99 	bl	800e4fc <LmHandlerJoinStatus>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d101      	bne.n	800c7d4 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c7d0:	f7fd fe86 	bl	800a4e0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c7d4:	bf00      	nop
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <StopJoin>:

static void StopJoin(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c7dc:	480d      	ldr	r0, [pc, #52]	; (800c814 <StopJoin+0x3c>)
 800c7de:	f010 f81b 	bl	801c818 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c7e2:	f002 fb63 	bl	800eeac <LmHandlerStop>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10e      	bne.n	800c80a <StopJoin+0x32>
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
    if (LORAWAN_DEFAULT_ACTIVATION_TYPE == ACTIVATION_TYPE_ABP)
    {
      ActivationType = ACTIVATION_TYPE_OTAA;
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <StopJoin+0x40>)
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	701a      	strb	r2, [r3, #0]
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c7f2:	480a      	ldr	r0, [pc, #40]	; (800c81c <StopJoin+0x44>)
 800c7f4:	f001 fcde 	bl	800e1b4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <StopJoin+0x40>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	4618      	mov	r0, r3
 800c800:	f001 fdfc 	bl	800e3fc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c804:	4803      	ldr	r0, [pc, #12]	; (800c814 <StopJoin+0x3c>)
 800c806:	f00f ff99 	bl	801c73c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c80a:	4805      	ldr	r0, [pc, #20]	; (800c820 <StopJoin+0x48>)
 800c80c:	f00f ff96 	bl	801c73c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c810:	bf00      	nop
 800c812:	bd80      	pop	{r7, pc}
 800c814:	2000059c 	.word	0x2000059c
 800c818:	20000009 	.word	0x20000009
 800c81c:	20000058 	.word	0x20000058
 800c820:	200005b4 	.word	0x200005b4

0800c824 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c82c:	4b05      	ldr	r3, [pc, #20]	; (800c844 <OnStopJoinTimerEvent+0x20>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d103      	bne.n	800c83c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c834:	2100      	movs	r1, #0
 800c836:	2008      	movs	r0, #8
 800c838:	f00f fec8 	bl	801c5cc <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20000009 	.word	0x20000009

0800c848 <StoreContext>:

static void StoreContext(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c84e:	23ff      	movs	r3, #255	; 0xff
 800c850:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c852:	f002 fb59 	bl	800ef08 <LmHandlerNvmDataStore>
 800c856:	4603      	mov	r3, r0
 800c858:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	4603      	mov	r3, r0
 800c86a:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	bc80      	pop	{r7}
 800c874:	4770      	bx	lr
	...

0800c878 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800c882:	f7f8 f9f7 	bl	8004c74 <HAL_FLASH_Unlock>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d11c      	bne.n	800c8c6 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800c88c:	4b10      	ldr	r3, [pc, #64]	; (800c8d0 <OnStoreContextRequest+0x58>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	029a      	lsls	r2, r3, #10
 800c892:	4b10      	ldr	r3, [pc, #64]	; (800c8d4 <OnStoreContextRequest+0x5c>)
 800c894:	4013      	ands	r3, r2
 800c896:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800c89a:	fbb2 f1f3 	udiv	r1, r2, r3
 800c89e:	fb01 f303 	mul.w	r3, r1, r3
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	0adb      	lsrs	r3, r3, #11
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7f4 ff53 	bl	8001756 <FLASH_IF_EraseByPages>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d105      	bne.n	800c8c2 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	6879      	ldr	r1, [r7, #4]
 800c8bc:	4806      	ldr	r0, [pc, #24]	; (800c8d8 <OnStoreContextRequest+0x60>)
 800c8be:	f7f4 fe69 	bl	8001594 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800c8c2:	f7f8 f9f9 	bl	8004cb8 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c8c6:	bf00      	nop
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	1fff75e0 	.word	0x1fff75e0
 800c8d4:	03fffc00 	.word	0x03fffc00
 800c8d8:	0803f000 	.word	0x0803f000

0800c8dc <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4903      	ldr	r1, [pc, #12]	; (800c8fc <OnRestoreContextRequest+0x20>)
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f00f f94c 	bl	801bb8c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	0803f000 	.word	0x0803f000

0800c900 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800c904:	4b15      	ldr	r3, [pc, #84]	; (800c95c <LoraInfo_Init+0x5c>)
 800c906:	2200      	movs	r2, #0
 800c908:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c90a:	4b14      	ldr	r3, [pc, #80]	; (800c95c <LoraInfo_Init+0x5c>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c910:	4b12      	ldr	r3, [pc, #72]	; (800c95c <LoraInfo_Init+0x5c>)
 800c912:	2200      	movs	r2, #0
 800c914:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c916:	4b11      	ldr	r3, [pc, #68]	; (800c95c <LoraInfo_Init+0x5c>)
 800c918:	2200      	movs	r2, #0
 800c91a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c91c:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <LoraInfo_Init+0x5c>)
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	f043 0320 	orr.w	r3, r3, #32
 800c924:	4a0d      	ldr	r2, [pc, #52]	; (800c95c <LoraInfo_Init+0x5c>)
 800c926:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c928:	4b0c      	ldr	r3, [pc, #48]	; (800c95c <LoraInfo_Init+0x5c>)
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10c      	bne.n	800c94a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c930:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <LoraInfo_Init+0x60>)
 800c932:	2200      	movs	r2, #0
 800c934:	2100      	movs	r1, #0
 800c936:	2000      	movs	r0, #0
 800c938:	f010 f978 	bl	801cc2c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c93c:	bf00      	nop
 800c93e:	f010 f963 	bl	801cc08 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c942:	4603      	mov	r3, r0
 800c944:	2b01      	cmp	r3, #1
 800c946:	d1fa      	bne.n	800c93e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c948:	e7fe      	b.n	800c948 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c94a:	4b04      	ldr	r3, [pc, #16]	; (800c95c <LoraInfo_Init+0x5c>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800c950:	4b02      	ldr	r3, [pc, #8]	; (800c95c <LoraInfo_Init+0x5c>)
 800c952:	2203      	movs	r2, #3
 800c954:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c956:	bf00      	nop
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	20000744 	.word	0x20000744
 800c960:	08020138 	.word	0x08020138

0800c964 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c964:	b480      	push	{r7}
 800c966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <LoraInfo_GetPtr+0x10>)
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bc80      	pop	{r7}
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20000744 	.word	0x20000744

0800c978 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800c982:	463b      	mov	r3, r7
 800c984:	2200      	movs	r2, #0
 800c986:	601a      	str	r2, [r3, #0]
 800c988:	605a      	str	r2, [r3, #4]
 800c98a:	609a      	str	r2, [r3, #8]
 800c98c:	60da      	str	r2, [r3, #12]
 800c98e:	611a      	str	r2, [r3, #16]

      /* Configure the Radio Switch pin */
        gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800c990:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c994:	603b      	str	r3, [r7, #0]
        gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800c996:	2301      	movs	r3, #1
 800c998:	607b      	str	r3, [r7, #4]
        gpio_init_structure.Pull  = GPIO_NOPULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	60bb      	str	r3, [r7, #8]
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	60fb      	str	r3, [r7, #12]

        HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800c9a2:	463b      	mov	r3, r7
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	480e      	ldr	r0, [pc, #56]	; (800c9e0 <RBI_Init+0x68>)
 800c9a8:	f7f8 fb82 	bl	80050b0 <HAL_GPIO_Init>

        gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800c9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9b0:	603b      	str	r3, [r7, #0]
        HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800c9b2:	463b      	mov	r3, r7
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	480b      	ldr	r0, [pc, #44]	; (800c9e4 <RBI_Init+0x6c>)
 800c9b8:	f7f8 fb7a 	bl	80050b0 <HAL_GPIO_Init>

        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c9c2:	4808      	ldr	r0, [pc, #32]	; (800c9e4 <RBI_Init+0x6c>)
 800c9c4:	f7f8 fda2 	bl	800550c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9ce:	4804      	ldr	r0, [pc, #16]	; (800c9e0 <RBI_Init+0x68>)
 800c9d0:	f7f8 fd9c 	bl	800550c <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c9d4:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	48000400 	.word	0x48000400
 800c9e4:	48000800 	.word	0x48000800

0800c9e8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  switch (Config)
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	d83f      	bhi.n	800ca7c <RBI_ConfigRFSwitch+0x94>
 800c9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <RBI_ConfigRFSwitch+0x1c>)
 800c9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca02:	bf00      	nop
 800ca04:	0800ca15 	.word	0x0800ca15
 800ca08:	0800ca2f 	.word	0x0800ca2f
 800ca0c:	0800ca49 	.word	0x0800ca49
 800ca10:	0800ca63 	.word	0x0800ca63
      {
        case RBI_SWITCH_OFF:
        {
          /* Turn off switch */
          //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: OFF\r\n");
          HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800ca14:	2200      	movs	r2, #0
 800ca16:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca1a:	481b      	ldr	r0, [pc, #108]	; (800ca88 <RBI_ConfigRFSwitch+0xa0>)
 800ca1c:	f7f8 fd76 	bl	800550c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800ca20:	2200      	movs	r2, #0
 800ca22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca26:	4819      	ldr	r0, [pc, #100]	; (800ca8c <RBI_ConfigRFSwitch+0xa4>)
 800ca28:	f7f8 fd70 	bl	800550c <HAL_GPIO_WritePin>
          break;
 800ca2c:	e027      	b.n	800ca7e <RBI_ConfigRFSwitch+0x96>
        }
        case RBI_SWITCH_RX:
        {
          /*Turns On in Rx Mode the RF Switch */
          //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: RX\r\n");
          HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca34:	4814      	ldr	r0, [pc, #80]	; (800ca88 <RBI_ConfigRFSwitch+0xa0>)
 800ca36:	f7f8 fd69 	bl	800550c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca40:	4812      	ldr	r0, [pc, #72]	; (800ca8c <RBI_ConfigRFSwitch+0xa4>)
 800ca42:	f7f8 fd63 	bl	800550c <HAL_GPIO_WritePin>
          break;
 800ca46:	e01a      	b.n	800ca7e <RBI_ConfigRFSwitch+0x96>
        }
        case RBI_SWITCH_RFO_LP:
        {
          /*Turns On in Tx Low Power the RF Switch */
          //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: LP\r\n");
          HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca4e:	480e      	ldr	r0, [pc, #56]	; (800ca88 <RBI_ConfigRFSwitch+0xa0>)
 800ca50:	f7f8 fd5c 	bl	800550c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800ca54:	2201      	movs	r2, #1
 800ca56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca5a:	480c      	ldr	r0, [pc, #48]	; (800ca8c <RBI_ConfigRFSwitch+0xa4>)
 800ca5c:	f7f8 fd56 	bl	800550c <HAL_GPIO_WritePin>
          break;
 800ca60:	e00d      	b.n	800ca7e <RBI_ConfigRFSwitch+0x96>
        }
        case RBI_SWITCH_RFO_HP:
        {
          /*Turns On in Tx High Power the RF Switch */
          //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: HP\r\n");
          HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800ca62:	2200      	movs	r2, #0
 800ca64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca68:	4807      	ldr	r0, [pc, #28]	; (800ca88 <RBI_ConfigRFSwitch+0xa0>)
 800ca6a:	f7f8 fd4f 	bl	800550c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca74:	4805      	ldr	r0, [pc, #20]	; (800ca8c <RBI_ConfigRFSwitch+0xa4>)
 800ca76:	f7f8 fd49 	bl	800550c <HAL_GPIO_WritePin>
          break;
 800ca7a:	e000      	b.n	800ca7e <RBI_ConfigRFSwitch+0x96>
        }
        default:
          break;
 800ca7c:	bf00      	nop
      }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	48000400 	.word	0x48000400
 800ca8c:	48000800 	.word	0x48000800

0800ca90 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800ca96:	2302      	movs	r3, #2
 800ca98:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800ca9a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bc80      	pop	{r7}
 800caa4:	4770      	bx	lr

0800caa6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800caac:	2300      	movs	r3, #0
 800caae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800cab0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bc80      	pop	{r7}
 800caba:	4770      	bx	lr

0800cabc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800cac2:	2301      	movs	r3, #1
 800cac4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800cac6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800cac8:	4618      	mov	r0, r3
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	bc80      	pop	{r7}
 800cad0:	4770      	bx	lr

0800cad2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800cad2:	b480      	push	{r7}
 800cad4:	b085      	sub	sp, #20
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	4603      	mov	r3, r0
 800cada:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800cae6:	230f      	movs	r3, #15
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	e001      	b.n	800caf0 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800caec:	2316      	movs	r3, #22
 800caee:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800caf0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bc80      	pop	{r7}
 800cafa:	4770      	bx	lr

0800cafc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	33f1      	adds	r3, #241	; 0xf1
 800cb08:	2210      	movs	r2, #16
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f00b fdab 	bl	8018668 <memset1>
    ctx->M_n = 0;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	22f0      	movs	r2, #240	; 0xf0
 800cb1e:	2100      	movs	r1, #0
 800cb20:	4618      	mov	r0, r3
 800cb22:	f00b fda1 	bl	8018668 <memset1>
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b082      	sub	sp, #8
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	2110      	movs	r1, #16
 800cb3e:	6838      	ldr	r0, [r7, #0]
 800cb40:	f000 fe5c 	bl	800d7fc <lorawan_aes_set_key>
}
 800cb44:	bf00      	nop
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08c      	sub	sp, #48	; 0x30
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 80a1 	beq.w	800cca6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cb6a:	f1c3 0310 	rsb	r3, r3, #16
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	4293      	cmp	r3, r2
 800cb72:	bf28      	it	cs
 800cb74:	4613      	movcs	r3, r2
 800cb76:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cb84:	4413      	add	r3, r2
 800cb86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb88:	b292      	uxth	r2, r2
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f00b fd30 	bl	80185f2 <memcpy1>
        ctx->M_n += mlen;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	441a      	add	r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cba8:	2b0f      	cmp	r3, #15
 800cbaa:	f240 808d 	bls.w	800ccc8 <AES_CMAC_Update+0x17c>
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	f000 8088 	beq.w	800ccc8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800cbb8:	2300      	movs	r3, #0
 800cbba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbbc:	e015      	b.n	800cbea <AES_CMAC_Update+0x9e>
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	4413      	add	r3, r2
 800cbc4:	33f1      	adds	r3, #241	; 0xf1
 800cbc6:	781a      	ldrb	r2, [r3, #0]
 800cbc8:	68f9      	ldr	r1, [r7, #12]
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	440b      	add	r3, r1
 800cbce:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	4053      	eors	r3, r2
 800cbd6:	b2d9      	uxtb	r1, r3
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	4413      	add	r3, r2
 800cbde:	33f1      	adds	r3, #241	; 0xf1
 800cbe0:	460a      	mov	r2, r1
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	2b0f      	cmp	r3, #15
 800cbee:	dde6      	ble.n	800cbbe <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cbf6:	f107 0314 	add.w	r3, r7, #20
 800cbfa:	2210      	movs	r2, #16
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f00b fcf8 	bl	80185f2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	f107 0114 	add.w	r1, r7, #20
 800cc08:	f107 0314 	add.w	r3, r7, #20
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 fed3 	bl	800d9b8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	33f1      	adds	r3, #241	; 0xf1
 800cc16:	f107 0114 	add.w	r1, r7, #20
 800cc1a:	2210      	movs	r2, #16
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f00b fce8 	bl	80185f2 <memcpy1>

        data += mlen;
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	4413      	add	r3, r2
 800cc28:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800cc32:	e038      	b.n	800cca6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800cc34:	2300      	movs	r3, #0
 800cc36:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc38:	e013      	b.n	800cc62 <AES_CMAC_Update+0x116>
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3e:	4413      	add	r3, r2
 800cc40:	33f1      	adds	r3, #241	; 0xf1
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	68b9      	ldr	r1, [r7, #8]
 800cc48:	440b      	add	r3, r1
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	4053      	eors	r3, r2
 800cc4e:	b2d9      	uxtb	r1, r3
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc54:	4413      	add	r3, r2
 800cc56:	33f1      	adds	r3, #241	; 0xf1
 800cc58:	460a      	mov	r2, r1
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	3301      	adds	r3, #1
 800cc60:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc64:	2b0f      	cmp	r3, #15
 800cc66:	dde8      	ble.n	800cc3a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cc6e:	f107 0314 	add.w	r3, r7, #20
 800cc72:	2210      	movs	r2, #16
 800cc74:	4618      	mov	r0, r3
 800cc76:	f00b fcbc 	bl	80185f2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	f107 0114 	add.w	r1, r7, #20
 800cc80:	f107 0314 	add.w	r3, r7, #20
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 fe97 	bl	800d9b8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	33f1      	adds	r3, #241	; 0xf1
 800cc8e:	f107 0114 	add.w	r1, r7, #20
 800cc92:	2210      	movs	r2, #16
 800cc94:	4618      	mov	r0, r3
 800cc96:	f00b fcac 	bl	80185f2 <memcpy1>

        data += 16;
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	3310      	adds	r3, #16
 800cc9e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3b10      	subs	r3, #16
 800cca4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b10      	cmp	r3, #16
 800ccaa:	d8c3      	bhi.n	800cc34 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	b292      	uxth	r2, r2
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00b fc9a 	bl	80185f2 <memcpy1>
    ctx->M_n = len;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ccc6:	e000      	b.n	800ccca <AES_CMAC_Update+0x17e>
            return;
 800ccc8:	bf00      	nop
}
 800ccca:	3730      	adds	r7, #48	; 0x30
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b092      	sub	sp, #72	; 0x48
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ccda:	f107 031c 	add.w	r3, r7, #28
 800ccde:	2210      	movs	r2, #16
 800cce0:	2100      	movs	r1, #0
 800cce2:	4618      	mov	r0, r3
 800cce4:	f00b fcc0 	bl	8018668 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	f107 011c 	add.w	r1, r7, #28
 800ccee:	f107 031c 	add.w	r3, r7, #28
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fe60 	bl	800d9b8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ccf8:	7f3b      	ldrb	r3, [r7, #28]
 800ccfa:	b25b      	sxtb	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da30      	bge.n	800cd62 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800cd00:	2300      	movs	r3, #0
 800cd02:	647b      	str	r3, [r7, #68]	; 0x44
 800cd04:	e01b      	b.n	800cd3e <AES_CMAC_Final+0x6e>
 800cd06:	f107 021c 	add.w	r2, r7, #28
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd0c:	4413      	add	r3, r2
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	b25a      	sxtb	r2, r3
 800cd14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd16:	3301      	adds	r3, #1
 800cd18:	3348      	adds	r3, #72	; 0x48
 800cd1a:	443b      	add	r3, r7
 800cd1c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cd20:	09db      	lsrs	r3, r3, #7
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	b25b      	sxtb	r3, r3
 800cd26:	4313      	orrs	r3, r2
 800cd28:	b25b      	sxtb	r3, r3
 800cd2a:	b2d9      	uxtb	r1, r3
 800cd2c:	f107 021c 	add.w	r2, r7, #28
 800cd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd32:	4413      	add	r3, r2
 800cd34:	460a      	mov	r2, r1
 800cd36:	701a      	strb	r2, [r3, #0]
 800cd38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	647b      	str	r3, [r7, #68]	; 0x44
 800cd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd40:	2b0e      	cmp	r3, #14
 800cd42:	dde0      	ble.n	800cd06 <AES_CMAC_Final+0x36>
 800cd44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800cd50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd54:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800cd58:	43db      	mvns	r3, r3
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd60:	e027      	b.n	800cdb2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800cd62:	2300      	movs	r3, #0
 800cd64:	643b      	str	r3, [r7, #64]	; 0x40
 800cd66:	e01b      	b.n	800cda0 <AES_CMAC_Final+0xd0>
 800cd68:	f107 021c 	add.w	r2, r7, #28
 800cd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd6e:	4413      	add	r3, r2
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	b25a      	sxtb	r2, r3
 800cd76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd78:	3301      	adds	r3, #1
 800cd7a:	3348      	adds	r3, #72	; 0x48
 800cd7c:	443b      	add	r3, r7
 800cd7e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cd82:	09db      	lsrs	r3, r3, #7
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	b25b      	sxtb	r3, r3
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	b25b      	sxtb	r3, r3
 800cd8c:	b2d9      	uxtb	r1, r3
 800cd8e:	f107 021c 	add.w	r2, r7, #28
 800cd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd94:	4413      	add	r3, r2
 800cd96:	460a      	mov	r2, r1
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	643b      	str	r3, [r7, #64]	; 0x40
 800cda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda2:	2b0e      	cmp	r3, #14
 800cda4:	dde0      	ble.n	800cd68 <AES_CMAC_Final+0x98>
 800cda6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cdb8:	2b10      	cmp	r3, #16
 800cdba:	d11d      	bne.n	800cdf8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc0:	e016      	b.n	800cdf0 <AES_CMAC_Final+0x120>
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cdcc:	781a      	ldrb	r2, [r3, #0]
 800cdce:	f107 011c 	add.w	r1, r7, #28
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd4:	440b      	add	r3, r1
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	4053      	eors	r3, r2
 800cdda:	b2d9      	uxtb	r1, r3
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde0:	4413      	add	r3, r2
 800cde2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cde6:	460a      	mov	r2, r1
 800cde8:	701a      	strb	r2, [r3, #0]
 800cdea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdec:	3301      	adds	r3, #1
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf2:	2b0f      	cmp	r3, #15
 800cdf4:	dde5      	ble.n	800cdc2 <AES_CMAC_Final+0xf2>
 800cdf6:	e096      	b.n	800cf26 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800cdf8:	7f3b      	ldrb	r3, [r7, #28]
 800cdfa:	b25b      	sxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	da30      	bge.n	800ce62 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800ce00:	2300      	movs	r3, #0
 800ce02:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce04:	e01b      	b.n	800ce3e <AES_CMAC_Final+0x16e>
 800ce06:	f107 021c 	add.w	r2, r7, #28
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	4413      	add	r3, r2
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	b25a      	sxtb	r2, r3
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	3301      	adds	r3, #1
 800ce18:	3348      	adds	r3, #72	; 0x48
 800ce1a:	443b      	add	r3, r7
 800ce1c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ce20:	09db      	lsrs	r3, r3, #7
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	b25b      	sxtb	r3, r3
 800ce26:	4313      	orrs	r3, r2
 800ce28:	b25b      	sxtb	r3, r3
 800ce2a:	b2d9      	uxtb	r1, r3
 800ce2c:	f107 021c 	add.w	r2, r7, #28
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	4413      	add	r3, r2
 800ce34:	460a      	mov	r2, r1
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce40:	2b0e      	cmp	r3, #14
 800ce42:	dde0      	ble.n	800ce06 <AES_CMAC_Final+0x136>
 800ce44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ce50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce54:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ce58:	43db      	mvns	r3, r3
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce60:	e027      	b.n	800ceb2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ce62:	2300      	movs	r3, #0
 800ce64:	637b      	str	r3, [r7, #52]	; 0x34
 800ce66:	e01b      	b.n	800cea0 <AES_CMAC_Final+0x1d0>
 800ce68:	f107 021c 	add.w	r2, r7, #28
 800ce6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6e:	4413      	add	r3, r2
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	b25a      	sxtb	r2, r3
 800ce76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce78:	3301      	adds	r3, #1
 800ce7a:	3348      	adds	r3, #72	; 0x48
 800ce7c:	443b      	add	r3, r7
 800ce7e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ce82:	09db      	lsrs	r3, r3, #7
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	b25b      	sxtb	r3, r3
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	b25b      	sxtb	r3, r3
 800ce8c:	b2d9      	uxtb	r1, r3
 800ce8e:	f107 021c 	add.w	r2, r7, #28
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	4413      	add	r3, r2
 800ce96:	460a      	mov	r2, r1
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	637b      	str	r3, [r7, #52]	; 0x34
 800cea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea2:	2b0e      	cmp	r3, #14
 800cea4:	dde0      	ble.n	800ce68 <AES_CMAC_Final+0x198>
 800cea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	4413      	add	r3, r2
 800cebc:	2280      	movs	r2, #128	; 0x80
 800cebe:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800cec2:	e007      	b.n	800ced4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	4413      	add	r3, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cee8:	2b0f      	cmp	r3, #15
 800ceea:	d9eb      	bls.n	800cec4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800ceec:	2300      	movs	r3, #0
 800ceee:	633b      	str	r3, [r7, #48]	; 0x30
 800cef0:	e016      	b.n	800cf20 <AES_CMAC_Final+0x250>
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	4413      	add	r3, r2
 800cef8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cefc:	781a      	ldrb	r2, [r3, #0]
 800cefe:	f107 011c 	add.w	r1, r7, #28
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	440b      	add	r3, r1
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	4053      	eors	r3, r2
 800cf0a:	b2d9      	uxtb	r1, r3
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	4413      	add	r3, r2
 800cf12:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cf16:	460a      	mov	r2, r1
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	633b      	str	r3, [r7, #48]	; 0x30
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	2b0f      	cmp	r3, #15
 800cf24:	dde5      	ble.n	800cef2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800cf26:	2300      	movs	r3, #0
 800cf28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf2a:	e015      	b.n	800cf58 <AES_CMAC_Final+0x288>
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf30:	4413      	add	r3, r2
 800cf32:	33f1      	adds	r3, #241	; 0xf1
 800cf34:	781a      	ldrb	r2, [r3, #0]
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	440b      	add	r3, r1
 800cf3c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	4053      	eors	r3, r2
 800cf44:	b2d9      	uxtb	r1, r3
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	4413      	add	r3, r2
 800cf4c:	33f1      	adds	r3, #241	; 0xf1
 800cf4e:	460a      	mov	r2, r1
 800cf50:	701a      	strb	r2, [r3, #0]
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	3301      	adds	r3, #1
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	2b0f      	cmp	r3, #15
 800cf5c:	dde6      	ble.n	800cf2c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cf64:	f107 030c 	add.w	r3, r7, #12
 800cf68:	2210      	movs	r2, #16
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f00b fb41 	bl	80185f2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	f107 030c 	add.w	r3, r7, #12
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 fd1d 	bl	800d9b8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800cf7e:	f107 031c 	add.w	r3, r7, #28
 800cf82:	2210      	movs	r2, #16
 800cf84:	2100      	movs	r1, #0
 800cf86:	4618      	mov	r0, r3
 800cf88:	f00b fb6e 	bl	8018668 <memset1>
}
 800cf8c:	bf00      	nop
 800cf8e:	3748      	adds	r7, #72	; 0x48
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781a      	ldrb	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	683a      	ldr	r2, [r7, #0]
 800cfac:	7852      	ldrb	r2, [r2, #1]
 800cfae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3302      	adds	r3, #2
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	7892      	ldrb	r2, [r2, #2]
 800cfb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	3303      	adds	r3, #3
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	78d2      	ldrb	r2, [r2, #3]
 800cfc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	7912      	ldrb	r2, [r2, #4]
 800cfcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3305      	adds	r3, #5
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	7952      	ldrb	r2, [r2, #5]
 800cfd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3306      	adds	r3, #6
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	7992      	ldrb	r2, [r2, #6]
 800cfe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3307      	adds	r3, #7
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	79d2      	ldrb	r2, [r2, #7]
 800cfea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3308      	adds	r3, #8
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	7a12      	ldrb	r2, [r2, #8]
 800cff4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3309      	adds	r3, #9
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	7a52      	ldrb	r2, [r2, #9]
 800cffe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	330a      	adds	r3, #10
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	7a92      	ldrb	r2, [r2, #10]
 800d008:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	330b      	adds	r3, #11
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	7ad2      	ldrb	r2, [r2, #11]
 800d012:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	330c      	adds	r3, #12
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	7b12      	ldrb	r2, [r2, #12]
 800d01c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	330d      	adds	r3, #13
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	7b52      	ldrb	r2, [r2, #13]
 800d026:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	330e      	adds	r3, #14
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	7b92      	ldrb	r2, [r2, #14]
 800d030:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	330f      	adds	r3, #15
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	7bd2      	ldrb	r2, [r2, #15]
 800d03a:	701a      	strb	r2, [r3, #0]
#endif
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	bc80      	pop	{r7}
 800d044:	4770      	bx	lr

0800d046 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	60b9      	str	r1, [r7, #8]
 800d050:	4613      	mov	r3, r2
 800d052:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800d054:	e007      	b.n	800d066 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	1c53      	adds	r3, r2, #1
 800d05a:	60bb      	str	r3, [r7, #8]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	1c59      	adds	r1, r3, #1
 800d060:	60f9      	str	r1, [r7, #12]
 800d062:	7812      	ldrb	r2, [r2, #0]
 800d064:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	1e5a      	subs	r2, r3, #1
 800d06a:	71fa      	strb	r2, [r7, #7]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1f2      	bne.n	800d056 <copy_block_nn+0x10>
}
 800d070:	bf00      	nop
 800d072:	bf00      	nop
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	bc80      	pop	{r7}
 800d07a:	4770      	bx	lr

0800d07c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	781a      	ldrb	r2, [r3, #0]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	4053      	eors	r3, r2
 800d090:	b2da      	uxtb	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	3301      	adds	r3, #1
 800d09a:	7819      	ldrb	r1, [r3, #0]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	781a      	ldrb	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	404a      	eors	r2, r1
 800d0a8:	b2d2      	uxtb	r2, r2
 800d0aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3302      	adds	r3, #2
 800d0b0:	7819      	ldrb	r1, [r3, #0]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	781a      	ldrb	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3302      	adds	r3, #2
 800d0bc:	404a      	eors	r2, r1
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	3303      	adds	r3, #3
 800d0c6:	7819      	ldrb	r1, [r3, #0]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	3303      	adds	r3, #3
 800d0cc:	781a      	ldrb	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3303      	adds	r3, #3
 800d0d2:	404a      	eors	r2, r1
 800d0d4:	b2d2      	uxtb	r2, r2
 800d0d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	7819      	ldrb	r1, [r3, #0]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	781a      	ldrb	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	404a      	eors	r2, r1
 800d0ea:	b2d2      	uxtb	r2, r2
 800d0ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3305      	adds	r3, #5
 800d0f2:	7819      	ldrb	r1, [r3, #0]
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	3305      	adds	r3, #5
 800d0f8:	781a      	ldrb	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3305      	adds	r3, #5
 800d0fe:	404a      	eors	r2, r1
 800d100:	b2d2      	uxtb	r2, r2
 800d102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	3306      	adds	r3, #6
 800d108:	7819      	ldrb	r1, [r3, #0]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	3306      	adds	r3, #6
 800d10e:	781a      	ldrb	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3306      	adds	r3, #6
 800d114:	404a      	eors	r2, r1
 800d116:	b2d2      	uxtb	r2, r2
 800d118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3307      	adds	r3, #7
 800d11e:	7819      	ldrb	r1, [r3, #0]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	3307      	adds	r3, #7
 800d124:	781a      	ldrb	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	3307      	adds	r3, #7
 800d12a:	404a      	eors	r2, r1
 800d12c:	b2d2      	uxtb	r2, r2
 800d12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3308      	adds	r3, #8
 800d134:	7819      	ldrb	r1, [r3, #0]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	3308      	adds	r3, #8
 800d13a:	781a      	ldrb	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3308      	adds	r3, #8
 800d140:	404a      	eors	r2, r1
 800d142:	b2d2      	uxtb	r2, r2
 800d144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3309      	adds	r3, #9
 800d14a:	7819      	ldrb	r1, [r3, #0]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	3309      	adds	r3, #9
 800d150:	781a      	ldrb	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3309      	adds	r3, #9
 800d156:	404a      	eors	r2, r1
 800d158:	b2d2      	uxtb	r2, r2
 800d15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	330a      	adds	r3, #10
 800d160:	7819      	ldrb	r1, [r3, #0]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	330a      	adds	r3, #10
 800d166:	781a      	ldrb	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	330a      	adds	r3, #10
 800d16c:	404a      	eors	r2, r1
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	330b      	adds	r3, #11
 800d176:	7819      	ldrb	r1, [r3, #0]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	330b      	adds	r3, #11
 800d17c:	781a      	ldrb	r2, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	330b      	adds	r3, #11
 800d182:	404a      	eors	r2, r1
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	330c      	adds	r3, #12
 800d18c:	7819      	ldrb	r1, [r3, #0]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	330c      	adds	r3, #12
 800d192:	781a      	ldrb	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	330c      	adds	r3, #12
 800d198:	404a      	eors	r2, r1
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	330d      	adds	r3, #13
 800d1a2:	7819      	ldrb	r1, [r3, #0]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	330d      	adds	r3, #13
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	330d      	adds	r3, #13
 800d1ae:	404a      	eors	r2, r1
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	330e      	adds	r3, #14
 800d1b8:	7819      	ldrb	r1, [r3, #0]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	330e      	adds	r3, #14
 800d1be:	781a      	ldrb	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	330e      	adds	r3, #14
 800d1c4:	404a      	eors	r2, r1
 800d1c6:	b2d2      	uxtb	r2, r2
 800d1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	330f      	adds	r3, #15
 800d1ce:	7819      	ldrb	r1, [r3, #0]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	330f      	adds	r3, #15
 800d1d4:	781a      	ldrb	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	330f      	adds	r3, #15
 800d1da:	404a      	eors	r2, r1
 800d1dc:	b2d2      	uxtb	r2, r2
 800d1de:	701a      	strb	r2, [r3, #0]
#endif
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bc80      	pop	{r7}
 800d1e8:	4770      	bx	lr

0800d1ea <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	781a      	ldrb	r2, [r3, #0]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	4053      	eors	r3, r2
 800d200:	b2da      	uxtb	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	3301      	adds	r3, #1
 800d20a:	7819      	ldrb	r1, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3301      	adds	r3, #1
 800d210:	781a      	ldrb	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3301      	adds	r3, #1
 800d216:	404a      	eors	r2, r1
 800d218:	b2d2      	uxtb	r2, r2
 800d21a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	3302      	adds	r3, #2
 800d220:	7819      	ldrb	r1, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3302      	adds	r3, #2
 800d226:	781a      	ldrb	r2, [r3, #0]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3302      	adds	r3, #2
 800d22c:	404a      	eors	r2, r1
 800d22e:	b2d2      	uxtb	r2, r2
 800d230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	3303      	adds	r3, #3
 800d236:	7819      	ldrb	r1, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3303      	adds	r3, #3
 800d23c:	781a      	ldrb	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3303      	adds	r3, #3
 800d242:	404a      	eors	r2, r1
 800d244:	b2d2      	uxtb	r2, r2
 800d246:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	3304      	adds	r3, #4
 800d24c:	7819      	ldrb	r1, [r3, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3304      	adds	r3, #4
 800d252:	781a      	ldrb	r2, [r3, #0]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3304      	adds	r3, #4
 800d258:	404a      	eors	r2, r1
 800d25a:	b2d2      	uxtb	r2, r2
 800d25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	3305      	adds	r3, #5
 800d262:	7819      	ldrb	r1, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3305      	adds	r3, #5
 800d268:	781a      	ldrb	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	3305      	adds	r3, #5
 800d26e:	404a      	eors	r2, r1
 800d270:	b2d2      	uxtb	r2, r2
 800d272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	3306      	adds	r3, #6
 800d278:	7819      	ldrb	r1, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3306      	adds	r3, #6
 800d27e:	781a      	ldrb	r2, [r3, #0]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3306      	adds	r3, #6
 800d284:	404a      	eors	r2, r1
 800d286:	b2d2      	uxtb	r2, r2
 800d288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	3307      	adds	r3, #7
 800d28e:	7819      	ldrb	r1, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3307      	adds	r3, #7
 800d294:	781a      	ldrb	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	3307      	adds	r3, #7
 800d29a:	404a      	eors	r2, r1
 800d29c:	b2d2      	uxtb	r2, r2
 800d29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	7819      	ldrb	r1, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	3308      	adds	r3, #8
 800d2b0:	404a      	eors	r2, r1
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	3309      	adds	r3, #9
 800d2ba:	7819      	ldrb	r1, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3309      	adds	r3, #9
 800d2c0:	781a      	ldrb	r2, [r3, #0]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	3309      	adds	r3, #9
 800d2c6:	404a      	eors	r2, r1
 800d2c8:	b2d2      	uxtb	r2, r2
 800d2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	330a      	adds	r3, #10
 800d2d0:	7819      	ldrb	r1, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	330a      	adds	r3, #10
 800d2d6:	781a      	ldrb	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	330a      	adds	r3, #10
 800d2dc:	404a      	eors	r2, r1
 800d2de:	b2d2      	uxtb	r2, r2
 800d2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	330b      	adds	r3, #11
 800d2e6:	7819      	ldrb	r1, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	330b      	adds	r3, #11
 800d2ec:	781a      	ldrb	r2, [r3, #0]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	330b      	adds	r3, #11
 800d2f2:	404a      	eors	r2, r1
 800d2f4:	b2d2      	uxtb	r2, r2
 800d2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	330c      	adds	r3, #12
 800d2fc:	7819      	ldrb	r1, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	330c      	adds	r3, #12
 800d302:	781a      	ldrb	r2, [r3, #0]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	330c      	adds	r3, #12
 800d308:	404a      	eors	r2, r1
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	330d      	adds	r3, #13
 800d312:	7819      	ldrb	r1, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	330d      	adds	r3, #13
 800d318:	781a      	ldrb	r2, [r3, #0]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	330d      	adds	r3, #13
 800d31e:	404a      	eors	r2, r1
 800d320:	b2d2      	uxtb	r2, r2
 800d322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	330e      	adds	r3, #14
 800d328:	7819      	ldrb	r1, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	330e      	adds	r3, #14
 800d32e:	781a      	ldrb	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	330e      	adds	r3, #14
 800d334:	404a      	eors	r2, r1
 800d336:	b2d2      	uxtb	r2, r2
 800d338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	330f      	adds	r3, #15
 800d33e:	7819      	ldrb	r1, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	330f      	adds	r3, #15
 800d344:	781a      	ldrb	r2, [r3, #0]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	330f      	adds	r3, #15
 800d34a:	404a      	eors	r2, r1
 800d34c:	b2d2      	uxtb	r2, r2
 800d34e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d350:	bf00      	nop
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	bc80      	pop	{r7}
 800d358:	4770      	bx	lr

0800d35a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800d364:	6839      	ldr	r1, [r7, #0]
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7ff fe88 	bl	800d07c <xor_block>
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	461a      	mov	r2, r3
 800d382:	4b48      	ldr	r3, [pc, #288]	; (800d4a4 <shift_sub_rows+0x130>)
 800d384:	5c9a      	ldrb	r2, [r3, r2]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	701a      	strb	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3304      	adds	r3, #4
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	4619      	mov	r1, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	3304      	adds	r3, #4
 800d396:	4a43      	ldr	r2, [pc, #268]	; (800d4a4 <shift_sub_rows+0x130>)
 800d398:	5c52      	ldrb	r2, [r2, r1]
 800d39a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3308      	adds	r3, #8
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	4a3e      	ldr	r2, [pc, #248]	; (800d4a4 <shift_sub_rows+0x130>)
 800d3aa:	5c52      	ldrb	r2, [r2, r1]
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	330c      	adds	r3, #12
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	4a3a      	ldr	r2, [pc, #232]	; (800d4a4 <shift_sub_rows+0x130>)
 800d3bc:	5c52      	ldrb	r2, [r2, r1]
 800d3be:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	785b      	ldrb	r3, [r3, #1]
 800d3c4:	73fb      	strb	r3, [r7, #15]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3305      	adds	r3, #5
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	4a34      	ldr	r2, [pc, #208]	; (800d4a4 <shift_sub_rows+0x130>)
 800d3d4:	5c52      	ldrb	r2, [r2, r1]
 800d3d6:	701a      	strb	r2, [r3, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3309      	adds	r3, #9
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3305      	adds	r3, #5
 800d3e4:	4a2f      	ldr	r2, [pc, #188]	; (800d4a4 <shift_sub_rows+0x130>)
 800d3e6:	5c52      	ldrb	r2, [r2, r1]
 800d3e8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	330d      	adds	r3, #13
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3309      	adds	r3, #9
 800d3f6:	4a2b      	ldr	r2, [pc, #172]	; (800d4a4 <shift_sub_rows+0x130>)
 800d3f8:	5c52      	ldrb	r2, [r2, r1]
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	7bfa      	ldrb	r2, [r7, #15]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	330d      	adds	r3, #13
 800d402:	4928      	ldr	r1, [pc, #160]	; (800d4a4 <shift_sub_rows+0x130>)
 800d404:	5c8a      	ldrb	r2, [r1, r2]
 800d406:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	789b      	ldrb	r3, [r3, #2]
 800d40c:	73fb      	strb	r3, [r7, #15]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	330a      	adds	r3, #10
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	4619      	mov	r1, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3302      	adds	r3, #2
 800d41a:	4a22      	ldr	r2, [pc, #136]	; (800d4a4 <shift_sub_rows+0x130>)
 800d41c:	5c52      	ldrb	r2, [r2, r1]
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	7bfa      	ldrb	r2, [r7, #15]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	330a      	adds	r3, #10
 800d426:	491f      	ldr	r1, [pc, #124]	; (800d4a4 <shift_sub_rows+0x130>)
 800d428:	5c8a      	ldrb	r2, [r1, r2]
 800d42a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	799b      	ldrb	r3, [r3, #6]
 800d430:	73fb      	strb	r3, [r7, #15]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	330e      	adds	r3, #14
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	4619      	mov	r1, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	3306      	adds	r3, #6
 800d43e:	4a19      	ldr	r2, [pc, #100]	; (800d4a4 <shift_sub_rows+0x130>)
 800d440:	5c52      	ldrb	r2, [r2, r1]
 800d442:	701a      	strb	r2, [r3, #0]
 800d444:	7bfa      	ldrb	r2, [r7, #15]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	330e      	adds	r3, #14
 800d44a:	4916      	ldr	r1, [pc, #88]	; (800d4a4 <shift_sub_rows+0x130>)
 800d44c:	5c8a      	ldrb	r2, [r1, r2]
 800d44e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7bdb      	ldrb	r3, [r3, #15]
 800d454:	73fb      	strb	r3, [r7, #15]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	330b      	adds	r3, #11
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	4619      	mov	r1, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	330f      	adds	r3, #15
 800d462:	4a10      	ldr	r2, [pc, #64]	; (800d4a4 <shift_sub_rows+0x130>)
 800d464:	5c52      	ldrb	r2, [r2, r1]
 800d466:	701a      	strb	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3307      	adds	r3, #7
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	4619      	mov	r1, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	330b      	adds	r3, #11
 800d474:	4a0b      	ldr	r2, [pc, #44]	; (800d4a4 <shift_sub_rows+0x130>)
 800d476:	5c52      	ldrb	r2, [r2, r1]
 800d478:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	3303      	adds	r3, #3
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	4619      	mov	r1, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3307      	adds	r3, #7
 800d486:	4a07      	ldr	r2, [pc, #28]	; (800d4a4 <shift_sub_rows+0x130>)
 800d488:	5c52      	ldrb	r2, [r2, r1]
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	7bfa      	ldrb	r2, [r7, #15]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	3303      	adds	r3, #3
 800d492:	4904      	ldr	r1, [pc, #16]	; (800d4a4 <shift_sub_rows+0x130>)
 800d494:	5c8a      	ldrb	r2, [r1, r2]
 800d496:	701a      	strb	r2, [r3, #0]
}
 800d498:	bf00      	nop
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bc80      	pop	{r7}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	08020358 	.word	0x08020358

0800d4a8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d4b0:	f107 0308 	add.w	r3, r7, #8
 800d4b4:	6879      	ldr	r1, [r7, #4]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff fd6c 	bl	800cf94 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d4bc:	7a3b      	ldrb	r3, [r7, #8]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4b9a      	ldr	r3, [pc, #616]	; (800d72c <mix_sub_columns+0x284>)
 800d4c2:	5c9a      	ldrb	r2, [r3, r2]
 800d4c4:	7b7b      	ldrb	r3, [r7, #13]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4b99      	ldr	r3, [pc, #612]	; (800d730 <mix_sub_columns+0x288>)
 800d4ca:	5c5b      	ldrb	r3, [r3, r1]
 800d4cc:	4053      	eors	r3, r2
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	7cbb      	ldrb	r3, [r7, #18]
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	4b97      	ldr	r3, [pc, #604]	; (800d734 <mix_sub_columns+0x28c>)
 800d4d6:	5c5b      	ldrb	r3, [r3, r1]
 800d4d8:	4053      	eors	r3, r2
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	4b94      	ldr	r3, [pc, #592]	; (800d734 <mix_sub_columns+0x28c>)
 800d4e2:	5c5b      	ldrb	r3, [r3, r1]
 800d4e4:	4053      	eors	r3, r2
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d4ec:	7a3b      	ldrb	r3, [r7, #8]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	4b90      	ldr	r3, [pc, #576]	; (800d734 <mix_sub_columns+0x28c>)
 800d4f2:	5c9a      	ldrb	r2, [r3, r2]
 800d4f4:	7b7b      	ldrb	r3, [r7, #13]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4b8c      	ldr	r3, [pc, #560]	; (800d72c <mix_sub_columns+0x284>)
 800d4fa:	5c5b      	ldrb	r3, [r3, r1]
 800d4fc:	4053      	eors	r3, r2
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	7cbb      	ldrb	r3, [r7, #18]
 800d502:	4619      	mov	r1, r3
 800d504:	4b8a      	ldr	r3, [pc, #552]	; (800d730 <mix_sub_columns+0x288>)
 800d506:	5c5b      	ldrb	r3, [r3, r1]
 800d508:	4053      	eors	r3, r2
 800d50a:	b2d9      	uxtb	r1, r3
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
 800d50e:	461a      	mov	r2, r3
 800d510:	4b88      	ldr	r3, [pc, #544]	; (800d734 <mix_sub_columns+0x28c>)
 800d512:	5c9a      	ldrb	r2, [r3, r2]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3301      	adds	r3, #1
 800d518:	404a      	eors	r2, r1
 800d51a:	b2d2      	uxtb	r2, r2
 800d51c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d51e:	7a3b      	ldrb	r3, [r7, #8]
 800d520:	461a      	mov	r2, r3
 800d522:	4b84      	ldr	r3, [pc, #528]	; (800d734 <mix_sub_columns+0x28c>)
 800d524:	5c9a      	ldrb	r2, [r3, r2]
 800d526:	7b7b      	ldrb	r3, [r7, #13]
 800d528:	4619      	mov	r1, r3
 800d52a:	4b82      	ldr	r3, [pc, #520]	; (800d734 <mix_sub_columns+0x28c>)
 800d52c:	5c5b      	ldrb	r3, [r3, r1]
 800d52e:	4053      	eors	r3, r2
 800d530:	b2da      	uxtb	r2, r3
 800d532:	7cbb      	ldrb	r3, [r7, #18]
 800d534:	4619      	mov	r1, r3
 800d536:	4b7d      	ldr	r3, [pc, #500]	; (800d72c <mix_sub_columns+0x284>)
 800d538:	5c5b      	ldrb	r3, [r3, r1]
 800d53a:	4053      	eors	r3, r2
 800d53c:	b2d9      	uxtb	r1, r3
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
 800d540:	461a      	mov	r2, r3
 800d542:	4b7b      	ldr	r3, [pc, #492]	; (800d730 <mix_sub_columns+0x288>)
 800d544:	5c9a      	ldrb	r2, [r3, r2]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	3302      	adds	r3, #2
 800d54a:	404a      	eors	r2, r1
 800d54c:	b2d2      	uxtb	r2, r2
 800d54e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d550:	7a3b      	ldrb	r3, [r7, #8]
 800d552:	461a      	mov	r2, r3
 800d554:	4b76      	ldr	r3, [pc, #472]	; (800d730 <mix_sub_columns+0x288>)
 800d556:	5c9a      	ldrb	r2, [r3, r2]
 800d558:	7b7b      	ldrb	r3, [r7, #13]
 800d55a:	4619      	mov	r1, r3
 800d55c:	4b75      	ldr	r3, [pc, #468]	; (800d734 <mix_sub_columns+0x28c>)
 800d55e:	5c5b      	ldrb	r3, [r3, r1]
 800d560:	4053      	eors	r3, r2
 800d562:	b2da      	uxtb	r2, r3
 800d564:	7cbb      	ldrb	r3, [r7, #18]
 800d566:	4619      	mov	r1, r3
 800d568:	4b72      	ldr	r3, [pc, #456]	; (800d734 <mix_sub_columns+0x28c>)
 800d56a:	5c5b      	ldrb	r3, [r3, r1]
 800d56c:	4053      	eors	r3, r2
 800d56e:	b2d9      	uxtb	r1, r3
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	461a      	mov	r2, r3
 800d574:	4b6d      	ldr	r3, [pc, #436]	; (800d72c <mix_sub_columns+0x284>)
 800d576:	5c9a      	ldrb	r2, [r3, r2]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	3303      	adds	r3, #3
 800d57c:	404a      	eors	r2, r1
 800d57e:	b2d2      	uxtb	r2, r2
 800d580:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d582:	7b3b      	ldrb	r3, [r7, #12]
 800d584:	461a      	mov	r2, r3
 800d586:	4b69      	ldr	r3, [pc, #420]	; (800d72c <mix_sub_columns+0x284>)
 800d588:	5c9a      	ldrb	r2, [r3, r2]
 800d58a:	7c7b      	ldrb	r3, [r7, #17]
 800d58c:	4619      	mov	r1, r3
 800d58e:	4b68      	ldr	r3, [pc, #416]	; (800d730 <mix_sub_columns+0x288>)
 800d590:	5c5b      	ldrb	r3, [r3, r1]
 800d592:	4053      	eors	r3, r2
 800d594:	b2da      	uxtb	r2, r3
 800d596:	7dbb      	ldrb	r3, [r7, #22]
 800d598:	4619      	mov	r1, r3
 800d59a:	4b66      	ldr	r3, [pc, #408]	; (800d734 <mix_sub_columns+0x28c>)
 800d59c:	5c5b      	ldrb	r3, [r3, r1]
 800d59e:	4053      	eors	r3, r2
 800d5a0:	b2d9      	uxtb	r1, r3
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	4b63      	ldr	r3, [pc, #396]	; (800d734 <mix_sub_columns+0x28c>)
 800d5a8:	5c9a      	ldrb	r2, [r3, r2]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	404a      	eors	r2, r1
 800d5b0:	b2d2      	uxtb	r2, r2
 800d5b2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d5b4:	7b3b      	ldrb	r3, [r7, #12]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	4b5e      	ldr	r3, [pc, #376]	; (800d734 <mix_sub_columns+0x28c>)
 800d5ba:	5c9a      	ldrb	r2, [r3, r2]
 800d5bc:	7c7b      	ldrb	r3, [r7, #17]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4b5a      	ldr	r3, [pc, #360]	; (800d72c <mix_sub_columns+0x284>)
 800d5c2:	5c5b      	ldrb	r3, [r3, r1]
 800d5c4:	4053      	eors	r3, r2
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	7dbb      	ldrb	r3, [r7, #22]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4b58      	ldr	r3, [pc, #352]	; (800d730 <mix_sub_columns+0x288>)
 800d5ce:	5c5b      	ldrb	r3, [r3, r1]
 800d5d0:	4053      	eors	r3, r2
 800d5d2:	b2d9      	uxtb	r1, r3
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	4b56      	ldr	r3, [pc, #344]	; (800d734 <mix_sub_columns+0x28c>)
 800d5da:	5c9a      	ldrb	r2, [r3, r2]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3305      	adds	r3, #5
 800d5e0:	404a      	eors	r2, r1
 800d5e2:	b2d2      	uxtb	r2, r2
 800d5e4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d5e6:	7b3b      	ldrb	r3, [r7, #12]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4b52      	ldr	r3, [pc, #328]	; (800d734 <mix_sub_columns+0x28c>)
 800d5ec:	5c9a      	ldrb	r2, [r3, r2]
 800d5ee:	7c7b      	ldrb	r3, [r7, #17]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4b50      	ldr	r3, [pc, #320]	; (800d734 <mix_sub_columns+0x28c>)
 800d5f4:	5c5b      	ldrb	r3, [r3, r1]
 800d5f6:	4053      	eors	r3, r2
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	7dbb      	ldrb	r3, [r7, #22]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4b4b      	ldr	r3, [pc, #300]	; (800d72c <mix_sub_columns+0x284>)
 800d600:	5c5b      	ldrb	r3, [r3, r1]
 800d602:	4053      	eors	r3, r2
 800d604:	b2d9      	uxtb	r1, r3
 800d606:	7afb      	ldrb	r3, [r7, #11]
 800d608:	461a      	mov	r2, r3
 800d60a:	4b49      	ldr	r3, [pc, #292]	; (800d730 <mix_sub_columns+0x288>)
 800d60c:	5c9a      	ldrb	r2, [r3, r2]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3306      	adds	r3, #6
 800d612:	404a      	eors	r2, r1
 800d614:	b2d2      	uxtb	r2, r2
 800d616:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d618:	7b3b      	ldrb	r3, [r7, #12]
 800d61a:	461a      	mov	r2, r3
 800d61c:	4b44      	ldr	r3, [pc, #272]	; (800d730 <mix_sub_columns+0x288>)
 800d61e:	5c9a      	ldrb	r2, [r3, r2]
 800d620:	7c7b      	ldrb	r3, [r7, #17]
 800d622:	4619      	mov	r1, r3
 800d624:	4b43      	ldr	r3, [pc, #268]	; (800d734 <mix_sub_columns+0x28c>)
 800d626:	5c5b      	ldrb	r3, [r3, r1]
 800d628:	4053      	eors	r3, r2
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	7dbb      	ldrb	r3, [r7, #22]
 800d62e:	4619      	mov	r1, r3
 800d630:	4b40      	ldr	r3, [pc, #256]	; (800d734 <mix_sub_columns+0x28c>)
 800d632:	5c5b      	ldrb	r3, [r3, r1]
 800d634:	4053      	eors	r3, r2
 800d636:	b2d9      	uxtb	r1, r3
 800d638:	7afb      	ldrb	r3, [r7, #11]
 800d63a:	461a      	mov	r2, r3
 800d63c:	4b3b      	ldr	r3, [pc, #236]	; (800d72c <mix_sub_columns+0x284>)
 800d63e:	5c9a      	ldrb	r2, [r3, r2]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	3307      	adds	r3, #7
 800d644:	404a      	eors	r2, r1
 800d646:	b2d2      	uxtb	r2, r2
 800d648:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d64a:	7c3b      	ldrb	r3, [r7, #16]
 800d64c:	461a      	mov	r2, r3
 800d64e:	4b37      	ldr	r3, [pc, #220]	; (800d72c <mix_sub_columns+0x284>)
 800d650:	5c9a      	ldrb	r2, [r3, r2]
 800d652:	7d7b      	ldrb	r3, [r7, #21]
 800d654:	4619      	mov	r1, r3
 800d656:	4b36      	ldr	r3, [pc, #216]	; (800d730 <mix_sub_columns+0x288>)
 800d658:	5c5b      	ldrb	r3, [r3, r1]
 800d65a:	4053      	eors	r3, r2
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	7abb      	ldrb	r3, [r7, #10]
 800d660:	4619      	mov	r1, r3
 800d662:	4b34      	ldr	r3, [pc, #208]	; (800d734 <mix_sub_columns+0x28c>)
 800d664:	5c5b      	ldrb	r3, [r3, r1]
 800d666:	4053      	eors	r3, r2
 800d668:	b2d9      	uxtb	r1, r3
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
 800d66c:	461a      	mov	r2, r3
 800d66e:	4b31      	ldr	r3, [pc, #196]	; (800d734 <mix_sub_columns+0x28c>)
 800d670:	5c9a      	ldrb	r2, [r3, r2]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	3308      	adds	r3, #8
 800d676:	404a      	eors	r2, r1
 800d678:	b2d2      	uxtb	r2, r2
 800d67a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d67c:	7c3b      	ldrb	r3, [r7, #16]
 800d67e:	461a      	mov	r2, r3
 800d680:	4b2c      	ldr	r3, [pc, #176]	; (800d734 <mix_sub_columns+0x28c>)
 800d682:	5c9a      	ldrb	r2, [r3, r2]
 800d684:	7d7b      	ldrb	r3, [r7, #21]
 800d686:	4619      	mov	r1, r3
 800d688:	4b28      	ldr	r3, [pc, #160]	; (800d72c <mix_sub_columns+0x284>)
 800d68a:	5c5b      	ldrb	r3, [r3, r1]
 800d68c:	4053      	eors	r3, r2
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	7abb      	ldrb	r3, [r7, #10]
 800d692:	4619      	mov	r1, r3
 800d694:	4b26      	ldr	r3, [pc, #152]	; (800d730 <mix_sub_columns+0x288>)
 800d696:	5c5b      	ldrb	r3, [r3, r1]
 800d698:	4053      	eors	r3, r2
 800d69a:	b2d9      	uxtb	r1, r3
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	4b24      	ldr	r3, [pc, #144]	; (800d734 <mix_sub_columns+0x28c>)
 800d6a2:	5c9a      	ldrb	r2, [r3, r2]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3309      	adds	r3, #9
 800d6a8:	404a      	eors	r2, r1
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d6ae:	7c3b      	ldrb	r3, [r7, #16]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b20      	ldr	r3, [pc, #128]	; (800d734 <mix_sub_columns+0x28c>)
 800d6b4:	5c9a      	ldrb	r2, [r3, r2]
 800d6b6:	7d7b      	ldrb	r3, [r7, #21]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <mix_sub_columns+0x28c>)
 800d6bc:	5c5b      	ldrb	r3, [r3, r1]
 800d6be:	4053      	eors	r3, r2
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	7abb      	ldrb	r3, [r7, #10]
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	4b19      	ldr	r3, [pc, #100]	; (800d72c <mix_sub_columns+0x284>)
 800d6c8:	5c5b      	ldrb	r3, [r3, r1]
 800d6ca:	4053      	eors	r3, r2
 800d6cc:	b2d9      	uxtb	r1, r3
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	4b17      	ldr	r3, [pc, #92]	; (800d730 <mix_sub_columns+0x288>)
 800d6d4:	5c9a      	ldrb	r2, [r3, r2]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	330a      	adds	r3, #10
 800d6da:	404a      	eors	r2, r1
 800d6dc:	b2d2      	uxtb	r2, r2
 800d6de:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d6e0:	7c3b      	ldrb	r3, [r7, #16]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4b12      	ldr	r3, [pc, #72]	; (800d730 <mix_sub_columns+0x288>)
 800d6e6:	5c9a      	ldrb	r2, [r3, r2]
 800d6e8:	7d7b      	ldrb	r3, [r7, #21]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4b11      	ldr	r3, [pc, #68]	; (800d734 <mix_sub_columns+0x28c>)
 800d6ee:	5c5b      	ldrb	r3, [r3, r1]
 800d6f0:	4053      	eors	r3, r2
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	7abb      	ldrb	r3, [r7, #10]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4b0e      	ldr	r3, [pc, #56]	; (800d734 <mix_sub_columns+0x28c>)
 800d6fa:	5c5b      	ldrb	r3, [r3, r1]
 800d6fc:	4053      	eors	r3, r2
 800d6fe:	b2d9      	uxtb	r1, r3
 800d700:	7bfb      	ldrb	r3, [r7, #15]
 800d702:	461a      	mov	r2, r3
 800d704:	4b09      	ldr	r3, [pc, #36]	; (800d72c <mix_sub_columns+0x284>)
 800d706:	5c9a      	ldrb	r2, [r3, r2]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	330b      	adds	r3, #11
 800d70c:	404a      	eors	r2, r1
 800d70e:	b2d2      	uxtb	r2, r2
 800d710:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d712:	7d3b      	ldrb	r3, [r7, #20]
 800d714:	461a      	mov	r2, r3
 800d716:	4b05      	ldr	r3, [pc, #20]	; (800d72c <mix_sub_columns+0x284>)
 800d718:	5c9a      	ldrb	r2, [r3, r2]
 800d71a:	7a7b      	ldrb	r3, [r7, #9]
 800d71c:	4619      	mov	r1, r3
 800d71e:	4b04      	ldr	r3, [pc, #16]	; (800d730 <mix_sub_columns+0x288>)
 800d720:	5c5b      	ldrb	r3, [r3, r1]
 800d722:	4053      	eors	r3, r2
 800d724:	b2da      	uxtb	r2, r3
 800d726:	7bbb      	ldrb	r3, [r7, #14]
 800d728:	4619      	mov	r1, r3
 800d72a:	e005      	b.n	800d738 <mix_sub_columns+0x290>
 800d72c:	08020458 	.word	0x08020458
 800d730:	08020558 	.word	0x08020558
 800d734:	08020358 	.word	0x08020358
 800d738:	4b2d      	ldr	r3, [pc, #180]	; (800d7f0 <mix_sub_columns+0x348>)
 800d73a:	5c5b      	ldrb	r3, [r3, r1]
 800d73c:	4053      	eors	r3, r2
 800d73e:	b2d9      	uxtb	r1, r3
 800d740:	7cfb      	ldrb	r3, [r7, #19]
 800d742:	461a      	mov	r2, r3
 800d744:	4b2a      	ldr	r3, [pc, #168]	; (800d7f0 <mix_sub_columns+0x348>)
 800d746:	5c9a      	ldrb	r2, [r3, r2]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	330c      	adds	r3, #12
 800d74c:	404a      	eors	r2, r1
 800d74e:	b2d2      	uxtb	r2, r2
 800d750:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d752:	7d3b      	ldrb	r3, [r7, #20]
 800d754:	461a      	mov	r2, r3
 800d756:	4b26      	ldr	r3, [pc, #152]	; (800d7f0 <mix_sub_columns+0x348>)
 800d758:	5c9a      	ldrb	r2, [r3, r2]
 800d75a:	7a7b      	ldrb	r3, [r7, #9]
 800d75c:	4619      	mov	r1, r3
 800d75e:	4b25      	ldr	r3, [pc, #148]	; (800d7f4 <mix_sub_columns+0x34c>)
 800d760:	5c5b      	ldrb	r3, [r3, r1]
 800d762:	4053      	eors	r3, r2
 800d764:	b2da      	uxtb	r2, r3
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	4619      	mov	r1, r3
 800d76a:	4b23      	ldr	r3, [pc, #140]	; (800d7f8 <mix_sub_columns+0x350>)
 800d76c:	5c5b      	ldrb	r3, [r3, r1]
 800d76e:	4053      	eors	r3, r2
 800d770:	b2d9      	uxtb	r1, r3
 800d772:	7cfb      	ldrb	r3, [r7, #19]
 800d774:	461a      	mov	r2, r3
 800d776:	4b1e      	ldr	r3, [pc, #120]	; (800d7f0 <mix_sub_columns+0x348>)
 800d778:	5c9a      	ldrb	r2, [r3, r2]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	330d      	adds	r3, #13
 800d77e:	404a      	eors	r2, r1
 800d780:	b2d2      	uxtb	r2, r2
 800d782:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d784:	7d3b      	ldrb	r3, [r7, #20]
 800d786:	461a      	mov	r2, r3
 800d788:	4b19      	ldr	r3, [pc, #100]	; (800d7f0 <mix_sub_columns+0x348>)
 800d78a:	5c9a      	ldrb	r2, [r3, r2]
 800d78c:	7a7b      	ldrb	r3, [r7, #9]
 800d78e:	4619      	mov	r1, r3
 800d790:	4b17      	ldr	r3, [pc, #92]	; (800d7f0 <mix_sub_columns+0x348>)
 800d792:	5c5b      	ldrb	r3, [r3, r1]
 800d794:	4053      	eors	r3, r2
 800d796:	b2da      	uxtb	r2, r3
 800d798:	7bbb      	ldrb	r3, [r7, #14]
 800d79a:	4619      	mov	r1, r3
 800d79c:	4b15      	ldr	r3, [pc, #84]	; (800d7f4 <mix_sub_columns+0x34c>)
 800d79e:	5c5b      	ldrb	r3, [r3, r1]
 800d7a0:	4053      	eors	r3, r2
 800d7a2:	b2d9      	uxtb	r1, r3
 800d7a4:	7cfb      	ldrb	r3, [r7, #19]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	4b13      	ldr	r3, [pc, #76]	; (800d7f8 <mix_sub_columns+0x350>)
 800d7aa:	5c9a      	ldrb	r2, [r3, r2]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	330e      	adds	r3, #14
 800d7b0:	404a      	eors	r2, r1
 800d7b2:	b2d2      	uxtb	r2, r2
 800d7b4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d7b6:	7d3b      	ldrb	r3, [r7, #20]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <mix_sub_columns+0x350>)
 800d7bc:	5c9a      	ldrb	r2, [r3, r2]
 800d7be:	7a7b      	ldrb	r3, [r7, #9]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4b0b      	ldr	r3, [pc, #44]	; (800d7f0 <mix_sub_columns+0x348>)
 800d7c4:	5c5b      	ldrb	r3, [r3, r1]
 800d7c6:	4053      	eors	r3, r2
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4b08      	ldr	r3, [pc, #32]	; (800d7f0 <mix_sub_columns+0x348>)
 800d7d0:	5c5b      	ldrb	r3, [r3, r1]
 800d7d2:	4053      	eors	r3, r2
 800d7d4:	b2d9      	uxtb	r1, r3
 800d7d6:	7cfb      	ldrb	r3, [r7, #19]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4b06      	ldr	r3, [pc, #24]	; (800d7f4 <mix_sub_columns+0x34c>)
 800d7dc:	5c9a      	ldrb	r2, [r3, r2]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	330f      	adds	r3, #15
 800d7e2:	404a      	eors	r2, r1
 800d7e4:	b2d2      	uxtb	r2, r2
 800d7e6:	701a      	strb	r2, [r3, #0]
  }
 800d7e8:	bf00      	nop
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	08020358 	.word	0x08020358
 800d7f4:	08020458 	.word	0x08020458
 800d7f8:	08020558 	.word	0x08020558

0800d7fc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	460b      	mov	r3, r1
 800d806:	607a      	str	r2, [r7, #4]
 800d808:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d80a:	7afb      	ldrb	r3, [r7, #11]
 800d80c:	3b10      	subs	r3, #16
 800d80e:	2b10      	cmp	r3, #16
 800d810:	bf8c      	ite	hi
 800d812:	2201      	movhi	r2, #1
 800d814:	2200      	movls	r2, #0
 800d816:	b2d2      	uxtb	r2, r2
 800d818:	2a00      	cmp	r2, #0
 800d81a:	d10d      	bne.n	800d838 <lorawan_aes_set_key+0x3c>
 800d81c:	2201      	movs	r2, #1
 800d81e:	fa02 f303 	lsl.w	r3, r2, r3
 800d822:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	bf14      	ite	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	2300      	moveq	r3, #0
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b00      	cmp	r3, #0
 800d836:	d105      	bne.n	800d844 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d840:	23ff      	movs	r3, #255	; 0xff
 800d842:	e0b2      	b.n	800d9aa <lorawan_aes_set_key+0x1ae>
        break;
 800d844:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	7afa      	ldrb	r2, [r7, #11]
 800d84a:	68f9      	ldr	r1, [r7, #12]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fbfa 	bl	800d046 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d852:	7afb      	ldrb	r3, [r7, #11]
 800d854:	331c      	adds	r3, #28
 800d856:	b2db      	uxtb	r3, r3
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d85c:	7c7b      	ldrb	r3, [r7, #17]
 800d85e:	091b      	lsrs	r3, r3, #4
 800d860:	b2db      	uxtb	r3, r3
 800d862:	3b01      	subs	r3, #1
 800d864:	b2da      	uxtb	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d86c:	7afb      	ldrb	r3, [r7, #11]
 800d86e:	75fb      	strb	r3, [r7, #23]
 800d870:	2301      	movs	r3, #1
 800d872:	75bb      	strb	r3, [r7, #22]
 800d874:	e093      	b.n	800d99e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	3b04      	subs	r3, #4
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	5cd3      	ldrb	r3, [r2, r3]
 800d87e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d880:	7dfb      	ldrb	r3, [r7, #23]
 800d882:	3b03      	subs	r3, #3
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	5cd3      	ldrb	r3, [r2, r3]
 800d888:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	3b02      	subs	r3, #2
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	5cd3      	ldrb	r3, [r2, r3]
 800d892:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d894:	7dfb      	ldrb	r3, [r7, #23]
 800d896:	3b01      	subs	r3, #1
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	5cd3      	ldrb	r3, [r2, r3]
 800d89c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
 800d8a0:	7afa      	ldrb	r2, [r7, #11]
 800d8a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8a6:	fb01 f202 	mul.w	r2, r1, r2
 800d8aa:	1a9b      	subs	r3, r3, r2
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d127      	bne.n	800d902 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800d8b2:	7d7b      	ldrb	r3, [r7, #21]
 800d8b4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d8b6:	7d3b      	ldrb	r3, [r7, #20]
 800d8b8:	4a3e      	ldr	r2, [pc, #248]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d8ba:	5cd2      	ldrb	r2, [r2, r3]
 800d8bc:	7dbb      	ldrb	r3, [r7, #22]
 800d8be:	4053      	eors	r3, r2
 800d8c0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d8c2:	7cfb      	ldrb	r3, [r7, #19]
 800d8c4:	4a3b      	ldr	r2, [pc, #236]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d8c6:	5cd3      	ldrb	r3, [r2, r3]
 800d8c8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d8ca:	7cbb      	ldrb	r3, [r7, #18]
 800d8cc:	4a39      	ldr	r2, [pc, #228]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d8ce:	5cd3      	ldrb	r3, [r2, r3]
 800d8d0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d8d2:	7c3b      	ldrb	r3, [r7, #16]
 800d8d4:	4a37      	ldr	r2, [pc, #220]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d8d6:	5cd3      	ldrb	r3, [r2, r3]
 800d8d8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d8da:	7dbb      	ldrb	r3, [r7, #22]
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	b25a      	sxtb	r2, r3
 800d8e0:	7dbb      	ldrb	r3, [r7, #22]
 800d8e2:	09db      	lsrs	r3, r3, #7
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	0049      	lsls	r1, r1, #1
 800d8ea:	440b      	add	r3, r1
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	00c8      	lsls	r0, r1, #3
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	440b      	add	r3, r1
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	b25b      	sxtb	r3, r3
 800d8fa:	4053      	eors	r3, r2
 800d8fc:	b25b      	sxtb	r3, r3
 800d8fe:	75bb      	strb	r3, [r7, #22]
 800d900:	e01c      	b.n	800d93c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d902:	7afb      	ldrb	r3, [r7, #11]
 800d904:	2b18      	cmp	r3, #24
 800d906:	d919      	bls.n	800d93c <lorawan_aes_set_key+0x140>
 800d908:	7dfb      	ldrb	r3, [r7, #23]
 800d90a:	7afa      	ldrb	r2, [r7, #11]
 800d90c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d910:	fb01 f202 	mul.w	r2, r1, r2
 800d914:	1a9b      	subs	r3, r3, r2
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b10      	cmp	r3, #16
 800d91a:	d10f      	bne.n	800d93c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800d91c:	7d7b      	ldrb	r3, [r7, #21]
 800d91e:	4a25      	ldr	r2, [pc, #148]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d920:	5cd3      	ldrb	r3, [r2, r3]
 800d922:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d924:	7d3b      	ldrb	r3, [r7, #20]
 800d926:	4a23      	ldr	r2, [pc, #140]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d928:	5cd3      	ldrb	r3, [r2, r3]
 800d92a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d92c:	7cfb      	ldrb	r3, [r7, #19]
 800d92e:	4a21      	ldr	r2, [pc, #132]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d930:	5cd3      	ldrb	r3, [r2, r3]
 800d932:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d934:	7cbb      	ldrb	r3, [r7, #18]
 800d936:	4a1f      	ldr	r2, [pc, #124]	; (800d9b4 <lorawan_aes_set_key+0x1b8>)
 800d938:	5cd3      	ldrb	r3, [r2, r3]
 800d93a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d93c:	7dfa      	ldrb	r2, [r7, #23]
 800d93e:	7afb      	ldrb	r3, [r7, #11]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d944:	7c3b      	ldrb	r3, [r7, #16]
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	5cd1      	ldrb	r1, [r2, r3]
 800d94a:	7dfb      	ldrb	r3, [r7, #23]
 800d94c:	7d7a      	ldrb	r2, [r7, #21]
 800d94e:	404a      	eors	r2, r1
 800d950:	b2d1      	uxtb	r1, r2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d956:	7c3b      	ldrb	r3, [r7, #16]
 800d958:	3301      	adds	r3, #1
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	5cd1      	ldrb	r1, [r2, r3]
 800d95e:	7dfb      	ldrb	r3, [r7, #23]
 800d960:	3301      	adds	r3, #1
 800d962:	7d3a      	ldrb	r2, [r7, #20]
 800d964:	404a      	eors	r2, r1
 800d966:	b2d1      	uxtb	r1, r2
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d96c:	7c3b      	ldrb	r3, [r7, #16]
 800d96e:	3302      	adds	r3, #2
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	5cd1      	ldrb	r1, [r2, r3]
 800d974:	7dfb      	ldrb	r3, [r7, #23]
 800d976:	3302      	adds	r3, #2
 800d978:	7cfa      	ldrb	r2, [r7, #19]
 800d97a:	404a      	eors	r2, r1
 800d97c:	b2d1      	uxtb	r1, r2
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d982:	7c3b      	ldrb	r3, [r7, #16]
 800d984:	3303      	adds	r3, #3
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	5cd1      	ldrb	r1, [r2, r3]
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
 800d98c:	3303      	adds	r3, #3
 800d98e:	7cba      	ldrb	r2, [r7, #18]
 800d990:	404a      	eors	r2, r1
 800d992:	b2d1      	uxtb	r1, r2
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d998:	7dfb      	ldrb	r3, [r7, #23]
 800d99a:	3304      	adds	r3, #4
 800d99c:	75fb      	strb	r3, [r7, #23]
 800d99e:	7dfa      	ldrb	r2, [r7, #23]
 800d9a0:	7c7b      	ldrb	r3, [r7, #17]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	f4ff af67 	bcc.w	800d876 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08020358 	.word	0x08020358

0800d9b8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	; 0x28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d038      	beq.n	800da40 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	f107 0314 	add.w	r3, r7, #20
 800d9d4:	68f9      	ldr	r1, [r7, #12]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff fc07 	bl	800d1ea <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d9dc:	2301      	movs	r3, #1
 800d9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9e2:	e014      	b.n	800da0e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d9e4:	f107 0314 	add.w	r3, r7, #20
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7ff fd5d 	bl	800d4a8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d9f4:	0112      	lsls	r2, r2, #4
 800d9f6:	441a      	add	r2, r3
 800d9f8:	f107 0314 	add.w	r3, r7, #20
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7ff fcab 	bl	800d35a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800da04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da08:	3301      	adds	r3, #1
 800da0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800da14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800da18:	429a      	cmp	r2, r3
 800da1a:	d3e3      	bcc.n	800d9e4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800da1c:	f107 0314 	add.w	r3, r7, #20
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff fca7 	bl	800d374 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800da2c:	0112      	lsls	r2, r2, #4
 800da2e:	441a      	add	r2, r3
 800da30:	f107 0314 	add.w	r3, r7, #20
 800da34:	4619      	mov	r1, r3
 800da36:	68b8      	ldr	r0, [r7, #8]
 800da38:	f7ff fbd7 	bl	800d1ea <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	e000      	b.n	800da42 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800da40:	23ff      	movs	r3, #255	; 0xff
}
 800da42:	4618      	mov	r0, r3
 800da44:	3728      	adds	r7, #40	; 0x28
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	4603      	mov	r3, r0
 800da52:	71fb      	strb	r3, [r7, #7]
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800da54:	2306      	movs	r3, #6
 800da56:	73fb      	strb	r3, [r7, #15]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800da58:	f107 0208 	add.w	r2, r7, #8
 800da5c:	79fb      	ldrb	r3, [r7, #7]
 800da5e:	4611      	mov	r1, r2
 800da60:	4618      	mov	r0, r3
 800da62:	f000 f8dd 	bl	800dc20 <SecureElementGetKeyByID>
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800da6a:	bf00      	nop
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
	...

0800da74 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	6039      	str	r1, [r7, #0]
 800da7e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]
 800da84:	e01a      	b.n	800dabc <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800da86:	4b12      	ldr	r3, [pc, #72]	; (800dad0 <GetKeyByID+0x5c>)
 800da88:	6819      	ldr	r1, [r3, #0]
 800da8a:	7bfa      	ldrb	r2, [r7, #15]
 800da8c:	4613      	mov	r3, r2
 800da8e:	011b      	lsls	r3, r3, #4
 800da90:	4413      	add	r3, r2
 800da92:	440b      	add	r3, r1
 800da94:	3310      	adds	r3, #16
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	79fa      	ldrb	r2, [r7, #7]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d10b      	bne.n	800dab6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800da9e:	4b0c      	ldr	r3, [pc, #48]	; (800dad0 <GetKeyByID+0x5c>)
 800daa0:	6819      	ldr	r1, [r3, #0]
 800daa2:	7bfa      	ldrb	r2, [r7, #15]
 800daa4:	4613      	mov	r3, r2
 800daa6:	011b      	lsls	r3, r3, #4
 800daa8:	4413      	add	r3, r2
 800daaa:	3310      	adds	r3, #16
 800daac:	18ca      	adds	r2, r1, r3
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e006      	b.n	800dac4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dab6:	7bfb      	ldrb	r3, [r7, #15]
 800dab8:	3301      	adds	r3, #1
 800daba:	73fb      	strb	r3, [r7, #15]
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
 800dabe:	2b09      	cmp	r3, #9
 800dac0:	d9e1      	bls.n	800da86 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dac2:	2303      	movs	r3, #3
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	bc80      	pop	{r7}
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	20000754 	.word	0x20000754

0800dad4 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800dad4:	b590      	push	{r4, r7, lr}
 800dad6:	b0d1      	sub	sp, #324	; 0x144
 800dad8:	af00      	add	r7, sp, #0
 800dada:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800dade:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800dae2:	6020      	str	r0, [r4, #0]
 800dae4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800dae8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800daec:	6001      	str	r1, [r0, #0]
 800daee:	4619      	mov	r1, r3
 800daf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800daf4:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800daf8:	801a      	strh	r2, [r3, #0]
 800dafa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dafe:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800db02:	460a      	mov	r2, r1
 800db04:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800db06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <ComputeCmac+0x48>
 800db14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db1c:	2302      	movs	r3, #2
 800db1e:	e05c      	b.n	800dbda <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800db20:	f107 0314 	add.w	r3, r7, #20
 800db24:	4618      	mov	r0, r3
 800db26:	f7fe ffe9 	bl	800cafc <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800db2a:	f107 0210 	add.w	r2, r7, #16
 800db2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db32:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	4611      	mov	r1, r2
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7ff ff9a 	bl	800da74 <GetKeyByID>
 800db40:	4603      	mov	r3, r0
 800db42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800db46:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d143      	bne.n	800dbd6 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800db4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	f107 0314 	add.w	r3, r7, #20
 800db5e:	4611      	mov	r1, r2
 800db60:	4618      	mov	r0, r3
 800db62:	f7fe ffe4 	bl	800cb2e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800db66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d009      	beq.n	800db88 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800db74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800db7c:	f107 0014 	add.w	r0, r7, #20
 800db80:	2210      	movs	r2, #16
 800db82:	6819      	ldr	r1, [r3, #0]
 800db84:	f7fe ffe2 	bl	800cb4c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800db88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db8c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800db90:	881a      	ldrh	r2, [r3, #0]
 800db92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800db9a:	f107 0014 	add.w	r0, r7, #20
 800db9e:	6819      	ldr	r1, [r3, #0]
 800dba0:	f7fe ffd4 	bl	800cb4c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dba4:	f107 0214 	add.w	r2, r7, #20
 800dba8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dbac:	4611      	mov	r1, r2
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7ff f88e 	bl	800ccd0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dbb4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800dbb8:	061a      	lsls	r2, r3, #24
 800dbba:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800dbbe:	041b      	lsls	r3, r3, #16
 800dbc0:	431a      	orrs	r2, r3
 800dbc2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800dbca:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dbd4:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800dbd6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd90      	pop	{r4, r7, pc}

0800dbe4 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d101      	bne.n	800dbf8 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	e00a      	b.n	800dc0e <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800dbf8:	4a07      	ldr	r2, [pc, #28]	; (800dc18 <SecureElementInit+0x34>)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800dbfe:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <SecureElementInit+0x34>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	22c0      	movs	r2, #192	; 0xc0
 800dc04:	4905      	ldr	r1, [pc, #20]	; (800dc1c <SecureElementInit+0x38>)
 800dc06:	4618      	mov	r0, r3
 800dc08:	f00a fcf3 	bl	80185f2 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	20000754 	.word	0x20000754
 800dc1c:	08020c14 	.word	0x08020c14

0800dc20 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	6039      	str	r1, [r7, #0]
 800dc2a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
 800dc30:	e01a      	b.n	800dc68 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <SecureElementGetKeyByID+0x5c>)
 800dc34:	6819      	ldr	r1, [r3, #0]
 800dc36:	7bfa      	ldrb	r2, [r7, #15]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	4413      	add	r3, r2
 800dc3e:	440b      	add	r3, r1
 800dc40:	3310      	adds	r3, #16
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	79fa      	ldrb	r2, [r7, #7]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d10b      	bne.n	800dc62 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800dc4a:	4b0c      	ldr	r3, [pc, #48]	; (800dc7c <SecureElementGetKeyByID+0x5c>)
 800dc4c:	6819      	ldr	r1, [r3, #0]
 800dc4e:	7bfa      	ldrb	r2, [r7, #15]
 800dc50:	4613      	mov	r3, r2
 800dc52:	011b      	lsls	r3, r3, #4
 800dc54:	4413      	add	r3, r2
 800dc56:	3310      	adds	r3, #16
 800dc58:	18ca      	adds	r2, r1, r3
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e006      	b.n	800dc70 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	3301      	adds	r3, #1
 800dc66:	73fb      	strb	r3, [r7, #15]
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	2b09      	cmp	r3, #9
 800dc6c:	d9e1      	bls.n	800dc32 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc6e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bc80      	pop	{r7}
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	20000754 	.word	0x20000754

0800dc80 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
    PrintKey(APP_KEY);
 800dc84:	2000      	movs	r0, #0
 800dc86:	f7ff fee0 	bl	800da4a <PrintKey>
    PrintKey(NWK_KEY);
 800dc8a:	2001      	movs	r0, #1
 800dc8c:	f7ff fedd 	bl	800da4a <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
    PrintKey(APP_S_KEY);
 800dc90:	2003      	movs	r0, #3
 800dc92:	f7ff feda 	bl	800da4a <PrintKey>
    PrintKey(NWK_S_KEY);
 800dc96:	2002      	movs	r0, #2
 800dc98:	f7ff fed7 	bl	800da4a <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800dca6:	2004      	movs	r0, #4
 800dca8:	f7ff fecf 	bl	800da4a <PrintKey>
    PrintKey(MC_KE_KEY);
 800dcac:	207f      	movs	r0, #127	; 0x7f
 800dcae:	f7ff fecc 	bl	800da4a <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800dcb2:	2002      	movs	r0, #2
 800dcb4:	f7ff fec9 	bl	800da4a <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800dcb8:	2003      	movs	r0, #3
 800dcba:	f7ff fec6 	bl	800da4a <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	6039      	str	r1, [r7, #0]
 800dcce:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dcd6:	2302      	movs	r3, #2
 800dcd8:	e04c      	b.n	800dd74 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dcda:	2300      	movs	r3, #0
 800dcdc:	77fb      	strb	r3, [r7, #31]
 800dcde:	e045      	b.n	800dd6c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dce0:	4b26      	ldr	r3, [pc, #152]	; (800dd7c <SecureElementSetKey+0xb8>)
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	7ffa      	ldrb	r2, [r7, #31]
 800dce6:	4613      	mov	r3, r2
 800dce8:	011b      	lsls	r3, r3, #4
 800dcea:	4413      	add	r3, r2
 800dcec:	440b      	add	r3, r1
 800dcee:	3310      	adds	r3, #16
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	79fa      	ldrb	r2, [r7, #7]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d136      	bne.n	800dd66 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800dcf8:	79fb      	ldrb	r3, [r7, #7]
 800dcfa:	2b80      	cmp	r3, #128	; 0x80
 800dcfc:	d123      	bne.n	800dd46 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800dcfe:	2306      	movs	r3, #6
 800dd00:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800dd02:	2300      	movs	r3, #0
 800dd04:	60fb      	str	r3, [r7, #12]
 800dd06:	f107 0310 	add.w	r3, r7, #16
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	605a      	str	r2, [r3, #4]
 800dd10:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800dd12:	f107 030c 	add.w	r3, r7, #12
 800dd16:	227f      	movs	r2, #127	; 0x7f
 800dd18:	2110      	movs	r1, #16
 800dd1a:	6838      	ldr	r0, [r7, #0]
 800dd1c:	f000 f87d 	bl	800de1a <SecureElementAesEncrypt>
 800dd20:	4603      	mov	r3, r0
 800dd22:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800dd24:	4b15      	ldr	r3, [pc, #84]	; (800dd7c <SecureElementSetKey+0xb8>)
 800dd26:	6819      	ldr	r1, [r3, #0]
 800dd28:	7ffa      	ldrb	r2, [r7, #31]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	4413      	add	r3, r2
 800dd30:	3310      	adds	r3, #16
 800dd32:	440b      	add	r3, r1
 800dd34:	3301      	adds	r3, #1
 800dd36:	f107 010c 	add.w	r1, r7, #12
 800dd3a:	2210      	movs	r2, #16
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f00a fc58 	bl	80185f2 <memcpy1>
                return retval;
 800dd42:	7fbb      	ldrb	r3, [r7, #30]
 800dd44:	e016      	b.n	800dd74 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800dd46:	4b0d      	ldr	r3, [pc, #52]	; (800dd7c <SecureElementSetKey+0xb8>)
 800dd48:	6819      	ldr	r1, [r3, #0]
 800dd4a:	7ffa      	ldrb	r2, [r7, #31]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	011b      	lsls	r3, r3, #4
 800dd50:	4413      	add	r3, r2
 800dd52:	3310      	adds	r3, #16
 800dd54:	440b      	add	r3, r1
 800dd56:	3301      	adds	r3, #1
 800dd58:	2210      	movs	r2, #16
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f00a fc48 	bl	80185f2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800dd62:	2300      	movs	r3, #0
 800dd64:	e006      	b.n	800dd74 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd66:	7ffb      	ldrb	r3, [r7, #31]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	77fb      	strb	r3, [r7, #31]
 800dd6c:	7ffb      	ldrb	r3, [r7, #31]
 800dd6e:	2b09      	cmp	r3, #9
 800dd70:	d9b6      	bls.n	800dce0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd72:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3720      	adds	r7, #32
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	20000754 	.word	0x20000754

0800dd80 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af02      	add	r7, sp, #8
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	460b      	mov	r3, r1
 800dd90:	80fb      	strh	r3, [r7, #6]
 800dd92:	4613      	mov	r3, r2
 800dd94:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800dd96:	797b      	ldrb	r3, [r7, #5]
 800dd98:	2b7e      	cmp	r3, #126	; 0x7e
 800dd9a:	d901      	bls.n	800dda0 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e009      	b.n	800ddb4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800dda0:	7979      	ldrb	r1, [r7, #5]
 800dda2:	88fa      	ldrh	r2, [r7, #6]
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	68b9      	ldr	r1, [r7, #8]
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f7ff fe91 	bl	800dad4 <ComputeCmac>
 800ddb2:	4603      	mov	r3, r0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	607a      	str	r2, [r7, #4]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	460b      	mov	r3, r1
 800ddca:	817b      	strh	r3, [r7, #10]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddd6:	2302      	movs	r3, #2
 800ddd8:	e01b      	b.n	800de12 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ddda:	2306      	movs	r3, #6
 800dddc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800dde2:	7a79      	ldrb	r1, [r7, #9]
 800dde4:	897a      	ldrh	r2, [r7, #10]
 800dde6:	f107 0310 	add.w	r3, r7, #16
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	460b      	mov	r3, r1
 800ddee:	68f9      	ldr	r1, [r7, #12]
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	f7ff fe6f 	bl	800dad4 <ComputeCmac>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ddfa:	7dfb      	ldrb	r3, [r7, #23]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	e006      	b.n	800de12 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d001      	beq.n	800de10 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800de0c:	2301      	movs	r3, #1
 800de0e:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800de10:	7dfb      	ldrb	r3, [r7, #23]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b0c2      	sub	sp, #264	; 0x108
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	4608      	mov	r0, r1
 800de24:	4611      	mov	r1, r2
 800de26:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800de2a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800de2e:	6013      	str	r3, [r2, #0]
 800de30:	4603      	mov	r3, r0
 800de32:	817b      	strh	r3, [r7, #10]
 800de34:	460b      	mov	r3, r1
 800de36:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d006      	beq.n	800de4c <SecureElementAesEncrypt+0x32>
 800de3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d101      	bne.n	800de50 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800de4c:	2302      	movs	r3, #2
 800de4e:	e046      	b.n	800dede <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800de50:	897b      	ldrh	r3, [r7, #10]
 800de52:	f003 030f 	and.w	r3, r3, #15
 800de56:	b29b      	uxth	r3, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800de5c:	2305      	movs	r3, #5
 800de5e:	e03e      	b.n	800dede <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800de60:	f107 0314 	add.w	r3, r7, #20
 800de64:	22f0      	movs	r2, #240	; 0xf0
 800de66:	2100      	movs	r1, #0
 800de68:	4618      	mov	r0, r3
 800de6a:	f00a fbfd 	bl	8018668 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800de6e:	f107 0210 	add.w	r2, r7, #16
 800de72:	7a7b      	ldrb	r3, [r7, #9]
 800de74:	4611      	mov	r1, r2
 800de76:	4618      	mov	r0, r3
 800de78:	f7ff fdfc 	bl	800da74 <GetKeyByID>
 800de7c:	4603      	mov	r3, r0
 800de7e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800de82:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800de86:	2b00      	cmp	r3, #0
 800de88:	d127      	bne.n	800deda <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3301      	adds	r3, #1
 800de8e:	f107 0214 	add.w	r2, r7, #20
 800de92:	2110      	movs	r1, #16
 800de94:	4618      	mov	r0, r3
 800de96:	f7ff fcb1 	bl	800d7fc <lorawan_aes_set_key>

        uint8_t block = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800dea0:	e018      	b.n	800ded4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800dea2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	18d0      	adds	r0, r2, r3
 800deaa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800deae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800deb2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800deb6:	6812      	ldr	r2, [r2, #0]
 800deb8:	4413      	add	r3, r2
 800deba:	f107 0214 	add.w	r2, r7, #20
 800debe:	4619      	mov	r1, r3
 800dec0:	f7ff fd7a 	bl	800d9b8 <lorawan_aes_encrypt>
            block = block + 16;
 800dec4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dec8:	3310      	adds	r3, #16
 800deca:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800dece:	897b      	ldrh	r3, [r7, #10]
 800ded0:	3b10      	subs	r3, #16
 800ded2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800ded4:	897b      	ldrh	r3, [r7, #10]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1e3      	bne.n	800dea2 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800deda:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800dede:	4618      	mov	r0, r3
 800dee0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	70fb      	strb	r3, [r7, #3]
 800def4:	4613      	mov	r3, r2
 800def6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d101      	bne.n	800df02 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800defe:	2302      	movs	r3, #2
 800df00:	e02e      	b.n	800df60 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800df02:	2306      	movs	r3, #6
 800df04:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800df06:	78bb      	ldrb	r3, [r7, #2]
 800df08:	2b7f      	cmp	r3, #127	; 0x7f
 800df0a:	d104      	bne.n	800df16 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800df0c:	78fb      	ldrb	r3, [r7, #3]
 800df0e:	2b04      	cmp	r3, #4
 800df10:	d001      	beq.n	800df16 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800df12:	2303      	movs	r3, #3
 800df14:	e024      	b.n	800df60 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800df16:	2300      	movs	r3, #0
 800df18:	60fb      	str	r3, [r7, #12]
 800df1a:	f107 0310 	add.w	r3, r7, #16
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]
 800df22:	605a      	str	r2, [r3, #4]
 800df24:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800df26:	f107 030c 	add.w	r3, r7, #12
 800df2a:	78fa      	ldrb	r2, [r7, #3]
 800df2c:	2110      	movs	r1, #16
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff ff73 	bl	800de1a <SecureElementAesEncrypt>
 800df34:	4603      	mov	r3, r0
 800df36:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800df38:	7ffb      	ldrb	r3, [r7, #31]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800df3e:	7ffb      	ldrb	r3, [r7, #31]
 800df40:	e00e      	b.n	800df60 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800df42:	f107 020c 	add.w	r2, r7, #12
 800df46:	78bb      	ldrb	r3, [r7, #2]
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7ff feba 	bl	800dcc4 <SecureElementSetKey>
 800df50:	4603      	mov	r3, r0
 800df52:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800df54:	7ffb      	ldrb	r3, [r7, #31]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800df5a:	7ffb      	ldrb	r3, [r7, #31]
 800df5c:	e000      	b.n	800df60 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800df5e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800df60:	4618      	mov	r0, r3
 800df62:	3720      	adds	r7, #32
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607b      	str	r3, [r7, #4]
 800df72:	4603      	mov	r3, r0
 800df74:	73fb      	strb	r3, [r7, #15]
 800df76:	4613      	mov	r3, r2
 800df78:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d005      	beq.n	800df8c <SecureElementProcessJoinAccept+0x24>
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <SecureElementProcessJoinAccept+0x24>
 800df86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d101      	bne.n	800df90 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df8c:	2302      	movs	r3, #2
 800df8e:	e064      	b.n	800e05a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800df90:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df94:	2b21      	cmp	r3, #33	; 0x21
 800df96:	d901      	bls.n	800df9c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800df98:	2305      	movs	r3, #5
 800df9a:	e05e      	b.n	800e05a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800df9c:	2301      	movs	r3, #1
 800df9e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800dfa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfac:	f00a fb21 	bl	80185f2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	1c58      	adds	r0, r3, #1
 800dfb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	b299      	uxth	r1, r3
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	7dfa      	ldrb	r2, [r7, #23]
 800dfc4:	f7ff ff29 	bl	800de1a <SecureElementAesEncrypt>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dfce:	2307      	movs	r3, #7
 800dfd0:	e043      	b.n	800e05a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	330b      	adds	r3, #11
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	09db      	lsrs	r3, r3, #7
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfde:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800dfe4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfe8:	3b04      	subs	r3, #4
 800dfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfec:	4413      	add	r3, r2
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800dff2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dff6:	3b03      	subs	r3, #3
 800dff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dffa:	4413      	add	r3, r2
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	021b      	lsls	r3, r3, #8
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	4313      	orrs	r3, r2
 800e004:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e00a:	3b02      	subs	r3, #2
 800e00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00e:	4413      	add	r3, r2
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	041b      	lsls	r3, r3, #16
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	4313      	orrs	r3, r2
 800e018:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e01a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e01e:	3b01      	subs	r3, #1
 800e020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e022:	4413      	add	r3, r2
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	061b      	lsls	r3, r3, #24
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10e      	bne.n	800e054 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e036:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	3b04      	subs	r3, #4
 800e03e:	b299      	uxth	r1, r3
 800e040:	2301      	movs	r3, #1
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e046:	f7ff feb9 	bl	800ddbc <SecureElementVerifyAesCmac>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d003      	beq.n	800e058 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e050:	2301      	movs	r3, #1
 800e052:	e002      	b.n	800e05a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e054:	2304      	movs	r3, #4
 800e056:	e000      	b.n	800e05a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3718      	adds	r7, #24
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e072:	2302      	movs	r3, #2
 800e074:	e006      	b.n	800e084 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800e076:	4b05      	ldr	r3, [pc, #20]	; (800e08c <SecureElementRandomNumber+0x28>)
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	4798      	blx	r3
 800e07c:	4602      	mov	r2, r0
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	080206a0 	.word	0x080206a0

0800e090 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e09e:	2302      	movs	r3, #2
 800e0a0:	e007      	b.n	800e0b2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e0a2:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <SecureElementSetDevEui+0x2c>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2208      	movs	r2, #8
 800e0a8:	6879      	ldr	r1, [r7, #4]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f00a faa1 	bl	80185f2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	20000754 	.word	0x20000754

0800e0c0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800e0c4:	4b02      	ldr	r3, [pc, #8]	; (800e0d0 <SecureElementGetDevEui+0x10>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bc80      	pop	{r7}
 800e0ce:	4770      	bx	lr
 800e0d0:	20000754 	.word	0x20000754

0800e0d4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	e008      	b.n	800e0f8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e0e6:	4b06      	ldr	r3, [pc, #24]	; (800e100 <SecureElementSetJoinEui+0x2c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	3308      	adds	r3, #8
 800e0ec:	2208      	movs	r2, #8
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f00a fa7e 	bl	80185f2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20000754 	.word	0x20000754

0800e104 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800e108:	4b03      	ldr	r3, [pc, #12]	; (800e118 <SecureElementGetJoinEui+0x14>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3308      	adds	r3, #8
}
 800e10e:	4618      	mov	r0, r3
 800e110:	46bd      	mov	sp, r7
 800e112:	bc80      	pop	{r7}
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	20000754 	.word	0x20000754

0800e11c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800e126:	4a1a      	ldr	r2, [pc, #104]	; (800e190 <LmHandlerInit+0x74>)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e12c:	4b19      	ldr	r3, [pc, #100]	; (800e194 <LmHandlerInit+0x78>)
 800e12e:	4a1a      	ldr	r2, [pc, #104]	; (800e198 <LmHandlerInit+0x7c>)
 800e130:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e132:	4b18      	ldr	r3, [pc, #96]	; (800e194 <LmHandlerInit+0x78>)
 800e134:	4a19      	ldr	r2, [pc, #100]	; (800e19c <LmHandlerInit+0x80>)
 800e136:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e138:	4b16      	ldr	r3, [pc, #88]	; (800e194 <LmHandlerInit+0x78>)
 800e13a:	4a19      	ldr	r2, [pc, #100]	; (800e1a0 <LmHandlerInit+0x84>)
 800e13c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e13e:	4b15      	ldr	r3, [pc, #84]	; (800e194 <LmHandlerInit+0x78>)
 800e140:	4a18      	ldr	r2, [pc, #96]	; (800e1a4 <LmHandlerInit+0x88>)
 800e142:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e144:	4b12      	ldr	r3, [pc, #72]	; (800e190 <LmHandlerInit+0x74>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <LmHandlerInit+0x8c>)
 800e14c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e14e:	4b10      	ldr	r3, [pc, #64]	; (800e190 <LmHandlerInit+0x74>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	4a14      	ldr	r2, [pc, #80]	; (800e1a8 <LmHandlerInit+0x8c>)
 800e156:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e158:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <LmHandlerInit+0x74>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	4a12      	ldr	r2, [pc, #72]	; (800e1a8 <LmHandlerInit+0x8c>)
 800e160:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e162:	4b11      	ldr	r3, [pc, #68]	; (800e1a8 <LmHandlerInit+0x8c>)
 800e164:	4a11      	ldr	r2, [pc, #68]	; (800e1ac <LmHandlerInit+0x90>)
 800e166:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e168:	4b09      	ldr	r3, [pc, #36]	; (800e190 <LmHandlerInit+0x74>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	4a0e      	ldr	r2, [pc, #56]	; (800e1a8 <LmHandlerInit+0x8c>)
 800e170:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800e172:	490f      	ldr	r1, [pc, #60]	; (800e1b0 <LmHandlerInit+0x94>)
 800e174:	2000      	movs	r0, #0
 800e176:	f000 fd61 	bl	800ec3c <LmHandlerPackageRegister>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e180:	f04f 33ff 	mov.w	r3, #4294967295
 800e184:	e000      	b.n	800e188 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20000780 	.word	0x20000780
 800e194:	20000784 	.word	0x20000784
 800e198:	0800e909 	.word	0x0800e909
 800e19c:	0800e971 	.word	0x0800e971
 800e1a0:	0800ea4d 	.word	0x0800ea4d
 800e1a4:	0800eb69 	.word	0x0800eb69
 800e1a8:	20000794 	.word	0x20000794
 800e1ac:	0800efb9 	.word	0x0800efb9
 800e1b0:	200000a8 	.word	0x200000a8

0800e1b4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b090      	sub	sp, #64	; 0x40
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800e1bc:	2214      	movs	r2, #20
 800e1be:	6879      	ldr	r1, [r7, #4]
 800e1c0:	487e      	ldr	r0, [pc, #504]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e1c2:	f00d fce3 	bl	801bb8c <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e1c6:	f7fe fbcd 	bl	800c964 <LoraInfo_GetPtr>
 800e1ca:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800e1cc:	4b7b      	ldr	r3, [pc, #492]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	4093      	lsls	r3, r2
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4013      	ands	r3, r2
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d100      	bne.n	800e1e4 <LmHandlerConfigure+0x30>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
        while (1) {}  /* error: Region is not defined in the MW */
 800e1e2:	e7fe      	b.n	800e1e2 <LmHandlerConfigure+0x2e>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800e1e4:	4b75      	ldr	r3, [pc, #468]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4975      	ldr	r1, [pc, #468]	; (800e3c0 <LmHandlerConfigure+0x20c>)
 800e1ec:	4875      	ldr	r0, [pc, #468]	; (800e3c4 <LmHandlerConfigure+0x210>)
 800e1ee:	f004 fba9 	bl	8012944 <LoRaMacInitialization>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <LmHandlerConfigure+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fc:	e0d9      	b.n	800e3b2 <LmHandlerConfigure+0x1fe>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800e1fe:	2326      	movs	r3, #38	; 0x26
 800e200:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e202:	f107 0318 	add.w	r3, r7, #24
 800e206:	4618      	mov	r0, r3
 800e208:	f005 f8c0 	bl	801338c <LoRaMacMibSetRequestConfirm>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d103      	bne.n	800e21a <LmHandlerConfigure+0x66>
    {
        CtxRestoreDone = true;
 800e212:	4b6d      	ldr	r3, [pc, #436]	; (800e3c8 <LmHandlerConfigure+0x214>)
 800e214:	2201      	movs	r2, #1
 800e216:	701a      	strb	r2, [r3, #0]
 800e218:	e02a      	b.n	800e270 <LmHandlerConfigure+0xbc>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800e21a:	2327      	movs	r3, #39	; 0x27
 800e21c:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800e21e:	4b6b      	ldr	r3, [pc, #428]	; (800e3cc <LmHandlerConfigure+0x218>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00c      	beq.n	800e242 <LmHandlerConfigure+0x8e>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e228:	f107 0318 	add.w	r3, r7, #24
 800e22c:	4618      	mov	r0, r3
 800e22e:	f004 ff27 	bl	8013080 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800e232:	4b66      	ldr	r3, [pc, #408]	; (800e3cc <LmHandlerConfigure+0x218>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	69fa      	ldr	r2, [r7, #28]
 800e23a:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800e23e:	4610      	mov	r0, r2
 800e240:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800e242:	2326      	movs	r3, #38	; 0x26
 800e244:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e246:	f107 0318 	add.w	r3, r7, #24
 800e24a:	4618      	mov	r0, r3
 800e24c:	f005 f89e 	bl	801338c <LoRaMacMibSetRequestConfirm>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10c      	bne.n	800e270 <LmHandlerConfigure+0xbc>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e256:	2301      	movs	r3, #1
 800e258:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e25a:	f107 0318 	add.w	r3, r7, #24
 800e25e:	4618      	mov	r0, r3
 800e260:	f004 ff0e 	bl	8013080 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800e264:	7f3b      	ldrb	r3, [r7, #28]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d002      	beq.n	800e270 <LmHandlerConfigure+0xbc>
            {
                CtxRestoreDone = true;
 800e26a:	4b57      	ldr	r3, [pc, #348]	; (800e3c8 <LmHandlerConfigure+0x214>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800e270:	4b55      	ldr	r3, [pc, #340]	; (800e3c8 <LmHandlerConfigure+0x214>)
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d02a      	beq.n	800e2ce <LmHandlerConfigure+0x11a>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800e278:	4b54      	ldr	r3, [pc, #336]	; (800e3cc <LmHandlerConfigure+0x218>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	69db      	ldr	r3, [r3, #28]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d004      	beq.n	800e28c <LmHandlerConfigure+0xd8>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800e282:	4b52      	ldr	r3, [pc, #328]	; (800e3cc <LmHandlerConfigure+0x218>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	69db      	ldr	r3, [r3, #28]
 800e288:	2000      	movs	r0, #0
 800e28a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800e28c:	2306      	movs	r3, #6
 800e28e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e290:	f107 0318 	add.w	r3, r7, #24
 800e294:	4618      	mov	r0, r3
 800e296:	f004 fef3 	bl	8013080 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	4a4c      	ldr	r2, [pc, #304]	; (800e3d0 <LmHandlerConfigure+0x21c>)
 800e29e:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800e2a0:	2326      	movs	r3, #38	; 0x26
 800e2a2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e2a4:	f107 0318 	add.w	r3, r7, #24
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f004 fee9 	bl	8013080 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e2b4:	4b41      	ldr	r3, [pc, #260]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e2b6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800e2be:	4b3f      	ldr	r3, [pc, #252]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e2c0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800e2c8:	4b3c      	ldr	r3, [pc, #240]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e2ca:	709a      	strb	r2, [r3, #2]
 800e2cc:	e012      	b.n	800e2f4 <LmHandlerConfigure+0x140>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800e2ce:	2305      	movs	r3, #5
 800e2d0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e2d6:	f107 0318 	add.w	r3, r7, #24
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f005 f856 	bl	801338c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800e2e0:	2306      	movs	r3, #6
 800e2e2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e2e4:	4b3a      	ldr	r3, [pc, #232]	; (800e3d0 <LmHandlerConfigure+0x21c>)
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e2ea:	f107 0318 	add.w	r3, r7, #24
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f005 f84c 	bl	801338c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e2f8:	f107 0318 	add.w	r3, r7, #24
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f004 febf 	bl	8013080 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	2208      	movs	r2, #8
 800e306:	4619      	mov	r1, r3
 800e308:	4831      	ldr	r0, [pc, #196]	; (800e3d0 <LmHandlerConfigure+0x21c>)
 800e30a:	f00a f972 	bl	80185f2 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800e30e:	2303      	movs	r3, #3
 800e310:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e312:	f107 0318 	add.w	r3, r7, #24
 800e316:	4618      	mov	r0, r3
 800e318:	f004 feb2 	bl	8013080 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	2208      	movs	r2, #8
 800e320:	4619      	mov	r1, r3
 800e322:	482c      	ldr	r0, [pc, #176]	; (800e3d4 <LmHandlerConfigure+0x220>)
 800e324:	f00a f965 	bl	80185f2 <memcpy1>

    SecureElementPrintKeys();
 800e328:	f7ff fcaa 	bl	800dc80 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e32c:	230f      	movs	r3, #15
 800e32e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e330:	2301      	movs	r3, #1
 800e332:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e334:	f107 0318 	add.w	r3, r7, #24
 800e338:	4618      	mov	r0, r3
 800e33a:	f005 f827 	bl	801338c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e33e:	2310      	movs	r3, #16
 800e340:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e342:	2300      	movs	r3, #0
 800e344:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e346:	f107 0318 	add.w	r3, r7, #24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f005 f81e 	bl	801338c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e350:	2304      	movs	r3, #4
 800e352:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e354:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e356:	789b      	ldrb	r3, [r3, #2]
 800e358:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e35a:	f107 0318 	add.w	r3, r7, #24
 800e35e:	4618      	mov	r0, r3
 800e360:	f005 f814 	bl	801338c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e364:	2337      	movs	r3, #55	; 0x37
 800e366:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e368:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e36e:	f107 0318 	add.w	r3, r7, #24
 800e372:	4618      	mov	r0, r3
 800e374:	f005 f80a 	bl	801338c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e378:	230f      	movs	r3, #15
 800e37a:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e37c:	4b0f      	ldr	r3, [pc, #60]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f107 0210 	add.w	r2, r7, #16
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f007 fe52 	bl	8016030 <RegionGetPhyParam>
 800e38c:	4603      	mov	r3, r0
 800e38e:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	bf14      	ite	ne
 800e396:	2301      	movne	r3, #1
 800e398:	2300      	moveq	r3, #0
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	4b07      	ldr	r3, [pc, #28]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e39e:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800e3a0:	2014      	movs	r0, #20
 800e3a2:	f000 fa99 	bl	800e8d8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e3a6:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <LmHandlerConfigure+0x208>)
 800e3a8:	799b      	ldrb	r3, [r3, #6]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f005 fd7e 	bl	8013eac <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3740      	adds	r7, #64	; 0x40
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	2000076c 	.word	0x2000076c
 800e3c0:	20000794 	.word	0x20000794
 800e3c4:	20000784 	.word	0x20000784
 800e3c8:	2000089e 	.word	0x2000089e
 800e3cc:	20000780 	.word	0x20000780
 800e3d0:	20000090 	.word	0x20000090
 800e3d4:	20000098 	.word	0x20000098

0800e3d8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800e3dc:	f002 fa84 	bl	80108e8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800e3e0:	f000 fd30 	bl	800ee44 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e3e4:	bf00      	nop
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e3ec:	4b02      	ldr	r3, [pc, #8]	; (800e3f8 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bc80      	pop	{r7}
 800e3f6:	4770      	bx	lr
 800e3f8:	200007a8 	.word	0x200007a8

0800e3fc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b090      	sub	sp, #64	; 0x40
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	460a      	mov	r2, r1
 800e406:	71fb      	strb	r3, [r7, #7]
 800e408:	4613      	mov	r3, r2
 800e40a:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e40c:	2301      	movs	r3, #1
 800e40e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e412:	4b35      	ldr	r3, [pc, #212]	; (800e4e8 <LmHandlerJoin+0xec>)
 800e414:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800e41e:	79fb      	ldrb	r3, [r7, #7]
 800e420:	2b02      	cmp	r3, #2
 800e422:	d110      	bne.n	800e446 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e424:	2302      	movs	r3, #2
 800e426:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e42a:	4b30      	ldr	r3, [pc, #192]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e42c:	2202      	movs	r2, #2
 800e42e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e430:	4a2e      	ldr	r2, [pc, #184]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e432:	79bb      	ldrb	r3, [r7, #6]
 800e434:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800e436:	f004 fd39 	bl	8012eac <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800e43a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e43e:	4618      	mov	r0, r3
 800e440:	f005 fafe 	bl	8013a40 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800e444:	e04b      	b.n	800e4de <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e446:	2301      	movs	r3, #1
 800e448:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e44c:	4b27      	ldr	r3, [pc, #156]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e44e:	2201      	movs	r2, #1
 800e450:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e452:	4b25      	ldr	r3, [pc, #148]	; (800e4e8 <LmHandlerJoin+0xec>)
 800e454:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e458:	4b24      	ldr	r3, [pc, #144]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e45a:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e45c:	4b23      	ldr	r3, [pc, #140]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e45e:	2200      	movs	r2, #0
 800e460:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800e462:	4a22      	ldr	r2, [pc, #136]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e464:	79bb      	ldrb	r3, [r7, #6]
 800e466:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800e468:	4b21      	ldr	r3, [pc, #132]	; (800e4f0 <LmHandlerJoin+0xf4>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	f083 0301 	eor.w	r3, r3, #1
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d01e      	beq.n	800e4b4 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e476:	231e      	movs	r3, #30
 800e478:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e47a:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <LmHandlerJoin+0xec>)
 800e47c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e480:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e482:	f107 0308 	add.w	r3, r7, #8
 800e486:	4618      	mov	r0, r3
 800e488:	f004 ff80 	bl	801338c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e48c:	231f      	movs	r3, #31
 800e48e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e490:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <LmHandlerJoin+0xec>)
 800e492:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e496:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e498:	f107 0308 	add.w	r3, r7, #8
 800e49c:	4618      	mov	r0, r3
 800e49e:	f004 ff75 	bl	801338c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e4a2:	2328      	movs	r3, #40	; 0x28
 800e4a4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e4a6:	4b13      	ldr	r3, [pc, #76]	; (800e4f4 <LmHandlerJoin+0xf8>)
 800e4a8:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800e4aa:	f107 0308 	add.w	r3, r7, #8
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f004 ff6c 	bl	801338c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800e4b4:	f004 fcfa 	bl	8012eac <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e4c0:	f107 0308 	add.w	r3, r7, #8
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f004 ff61 	bl	801338c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e4ca:	4b0b      	ldr	r3, [pc, #44]	; (800e4f8 <LmHandlerJoin+0xfc>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d0:	4806      	ldr	r0, [pc, #24]	; (800e4ec <LmHandlerJoin+0xf0>)
 800e4d2:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e4d4:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <LmHandlerJoin+0xec>)
 800e4d6:	785b      	ldrb	r3, [r3, #1]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 f92b 	bl	800e734 <LmHandlerRequestClass>
}
 800e4de:	bf00      	nop
 800e4e0:	3740      	adds	r7, #64	; 0x40
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	2000076c 	.word	0x2000076c
 800e4ec:	200000b4 	.word	0x200000b4
 800e4f0:	2000089e 	.word	0x2000089e
 800e4f4:	01000300 	.word	0x01000300
 800e4f8:	20000780 	.word	0x20000780

0800e4fc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08a      	sub	sp, #40	; 0x28
 800e500:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e502:	2301      	movs	r3, #1
 800e504:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e506:	463b      	mov	r3, r7
 800e508:	4618      	mov	r0, r3
 800e50a:	f004 fdb9 	bl	8013080 <LoRaMacMibGetRequestConfirm>
 800e50e:	4603      	mov	r3, r0
 800e510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800e514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d106      	bne.n	800e52a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e51c:	793b      	ldrb	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e522:	2300      	movs	r3, #0
 800e524:	e002      	b.n	800e52c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e526:	2301      	movs	r3, #1
 800e528:	e000      	b.n	800e52c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e52a:	2300      	movs	r3, #0
    }
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3728      	adds	r7, #40	; 0x28
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b08a      	sub	sp, #40	; 0x28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	460b      	mov	r3, r1
 800e53e:	70fb      	strb	r3, [r7, #3]
 800e540:	4613      	mov	r3, r2
 800e542:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e544:	23ff      	movs	r3, #255	; 0xff
 800e546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800e54a:	f001 ff5b 	bl	8010404 <LoRaMacIsBusy>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e554:	f06f 0301 	mvn.w	r3, #1
 800e558:	e0b6      	b.n	800e6c8 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e55a:	f7ff ffcf 	bl	800e4fc <LmHandlerJoinStatus>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b01      	cmp	r3, #1
 800e562:	d00a      	beq.n	800e57a <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e564:	4b5a      	ldr	r3, [pc, #360]	; (800e6d0 <LmHandlerSend+0x19c>)
 800e566:	799b      	ldrb	r3, [r3, #6]
 800e568:	4a59      	ldr	r2, [pc, #356]	; (800e6d0 <LmHandlerSend+0x19c>)
 800e56a:	79d2      	ldrb	r2, [r2, #7]
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff ff44 	bl	800e3fc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e574:	f06f 0302 	mvn.w	r3, #2
 800e578:	e0a6      	b.n	800e6c8 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800e57a:	4b56      	ldr	r3, [pc, #344]	; (800e6d4 <LmHandlerSend+0x1a0>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	4798      	blx	r3
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00d      	beq.n	800e5a4 <LmHandlerSend+0x70>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	781a      	ldrb	r2, [r3, #0]
 800e58c:	4b51      	ldr	r3, [pc, #324]	; (800e6d4 <LmHandlerSend+0x1a0>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	429a      	cmp	r2, r3
 800e594:	d006      	beq.n	800e5a4 <LmHandlerSend+0x70>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e59e:	f06f 0303 	mvn.w	r3, #3
 800e5a2:	e091      	b.n	800e6c8 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e5a4:	4a4c      	ldr	r2, [pc, #304]	; (800e6d8 <LmHandlerSend+0x1a4>)
 800e5a6:	78fb      	ldrb	r3, [r7, #3]
 800e5a8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e5aa:	78fb      	ldrb	r3, [r7, #3]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	bf14      	ite	ne
 800e5b0:	2301      	movne	r3, #1
 800e5b2:	2300      	moveq	r3, #0
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e5b8:	4b48      	ldr	r3, [pc, #288]	; (800e6dc <LmHandlerSend+0x1a8>)
 800e5ba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e5be:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	785b      	ldrb	r3, [r3, #1]
 800e5c4:	f107 020c 	add.w	r2, r7, #12
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f004 fcd0 	bl	8012f70 <LoRaMacQueryTxPossible>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d009      	beq.n	800e5ea <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e5e2:	23f9      	movs	r3, #249	; 0xf9
 800e5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5e8:	e009      	b.n	800e5fe <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e5fe:	4b36      	ldr	r3, [pc, #216]	; (800e6d8 <LmHandlerSend+0x1a4>)
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	3310      	adds	r3, #16
 800e604:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e608:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e60c:	4b33      	ldr	r3, [pc, #204]	; (800e6dc <LmHandlerSend+0x1a8>)
 800e60e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e612:	4b31      	ldr	r3, [pc, #196]	; (800e6d8 <LmHandlerSend+0x1a4>)
 800e614:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e616:	78ba      	ldrb	r2, [r7, #2]
 800e618:	f107 0310 	add.w	r3, r7, #16
 800e61c:	4611      	mov	r1, r2
 800e61e:	4618      	mov	r0, r3
 800e620:	f005 fb4e 	bl	8013cc0 <LoRaMacMcpsRequest>
 800e624:	4603      	mov	r3, r0
 800e626:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	4a2c      	ldr	r2, [pc, #176]	; (800e6e0 <LmHandlerSend+0x1ac>)
 800e62e:	6013      	str	r3, [r2, #0]

    switch (status)
 800e630:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e634:	2b11      	cmp	r3, #17
 800e636:	d840      	bhi.n	800e6ba <LmHandlerSend+0x186>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <LmHandlerSend+0x10c>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e689 	.word	0x0800e689
 800e644:	0800e69b 	.word	0x0800e69b
 800e648:	0800e6bb 	.word	0x0800e6bb
 800e64c:	0800e6bb 	.word	0x0800e6bb
 800e650:	0800e6bb 	.word	0x0800e6bb
 800e654:	0800e6bb 	.word	0x0800e6bb
 800e658:	0800e6bb 	.word	0x0800e6bb
 800e65c:	0800e6a3 	.word	0x0800e6a3
 800e660:	0800e6bb 	.word	0x0800e6bb
 800e664:	0800e6bb 	.word	0x0800e6bb
 800e668:	0800e6bb 	.word	0x0800e6bb
 800e66c:	0800e6b3 	.word	0x0800e6b3
 800e670:	0800e6bb 	.word	0x0800e6bb
 800e674:	0800e6bb 	.word	0x0800e6bb
 800e678:	0800e69b 	.word	0x0800e69b
 800e67c:	0800e69b 	.word	0x0800e69b
 800e680:	0800e69b 	.word	0x0800e69b
 800e684:	0800e6ab 	.word	0x0800e6ab
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800e688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e68c:	f113 0f07 	cmn.w	r3, #7
 800e690:	d017      	beq.n	800e6c2 <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e692:	2300      	movs	r3, #0
 800e694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e698:	e013      	b.n	800e6c2 <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e69a:	23fe      	movs	r3, #254	; 0xfe
 800e69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e6a0:	e010      	b.n	800e6c4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e6a2:	23fd      	movs	r3, #253	; 0xfd
 800e6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e6a8:	e00c      	b.n	800e6c4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e6aa:	23fb      	movs	r3, #251	; 0xfb
 800e6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e6b0:	e008      	b.n	800e6c4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e6b2:	23fa      	movs	r3, #250	; 0xfa
 800e6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e6b8:	e004      	b.n	800e6c4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e6ba:	23ff      	movs	r3, #255	; 0xff
 800e6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e6c0:	e000      	b.n	800e6c4 <LmHandlerSend+0x190>
            break;
 800e6c2:	bf00      	nop
    }

    return lmhStatus;
 800e6c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3728      	adds	r7, #40	; 0x28
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	200000b4 	.word	0x200000b4
 800e6d4:	20000758 	.word	0x20000758
 800e6d8:	200000bc 	.word	0x200000bc
 800e6dc:	2000076c 	.word	0x2000076c
 800e6e0:	200007a8 	.word	0x200007a8

0800e6e4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e6ea:	230a      	movs	r3, #10
 800e6ec:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e6ee:	463b      	mov	r3, r7
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f005 f9a5 	bl	8013a40 <LoRaMacMlmeRequest>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	4a06      	ldr	r2, [pc, #24]	; (800e718 <LmHandlerDeviceTimeReq+0x34>)
 800e6fe:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e700:	7dfb      	ldrb	r3, [r7, #23]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d101      	bne.n	800e70a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e706:	2300      	movs	r3, #0
 800e708:	e001      	b.n	800e70e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	200007a8 	.word	0x200007a8

0800e71c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	4603      	mov	r3, r0
 800e724:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e726:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	370c      	adds	r7, #12
 800e72e:	46bd      	mov	sp, r7
 800e730:	bc80      	pop	{r7}
 800e732:	4770      	bx	lr

0800e734 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08c      	sub	sp, #48	; 0x30
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e73e:	2300      	movs	r3, #0
 800e740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800e744:	f001 fe5e 	bl	8010404 <LoRaMacIsBusy>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e74e:	f06f 0301 	mvn.w	r3, #1
 800e752:	e073      	b.n	800e83c <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e754:	f7ff fed2 	bl	800e4fc <LmHandlerJoinStatus>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d002      	beq.n	800e764 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e75e:	f06f 0302 	mvn.w	r3, #2
 800e762:	e06b      	b.n	800e83c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e764:	2300      	movs	r3, #0
 800e766:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e768:	f107 0308 	add.w	r3, r7, #8
 800e76c:	4618      	mov	r0, r3
 800e76e:	f004 fc87 	bl	8013080 <LoRaMacMibGetRequestConfirm>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e778:	f04f 33ff 	mov.w	r3, #4294967295
 800e77c:	e05e      	b.n	800e83c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800e77e:	7b3b      	ldrb	r3, [r7, #12]
 800e780:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800e784:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e788:	79fb      	ldrb	r3, [r7, #7]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d04d      	beq.n	800e82a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	2b02      	cmp	r3, #2
 800e792:	d028      	beq.n	800e7e6 <LmHandlerRequestClass+0xb2>
 800e794:	2b02      	cmp	r3, #2
 800e796:	dc4a      	bgt.n	800e82e <LmHandlerRequestClass+0xfa>
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <LmHandlerRequestClass+0x6e>
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d01e      	beq.n	800e7de <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800e7a0:	e045      	b.n	800e82e <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800e7a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d043      	beq.n	800e832 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e7ae:	f107 0308 	add.w	r3, r7, #8
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f004 fdea 	bl	801338c <LoRaMacMibSetRequestConfirm>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10b      	bne.n	800e7d6 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e7be:	4b21      	ldr	r3, [pc, #132]	; (800e844 <LmHandlerRequestClass+0x110>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d034      	beq.n	800e832 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e7c8:	4b1e      	ldr	r3, [pc, #120]	; (800e844 <LmHandlerRequestClass+0x110>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ce:	79fa      	ldrb	r2, [r7, #7]
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
            break;
 800e7d4:	e02d      	b.n	800e832 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e7d6:	23ff      	movs	r3, #255	; 0xff
 800e7d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e7dc:	e029      	b.n	800e832 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800e7de:	23ff      	movs	r3, #255	; 0xff
 800e7e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e7e4:	e028      	b.n	800e838 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800e7e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e7ee:	23ff      	movs	r3, #255	; 0xff
 800e7f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e7f4:	e01f      	b.n	800e836 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800e7f6:	79fb      	ldrb	r3, [r7, #7]
 800e7f8:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e7fa:	f107 0308 	add.w	r3, r7, #8
 800e7fe:	4618      	mov	r0, r3
 800e800:	f004 fdc4 	bl	801338c <LoRaMacMibSetRequestConfirm>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10b      	bne.n	800e822 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e80a:	4b0e      	ldr	r3, [pc, #56]	; (800e844 <LmHandlerRequestClass+0x110>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e810:	2b00      	cmp	r3, #0
 800e812:	d010      	beq.n	800e836 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e814:	4b0b      	ldr	r3, [pc, #44]	; (800e844 <LmHandlerRequestClass+0x110>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81a:	79fa      	ldrb	r2, [r7, #7]
 800e81c:	4610      	mov	r0, r2
 800e81e:	4798      	blx	r3
            break;
 800e820:	e009      	b.n	800e836 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e822:	23ff      	movs	r3, #255	; 0xff
 800e824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e828:	e005      	b.n	800e836 <LmHandlerRequestClass+0x102>
        }
    }
 800e82a:	bf00      	nop
 800e82c:	e004      	b.n	800e838 <LmHandlerRequestClass+0x104>
            break;
 800e82e:	bf00      	nop
 800e830:	e002      	b.n	800e838 <LmHandlerRequestClass+0x104>
            break;
 800e832:	bf00      	nop
 800e834:	e000      	b.n	800e838 <LmHandlerRequestClass+0x104>
            break;
 800e836:	bf00      	nop
    return errorStatus;
 800e838:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3730      	adds	r7, #48	; 0x30
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	20000780 	.word	0x20000780

0800e848 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08c      	sub	sp, #48	; 0x30
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d102      	bne.n	800e85c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e856:	f04f 33ff 	mov.w	r3, #4294967295
 800e85a:	e010      	b.n	800e87e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e85c:	2300      	movs	r3, #0
 800e85e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800e860:	f107 030c 	add.w	r3, r7, #12
 800e864:	4618      	mov	r0, r3
 800e866:	f004 fc0b 	bl	8013080 <LoRaMacMibGetRequestConfirm>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e870:	f04f 33ff 	mov.w	r3, #4294967295
 800e874:	e003      	b.n	800e87e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e876:	7c3a      	ldrb	r2, [r7, #16]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3730      	adds	r7, #48	; 0x30
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08c      	sub	sp, #48	; 0x30
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d102      	bne.n	800e89c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e896:	f04f 33ff 	mov.w	r3, #4294967295
 800e89a:	e016      	b.n	800e8ca <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e89c:	231f      	movs	r3, #31
 800e89e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800e8a0:	f107 030c 	add.w	r3, r7, #12
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f004 fbeb 	bl	8013080 <LoRaMacMibGetRequestConfirm>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b4:	e009      	b.n	800e8ca <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e8b6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f993 2000 	ldrsb.w	r2, [r3]
 800e8c4:	4b03      	ldr	r3, [pc, #12]	; (800e8d4 <LmHandlerGetTxDatarate+0x4c>)
 800e8c6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3730      	adds	r7, #48	; 0x30
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	2000076c 	.word	0x2000076c

0800e8d8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08c      	sub	sp, #48	; 0x30
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e8e0:	2322      	movs	r3, #34	; 0x22
 800e8e2:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e8e8:	f107 030c 	add.w	r3, r7, #12
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f004 fd4d 	bl	801338c <LoRaMacMibSetRequestConfirm>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fc:	e000      	b.n	800e900 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3730      	adds	r7, #48	; 0x30
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e910:	4b15      	ldr	r3, [pc, #84]	; (800e968 <McpsConfirm+0x60>)
 800e912:	2201      	movs	r2, #1
 800e914:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	785a      	ldrb	r2, [r3, #1]
 800e91a:	4b13      	ldr	r3, [pc, #76]	; (800e968 <McpsConfirm+0x60>)
 800e91c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	789b      	ldrb	r3, [r3, #2]
 800e922:	b25a      	sxtb	r2, r3
 800e924:	4b10      	ldr	r3, [pc, #64]	; (800e968 <McpsConfirm+0x60>)
 800e926:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	4a0e      	ldr	r2, [pc, #56]	; (800e968 <McpsConfirm+0x60>)
 800e92e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e936:	4b0c      	ldr	r3, [pc, #48]	; (800e968 <McpsConfirm+0x60>)
 800e938:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	691b      	ldr	r3, [r3, #16]
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	4b09      	ldr	r3, [pc, #36]	; (800e968 <McpsConfirm+0x60>)
 800e942:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	791b      	ldrb	r3, [r3, #4]
 800e948:	461a      	mov	r2, r3
 800e94a:	4b07      	ldr	r3, [pc, #28]	; (800e968 <McpsConfirm+0x60>)
 800e94c:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800e94e:	4b07      	ldr	r3, [pc, #28]	; (800e96c <McpsConfirm+0x64>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e954:	4804      	ldr	r0, [pc, #16]	; (800e968 <McpsConfirm+0x60>)
 800e956:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e958:	6879      	ldr	r1, [r7, #4]
 800e95a:	2000      	movs	r0, #0
 800e95c:	f000 f9de 	bl	800ed1c <LmHandlerPackagesNotify>
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	200000bc 	.word	0x200000bc
 800e96c:	20000780 	.word	0x20000780

0800e970 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e97a:	2300      	movs	r3, #0
 800e97c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800e97e:	4b31      	ldr	r3, [pc, #196]	; (800ea44 <McpsIndication+0xd4>)
 800e980:	2201      	movs	r2, #1
 800e982:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	785a      	ldrb	r2, [r3, #1]
 800e988:	4b2e      	ldr	r3, [pc, #184]	; (800ea44 <McpsIndication+0xd4>)
 800e98a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e98c:	4b2d      	ldr	r3, [pc, #180]	; (800ea44 <McpsIndication+0xd4>)
 800e98e:	785b      	ldrb	r3, [r3, #1]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d153      	bne.n	800ea3c <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	791b      	ldrb	r3, [r3, #4]
 800e998:	b25a      	sxtb	r2, r3
 800e99a:	4b2a      	ldr	r3, [pc, #168]	; (800ea44 <McpsIndication+0xd4>)
 800e99c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9a4:	b25a      	sxtb	r2, r3
 800e9a6:	4b27      	ldr	r3, [pc, #156]	; (800ea44 <McpsIndication+0xd4>)
 800e9a8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e9b0:	4b24      	ldr	r3, [pc, #144]	; (800ea44 <McpsIndication+0xd4>)
 800e9b2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	78da      	ldrb	r2, [r3, #3]
 800e9b8:	4b22      	ldr	r3, [pc, #136]	; (800ea44 <McpsIndication+0xd4>)
 800e9ba:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	691b      	ldr	r3, [r3, #16]
 800e9c0:	4a20      	ldr	r2, [pc, #128]	; (800ea44 <McpsIndication+0xd4>)
 800e9c2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	78db      	ldrb	r3, [r3, #3]
 800e9c8:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	7b1b      	ldrb	r3, [r3, #12]
 800e9ce:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e9d6:	4b1c      	ldr	r3, [pc, #112]	; (800ea48 <McpsIndication+0xd8>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9dc:	f107 0218 	add.w	r2, r7, #24
 800e9e0:	4918      	ldr	r1, [pc, #96]	; (800ea44 <McpsIndication+0xd4>)
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800e9e6:	4b18      	ldr	r3, [pc, #96]	; (800ea48 <McpsIndication+0xd8>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d007      	beq.n	800ea00 <McpsIndication+0x90>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7e1b      	ldrb	r3, [r3, #24]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e9f8:	4b13      	ldr	r3, [pc, #76]	; (800ea48 <McpsIndication+0xd8>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fe:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ea00:	6879      	ldr	r1, [r7, #4]
 800ea02:	2001      	movs	r0, #1
 800ea04:	f000 f98a 	bl	800ed1c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ea08:	f107 0317 	add.w	r3, r7, #23
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff ff1b 	bl	800e848 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	795b      	ldrb	r3, [r3, #5]
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d111      	bne.n	800ea3e <McpsIndication+0xce>
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10e      	bne.n	800ea3e <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800ea20:	2300      	movs	r3, #0
 800ea22:	733b      	strb	r3, [r7, #12]
 800ea24:	2300      	movs	r3, #0
 800ea26:	737b      	strb	r3, [r7, #13]
 800ea28:	2300      	movs	r3, #0
 800ea2a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800ea2c:	f107 030c 	add.w	r3, r7, #12
 800ea30:	2201      	movs	r2, #1
 800ea32:	2100      	movs	r1, #0
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff fd7d 	bl	800e534 <LmHandlerSend>
 800ea3a:	e000      	b.n	800ea3e <McpsIndication+0xce>
        return;
 800ea3c:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ea3e:	3720      	adds	r7, #32
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	200000d8 	.word	0x200000d8
 800ea48:	20000780 	.word	0x20000780

0800ea4c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b08c      	sub	sp, #48	; 0x30
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ea54:	4b3d      	ldr	r3, [pc, #244]	; (800eb4c <MlmeConfirm+0x100>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	785a      	ldrb	r2, [r3, #1]
 800ea5e:	4b3b      	ldr	r3, [pc, #236]	; (800eb4c <MlmeConfirm+0x100>)
 800ea60:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800ea62:	4b3b      	ldr	r3, [pc, #236]	; (800eb50 <MlmeConfirm+0x104>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea68:	4838      	ldr	r0, [pc, #224]	; (800eb4c <MlmeConfirm+0x100>)
 800ea6a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ea6c:	6879      	ldr	r1, [r7, #4]
 800ea6e:	2002      	movs	r0, #2
 800ea70:	f000 f954 	bl	800ed1c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	2b0c      	cmp	r3, #12
 800ea7c:	d85e      	bhi.n	800eb3c <MlmeConfirm+0xf0>
 800ea7e:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <MlmeConfirm+0x38>)
 800ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea84:	0800eab9 	.word	0x0800eab9
 800ea88:	0800eb3d 	.word	0x0800eb3d
 800ea8c:	0800eb3d 	.word	0x0800eb3d
 800ea90:	0800eb0b 	.word	0x0800eb0b
 800ea94:	0800eb3d 	.word	0x0800eb3d
 800ea98:	0800eb3d 	.word	0x0800eb3d
 800ea9c:	0800eb3d 	.word	0x0800eb3d
 800eaa0:	0800eb3d 	.word	0x0800eb3d
 800eaa4:	0800eb3d 	.word	0x0800eb3d
 800eaa8:	0800eb3d 	.word	0x0800eb3d
 800eaac:	0800eb3d 	.word	0x0800eb3d
 800eab0:	0800eb23 	.word	0x0800eb23
 800eab4:	0800eb3d 	.word	0x0800eb3d
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800eab8:	2306      	movs	r3, #6
 800eaba:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800eabc:	f107 030c 	add.w	r3, r7, #12
 800eac0:	4618      	mov	r0, r3
 800eac2:	f004 fadd 	bl	8013080 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	4a22      	ldr	r2, [pc, #136]	; (800eb54 <MlmeConfirm+0x108>)
 800eaca:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800eacc:	4822      	ldr	r0, [pc, #136]	; (800eb58 <MlmeConfirm+0x10c>)
 800eace:	f7ff fedb 	bl	800e888 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	785b      	ldrb	r3, [r3, #1]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d108      	bne.n	800eaec <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800eada:	4b20      	ldr	r3, [pc, #128]	; (800eb5c <MlmeConfirm+0x110>)
 800eadc:	2200      	movs	r2, #0
 800eade:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800eae0:	4b1f      	ldr	r3, [pc, #124]	; (800eb60 <MlmeConfirm+0x114>)
 800eae2:	785b      	ldrb	r3, [r3, #1]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7ff fe25 	bl	800e734 <LmHandlerRequestClass>
 800eaea:	e002      	b.n	800eaf2 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800eaec:	4b1b      	ldr	r3, [pc, #108]	; (800eb5c <MlmeConfirm+0x110>)
 800eaee:	22ff      	movs	r2, #255	; 0xff
 800eaf0:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800eaf2:	4b17      	ldr	r3, [pc, #92]	; (800eb50 <MlmeConfirm+0x104>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf8:	4818      	ldr	r0, [pc, #96]	; (800eb5c <MlmeConfirm+0x110>)
 800eafa:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d11d      	bne.n	800eb40 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800eb04:	f7ff f8cd 	bl	800dca2 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800eb08:	e01a      	b.n	800eb40 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800eb0a:	4b16      	ldr	r3, [pc, #88]	; (800eb64 <MlmeConfirm+0x118>)
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	7a1a      	ldrb	r2, [r3, #8]
 800eb14:	4b13      	ldr	r3, [pc, #76]	; (800eb64 <MlmeConfirm+0x118>)
 800eb16:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	7a5a      	ldrb	r2, [r3, #9]
 800eb1c:	4b11      	ldr	r3, [pc, #68]	; (800eb64 <MlmeConfirm+0x118>)
 800eb1e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800eb20:	e00f      	b.n	800eb42 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	785b      	ldrb	r3, [r3, #1]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d105      	bne.n	800eb36 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800eb2a:	4b0d      	ldr	r3, [pc, #52]	; (800eb60 <MlmeConfirm+0x114>)
 800eb2c:	7b1b      	ldrb	r3, [r3, #12]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff fdf4 	bl	800e71c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800eb34:	e005      	b.n	800eb42 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800eb36:	f7ff fdd5 	bl	800e6e4 <LmHandlerDeviceTimeReq>
        break;
 800eb3a:	e002      	b.n	800eb42 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800eb3c:	bf00      	nop
 800eb3e:	e000      	b.n	800eb42 <MlmeConfirm+0xf6>
        break;
 800eb40:	bf00      	nop
    }
}
 800eb42:	bf00      	nop
 800eb44:	3730      	adds	r7, #48	; 0x30
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	200000bc 	.word	0x200000bc
 800eb50:	20000780 	.word	0x20000780
 800eb54:	20000090 	.word	0x20000090
 800eb58:	200000b8 	.word	0x200000b8
 800eb5c:	200000b4 	.word	0x200000b4
 800eb60:	2000076c 	.word	0x2000076c
 800eb64:	200000d8 	.word	0x200000d8

0800eb68 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800eb72:	4b2f      	ldr	r3, [pc, #188]	; (800ec30 <MlmeIndication+0xc8>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	785a      	ldrb	r2, [r3, #1]
 800eb7c:	4b2c      	ldr	r3, [pc, #176]	; (800ec30 <MlmeIndication+0xc8>)
 800eb7e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	789b      	ldrb	r3, [r3, #2]
 800eb84:	b25a      	sxtb	r2, r3
 800eb86:	4b2a      	ldr	r3, [pc, #168]	; (800ec30 <MlmeIndication+0xc8>)
 800eb88:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb90:	b25a      	sxtb	r2, r3
 800eb92:	4b27      	ldr	r3, [pc, #156]	; (800ec30 <MlmeIndication+0xc8>)
 800eb94:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800eb9c:	4b24      	ldr	r3, [pc, #144]	; (800ec30 <MlmeIndication+0xc8>)
 800eb9e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	78da      	ldrb	r2, [r3, #3]
 800eba4:	4b22      	ldr	r3, [pc, #136]	; (800ec30 <MlmeIndication+0xc8>)
 800eba6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	4a20      	ldr	r2, [pc, #128]	; (800ec30 <MlmeIndication+0xc8>)
 800ebae:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	2b0b      	cmp	r3, #11
 800ebb6:	d009      	beq.n	800ebcc <MlmeIndication+0x64>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	2b0f      	cmp	r3, #15
 800ebbe:	d005      	beq.n	800ebcc <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ebc0:	4b1c      	ldr	r3, [pc, #112]	; (800ec34 <MlmeIndication+0xcc>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc6:	491a      	ldr	r1, [pc, #104]	; (800ec30 <MlmeIndication+0xc8>)
 800ebc8:	2000      	movs	r0, #0
 800ebca:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	2003      	movs	r0, #3
 800ebd0:	f000 f8a4 	bl	800ed1c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b0f      	cmp	r3, #15
 800ebda:	d01e      	beq.n	800ec1a <MlmeIndication+0xb2>
 800ebdc:	2b0f      	cmp	r3, #15
 800ebde:	dc1e      	bgt.n	800ec1e <MlmeIndication+0xb6>
 800ebe0:	2b07      	cmp	r3, #7
 800ebe2:	d002      	beq.n	800ebea <MlmeIndication+0x82>
 800ebe4:	2b0b      	cmp	r3, #11
 800ebe6:	d01c      	beq.n	800ec22 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ebe8:	e019      	b.n	800ec1e <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800ebea:	2300      	movs	r3, #0
 800ebec:	723b      	strb	r3, [r7, #8]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	727b      	strb	r3, [r7, #9]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800ebf6:	4b10      	ldr	r3, [pc, #64]	; (800ec38 <MlmeIndication+0xd0>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	4798      	blx	r3
 800ebfe:	4603      	mov	r3, r0
 800ec00:	f083 0301 	eor.w	r3, r3, #1
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00d      	beq.n	800ec26 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ec0a:	f107 0308 	add.w	r3, r7, #8
 800ec0e:	2201      	movs	r2, #1
 800ec10:	2100      	movs	r1, #0
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff fc8e 	bl	800e534 <LmHandlerSend>
        break;
 800ec18:	e005      	b.n	800ec26 <MlmeIndication+0xbe>
        break;
 800ec1a:	bf00      	nop
 800ec1c:	e004      	b.n	800ec28 <MlmeIndication+0xc0>
        break;
 800ec1e:	bf00      	nop
 800ec20:	e002      	b.n	800ec28 <MlmeIndication+0xc0>
        break;
 800ec22:	bf00      	nop
 800ec24:	e000      	b.n	800ec28 <MlmeIndication+0xc0>
        break;
 800ec26:	bf00      	nop
    }
}
 800ec28:	bf00      	nop
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	200000d8 	.word	0x200000d8
 800ec34:	20000780 	.word	0x20000780
 800ec38:	20000758 	.word	0x20000758

0800ec3c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	6039      	str	r1, [r7, #0]
 800ec46:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ec4c:	79fb      	ldrb	r3, [r7, #7]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d103      	bne.n	800ec5a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ec52:	f000 f9cb 	bl	800efec <LmhpCompliancePackageFactory>
 800ec56:	60f8      	str	r0, [r7, #12]
            break;
 800ec58:	e000      	b.n	800ec5c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ec5a:	bf00      	nop
        }
    }
    if( package != NULL )
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d02b      	beq.n	800ecba <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800ec62:	79fb      	ldrb	r3, [r7, #7]
 800ec64:	4918      	ldr	r1, [pc, #96]	; (800ecc8 <LmHandlerPackageRegister+0x8c>)
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ec6c:	79fb      	ldrb	r3, [r7, #7]
 800ec6e:	4a16      	ldr	r2, [pc, #88]	; (800ecc8 <LmHandlerPackageRegister+0x8c>)
 800ec70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec74:	4a15      	ldr	r2, [pc, #84]	; (800eccc <LmHandlerPackageRegister+0x90>)
 800ec76:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ec78:	79fb      	ldrb	r3, [r7, #7]
 800ec7a:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <LmHandlerPackageRegister+0x8c>)
 800ec7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec80:	4a13      	ldr	r2, [pc, #76]	; (800ecd0 <LmHandlerPackageRegister+0x94>)
 800ec82:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ec84:	79fb      	ldrb	r3, [r7, #7]
 800ec86:	4a10      	ldr	r2, [pc, #64]	; (800ecc8 <LmHandlerPackageRegister+0x8c>)
 800ec88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec8c:	4a11      	ldr	r2, [pc, #68]	; (800ecd4 <LmHandlerPackageRegister+0x98>)
 800ec8e:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ec90:	4b11      	ldr	r3, [pc, #68]	; (800ecd8 <LmHandlerPackageRegister+0x9c>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	79fb      	ldrb	r3, [r7, #7]
 800ec96:	490c      	ldr	r1, [pc, #48]	; (800ecc8 <LmHandlerPackageRegister+0x8c>)
 800ec98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ec9c:	6992      	ldr	r2, [r2, #24]
 800ec9e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800eca0:	79fb      	ldrb	r3, [r7, #7]
 800eca2:	4a09      	ldr	r2, [pc, #36]	; (800ecc8 <LmHandlerPackageRegister+0x8c>)
 800eca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	4a0c      	ldr	r2, [pc, #48]	; (800ecdc <LmHandlerPackageRegister+0xa0>)
 800ecac:	6851      	ldr	r1, [r2, #4]
 800ecae:	4a0b      	ldr	r2, [pc, #44]	; (800ecdc <LmHandlerPackageRegister+0xa0>)
 800ecb0:	7852      	ldrb	r2, [r2, #1]
 800ecb2:	6838      	ldr	r0, [r7, #0]
 800ecb4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e001      	b.n	800ecbe <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ecba:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20000758 	.word	0x20000758
 800eccc:	0800e3fd 	.word	0x0800e3fd
 800ecd0:	0800e535 	.word	0x0800e535
 800ecd4:	0800e6e5 	.word	0x0800e6e5
 800ecd8:	20000780 	.word	0x20000780
 800ecdc:	200000ec 	.word	0x200000ec

0800ece0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800ecea:	79fb      	ldrb	r3, [r7, #7]
 800ecec:	2b04      	cmp	r3, #4
 800ecee:	d80e      	bhi.n	800ed0e <LmHandlerPackageIsInitialized+0x2e>
 800ecf0:	79fb      	ldrb	r3, [r7, #7]
 800ecf2:	4a09      	ldr	r2, [pc, #36]	; (800ed18 <LmHandlerPackageIsInitialized+0x38>)
 800ecf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d007      	beq.n	800ed0e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800ecfe:	79fb      	ldrb	r3, [r7, #7]
 800ed00:	4a05      	ldr	r2, [pc, #20]	; (800ed18 <LmHandlerPackageIsInitialized+0x38>)
 800ed02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	4798      	blx	r3
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	e000      	b.n	800ed10 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ed0e:	2300      	movs	r3, #0
    }
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	20000758 	.word	0x20000758

0800ed1c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	6039      	str	r1, [r7, #0]
 800ed26:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ed28:	2300      	movs	r3, #0
 800ed2a:	73fb      	strb	r3, [r7, #15]
 800ed2c:	e07e      	b.n	800ee2c <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800ed2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed32:	4a43      	ldr	r2, [pc, #268]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800ed34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d066      	beq.n	800ee0a <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d865      	bhi.n	800ee0e <LmHandlerPackagesNotify+0xf2>
 800ed42:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <LmHandlerPackagesNotify+0x2c>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ed59 	.word	0x0800ed59
 800ed4c:	0800ed7b 	.word	0x0800ed7b
 800ed50:	0800edc7 	.word	0x0800edc7
 800ed54:	0800ede9 	.word	0x0800ede9
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ed58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed5c:	4a38      	ldr	r2, [pc, #224]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800ed5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d054      	beq.n	800ee12 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800ed68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed6c:	4a34      	ldr	r2, [pc, #208]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800ed6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	6838      	ldr	r0, [r7, #0]
 800ed76:	4798      	blx	r3
                    }
                    break;
 800ed78:	e04b      	b.n	800ee12 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ed7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed7e:	4a30      	ldr	r2, [pc, #192]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800ed80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed84:	69db      	ldr	r3, [r3, #28]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d045      	beq.n	800ee16 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ed8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed8e:	4a2c      	ldr	r2, [pc, #176]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800ed90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed94:	781a      	ldrb	r2, [r3, #0]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d00a      	beq.n	800edb4 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ed9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d137      	bne.n	800ee16 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800eda6:	4b26      	ldr	r3, [pc, #152]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	4798      	blx	r3
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d030      	beq.n	800ee16 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800edb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edb8:	4a21      	ldr	r2, [pc, #132]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800edba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edbe:	69db      	ldr	r3, [r3, #28]
 800edc0:	6838      	ldr	r0, [r7, #0]
 800edc2:	4798      	blx	r3
                    }
                    break;
 800edc4:	e027      	b.n	800ee16 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800edc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edca:	4a1d      	ldr	r2, [pc, #116]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800edcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d021      	beq.n	800ee1a <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800edd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edda:	4a19      	ldr	r2, [pc, #100]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800eddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ede0:	6a1b      	ldr	r3, [r3, #32]
 800ede2:	6838      	ldr	r0, [r7, #0]
 800ede4:	4798      	blx	r3
                    }
                    break;
 800ede6:	e018      	b.n	800ee1a <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ede8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edec:	4a14      	ldr	r2, [pc, #80]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800edee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d012      	beq.n	800ee1e <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800edf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edfc:	4a10      	ldr	r2, [pc, #64]	; (800ee40 <LmHandlerPackagesNotify+0x124>)
 800edfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	6838      	ldr	r0, [r7, #0]
 800ee06:	4798      	blx	r3
                    }
                    break;
 800ee08:	e009      	b.n	800ee1e <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800ee0a:	bf00      	nop
 800ee0c:	e008      	b.n	800ee20 <LmHandlerPackagesNotify+0x104>
                    break;
 800ee0e:	bf00      	nop
 800ee10:	e006      	b.n	800ee20 <LmHandlerPackagesNotify+0x104>
                    break;
 800ee12:	bf00      	nop
 800ee14:	e004      	b.n	800ee20 <LmHandlerPackagesNotify+0x104>
                    break;
 800ee16:	bf00      	nop
 800ee18:	e002      	b.n	800ee20 <LmHandlerPackagesNotify+0x104>
                    break;
 800ee1a:	bf00      	nop
 800ee1c:	e000      	b.n	800ee20 <LmHandlerPackagesNotify+0x104>
                    break;
 800ee1e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ee20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	3301      	adds	r3, #1
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	73fb      	strb	r3, [r7, #15]
 800ee2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee30:	2b04      	cmp	r3, #4
 800ee32:	f77f af7c 	ble.w	800ed2e <LmHandlerPackagesNotify+0x12>
    }
}
 800ee36:	bf00      	nop
 800ee38:	bf00      	nop
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20000758 	.word	0x20000758

0800ee44 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	71fb      	strb	r3, [r7, #7]
 800ee4e:	e022      	b.n	800ee96 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ee50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee54:	4a14      	ldr	r2, [pc, #80]	; (800eea8 <LmHandlerPackagesProcess+0x64>)
 800ee56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d015      	beq.n	800ee8a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ee5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee62:	4a11      	ldr	r2, [pc, #68]	; (800eea8 <LmHandlerPackagesProcess+0x64>)
 800ee64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee68:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00d      	beq.n	800ee8a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ee6e:	79fb      	ldrb	r3, [r7, #7]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff ff35 	bl	800ece0 <LmHandlerPackageIsInitialized>
 800ee76:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d006      	beq.n	800ee8a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ee7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee80:	4a09      	ldr	r2, [pc, #36]	; (800eea8 <LmHandlerPackagesProcess+0x64>)
 800ee82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ee8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	3301      	adds	r3, #1
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	71fb      	strb	r3, [r7, #7]
 800ee96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	ddd8      	ble.n	800ee50 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ee9e:	bf00      	nop
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	20000758 	.word	0x20000758

0800eeac <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800eeb0:	f005 f81a 	bl	8013ee8 <LoRaMacDeInitialization>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800eeba:	2300      	movs	r3, #0
 800eebc:	e001      	b.n	800eec2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800eebe:	f06f 0301 	mvn.w	r3, #1
    }
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800eeca:	f004 f819 	bl	8012f00 <LoRaMacHalt>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e001      	b.n	800eedc <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800eed8:	f06f 0301 	mvn.w	r3, #1
    }
}
 800eedc:	4618      	mov	r0, r3
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <LmHandlerSetDutyCycleEnable>:
    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable(bool dutyCycleEnable)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	4603      	mov	r3, r0
 800eee8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 800eeea:	4a06      	ldr	r2, [pc, #24]	; (800ef04 <LmHandlerSetDutyCycleEnable+0x24>)
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	7193      	strb	r3, [r2, #6]
    LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f004 ffda 	bl	8013eac <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3708      	adds	r7, #8
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	2000076c 	.word	0x2000076c

0800ef08 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08e      	sub	sp, #56	; 0x38
 800ef0c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800ef14:	2300      	movs	r3, #0
 800ef16:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800ef18:	f7ff ffd5 	bl	800eec6 <LmHandlerHalt>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800ef22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d12f      	bne.n	800ef8a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800ef2a:	f000 f84f 	bl	800efcc <NvmDataMgmtStoreBegin>
 800ef2e:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800ef30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef32:	f113 0f02 	cmn.w	r3, #2
 800ef36:	d103      	bne.n	800ef40 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800ef38:	23f8      	movs	r3, #248	; 0xf8
 800ef3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef3e:	e01c      	b.n	800ef7a <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d104      	bne.n	800ef50 <LmHandlerNvmDataStore+0x48>
 800ef46:	4b1b      	ldr	r3, [pc, #108]	; (800efb4 <LmHandlerNvmDataStore+0xac>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	695b      	ldr	r3, [r3, #20]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d103      	bne.n	800ef58 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ef50:	23ff      	movs	r3, #255	; 0xff
 800ef52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef56:	e010      	b.n	800ef7a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800ef58:	2326      	movs	r3, #38	; 0x26
 800ef5a:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800ef5c:	1d3b      	adds	r3, r7, #4
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f004 f88e 	bl	8013080 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800ef68:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800ef6c:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800ef6e:	4b11      	ldr	r3, [pc, #68]	; (800efb4 <LmHandlerNvmDataStore+0xac>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef78:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800ef7a:	f000 f82f 	bl	800efdc <NvmDataMgmtStoreEnd>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ef84:	23ff      	movs	r3, #255	; 0xff
 800ef86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800ef8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d109      	bne.n	800efa6 <LmHandlerNvmDataStore+0x9e>
 800ef92:	4b08      	ldr	r3, [pc, #32]	; (800efb4 <LmHandlerNvmDataStore+0xac>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	69db      	ldr	r3, [r3, #28]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d004      	beq.n	800efa6 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ef9c:	4b05      	ldr	r3, [pc, #20]	; (800efb4 <LmHandlerNvmDataStore+0xac>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	69db      	ldr	r3, [r3, #28]
 800efa2:	2001      	movs	r0, #1
 800efa4:	4798      	blx	r3
    }

    return lmhStatus;
 800efa6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3738      	adds	r7, #56	; 0x38
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000780 	.word	0x20000780

0800efb8 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800efc2:	bf00      	nop
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bc80      	pop	{r7}
 800efca:	4770      	bx	lr

0800efcc <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800efcc:	b480      	push	{r7}
 800efce:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800efd0:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bc80      	pop	{r7}
 800efda:	4770      	bx	lr

0800efdc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800efe0:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bc80      	pop	{r7}
 800efea:	4770      	bx	lr

0800efec <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800efec:	b480      	push	{r7}
 800efee:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800eff0:	4b02      	ldr	r3, [pc, #8]	; (800effc <LmhpCompliancePackageFactory+0x10>)
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bc80      	pop	{r7}
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	200000f4 	.word	0x200000f4

0800f000 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	4613      	mov	r3, r2
 800f00c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00f      	beq.n	800f034 <LmhpComplianceInit+0x34>
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00c      	beq.n	800f034 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800f01a:	4a0c      	ldr	r2, [pc, #48]	; (800f04c <LmhpComplianceInit+0x4c>)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800f020:	4a0b      	ldr	r2, [pc, #44]	; (800f050 <LmhpComplianceInit+0x50>)
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f026:	4a0a      	ldr	r2, [pc, #40]	; (800f050 <LmhpComplianceInit+0x50>)
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800f02c:	4b08      	ldr	r3, [pc, #32]	; (800f050 <LmhpComplianceInit+0x50>)
 800f02e:	2201      	movs	r2, #1
 800f030:	701a      	strb	r2, [r3, #0]
 800f032:	e006      	b.n	800f042 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800f034:	4b05      	ldr	r3, [pc, #20]	; (800f04c <LmhpComplianceInit+0x4c>)
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f03a:	4b05      	ldr	r3, [pc, #20]	; (800f050 <LmhpComplianceInit+0x50>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	701a      	strb	r2, [r3, #0]
    }
}
 800f040:	bf00      	nop
 800f042:	bf00      	nop
 800f044:	3714      	adds	r7, #20
 800f046:	46bd      	mov	sp, r7
 800f048:	bc80      	pop	{r7}
 800f04a:	4770      	bx	lr
 800f04c:	200008cc 	.word	0x200008cc
 800f050:	200008b8 	.word	0x200008b8

0800f054 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f054:	b480      	push	{r7}
 800f056:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f058:	4b02      	ldr	r3, [pc, #8]	; (800f064 <LmhpComplianceIsInitialized+0x10>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	46bd      	mov	sp, r7
 800f060:	bc80      	pop	{r7}
 800f062:	4770      	bx	lr
 800f064:	200008b8 	.word	0x200008b8

0800f068 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800f068:	b480      	push	{r7}
 800f06a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f06c:	4b07      	ldr	r3, [pc, #28]	; (800f08c <LmhpComplianceIsRunning+0x24>)
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	f083 0301 	eor.w	r3, r3, #1
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800f07a:	2300      	movs	r3, #0
 800f07c:	e001      	b.n	800f082 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800f07e:	4b03      	ldr	r3, [pc, #12]	; (800f08c <LmhpComplianceIsRunning+0x24>)
 800f080:	785b      	ldrb	r3, [r3, #1]
}
 800f082:	4618      	mov	r0, r3
 800f084:	46bd      	mov	sp, r7
 800f086:	bc80      	pop	{r7}
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	200008b8 	.word	0x200008b8

0800f090 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800f098:	4b0f      	ldr	r3, [pc, #60]	; (800f0d8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f083 0301 	eor.w	r3, r3, #1
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d112      	bne.n	800f0cc <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800f0a6:	4b0c      	ldr	r3, [pc, #48]	; (800f0d8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f0a8:	785b      	ldrb	r3, [r3, #1]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00f      	beq.n	800f0ce <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d10b      	bne.n	800f0ce <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d007      	beq.n	800f0ce <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f0be:	4b06      	ldr	r3, [pc, #24]	; (800f0d8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f0c0:	899b      	ldrh	r3, [r3, #12]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	4b04      	ldr	r3, [pc, #16]	; (800f0d8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f0c8:	819a      	strh	r2, [r3, #12]
 800f0ca:	e000      	b.n	800f0ce <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800f0cc:	bf00      	nop
    }
}
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bc80      	pop	{r7}
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	200008b8 	.word	0x200008b8

0800f0dc <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f0e4:	4b12      	ldr	r3, [pc, #72]	; (800f130 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	f083 0301 	eor.w	r3, r3, #1
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d116      	bne.n	800f120 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f0f2:	4b0f      	ldr	r3, [pc, #60]	; (800f130 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f0f4:	785b      	ldrb	r3, [r3, #1]
 800f0f6:	f083 0301 	eor.w	r3, r3, #1
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d111      	bne.n	800f124 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b04      	cmp	r3, #4
 800f106:	d10e      	bne.n	800f126 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800f108:	4b09      	ldr	r3, [pc, #36]	; (800f130 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f10a:	2201      	movs	r2, #1
 800f10c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	7a1a      	ldrb	r2, [r3, #8]
 800f112:	4b07      	ldr	r3, [pc, #28]	; (800f130 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f114:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	7a5a      	ldrb	r2, [r3, #9]
 800f11a:	4b05      	ldr	r3, [pc, #20]	; (800f130 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f11c:	741a      	strb	r2, [r3, #16]
 800f11e:	e002      	b.n	800f126 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f120:	bf00      	nop
 800f122:	e000      	b.n	800f126 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f124:	bf00      	nop
    }
}
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	bc80      	pop	{r7}
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	200008b8 	.word	0x200008b8

0800f134 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f13a:	4b33      	ldr	r3, [pc, #204]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	f083 0301 	eor.w	r3, r3, #1
 800f142:	b2db      	uxtb	r3, r3
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f148:	f04f 33ff 	mov.w	r3, #4294967295
 800f14c:	e057      	b.n	800f1fe <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800f14e:	4b2e      	ldr	r3, [pc, #184]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f150:	785b      	ldrb	r3, [r3, #1]
 800f152:	f083 0301 	eor.w	r3, r3, #1
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d001      	beq.n	800f160 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f15c:	2300      	movs	r3, #0
 800f15e:	e04e      	b.n	800f1fe <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800f160:	4b29      	ldr	r3, [pc, #164]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f162:	7b9b      	ldrb	r3, [r3, #14]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d019      	beq.n	800f19c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800f168:	4b27      	ldr	r3, [pc, #156]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800f16e:	4b26      	ldr	r3, [pc, #152]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f170:	2203      	movs	r2, #3
 800f172:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800f174:	4b24      	ldr	r3, [pc, #144]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	2205      	movs	r2, #5
 800f17a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800f17c:	4b22      	ldr	r3, [pc, #136]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	3301      	adds	r3, #1
 800f182:	4a21      	ldr	r2, [pc, #132]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f184:	7bd2      	ldrb	r2, [r2, #15]
 800f186:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800f188:	4b1f      	ldr	r3, [pc, #124]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	3302      	adds	r3, #2
 800f18e:	4a1e      	ldr	r2, [pc, #120]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f190:	7c12      	ldrb	r2, [r2, #16]
 800f192:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800f194:	4b1c      	ldr	r3, [pc, #112]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f196:	2201      	movs	r2, #1
 800f198:	709a      	strb	r2, [r3, #2]
 800f19a:	e01c      	b.n	800f1d6 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800f19c:	4b1a      	ldr	r3, [pc, #104]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f19e:	789b      	ldrb	r3, [r3, #2]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d005      	beq.n	800f1b0 <LmhpComplianceTxProcess+0x7c>
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d116      	bne.n	800f1d6 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800f1a8:	4b17      	ldr	r3, [pc, #92]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	709a      	strb	r2, [r3, #2]
            break;
 800f1ae:	e012      	b.n	800f1d6 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800f1b0:	4b15      	ldr	r3, [pc, #84]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800f1b6:	4b14      	ldr	r3, [pc, #80]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1b8:	899b      	ldrh	r3, [r3, #12]
 800f1ba:	0a1b      	lsrs	r3, r3, #8
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	4b12      	ldr	r3, [pc, #72]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	b2d2      	uxtb	r2, r2
 800f1c4:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800f1c6:	4b10      	ldr	r3, [pc, #64]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1c8:	899a      	ldrh	r2, [r3, #12]
 800f1ca:	4b0f      	ldr	r3, [pc, #60]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	b2d2      	uxtb	r2, r2
 800f1d2:	701a      	strb	r2, [r3, #0]
            break;
 800f1d4:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800f1d6:	23e0      	movs	r3, #224	; 0xe0
 800f1d8:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800f1da:	4b0b      	ldr	r3, [pc, #44]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1dc:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800f1de:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800f1e0:	4b09      	ldr	r3, [pc, #36]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1e2:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800f1e4:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800f1e6:	4809      	ldr	r0, [pc, #36]	; (800f20c <LmhpComplianceTxProcess+0xd8>)
 800f1e8:	f00d faa8 	bl	801c73c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800f1ec:	4b08      	ldr	r3, [pc, #32]	; (800f210 <LmhpComplianceTxProcess+0xdc>)
 800f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f0:	4a05      	ldr	r2, [pc, #20]	; (800f208 <LmhpComplianceTxProcess+0xd4>)
 800f1f2:	78d2      	ldrb	r2, [r2, #3]
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	4798      	blx	r3
 800f1fc:	4603      	mov	r3, r0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	200008b8 	.word	0x200008b8
 800f20c:	200008a0 	.word	0x200008a0
 800f210:	200000f4 	.word	0x200000f4

0800f214 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b0a2      	sub	sp, #136	; 0x88
 800f218:	af02      	add	r7, sp, #8
 800f21a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f21c:	4ba3      	ldr	r3, [pc, #652]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	f083 0301 	eor.w	r3, r3, #1
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	f040 81c2 	bne.w	800f5b0 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	7b5b      	ldrb	r3, [r3, #13]
 800f230:	f083 0301 	eor.w	r3, r3, #1
 800f234:	b2db      	uxtb	r3, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	f040 81bc 	bne.w	800f5b4 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800f23c:	4b9b      	ldr	r3, [pc, #620]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f23e:	785b      	ldrb	r3, [r3, #1]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00c      	beq.n	800f25e <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	7b9b      	ldrb	r3, [r3, #14]
 800f248:	f083 0301 	eor.w	r3, r3, #1
 800f24c:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d005      	beq.n	800f25e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f252:	4b96      	ldr	r3, [pc, #600]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f254:	899b      	ldrh	r3, [r3, #12]
 800f256:	3301      	adds	r3, #1
 800f258:	b29a      	uxth	r2, r3
 800f25a:	4b94      	ldr	r3, [pc, #592]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f25c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	78db      	ldrb	r3, [r3, #3]
 800f262:	2be0      	cmp	r3, #224	; 0xe0
 800f264:	f040 81a8 	bne.w	800f5b8 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f268:	4b90      	ldr	r3, [pc, #576]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f26a:	785b      	ldrb	r3, [r3, #1]
 800f26c:	f083 0301 	eor.w	r3, r3, #1
 800f270:	b2db      	uxtb	r3, r3
 800f272:	2b00      	cmp	r3, #0
 800f274:	d060      	beq.n	800f338 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	7b1b      	ldrb	r3, [r3, #12]
 800f27a:	2b04      	cmp	r3, #4
 800f27c:	f040 81a1 	bne.w	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f286:	2b01      	cmp	r3, #1
 800f288:	f040 819b 	bne.w	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	3301      	adds	r3, #1
 800f292:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f294:	2b01      	cmp	r3, #1
 800f296:	f040 8194 	bne.w	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	3302      	adds	r3, #2
 800f2a0:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	f040 818d 	bne.w	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	3303      	adds	r3, #3
 800f2ae:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	f040 8186 	bne.w	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800f2b6:	4b7d      	ldr	r3, [pc, #500]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800f2bc:	4b7b      	ldr	r3, [pc, #492]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2be:	22e0      	movs	r2, #224	; 0xe0
 800f2c0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800f2c2:	4b7a      	ldr	r3, [pc, #488]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800f2c8:	4b78      	ldr	r3, [pc, #480]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800f2ce:	4b77      	ldr	r3, [pc, #476]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800f2d4:	4b75      	ldr	r3, [pc, #468]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800f2da:	4b74      	ldr	r3, [pc, #464]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800f2e0:	4b72      	ldr	r3, [pc, #456]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800f2e6:	4b71      	ldr	r3, [pc, #452]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800f2ec:	2304      	movs	r3, #4
 800f2ee:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f2f4:	f107 0308 	add.w	r3, r7, #8
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f004 f847 	bl	801338c <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800f2fe:	2000      	movs	r0, #0
 800f300:	f004 fdd4 	bl	8013eac <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800f304:	4b6a      	ldr	r3, [pc, #424]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d003      	beq.n	800f316 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800f30e:	4b68      	ldr	r3, [pc, #416]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800f316:	2300      	movs	r3, #0
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	4b66      	ldr	r3, [pc, #408]	; (800f4b4 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	f04f 31ff 	mov.w	r1, #4294967295
 800f322:	4865      	ldr	r0, [pc, #404]	; (800f4b8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f324:	f00d f9d4 	bl	801c6d0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800f328:	f241 3188 	movw	r1, #5000	; 0x1388
 800f32c:	4862      	ldr	r0, [pc, #392]	; (800f4b8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f32e:	f00d fae3 	bl	801c8f8 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800f332:	f7ff feff 	bl	800f134 <LmhpComplianceTxProcess>
 800f336:	e144      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	781a      	ldrb	r2, [r3, #0]
 800f33e:	4b5b      	ldr	r3, [pc, #364]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f340:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800f342:	4b5a      	ldr	r3, [pc, #360]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f344:	789b      	ldrb	r3, [r3, #2]
 800f346:	2b0a      	cmp	r3, #10
 800f348:	f200 8138 	bhi.w	800f5bc <LmhpComplianceOnMcpsIndication+0x3a8>
 800f34c:	a201      	add	r2, pc, #4	; (adr r2, 800f354 <LmhpComplianceOnMcpsIndication+0x140>)
 800f34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f352:	bf00      	nop
 800f354:	0800f381 	.word	0x0800f381
 800f358:	0800f3cb 	.word	0x0800f3cb
 800f35c:	0800f3d3 	.word	0x0800f3d3
 800f360:	0800f3e1 	.word	0x0800f3e1
 800f364:	0800f3ef 	.word	0x0800f3ef
 800f368:	0800f447 	.word	0x0800f447
 800f36c:	0800f459 	.word	0x0800f459
 800f370:	0800f4c1 	.word	0x0800f4c1
 800f374:	0800f569 	.word	0x0800f569
 800f378:	0800f57b 	.word	0x0800f57b
 800f37c:	0800f595 	.word	0x0800f595
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800f380:	484d      	ldr	r0, [pc, #308]	; (800f4b8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f382:	f00d fa49 	bl	801c818 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800f386:	4b49      	ldr	r3, [pc, #292]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f388:	2200      	movs	r2, #0
 800f38a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800f38c:	4b47      	ldr	r3, [pc, #284]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f38e:	2200      	movs	r2, #0
 800f390:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800f392:	2304      	movs	r3, #4
 800f394:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f396:	4b46      	ldr	r3, [pc, #280]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f39e:	f107 0308 	add.w	r3, r7, #8
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f003 fff2 	bl	801338c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f3a8:	4b41      	ldr	r3, [pc, #260]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	785b      	ldrb	r3, [r3, #1]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f004 fd7c 	bl	8013eac <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800f3b4:	4b3e      	ldr	r3, [pc, #248]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f000 8100 	beq.w	800f5c0 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800f3c0:	4b3b      	ldr	r3, [pc, #236]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	4798      	blx	r3
                }
            }
            break;
 800f3c8:	e0fa      	b.n	800f5c0 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800f3ca:	4b38      	ldr	r3, [pc, #224]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3cc:	2202      	movs	r2, #2
 800f3ce:	719a      	strb	r2, [r3, #6]
            break;
 800f3d0:	e0f7      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800f3d2:	4b36      	ldr	r3, [pc, #216]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800f3d8:	4b34      	ldr	r3, [pc, #208]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3da:	2201      	movs	r2, #1
 800f3dc:	709a      	strb	r2, [r3, #2]
            break;
 800f3de:	e0f0      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800f3e0:	4b32      	ldr	r3, [pc, #200]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800f3e6:	4b31      	ldr	r3, [pc, #196]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	709a      	strb	r2, [r3, #2]
            break;
 800f3ec:	e0e9      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	7b1a      	ldrb	r2, [r3, #12]
 800f3f2:	4b2e      	ldr	r3, [pc, #184]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3f4:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800f3f6:	4b2d      	ldr	r3, [pc, #180]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	2204      	movs	r2, #4
 800f3fc:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f3fe:	2301      	movs	r3, #1
 800f400:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f404:	e012      	b.n	800f42c <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	689a      	ldr	r2, [r3, #8]
 800f40a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f40e:	4413      	add	r3, r2
 800f410:	781a      	ldrb	r2, [r3, #0]
 800f412:	4b26      	ldr	r3, [pc, #152]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f414:	6899      	ldr	r1, [r3, #8]
 800f416:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f41a:	440b      	add	r3, r1
 800f41c:	3201      	adds	r2, #1
 800f41e:	b2d2      	uxtb	r2, r2
 800f420:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f422:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f426:	3301      	adds	r3, #1
 800f428:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f42c:	4b1f      	ldr	r3, [pc, #124]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f42e:	795a      	ldrb	r2, [r3, #5]
 800f430:	4b1e      	ldr	r3, [pc, #120]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f432:	799b      	ldrb	r3, [r3, #6]
 800f434:	4293      	cmp	r3, r2
 800f436:	bf28      	it	cs
 800f438:	4613      	movcs	r3, r2
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800f440:	429a      	cmp	r2, r3
 800f442:	d3e0      	bcc.n	800f406 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800f444:	e0bd      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800f446:	2304      	movs	r3, #4
 800f448:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800f44c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f450:	4618      	mov	r0, r3
 800f452:	f004 faf5 	bl	8013a40 <LoRaMacMlmeRequest>
            }
            break;
 800f456:	e0b4      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800f458:	4817      	ldr	r0, [pc, #92]	; (800f4b8 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f45a:	f00d f9dd 	bl	801c818 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800f45e:	4b13      	ldr	r3, [pc, #76]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f460:	2200      	movs	r2, #0
 800f462:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800f464:	4b11      	ldr	r3, [pc, #68]	; (800f4ac <LmhpComplianceOnMcpsIndication+0x298>)
 800f466:	2200      	movs	r2, #0
 800f468:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800f46a:	2304      	movs	r3, #4
 800f46c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f46e:	4b10      	ldr	r3, [pc, #64]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f476:	f107 0308 	add.w	r3, r7, #8
 800f47a:	4618      	mov	r0, r3
 800f47c:	f003 ff86 	bl	801338c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f480:	4b0b      	ldr	r3, [pc, #44]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	785b      	ldrb	r3, [r3, #1]
 800f486:	4618      	mov	r0, r3
 800f488:	f004 fd10 	bl	8013eac <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800f48c:	4b08      	ldr	r3, [pc, #32]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800f496:	4b06      	ldr	r3, [pc, #24]	; (800f4b0 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f49e:	4b07      	ldr	r3, [pc, #28]	; (800f4bc <LmhpComplianceOnMcpsIndication+0x2a8>)
 800f4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	2002      	movs	r0, #2
 800f4a6:	4798      	blx	r3
            }
            break;
 800f4a8:	e08b      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
 800f4aa:	bf00      	nop
 800f4ac:	200008b8 	.word	0x200008b8
 800f4b0:	200008cc 	.word	0x200008cc
 800f4b4:	0800f5d9 	.word	0x0800f5d9
 800f4b8:	200008a0 	.word	0x200008a0
 800f4bc:	200000f4 	.word	0x200000f4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	7b1b      	ldrb	r3, [r3, #12]
 800f4c4:	2b03      	cmp	r3, #3
 800f4c6:	d113      	bne.n	800f4f0 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f4c8:	2305      	movs	r3, #5
 800f4ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	021b      	lsls	r3, r3, #8
 800f4d8:	b21a      	sxth	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	3302      	adds	r3, #2
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	b21b      	sxth	r3, r3
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	b21b      	sxth	r3, r3
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800f4ee:	e032      	b.n	800f556 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	7b1b      	ldrb	r3, [r3, #12]
 800f4f4:	2b07      	cmp	r3, #7
 800f4f6:	d12e      	bne.n	800f556 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800f4f8:	2306      	movs	r3, #6
 800f4fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	3301      	adds	r3, #1
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	021b      	lsls	r3, r3, #8
 800f508:	b21a      	sxth	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	3302      	adds	r3, #2
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	b21b      	sxth	r3, r3
 800f514:	4313      	orrs	r3, r2
 800f516:	b21b      	sxth	r3, r3
 800f518:	b29b      	uxth	r3, r3
 800f51a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	3303      	adds	r3, #3
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	041a      	lsls	r2, r3, #16
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	3304      	adds	r3, #4
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	4313      	orrs	r3, r2
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	6892      	ldr	r2, [r2, #8]
 800f538:	3205      	adds	r2, #5
 800f53a:	7812      	ldrb	r2, [r2, #0]
 800f53c:	4313      	orrs	r3, r2
 800f53e:	461a      	mov	r2, r3
 800f540:	2364      	movs	r3, #100	; 0x64
 800f542:	fb02 f303 	mul.w	r3, r2, r3
 800f546:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	3306      	adds	r3, #6
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	b25b      	sxtb	r3, r3
 800f552:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800f556:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f55a:	4618      	mov	r0, r3
 800f55c:	f004 fa70 	bl	8013a40 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800f560:	4b19      	ldr	r3, [pc, #100]	; (800f5c8 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800f562:	2201      	movs	r2, #1
 800f564:	709a      	strb	r2, [r3, #2]
            }
            break;
 800f566:	e02c      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800f568:	230a      	movs	r3, #10
 800f56a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800f56e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f572:	4618      	mov	r0, r3
 800f574:	f004 fa64 	bl	8013a40 <LoRaMacMlmeRequest>
            }
            break;
 800f578:	e023      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800f57a:	2300      	movs	r3, #0
 800f57c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	3301      	adds	r3, #1
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f588:	f107 0308 	add.w	r3, r7, #8
 800f58c:	4618      	mov	r0, r3
 800f58e:	f003 fefd 	bl	801338c <LoRaMacMibSetRequestConfirm>
            }
            break;
 800f592:	e016      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800f594:	230d      	movs	r3, #13
 800f596:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	785b      	ldrb	r3, [r3, #1]
 800f5a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800f5a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f004 fa49 	bl	8013a40 <LoRaMacMlmeRequest>
            }
            break;
 800f5ae:	e008      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f5b0:	bf00      	nop
 800f5b2:	e006      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f5b4:	bf00      	nop
 800f5b6:	e004      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f5b8:	bf00      	nop
 800f5ba:	e002      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800f5bc:	bf00      	nop
 800f5be:	e000      	b.n	800f5c2 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800f5c0:	bf00      	nop
        }
    }
}
 800f5c2:	3780      	adds	r7, #128	; 0x80
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	200008b8 	.word	0x200008b8

0800f5cc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800f5d0:	bf00      	nop
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bc80      	pop	{r7}
 800f5d6:	4770      	bx	lr

0800f5d8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800f5e0:	f7ff fda8 	bl	800f134 <LmhpComplianceTxProcess>
}
 800f5e4:	bf00      	nop
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800f5ec:	b590      	push	{r4, r7, lr}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f5f2:	f00d fa2b 	bl	801ca4c <UTIL_TIMER_GetCurrentTime>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	4a13      	ldr	r2, [pc, #76]	; (800f648 <OnRadioTxDone+0x5c>)
 800f5fa:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f5fc:	4c13      	ldr	r4, [pc, #76]	; (800f64c <OnRadioTxDone+0x60>)
 800f5fe:	463b      	mov	r3, r7
 800f600:	4618      	mov	r0, r3
 800f602:	f00c fb9d 	bl	801bd40 <SysTimeGet>
 800f606:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800f60a:	463a      	mov	r2, r7
 800f60c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f610:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f614:	4a0e      	ldr	r2, [pc, #56]	; (800f650 <OnRadioTxDone+0x64>)
 800f616:	7813      	ldrb	r3, [r2, #0]
 800f618:	f043 0310 	orr.w	r3, r3, #16
 800f61c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f61e:	4b0b      	ldr	r3, [pc, #44]	; (800f64c <OnRadioTxDone+0x60>)
 800f620:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00a      	beq.n	800f63e <OnRadioTxDone+0x52>
 800f628:	4b08      	ldr	r3, [pc, #32]	; (800f64c <OnRadioTxDone+0x60>)
 800f62a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d004      	beq.n	800f63e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f634:	4b05      	ldr	r3, [pc, #20]	; (800f64c <OnRadioTxDone+0x60>)
 800f636:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f63a:	691b      	ldr	r3, [r3, #16]
 800f63c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800f63e:	bf00      	nop
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	bd90      	pop	{r4, r7, pc}
 800f646:	bf00      	nop
 800f648:	20001c30 	.word	0x20001c30
 800f64c:	200008d0 	.word	0x200008d0
 800f650:	20001c2c 	.word	0x20001c2c

0800f654 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	4608      	mov	r0, r1
 800f65e:	4611      	mov	r1, r2
 800f660:	461a      	mov	r2, r3
 800f662:	4603      	mov	r3, r0
 800f664:	817b      	strh	r3, [r7, #10]
 800f666:	460b      	mov	r3, r1
 800f668:	813b      	strh	r3, [r7, #8]
 800f66a:	4613      	mov	r3, r2
 800f66c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f66e:	f00d f9ed 	bl	801ca4c <UTIL_TIMER_GetCurrentTime>
 800f672:	4603      	mov	r3, r0
 800f674:	4a13      	ldr	r2, [pc, #76]	; (800f6c4 <OnRadioRxDone+0x70>)
 800f676:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f678:	4a12      	ldr	r2, [pc, #72]	; (800f6c4 <OnRadioRxDone+0x70>)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f67e:	4a11      	ldr	r2, [pc, #68]	; (800f6c4 <OnRadioRxDone+0x70>)
 800f680:	897b      	ldrh	r3, [r7, #10]
 800f682:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f684:	4a0f      	ldr	r2, [pc, #60]	; (800f6c4 <OnRadioRxDone+0x70>)
 800f686:	893b      	ldrh	r3, [r7, #8]
 800f688:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f68a:	4a0e      	ldr	r2, [pc, #56]	; (800f6c4 <OnRadioRxDone+0x70>)
 800f68c:	79fb      	ldrb	r3, [r7, #7]
 800f68e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f690:	4a0d      	ldr	r2, [pc, #52]	; (800f6c8 <OnRadioRxDone+0x74>)
 800f692:	7813      	ldrb	r3, [r2, #0]
 800f694:	f043 0308 	orr.w	r3, r3, #8
 800f698:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f69a:	4b0c      	ldr	r3, [pc, #48]	; (800f6cc <OnRadioRxDone+0x78>)
 800f69c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00a      	beq.n	800f6ba <OnRadioRxDone+0x66>
 800f6a4:	4b09      	ldr	r3, [pc, #36]	; (800f6cc <OnRadioRxDone+0x78>)
 800f6a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f6b0:	4b06      	ldr	r3, [pc, #24]	; (800f6cc <OnRadioRxDone+0x78>)
 800f6b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800f6ba:	bf00      	nop
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	20001c34 	.word	0x20001c34
 800f6c8:	20001c2c 	.word	0x20001c2c
 800f6cc:	200008d0 	.word	0x200008d0

0800f6d0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f6d4:	4a0b      	ldr	r2, [pc, #44]	; (800f704 <OnRadioTxTimeout+0x34>)
 800f6d6:	7813      	ldrb	r3, [r2, #0]
 800f6d8:	f043 0304 	orr.w	r3, r3, #4
 800f6dc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f6de:	4b0a      	ldr	r3, [pc, #40]	; (800f708 <OnRadioTxTimeout+0x38>)
 800f6e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00a      	beq.n	800f6fe <OnRadioTxTimeout+0x2e>
 800f6e8:	4b07      	ldr	r3, [pc, #28]	; (800f708 <OnRadioTxTimeout+0x38>)
 800f6ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6ee:	691b      	ldr	r3, [r3, #16]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d004      	beq.n	800f6fe <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f6f4:	4b04      	ldr	r3, [pc, #16]	; (800f708 <OnRadioTxTimeout+0x38>)
 800f6f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6fa:	691b      	ldr	r3, [r3, #16]
 800f6fc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800f6fe:	bf00      	nop
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20001c2c 	.word	0x20001c2c
 800f708:	200008d0 	.word	0x200008d0

0800f70c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f710:	4a0b      	ldr	r2, [pc, #44]	; (800f740 <OnRadioRxError+0x34>)
 800f712:	7813      	ldrb	r3, [r2, #0]
 800f714:	f043 0302 	orr.w	r3, r3, #2
 800f718:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f71a:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <OnRadioRxError+0x38>)
 800f71c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00a      	beq.n	800f73a <OnRadioRxError+0x2e>
 800f724:	4b07      	ldr	r3, [pc, #28]	; (800f744 <OnRadioRxError+0x38>)
 800f726:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d004      	beq.n	800f73a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f730:	4b04      	ldr	r3, [pc, #16]	; (800f744 <OnRadioRxError+0x38>)
 800f732:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	4798      	blx	r3
    }
}
 800f73a:	bf00      	nop
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20001c2c 	.word	0x20001c2c
 800f744:	200008d0 	.word	0x200008d0

0800f748 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f74c:	4a0b      	ldr	r2, [pc, #44]	; (800f77c <OnRadioRxTimeout+0x34>)
 800f74e:	7813      	ldrb	r3, [r2, #0]
 800f750:	f043 0301 	orr.w	r3, r3, #1
 800f754:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f756:	4b0a      	ldr	r3, [pc, #40]	; (800f780 <OnRadioRxTimeout+0x38>)
 800f758:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00a      	beq.n	800f776 <OnRadioRxTimeout+0x2e>
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <OnRadioRxTimeout+0x38>)
 800f762:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d004      	beq.n	800f776 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f76c:	4b04      	ldr	r3, [pc, #16]	; (800f780 <OnRadioRxTimeout+0x38>)
 800f76e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800f776:	bf00      	nop
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20001c2c 	.word	0x20001c2c
 800f780:	200008d0 	.word	0x200008d0

0800f784 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f784:	b480      	push	{r7}
 800f786:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f788:	4b08      	ldr	r3, [pc, #32]	; (800f7ac <UpdateRxSlotIdleState+0x28>)
 800f78a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d004      	beq.n	800f79c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f792:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <UpdateRxSlotIdleState+0x2c>)
 800f794:	2206      	movs	r2, #6
 800f796:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f79a:	e003      	b.n	800f7a4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f79c:	4b04      	ldr	r3, [pc, #16]	; (800f7b0 <UpdateRxSlotIdleState+0x2c>)
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800f7a4:	bf00      	nop
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bc80      	pop	{r7}
 800f7aa:	4770      	bx	lr
 800f7ac:	20000ddc 	.word	0x20000ddc
 800f7b0:	200008d0 	.word	0x200008d0

0800f7b4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08e      	sub	sp, #56	; 0x38
 800f7b8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f7ba:	4b44      	ldr	r3, [pc, #272]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f7bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d002      	beq.n	800f7ca <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f7c4:	4b42      	ldr	r3, [pc, #264]	; (800f8d0 <ProcessRadioTxDone+0x11c>)
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f7ca:	4b42      	ldr	r3, [pc, #264]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f7cc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	4841      	ldr	r0, [pc, #260]	; (800f8d8 <ProcessRadioTxDone+0x124>)
 800f7d4:	f00d f890 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f7d8:	483f      	ldr	r0, [pc, #252]	; (800f8d8 <ProcessRadioTxDone+0x124>)
 800f7da:	f00c ffaf 	bl	801c73c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f7de:	4b3d      	ldr	r3, [pc, #244]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f7e0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	483d      	ldr	r0, [pc, #244]	; (800f8dc <ProcessRadioTxDone+0x128>)
 800f7e8:	f00d f886 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f7ec:	483b      	ldr	r0, [pc, #236]	; (800f8dc <ProcessRadioTxDone+0x128>)
 800f7ee:	f00c ffa5 	bl	801c73c <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f7f2:	4b36      	ldr	r3, [pc, #216]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f7f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	d004      	beq.n	800f806 <ProcessRadioTxDone+0x52>
 800f7fc:	4b35      	ldr	r3, [pc, #212]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f7fe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f802:	2b00      	cmp	r3, #0
 800f804:	d019      	beq.n	800f83a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f806:	2316      	movs	r3, #22
 800f808:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f80c:	4b2f      	ldr	r3, [pc, #188]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f80e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f812:	f107 0220 	add.w	r2, r7, #32
 800f816:	4611      	mov	r1, r2
 800f818:	4618      	mov	r0, r3
 800f81a:	f006 fc09 	bl	8016030 <RegionGetPhyParam>
 800f81e:	4603      	mov	r3, r0
 800f820:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f822:	4b2c      	ldr	r3, [pc, #176]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f824:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	4413      	add	r3, r2
 800f82c:	4619      	mov	r1, r3
 800f82e:	482c      	ldr	r0, [pc, #176]	; (800f8e0 <ProcessRadioTxDone+0x12c>)
 800f830:	f00d f862 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f834:	482a      	ldr	r0, [pc, #168]	; (800f8e0 <ProcessRadioTxDone+0x12c>)
 800f836:	f00c ff81 	bl	801c73c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f83a:	4b2a      	ldr	r3, [pc, #168]	; (800f8e4 <ProcessRadioTxDone+0x130>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a23      	ldr	r2, [pc, #140]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f840:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f842:	4b24      	ldr	r3, [pc, #144]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f844:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f848:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f84a:	4b26      	ldr	r3, [pc, #152]	; (800f8e4 <ProcessRadioTxDone+0x130>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f854:	4618      	mov	r0, r3
 800f856:	f00c faab 	bl	801bdb0 <SysTimeGetMcuTime>
 800f85a:	4638      	mov	r0, r7
 800f85c:	4b1b      	ldr	r3, [pc, #108]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f85e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800f862:	9200      	str	r2, [sp, #0]
 800f864:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f868:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f86c:	ca06      	ldmia	r2, {r1, r2}
 800f86e:	f00c fa00 	bl	801bc72 <SysTimeSub>
 800f872:	f107 0314 	add.w	r3, r7, #20
 800f876:	463a      	mov	r2, r7
 800f878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f87c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f880:	4b14      	ldr	r3, [pc, #80]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f882:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f886:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f888:	2301      	movs	r3, #1
 800f88a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f88c:	4b0f      	ldr	r3, [pc, #60]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f88e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800f896:	2300      	movs	r3, #0
 800f898:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f89a:	4b0c      	ldr	r3, [pc, #48]	; (800f8cc <ProcessRadioTxDone+0x118>)
 800f89c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8a0:	f107 0208 	add.w	r2, r7, #8
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f006 fbda 	bl	8016060 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800f8ac:	4b09      	ldr	r3, [pc, #36]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f8ae:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f8b2:	f083 0301 	eor.w	r3, r3, #1
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d003      	beq.n	800f8c4 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f8bc:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <ProcessRadioTxDone+0x120>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800f8c4:	bf00      	nop
 800f8c6:	3730      	adds	r7, #48	; 0x30
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	20000ddc 	.word	0x20000ddc
 800f8d0:	080206a0 	.word	0x080206a0
 800f8d4:	200008d0 	.word	0x200008d0
 800f8d8:	20000c50 	.word	0x20000c50
 800f8dc:	20000c68 	.word	0x20000c68
 800f8e0:	20000cc8 	.word	0x20000cc8
 800f8e4:	20001c30 	.word	0x20001c30

0800f8e8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f8ec:	4b10      	ldr	r3, [pc, #64]	; (800f930 <PrepareRxDoneAbort+0x48>)
 800f8ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f6:	4a0e      	ldr	r2, [pc, #56]	; (800f930 <PrepareRxDoneAbort+0x48>)
 800f8f8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800f8fc:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <PrepareRxDoneAbort+0x48>)
 800f8fe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800f906:	2000      	movs	r0, #0
 800f908:	f001 f8f2 	bl	8010af0 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f90c:	4a08      	ldr	r2, [pc, #32]	; (800f930 <PrepareRxDoneAbort+0x48>)
 800f90e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f912:	f043 0302 	orr.w	r3, r3, #2
 800f916:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f91a:	4a05      	ldr	r2, [pc, #20]	; (800f930 <PrepareRxDoneAbort+0x48>)
 800f91c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f920:	f043 0320 	orr.w	r3, r3, #32
 800f924:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800f928:	f7ff ff2c 	bl	800f784 <UpdateRxSlotIdleState>
}
 800f92c:	bf00      	nop
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	200008d0 	.word	0x200008d0

0800f934 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f934:	b5b0      	push	{r4, r5, r7, lr}
 800f936:	b0a6      	sub	sp, #152	; 0x98
 800f938:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f93a:	2313      	movs	r3, #19
 800f93c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f940:	4bb9      	ldr	r3, [pc, #740]	; (800fc28 <ProcessRadioRxDone+0x2f4>)
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f946:	4bb8      	ldr	r3, [pc, #736]	; (800fc28 <ProcessRadioRxDone+0x2f4>)
 800f948:	891b      	ldrh	r3, [r3, #8]
 800f94a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800f94e:	4bb6      	ldr	r3, [pc, #728]	; (800fc28 <ProcessRadioRxDone+0x2f4>)
 800f950:	895b      	ldrh	r3, [r3, #10]
 800f952:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800f956:	4bb4      	ldr	r3, [pc, #720]	; (800fc28 <ProcessRadioRxDone+0x2f4>)
 800f958:	7b1b      	ldrb	r3, [r3, #12]
 800f95a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800f964:	2300      	movs	r3, #0
 800f966:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f968:	4bb0      	ldr	r3, [pc, #704]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800f96a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f96e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800f972:	2300      	movs	r3, #0
 800f974:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f978:	2301      	movs	r3, #1
 800f97a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f97e:	4bac      	ldr	r3, [pc, #688]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f980:	2200      	movs	r2, #0
 800f982:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800f986:	4aaa      	ldr	r2, [pc, #680]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f988:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800f98c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800f990:	4aa7      	ldr	r2, [pc, #668]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f992:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f996:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f99a:	4ba5      	ldr	r3, [pc, #660]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f99c:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800f9a0:	4ba3      	ldr	r3, [pc, #652]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9a2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800f9a6:	4ba2      	ldr	r3, [pc, #648]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800f9ae:	4ba0      	ldr	r3, [pc, #640]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800f9b6:	4b9e      	ldr	r3, [pc, #632]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800f9be:	4b9c      	ldr	r3, [pc, #624]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800f9c6:	4b9a      	ldr	r3, [pc, #616]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800f9ce:	4b98      	ldr	r3, [pc, #608]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800f9d6:	4b96      	ldr	r3, [pc, #600]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f9de:	4b94      	ldr	r3, [pc, #592]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f9e6:	4b92      	ldr	r3, [pc, #584]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800f9ee:	4b90      	ldr	r3, [pc, #576]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f9f6:	4b8e      	ldr	r3, [pc, #568]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f9fe:	4b8d      	ldr	r3, [pc, #564]	; (800fc34 <ProcessRadioRxDone+0x300>)
 800fa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa02:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800fa04:	488c      	ldr	r0, [pc, #560]	; (800fc38 <ProcessRadioRxDone+0x304>)
 800fa06:	f00c ff07 	bl	801c818 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fa0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800fa12:	f004 fbaa 	bl	801416a <LoRaMacClassBRxBeacon>
 800fa16:	4603      	mov	r3, r0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00a      	beq.n	800fa32 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fa1c:	4a84      	ldr	r2, [pc, #528]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800fa1e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fa22:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fa26:	4a82      	ldr	r2, [pc, #520]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800fa28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fa2c:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800fa30:	e3c7      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fa32:	4b7e      	ldr	r3, [pc, #504]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fa34:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d11e      	bne.n	800fa7a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fa3c:	f004 fba8 	bl	8014190 <LoRaMacClassBIsPingExpected>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d00a      	beq.n	800fa5c <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa46:	2000      	movs	r0, #0
 800fa48:	f004 fb59 	bl	80140fe <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	f004 fb7a 	bl	8014146 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fa52:	4b77      	ldr	r3, [pc, #476]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800fa54:	2204      	movs	r2, #4
 800fa56:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800fa5a:	e00e      	b.n	800fa7a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fa5c:	f004 fb9f 	bl	801419e <LoRaMacClassBIsMulticastExpected>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d009      	beq.n	800fa7a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa66:	2000      	movs	r0, #0
 800fa68:	f004 fb53 	bl	8014112 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	f004 fb73 	bl	8014158 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fa72:	4b6f      	ldr	r3, [pc, #444]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800fa74:	2205      	movs	r2, #5
 800fa76:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fa7a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800fa84:	461a      	mov	r2, r3
 800fa86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa88:	4413      	add	r3, r2
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800fa90:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800fa94:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	2b06      	cmp	r3, #6
 800fa9e:	f200 836a 	bhi.w	8010176 <ProcessRadioRxDone+0x842>
 800faa2:	a201      	add	r2, pc, #4	; (adr r2, 800faa8 <ProcessRadioRxDone+0x174>)
 800faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa8:	0800fac5 	.word	0x0800fac5
 800faac:	08010177 	.word	0x08010177
 800fab0:	0800fc45 	.word	0x0800fc45
 800fab4:	08010177 	.word	0x08010177
 800fab8:	0800fc3d 	.word	0x0800fc3d
 800fabc:	08010177 	.word	0x08010177
 800fac0:	0801011d 	.word	0x0801011d
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fac4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fac8:	2b10      	cmp	r3, #16
 800faca:	d806      	bhi.n	800fada <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800facc:	4b58      	ldr	r3, [pc, #352]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800face:	2201      	movs	r2, #1
 800fad0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fad4:	f7ff ff08 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fad8:	e373      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800fada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fadc:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800fade:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fae6:	4b51      	ldr	r3, [pc, #324]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fae8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800faec:	2b00      	cmp	r3, #0
 800faee:	d006      	beq.n	800fafe <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800faf0:	4b4f      	ldr	r3, [pc, #316]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800faf2:	2201      	movs	r2, #1
 800faf4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800faf8:	f7ff fef6 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fafc:	e361      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800fafe:	f7fe fb01 	bl	800e104 <SecureElementGetJoinEui>
 800fb02:	4601      	mov	r1, r0
 800fb04:	f107 0308 	add.w	r3, r7, #8
 800fb08:	461a      	mov	r2, r3
 800fb0a:	20ff      	movs	r0, #255	; 0xff
 800fb0c:	f005 fd14 	bl	8015538 <LoRaMacCryptoHandleJoinAccept>
 800fb10:	4603      	mov	r3, r0
 800fb12:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fb16:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d172      	bne.n	800fc04 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fb1e:	7c7b      	ldrb	r3, [r7, #17]
 800fb20:	461a      	mov	r2, r3
 800fb22:	4b42      	ldr	r3, [pc, #264]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb24:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fb28:	4b40      	ldr	r3, [pc, #256]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb2a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800fb2e:	7cbb      	ldrb	r3, [r7, #18]
 800fb30:	021b      	lsls	r3, r3, #8
 800fb32:	4313      	orrs	r3, r2
 800fb34:	4a3d      	ldr	r2, [pc, #244]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb36:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fb3a:	4b3c      	ldr	r3, [pc, #240]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb3c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800fb40:	7cfb      	ldrb	r3, [r7, #19]
 800fb42:	041b      	lsls	r3, r3, #16
 800fb44:	4313      	orrs	r3, r2
 800fb46:	4a39      	ldr	r2, [pc, #228]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb48:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	4a37      	ldr	r2, [pc, #220]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fb54:	7e3b      	ldrb	r3, [r7, #24]
 800fb56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	4b33      	ldr	r3, [pc, #204]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb64:	7e3b      	ldrb	r3, [r7, #24]
 800fb66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	4b2f      	ldr	r3, [pc, #188]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb74:	7e3b      	ldrb	r3, [r7, #24]
 800fb76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	4b2b      	ldr	r3, [pc, #172]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fb84:	7e7b      	ldrb	r3, [r7, #25]
 800fb86:	461a      	mov	r2, r3
 800fb88:	4b28      	ldr	r3, [pc, #160]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb8a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fb8c:	4b27      	ldr	r3, [pc, #156]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d102      	bne.n	800fb9a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fb94:	4b25      	ldr	r3, [pc, #148]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb96:	2201      	movs	r2, #1
 800fb98:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fb9a:	4b24      	ldr	r3, [pc, #144]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fba2:	fb02 f303 	mul.w	r3, r2, r3
 800fba6:	4a21      	ldr	r2, [pc, #132]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fba8:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fbaa:	4b20      	ldr	r3, [pc, #128]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fbac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fbb2:	4a1e      	ldr	r2, [pc, #120]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fbb4:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fbb6:	4b1d      	ldr	r3, [pc, #116]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fbbe:	f107 0308 	add.w	r3, r7, #8
 800fbc2:	3312      	adds	r3, #18
 800fbc4:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fbc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	3b11      	subs	r3, #17
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fbd4:	4b15      	ldr	r3, [pc, #84]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fbd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbda:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800fbde:	4611      	mov	r1, r2
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f006 fa77 	bl	80160d4 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fbe6:	4b11      	ldr	r3, [pc, #68]	; (800fc2c <ProcessRadioRxDone+0x2f8>)
 800fbe8:	2202      	movs	r2, #2
 800fbea:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fbee:	2001      	movs	r0, #1
 800fbf0:	f004 ff9a 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00e      	beq.n	800fc18 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	f004 ff07 	bl	8014a10 <LoRaMacConfirmQueueSetStatus>
 800fc02:	e009      	b.n	800fc18 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fc04:	2001      	movs	r0, #1
 800fc06:	f004 ff8f 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d003      	beq.n	800fc18 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fc10:	2101      	movs	r1, #1
 800fc12:	2007      	movs	r0, #7
 800fc14:	f004 fefc 	bl	8014a10 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800fc18:	4a05      	ldr	r2, [pc, #20]	; (800fc30 <ProcessRadioRxDone+0x2fc>)
 800fc1a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fc1e:	f043 0308 	orr.w	r3, r3, #8
 800fc22:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800fc26:	e2ad      	b.n	8010184 <ProcessRadioRxDone+0x850>
 800fc28:	20001c34 	.word	0x20001c34
 800fc2c:	20000ddc 	.word	0x20000ddc
 800fc30:	200008d0 	.word	0x200008d0
 800fc34:	080206a0 	.word	0x080206a0
 800fc38:	20000c68 	.word	0x20000c68
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fc3c:	4bb0      	ldr	r3, [pc, #704]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fc3e:	2201      	movs	r2, #1
 800fc40:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc44:	4baf      	ldr	r3, [pc, #700]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fc46:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fc4a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fc4e:	4bac      	ldr	r3, [pc, #688]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fc50:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800fc54:	b25b      	sxtb	r3, r3
 800fc56:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fc5a:	230d      	movs	r3, #13
 800fc5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fc60:	4ba8      	ldr	r3, [pc, #672]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fc62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d002      	beq.n	800fc70 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fc6a:	230e      	movs	r3, #14
 800fc6c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc70:	4ba4      	ldr	r3, [pc, #656]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fc72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc76:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f006 f9d7 	bl	8016030 <RegionGetPhyParam>
 800fc82:	4603      	mov	r3, r0
 800fc84:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fc86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fc8a:	3b0d      	subs	r3, #13
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	b21b      	sxth	r3, r3
 800fc90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc94:	b21a      	sxth	r2, r3
 800fc96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc98:	b21b      	sxth	r3, r3
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	dc03      	bgt.n	800fca6 <ProcessRadioRxDone+0x372>
 800fc9e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fca2:	2b0b      	cmp	r3, #11
 800fca4:	d806      	bhi.n	800fcb4 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fca6:	4b96      	ldr	r3, [pc, #600]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fcae:	f7ff fe1b 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fcb2:	e286      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800fcb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcb6:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800fcb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fcc2:	4b91      	ldr	r3, [pc, #580]	; (800ff08 <ProcessRadioRxDone+0x5d4>)
 800fcc4:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fcc6:	23ff      	movs	r3, #255	; 0xff
 800fcc8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f005 ff30 	bl	8015b36 <LoRaMacParserData>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d006      	beq.n	800fcea <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fcdc:	4b88      	ldr	r3, [pc, #544]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fce4:	f7ff fe00 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fce8:	e26b      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	4a84      	ldr	r2, [pc, #528]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fcee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fcf2:	1cba      	adds	r2, r7, #2
 800fcf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f002 fc9e 	bl	801263c <DetermineFrameType>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d006      	beq.n	800fd14 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd06:	4b7e      	ldr	r3, [pc, #504]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fd08:	2201      	movs	r2, #1
 800fd0a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fd0e:	f7ff fdeb 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fd12:	e256      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fd14:	2300      	movs	r3, #0
 800fd16:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800fd24:	e049      	b.n	800fdba <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd26:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fd2a:	4a76      	ldr	r2, [pc, #472]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fd2c:	212c      	movs	r1, #44	; 0x2c
 800fd2e:	fb01 f303 	mul.w	r3, r1, r3
 800fd32:	4413      	add	r3, r2
 800fd34:	33dc      	adds	r3, #220	; 0xdc
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d138      	bne.n	800fdb0 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fd3e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fd42:	4a70      	ldr	r2, [pc, #448]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fd44:	212c      	movs	r1, #44	; 0x2c
 800fd46:	fb01 f303 	mul.w	r3, r1, r3
 800fd4a:	4413      	add	r3, r2
 800fd4c:	33da      	adds	r3, #218	; 0xda
 800fd4e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d02d      	beq.n	800fdb0 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800fd54:	2301      	movs	r3, #1
 800fd56:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800fd5a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fd5e:	4a69      	ldr	r2, [pc, #420]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fd60:	212c      	movs	r1, #44	; 0x2c
 800fd62:	fb01 f303 	mul.w	r3, r1, r3
 800fd66:	4413      	add	r3, r2
 800fd68:	33db      	adds	r3, #219	; 0xdb
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fd70:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fd74:	4a63      	ldr	r2, [pc, #396]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fd76:	212c      	movs	r1, #44	; 0x2c
 800fd78:	fb01 f303 	mul.w	r3, r1, r3
 800fd7c:	4413      	add	r3, r2
 800fd7e:	33f8      	adds	r3, #248	; 0xf8
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800fd86:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fd8a:	4a5e      	ldr	r2, [pc, #376]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fd8c:	212c      	movs	r1, #44	; 0x2c
 800fd8e:	fb01 f303 	mul.w	r3, r1, r3
 800fd92:	4413      	add	r3, r2
 800fd94:	33dc      	adds	r3, #220	; 0xdc
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fd9c:	4b59      	ldr	r3, [pc, #356]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fd9e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	d10e      	bne.n	800fdc4 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fda6:	4b56      	ldr	r3, [pc, #344]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fda8:	2203      	movs	r2, #3
 800fdaa:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800fdae:	e009      	b.n	800fdc4 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdb0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800fdba:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d0b1      	beq.n	800fd26 <ProcessRadioRxDone+0x3f2>
 800fdc2:	e000      	b.n	800fdc6 <ProcessRadioRxDone+0x492>
                    break;
 800fdc4:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fdc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d117      	bne.n	800fdfe <ProcessRadioRxDone+0x4ca>
 800fdce:	78bb      	ldrb	r3, [r7, #2]
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d10d      	bne.n	800fdf0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fdd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fdd8:	f003 0320 	and.w	r3, r3, #32
 800fddc:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d106      	bne.n	800fdf0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800fde2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fde6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdea:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d006      	beq.n	800fdfe <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdf0:	4b43      	ldr	r3, [pc, #268]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fdf8:	f7ff fd76 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fdfc:	e1e1      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800fdfe:	2315      	movs	r3, #21
 800fe00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe04:	4b3f      	ldr	r3, [pc, #252]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fe06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe0a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800fe0e:	4611      	mov	r1, r2
 800fe10:	4618      	mov	r0, r3
 800fe12:	f006 f90d 	bl	8016030 <RegionGetPhyParam>
 800fe16:	4603      	mov	r3, r0
 800fe18:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800fe1a:	78b9      	ldrb	r1, [r7, #2]
 800fe1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	4d38      	ldr	r5, [pc, #224]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fe22:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800fe26:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800fe2a:	1d3a      	adds	r2, r7, #4
 800fe2c:	9202      	str	r2, [sp, #8]
 800fe2e:	1cfa      	adds	r2, r7, #3
 800fe30:	9201      	str	r2, [sp, #4]
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800fe38:	4622      	mov	r2, r4
 800fe3a:	f000 fe8f 	bl	8010b5c <GetFCntDown>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fe44:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d035      	beq.n	800feb8 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fe4c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fe50:	2b07      	cmp	r3, #7
 800fe52:	d119      	bne.n	800fe88 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fe54:	4b2a      	ldr	r3, [pc, #168]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fe56:	2208      	movs	r2, #8
 800fe58:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800fe5c:	4b29      	ldr	r3, [pc, #164]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fe5e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d11d      	bne.n	800fea2 <ProcessRadioRxDone+0x56e>
 800fe66:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800fe6a:	f023 031f 	bic.w	r3, r3, #31
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	2ba0      	cmp	r3, #160	; 0xa0
 800fe72:	d116      	bne.n	800fea2 <ProcessRadioRxDone+0x56e>
 800fe74:	4b23      	ldr	r3, [pc, #140]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fe76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d111      	bne.n	800fea2 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800fe7e:	4b21      	ldr	r3, [pc, #132]	; (800ff04 <ProcessRadioRxDone+0x5d0>)
 800fe80:	2201      	movs	r2, #1
 800fe82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800fe86:	e00c      	b.n	800fea2 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800fe88:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fe8c:	2b08      	cmp	r3, #8
 800fe8e:	d104      	bne.n	800fe9a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800fe90:	4b1b      	ldr	r3, [pc, #108]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fe92:	220a      	movs	r2, #10
 800fe94:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800fe98:	e003      	b.n	800fea2 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe9a:	4b19      	ldr	r3, [pc, #100]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	4a16      	ldr	r2, [pc, #88]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fea6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4a14      	ldr	r2, [pc, #80]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800feae:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800feb2:	f7ff fd19 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800feb6:	e184      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800feb8:	78fa      	ldrb	r2, [r7, #3]
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800fec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	460b      	mov	r3, r1
 800fec8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fecc:	f005 fc80 	bl	80157d0 <LoRaMacCryptoUnsecureMessage>
 800fed0:	4603      	mov	r3, r0
 800fed2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fed6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d016      	beq.n	800ff0c <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fede:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d104      	bne.n	800fef0 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fee6:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fee8:	220b      	movs	r2, #11
 800feea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800feee:	e003      	b.n	800fef8 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fef0:	4b03      	ldr	r3, [pc, #12]	; (800ff00 <ProcessRadioRxDone+0x5cc>)
 800fef2:	220c      	movs	r2, #12
 800fef4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800fef8:	f7ff fcf6 	bl	800f8e8 <PrepareRxDoneAbort>
                return;
 800fefc:	e161      	b.n	80101c2 <ProcessRadioRxDone+0x88e>
 800fefe:	bf00      	nop
 800ff00:	200008d0 	.word	0x200008d0
 800ff04:	20000ddc 	.word	0x20000ddc
 800ff08:	20000b08 	.word	0x20000b08
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ff0c:	4bae      	ldr	r3, [pc, #696]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800ff14:	4aac      	ldr	r2, [pc, #688]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ff1a:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ff1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ff22:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4ba7      	ldr	r3, [pc, #668]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff2c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800ff30:	4ba5      	ldr	r3, [pc, #660]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800ff38:	4ba3      	ldr	r3, [pc, #652]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4aa1      	ldr	r2, [pc, #644]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff44:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4a9f      	ldr	r2, [pc, #636]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff4c:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ff54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bf14      	ite	ne
 800ff5e:	2301      	movne	r3, #1
 800ff60:	2300      	moveq	r3, #0
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	4b98      	ldr	r3, [pc, #608]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff66:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ff6a:	4b97      	ldr	r3, [pc, #604]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ff76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	bf14      	ite	ne
 800ff80:	2301      	movne	r3, #1
 800ff82:	2300      	moveq	r3, #0
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	4b90      	ldr	r3, [pc, #576]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff88:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff8c:	4b8e      	ldr	r3, [pc, #568]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff8e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d004      	beq.n	800ffa0 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ff96:	4b8c      	ldr	r3, [pc, #560]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ff98:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d102      	bne.n	800ffa6 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ffa0:	4b8a      	ldr	r3, [pc, #552]	; (80101cc <ProcessRadioRxDone+0x898>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ffa6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d104      	bne.n	800ffb8 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ffae:	4b86      	ldr	r3, [pc, #536]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ffb0:	2202      	movs	r2, #2
 800ffb2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800ffb6:	e01f      	b.n	800fff8 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ffb8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ffbc:	f023 031f 	bic.w	r3, r3, #31
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	2ba0      	cmp	r3, #160	; 0xa0
 800ffc4:	d110      	bne.n	800ffe8 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ffc6:	4b81      	ldr	r3, [pc, #516]	; (80101cc <ProcessRadioRxDone+0x898>)
 800ffc8:	2201      	movs	r2, #1
 800ffca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ffce:	4b7f      	ldr	r3, [pc, #508]	; (80101cc <ProcessRadioRxDone+0x898>)
 800ffd0:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ffd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffda:	4a7c      	ldr	r2, [pc, #496]	; (80101cc <ProcessRadioRxDone+0x898>)
 800ffdc:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ffde:	4b7a      	ldr	r3, [pc, #488]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800ffe6:	e007      	b.n	800fff8 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ffe8:	4b78      	ldr	r3, [pc, #480]	; (80101cc <ProcessRadioRxDone+0x898>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fff0:	4b75      	ldr	r3, [pc, #468]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fff8:	4b73      	ldr	r3, [pc, #460]	; (80101c8 <ProcessRadioRxDone+0x894>)
 800fffa:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fffe:	4a72      	ldr	r2, [pc, #456]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010000:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8010004:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8010008:	4618      	mov	r0, r3
 801000a:	f001 fee9 	bl	8011de0 <RemoveMacCommands>

            switch( fType )
 801000e:	78bb      	ldrb	r3, [r7, #2]
 8010010:	2b03      	cmp	r3, #3
 8010012:	d874      	bhi.n	80100fe <ProcessRadioRxDone+0x7ca>
 8010014:	a201      	add	r2, pc, #4	; (adr r2, 801001c <ProcessRadioRxDone+0x6e8>)
 8010016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801001a:	bf00      	nop
 801001c:	0801002d 	.word	0x0801002d
 8010020:	0801007d 	.word	0x0801007d
 8010024:	080100b3 	.word	0x080100b3
 8010028:	080100d9 	.word	0x080100d9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801002c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010030:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010034:	b2db      	uxtb	r3, r3
 8010036:	461c      	mov	r4, r3
 8010038:	4b63      	ldr	r3, [pc, #396]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801003a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801003e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8010042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010046:	f102 0010 	add.w	r0, r2, #16
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	460b      	mov	r3, r1
 801004e:	4622      	mov	r2, r4
 8010050:	2100      	movs	r1, #0
 8010052:	f000 fee5 	bl	8010e20 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010056:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801005a:	4b5b      	ldr	r3, [pc, #364]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801005c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010062:	4a59      	ldr	r2, [pc, #356]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010064:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010068:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801006c:	4b56      	ldr	r3, [pc, #344]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801006e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8010072:	4b55      	ldr	r3, [pc, #340]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010074:	2201      	movs	r2, #1
 8010076:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 801007a:	e047      	b.n	801010c <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801007c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010080:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010084:	b2db      	uxtb	r3, r3
 8010086:	461c      	mov	r4, r3
 8010088:	4b4f      	ldr	r3, [pc, #316]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801008a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801008e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8010092:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010096:	f102 0010 	add.w	r0, r2, #16
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	460b      	mov	r3, r1
 801009e:	4622      	mov	r2, r4
 80100a0:	2100      	movs	r1, #0
 80100a2:	f000 febd 	bl	8010e20 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100a6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80100aa:	4b47      	ldr	r3, [pc, #284]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100ac:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 80100b0:	e02c      	b.n	801010c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80100b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80100b4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80100b8:	4b43      	ldr	r3, [pc, #268]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100ba:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80100be:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	460b      	mov	r3, r1
 80100c6:	2100      	movs	r1, #0
 80100c8:	f000 feaa 	bl	8010e20 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100cc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80100d0:	4b3d      	ldr	r3, [pc, #244]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100d2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 80100d6:	e019      	b.n	801010c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100d8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80100dc:	4b3a      	ldr	r3, [pc, #232]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100de:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80100e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100e4:	4a38      	ldr	r2, [pc, #224]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100e6:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80100ea:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80100ee:	4b36      	ldr	r3, [pc, #216]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80100f4:	4b34      	ldr	r3, [pc, #208]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 80100fc:	e006      	b.n	801010c <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80100fe:	4b32      	ldr	r3, [pc, #200]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010100:	2201      	movs	r2, #1
 8010102:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8010106:	f7ff fbef 	bl	800f8e8 <PrepareRxDoneAbort>
                    break;
 801010a:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801010c:	4a2e      	ldr	r2, [pc, #184]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801010e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010112:	f043 0302 	orr.w	r3, r3, #2
 8010116:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 801011a:	e033      	b.n	8010184 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801011c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010120:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010122:	18d1      	adds	r1, r2, r3
 8010124:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010128:	b29b      	uxth	r3, r3
 801012a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	b29b      	uxth	r3, r3
 8010132:	461a      	mov	r2, r3
 8010134:	4826      	ldr	r0, [pc, #152]	; (80101d0 <ProcessRadioRxDone+0x89c>)
 8010136:	f008 fa5c 	bl	80185f2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801013a:	4b23      	ldr	r3, [pc, #140]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801013c:	2203      	movs	r2, #3
 801013e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010142:	4b21      	ldr	r3, [pc, #132]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010144:	2200      	movs	r2, #0
 8010146:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801014a:	4b1f      	ldr	r3, [pc, #124]	; (80101c8 <ProcessRadioRxDone+0x894>)
 801014c:	4a20      	ldr	r2, [pc, #128]	; (80101d0 <ProcessRadioRxDone+0x89c>)
 801014e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010152:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010156:	b2da      	uxtb	r2, r3
 8010158:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	b2da      	uxtb	r2, r3
 8010160:	4b19      	ldr	r3, [pc, #100]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010162:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010166:	4a18      	ldr	r2, [pc, #96]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010168:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801016c:	f043 0302 	orr.w	r3, r3, #2
 8010170:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8010174:	e006      	b.n	8010184 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010176:	4b14      	ldr	r3, [pc, #80]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010178:	2201      	movs	r2, #1
 801017a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 801017e:	f7ff fbb3 	bl	800f8e8 <PrepareRxDoneAbort>
            break;
 8010182:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8010184:	4b10      	ldr	r3, [pc, #64]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010186:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801018a:	2b00      	cmp	r3, #0
 801018c:	d008      	beq.n	80101a0 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801018e:	4b0e      	ldr	r3, [pc, #56]	; (80101c8 <ProcessRadioRxDone+0x894>)
 8010190:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00b      	beq.n	80101b0 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8010198:	2000      	movs	r0, #0
 801019a:	f000 fca9 	bl	8010af0 <OnAckTimeoutTimerEvent>
 801019e:	e007      	b.n	80101b0 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80101a0:	4b0a      	ldr	r3, [pc, #40]	; (80101cc <ProcessRadioRxDone+0x898>)
 80101a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d102      	bne.n	80101b0 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80101aa:	2000      	movs	r0, #0
 80101ac:	f000 fca0 	bl	8010af0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80101b0:	4a05      	ldr	r2, [pc, #20]	; (80101c8 <ProcessRadioRxDone+0x894>)
 80101b2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80101b6:	f043 0320 	orr.w	r3, r3, #32
 80101ba:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80101be:	f7ff fae1 	bl	800f784 <UpdateRxSlotIdleState>
}
 80101c2:	3788      	adds	r7, #136	; 0x88
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bdb0      	pop	{r4, r5, r7, pc}
 80101c8:	200008d0 	.word	0x200008d0
 80101cc:	20000ddc 	.word	0x20000ddc
 80101d0:	20000b08 	.word	0x20000b08

080101d4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <ProcessRadioTxTimeout+0x4c>)
 80101da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80101de:	2b02      	cmp	r3, #2
 80101e0:	d002      	beq.n	80101e8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 80101e2:	4b10      	ldr	r3, [pc, #64]	; (8010224 <ProcessRadioTxTimeout+0x50>)
 80101e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 80101e8:	f7ff facc 	bl	800f784 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80101ec:	4b0e      	ldr	r3, [pc, #56]	; (8010228 <ProcessRadioTxTimeout+0x54>)
 80101ee:	2202      	movs	r2, #2
 80101f0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80101f4:	2002      	movs	r0, #2
 80101f6:	f004 fc63 	bl	8014ac0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80101fa:	4b0b      	ldr	r3, [pc, #44]	; (8010228 <ProcessRadioTxTimeout+0x54>)
 80101fc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010200:	2b00      	cmp	r3, #0
 8010202:	d003      	beq.n	801020c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8010204:	4b08      	ldr	r3, [pc, #32]	; (8010228 <ProcessRadioTxTimeout+0x54>)
 8010206:	2201      	movs	r2, #1
 8010208:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801020c:	4a06      	ldr	r2, [pc, #24]	; (8010228 <ProcessRadioTxTimeout+0x54>)
 801020e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010212:	f043 0320 	orr.w	r3, r3, #32
 8010216:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 801021a:	bf00      	nop
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	20000ddc 	.word	0x20000ddc
 8010224:	080206a0 	.word	0x080206a0
 8010228:	200008d0 	.word	0x200008d0

0801022c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	460a      	mov	r2, r1
 8010236:	71fb      	strb	r3, [r7, #7]
 8010238:	4613      	mov	r3, r2
 801023a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 801023c:	2300      	movs	r3, #0
 801023e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010240:	4b40      	ldr	r3, [pc, #256]	; (8010344 <HandleRadioRxErrorTimeout+0x118>)
 8010242:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010246:	2b02      	cmp	r3, #2
 8010248:	d002      	beq.n	8010250 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801024a:	4b3f      	ldr	r3, [pc, #252]	; (8010348 <HandleRadioRxErrorTimeout+0x11c>)
 801024c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010250:	f003 ff97 	bl	8014182 <LoRaMacClassBIsBeaconExpected>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d007      	beq.n	801026a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801025a:	2002      	movs	r0, #2
 801025c:	f003 ff45 	bl	80140ea <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010260:	2000      	movs	r0, #0
 8010262:	f003 ff67 	bl	8014134 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010266:	2301      	movs	r3, #1
 8010268:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801026a:	4b36      	ldr	r3, [pc, #216]	; (8010344 <HandleRadioRxErrorTimeout+0x118>)
 801026c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010270:	2b01      	cmp	r3, #1
 8010272:	d119      	bne.n	80102a8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010274:	f003 ff8c 	bl	8014190 <LoRaMacClassBIsPingExpected>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d007      	beq.n	801028e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801027e:	2000      	movs	r0, #0
 8010280:	f003 ff3d 	bl	80140fe <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010284:	2000      	movs	r0, #0
 8010286:	f003 ff5e 	bl	8014146 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801028a:	2301      	movs	r3, #1
 801028c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801028e:	f003 ff86 	bl	801419e <LoRaMacClassBIsMulticastExpected>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d007      	beq.n	80102a8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010298:	2000      	movs	r0, #0
 801029a:	f003 ff3a 	bl	8014112 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801029e:	2000      	movs	r0, #0
 80102a0:	f003 ff5a 	bl	8014158 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80102a4:	2301      	movs	r3, #1
 80102a6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80102a8:	7bfb      	ldrb	r3, [r7, #15]
 80102aa:	f083 0301 	eor.w	r3, r3, #1
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d040      	beq.n	8010336 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80102b4:	4b25      	ldr	r3, [pc, #148]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 80102b6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d122      	bne.n	8010304 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80102be:	4b23      	ldr	r3, [pc, #140]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 80102c0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d003      	beq.n	80102d0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80102c8:	4a20      	ldr	r2, [pc, #128]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80102d0:	79fb      	ldrb	r3, [r7, #7]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f004 fbf4 	bl	8014ac0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80102d8:	4b1a      	ldr	r3, [pc, #104]	; (8010344 <HandleRadioRxErrorTimeout+0x118>)
 80102da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102dc:	4618      	mov	r0, r3
 80102de:	f00c fbc7 	bl	801ca70 <UTIL_TIMER_GetElapsedTime>
 80102e2:	4602      	mov	r2, r0
 80102e4:	4b19      	ldr	r3, [pc, #100]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 80102e6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d323      	bcc.n	8010336 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 80102ee:	4818      	ldr	r0, [pc, #96]	; (8010350 <HandleRadioRxErrorTimeout+0x124>)
 80102f0:	f00c fa92 	bl	801c818 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80102f4:	4a15      	ldr	r2, [pc, #84]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 80102f6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80102fa:	f043 0320 	orr.w	r3, r3, #32
 80102fe:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8010302:	e018      	b.n	8010336 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010304:	4b11      	ldr	r3, [pc, #68]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 8010306:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801030a:	2b00      	cmp	r3, #0
 801030c:	d003      	beq.n	8010316 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801030e:	4a0f      	ldr	r2, [pc, #60]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 8010310:	79bb      	ldrb	r3, [r7, #6]
 8010312:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010316:	79bb      	ldrb	r3, [r7, #6]
 8010318:	4618      	mov	r0, r3
 801031a:	f004 fbd1 	bl	8014ac0 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801031e:	4b09      	ldr	r3, [pc, #36]	; (8010344 <HandleRadioRxErrorTimeout+0x118>)
 8010320:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010324:	2b02      	cmp	r3, #2
 8010326:	d006      	beq.n	8010336 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010328:	4a08      	ldr	r2, [pc, #32]	; (801034c <HandleRadioRxErrorTimeout+0x120>)
 801032a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801032e:	f043 0320 	orr.w	r3, r3, #32
 8010332:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8010336:	f7ff fa25 	bl	800f784 <UpdateRxSlotIdleState>
}
 801033a:	bf00      	nop
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	20000ddc 	.word	0x20000ddc
 8010348:	080206a0 	.word	0x080206a0
 801034c:	200008d0 	.word	0x200008d0
 8010350:	20000c68 	.word	0x20000c68

08010354 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010354:	b580      	push	{r7, lr}
 8010356:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010358:	2106      	movs	r1, #6
 801035a:	2005      	movs	r0, #5
 801035c:	f7ff ff66 	bl	801022c <HandleRadioRxErrorTimeout>
}
 8010360:	bf00      	nop
 8010362:	bd80      	pop	{r7, pc}

08010364 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010368:	2104      	movs	r1, #4
 801036a:	2003      	movs	r0, #3
 801036c:	f7ff ff5e 	bl	801022c <HandleRadioRxErrorTimeout>
}
 8010370:	bf00      	nop
 8010372:	bd80      	pop	{r7, pc}

08010374 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801037a:	f3ef 8310 	mrs	r3, PRIMASK
 801037e:	607b      	str	r3, [r7, #4]
  return(result);
 8010380:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010382:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010384:	b672      	cpsid	i
}
 8010386:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010388:	4b1d      	ldr	r3, [pc, #116]	; (8010400 <LoRaMacHandleIrqEvents+0x8c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801038e:	4b1c      	ldr	r3, [pc, #112]	; (8010400 <LoRaMacHandleIrqEvents+0x8c>)
 8010390:	2200      	movs	r2, #0
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	f383 8810 	msr	PRIMASK, r3
}
 801039e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d027      	beq.n	80103f6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80103a6:	783b      	ldrb	r3, [r7, #0]
 80103a8:	f003 0310 	and.w	r3, r3, #16
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d001      	beq.n	80103b6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80103b2:	f7ff f9ff 	bl	800f7b4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80103b6:	783b      	ldrb	r3, [r7, #0]
 80103b8:	f003 0308 	and.w	r3, r3, #8
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80103c2:	f7ff fab7 	bl	800f934 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80103c6:	783b      	ldrb	r3, [r7, #0]
 80103c8:	f003 0304 	and.w	r3, r3, #4
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80103d2:	f7ff feff 	bl	80101d4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80103d6:	783b      	ldrb	r3, [r7, #0]
 80103d8:	f003 0302 	and.w	r3, r3, #2
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d001      	beq.n	80103e6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 80103e2:	f7ff ffb7 	bl	8010354 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80103e6:	783b      	ldrb	r3, [r7, #0]
 80103e8:	f003 0301 	and.w	r3, r3, #1
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d001      	beq.n	80103f6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 80103f2:	f7ff ffb7 	bl	8010364 <ProcessRadioRxTimeout>
        }
    }
}
 80103f6:	bf00      	nop
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	20001c2c 	.word	0x20001c2c

08010404 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010408:	4b08      	ldr	r3, [pc, #32]	; (801042c <LoRaMacIsBusy+0x28>)
 801040a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801040e:	2b00      	cmp	r3, #0
 8010410:	d106      	bne.n	8010420 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010412:	4b06      	ldr	r3, [pc, #24]	; (801042c <LoRaMacIsBusy+0x28>)
 8010414:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010418:	2b01      	cmp	r3, #1
 801041a:	d101      	bne.n	8010420 <LoRaMacIsBusy+0x1c>
    {
        return false;
 801041c:	2300      	movs	r3, #0
 801041e:	e000      	b.n	8010422 <LoRaMacIsBusy+0x1e>
    }
    return true;
 8010420:	2301      	movs	r3, #1
}
 8010422:	4618      	mov	r0, r3
 8010424:	46bd      	mov	sp, r7
 8010426:	bc80      	pop	{r7}
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop
 801042c:	200008d0 	.word	0x200008d0

08010430 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	4603      	mov	r3, r0
 8010438:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801043a:	4a04      	ldr	r2, [pc, #16]	; (801044c <LoRaMacEnableRequests+0x1c>)
 801043c:	79fb      	ldrb	r3, [r7, #7]
 801043e:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 8010442:	bf00      	nop
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	bc80      	pop	{r7}
 801044a:	4770      	bx	lr
 801044c:	200008d0 	.word	0x200008d0

08010450 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010456:	4b2c      	ldr	r3, [pc, #176]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 8010458:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801045c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801045e:	4b2a      	ldr	r3, [pc, #168]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 8010460:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010464:	2b00      	cmp	r3, #0
 8010466:	d14a      	bne.n	80104fe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010468:	4b27      	ldr	r3, [pc, #156]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 801046a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801046e:	f003 0301 	and.w	r3, r3, #1
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b00      	cmp	r3, #0
 8010476:	d006      	beq.n	8010486 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010478:	4a23      	ldr	r2, [pc, #140]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 801047a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801047e:	f36f 0300 	bfc	r3, #0, #1
 8010482:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010486:	4b20      	ldr	r3, [pc, #128]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 8010488:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801048c:	f003 0304 	and.w	r3, r3, #4
 8010490:	b2db      	uxtb	r3, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	d006      	beq.n	80104a4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010496:	4a1c      	ldr	r2, [pc, #112]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 8010498:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801049c:	f36f 0382 	bfc	r3, #2, #1
 80104a0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80104a4:	2001      	movs	r0, #1
 80104a6:	f7ff ffc3 	bl	8010430 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80104aa:	793b      	ldrb	r3, [r7, #4]
 80104ac:	f003 0301 	and.w	r3, r3, #1
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d005      	beq.n	80104c2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80104b6:	4b14      	ldr	r3, [pc, #80]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 80104b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4813      	ldr	r0, [pc, #76]	; (801050c <LoRaMacHandleRequestEvents+0xbc>)
 80104c0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80104c2:	793b      	ldrb	r3, [r7, #4]
 80104c4:	f003 0304 	and.w	r3, r3, #4
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00e      	beq.n	80104ec <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80104ce:	4810      	ldr	r0, [pc, #64]	; (8010510 <LoRaMacHandleRequestEvents+0xc0>)
 80104d0:	f004 fb44 	bl	8014b5c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80104d4:	f004 fb8e 	bl	8014bf4 <LoRaMacConfirmQueueGetCnt>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d006      	beq.n	80104ec <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80104de:	4a0a      	ldr	r2, [pc, #40]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 80104e0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80104e4:	f043 0304 	orr.w	r3, r3, #4
 80104e8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80104ec:	f003 fe75 	bl	80141da <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80104f0:	4a05      	ldr	r2, [pc, #20]	; (8010508 <LoRaMacHandleRequestEvents+0xb8>)
 80104f2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80104f6:	f36f 1345 	bfc	r3, #5, #1
 80104fa:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 80104fe:	bf00      	nop
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	200008d0 	.word	0x200008d0
 801050c:	20000d08 	.word	0x20000d08
 8010510:	20000d1c 	.word	0x20000d1c

08010514 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801051a:	4b07      	ldr	r3, [pc, #28]	; (8010538 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 801051c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010520:	2b00      	cmp	r3, #0
 8010522:	d105      	bne.n	8010530 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8010524:	2300      	movs	r3, #0
 8010526:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010528:	1dfb      	adds	r3, r7, #7
 801052a:	4618      	mov	r0, r3
 801052c:	f004 f8fc 	bl	8014728 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 8010530:	bf00      	nop
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	200008d0 	.word	0x200008d0

0801053c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010540:	4b16      	ldr	r3, [pc, #88]	; (801059c <LoRaMacHandleIndicationEvents+0x60>)
 8010542:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010546:	f003 0308 	and.w	r3, r3, #8
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00d      	beq.n	801056c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010550:	4a12      	ldr	r2, [pc, #72]	; (801059c <LoRaMacHandleIndicationEvents+0x60>)
 8010552:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010556:	f36f 03c3 	bfc	r3, #3, #1
 801055a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801055e:	4b0f      	ldr	r3, [pc, #60]	; (801059c <LoRaMacHandleIndicationEvents+0x60>)
 8010560:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	490e      	ldr	r1, [pc, #56]	; (80105a0 <LoRaMacHandleIndicationEvents+0x64>)
 8010568:	480e      	ldr	r0, [pc, #56]	; (80105a4 <LoRaMacHandleIndicationEvents+0x68>)
 801056a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801056c:	4b0b      	ldr	r3, [pc, #44]	; (801059c <LoRaMacHandleIndicationEvents+0x60>)
 801056e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010572:	f003 0302 	and.w	r3, r3, #2
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00d      	beq.n	8010598 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801057c:	4a07      	ldr	r2, [pc, #28]	; (801059c <LoRaMacHandleIndicationEvents+0x60>)
 801057e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010582:	f36f 0341 	bfc	r3, #1, #1
 8010586:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801058a:	4b04      	ldr	r3, [pc, #16]	; (801059c <LoRaMacHandleIndicationEvents+0x60>)
 801058c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	4903      	ldr	r1, [pc, #12]	; (80105a0 <LoRaMacHandleIndicationEvents+0x64>)
 8010594:	4804      	ldr	r0, [pc, #16]	; (80105a8 <LoRaMacHandleIndicationEvents+0x6c>)
 8010596:	4798      	blx	r3
    }
}
 8010598:	bf00      	nop
 801059a:	bd80      	pop	{r7, pc}
 801059c:	200008d0 	.word	0x200008d0
 80105a0:	20000d50 	.word	0x20000d50
 80105a4:	20000d30 	.word	0x20000d30
 80105a8:	20000cec 	.word	0x20000cec

080105ac <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80105b2:	4b32      	ldr	r3, [pc, #200]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 80105b4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80105b8:	f003 0301 	and.w	r3, r3, #1
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d058      	beq.n	8010674 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 80105c2:	2300      	movs	r3, #0
 80105c4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80105c6:	2300      	movs	r3, #0
 80105c8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80105ca:	4b2c      	ldr	r3, [pc, #176]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 80105cc:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d004      	beq.n	80105de <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80105d4:	4b29      	ldr	r3, [pc, #164]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 80105d6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80105da:	2b03      	cmp	r3, #3
 80105dc:	d104      	bne.n	80105e8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80105de:	f002 f87b 	bl	80126d8 <CheckRetransUnconfirmedUplink>
 80105e2:	4603      	mov	r3, r0
 80105e4:	71fb      	strb	r3, [r7, #7]
 80105e6:	e020      	b.n	801062a <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80105e8:	4b24      	ldr	r3, [pc, #144]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 80105ea:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d11b      	bne.n	801062a <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 80105f2:	4b22      	ldr	r3, [pc, #136]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 80105f4:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d014      	beq.n	8010626 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80105fc:	f002 f898 	bl	8012730 <CheckRetransConfirmedUplink>
 8010600:	4603      	mov	r3, r0
 8010602:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010604:	4b1e      	ldr	r3, [pc, #120]	; (8010680 <LoRaMacHandleMcpsRequest+0xd4>)
 8010606:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 801060a:	2b00      	cmp	r3, #0
 801060c:	d10d      	bne.n	801062a <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	f083 0301 	eor.w	r3, r3, #1
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	d002      	beq.n	8010620 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 801061a:	f002 f905 	bl	8012828 <AckTimeoutRetriesProcess>
 801061e:	e004      	b.n	801062a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010620:	f002 f940 	bl	80128a4 <AckTimeoutRetriesFinalize>
 8010624:	e001      	b.n	801062a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8010626:	2301      	movs	r3, #1
 8010628:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00d      	beq.n	801064c <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010630:	4814      	ldr	r0, [pc, #80]	; (8010684 <LoRaMacHandleMcpsRequest+0xd8>)
 8010632:	f00c f8f1 	bl	801c818 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010636:	4b11      	ldr	r3, [pc, #68]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 8010638:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801063c:	f023 0320 	bic.w	r3, r3, #32
 8010640:	4a0e      	ldr	r2, [pc, #56]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 8010642:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8010646:	f002 f895 	bl	8012774 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801064a:	e013      	b.n	8010674 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 801064c:	79bb      	ldrb	r3, [r7, #6]
 801064e:	f083 0301 	eor.w	r3, r3, #1
 8010652:	b2db      	uxtb	r3, r3
 8010654:	2b00      	cmp	r3, #0
 8010656:	d00d      	beq.n	8010674 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010658:	4a08      	ldr	r2, [pc, #32]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 801065a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801065e:	f36f 1345 	bfc	r3, #5, #1
 8010662:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8010666:	4b05      	ldr	r3, [pc, #20]	; (801067c <LoRaMacHandleMcpsRequest+0xd0>)
 8010668:	2200      	movs	r2, #0
 801066a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 801066e:	2000      	movs	r0, #0
 8010670:	f000 f994 	bl	801099c <OnTxDelayedTimerEvent>
}
 8010674:	bf00      	nop
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	200008d0 	.word	0x200008d0
 8010680:	20000ddc 	.word	0x20000ddc
 8010684:	20000c38 	.word	0x20000c38

08010688 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801068c:	4b1b      	ldr	r3, [pc, #108]	; (80106fc <LoRaMacHandleMlmeRequest+0x74>)
 801068e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010692:	f003 0304 	and.w	r3, r3, #4
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b00      	cmp	r3, #0
 801069a:	d02c      	beq.n	80106f6 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801069c:	2001      	movs	r0, #1
 801069e:	f004 fa43 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d012      	beq.n	80106ce <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80106a8:	2001      	movs	r0, #1
 80106aa:	f004 f9df 	bl	8014a6c <LoRaMacConfirmQueueGetStatus>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d103      	bne.n	80106bc <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80106b4:	4b11      	ldr	r3, [pc, #68]	; (80106fc <LoRaMacHandleMlmeRequest+0x74>)
 80106b6:	2200      	movs	r2, #0
 80106b8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80106bc:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <LoRaMacHandleMlmeRequest+0x74>)
 80106be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106c2:	f023 0302 	bic.w	r3, r3, #2
 80106c6:	4a0d      	ldr	r2, [pc, #52]	; (80106fc <LoRaMacHandleMlmeRequest+0x74>)
 80106c8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 80106cc:	e013      	b.n	80106f6 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80106ce:	2005      	movs	r0, #5
 80106d0:	f004 fa2a 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d105      	bne.n	80106e6 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80106da:	2006      	movs	r0, #6
 80106dc:	f004 fa24 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 80106e0:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d007      	beq.n	80106f6 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80106e6:	4b05      	ldr	r3, [pc, #20]	; (80106fc <LoRaMacHandleMlmeRequest+0x74>)
 80106e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106ec:	f023 0302 	bic.w	r3, r3, #2
 80106f0:	4a02      	ldr	r2, [pc, #8]	; (80106fc <LoRaMacHandleMlmeRequest+0x74>)
 80106f2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80106f6:	bf00      	nop
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	200008d0 	.word	0x200008d0

08010700 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010704:	200c      	movs	r0, #12
 8010706:	f004 fa0f 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d019      	beq.n	8010744 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010710:	4b0e      	ldr	r3, [pc, #56]	; (801074c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010712:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801071c:	2b00      	cmp	r3, #0
 801071e:	d111      	bne.n	8010744 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010720:	4b0a      	ldr	r3, [pc, #40]	; (801074c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010722:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010726:	f003 0304 	and.w	r3, r3, #4
 801072a:	b2db      	uxtb	r3, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	d009      	beq.n	8010744 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010730:	4b06      	ldr	r3, [pc, #24]	; (801074c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010732:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010736:	f023 0302 	bic.w	r3, r3, #2
 801073a:	4a04      	ldr	r2, [pc, #16]	; (801074c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801073c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8010740:	2301      	movs	r3, #1
 8010742:	e000      	b.n	8010746 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	200008d0 	.word	0x200008d0

08010750 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010754:	4b0d      	ldr	r3, [pc, #52]	; (801078c <LoRaMacCheckForRxAbort+0x3c>)
 8010756:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00f      	beq.n	8010782 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010762:	4b0a      	ldr	r3, [pc, #40]	; (801078c <LoRaMacCheckForRxAbort+0x3c>)
 8010764:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801076c:	4a07      	ldr	r2, [pc, #28]	; (801078c <LoRaMacCheckForRxAbort+0x3c>)
 801076e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010772:	4b06      	ldr	r3, [pc, #24]	; (801078c <LoRaMacCheckForRxAbort+0x3c>)
 8010774:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010778:	f023 0302 	bic.w	r3, r3, #2
 801077c:	4a03      	ldr	r2, [pc, #12]	; (801078c <LoRaMacCheckForRxAbort+0x3c>)
 801077e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8010782:	bf00      	nop
 8010784:	46bd      	mov	sp, r7
 8010786:	bc80      	pop	{r7}
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	200008d0 	.word	0x200008d0

08010790 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010798:	2300      	movs	r3, #0
 801079a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 801079c:	2300      	movs	r3, #0
 801079e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80107a0:	4b50      	ldr	r3, [pc, #320]	; (80108e4 <LoRaMacHandleNvm+0x154>)
 80107a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f040 8098 	bne.w	80108dc <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2124      	movs	r1, #36	; 0x24
 80107b0:	4618      	mov	r0, r3
 80107b2:	f007 ff73 	bl	801869c <Crc32>
 80107b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d006      	beq.n	80107d0 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80107c8:	89fb      	ldrh	r3, [r7, #14]
 80107ca:	f043 0301 	orr.w	r3, r3, #1
 80107ce:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	3328      	adds	r3, #40	; 0x28
 80107d4:	2114      	movs	r1, #20
 80107d6:	4618      	mov	r0, r3
 80107d8:	f007 ff60 	bl	801869c <Crc32>
 80107dc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d006      	beq.n	80107f6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	68ba      	ldr	r2, [r7, #8]
 80107ec:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80107ee:	89fb      	ldrh	r3, [r7, #14]
 80107f0:	f043 0302 	orr.w	r3, r3, #2
 80107f4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	3340      	adds	r3, #64	; 0x40
 80107fa:	21dc      	movs	r1, #220	; 0xdc
 80107fc:	4618      	mov	r0, r3
 80107fe:	f007 ff4d 	bl	801869c <Crc32>
 8010802:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	429a      	cmp	r2, r3
 801080e:	d007      	beq.n	8010820 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	68ba      	ldr	r2, [r7, #8]
 8010814:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010818:	89fb      	ldrh	r3, [r7, #14]
 801081a:	f043 0304 	orr.w	r3, r3, #4
 801081e:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010826:	21bc      	movs	r1, #188	; 0xbc
 8010828:	4618      	mov	r0, r3
 801082a:	f007 ff37 	bl	801869c <Crc32>
 801082e:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	429a      	cmp	r2, r3
 801083a:	d007      	beq.n	801084c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	68ba      	ldr	r2, [r7, #8]
 8010840:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010844:	89fb      	ldrh	r3, [r7, #14]
 8010846:	f043 0308 	orr.w	r3, r3, #8
 801084a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8010852:	2190      	movs	r1, #144	; 0x90
 8010854:	4618      	mov	r0, r3
 8010856:	f007 ff21 	bl	801869c <Crc32>
 801085a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010862:	68ba      	ldr	r2, [r7, #8]
 8010864:	429a      	cmp	r2, r3
 8010866:	d007      	beq.n	8010878 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010870:	89fb      	ldrh	r3, [r7, #14]
 8010872:	f043 0310 	orr.w	r3, r3, #16
 8010876:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801087e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8010882:	4618      	mov	r0, r3
 8010884:	f007 ff0a 	bl	801869c <Crc32>
 8010888:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	429a      	cmp	r2, r3
 8010894:	d007      	beq.n	80108a6 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801089e:	89fb      	ldrh	r3, [r7, #14]
 80108a0:	f043 0320 	orr.w	r3, r3, #32
 80108a4:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 80108ac:	2114      	movs	r1, #20
 80108ae:	4618      	mov	r0, r3
 80108b0:	f007 fef4 	bl	801869c <Crc32>
 80108b4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d007      	beq.n	80108d2 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	68ba      	ldr	r2, [r7, #8]
 80108c6:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80108ca:	89fb      	ldrh	r3, [r7, #14]
 80108cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108d0:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80108d2:	89fb      	ldrh	r3, [r7, #14]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f001 ff89 	bl	80127ec <CallNvmDataChangeCallback>
 80108da:	e000      	b.n	80108de <LoRaMacHandleNvm+0x14e>
        return;
 80108dc:	bf00      	nop
}
 80108de:	3710      	adds	r7, #16
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	200008d0 	.word	0x200008d0

080108e8 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80108ee:	2300      	movs	r3, #0
 80108f0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80108f2:	f7ff fd3f 	bl	8010374 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80108f6:	f003 fcd4 	bl	80142a2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80108fa:	4b26      	ldr	r3, [pc, #152]	; (8010994 <LoRaMacProcess+0xac>)
 80108fc:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010900:	f003 0320 	and.w	r3, r3, #32
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d025      	beq.n	8010956 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801090a:	2000      	movs	r0, #0
 801090c:	f7ff fd90 	bl	8010430 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010910:	f7ff ff1e 	bl	8010750 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010914:	f001 fffa 	bl	801290c <IsRequestPending>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d006      	beq.n	801092c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801091e:	f7ff feef 	bl	8010700 <LoRaMacCheckForBeaconAcquisition>
 8010922:	4603      	mov	r3, r0
 8010924:	461a      	mov	r2, r3
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	4313      	orrs	r3, r2
 801092a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 801092c:	79fb      	ldrb	r3, [r7, #7]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d103      	bne.n	801093a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010932:	f7ff fea9 	bl	8010688 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010936:	f7ff fe39 	bl	80105ac <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801093a:	f7ff fd89 	bl	8010450 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 801093e:	f7ff fde9 	bl	8010514 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010942:	2001      	movs	r0, #1
 8010944:	f7ff fd74 	bl	8010430 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010948:	4a12      	ldr	r2, [pc, #72]	; (8010994 <LoRaMacProcess+0xac>)
 801094a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010952:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 8010956:	f7ff fdf1 	bl	801053c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801095a:	4b0e      	ldr	r3, [pc, #56]	; (8010994 <LoRaMacProcess+0xac>)
 801095c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8010960:	2b02      	cmp	r3, #2
 8010962:	d101      	bne.n	8010968 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 8010964:	f001 fb7e 	bl	8012064 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010968:	4b0a      	ldr	r3, [pc, #40]	; (8010994 <LoRaMacProcess+0xac>)
 801096a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801096e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010972:	b2db      	uxtb	r3, r3
 8010974:	2b00      	cmp	r3, #0
 8010976:	d009      	beq.n	801098c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010978:	4a06      	ldr	r2, [pc, #24]	; (8010994 <LoRaMacProcess+0xac>)
 801097a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801097e:	f36f 1386 	bfc	r3, #6, #1
 8010982:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8010986:	4804      	ldr	r0, [pc, #16]	; (8010998 <LoRaMacProcess+0xb0>)
 8010988:	f7ff ff02 	bl	8010790 <LoRaMacHandleNvm>
    }
}
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	200008d0 	.word	0x200008d0
 8010998:	20000ddc 	.word	0x20000ddc

0801099c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80109a4:	4817      	ldr	r0, [pc, #92]	; (8010a04 <OnTxDelayedTimerEvent+0x68>)
 80109a6:	f00b ff37 	bl	801c818 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80109aa:	4b17      	ldr	r3, [pc, #92]	; (8010a08 <OnTxDelayedTimerEvent+0x6c>)
 80109ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109b0:	f023 0320 	bic.w	r3, r3, #32
 80109b4:	4a14      	ldr	r2, [pc, #80]	; (8010a08 <OnTxDelayedTimerEvent+0x6c>)
 80109b6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80109ba:	2001      	movs	r0, #1
 80109bc:	f001 f8e6 	bl	8011b8c <ScheduleTx>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d018      	beq.n	80109f8 <OnTxDelayedTimerEvent+0x5c>
 80109c6:	2b0b      	cmp	r3, #11
 80109c8:	d016      	beq.n	80109f8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80109ca:	4b10      	ldr	r3, [pc, #64]	; (8010a0c <OnTxDelayedTimerEvent+0x70>)
 80109cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	4b0d      	ldr	r3, [pc, #52]	; (8010a08 <OnTxDelayedTimerEvent+0x6c>)
 80109d4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80109d8:	4b0b      	ldr	r3, [pc, #44]	; (8010a08 <OnTxDelayedTimerEvent+0x6c>)
 80109da:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80109de:	4b0a      	ldr	r3, [pc, #40]	; (8010a08 <OnTxDelayedTimerEvent+0x6c>)
 80109e0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80109e4:	4b08      	ldr	r3, [pc, #32]	; (8010a08 <OnTxDelayedTimerEvent+0x6c>)
 80109e6:	2209      	movs	r2, #9
 80109e8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80109ec:	2009      	movs	r0, #9
 80109ee:	f004 f867 	bl	8014ac0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80109f2:	f001 febf 	bl	8012774 <StopRetransmission>
            break;
 80109f6:	e000      	b.n	80109fa <OnTxDelayedTimerEvent+0x5e>
            break;
 80109f8:	bf00      	nop
        }
    }
}
 80109fa:	bf00      	nop
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20000c38 	.word	0x20000c38
 8010a08:	200008d0 	.word	0x200008d0
 8010a0c:	20000ddc 	.word	0x20000ddc

08010a10 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010a18:	4b14      	ldr	r3, [pc, #80]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a1a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010a1e:	4b13      	ldr	r3, [pc, #76]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a20:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010a24:	4b12      	ldr	r3, [pc, #72]	; (8010a70 <OnRxWindow1TimerEvent+0x60>)
 8010a26:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010a2a:	b25a      	sxtb	r2, r3
 8010a2c:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a2e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a32:	4b0f      	ldr	r3, [pc, #60]	; (8010a70 <OnRxWindow1TimerEvent+0x60>)
 8010a34:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010a38:	4b0c      	ldr	r3, [pc, #48]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a3a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010a3e:	4b0c      	ldr	r3, [pc, #48]	; (8010a70 <OnRxWindow1TimerEvent+0x60>)
 8010a40:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010a44:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a46:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010a4a:	4b08      	ldr	r3, [pc, #32]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010a52:	4b06      	ldr	r3, [pc, #24]	; (8010a6c <OnRxWindow1TimerEvent+0x5c>)
 8010a54:	2200      	movs	r2, #0
 8010a56:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010a5a:	4906      	ldr	r1, [pc, #24]	; (8010a74 <OnRxWindow1TimerEvent+0x64>)
 8010a5c:	4806      	ldr	r0, [pc, #24]	; (8010a78 <OnRxWindow1TimerEvent+0x68>)
 8010a5e:	f001 facd 	bl	8011ffc <RxWindowSetup>
}
 8010a62:	bf00      	nop
 8010a64:	3708      	adds	r7, #8
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	200008d0 	.word	0x200008d0
 8010a70:	20000ddc 	.word	0x20000ddc
 8010a74:	20000c88 	.word	0x20000c88
 8010a78:	20000c50 	.word	0x20000c50

08010a7c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010a84:	4b16      	ldr	r3, [pc, #88]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010a86:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d023      	beq.n	8010ad6 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010a8e:	4b14      	ldr	r3, [pc, #80]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010a90:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010a94:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010a96:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010a9a:	4b12      	ldr	r3, [pc, #72]	; (8010ae4 <OnRxWindow2TimerEvent+0x68>)
 8010a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a9e:	4a10      	ldr	r2, [pc, #64]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010aa0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010aa4:	4b0f      	ldr	r3, [pc, #60]	; (8010ae4 <OnRxWindow2TimerEvent+0x68>)
 8010aa6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010aaa:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010aac:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010ab0:	4b0c      	ldr	r3, [pc, #48]	; (8010ae4 <OnRxWindow2TimerEvent+0x68>)
 8010ab2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010ab6:	4b0a      	ldr	r3, [pc, #40]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010ab8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010abc:	4b08      	ldr	r3, [pc, #32]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010ac4:	4b06      	ldr	r3, [pc, #24]	; (8010ae0 <OnRxWindow2TimerEvent+0x64>)
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010acc:	4906      	ldr	r1, [pc, #24]	; (8010ae8 <OnRxWindow2TimerEvent+0x6c>)
 8010ace:	4807      	ldr	r0, [pc, #28]	; (8010aec <OnRxWindow2TimerEvent+0x70>)
 8010ad0:	f001 fa94 	bl	8011ffc <RxWindowSetup>
 8010ad4:	e000      	b.n	8010ad8 <OnRxWindow2TimerEvent+0x5c>
        return;
 8010ad6:	bf00      	nop
}
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	200008d0 	.word	0x200008d0
 8010ae4:	20000ddc 	.word	0x20000ddc
 8010ae8:	20000c9c 	.word	0x20000c9c
 8010aec:	20000c68 	.word	0x20000c68

08010af0 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010af8:	4815      	ldr	r0, [pc, #84]	; (8010b50 <OnAckTimeoutTimerEvent+0x60>)
 8010afa:	f00b fe8d 	bl	801c818 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010afe:	4b15      	ldr	r3, [pc, #84]	; (8010b54 <OnAckTimeoutTimerEvent+0x64>)
 8010b00:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d003      	beq.n	8010b10 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8010b08:	4b12      	ldr	r3, [pc, #72]	; (8010b54 <OnAckTimeoutTimerEvent+0x64>)
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010b10:	4b11      	ldr	r3, [pc, #68]	; (8010b58 <OnAckTimeoutTimerEvent+0x68>)
 8010b12:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010b16:	2b02      	cmp	r3, #2
 8010b18:	d106      	bne.n	8010b28 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010b1a:	4a0e      	ldr	r2, [pc, #56]	; (8010b54 <OnAckTimeoutTimerEvent+0x64>)
 8010b1c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010b20:	f043 0320 	orr.w	r3, r3, #32
 8010b24:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010b28:	4b0a      	ldr	r3, [pc, #40]	; (8010b54 <OnAckTimeoutTimerEvent+0x64>)
 8010b2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00a      	beq.n	8010b48 <OnAckTimeoutTimerEvent+0x58>
 8010b32:	4b08      	ldr	r3, [pc, #32]	; (8010b54 <OnAckTimeoutTimerEvent+0x64>)
 8010b34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d004      	beq.n	8010b48 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010b3e:	4b05      	ldr	r3, [pc, #20]	; (8010b54 <OnAckTimeoutTimerEvent+0x64>)
 8010b40:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	4798      	blx	r3
    }
}
 8010b48:	bf00      	nop
 8010b4a:	3708      	adds	r7, #8
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	20000cc8 	.word	0x20000cc8
 8010b54:	200008d0 	.word	0x200008d0
 8010b58:	20000ddc 	.word	0x20000ddc

08010b5c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60ba      	str	r2, [r7, #8]
 8010b64:	607b      	str	r3, [r7, #4]
 8010b66:	4603      	mov	r3, r0
 8010b68:	73fb      	strb	r3, [r7, #15]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d005      	beq.n	8010b80 <GetFCntDown+0x24>
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d002      	beq.n	8010b80 <GetFCntDown+0x24>
 8010b7a:	6a3b      	ldr	r3, [r7, #32]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010b80:	230a      	movs	r3, #10
 8010b82:	e029      	b.n	8010bd8 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010b84:	7bfb      	ldrb	r3, [r7, #15]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d016      	beq.n	8010bb8 <GetFCntDown+0x5c>
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d118      	bne.n	8010bc0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010b8e:	79bb      	ldrb	r3, [r7, #6]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d10d      	bne.n	8010bb0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010b94:	7bbb      	ldrb	r3, [r7, #14]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d002      	beq.n	8010ba0 <GetFCntDown+0x44>
 8010b9a:	7bbb      	ldrb	r3, [r7, #14]
 8010b9c:	2b03      	cmp	r3, #3
 8010b9e:	d103      	bne.n	8010ba8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	2202      	movs	r2, #2
 8010ba4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010ba6:	e00d      	b.n	8010bc4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	2201      	movs	r2, #1
 8010bac:	701a      	strb	r2, [r3, #0]
            break;
 8010bae:	e009      	b.n	8010bc4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	2203      	movs	r2, #3
 8010bb4:	701a      	strb	r2, [r3, #0]
            break;
 8010bb6:	e005      	b.n	8010bc4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	2204      	movs	r2, #4
 8010bbc:	701a      	strb	r2, [r3, #0]
            break;
 8010bbe:	e001      	b.n	8010bc4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010bc0:	2305      	movs	r3, #5
 8010bc2:	e009      	b.n	8010bd8 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	7818      	ldrb	r0, [r3, #0]
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	89db      	ldrh	r3, [r3, #14]
 8010bcc:	461a      	mov	r2, r3
 8010bce:	8b39      	ldrh	r1, [r7, #24]
 8010bd0:	6a3b      	ldr	r3, [r7, #32]
 8010bd2:	f004 fb9f 	bl	8015314 <LoRaMacCryptoGetFCntDown>
 8010bd6:	4603      	mov	r3, r0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010be0:	b5b0      	push	{r4, r5, r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bea:	2303      	movs	r3, #3
 8010bec:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010bee:	4b61      	ldr	r3, [pc, #388]	; (8010d74 <SwitchClass+0x194>)
 8010bf0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	f000 80a5 	beq.w	8010d44 <SwitchClass+0x164>
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	f300 80b4 	bgt.w	8010d68 <SwitchClass+0x188>
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d003      	beq.n	8010c0c <SwitchClass+0x2c>
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	f000 808f 	beq.w	8010d28 <SwitchClass+0x148>
 8010c0a:	e0ad      	b.n	8010d68 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010c0c:	79fb      	ldrb	r3, [r7, #7]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d107      	bne.n	8010c22 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010c12:	4b58      	ldr	r3, [pc, #352]	; (8010d74 <SwitchClass+0x194>)
 8010c14:	4a57      	ldr	r2, [pc, #348]	; (8010d74 <SwitchClass+0x194>)
 8010c16:	336c      	adds	r3, #108	; 0x6c
 8010c18:	3264      	adds	r2, #100	; 0x64
 8010c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c1e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010c22:	79fb      	ldrb	r3, [r7, #7]
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d10c      	bne.n	8010c42 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010c28:	79fb      	ldrb	r3, [r7, #7]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f003 fadb 	bl	80141e6 <LoRaMacClassBSwitchClass>
 8010c30:	4603      	mov	r3, r0
 8010c32:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010c3a:	4a4e      	ldr	r2, [pc, #312]	; (8010d74 <SwitchClass+0x194>)
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8010c42:	79fb      	ldrb	r3, [r7, #7]
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	f040 808a 	bne.w	8010d5e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010c4a:	4a4a      	ldr	r2, [pc, #296]	; (8010d74 <SwitchClass+0x194>)
 8010c4c:	79fb      	ldrb	r3, [r7, #7]
 8010c4e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010c52:	4a49      	ldr	r2, [pc, #292]	; (8010d78 <SwitchClass+0x198>)
 8010c54:	4b48      	ldr	r3, [pc, #288]	; (8010d78 <SwitchClass+0x198>)
 8010c56:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8010c5a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8010c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c62:	682b      	ldr	r3, [r5, #0]
 8010c64:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010c66:	4b44      	ldr	r3, [pc, #272]	; (8010d78 <SwitchClass+0x198>)
 8010c68:	2202      	movs	r2, #2
 8010c6a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010c6e:	2300      	movs	r3, #0
 8010c70:	73bb      	strb	r3, [r7, #14]
 8010c72:	e049      	b.n	8010d08 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c78:	4a3e      	ldr	r2, [pc, #248]	; (8010d74 <SwitchClass+0x194>)
 8010c7a:	212c      	movs	r1, #44	; 0x2c
 8010c7c:	fb01 f303 	mul.w	r3, r1, r3
 8010c80:	4413      	add	r3, r2
 8010c82:	33da      	adds	r3, #218	; 0xda
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d038      	beq.n	8010cfc <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c8e:	4a39      	ldr	r2, [pc, #228]	; (8010d74 <SwitchClass+0x194>)
 8010c90:	212c      	movs	r1, #44	; 0x2c
 8010c92:	fb01 f303 	mul.w	r3, r1, r3
 8010c96:	4413      	add	r3, r2
 8010c98:	33f0      	adds	r3, #240	; 0xf0
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a35      	ldr	r2, [pc, #212]	; (8010d74 <SwitchClass+0x194>)
 8010c9e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ca4:	4a33      	ldr	r2, [pc, #204]	; (8010d74 <SwitchClass+0x194>)
 8010ca6:	212c      	movs	r1, #44	; 0x2c
 8010ca8:	fb01 f303 	mul.w	r3, r1, r3
 8010cac:	4413      	add	r3, r2
 8010cae:	33f4      	adds	r3, #244	; 0xf4
 8010cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <SwitchClass+0x194>)
 8010cb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010cbc:	4b2e      	ldr	r3, [pc, #184]	; (8010d78 <SwitchClass+0x198>)
 8010cbe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010cc2:	4b2d      	ldr	r3, [pc, #180]	; (8010d78 <SwitchClass+0x198>)
 8010cc4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010cc8:	4b2a      	ldr	r3, [pc, #168]	; (8010d74 <SwitchClass+0x194>)
 8010cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ccc:	4a2a      	ldr	r2, [pc, #168]	; (8010d78 <SwitchClass+0x198>)
 8010cce:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010cd2:	4b28      	ldr	r3, [pc, #160]	; (8010d74 <SwitchClass+0x194>)
 8010cd4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010cd8:	4b27      	ldr	r3, [pc, #156]	; (8010d78 <SwitchClass+0x198>)
 8010cda:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010cde:	4b25      	ldr	r3, [pc, #148]	; (8010d74 <SwitchClass+0x194>)
 8010ce0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010ce4:	4b24      	ldr	r3, [pc, #144]	; (8010d78 <SwitchClass+0x198>)
 8010ce6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010cea:	4b23      	ldr	r3, [pc, #140]	; (8010d78 <SwitchClass+0x198>)
 8010cec:	2203      	movs	r2, #3
 8010cee:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010cf2:	4b21      	ldr	r3, [pc, #132]	; (8010d78 <SwitchClass+0x198>)
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8010cfa:	e009      	b.n	8010d10 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	3301      	adds	r3, #1
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	73bb      	strb	r3, [r7, #14]
 8010d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	ddb1      	ble.n	8010c74 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010d10:	4b19      	ldr	r3, [pc, #100]	; (8010d78 <SwitchClass+0x198>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010d18:	4b18      	ldr	r3, [pc, #96]	; (8010d7c <SwitchClass+0x19c>)
 8010d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010d1e:	f001 f9a1 	bl	8012064 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010d26:	e01a      	b.n	8010d5e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f003 fa5b 	bl	80141e6 <LoRaMacClassBSwitchClass>
 8010d30:	4603      	mov	r3, r0
 8010d32:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d113      	bne.n	8010d62 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010d3a:	4a0e      	ldr	r2, [pc, #56]	; (8010d74 <SwitchClass+0x194>)
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8010d42:	e00e      	b.n	8010d62 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010d44:	79fb      	ldrb	r3, [r7, #7]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10d      	bne.n	8010d66 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010d4a:	4a0a      	ldr	r2, [pc, #40]	; (8010d74 <SwitchClass+0x194>)
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010d52:	4b0a      	ldr	r3, [pc, #40]	; (8010d7c <SwitchClass+0x19c>)
 8010d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d56:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010d5c:	e003      	b.n	8010d66 <SwitchClass+0x186>
            break;
 8010d5e:	bf00      	nop
 8010d60:	e002      	b.n	8010d68 <SwitchClass+0x188>
            break;
 8010d62:	bf00      	nop
 8010d64:	e000      	b.n	8010d68 <SwitchClass+0x188>
            break;
 8010d66:	bf00      	nop
        }
    }

    return status;
 8010d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bdb0      	pop	{r4, r5, r7, pc}
 8010d72:	bf00      	nop
 8010d74:	20000ddc 	.word	0x20000ddc
 8010d78:	200008d0 	.word	0x200008d0
 8010d7c:	080206a0 	.word	0x080206a0

08010d80 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	4603      	mov	r3, r0
 8010d88:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010d8a:	4b10      	ldr	r3, [pc, #64]	; (8010dcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010d8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010d90:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010d92:	79fb      	ldrb	r3, [r7, #7]
 8010d94:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010d96:	230d      	movs	r3, #13
 8010d98:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010d9a:	4b0c      	ldr	r3, [pc, #48]	; (8010dcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010d9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d001      	beq.n	8010da8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010da4:	230e      	movs	r3, #14
 8010da6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010da8:	4b08      	ldr	r3, [pc, #32]	; (8010dcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dae:	f107 0210 	add.w	r2, r7, #16
 8010db2:	4611      	mov	r1, r2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f005 f93b 	bl	8016030 <RegionGetPhyParam>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	b2db      	uxtb	r3, r3
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	20000ddc 	.word	0x20000ddc

08010dd0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	71fb      	strb	r3, [r7, #7]
 8010dda:	460b      	mov	r3, r1
 8010ddc:	71bb      	strb	r3, [r7, #6]
 8010dde:	4613      	mov	r3, r2
 8010de0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010de2:	2300      	movs	r3, #0
 8010de4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010dea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7ff ffc6 	bl	8010d80 <GetMaxAppPayloadWithoutFOptsLength>
 8010df4:	4603      	mov	r3, r0
 8010df6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010df8:	79fb      	ldrb	r3, [r7, #7]
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	797b      	ldrb	r3, [r7, #5]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	4413      	add	r3, r2
 8010e02:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010e04:	89ba      	ldrh	r2, [r7, #12]
 8010e06:	89fb      	ldrh	r3, [r7, #14]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d804      	bhi.n	8010e16 <ValidatePayloadLength+0x46>
 8010e0c:	89bb      	ldrh	r3, [r7, #12]
 8010e0e:	2bff      	cmp	r3, #255	; 0xff
 8010e10:	d801      	bhi.n	8010e16 <ValidatePayloadLength+0x46>
    {
        return true;
 8010e12:	2301      	movs	r3, #1
 8010e14:	e000      	b.n	8010e18 <ValidatePayloadLength+0x48>
    }
    return false;
 8010e16:	2300      	movs	r3, #0
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010e20:	b590      	push	{r4, r7, lr}
 8010e22:	b0a5      	sub	sp, #148	; 0x94
 8010e24:	af02      	add	r7, sp, #8
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	4608      	mov	r0, r1
 8010e2a:	4611      	mov	r1, r2
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	4603      	mov	r3, r0
 8010e30:	70fb      	strb	r3, [r7, #3]
 8010e32:	460b      	mov	r3, r1
 8010e34:	70bb      	strb	r3, [r7, #2]
 8010e36:	4613      	mov	r3, r2
 8010e38:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010e40:	2300      	movs	r3, #0
 8010e42:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010e46:	2300      	movs	r3, #0
 8010e48:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010e4c:	f000 bc6d 	b.w	801172a <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010e50:	78fb      	ldrb	r3, [r7, #3]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	4413      	add	r3, r2
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f003 fc8d 	bl	8014778 <LoRaMacCommandsGetCmdSize>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	461a      	mov	r2, r3
 8010e62:	78fb      	ldrb	r3, [r7, #3]
 8010e64:	441a      	add	r2, r3
 8010e66:	78bb      	ldrb	r3, [r7, #2]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	f300 8464 	bgt.w	8011736 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010e6e:	78fb      	ldrb	r3, [r7, #3]
 8010e70:	1c5a      	adds	r2, r3, #1
 8010e72:	70fa      	strb	r2, [r7, #3]
 8010e74:	461a      	mov	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4413      	add	r3, r2
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	3b02      	subs	r3, #2
 8010e7e:	2b11      	cmp	r3, #17
 8010e80:	f200 845b 	bhi.w	801173a <ProcessMacCommands+0x91a>
 8010e84:	a201      	add	r2, pc, #4	; (adr r2, 8010e8c <ProcessMacCommands+0x6c>)
 8010e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e8a:	bf00      	nop
 8010e8c:	08010ed5 	.word	0x08010ed5
 8010e90:	08010f17 	.word	0x08010f17
 8010e94:	08011033 	.word	0x08011033
 8010e98:	08011071 	.word	0x08011071
 8010e9c:	0801115d 	.word	0x0801115d
 8010ea0:	080111b9 	.word	0x080111b9
 8010ea4:	08011275 	.word	0x08011275
 8010ea8:	080112cb 	.word	0x080112cb
 8010eac:	080113af 	.word	0x080113af
 8010eb0:	0801173b 	.word	0x0801173b
 8010eb4:	0801173b 	.word	0x0801173b
 8010eb8:	08011455 	.word	0x08011455
 8010ebc:	0801173b 	.word	0x0801173b
 8010ec0:	0801173b 	.word	0x0801173b
 8010ec4:	0801156b 	.word	0x0801156b
 8010ec8:	0801159f 	.word	0x0801159f
 8010ecc:	0801162f 	.word	0x0801162f
 8010ed0:	080116a5 	.word	0x080116a5
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010ed4:	2004      	movs	r0, #4
 8010ed6:	f003 fe27 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f000 8424 	beq.w	801172a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010ee2:	2104      	movs	r1, #4
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	f003 fd93 	bl	8014a10 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010eea:	78fb      	ldrb	r3, [r7, #3]
 8010eec:	1c5a      	adds	r2, r3, #1
 8010eee:	70fa      	strb	r2, [r7, #3]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	781a      	ldrb	r2, [r3, #0]
 8010ef8:	4bac      	ldr	r3, [pc, #688]	; (80111ac <ProcessMacCommands+0x38c>)
 8010efa:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010efe:	78fb      	ldrb	r3, [r7, #3]
 8010f00:	1c5a      	adds	r2, r3, #1
 8010f02:	70fa      	strb	r2, [r7, #3]
 8010f04:	461a      	mov	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4413      	add	r3, r2
 8010f0a:	781a      	ldrb	r2, [r3, #0]
 8010f0c:	4ba7      	ldr	r3, [pc, #668]	; (80111ac <ProcessMacCommands+0x38c>)
 8010f0e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8010f12:	f000 bc0a 	b.w	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8010f2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010f32:	f083 0301 	eor.w	r3, r3, #1
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d078      	beq.n	801102e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010f42:	78fb      	ldrb	r3, [r7, #3]
 8010f44:	3b01      	subs	r3, #1
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	4413      	add	r3, r2
 8010f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010f4c:	78ba      	ldrb	r2, [r7, #2]
 8010f4e:	78fb      	ldrb	r3, [r7, #3]
 8010f50:	1ad3      	subs	r3, r2, r3
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	3301      	adds	r3, #1
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010f5c:	4b94      	ldr	r3, [pc, #592]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f5e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010f62:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f66:	4b92      	ldr	r3, [pc, #584]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010f6c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010f70:	4b8f      	ldr	r3, [pc, #572]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f72:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f76:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010f7a:	4b8d      	ldr	r3, [pc, #564]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f7c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010f80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010f84:	4b8a      	ldr	r3, [pc, #552]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010f8a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010f8e:	4b88      	ldr	r3, [pc, #544]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010f94:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010f96:	4b86      	ldr	r3, [pc, #536]	; (80111b0 <ProcessMacCommands+0x390>)
 8010f98:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f9c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8010fa0:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8010fa4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010fac:	9301      	str	r3, [sp, #4]
 8010fae:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	4623      	mov	r3, r4
 8010fb6:	f005 f8f8 	bl	80161aa <RegionLinkAdrReq>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010fc0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010fc4:	f003 0307 	and.w	r3, r3, #7
 8010fc8:	2b07      	cmp	r3, #7
 8010fca:	d10e      	bne.n	8010fea <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010fcc:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8010fd0:	4b77      	ldr	r3, [pc, #476]	; (80111b0 <ProcessMacCommands+0x390>)
 8010fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010fd6:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8010fda:	4b75      	ldr	r3, [pc, #468]	; (80111b0 <ProcessMacCommands+0x390>)
 8010fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010fe0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010fe4:	4b72      	ldr	r3, [pc, #456]	; (80111b0 <ProcessMacCommands+0x390>)
 8010fe6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010fea:	2300      	movs	r3, #0
 8010fec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010ff0:	e00b      	b.n	801100a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010ff2:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	2003      	movs	r0, #3
 8010ffc:	f003 fa6c 	bl	80144d8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011000:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011004:	3301      	adds	r3, #1
 8011006:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801100a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801100e:	4a69      	ldr	r2, [pc, #420]	; (80111b4 <ProcessMacCommands+0x394>)
 8011010:	fba2 2303 	umull	r2, r3, r2, r3
 8011014:	089b      	lsrs	r3, r3, #2
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801101c:	429a      	cmp	r2, r3
 801101e:	d3e8      	bcc.n	8010ff2 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8011020:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8011024:	78fb      	ldrb	r3, [r7, #3]
 8011026:	4413      	add	r3, r2
 8011028:	b2db      	uxtb	r3, r3
 801102a:	3b01      	subs	r3, #1
 801102c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801102e:	bf00      	nop
 8011030:	e37b      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8011032:	78fb      	ldrb	r3, [r7, #3]
 8011034:	1c5a      	adds	r2, r3, #1
 8011036:	70fa      	strb	r2, [r7, #3]
 8011038:	461a      	mov	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4413      	add	r3, r2
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	f003 030f 	and.w	r3, r3, #15
 8011044:	b2da      	uxtb	r2, r3
 8011046:	4b5a      	ldr	r3, [pc, #360]	; (80111b0 <ProcessMacCommands+0x390>)
 8011048:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 801104c:	4b58      	ldr	r3, [pc, #352]	; (80111b0 <ProcessMacCommands+0x390>)
 801104e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8011052:	461a      	mov	r2, r3
 8011054:	2301      	movs	r3, #1
 8011056:	4093      	lsls	r3, r2
 8011058:	b29a      	uxth	r2, r3
 801105a:	4b55      	ldr	r3, [pc, #340]	; (80111b0 <ProcessMacCommands+0x390>)
 801105c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011060:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011064:	2200      	movs	r2, #0
 8011066:	4619      	mov	r1, r3
 8011068:	2004      	movs	r0, #4
 801106a:	f003 fa35 	bl	80144d8 <LoRaMacCommandsAddCmd>
                break;
 801106e:	e35c      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011070:	2307      	movs	r3, #7
 8011072:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8011076:	78fb      	ldrb	r3, [r7, #3]
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	4413      	add	r3, r2
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	091b      	lsrs	r3, r3, #4
 8011080:	b2db      	uxtb	r3, r3
 8011082:	b25b      	sxtb	r3, r3
 8011084:	f003 0307 	and.w	r3, r3, #7
 8011088:	b25b      	sxtb	r3, r3
 801108a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801108e:	78fb      	ldrb	r3, [r7, #3]
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	4413      	add	r3, r2
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	b25b      	sxtb	r3, r3
 8011098:	f003 030f 	and.w	r3, r3, #15
 801109c:	b25b      	sxtb	r3, r3
 801109e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80110a2:	78fb      	ldrb	r3, [r7, #3]
 80110a4:	3301      	adds	r3, #1
 80110a6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80110a8:	78fb      	ldrb	r3, [r7, #3]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	70fa      	strb	r2, [r7, #3]
 80110ae:	461a      	mov	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4413      	add	r3, r2
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80110b8:	78fb      	ldrb	r3, [r7, #3]
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	70fa      	strb	r2, [r7, #3]
 80110be:	461a      	mov	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4413      	add	r3, r2
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	021a      	lsls	r2, r3, #8
 80110c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ca:	4313      	orrs	r3, r2
 80110cc:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80110ce:	78fb      	ldrb	r3, [r7, #3]
 80110d0:	1c5a      	adds	r2, r3, #1
 80110d2:	70fa      	strb	r2, [r7, #3]
 80110d4:	461a      	mov	r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4413      	add	r3, r2
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	041a      	lsls	r2, r3, #16
 80110de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110e0:	4313      	orrs	r3, r2
 80110e2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80110e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110e6:	2264      	movs	r2, #100	; 0x64
 80110e8:	fb02 f303 	mul.w	r3, r2, r3
 80110ec:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80110ee:	4b30      	ldr	r3, [pc, #192]	; (80111b0 <ProcessMacCommands+0x390>)
 80110f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f005 f86f 	bl	80161de <RegionRxParamSetupReq>
 8011100:	4603      	mov	r3, r0
 8011102:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011106:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801110a:	f003 0307 	and.w	r3, r3, #7
 801110e:	2b07      	cmp	r3, #7
 8011110:	d117      	bne.n	8011142 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011112:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011116:	b2da      	uxtb	r2, r3
 8011118:	4b25      	ldr	r3, [pc, #148]	; (80111b0 <ProcessMacCommands+0x390>)
 801111a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801111e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011122:	b2da      	uxtb	r2, r3
 8011124:	4b22      	ldr	r3, [pc, #136]	; (80111b0 <ProcessMacCommands+0x390>)
 8011126:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801112a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801112c:	4a20      	ldr	r2, [pc, #128]	; (80111b0 <ProcessMacCommands+0x390>)
 801112e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011132:	4a1f      	ldr	r2, [pc, #124]	; (80111b0 <ProcessMacCommands+0x390>)
 8011134:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8011136:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801113a:	b2da      	uxtb	r2, r3
 801113c:	4b1c      	ldr	r3, [pc, #112]	; (80111b0 <ProcessMacCommands+0x390>)
 801113e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8011142:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011146:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801114a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801114e:	2201      	movs	r2, #1
 8011150:	4619      	mov	r1, r3
 8011152:	2005      	movs	r0, #5
 8011154:	f003 f9c0 	bl	80144d8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8011158:	bf00      	nop
 801115a:	e2e6      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801115c:	23ff      	movs	r3, #255	; 0xff
 801115e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011162:	4b12      	ldr	r3, [pc, #72]	; (80111ac <ProcessMacCommands+0x38c>)
 8011164:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00d      	beq.n	8011188 <ProcessMacCommands+0x368>
 801116c:	4b0f      	ldr	r3, [pc, #60]	; (80111ac <ProcessMacCommands+0x38c>)
 801116e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d007      	beq.n	8011188 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011178:	4b0c      	ldr	r3, [pc, #48]	; (80111ac <ProcessMacCommands+0x38c>)
 801117a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4798      	blx	r3
 8011182:	4603      	mov	r3, r0
 8011184:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011188:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801118c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011190:	787b      	ldrb	r3, [r7, #1]
 8011192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011196:	b2db      	uxtb	r3, r3
 8011198:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801119c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111a0:	2202      	movs	r2, #2
 80111a2:	4619      	mov	r1, r3
 80111a4:	2006      	movs	r0, #6
 80111a6:	f003 f997 	bl	80144d8 <LoRaMacCommandsAddCmd>
                break;
 80111aa:	e2be      	b.n	801172a <ProcessMacCommands+0x90a>
 80111ac:	200008d0 	.word	0x200008d0
 80111b0:	20000ddc 	.word	0x20000ddc
 80111b4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80111b8:	2303      	movs	r3, #3
 80111ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80111be:	78fb      	ldrb	r3, [r7, #3]
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	70fa      	strb	r2, [r7, #3]
 80111c4:	461a      	mov	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4413      	add	r3, r2
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	b25b      	sxtb	r3, r3
 80111ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80111d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80111d6:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80111d8:	78fb      	ldrb	r3, [r7, #3]
 80111da:	1c5a      	adds	r2, r3, #1
 80111dc:	70fa      	strb	r2, [r7, #3]
 80111de:	461a      	mov	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4413      	add	r3, r2
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80111e8:	78fb      	ldrb	r3, [r7, #3]
 80111ea:	1c5a      	adds	r2, r3, #1
 80111ec:	70fa      	strb	r2, [r7, #3]
 80111ee:	461a      	mov	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4413      	add	r3, r2
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	021a      	lsls	r2, r3, #8
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	4313      	orrs	r3, r2
 80111fc:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80111fe:	78fb      	ldrb	r3, [r7, #3]
 8011200:	1c5a      	adds	r2, r3, #1
 8011202:	70fa      	strb	r2, [r7, #3]
 8011204:	461a      	mov	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4413      	add	r3, r2
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	041a      	lsls	r2, r3, #16
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	4313      	orrs	r3, r2
 8011212:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8011214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011216:	2264      	movs	r2, #100	; 0x64
 8011218:	fb02 f303 	mul.w	r3, r2, r3
 801121c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801121e:	2300      	movs	r3, #0
 8011220:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8011222:	78fb      	ldrb	r3, [r7, #3]
 8011224:	1c5a      	adds	r2, r3, #1
 8011226:	70fa      	strb	r2, [r7, #3]
 8011228:	461a      	mov	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4413      	add	r3, r2
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	b25b      	sxtb	r3, r3
 8011232:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8011236:	4b85      	ldr	r3, [pc, #532]	; (801144c <ProcessMacCommands+0x62c>)
 8011238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801123c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011240:	4611      	mov	r1, r2
 8011242:	4618      	mov	r0, r3
 8011244:	f004 ffde 	bl	8016204 <RegionNewChannelReq>
 8011248:	4603      	mov	r3, r0
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8011250:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011254:	b25b      	sxtb	r3, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	db0a      	blt.n	8011270 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 801125a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801125e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011262:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011266:	2201      	movs	r2, #1
 8011268:	4619      	mov	r1, r3
 801126a:	2007      	movs	r0, #7
 801126c:	f003 f934 	bl	80144d8 <LoRaMacCommandsAddCmd>
                }
                break;
 8011270:	bf00      	nop
 8011272:	e25a      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011274:	78fb      	ldrb	r3, [r7, #3]
 8011276:	1c5a      	adds	r2, r3, #1
 8011278:	70fa      	strb	r2, [r7, #3]
 801127a:	461a      	mov	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4413      	add	r3, r2
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	f003 030f 	and.w	r3, r3, #15
 8011286:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801128a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801128e:	2b00      	cmp	r3, #0
 8011290:	d104      	bne.n	801129c <ProcessMacCommands+0x47c>
                {
                    delay++;
 8011292:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011296:	3301      	adds	r3, #1
 8011298:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801129c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80112a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80112a4:	fb02 f303 	mul.w	r3, r2, r3
 80112a8:	461a      	mov	r2, r3
 80112aa:	4b68      	ldr	r3, [pc, #416]	; (801144c <ProcessMacCommands+0x62c>)
 80112ac:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80112ae:	4b67      	ldr	r3, [pc, #412]	; (801144c <ProcessMacCommands+0x62c>)
 80112b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80112b6:	4a65      	ldr	r2, [pc, #404]	; (801144c <ProcessMacCommands+0x62c>)
 80112b8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80112ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80112be:	2200      	movs	r2, #0
 80112c0:	4619      	mov	r1, r3
 80112c2:	2008      	movs	r0, #8
 80112c4:	f003 f908 	bl	80144d8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80112c8:	e22f      	b.n	801172a <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80112ca:	78fb      	ldrb	r3, [r7, #3]
 80112cc:	1c5a      	adds	r2, r3, #1
 80112ce:	70fa      	strb	r2, [r7, #3]
 80112d0:	461a      	mov	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4413      	add	r3, r2
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80112e2:	2300      	movs	r3, #0
 80112e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80112e8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80112ec:	f003 0320 	and.w	r3, r3, #32
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d002      	beq.n	80112fa <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80112f4:	2301      	movs	r3, #1
 80112f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80112fa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80112fe:	f003 0310 	and.w	r3, r3, #16
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011306:	2301      	movs	r3, #1
 8011308:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801130c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011310:	f003 030f 	and.w	r3, r3, #15
 8011314:	b2db      	uxtb	r3, r3
 8011316:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801131a:	4b4c      	ldr	r3, [pc, #304]	; (801144c <ProcessMacCommands+0x62c>)
 801131c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011320:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011324:	4611      	mov	r1, r2
 8011326:	4618      	mov	r0, r3
 8011328:	f004 ff7f 	bl	801622a <RegionTxParamSetupReq>
 801132c:	4603      	mov	r3, r0
 801132e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011332:	d03a      	beq.n	80113aa <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011334:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011338:	4b44      	ldr	r3, [pc, #272]	; (801144c <ProcessMacCommands+0x62c>)
 801133a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801133e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8011342:	4b42      	ldr	r3, [pc, #264]	; (801144c <ProcessMacCommands+0x62c>)
 8011344:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011348:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801134c:	461a      	mov	r2, r3
 801134e:	4b40      	ldr	r3, [pc, #256]	; (8011450 <ProcessMacCommands+0x630>)
 8011350:	5c9b      	ldrb	r3, [r3, r2]
 8011352:	4618      	mov	r0, r3
 8011354:	f7ef fd10 	bl	8000d78 <__aeabi_ui2f>
 8011358:	4603      	mov	r3, r0
 801135a:	4a3c      	ldr	r2, [pc, #240]	; (801144c <ProcessMacCommands+0x62c>)
 801135c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801135e:	2302      	movs	r3, #2
 8011360:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011364:	4b39      	ldr	r3, [pc, #228]	; (801144c <ProcessMacCommands+0x62c>)
 8011366:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801136a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801136e:	4b37      	ldr	r3, [pc, #220]	; (801144c <ProcessMacCommands+0x62c>)
 8011370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011374:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011378:	4611      	mov	r1, r2
 801137a:	4618      	mov	r0, r3
 801137c:	f004 fe58 	bl	8016030 <RegionGetPhyParam>
 8011380:	4603      	mov	r3, r0
 8011382:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	b25a      	sxtb	r2, r3
 8011388:	4b30      	ldr	r3, [pc, #192]	; (801144c <ProcessMacCommands+0x62c>)
 801138a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801138e:	4293      	cmp	r3, r2
 8011390:	bfb8      	it	lt
 8011392:	4613      	movlt	r3, r2
 8011394:	b25a      	sxtb	r2, r3
 8011396:	4b2d      	ldr	r3, [pc, #180]	; (801144c <ProcessMacCommands+0x62c>)
 8011398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801139c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80113a0:	2200      	movs	r2, #0
 80113a2:	4619      	mov	r1, r3
 80113a4:	2009      	movs	r0, #9
 80113a6:	f003 f897 	bl	80144d8 <LoRaMacCommandsAddCmd>
                }
                break;
 80113aa:	bf00      	nop
 80113ac:	e1bd      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80113ae:	2303      	movs	r3, #3
 80113b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80113b4:	78fb      	ldrb	r3, [r7, #3]
 80113b6:	1c5a      	adds	r2, r3, #1
 80113b8:	70fa      	strb	r2, [r7, #3]
 80113ba:	461a      	mov	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	4413      	add	r3, r2
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80113c6:	78fb      	ldrb	r3, [r7, #3]
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	70fa      	strb	r2, [r7, #3]
 80113cc:	461a      	mov	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4413      	add	r3, r2
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80113d6:	78fb      	ldrb	r3, [r7, #3]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	70fa      	strb	r2, [r7, #3]
 80113dc:	461a      	mov	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4413      	add	r3, r2
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	021a      	lsls	r2, r3, #8
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	4313      	orrs	r3, r2
 80113ea:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80113ec:	78fb      	ldrb	r3, [r7, #3]
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	70fa      	strb	r2, [r7, #3]
 80113f2:	461a      	mov	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4413      	add	r3, r2
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	041a      	lsls	r2, r3, #16
 80113fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fe:	4313      	orrs	r3, r2
 8011400:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011404:	2264      	movs	r2, #100	; 0x64
 8011406:	fb02 f303 	mul.w	r3, r2, r3
 801140a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801140c:	4b0f      	ldr	r3, [pc, #60]	; (801144c <ProcessMacCommands+0x62c>)
 801140e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011412:	f107 0220 	add.w	r2, r7, #32
 8011416:	4611      	mov	r1, r2
 8011418:	4618      	mov	r0, r3
 801141a:	f004 ff19 	bl	8016250 <RegionDlChannelReq>
 801141e:	4603      	mov	r3, r0
 8011420:	b2db      	uxtb	r3, r3
 8011422:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8011426:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801142a:	b25b      	sxtb	r3, r3
 801142c:	2b00      	cmp	r3, #0
 801142e:	db0a      	blt.n	8011446 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8011430:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011434:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011438:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801143c:	2201      	movs	r2, #1
 801143e:	4619      	mov	r1, r3
 8011440:	200a      	movs	r0, #10
 8011442:	f003 f849 	bl	80144d8 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8011446:	bf00      	nop
 8011448:	e16f      	b.n	801172a <ProcessMacCommands+0x90a>
 801144a:	bf00      	nop
 801144c:	20000ddc 	.word	0x20000ddc
 8011450:	08020658 	.word	0x08020658
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011454:	200a      	movs	r0, #10
 8011456:	f003 fb67 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	f000 8164 	beq.w	801172a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011462:	210a      	movs	r1, #10
 8011464:	2000      	movs	r0, #0
 8011466:	f003 fad3 	bl	8014a10 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801146a:	f107 0318 	add.w	r3, r7, #24
 801146e:	2200      	movs	r2, #0
 8011470:	601a      	str	r2, [r3, #0]
 8011472:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011474:	f107 0310 	add.w	r3, r7, #16
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801147e:	f107 0308 	add.w	r3, r7, #8
 8011482:	2200      	movs	r2, #0
 8011484:	601a      	str	r2, [r3, #0]
 8011486:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011488:	78fb      	ldrb	r3, [r7, #3]
 801148a:	1c5a      	adds	r2, r3, #1
 801148c:	70fa      	strb	r2, [r7, #3]
 801148e:	461a      	mov	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4413      	add	r3, r2
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011498:	78fb      	ldrb	r3, [r7, #3]
 801149a:	1c5a      	adds	r2, r3, #1
 801149c:	70fa      	strb	r2, [r7, #3]
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	4413      	add	r3, r2
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	021a      	lsls	r2, r3, #8
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80114ae:	78fb      	ldrb	r3, [r7, #3]
 80114b0:	1c5a      	adds	r2, r3, #1
 80114b2:	70fa      	strb	r2, [r7, #3]
 80114b4:	461a      	mov	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4413      	add	r3, r2
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	041a      	lsls	r2, r3, #16
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	4313      	orrs	r3, r2
 80114c2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80114c4:	78fb      	ldrb	r3, [r7, #3]
 80114c6:	1c5a      	adds	r2, r3, #1
 80114c8:	70fa      	strb	r2, [r7, #3]
 80114ca:	461a      	mov	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4413      	add	r3, r2
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	061a      	lsls	r2, r3, #24
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80114da:	78fb      	ldrb	r3, [r7, #3]
 80114dc:	1c5a      	adds	r2, r3, #1
 80114de:	70fa      	strb	r2, [r7, #3]
 80114e0:	461a      	mov	r2, r3
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4413      	add	r3, r2
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	b21b      	sxth	r3, r3
 80114ea:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80114ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80114f0:	461a      	mov	r2, r3
 80114f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80114f6:	fb02 f303 	mul.w	r3, r2, r3
 80114fa:	121b      	asrs	r3, r3, #8
 80114fc:	b21b      	sxth	r3, r3
 80114fe:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011500:	f107 0310 	add.w	r3, r7, #16
 8011504:	f107 0218 	add.w	r2, r7, #24
 8011508:	e892 0003 	ldmia.w	r2, {r0, r1}
 801150c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	4b8c      	ldr	r3, [pc, #560]	; (8011744 <ProcessMacCommands+0x924>)
 8011514:	4413      	add	r3, r2
 8011516:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011518:	f107 0308 	add.w	r3, r7, #8
 801151c:	4618      	mov	r0, r3
 801151e:	f00a fc0f 	bl	801bd40 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011522:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011526:	4b88      	ldr	r3, [pc, #544]	; (8011748 <ProcessMacCommands+0x928>)
 8011528:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801152c:	9200      	str	r2, [sp, #0]
 801152e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8011532:	f107 0210 	add.w	r2, r7, #16
 8011536:	ca06      	ldmia	r2, {r1, r2}
 8011538:	f00a fb9b 	bl	801bc72 <SysTimeSub>
 801153c:	f107 0010 	add.w	r0, r7, #16
 8011540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011542:	9300      	str	r3, [sp, #0]
 8011544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011546:	f107 0208 	add.w	r2, r7, #8
 801154a:	ca06      	ldmia	r2, {r1, r2}
 801154c:	f00a fb58 	bl	801bc00 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011550:	f107 0310 	add.w	r3, r7, #16
 8011554:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011558:	f00a fbc4 	bl	801bce4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801155c:	f002 fe81 	bl	8014262 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011560:	4b79      	ldr	r3, [pc, #484]	; (8011748 <ProcessMacCommands+0x928>)
 8011562:	2201      	movs	r2, #1
 8011564:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8011568:	e0df      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801156a:	200d      	movs	r0, #13
 801156c:	f003 fadc 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	f000 80d9 	beq.w	801172a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011578:	210d      	movs	r1, #13
 801157a:	2000      	movs	r0, #0
 801157c:	f003 fa48 	bl	8014a10 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011580:	4b71      	ldr	r3, [pc, #452]	; (8011748 <ProcessMacCommands+0x928>)
 8011582:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011586:	2b04      	cmp	r3, #4
 8011588:	f000 80cf 	beq.w	801172a <ProcessMacCommands+0x90a>
 801158c:	4b6e      	ldr	r3, [pc, #440]	; (8011748 <ProcessMacCommands+0x928>)
 801158e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011592:	2b05      	cmp	r3, #5
 8011594:	f000 80c9 	beq.w	801172a <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011598:	f002 fe44 	bl	8014224 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801159c:	e0c5      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801159e:	2303      	movs	r3, #3
 80115a0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80115a4:	2300      	movs	r3, #0
 80115a6:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80115a8:	78fb      	ldrb	r3, [r7, #3]
 80115aa:	1c5a      	adds	r2, r3, #1
 80115ac:	70fa      	strb	r2, [r7, #3]
 80115ae:	461a      	mov	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	4413      	add	r3, r2
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80115b8:	78fb      	ldrb	r3, [r7, #3]
 80115ba:	1c5a      	adds	r2, r3, #1
 80115bc:	70fa      	strb	r2, [r7, #3]
 80115be:	461a      	mov	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	4413      	add	r3, r2
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	021b      	lsls	r3, r3, #8
 80115c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80115ca:	4313      	orrs	r3, r2
 80115cc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80115ce:	78fb      	ldrb	r3, [r7, #3]
 80115d0:	1c5a      	adds	r2, r3, #1
 80115d2:	70fa      	strb	r2, [r7, #3]
 80115d4:	461a      	mov	r2, r3
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4413      	add	r3, r2
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	041b      	lsls	r3, r3, #16
 80115de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80115e0:	4313      	orrs	r3, r2
 80115e2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80115e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115e6:	2264      	movs	r2, #100	; 0x64
 80115e8:	fb02 f303 	mul.w	r3, r2, r3
 80115ec:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80115ee:	78fb      	ldrb	r3, [r7, #3]
 80115f0:	1c5a      	adds	r2, r3, #1
 80115f2:	70fa      	strb	r2, [r7, #3]
 80115f4:	461a      	mov	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4413      	add	r3, r2
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	f003 030f 	and.w	r3, r3, #15
 8011600:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011604:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011608:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801160a:	4618      	mov	r0, r3
 801160c:	f002 fe10 	bl	8014230 <LoRaMacClassBPingSlotChannelReq>
 8011610:	4603      	mov	r3, r0
 8011612:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8011616:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801161a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801161e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011622:	2201      	movs	r2, #1
 8011624:	4619      	mov	r1, r3
 8011626:	2011      	movs	r0, #17
 8011628:	f002 ff56 	bl	80144d8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 801162c:	e07d      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801162e:	200e      	movs	r0, #14
 8011630:	f003 fa7a 	bl	8014b28 <LoRaMacConfirmQueueIsCmdActive>
 8011634:	4603      	mov	r3, r0
 8011636:	2b00      	cmp	r3, #0
 8011638:	d077      	beq.n	801172a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801163a:	210e      	movs	r1, #14
 801163c:	2000      	movs	r0, #0
 801163e:	f003 f9e7 	bl	8014a10 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801164e:	78fb      	ldrb	r3, [r7, #3]
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	70fa      	strb	r2, [r7, #3]
 8011654:	461a      	mov	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4413      	add	r3, r2
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011660:	78fb      	ldrb	r3, [r7, #3]
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	70fa      	strb	r2, [r7, #3]
 8011666:	461a      	mov	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4413      	add	r3, r2
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	021b      	lsls	r3, r3, #8
 8011670:	b21a      	sxth	r2, r3
 8011672:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8011676:	4313      	orrs	r3, r2
 8011678:	b21b      	sxth	r3, r3
 801167a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801167e:	78fb      	ldrb	r3, [r7, #3]
 8011680:	1c5a      	adds	r2, r3, #1
 8011682:	70fa      	strb	r2, [r7, #3]
 8011684:	461a      	mov	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4413      	add	r3, r2
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011690:	4b2e      	ldr	r3, [pc, #184]	; (801174c <ProcessMacCommands+0x92c>)
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8011698:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801169c:	4618      	mov	r0, r3
 801169e:	f002 fdd3 	bl	8014248 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80116a2:	e042      	b.n	801172a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80116a4:	2300      	movs	r3, #0
 80116a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80116aa:	78fb      	ldrb	r3, [r7, #3]
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	70fa      	strb	r2, [r7, #3]
 80116b0:	461a      	mov	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	4413      	add	r3, r2
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80116bc:	78fb      	ldrb	r3, [r7, #3]
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	70fa      	strb	r2, [r7, #3]
 80116c2:	461a      	mov	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4413      	add	r3, r2
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	021b      	lsls	r3, r3, #8
 80116cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80116d0:	4313      	orrs	r3, r2
 80116d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80116d6:	78fb      	ldrb	r3, [r7, #3]
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	70fa      	strb	r2, [r7, #3]
 80116dc:	461a      	mov	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4413      	add	r3, r2
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	041b      	lsls	r3, r3, #16
 80116e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80116ea:	4313      	orrs	r3, r2
 80116ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80116f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80116f4:	2264      	movs	r2, #100	; 0x64
 80116f6:	fb02 f303 	mul.w	r3, r2, r3
 80116fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80116fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011702:	f002 fdb4 	bl	801426e <LoRaMacClassBBeaconFreqReq>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d003      	beq.n	8011714 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 801170c:	2301      	movs	r3, #1
 801170e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8011712:	e002      	b.n	801171a <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011714:	2300      	movs	r3, #0
 8011716:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801171a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801171e:	2201      	movs	r2, #1
 8011720:	4619      	mov	r1, r3
 8011722:	2013      	movs	r0, #19
 8011724:	f002 fed8 	bl	80144d8 <LoRaMacCommandsAddCmd>
                }
                break;
 8011728:	bf00      	nop
    while( macIndex < commandsSize )
 801172a:	78fa      	ldrb	r2, [r7, #3]
 801172c:	78bb      	ldrb	r3, [r7, #2]
 801172e:	429a      	cmp	r2, r3
 8011730:	f4ff ab8e 	bcc.w	8010e50 <ProcessMacCommands+0x30>
 8011734:	e002      	b.n	801173c <ProcessMacCommands+0x91c>
            return;
 8011736:	bf00      	nop
 8011738:	e000      	b.n	801173c <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801173a:	bf00      	nop
        }
    }
}
 801173c:	378c      	adds	r7, #140	; 0x8c
 801173e:	46bd      	mov	sp, r7
 8011740:	bd90      	pop	{r4, r7, pc}
 8011742:	bf00      	nop
 8011744:	12d53d80 	.word	0x12d53d80
 8011748:	200008d0 	.word	0x200008d0
 801174c:	20001c34 	.word	0x20001c34

08011750 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b08e      	sub	sp, #56	; 0x38
 8011754:	af02      	add	r7, sp, #8
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	607a      	str	r2, [r7, #4]
 801175a:	461a      	mov	r2, r3
 801175c:	460b      	mov	r3, r1
 801175e:	72fb      	strb	r3, [r7, #11]
 8011760:	4613      	mov	r3, r2
 8011762:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011764:	2303      	movs	r3, #3
 8011766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801176a:	4b65      	ldr	r3, [pc, #404]	; (8011900 <Send+0x1b0>)
 801176c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011770:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011774:	4b62      	ldr	r3, [pc, #392]	; (8011900 <Send+0x1b0>)
 8011776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801177a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801177e:	4b60      	ldr	r3, [pc, #384]	; (8011900 <Send+0x1b0>)
 8011780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011782:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011784:	4b5e      	ldr	r3, [pc, #376]	; (8011900 <Send+0x1b0>)
 8011786:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801178a:	2b00      	cmp	r3, #0
 801178c:	d101      	bne.n	8011792 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801178e:	2307      	movs	r3, #7
 8011790:	e0b1      	b.n	80118f6 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011792:	4b5b      	ldr	r3, [pc, #364]	; (8011900 <Send+0x1b0>)
 8011794:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 801179c:	4b58      	ldr	r3, [pc, #352]	; (8011900 <Send+0x1b0>)
 801179e:	2200      	movs	r2, #0
 80117a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80117a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117ac:	f36f 0303 	bfc	r3, #0, #4
 80117b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80117b4:	4b52      	ldr	r3, [pc, #328]	; (8011900 <Send+0x1b0>)
 80117b6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80117ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117be:	f362 13c7 	bfi	r3, r2, #7, #1
 80117c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80117c6:	4b4e      	ldr	r3, [pc, #312]	; (8011900 <Send+0x1b0>)
 80117c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d106      	bne.n	80117de <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80117d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117d4:	f043 0310 	orr.w	r3, r3, #16
 80117d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80117dc:	e005      	b.n	80117ea <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80117de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117e2:	f36f 1304 	bfc	r3, #4, #1
 80117e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80117ea:	4b45      	ldr	r3, [pc, #276]	; (8011900 <Send+0x1b0>)
 80117ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d005      	beq.n	8011800 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80117f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117f8:	f043 0320 	orr.w	r3, r3, #32
 80117fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011800:	4b3f      	ldr	r3, [pc, #252]	; (8011900 <Send+0x1b0>)
 8011802:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011806:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8011808:	2301      	movs	r3, #1
 801180a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801180c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011810:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b00      	cmp	r3, #0
 8011818:	bf14      	ite	ne
 801181a:	2301      	movne	r3, #1
 801181c:	2300      	moveq	r3, #0
 801181e:	b2db      	uxtb	r3, r3
 8011820:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011822:	4b37      	ldr	r3, [pc, #220]	; (8011900 <Send+0x1b0>)
 8011824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011826:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011828:	4b36      	ldr	r3, [pc, #216]	; (8011904 <Send+0x1b4>)
 801182a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801182e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011830:	4b34      	ldr	r3, [pc, #208]	; (8011904 <Send+0x1b4>)
 8011832:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8011836:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011838:	4b31      	ldr	r3, [pc, #196]	; (8011900 <Send+0x1b0>)
 801183a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801183e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011842:	4b2f      	ldr	r3, [pc, #188]	; (8011900 <Send+0x1b0>)
 8011844:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011848:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801184c:	4b2c      	ldr	r3, [pc, #176]	; (8011900 <Send+0x1b0>)
 801184e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011856:	4b2a      	ldr	r3, [pc, #168]	; (8011900 <Send+0x1b0>)
 8011858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801185c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011864:	f107 0014 	add.w	r0, r7, #20
 8011868:	4a27      	ldr	r2, [pc, #156]	; (8011908 <Send+0x1b8>)
 801186a:	4928      	ldr	r1, [pc, #160]	; (801190c <Send+0x1bc>)
 801186c:	f002 fc1a 	bl	80140a4 <LoRaMacAdrCalcNext>
 8011870:	4603      	mov	r3, r0
 8011872:	461a      	mov	r2, r3
 8011874:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011878:	f362 1386 	bfi	r3, r2, #6, #1
 801187c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011880:	7afa      	ldrb	r2, [r7, #11]
 8011882:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011886:	893b      	ldrh	r3, [r7, #8]
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 fc2d 	bl	80120ec <PrepareFrame>
 8011892:	4603      	mov	r3, r0
 8011894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801189c:	2b00      	cmp	r3, #0
 801189e:	d003      	beq.n	80118a8 <Send+0x158>
 80118a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118a4:	2b0a      	cmp	r3, #10
 80118a6:	d107      	bne.n	80118b8 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80118a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80118ac:	4618      	mov	r0, r3
 80118ae:	f000 f96d 	bl	8011b8c <ScheduleTx>
 80118b2:	4603      	mov	r3, r0
 80118b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80118b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d00a      	beq.n	80118d6 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80118c0:	4a0f      	ldr	r2, [pc, #60]	; (8011900 <Send+0x1b0>)
 80118c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80118c6:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80118ca:	4a0d      	ldr	r2, [pc, #52]	; (8011900 <Send+0x1b0>)
 80118cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80118d0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80118d4:	e00d      	b.n	80118f2 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80118d6:	4b0a      	ldr	r3, [pc, #40]	; (8011900 <Send+0x1b0>)
 80118d8:	2200      	movs	r2, #0
 80118da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80118de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e0:	4a07      	ldr	r2, [pc, #28]	; (8011900 <Send+0x1b0>)
 80118e2:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80118e4:	f002 fe70 	bl	80145c8 <LoRaMacCommandsRemoveNoneStickyCmds>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d001      	beq.n	80118f2 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118ee:	2313      	movs	r3, #19
 80118f0:	e001      	b.n	80118f6 <Send+0x1a6>
        }
    }
    return status;
 80118f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3730      	adds	r7, #48	; 0x30
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	20000ddc 	.word	0x20000ddc
 8011904:	200008d0 	.word	0x200008d0
 8011908:	20000e14 	.word	0x20000e14
 801190c:	20000e15 	.word	0x20000e15

08011910 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	4603      	mov	r3, r0
 8011918:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801191e:	2300      	movs	r3, #0
 8011920:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011922:	2301      	movs	r3, #1
 8011924:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011926:	79fb      	ldrb	r3, [r7, #7]
 8011928:	2bff      	cmp	r3, #255	; 0xff
 801192a:	d129      	bne.n	8011980 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801192c:	2000      	movs	r0, #0
 801192e:	f7ff f957 	bl	8010be0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011932:	4b1a      	ldr	r3, [pc, #104]	; (801199c <SendReJoinReq+0x8c>)
 8011934:	2200      	movs	r2, #0
 8011936:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801193a:	4b18      	ldr	r3, [pc, #96]	; (801199c <SendReJoinReq+0x8c>)
 801193c:	4a18      	ldr	r2, [pc, #96]	; (80119a0 <SendReJoinReq+0x90>)
 801193e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011942:	4b16      	ldr	r3, [pc, #88]	; (801199c <SendReJoinReq+0x8c>)
 8011944:	22ff      	movs	r2, #255	; 0xff
 8011946:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801194a:	7b3b      	ldrb	r3, [r7, #12]
 801194c:	f36f 1347 	bfc	r3, #5, #3
 8011950:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011952:	7b3a      	ldrb	r2, [r7, #12]
 8011954:	4b11      	ldr	r3, [pc, #68]	; (801199c <SendReJoinReq+0x8c>)
 8011956:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 801195a:	f7fc fbd3 	bl	800e104 <SecureElementGetJoinEui>
 801195e:	4603      	mov	r3, r0
 8011960:	2208      	movs	r2, #8
 8011962:	4619      	mov	r1, r3
 8011964:	480f      	ldr	r0, [pc, #60]	; (80119a4 <SendReJoinReq+0x94>)
 8011966:	f006 fe44 	bl	80185f2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 801196a:	f7fc fba9 	bl	800e0c0 <SecureElementGetDevEui>
 801196e:	4603      	mov	r3, r0
 8011970:	2208      	movs	r2, #8
 8011972:	4619      	mov	r1, r3
 8011974:	480c      	ldr	r0, [pc, #48]	; (80119a8 <SendReJoinReq+0x98>)
 8011976:	f006 fe3c 	bl	80185f2 <memcpy1>

            allowDelayedTx = false;
 801197a:	2300      	movs	r3, #0
 801197c:	73fb      	strb	r3, [r7, #15]

            break;
 801197e:	e002      	b.n	8011986 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011980:	2302      	movs	r3, #2
 8011982:	73bb      	strb	r3, [r7, #14]
            break;
 8011984:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011986:	7bfb      	ldrb	r3, [r7, #15]
 8011988:	4618      	mov	r0, r3
 801198a:	f000 f8ff 	bl	8011b8c <ScheduleTx>
 801198e:	4603      	mov	r3, r0
 8011990:	73bb      	strb	r3, [r7, #14]
    return status;
 8011992:	7bbb      	ldrb	r3, [r7, #14]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3710      	adds	r7, #16
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	200008d0 	.word	0x200008d0
 80119a0:	200008d2 	.word	0x200008d2
 80119a4:	200009de 	.word	0x200009de
 80119a8:	200009e6 	.word	0x200009e6

080119ac <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80119b0:	f002 fbe7 	bl	8014182 <LoRaMacClassBIsBeaconExpected>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80119ba:	230e      	movs	r3, #14
 80119bc:	e013      	b.n	80119e6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80119be:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <CheckForClassBCollision+0x40>)
 80119c0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d10d      	bne.n	80119e4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80119c8:	f002 fbe2 	bl	8014190 <LoRaMacClassBIsPingExpected>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80119d2:	230f      	movs	r3, #15
 80119d4:	e007      	b.n	80119e6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80119d6:	f002 fbe2 	bl	801419e <LoRaMacClassBIsMulticastExpected>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80119e0:	230f      	movs	r3, #15
 80119e2:	e000      	b.n	80119e6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80119e4:	2300      	movs	r3, #0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	20000ddc 	.word	0x20000ddc

080119f0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80119f0:	b590      	push	{r4, r7, lr}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80119f6:	4b2d      	ldr	r3, [pc, #180]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 80119f8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80119fc:	4b2b      	ldr	r3, [pc, #172]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 80119fe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011a02:	4b2a      	ldr	r3, [pc, #168]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a04:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8011a08:	4b28      	ldr	r3, [pc, #160]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a0a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011a0e:	4b27      	ldr	r3, [pc, #156]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011a14:	b25b      	sxtb	r3, r3
 8011a16:	f004 fc72 	bl	80162fe <RegionApplyDrOffset>
 8011a1a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011a1c:	b259      	sxtb	r1, r3
 8011a1e:	4b23      	ldr	r3, [pc, #140]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011a24:	4b21      	ldr	r3, [pc, #132]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a28:	4821      	ldr	r0, [pc, #132]	; (8011ab0 <ComputeRxWindowParameters+0xc0>)
 8011a2a:	9000      	str	r0, [sp, #0]
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f004 fb76 	bl	801611e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011a32:	4b1e      	ldr	r3, [pc, #120]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a34:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011a38:	4b1c      	ldr	r3, [pc, #112]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a3a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011a3e:	b259      	sxtb	r1, r3
 8011a40:	4b1a      	ldr	r3, [pc, #104]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a42:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011a46:	4b19      	ldr	r3, [pc, #100]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a4a:	4c1a      	ldr	r4, [pc, #104]	; (8011ab4 <ComputeRxWindowParameters+0xc4>)
 8011a4c:	9400      	str	r4, [sp, #0]
 8011a4e:	f004 fb66 	bl	801611e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011a52:	4b16      	ldr	r3, [pc, #88]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a56:	4a18      	ldr	r2, [pc, #96]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a58:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011a5c:	4413      	add	r3, r2
 8011a5e:	4a16      	ldr	r2, [pc, #88]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a60:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011a64:	4b11      	ldr	r3, [pc, #68]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a68:	4a13      	ldr	r2, [pc, #76]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a6a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011a6e:	4413      	add	r3, r2
 8011a70:	4a11      	ldr	r2, [pc, #68]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a72:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011a76:	4b0d      	ldr	r3, [pc, #52]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a78:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d111      	bne.n	8011aa4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011a80:	4b0a      	ldr	r3, [pc, #40]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a84:	4a0c      	ldr	r2, [pc, #48]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a86:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011a8a:	4413      	add	r3, r2
 8011a8c:	4a0a      	ldr	r2, [pc, #40]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a8e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011a92:	4b06      	ldr	r3, [pc, #24]	; (8011aac <ComputeRxWindowParameters+0xbc>)
 8011a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a96:	4a08      	ldr	r2, [pc, #32]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011a98:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011a9c:	4413      	add	r3, r2
 8011a9e:	4a06      	ldr	r2, [pc, #24]	; (8011ab8 <ComputeRxWindowParameters+0xc8>)
 8011aa0:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011aa4:	bf00      	nop
 8011aa6:	3704      	adds	r7, #4
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd90      	pop	{r4, r7, pc}
 8011aac:	20000ddc 	.word	0x20000ddc
 8011ab0:	20000c88 	.word	0x20000c88
 8011ab4:	20000c9c 	.word	0x20000c9c
 8011ab8:	200008d0 	.word	0x200008d0

08011abc <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011ac6:	4b13      	ldr	r3, [pc, #76]	; (8011b14 <VerifyTxFrame+0x58>)
 8011ac8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d01b      	beq.n	8011b08 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011ad0:	1d3b      	adds	r3, r7, #4
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f002 fdbe 	bl	8014654 <LoRaMacCommandsGetSizeSerializedCmds>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d001      	beq.n	8011ae2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ade:	2313      	movs	r3, #19
 8011ae0:	e013      	b.n	8011b0a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011ae2:	4b0d      	ldr	r3, [pc, #52]	; (8011b18 <VerifyTxFrame+0x5c>)
 8011ae4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011ae8:	4a0a      	ldr	r2, [pc, #40]	; (8011b14 <VerifyTxFrame+0x58>)
 8011aea:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	b2d2      	uxtb	r2, r2
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7ff f96c 	bl	8010dd0 <ValidatePayloadLength>
 8011af8:	4603      	mov	r3, r0
 8011afa:	f083 0301 	eor.w	r3, r3, #1
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011b04:	2308      	movs	r3, #8
 8011b06:	e000      	b.n	8011b0a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b08:	2300      	movs	r3, #0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20000ddc 	.word	0x20000ddc
 8011b18:	200008d0 	.word	0x200008d0

08011b1c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011b22:	4b18      	ldr	r3, [pc, #96]	; (8011b84 <SerializeTxFrame+0x68>)
 8011b24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d002      	beq.n	8011b32 <SerializeTxFrame+0x16>
 8011b2c:	2b04      	cmp	r3, #4
 8011b2e:	d011      	beq.n	8011b54 <SerializeTxFrame+0x38>
 8011b30:	e021      	b.n	8011b76 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011b32:	4815      	ldr	r0, [pc, #84]	; (8011b88 <SerializeTxFrame+0x6c>)
 8011b34:	f004 f8f3 	bl	8015d1e <LoRaMacSerializerJoinRequest>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011b3c:	79fb      	ldrb	r3, [r7, #7]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b42:	2311      	movs	r3, #17
 8011b44:	e01a      	b.n	8011b7c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011b46:	4b0f      	ldr	r3, [pc, #60]	; (8011b84 <SerializeTxFrame+0x68>)
 8011b48:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	4b0d      	ldr	r3, [pc, #52]	; (8011b84 <SerializeTxFrame+0x68>)
 8011b50:	801a      	strh	r2, [r3, #0]
            break;
 8011b52:	e012      	b.n	8011b7a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011b54:	480c      	ldr	r0, [pc, #48]	; (8011b88 <SerializeTxFrame+0x6c>)
 8011b56:	f004 f964 	bl	8015e22 <LoRaMacSerializerData>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011b5e:	79fb      	ldrb	r3, [r7, #7]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b64:	2311      	movs	r3, #17
 8011b66:	e009      	b.n	8011b7c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011b68:	4b06      	ldr	r3, [pc, #24]	; (8011b84 <SerializeTxFrame+0x68>)
 8011b6a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	4b04      	ldr	r3, [pc, #16]	; (8011b84 <SerializeTxFrame+0x68>)
 8011b72:	801a      	strh	r2, [r3, #0]
            break;
 8011b74:	e001      	b.n	8011b7a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b76:	2303      	movs	r3, #3
 8011b78:	e000      	b.n	8011b7c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	200008d0 	.word	0x200008d0
 8011b88:	200009d8 	.word	0x200009d8

08011b8c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b090      	sub	sp, #64	; 0x40
 8011b90:	af02      	add	r7, sp, #8
 8011b92:	4603      	mov	r3, r0
 8011b94:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b96:	2303      	movs	r3, #3
 8011b98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011b9c:	f7ff ff06 	bl	80119ac <CheckForClassBCollision>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d002      	beq.n	8011bb4 <ScheduleTx+0x28>
    {
        return status;
 8011bae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bb2:	e08f      	b.n	8011cd4 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011bb4:	f000 f8fa 	bl	8011dac <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011bb8:	f7ff ffb0 	bl	8011b1c <SerializeTxFrame>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d002      	beq.n	8011bd0 <ScheduleTx+0x44>
    {
        return status;
 8011bca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bce:	e081      	b.n	8011cd4 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011bd0:	4b42      	ldr	r3, [pc, #264]	; (8011cdc <ScheduleTx+0x150>)
 8011bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bd4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011bd6:	4b41      	ldr	r3, [pc, #260]	; (8011cdc <ScheduleTx+0x150>)
 8011bd8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011bdc:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011bde:	4b3f      	ldr	r3, [pc, #252]	; (8011cdc <ScheduleTx+0x150>)
 8011be0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8011be4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bea:	4618      	mov	r0, r3
 8011bec:	f00a f8e0 	bl	801bdb0 <SysTimeGetMcuTime>
 8011bf0:	4638      	mov	r0, r7
 8011bf2:	4b3a      	ldr	r3, [pc, #232]	; (8011cdc <ScheduleTx+0x150>)
 8011bf4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8011bf8:	9200      	str	r2, [sp, #0]
 8011bfa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8011bfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011c02:	ca06      	ldmia	r2, {r1, r2}
 8011c04:	f00a f835 	bl	801bc72 <SysTimeSub>
 8011c08:	f107 0320 	add.w	r3, r7, #32
 8011c0c:	463a      	mov	r2, r7
 8011c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c12:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011c16:	4b31      	ldr	r3, [pc, #196]	; (8011cdc <ScheduleTx+0x150>)
 8011c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8011c22:	2301      	movs	r3, #1
 8011c24:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011c26:	4b2e      	ldr	r3, [pc, #184]	; (8011ce0 <ScheduleTx+0x154>)
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011c2c:	4b2b      	ldr	r3, [pc, #172]	; (8011cdc <ScheduleTx+0x150>)
 8011c2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d104      	bne.n	8011c40 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011c36:	2301      	movs	r3, #1
 8011c38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011c40:	4b26      	ldr	r3, [pc, #152]	; (8011cdc <ScheduleTx+0x150>)
 8011c42:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c46:	f107 0114 	add.w	r1, r7, #20
 8011c4a:	4b26      	ldr	r3, [pc, #152]	; (8011ce4 <ScheduleTx+0x158>)
 8011c4c:	9300      	str	r3, [sp, #0]
 8011c4e:	4b26      	ldr	r3, [pc, #152]	; (8011ce8 <ScheduleTx+0x15c>)
 8011c50:	4a26      	ldr	r2, [pc, #152]	; (8011cec <ScheduleTx+0x160>)
 8011c52:	f004 fb2a 	bl	80162aa <RegionNextChannel>
 8011c56:	4603      	mov	r3, r0
 8011c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d022      	beq.n	8011caa <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c68:	2b0b      	cmp	r3, #11
 8011c6a:	d11b      	bne.n	8011ca4 <ScheduleTx+0x118>
 8011c6c:	7bfb      	ldrb	r3, [r7, #15]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d018      	beq.n	8011ca4 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011c72:	4b1b      	ldr	r3, [pc, #108]	; (8011ce0 <ScheduleTx+0x154>)
 8011c74:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d011      	beq.n	8011ca0 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011c7c:	4b18      	ldr	r3, [pc, #96]	; (8011ce0 <ScheduleTx+0x154>)
 8011c7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c82:	f043 0320 	orr.w	r3, r3, #32
 8011c86:	4a16      	ldr	r2, [pc, #88]	; (8011ce0 <ScheduleTx+0x154>)
 8011c88:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011c8c:	4b14      	ldr	r3, [pc, #80]	; (8011ce0 <ScheduleTx+0x154>)
 8011c8e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8011c92:	4619      	mov	r1, r3
 8011c94:	4816      	ldr	r0, [pc, #88]	; (8011cf0 <ScheduleTx+0x164>)
 8011c96:	f00a fe2f 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011c9a:	4815      	ldr	r0, [pc, #84]	; (8011cf0 <ScheduleTx+0x164>)
 8011c9c:	f00a fd4e 	bl	801c73c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	e017      	b.n	8011cd4 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011ca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ca8:	e014      	b.n	8011cd4 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011caa:	f7ff fea1 	bl	80119f0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011cae:	f7ff ff05 	bl	8011abc <VerifyTxFrame>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d002      	beq.n	8011cc6 <ScheduleTx+0x13a>
    {
        return status;
 8011cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cc4:	e006      	b.n	8011cd4 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011cc6:	4b06      	ldr	r3, [pc, #24]	; (8011ce0 <ScheduleTx+0x154>)
 8011cc8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f000 fb29 	bl	8012324 <SendFrameOnChannel>
 8011cd2:	4603      	mov	r3, r0
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3738      	adds	r7, #56	; 0x38
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	20000ddc 	.word	0x20000ddc
 8011ce0:	200008d0 	.word	0x200008d0
 8011ce4:	20000e0c 	.word	0x20000e0c
 8011ce8:	20000d58 	.word	0x20000d58
 8011cec:	20000ce5 	.word	0x20000ce5
 8011cf0:	20000c38 	.word	0x20000c38

08011cf4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	460a      	mov	r2, r1
 8011cfe:	71fb      	strb	r3, [r7, #7]
 8011d00:	4613      	mov	r3, r2
 8011d02:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011d04:	2313      	movs	r3, #19
 8011d06:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011d0c:	4b25      	ldr	r3, [pc, #148]	; (8011da4 <SecureFrame+0xb0>)
 8011d0e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d002      	beq.n	8011d1c <SecureFrame+0x28>
 8011d16:	2b04      	cmp	r3, #4
 8011d18:	d011      	beq.n	8011d3e <SecureFrame+0x4a>
 8011d1a:	e03b      	b.n	8011d94 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011d1c:	4822      	ldr	r0, [pc, #136]	; (8011da8 <SecureFrame+0xb4>)
 8011d1e:	f003 fbc7 	bl	80154b0 <LoRaMacCryptoPrepareJoinRequest>
 8011d22:	4603      	mov	r3, r0
 8011d24:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011d26:	7bfb      	ldrb	r3, [r7, #15]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d2c:	2311      	movs	r3, #17
 8011d2e:	e034      	b.n	8011d9a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011d30:	4b1c      	ldr	r3, [pc, #112]	; (8011da4 <SecureFrame+0xb0>)
 8011d32:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	4b1a      	ldr	r3, [pc, #104]	; (8011da4 <SecureFrame+0xb0>)
 8011d3a:	801a      	strh	r2, [r3, #0]
            break;
 8011d3c:	e02c      	b.n	8011d98 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011d3e:	f107 0308 	add.w	r3, r7, #8
 8011d42:	4618      	mov	r0, r3
 8011d44:	f003 face 	bl	80152e4 <LoRaMacCryptoGetFCntUp>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d001      	beq.n	8011d52 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011d4e:	2312      	movs	r3, #18
 8011d50:	e023      	b.n	8011d9a <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011d52:	4b14      	ldr	r3, [pc, #80]	; (8011da4 <SecureFrame+0xb0>)
 8011d54:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d104      	bne.n	8011d66 <SecureFrame+0x72>
 8011d5c:	4b11      	ldr	r3, [pc, #68]	; (8011da4 <SecureFrame+0xb0>)
 8011d5e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d902      	bls.n	8011d6c <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011d6c:	68b8      	ldr	r0, [r7, #8]
 8011d6e:	79ba      	ldrb	r2, [r7, #6]
 8011d70:	79f9      	ldrb	r1, [r7, #7]
 8011d72:	4b0d      	ldr	r3, [pc, #52]	; (8011da8 <SecureFrame+0xb4>)
 8011d74:	f003 fcb4 	bl	80156e0 <LoRaMacCryptoSecureMessage>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011d7c:	7bfb      	ldrb	r3, [r7, #15]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d001      	beq.n	8011d86 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d82:	2311      	movs	r3, #17
 8011d84:	e009      	b.n	8011d9a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011d86:	4b07      	ldr	r3, [pc, #28]	; (8011da4 <SecureFrame+0xb0>)
 8011d88:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011d8c:	b29a      	uxth	r2, r3
 8011d8e:	4b05      	ldr	r3, [pc, #20]	; (8011da4 <SecureFrame+0xb0>)
 8011d90:	801a      	strh	r2, [r3, #0]
            break;
 8011d92:	e001      	b.n	8011d98 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d94:	2303      	movs	r3, #3
 8011d96:	e000      	b.n	8011d9a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8011d98:	2300      	movs	r3, #0
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	200008d0 	.word	0x200008d0
 8011da8:	200009d8 	.word	0x200009d8

08011dac <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011dac:	b480      	push	{r7}
 8011dae:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011db0:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <CalculateBackOff+0x2c>)
 8011db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10a      	bne.n	8011dce <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011db8:	4b07      	ldr	r3, [pc, #28]	; (8011dd8 <CalculateBackOff+0x2c>)
 8011dba:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	4a06      	ldr	r2, [pc, #24]	; (8011ddc <CalculateBackOff+0x30>)
 8011dc2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8011dc6:	fb02 f303 	mul.w	r3, r2, r3
 8011dca:	4a03      	ldr	r2, [pc, #12]	; (8011dd8 <CalculateBackOff+0x2c>)
 8011dcc:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8011dce:	bf00      	nop
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bc80      	pop	{r7}
 8011dd4:	4770      	bx	lr
 8011dd6:	bf00      	nop
 8011dd8:	20000ddc 	.word	0x20000ddc
 8011ddc:	200008d0 	.word	0x200008d0

08011de0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	4603      	mov	r3, r0
 8011de8:	7139      	strb	r1, [r7, #4]
 8011dea:	71fb      	strb	r3, [r7, #7]
 8011dec:	4613      	mov	r3, r2
 8011dee:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d002      	beq.n	8011dfc <RemoveMacCommands+0x1c>
 8011df6:	79fb      	ldrb	r3, [r7, #7]
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d10d      	bne.n	8011e18 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011dfc:	79bb      	ldrb	r3, [r7, #6]
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d108      	bne.n	8011e14 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011e02:	793b      	ldrb	r3, [r7, #4]
 8011e04:	f003 0320 	and.w	r3, r3, #32
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d004      	beq.n	8011e18 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011e0e:	f002 fbff 	bl	8014610 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011e12:	e001      	b.n	8011e18 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011e14:	f002 fbfc 	bl	8014610 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011e18:	bf00      	nop
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011e20:	b5b0      	push	{r4, r5, r7, lr}
 8011e22:	b08e      	sub	sp, #56	; 0x38
 8011e24:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011e26:	4b68      	ldr	r3, [pc, #416]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011e2e:	4b66      	ldr	r3, [pc, #408]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e30:	2200      	movs	r2, #0
 8011e32:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011e34:	4b65      	ldr	r3, [pc, #404]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8011e3c:	4b63      	ldr	r3, [pc, #396]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011e3e:	2201      	movs	r2, #1
 8011e40:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011e44:	4b61      	ldr	r3, [pc, #388]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011e46:	2201      	movs	r2, #1
 8011e48:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8011e4c:	4b5f      	ldr	r3, [pc, #380]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011e54:	4b5c      	ldr	r3, [pc, #368]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e56:	2200      	movs	r2, #0
 8011e58:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011e5c:	4b5a      	ldr	r3, [pc, #360]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e5e:	2201      	movs	r2, #1
 8011e60:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011e64:	4b58      	ldr	r3, [pc, #352]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e66:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011e6a:	4b57      	ldr	r3, [pc, #348]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011e70:	4b55      	ldr	r3, [pc, #340]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e72:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8011e76:	4b54      	ldr	r3, [pc, #336]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011e7c:	4b52      	ldr	r3, [pc, #328]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e7e:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8011e82:	4b51      	ldr	r3, [pc, #324]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011e88:	4b4f      	ldr	r3, [pc, #316]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e8a:	4a4f      	ldr	r2, [pc, #316]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e8c:	3364      	adds	r3, #100	; 0x64
 8011e8e:	32a8      	adds	r2, #168	; 0xa8
 8011e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e94:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011e98:	4b4b      	ldr	r3, [pc, #300]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e9a:	4a4b      	ldr	r2, [pc, #300]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011e9c:	336c      	adds	r3, #108	; 0x6c
 8011e9e:	32b0      	adds	r2, #176	; 0xb0
 8011ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011ea8:	4b47      	ldr	r3, [pc, #284]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011eaa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011eae:	4b46      	ldr	r3, [pc, #280]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011eb4:	4b44      	ldr	r3, [pc, #272]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011eb6:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8011eba:	4b43      	ldr	r3, [pc, #268]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ebc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011ec0:	4b41      	ldr	r3, [pc, #260]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ec2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011ec6:	4a40      	ldr	r2, [pc, #256]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ec8:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011eca:	4b3f      	ldr	r3, [pc, #252]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ecc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011ed0:	4a3d      	ldr	r2, [pc, #244]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ed2:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8011ed4:	4b3d      	ldr	r3, [pc, #244]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8011edc:	4b3a      	ldr	r3, [pc, #232]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011ee8:	4b39      	ldr	r3, [pc, #228]	; (8011fd0 <ResetMacParameters+0x1b0>)
 8011eea:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011eec:	4b39      	ldr	r3, [pc, #228]	; (8011fd4 <ResetMacParameters+0x1b4>)
 8011eee:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011ef0:	4b35      	ldr	r3, [pc, #212]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ef6:	1d3a      	adds	r2, r7, #4
 8011ef8:	4611      	mov	r1, r2
 8011efa:	4618      	mov	r0, r3
 8011efc:	f004 f8c1 	bl	8016082 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011f00:	4b32      	ldr	r3, [pc, #200]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011f08:	4b30      	ldr	r3, [pc, #192]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f0a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011f0e:	4b2f      	ldr	r3, [pc, #188]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011f14:	4b2c      	ldr	r3, [pc, #176]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f18:	4a2c      	ldr	r2, [pc, #176]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f1a:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f1e:	4b2a      	ldr	r3, [pc, #168]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011f20:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011f24:	4b29      	ldr	r3, [pc, #164]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f26:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011f2a:	4b27      	ldr	r3, [pc, #156]	; (8011fc8 <ResetMacParameters+0x1a8>)
 8011f2c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011f30:	4b26      	ldr	r3, [pc, #152]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f32:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011f36:	4b25      	ldr	r3, [pc, #148]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011f3e:	4b23      	ldr	r3, [pc, #140]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f40:	2201      	movs	r2, #1
 8011f42:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011f46:	4a21      	ldr	r2, [pc, #132]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f48:	4b20      	ldr	r3, [pc, #128]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f4a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011f4e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f56:	682b      	ldr	r3, [r5, #0]
 8011f58:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011f5a:	4b1c      	ldr	r3, [pc, #112]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011f62:	4b1a      	ldr	r3, [pc, #104]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f64:	2202      	movs	r2, #2
 8011f66:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8011f72:	4b16      	ldr	r3, [pc, #88]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f74:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d009      	beq.n	8011f90 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011f7c:	4b13      	ldr	r3, [pc, #76]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011f86:	4b11      	ldr	r3, [pc, #68]	; (8011fcc <ResetMacParameters+0x1ac>)
 8011f88:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011f90:	4b11      	ldr	r3, [pc, #68]	; (8011fd8 <ResetMacParameters+0x1b8>)
 8011f92:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011f94:	4b11      	ldr	r3, [pc, #68]	; (8011fdc <ResetMacParameters+0x1bc>)
 8011f96:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011f98:	4b11      	ldr	r3, [pc, #68]	; (8011fe0 <ResetMacParameters+0x1c0>)
 8011f9a:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011f9c:	4b11      	ldr	r3, [pc, #68]	; (8011fe4 <ResetMacParameters+0x1c4>)
 8011f9e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011fa0:	4b11      	ldr	r3, [pc, #68]	; (8011fe8 <ResetMacParameters+0x1c8>)
 8011fa2:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011fa4:	4b11      	ldr	r3, [pc, #68]	; (8011fec <ResetMacParameters+0x1cc>)
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011fa8:	4b11      	ldr	r3, [pc, #68]	; (8011ff0 <ResetMacParameters+0x1d0>)
 8011faa:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011fac:	4b11      	ldr	r3, [pc, #68]	; (8011ff4 <ResetMacParameters+0x1d4>)
 8011fae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011fb0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011fb4:	f107 0310 	add.w	r3, r7, #16
 8011fb8:	4a0f      	ldr	r2, [pc, #60]	; (8011ff8 <ResetMacParameters+0x1d8>)
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f002 f88a 	bl	80140d4 <LoRaMacClassBInit>
}
 8011fc0:	bf00      	nop
 8011fc2:	3738      	adds	r7, #56	; 0x38
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8011fc8:	20000ddc 	.word	0x20000ddc
 8011fcc:	200008d0 	.word	0x200008d0
 8011fd0:	20000fbc 	.word	0x20000fbc
 8011fd4:	20001050 	.word	0x20001050
 8011fd8:	20000d30 	.word	0x20000d30
 8011fdc:	20000cec 	.word	0x20000cec
 8011fe0:	20000d1c 	.word	0x20000d1c
 8011fe4:	20000d55 	.word	0x20000d55
 8011fe8:	20000eb0 	.word	0x20000eb0
 8011fec:	20000e1c 	.word	0x20000e1c
 8011ff0:	20000e20 	.word	0x20000e20
 8011ff4:	20000eb4 	.word	0x20000eb4
 8011ff8:	200014ec 	.word	0x200014ec

08011ffc <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f00a fc06 	bl	801c818 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801200c:	4b11      	ldr	r3, [pc, #68]	; (8012054 <RxWindowSetup+0x58>)
 801200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012010:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012012:	4b11      	ldr	r3, [pc, #68]	; (8012058 <RxWindowSetup+0x5c>)
 8012014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012018:	4a10      	ldr	r2, [pc, #64]	; (801205c <RxWindowSetup+0x60>)
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	4618      	mov	r0, r3
 801201e:	f004 f898 	bl	8016152 <RegionRxConfig>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d010      	beq.n	801204a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012028:	4b0d      	ldr	r3, [pc, #52]	; (8012060 <RxWindowSetup+0x64>)
 801202a:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 801202e:	4b0c      	ldr	r3, [pc, #48]	; (8012060 <RxWindowSetup+0x64>)
 8012030:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012034:	4b07      	ldr	r3, [pc, #28]	; (8012054 <RxWindowSetup+0x58>)
 8012036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012038:	4a07      	ldr	r2, [pc, #28]	; (8012058 <RxWindowSetup+0x5c>)
 801203a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801203c:	4610      	mov	r0, r2
 801203e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	7cda      	ldrb	r2, [r3, #19]
 8012044:	4b06      	ldr	r3, [pc, #24]	; (8012060 <RxWindowSetup+0x64>)
 8012046:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801204a:	bf00      	nop
 801204c:	3708      	adds	r7, #8
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	080206a0 	.word	0x080206a0
 8012058:	20000ddc 	.word	0x20000ddc
 801205c:	20000cf0 	.word	0x20000cf0
 8012060:	200008d0 	.word	0x200008d0

08012064 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012064:	b590      	push	{r4, r7, lr}
 8012066:	b083      	sub	sp, #12
 8012068:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801206a:	4b1b      	ldr	r3, [pc, #108]	; (80120d8 <OpenContinuousRxCWindow+0x74>)
 801206c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012070:	4b19      	ldr	r3, [pc, #100]	; (80120d8 <OpenContinuousRxCWindow+0x74>)
 8012072:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012076:	b259      	sxtb	r1, r3
 8012078:	4b17      	ldr	r3, [pc, #92]	; (80120d8 <OpenContinuousRxCWindow+0x74>)
 801207a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801207e:	4b16      	ldr	r3, [pc, #88]	; (80120d8 <OpenContinuousRxCWindow+0x74>)
 8012080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012082:	4c16      	ldr	r4, [pc, #88]	; (80120dc <OpenContinuousRxCWindow+0x78>)
 8012084:	9400      	str	r4, [sp, #0]
 8012086:	f004 f84a 	bl	801611e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801208a:	4b15      	ldr	r3, [pc, #84]	; (80120e0 <OpenContinuousRxCWindow+0x7c>)
 801208c:	2202      	movs	r2, #2
 801208e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012092:	4b13      	ldr	r3, [pc, #76]	; (80120e0 <OpenContinuousRxCWindow+0x7c>)
 8012094:	2201      	movs	r2, #1
 8012096:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801209a:	4b0f      	ldr	r3, [pc, #60]	; (80120d8 <OpenContinuousRxCWindow+0x74>)
 801209c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120a0:	4a10      	ldr	r2, [pc, #64]	; (80120e4 <OpenContinuousRxCWindow+0x80>)
 80120a2:	490e      	ldr	r1, [pc, #56]	; (80120dc <OpenContinuousRxCWindow+0x78>)
 80120a4:	4618      	mov	r0, r3
 80120a6:	f004 f854 	bl	8016152 <RegionRxConfig>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00f      	beq.n	80120d0 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80120b0:	4b0b      	ldr	r3, [pc, #44]	; (80120e0 <OpenContinuousRxCWindow+0x7c>)
 80120b2:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80120b6:	4b0a      	ldr	r3, [pc, #40]	; (80120e0 <OpenContinuousRxCWindow+0x7c>)
 80120b8:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 80120bc:	4b0a      	ldr	r3, [pc, #40]	; (80120e8 <OpenContinuousRxCWindow+0x84>)
 80120be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120c0:	2000      	movs	r0, #0
 80120c2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80120c4:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <OpenContinuousRxCWindow+0x7c>)
 80120c6:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80120ca:	4b05      	ldr	r3, [pc, #20]	; (80120e0 <OpenContinuousRxCWindow+0x7c>)
 80120cc:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80120d0:	bf00      	nop
 80120d2:	3704      	adds	r7, #4
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd90      	pop	{r4, r7, pc}
 80120d8:	20000ddc 	.word	0x20000ddc
 80120dc:	20000cb0 	.word	0x20000cb0
 80120e0:	200008d0 	.word	0x200008d0
 80120e4:	20000cf0 	.word	0x20000cf0
 80120e8:	080206a0 	.word	0x080206a0

080120ec <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b088      	sub	sp, #32
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	603b      	str	r3, [r7, #0]
 80120f8:	4613      	mov	r3, r2
 80120fa:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80120fc:	4b82      	ldr	r3, [pc, #520]	; (8012308 <PrepareFrame+0x21c>)
 80120fe:	2200      	movs	r2, #0
 8012100:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012102:	4b81      	ldr	r3, [pc, #516]	; (8012308 <PrepareFrame+0x21c>)
 8012104:	2200      	movs	r2, #0
 8012106:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801210a:	2300      	movs	r3, #0
 801210c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012112:	2300      	movs	r3, #0
 8012114:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d101      	bne.n	8012120 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 801211c:	2300      	movs	r3, #0
 801211e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012122:	461a      	mov	r2, r3
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	4879      	ldr	r0, [pc, #484]	; (801230c <PrepareFrame+0x220>)
 8012128:	f006 fa63 	bl	80185f2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801212c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801212e:	b2da      	uxtb	r2, r3
 8012130:	4b75      	ldr	r3, [pc, #468]	; (8012308 <PrepareFrame+0x21c>)
 8012132:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	781a      	ldrb	r2, [r3, #0]
 801213a:	4b73      	ldr	r3, [pc, #460]	; (8012308 <PrepareFrame+0x21c>)
 801213c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012146:	b2db      	uxtb	r3, r3
 8012148:	2b07      	cmp	r3, #7
 801214a:	f000 80b9 	beq.w	80122c0 <PrepareFrame+0x1d4>
 801214e:	2b07      	cmp	r3, #7
 8012150:	f300 80d0 	bgt.w	80122f4 <PrepareFrame+0x208>
 8012154:	2b02      	cmp	r3, #2
 8012156:	d006      	beq.n	8012166 <PrepareFrame+0x7a>
 8012158:	2b04      	cmp	r3, #4
 801215a:	f040 80cb 	bne.w	80122f4 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801215e:	4b6a      	ldr	r3, [pc, #424]	; (8012308 <PrepareFrame+0x21c>)
 8012160:	2201      	movs	r2, #1
 8012162:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012166:	4b68      	ldr	r3, [pc, #416]	; (8012308 <PrepareFrame+0x21c>)
 8012168:	2204      	movs	r2, #4
 801216a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801216e:	4b66      	ldr	r3, [pc, #408]	; (8012308 <PrepareFrame+0x21c>)
 8012170:	4a67      	ldr	r2, [pc, #412]	; (8012310 <PrepareFrame+0x224>)
 8012172:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012176:	4b64      	ldr	r3, [pc, #400]	; (8012308 <PrepareFrame+0x21c>)
 8012178:	22ff      	movs	r2, #255	; 0xff
 801217a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	781a      	ldrb	r2, [r3, #0]
 8012182:	4b61      	ldr	r3, [pc, #388]	; (8012308 <PrepareFrame+0x21c>)
 8012184:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012188:	4a5f      	ldr	r2, [pc, #380]	; (8012308 <PrepareFrame+0x21c>)
 801218a:	79fb      	ldrb	r3, [r7, #7]
 801218c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8012190:	4b60      	ldr	r3, [pc, #384]	; (8012314 <PrepareFrame+0x228>)
 8012192:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8012196:	4a5c      	ldr	r2, [pc, #368]	; (8012308 <PrepareFrame+0x21c>)
 8012198:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	781a      	ldrb	r2, [r3, #0]
 80121a0:	4b59      	ldr	r3, [pc, #356]	; (8012308 <PrepareFrame+0x21c>)
 80121a2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80121a6:	4b58      	ldr	r3, [pc, #352]	; (8012308 <PrepareFrame+0x21c>)
 80121a8:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80121ac:	4b56      	ldr	r3, [pc, #344]	; (8012308 <PrepareFrame+0x21c>)
 80121ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80121b2:	4b55      	ldr	r3, [pc, #340]	; (8012308 <PrepareFrame+0x21c>)
 80121b4:	4a55      	ldr	r2, [pc, #340]	; (801230c <PrepareFrame+0x220>)
 80121b6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80121ba:	f107 0318 	add.w	r3, r7, #24
 80121be:	4618      	mov	r0, r3
 80121c0:	f003 f890 	bl	80152e4 <LoRaMacCryptoGetFCntUp>
 80121c4:	4603      	mov	r3, r0
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80121ca:	2312      	movs	r3, #18
 80121cc:	e098      	b.n	8012300 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	4b4d      	ldr	r3, [pc, #308]	; (8012308 <PrepareFrame+0x21c>)
 80121d4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80121d8:	4b4b      	ldr	r3, [pc, #300]	; (8012308 <PrepareFrame+0x21c>)
 80121da:	2200      	movs	r2, #0
 80121dc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80121e0:	4b49      	ldr	r3, [pc, #292]	; (8012308 <PrepareFrame+0x21c>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	4a47      	ldr	r2, [pc, #284]	; (8012308 <PrepareFrame+0x21c>)
 80121ec:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80121f0:	f107 0314 	add.w	r3, r7, #20
 80121f4:	4618      	mov	r0, r3
 80121f6:	f002 fa2d 	bl	8014654 <LoRaMacCommandsGetSizeSerializedCmds>
 80121fa:	4603      	mov	r3, r0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d001      	beq.n	8012204 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012200:	2313      	movs	r3, #19
 8012202:	e07d      	b.n	8012300 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d076      	beq.n	80122f8 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801220a:	4b42      	ldr	r3, [pc, #264]	; (8012314 <PrepareFrame+0x228>)
 801220c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012210:	4618      	mov	r0, r3
 8012212:	f7fe fdb5 	bl	8010d80 <GetMaxAppPayloadWithoutFOptsLength>
 8012216:	4603      	mov	r3, r0
 8012218:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801221a:	4b3b      	ldr	r3, [pc, #236]	; (8012308 <PrepareFrame+0x21c>)
 801221c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012220:	2b00      	cmp	r3, #0
 8012222:	d01d      	beq.n	8012260 <PrepareFrame+0x174>
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	2b0f      	cmp	r3, #15
 8012228:	d81a      	bhi.n	8012260 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801222a:	f107 0314 	add.w	r3, r7, #20
 801222e:	4a3a      	ldr	r2, [pc, #232]	; (8012318 <PrepareFrame+0x22c>)
 8012230:	4619      	mov	r1, r3
 8012232:	200f      	movs	r0, #15
 8012234:	f002 fa24 	bl	8014680 <LoRaMacCommandsSerializeCmds>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d001      	beq.n	8012242 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801223e:	2313      	movs	r3, #19
 8012240:	e05e      	b.n	8012300 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	f003 030f 	and.w	r3, r3, #15
 8012248:	b2d9      	uxtb	r1, r3
 801224a:	68ba      	ldr	r2, [r7, #8]
 801224c:	7813      	ldrb	r3, [r2, #0]
 801224e:	f361 0303 	bfi	r3, r1, #0, #4
 8012252:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	781a      	ldrb	r2, [r3, #0]
 8012258:	4b2b      	ldr	r3, [pc, #172]	; (8012308 <PrepareFrame+0x21c>)
 801225a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801225e:	e04b      	b.n	80122f8 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012260:	4b29      	ldr	r3, [pc, #164]	; (8012308 <PrepareFrame+0x21c>)
 8012262:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012266:	2b00      	cmp	r3, #0
 8012268:	d010      	beq.n	801228c <PrepareFrame+0x1a0>
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	2b0f      	cmp	r3, #15
 801226e:	d90d      	bls.n	801228c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012270:	7ffb      	ldrb	r3, [r7, #31]
 8012272:	f107 0114 	add.w	r1, r7, #20
 8012276:	4a29      	ldr	r2, [pc, #164]	; (801231c <PrepareFrame+0x230>)
 8012278:	4618      	mov	r0, r3
 801227a:	f002 fa01 	bl	8014680 <LoRaMacCommandsSerializeCmds>
 801227e:	4603      	mov	r3, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d001      	beq.n	8012288 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012284:	2313      	movs	r3, #19
 8012286:	e03b      	b.n	8012300 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012288:	230a      	movs	r3, #10
 801228a:	e039      	b.n	8012300 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801228c:	7ffb      	ldrb	r3, [r7, #31]
 801228e:	f107 0114 	add.w	r1, r7, #20
 8012292:	4a22      	ldr	r2, [pc, #136]	; (801231c <PrepareFrame+0x230>)
 8012294:	4618      	mov	r0, r3
 8012296:	f002 f9f3 	bl	8014680 <LoRaMacCommandsSerializeCmds>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80122a0:	2313      	movs	r3, #19
 80122a2:	e02d      	b.n	8012300 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80122a4:	4b18      	ldr	r3, [pc, #96]	; (8012308 <PrepareFrame+0x21c>)
 80122a6:	2200      	movs	r2, #0
 80122a8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80122ac:	4b16      	ldr	r3, [pc, #88]	; (8012308 <PrepareFrame+0x21c>)
 80122ae:	4a1b      	ldr	r2, [pc, #108]	; (801231c <PrepareFrame+0x230>)
 80122b0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	4b13      	ldr	r3, [pc, #76]	; (8012308 <PrepareFrame+0x21c>)
 80122ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80122be:	e01b      	b.n	80122f8 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d01a      	beq.n	80122fc <PrepareFrame+0x210>
 80122c6:	4b10      	ldr	r3, [pc, #64]	; (8012308 <PrepareFrame+0x21c>)
 80122c8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d015      	beq.n	80122fc <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80122d0:	4813      	ldr	r0, [pc, #76]	; (8012320 <PrepareFrame+0x234>)
 80122d2:	4b0d      	ldr	r3, [pc, #52]	; (8012308 <PrepareFrame+0x21c>)
 80122d4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80122d8:	b29b      	uxth	r3, r3
 80122da:	461a      	mov	r2, r3
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	f006 f988 	bl	80185f2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80122e2:	4b09      	ldr	r3, [pc, #36]	; (8012308 <PrepareFrame+0x21c>)
 80122e4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	3301      	adds	r3, #1
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	4b06      	ldr	r3, [pc, #24]	; (8012308 <PrepareFrame+0x21c>)
 80122f0:	801a      	strh	r2, [r3, #0]
            }
            break;
 80122f2:	e003      	b.n	80122fc <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122f4:	2302      	movs	r3, #2
 80122f6:	e003      	b.n	8012300 <PrepareFrame+0x214>
            break;
 80122f8:	bf00      	nop
 80122fa:	e000      	b.n	80122fe <PrepareFrame+0x212>
            break;
 80122fc:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80122fe:	2300      	movs	r3, #0
}
 8012300:	4618      	mov	r0, r3
 8012302:	3720      	adds	r7, #32
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	200008d0 	.word	0x200008d0
 801230c:	20000a08 	.word	0x20000a08
 8012310:	200008d2 	.word	0x200008d2
 8012314:	20000ddc 	.word	0x20000ddc
 8012318:	200009e8 	.word	0x200009e8
 801231c:	20000d5c 	.word	0x20000d5c
 8012320:	200008d3 	.word	0x200008d3

08012324 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b08a      	sub	sp, #40	; 0x28
 8012328:	af00      	add	r7, sp, #0
 801232a:	4603      	mov	r3, r0
 801232c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801232e:	2303      	movs	r3, #3
 8012330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012334:	2300      	movs	r3, #0
 8012336:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8012338:	79fb      	ldrb	r3, [r7, #7]
 801233a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801233c:	4b47      	ldr	r3, [pc, #284]	; (801245c <SendFrameOnChannel+0x138>)
 801233e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012342:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012344:	4b45      	ldr	r3, [pc, #276]	; (801245c <SendFrameOnChannel+0x138>)
 8012346:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801234a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801234c:	4b43      	ldr	r3, [pc, #268]	; (801245c <SendFrameOnChannel+0x138>)
 801234e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012350:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012352:	4b42      	ldr	r3, [pc, #264]	; (801245c <SendFrameOnChannel+0x138>)
 8012354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012356:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012358:	4b41      	ldr	r3, [pc, #260]	; (8012460 <SendFrameOnChannel+0x13c>)
 801235a:	881b      	ldrh	r3, [r3, #0]
 801235c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801235e:	4b3f      	ldr	r3, [pc, #252]	; (801245c <SendFrameOnChannel+0x138>)
 8012360:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012364:	f107 020f 	add.w	r2, r7, #15
 8012368:	f107 0110 	add.w	r1, r7, #16
 801236c:	4b3d      	ldr	r3, [pc, #244]	; (8012464 <SendFrameOnChannel+0x140>)
 801236e:	f003 ff05 	bl	801617c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012372:	4b3b      	ldr	r3, [pc, #236]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012374:	2201      	movs	r2, #1
 8012376:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801237a:	4b38      	ldr	r3, [pc, #224]	; (801245c <SendFrameOnChannel+0x138>)
 801237c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012380:	b2da      	uxtb	r2, r3
 8012382:	4b37      	ldr	r3, [pc, #220]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012384:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8012388:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801238c:	4b34      	ldr	r3, [pc, #208]	; (8012460 <SendFrameOnChannel+0x13c>)
 801238e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8012392:	79fb      	ldrb	r3, [r7, #7]
 8012394:	4a32      	ldr	r2, [pc, #200]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012396:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801239a:	4b31      	ldr	r3, [pc, #196]	; (8012460 <SendFrameOnChannel+0x13c>)
 801239c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80123a0:	4a2f      	ldr	r2, [pc, #188]	; (8012460 <SendFrameOnChannel+0x13c>)
 80123a2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80123a6:	4b2e      	ldr	r3, [pc, #184]	; (8012460 <SendFrameOnChannel+0x13c>)
 80123a8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80123ac:	4a2c      	ldr	r2, [pc, #176]	; (8012460 <SendFrameOnChannel+0x13c>)
 80123ae:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80123b2:	f001 fefb 	bl	80141ac <LoRaMacClassBIsBeaconModeActive>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00b      	beq.n	80123d4 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80123bc:	4b28      	ldr	r3, [pc, #160]	; (8012460 <SendFrameOnChannel+0x13c>)
 80123be:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80123c2:	4618      	mov	r0, r3
 80123c4:	f001 ff5d 	bl	8014282 <LoRaMacClassBIsUplinkCollision>
 80123c8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d001      	beq.n	80123d4 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80123d0:	2310      	movs	r3, #16
 80123d2:	e03e      	b.n	8012452 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80123d4:	4b21      	ldr	r3, [pc, #132]	; (801245c <SendFrameOnChannel+0x138>)
 80123d6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d101      	bne.n	80123e2 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80123de:	f001 ff5a 	bl	8014296 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80123e2:	f001 fef4 	bl	80141ce <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80123e6:	4b1d      	ldr	r3, [pc, #116]	; (801245c <SendFrameOnChannel+0x138>)
 80123e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	4a1c      	ldr	r2, [pc, #112]	; (8012460 <SendFrameOnChannel+0x13c>)
 80123f0:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80123f4:	4611      	mov	r1, r2
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff fc7c 	bl	8011cf4 <SecureFrame>
 80123fc:	4603      	mov	r3, r0
 80123fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8012402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012406:	2b00      	cmp	r3, #0
 8012408:	d002      	beq.n	8012410 <SendFrameOnChannel+0xec>
    {
        return status;
 801240a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801240e:	e020      	b.n	8012452 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012410:	4b13      	ldr	r3, [pc, #76]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012412:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012416:	f043 0302 	orr.w	r3, r3, #2
 801241a:	4a11      	ldr	r2, [pc, #68]	; (8012460 <SendFrameOnChannel+0x13c>)
 801241c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8012420:	4b0f      	ldr	r3, [pc, #60]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012422:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012426:	f083 0301 	eor.w	r3, r3, #1
 801242a:	b2db      	uxtb	r3, r3
 801242c:	2b00      	cmp	r3, #0
 801242e:	d007      	beq.n	8012440 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012430:	4b0b      	ldr	r3, [pc, #44]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012432:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8012436:	3301      	adds	r3, #1
 8012438:	b2da      	uxtb	r2, r3
 801243a:	4b09      	ldr	r3, [pc, #36]	; (8012460 <SendFrameOnChannel+0x13c>)
 801243c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012440:	4b09      	ldr	r3, [pc, #36]	; (8012468 <SendFrameOnChannel+0x144>)
 8012442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012444:	4a06      	ldr	r2, [pc, #24]	; (8012460 <SendFrameOnChannel+0x13c>)
 8012446:	8812      	ldrh	r2, [r2, #0]
 8012448:	b2d2      	uxtb	r2, r2
 801244a:	4611      	mov	r1, r2
 801244c:	4807      	ldr	r0, [pc, #28]	; (801246c <SendFrameOnChannel+0x148>)
 801244e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3728      	adds	r7, #40	; 0x28
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	20000ddc 	.word	0x20000ddc
 8012460:	200008d0 	.word	0x200008d0
 8012464:	20000ce8 	.word	0x20000ce8
 8012468:	080206a0 	.word	0x080206a0
 801246c:	200008d2 	.word	0x200008d2

08012470 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	4603      	mov	r3, r0
 8012478:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801247a:	4b15      	ldr	r3, [pc, #84]	; (80124d0 <SetTxContinuousWave+0x60>)
 801247c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8012480:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012482:	4b14      	ldr	r3, [pc, #80]	; (80124d4 <SetTxContinuousWave+0x64>)
 8012484:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012488:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801248a:	4b12      	ldr	r3, [pc, #72]	; (80124d4 <SetTxContinuousWave+0x64>)
 801248c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012490:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012492:	4b10      	ldr	r3, [pc, #64]	; (80124d4 <SetTxContinuousWave+0x64>)
 8012494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012496:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012498:	4b0e      	ldr	r3, [pc, #56]	; (80124d4 <SetTxContinuousWave+0x64>)
 801249a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801249c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801249e:	88fb      	ldrh	r3, [r7, #6]
 80124a0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80124a2:	4b0c      	ldr	r3, [pc, #48]	; (80124d4 <SetTxContinuousWave+0x64>)
 80124a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80124a8:	f107 0208 	add.w	r2, r7, #8
 80124ac:	4611      	mov	r1, r2
 80124ae:	4618      	mov	r0, r3
 80124b0:	f003 ff13 	bl	80162da <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80124b4:	4b06      	ldr	r3, [pc, #24]	; (80124d0 <SetTxContinuousWave+0x60>)
 80124b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80124ba:	f043 0302 	orr.w	r3, r3, #2
 80124be:	4a04      	ldr	r2, [pc, #16]	; (80124d0 <SetTxContinuousWave+0x60>)
 80124c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3718      	adds	r7, #24
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	200008d0 	.word	0x200008d0
 80124d4:	20000ddc 	.word	0x20000ddc

080124d8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	4603      	mov	r3, r0
 80124e0:	6039      	str	r1, [r7, #0]
 80124e2:	80fb      	strh	r3, [r7, #6]
 80124e4:	4613      	mov	r3, r2
 80124e6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80124e8:	4b09      	ldr	r3, [pc, #36]	; (8012510 <SetTxContinuousWave1+0x38>)
 80124ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124ec:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80124f0:	88fa      	ldrh	r2, [r7, #6]
 80124f2:	6838      	ldr	r0, [r7, #0]
 80124f4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80124f6:	4b07      	ldr	r3, [pc, #28]	; (8012514 <SetTxContinuousWave1+0x3c>)
 80124f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80124fc:	f043 0302 	orr.w	r3, r3, #2
 8012500:	4a04      	ldr	r2, [pc, #16]	; (8012514 <SetTxContinuousWave1+0x3c>)
 8012502:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012506:	2300      	movs	r3, #0
}
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	080206a0 	.word	0x080206a0
 8012514:	200008d0 	.word	0x200008d0

08012518 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012522:	4b3e      	ldr	r3, [pc, #248]	; (801261c <RestoreNvmData+0x104>)
 8012524:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012528:	2b01      	cmp	r3, #1
 801252a:	d001      	beq.n	8012530 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 801252c:	2301      	movs	r3, #1
 801252e:	e071      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012530:	2124      	movs	r1, #36	; 0x24
 8012532:	483b      	ldr	r0, [pc, #236]	; (8012620 <RestoreNvmData+0x108>)
 8012534:	f006 f8b2 	bl	801869c <Crc32>
 8012538:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801253a:	4b39      	ldr	r3, [pc, #228]	; (8012620 <RestoreNvmData+0x108>)
 801253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	429a      	cmp	r2, r3
 8012542:	d001      	beq.n	8012548 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012544:	2317      	movs	r3, #23
 8012546:	e065      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012548:	2114      	movs	r1, #20
 801254a:	4836      	ldr	r0, [pc, #216]	; (8012624 <RestoreNvmData+0x10c>)
 801254c:	f006 f8a6 	bl	801869c <Crc32>
 8012550:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012552:	4b33      	ldr	r3, [pc, #204]	; (8012620 <RestoreNvmData+0x108>)
 8012554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	429a      	cmp	r2, r3
 801255a:	d001      	beq.n	8012560 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801255c:	2317      	movs	r3, #23
 801255e:	e059      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8012560:	21dc      	movs	r1, #220	; 0xdc
 8012562:	4831      	ldr	r0, [pc, #196]	; (8012628 <RestoreNvmData+0x110>)
 8012564:	f006 f89a 	bl	801869c <Crc32>
 8012568:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801256a:	4b2d      	ldr	r3, [pc, #180]	; (8012620 <RestoreNvmData+0x108>)
 801256c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	429a      	cmp	r2, r3
 8012574:	d001      	beq.n	801257a <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012576:	2317      	movs	r3, #23
 8012578:	e04c      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801257a:	21bc      	movs	r1, #188	; 0xbc
 801257c:	482b      	ldr	r0, [pc, #172]	; (801262c <RestoreNvmData+0x114>)
 801257e:	f006 f88d 	bl	801869c <Crc32>
 8012582:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012584:	4b26      	ldr	r3, [pc, #152]	; (8012620 <RestoreNvmData+0x108>)
 8012586:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	429a      	cmp	r2, r3
 801258e:	d001      	beq.n	8012594 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012590:	2317      	movs	r3, #23
 8012592:	e03f      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012594:	2190      	movs	r1, #144	; 0x90
 8012596:	4826      	ldr	r0, [pc, #152]	; (8012630 <RestoreNvmData+0x118>)
 8012598:	f006 f880 	bl	801869c <Crc32>
 801259c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801259e:	4b20      	ldr	r3, [pc, #128]	; (8012620 <RestoreNvmData+0x108>)
 80125a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d001      	beq.n	80125ae <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80125aa:	2317      	movs	r3, #23
 80125ac:	e032      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80125ae:	2114      	movs	r1, #20
 80125b0:	4820      	ldr	r0, [pc, #128]	; (8012634 <RestoreNvmData+0x11c>)
 80125b2:	f006 f873 	bl	801869c <Crc32>
 80125b6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80125b8:	4b19      	ldr	r3, [pc, #100]	; (8012620 <RestoreNvmData+0x108>)
 80125ba:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d001      	beq.n	80125c8 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80125c4:	2317      	movs	r3, #23
 80125c6:	e025      	b.n	8012614 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80125c8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80125cc:	4914      	ldr	r1, [pc, #80]	; (8012620 <RestoreNvmData+0x108>)
 80125ce:	481a      	ldr	r0, [pc, #104]	; (8012638 <RestoreNvmData+0x120>)
 80125d0:	f006 f80f 	bl	80185f2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80125d4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80125d8:	2100      	movs	r1, #0
 80125da:	4811      	ldr	r0, [pc, #68]	; (8012620 <RestoreNvmData+0x108>)
 80125dc:	f006 f844 	bl	8018668 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80125e0:	4b0e      	ldr	r3, [pc, #56]	; (801261c <RestoreNvmData+0x104>)
 80125e2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80125e6:	4b0d      	ldr	r3, [pc, #52]	; (801261c <RestoreNvmData+0x104>)
 80125e8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80125ec:	4b12      	ldr	r3, [pc, #72]	; (8012638 <RestoreNvmData+0x120>)
 80125ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f0:	4a0a      	ldr	r2, [pc, #40]	; (801261c <RestoreNvmData+0x104>)
 80125f2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80125f6:	4b10      	ldr	r3, [pc, #64]	; (8012638 <RestoreNvmData+0x120>)
 80125f8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80125fc:	4b07      	ldr	r3, [pc, #28]	; (801261c <RestoreNvmData+0x104>)
 80125fe:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012602:	4b06      	ldr	r3, [pc, #24]	; (801261c <RestoreNvmData+0x104>)
 8012604:	2201      	movs	r2, #1
 8012606:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801260a:	4b04      	ldr	r3, [pc, #16]	; (801261c <RestoreNvmData+0x104>)
 801260c:	2202      	movs	r2, #2
 801260e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	200008d0 	.word	0x200008d0
 8012620:	20001504 	.word	0x20001504
 8012624:	2000152c 	.word	0x2000152c
 8012628:	20001544 	.word	0x20001544
 801262c:	20001624 	.word	0x20001624
 8012630:	200016e4 	.word	0x200016e4
 8012634:	20001c14 	.word	0x20001c14
 8012638:	20000ddc 	.word	0x20000ddc

0801263c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <DetermineFrameType+0x16>
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012652:	2303      	movs	r3, #3
 8012654:	e03b      	b.n	80126ce <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	7b1b      	ldrb	r3, [r3, #12]
 801265a:	f003 030f 	and.w	r3, r3, #15
 801265e:	b2db      	uxtb	r3, r3
 8012660:	2b00      	cmp	r3, #0
 8012662:	d008      	beq.n	8012676 <DetermineFrameType+0x3a>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f893 3020 	ldrb.w	r3, [r3, #32]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d003      	beq.n	8012676 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	2200      	movs	r2, #0
 8012672:	701a      	strb	r2, [r3, #0]
 8012674:	e02a      	b.n	80126cc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801267c:	2b00      	cmp	r3, #0
 801267e:	d103      	bne.n	8012688 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	2201      	movs	r2, #1
 8012684:	701a      	strb	r2, [r3, #0]
 8012686:	e021      	b.n	80126cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	7b1b      	ldrb	r3, [r3, #12]
 801268c:	f003 030f 	and.w	r3, r3, #15
 8012690:	b2db      	uxtb	r3, r3
 8012692:	2b00      	cmp	r3, #0
 8012694:	d108      	bne.n	80126a8 <DetermineFrameType+0x6c>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f893 3020 	ldrb.w	r3, [r3, #32]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d103      	bne.n	80126a8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	2202      	movs	r2, #2
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	e011      	b.n	80126cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	7b1b      	ldrb	r3, [r3, #12]
 80126ac:	f003 030f 	and.w	r3, r3, #15
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d108      	bne.n	80126c8 <DetermineFrameType+0x8c>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d003      	beq.n	80126c8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	2203      	movs	r2, #3
 80126c4:	701a      	strb	r2, [r3, #0]
 80126c6:	e001      	b.n	80126cc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80126c8:	2318      	movs	r3, #24
 80126ca:	e000      	b.n	80126ce <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80126cc:	2300      	movs	r3, #0
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	370c      	adds	r7, #12
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bc80      	pop	{r7}
 80126d6:	4770      	bx	lr

080126d8 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80126d8:	b480      	push	{r7}
 80126da:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80126dc:	4b12      	ldr	r3, [pc, #72]	; (8012728 <CheckRetransUnconfirmedUplink+0x50>)
 80126de:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80126e2:	4b12      	ldr	r3, [pc, #72]	; (801272c <CheckRetransUnconfirmedUplink+0x54>)
 80126e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d301      	bcc.n	80126f0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80126ec:	2301      	movs	r3, #1
 80126ee:	e016      	b.n	801271e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80126f0:	4b0d      	ldr	r3, [pc, #52]	; (8012728 <CheckRetransUnconfirmedUplink+0x50>)
 80126f2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80126f6:	f003 0302 	and.w	r3, r3, #2
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00d      	beq.n	801271c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012700:	4b0a      	ldr	r3, [pc, #40]	; (801272c <CheckRetransUnconfirmedUplink+0x54>)
 8012702:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012706:	2b00      	cmp	r3, #0
 8012708:	d101      	bne.n	801270e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801270a:	2301      	movs	r3, #1
 801270c:	e007      	b.n	801271e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801270e:	4b06      	ldr	r3, [pc, #24]	; (8012728 <CheckRetransUnconfirmedUplink+0x50>)
 8012710:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8012714:	2b00      	cmp	r3, #0
 8012716:	d101      	bne.n	801271c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8012718:	2301      	movs	r3, #1
 801271a:	e000      	b.n	801271e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801271c:	2300      	movs	r3, #0
}
 801271e:	4618      	mov	r0, r3
 8012720:	46bd      	mov	sp, r7
 8012722:	bc80      	pop	{r7}
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop
 8012728:	200008d0 	.word	0x200008d0
 801272c:	20000ddc 	.word	0x20000ddc

08012730 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012730:	b480      	push	{r7}
 8012732:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012734:	4b0e      	ldr	r3, [pc, #56]	; (8012770 <CheckRetransConfirmedUplink+0x40>)
 8012736:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801273a:	4b0d      	ldr	r3, [pc, #52]	; (8012770 <CheckRetransConfirmedUplink+0x40>)
 801273c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012740:	429a      	cmp	r2, r3
 8012742:	d301      	bcc.n	8012748 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012744:	2301      	movs	r3, #1
 8012746:	e00f      	b.n	8012768 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012748:	4b09      	ldr	r3, [pc, #36]	; (8012770 <CheckRetransConfirmedUplink+0x40>)
 801274a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801274e:	f003 0302 	and.w	r3, r3, #2
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2b00      	cmp	r3, #0
 8012756:	d006      	beq.n	8012766 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012758:	4b05      	ldr	r3, [pc, #20]	; (8012770 <CheckRetransConfirmedUplink+0x40>)
 801275a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8012762:	2301      	movs	r3, #1
 8012764:	e000      	b.n	8012768 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8012766:	2300      	movs	r3, #0
}
 8012768:	4618      	mov	r0, r3
 801276a:	46bd      	mov	sp, r7
 801276c:	bc80      	pop	{r7}
 801276e:	4770      	bx	lr
 8012770:	200008d0 	.word	0x200008d0

08012774 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012774:	b480      	push	{r7}
 8012776:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012778:	4b1a      	ldr	r3, [pc, #104]	; (80127e4 <StopRetransmission+0x70>)
 801277a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801277e:	f003 0302 	and.w	r3, r3, #2
 8012782:	b2db      	uxtb	r3, r3
 8012784:	2b00      	cmp	r3, #0
 8012786:	d009      	beq.n	801279c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012788:	4b16      	ldr	r3, [pc, #88]	; (80127e4 <StopRetransmission+0x70>)
 801278a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801278e:	2b00      	cmp	r3, #0
 8012790:	d00e      	beq.n	80127b0 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012792:	4b14      	ldr	r3, [pc, #80]	; (80127e4 <StopRetransmission+0x70>)
 8012794:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012798:	2b01      	cmp	r3, #1
 801279a:	d009      	beq.n	80127b0 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801279c:	4b12      	ldr	r3, [pc, #72]	; (80127e8 <StopRetransmission+0x74>)
 801279e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d004      	beq.n	80127b0 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 80127a6:	4b10      	ldr	r3, [pc, #64]	; (80127e8 <StopRetransmission+0x74>)
 80127a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127aa:	3301      	adds	r3, #1
 80127ac:	4a0e      	ldr	r2, [pc, #56]	; (80127e8 <StopRetransmission+0x74>)
 80127ae:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80127b0:	4b0c      	ldr	r3, [pc, #48]	; (80127e4 <StopRetransmission+0x70>)
 80127b2:	2200      	movs	r2, #0
 80127b4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80127b8:	4b0a      	ldr	r3, [pc, #40]	; (80127e4 <StopRetransmission+0x70>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 80127c0:	4b08      	ldr	r3, [pc, #32]	; (80127e4 <StopRetransmission+0x70>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80127c8:	4b06      	ldr	r3, [pc, #24]	; (80127e4 <StopRetransmission+0x70>)
 80127ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80127ce:	f023 0302 	bic.w	r3, r3, #2
 80127d2:	4a04      	ldr	r2, [pc, #16]	; (80127e4 <StopRetransmission+0x70>)
 80127d4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80127d8:	2301      	movs	r3, #1
}
 80127da:	4618      	mov	r0, r3
 80127dc:	46bd      	mov	sp, r7
 80127de:	bc80      	pop	{r7}
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	200008d0 	.word	0x200008d0
 80127e8:	20000ddc 	.word	0x20000ddc

080127ec <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	4603      	mov	r3, r0
 80127f4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80127f6:	4b0b      	ldr	r3, [pc, #44]	; (8012824 <CallNvmDataChangeCallback+0x38>)
 80127f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00c      	beq.n	801281a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012800:	4b08      	ldr	r3, [pc, #32]	; (8012824 <CallNvmDataChangeCallback+0x38>)
 8012802:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012806:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8012808:	2b00      	cmp	r3, #0
 801280a:	d006      	beq.n	801281a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801280c:	4b05      	ldr	r3, [pc, #20]	; (8012824 <CallNvmDataChangeCallback+0x38>)
 801280e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012812:	68db      	ldr	r3, [r3, #12]
 8012814:	88fa      	ldrh	r2, [r7, #6]
 8012816:	4610      	mov	r0, r2
 8012818:	4798      	blx	r3
    }
}
 801281a:	bf00      	nop
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	200008d0 	.word	0x200008d0

08012828 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801282e:	4b1b      	ldr	r3, [pc, #108]	; (801289c <AckTimeoutRetriesProcess+0x74>)
 8012830:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8012834:	4b19      	ldr	r3, [pc, #100]	; (801289c <AckTimeoutRetriesProcess+0x74>)
 8012836:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801283a:	429a      	cmp	r2, r3
 801283c:	d229      	bcs.n	8012892 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801283e:	4b17      	ldr	r3, [pc, #92]	; (801289c <AckTimeoutRetriesProcess+0x74>)
 8012840:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8012844:	3301      	adds	r3, #1
 8012846:	b2da      	uxtb	r2, r3
 8012848:	4b14      	ldr	r3, [pc, #80]	; (801289c <AckTimeoutRetriesProcess+0x74>)
 801284a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801284e:	4b13      	ldr	r3, [pc, #76]	; (801289c <AckTimeoutRetriesProcess+0x74>)
 8012850:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	b2db      	uxtb	r3, r3
 801285a:	2b00      	cmp	r3, #0
 801285c:	d019      	beq.n	8012892 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801285e:	2322      	movs	r3, #34	; 0x22
 8012860:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012862:	4b0f      	ldr	r3, [pc, #60]	; (80128a0 <AckTimeoutRetriesProcess+0x78>)
 8012864:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012868:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801286a:	4b0d      	ldr	r3, [pc, #52]	; (80128a0 <AckTimeoutRetriesProcess+0x78>)
 801286c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012870:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012872:	4b0b      	ldr	r3, [pc, #44]	; (80128a0 <AckTimeoutRetriesProcess+0x78>)
 8012874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012878:	f107 0208 	add.w	r2, r7, #8
 801287c:	4611      	mov	r1, r2
 801287e:	4618      	mov	r0, r3
 8012880:	f003 fbd6 	bl	8016030 <RegionGetPhyParam>
 8012884:	4603      	mov	r3, r0
 8012886:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	b25a      	sxtb	r2, r3
 801288c:	4b04      	ldr	r3, [pc, #16]	; (80128a0 <AckTimeoutRetriesProcess+0x78>)
 801288e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8012892:	bf00      	nop
 8012894:	3710      	adds	r7, #16
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	200008d0 	.word	0x200008d0
 80128a0:	20000ddc 	.word	0x20000ddc

080128a4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80128aa:	4b14      	ldr	r3, [pc, #80]	; (80128fc <AckTimeoutRetriesFinalize+0x58>)
 80128ac:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80128b0:	f083 0301 	eor.w	r3, r3, #1
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d015      	beq.n	80128e6 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80128ba:	2302      	movs	r3, #2
 80128bc:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80128be:	4b10      	ldr	r3, [pc, #64]	; (8012900 <AckTimeoutRetriesFinalize+0x5c>)
 80128c0:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80128c2:	4b10      	ldr	r3, [pc, #64]	; (8012904 <AckTimeoutRetriesFinalize+0x60>)
 80128c4:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80128c6:	4b10      	ldr	r3, [pc, #64]	; (8012908 <AckTimeoutRetriesFinalize+0x64>)
 80128c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128cc:	1d3a      	adds	r2, r7, #4
 80128ce:	4611      	mov	r1, r2
 80128d0:	4618      	mov	r0, r3
 80128d2:	f003 fbd6 	bl	8016082 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80128d6:	4b09      	ldr	r3, [pc, #36]	; (80128fc <AckTimeoutRetriesFinalize+0x58>)
 80128d8:	2200      	movs	r2, #0
 80128da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80128de:	4b07      	ldr	r3, [pc, #28]	; (80128fc <AckTimeoutRetriesFinalize+0x58>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80128e6:	4b05      	ldr	r3, [pc, #20]	; (80128fc <AckTimeoutRetriesFinalize+0x58>)
 80128e8:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80128ec:	4b03      	ldr	r3, [pc, #12]	; (80128fc <AckTimeoutRetriesFinalize+0x58>)
 80128ee:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 80128f2:	bf00      	nop
 80128f4:	3710      	adds	r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	200008d0 	.word	0x200008d0
 8012900:	20000fbc 	.word	0x20000fbc
 8012904:	20001050 	.word	0x20001050
 8012908:	20000ddc 	.word	0x20000ddc

0801290c <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801290c:	b480      	push	{r7}
 801290e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012910:	4b0b      	ldr	r3, [pc, #44]	; (8012940 <IsRequestPending+0x34>)
 8012912:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012916:	f003 0304 	and.w	r3, r3, #4
 801291a:	b2db      	uxtb	r3, r3
 801291c:	2b00      	cmp	r3, #0
 801291e:	d107      	bne.n	8012930 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012920:	4b07      	ldr	r3, [pc, #28]	; (8012940 <IsRequestPending+0x34>)
 8012922:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801292c:	2b00      	cmp	r3, #0
 801292e:	d001      	beq.n	8012934 <IsRequestPending+0x28>
    {
        return 1;
 8012930:	2301      	movs	r3, #1
 8012932:	e000      	b.n	8012936 <IsRequestPending+0x2a>
    }
    return 0;
 8012934:	2300      	movs	r3, #0
}
 8012936:	4618      	mov	r0, r3
 8012938:	46bd      	mov	sp, r7
 801293a:	bc80      	pop	{r7}
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	200008d0 	.word	0x200008d0

08012944 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012944:	b590      	push	{r4, r7, lr}
 8012946:	b08f      	sub	sp, #60	; 0x3c
 8012948:	af02      	add	r7, sp, #8
 801294a:	6178      	str	r0, [r7, #20]
 801294c:	6139      	str	r1, [r7, #16]
 801294e:	4613      	mov	r3, r2
 8012950:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d002      	beq.n	801295e <LoRaMacInitialization+0x1a>
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d101      	bne.n	8012962 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801295e:	2303      	movs	r3, #3
 8012960:	e275      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d00b      	beq.n	8012982 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801296e:	2b00      	cmp	r3, #0
 8012970:	d007      	beq.n	8012982 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012976:	2b00      	cmp	r3, #0
 8012978:	d003      	beq.n	8012982 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801297e:	2b00      	cmp	r3, #0
 8012980:	d101      	bne.n	8012986 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012982:	2303      	movs	r3, #3
 8012984:	e263      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012986:	7bfb      	ldrb	r3, [r7, #15]
 8012988:	4618      	mov	r0, r3
 801298a:	f003 fb41 	bl	8016010 <RegionIsActive>
 801298e:	4603      	mov	r3, r0
 8012990:	f083 0301 	eor.w	r3, r3, #1
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b00      	cmp	r3, #0
 8012998:	d001      	beq.n	801299e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801299a:	2309      	movs	r3, #9
 801299c:	e257      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801299e:	6978      	ldr	r0, [r7, #20]
 80129a0:	f001 ffb8 	bl	8014914 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80129a4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80129a8:	2100      	movs	r1, #0
 80129aa:	48c7      	ldr	r0, [pc, #796]	; (8012cc8 <LoRaMacInitialization+0x384>)
 80129ac:	f005 fe5c 	bl	8018668 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80129b0:	f240 520c 	movw	r2, #1292	; 0x50c
 80129b4:	2100      	movs	r1, #0
 80129b6:	48c5      	ldr	r0, [pc, #788]	; (8012ccc <LoRaMacInitialization+0x388>)
 80129b8:	f005 fe56 	bl	8018668 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 80129bc:	4bc3      	ldr	r3, [pc, #780]	; (8012ccc <LoRaMacInitialization+0x388>)
 80129be:	2201      	movs	r2, #1
 80129c0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80129c4:	4bc1      	ldr	r3, [pc, #772]	; (8012ccc <LoRaMacInitialization+0x388>)
 80129c6:	2201      	movs	r2, #1
 80129c8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80129cc:	4abe      	ldr	r2, [pc, #760]	; (8012cc8 <LoRaMacInitialization+0x384>)
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
 80129d0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80129d4:	4bbc      	ldr	r3, [pc, #752]	; (8012cc8 <LoRaMacInitialization+0x384>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80129dc:	4bba      	ldr	r3, [pc, #744]	; (8012cc8 <LoRaMacInitialization+0x384>)
 80129de:	2200      	movs	r2, #0
 80129e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80129e4:	4bb8      	ldr	r3, [pc, #736]	; (8012cc8 <LoRaMacInitialization+0x384>)
 80129e6:	4aba      	ldr	r2, [pc, #744]	; (8012cd0 <LoRaMacInitialization+0x38c>)
 80129e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80129ec:	230f      	movs	r3, #15
 80129ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80129f2:	4bb5      	ldr	r3, [pc, #724]	; (8012cc8 <LoRaMacInitialization+0x384>)
 80129f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80129fc:	4611      	mov	r1, r2
 80129fe:	4618      	mov	r0, r3
 8012a00:	f003 fb16 	bl	8016030 <RegionGetPhyParam>
 8012a04:	4603      	mov	r3, r0
 8012a06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	bf14      	ite	ne
 8012a0e:	2301      	movne	r3, #1
 8012a10:	2300      	moveq	r3, #0
 8012a12:	b2da      	uxtb	r2, r3
 8012a14:	4bac      	ldr	r3, [pc, #688]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a16:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012a1a:	230a      	movs	r3, #10
 8012a1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a20:	4ba9      	ldr	r3, [pc, #676]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012a2a:	4611      	mov	r1, r2
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f003 faff 	bl	8016030 <RegionGetPhyParam>
 8012a32:	4603      	mov	r3, r0
 8012a34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a38:	b25a      	sxtb	r2, r3
 8012a3a:	4ba3      	ldr	r3, [pc, #652]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012a40:	2306      	movs	r3, #6
 8012a42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a46:	4ba0      	ldr	r3, [pc, #640]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012a50:	4611      	mov	r1, r2
 8012a52:	4618      	mov	r0, r3
 8012a54:	f003 faec 	bl	8016030 <RegionGetPhyParam>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5e:	b25a      	sxtb	r2, r3
 8012a60:	4b99      	ldr	r3, [pc, #612]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a62:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012a66:	2310      	movs	r3, #16
 8012a68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a6c:	4b96      	ldr	r3, [pc, #600]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012a76:	4611      	mov	r1, r2
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f003 fad9 	bl	8016030 <RegionGetPhyParam>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	4a90      	ldr	r2, [pc, #576]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012a8a:	2311      	movs	r3, #17
 8012a8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a90:	4b8d      	ldr	r3, [pc, #564]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012a9a:	4611      	mov	r1, r2
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f003 fac7 	bl	8016030 <RegionGetPhyParam>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa8:	4a87      	ldr	r2, [pc, #540]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012aae:	2312      	movs	r3, #18
 8012ab0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ab4:	4b84      	ldr	r3, [pc, #528]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f003 fab5 	bl	8016030 <RegionGetPhyParam>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012acc:	4a7e      	ldr	r2, [pc, #504]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012ace:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012ad2:	2313      	movs	r3, #19
 8012ad4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ad8:	4b7b      	ldr	r3, [pc, #492]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012ae2:	4611      	mov	r1, r2
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f003 faa3 	bl	8016030 <RegionGetPhyParam>
 8012aea:	4603      	mov	r3, r0
 8012aec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af0:	4a75      	ldr	r2, [pc, #468]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012af2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012af6:	2314      	movs	r3, #20
 8012af8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012afc:	4b72      	ldr	r3, [pc, #456]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012b06:	4611      	mov	r1, r2
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f003 fa91 	bl	8016030 <RegionGetPhyParam>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b14:	4a6c      	ldr	r2, [pc, #432]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012b1a:	2317      	movs	r3, #23
 8012b1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b20:	4b69      	ldr	r3, [pc, #420]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012b2a:	4611      	mov	r1, r2
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f003 fa7f 	bl	8016030 <RegionGetPhyParam>
 8012b32:	4603      	mov	r3, r0
 8012b34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	4b63      	ldr	r3, [pc, #396]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b3c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012b40:	2318      	movs	r3, #24
 8012b42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b46:	4b60      	ldr	r3, [pc, #384]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012b50:	4611      	mov	r1, r2
 8012b52:	4618      	mov	r0, r3
 8012b54:	f003 fa6c 	bl	8016030 <RegionGetPhyParam>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5e:	4a5a      	ldr	r2, [pc, #360]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b60:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	4a58      	ldr	r2, [pc, #352]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012b6c:	2319      	movs	r3, #25
 8012b6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b72:	4b55      	ldr	r3, [pc, #340]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f003 fa56 	bl	8016030 <RegionGetPhyParam>
 8012b84:	4603      	mov	r3, r0
 8012b86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	4b4e      	ldr	r3, [pc, #312]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b8e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	4b4c      	ldr	r3, [pc, #304]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012b98:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012b9c:	231e      	movs	r3, #30
 8012b9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ba2:	4b49      	ldr	r3, [pc, #292]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ba8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012bac:	4611      	mov	r1, r2
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f003 fa3e 	bl	8016030 <RegionGetPhyParam>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bba:	b2da      	uxtb	r2, r3
 8012bbc:	4b42      	ldr	r3, [pc, #264]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012bbe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012bc2:	231f      	movs	r3, #31
 8012bc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bc8:	4b3f      	ldr	r3, [pc, #252]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012bd2:	4611      	mov	r1, r2
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f003 fa2b 	bl	8016030 <RegionGetPhyParam>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	4b39      	ldr	r3, [pc, #228]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012be4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012be8:	2320      	movs	r3, #32
 8012bea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bee:	4b36      	ldr	r3, [pc, #216]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bf4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f003 fa18 	bl	8016030 <RegionGetPhyParam>
 8012c00:	4603      	mov	r3, r0
 8012c02:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	4a30      	ldr	r2, [pc, #192]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c08:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012c0c:	2321      	movs	r3, #33	; 0x21
 8012c0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c12:	4b2d      	ldr	r3, [pc, #180]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c1c:	4611      	mov	r1, r2
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f003 fa06 	bl	8016030 <RegionGetPhyParam>
 8012c24:	4603      	mov	r3, r0
 8012c26:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	4a27      	ldr	r2, [pc, #156]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c2c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012c30:	230b      	movs	r3, #11
 8012c32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c36:	4b24      	ldr	r3, [pc, #144]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f003 f9f4 	bl	8016030 <RegionGetPhyParam>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	4b1e      	ldr	r3, [pc, #120]	; (8012ccc <LoRaMacInitialization+0x388>)
 8012c52:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012c56:	230c      	movs	r3, #12
 8012c58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c5c:	4b1a      	ldr	r3, [pc, #104]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c66:	4611      	mov	r1, r2
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f003 f9e1 	bl	8016030 <RegionGetPhyParam>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8012c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	4b15      	ldr	r3, [pc, #84]	; (8012ccc <LoRaMacInitialization+0x388>)
 8012c78:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012c7c:	4b12      	ldr	r3, [pc, #72]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c7e:	2201      	movs	r2, #1
 8012c80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012c84:	4b10      	ldr	r3, [pc, #64]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c86:	220a      	movs	r2, #10
 8012c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012c8c:	4b0e      	ldr	r3, [pc, #56]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c8e:	2206      	movs	r2, #6
 8012c90:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012c94:	4b0c      	ldr	r3, [pc, #48]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c9a:	4a0b      	ldr	r2, [pc, #44]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012c9c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012c9e:	4b0a      	ldr	r3, [pc, #40]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012ca0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012ca4:	4b08      	ldr	r3, [pc, #32]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012ca6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012caa:	4b07      	ldr	r3, [pc, #28]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012cb0:	4a05      	ldr	r2, [pc, #20]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012cb4:	4b04      	ldr	r3, [pc, #16]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012cba:	4a03      	ldr	r2, [pc, #12]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012cbc:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012cbe:	4b02      	ldr	r3, [pc, #8]	; (8012cc8 <LoRaMacInitialization+0x384>)
 8012cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012cc4:	e006      	b.n	8012cd4 <LoRaMacInitialization+0x390>
 8012cc6:	bf00      	nop
 8012cc8:	20000ddc 	.word	0x20000ddc
 8012ccc:	200008d0 	.word	0x200008d0
 8012cd0:	01000300 	.word	0x01000300
 8012cd4:	4a60      	ldr	r2, [pc, #384]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012cd6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012cd8:	4b5f      	ldr	r3, [pc, #380]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012cde:	4a5e      	ldr	r2, [pc, #376]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012ce0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012ce2:	4b5d      	ldr	r3, [pc, #372]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012ce8:	4a5b      	ldr	r2, [pc, #364]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012cea:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012cec:	4b5a      	ldr	r3, [pc, #360]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012cee:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8012cf2:	4b59      	ldr	r3, [pc, #356]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012cf4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012cfe:	4b57      	ldr	r3, [pc, #348]	; (8012e5c <LoRaMacInitialization+0x518>)
 8012d00:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012d02:	4b57      	ldr	r3, [pc, #348]	; (8012e60 <LoRaMacInitialization+0x51c>)
 8012d04:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012d06:	4b54      	ldr	r3, [pc, #336]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d0c:	f107 0218 	add.w	r2, r7, #24
 8012d10:	4611      	mov	r1, r2
 8012d12:	4618      	mov	r0, r3
 8012d14:	f003 f9b5 	bl	8016082 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012d18:	4a52      	ldr	r2, [pc, #328]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8012d20:	f7ff f87e 	bl	8011e20 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012d24:	4b4c      	ldr	r3, [pc, #304]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8012d2c:	4a4d      	ldr	r2, [pc, #308]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012d34:	4b4b      	ldr	r3, [pc, #300]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012d36:	2200      	movs	r2, #0
 8012d38:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8012d3c:	4b49      	ldr	r3, [pc, #292]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012d44:	4b44      	ldr	r3, [pc, #272]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012d4a:	4b43      	ldr	r3, [pc, #268]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012d50:	2300      	movs	r3, #0
 8012d52:	9300      	str	r3, [sp, #0]
 8012d54:	4b44      	ldr	r3, [pc, #272]	; (8012e68 <LoRaMacInitialization+0x524>)
 8012d56:	2200      	movs	r2, #0
 8012d58:	f04f 31ff 	mov.w	r1, #4294967295
 8012d5c:	4843      	ldr	r0, [pc, #268]	; (8012e6c <LoRaMacInitialization+0x528>)
 8012d5e:	f009 fcb7 	bl	801c6d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012d62:	2300      	movs	r3, #0
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	4b42      	ldr	r3, [pc, #264]	; (8012e70 <LoRaMacInitialization+0x52c>)
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8012d6e:	4841      	ldr	r0, [pc, #260]	; (8012e74 <LoRaMacInitialization+0x530>)
 8012d70:	f009 fcae 	bl	801c6d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012d74:	2300      	movs	r3, #0
 8012d76:	9300      	str	r3, [sp, #0]
 8012d78:	4b3f      	ldr	r3, [pc, #252]	; (8012e78 <LoRaMacInitialization+0x534>)
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8012d80:	483e      	ldr	r0, [pc, #248]	; (8012e7c <LoRaMacInitialization+0x538>)
 8012d82:	f009 fca5 	bl	801c6d0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8012d86:	2300      	movs	r3, #0
 8012d88:	9300      	str	r3, [sp, #0]
 8012d8a:	4b3d      	ldr	r3, [pc, #244]	; (8012e80 <LoRaMacInitialization+0x53c>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8012d92:	483c      	ldr	r0, [pc, #240]	; (8012e84 <LoRaMacInitialization+0x540>)
 8012d94:	f009 fc9c 	bl	801c6d0 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012d98:	4c2f      	ldr	r4, [pc, #188]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012d9a:	463b      	mov	r3, r7
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f009 f807 	bl	801bdb0 <SysTimeGetMcuTime>
 8012da2:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8012da6:	463a      	mov	r2, r7
 8012da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012dac:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012db0:	4b2c      	ldr	r3, [pc, #176]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012db2:	4a35      	ldr	r2, [pc, #212]	; (8012e88 <LoRaMacInitialization+0x544>)
 8012db4:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012db8:	4b2a      	ldr	r3, [pc, #168]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012dba:	4a34      	ldr	r2, [pc, #208]	; (8012e8c <LoRaMacInitialization+0x548>)
 8012dbc:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012dc0:	4b28      	ldr	r3, [pc, #160]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012dc2:	4a33      	ldr	r2, [pc, #204]	; (8012e90 <LoRaMacInitialization+0x54c>)
 8012dc4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012dc8:	4b26      	ldr	r3, [pc, #152]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012dca:	4a32      	ldr	r2, [pc, #200]	; (8012e94 <LoRaMacInitialization+0x550>)
 8012dcc:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012dd0:	4b24      	ldr	r3, [pc, #144]	; (8012e64 <LoRaMacInitialization+0x520>)
 8012dd2:	4a31      	ldr	r2, [pc, #196]	; (8012e98 <LoRaMacInitialization+0x554>)
 8012dd4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012dd8:	4b30      	ldr	r3, [pc, #192]	; (8012e9c <LoRaMacInitialization+0x558>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4830      	ldr	r0, [pc, #192]	; (8012ea0 <LoRaMacInitialization+0x55c>)
 8012dde:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	4619      	mov	r1, r3
 8012de6:	482f      	ldr	r0, [pc, #188]	; (8012ea4 <LoRaMacInitialization+0x560>)
 8012de8:	f7fa fefc 	bl	800dbe4 <SecureElementInit>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d001      	beq.n	8012df6 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012df2:	2311      	movs	r3, #17
 8012df4:	e02b      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012df6:	4818      	ldr	r0, [pc, #96]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012df8:	f002 fa38 	bl	801526c <LoRaMacCryptoInit>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e02:	2311      	movs	r3, #17
 8012e04:	e023      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012e06:	f001 fb57 	bl	80144b8 <LoRaMacCommandsInit>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d001      	beq.n	8012e14 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e10:	2313      	movs	r3, #19
 8012e12:	e01c      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012e14:	4824      	ldr	r0, [pc, #144]	; (8012ea8 <LoRaMacInitialization+0x564>)
 8012e16:	f002 faf3 	bl	8015400 <LoRaMacCryptoSetMulticastReference>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d001      	beq.n	8012e24 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e20:	2311      	movs	r3, #17
 8012e22:	e014      	b.n	8012e4e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012e24:	4b1d      	ldr	r3, [pc, #116]	; (8012e9c <LoRaMacInitialization+0x558>)
 8012e26:	695b      	ldr	r3, [r3, #20]
 8012e28:	4798      	blx	r3
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f005 fbbb 	bl	80185a8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012e32:	4b1a      	ldr	r3, [pc, #104]	; (8012e9c <LoRaMacInitialization+0x558>)
 8012e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e36:	4a08      	ldr	r2, [pc, #32]	; (8012e58 <LoRaMacInitialization+0x514>)
 8012e38:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012e3c:	4610      	mov	r0, r2
 8012e3e:	4798      	blx	r3
    Radio.Sleep( );
 8012e40:	4b16      	ldr	r3, [pc, #88]	; (8012e9c <LoRaMacInitialization+0x558>)
 8012e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e44:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012e46:	2001      	movs	r0, #1
 8012e48:	f7fd faf2 	bl	8010430 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012e4c:	2300      	movs	r3, #0
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3734      	adds	r7, #52	; 0x34
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd90      	pop	{r4, r7, pc}
 8012e56:	bf00      	nop
 8012e58:	20000ddc 	.word	0x20000ddc
 8012e5c:	20000fbc 	.word	0x20000fbc
 8012e60:	20001050 	.word	0x20001050
 8012e64:	200008d0 	.word	0x200008d0
 8012e68:	0801099d 	.word	0x0801099d
 8012e6c:	20000c38 	.word	0x20000c38
 8012e70:	08010a11 	.word	0x08010a11
 8012e74:	20000c50 	.word	0x20000c50
 8012e78:	08010a7d 	.word	0x08010a7d
 8012e7c:	20000c68 	.word	0x20000c68
 8012e80:	08010af1 	.word	0x08010af1
 8012e84:	20000cc8 	.word	0x20000cc8
 8012e88:	0800f5ed 	.word	0x0800f5ed
 8012e8c:	0800f655 	.word	0x0800f655
 8012e90:	0800f70d 	.word	0x0800f70d
 8012e94:	0800f6d1 	.word	0x0800f6d1
 8012e98:	0800f749 	.word	0x0800f749
 8012e9c:	080206a0 	.word	0x080206a0
 8012ea0:	20000c1c 	.word	0x20000c1c
 8012ea4:	20000efc 	.word	0x20000efc
 8012ea8:	20000eb4 	.word	0x20000eb4

08012eac <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012eac:	b480      	push	{r7}
 8012eae:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012eb0:	4b04      	ldr	r3, [pc, #16]	; (8012ec4 <LoRaMacStart+0x18>)
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8012eb8:	2300      	movs	r3, #0
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bc80      	pop	{r7}
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	200008d0 	.word	0x200008d0

08012ec8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8012ecc:	f7fd fa9a 	bl	8010404 <LoRaMacIsBusy>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	f083 0301 	eor.w	r3, r3, #1
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d005      	beq.n	8012ee8 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8012edc:	4b07      	ldr	r3, [pc, #28]	; (8012efc <LoRaMacStop+0x34>)
 8012ede:	2201      	movs	r2, #1
 8012ee0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	e007      	b.n	8012ef8 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012ee8:	4b04      	ldr	r3, [pc, #16]	; (8012efc <LoRaMacStop+0x34>)
 8012eea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012eee:	2b01      	cmp	r3, #1
 8012ef0:	d101      	bne.n	8012ef6 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	e000      	b.n	8012ef8 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8012ef6:	2301      	movs	r3, #1
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	200008d0 	.word	0x200008d0

08012f00 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012f04:	4812      	ldr	r0, [pc, #72]	; (8012f50 <LoRaMacHalt+0x50>)
 8012f06:	f009 fc87 	bl	801c818 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8012f0a:	4812      	ldr	r0, [pc, #72]	; (8012f54 <LoRaMacHalt+0x54>)
 8012f0c:	f009 fc84 	bl	801c818 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012f10:	4811      	ldr	r0, [pc, #68]	; (8012f58 <LoRaMacHalt+0x58>)
 8012f12:	f009 fc81 	bl	801c818 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012f16:	4811      	ldr	r0, [pc, #68]	; (8012f5c <LoRaMacHalt+0x5c>)
 8012f18:	f009 fc7e 	bl	801c818 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012f1c:	f001 f957 	bl	80141ce <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012f20:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <LoRaMacHalt+0x60>)
 8012f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f24:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8012f26:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <LoRaMacHalt+0x64>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8012f2e:	480e      	ldr	r0, [pc, #56]	; (8012f68 <LoRaMacHalt+0x68>)
 8012f30:	f7fd fc2e 	bl	8010790 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012f34:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012f38:	490b      	ldr	r1, [pc, #44]	; (8012f68 <LoRaMacHalt+0x68>)
 8012f3a:	480c      	ldr	r0, [pc, #48]	; (8012f6c <LoRaMacHalt+0x6c>)
 8012f3c:	f005 fb59 	bl	80185f2 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012f40:	4b08      	ldr	r3, [pc, #32]	; (8012f64 <LoRaMacHalt+0x64>)
 8012f42:	2201      	movs	r2, #1
 8012f44:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	20000c38 	.word	0x20000c38
 8012f54:	20000c50 	.word	0x20000c50
 8012f58:	20000c68 	.word	0x20000c68
 8012f5c:	20000cc8 	.word	0x20000cc8
 8012f60:	080206a0 	.word	0x080206a0
 8012f64:	200008d0 	.word	0x200008d0
 8012f68:	20000ddc 	.word	0x20000ddc
 8012f6c:	20001504 	.word	0x20001504

08012f70 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b08a      	sub	sp, #40	; 0x28
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	4603      	mov	r3, r0
 8012f78:	6039      	str	r1, [r7, #0]
 8012f7a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012f7c:	4b3e      	ldr	r3, [pc, #248]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f80:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012f82:	4b3d      	ldr	r3, [pc, #244]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012f84:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8012f88:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012f8a:	4b3b      	ldr	r3, [pc, #236]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012f8c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8012f90:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8012f92:	2300      	movs	r3, #0
 8012f94:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d101      	bne.n	8012fa0 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f9c:	2303      	movs	r3, #3
 8012f9e:	e066      	b.n	801306e <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012fa0:	4b35      	ldr	r3, [pc, #212]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fa2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012fa6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012fac:	4b32      	ldr	r3, [pc, #200]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fae:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012fb2:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012fb4:	4b30      	ldr	r3, [pc, #192]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fb8:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012fba:	4b30      	ldr	r3, [pc, #192]	; (801307c <LoRaMacQueryTxPossible+0x10c>)
 8012fbc:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8012fc0:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012fc2:	4b2e      	ldr	r3, [pc, #184]	; (801307c <LoRaMacQueryTxPossible+0x10c>)
 8012fc4:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8012fc8:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012fca:	4b2b      	ldr	r3, [pc, #172]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fcc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012fd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012fd4:	4b28      	ldr	r3, [pc, #160]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fd6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012fda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012fde:	4b26      	ldr	r3, [pc, #152]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012fe8:	4b23      	ldr	r3, [pc, #140]	; (8013078 <LoRaMacQueryTxPossible+0x108>)
 8012fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012ff2:	f107 0310 	add.w	r3, r7, #16
 8012ff6:	f107 020e 	add.w	r2, r7, #14
 8012ffa:	f107 010f 	add.w	r1, r7, #15
 8012ffe:	f107 0014 	add.w	r0, r7, #20
 8013002:	f001 f84f 	bl	80140a4 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801300a:	4618      	mov	r0, r3
 801300c:	f7fd feb8 	bl	8010d80 <GetMaxAppPayloadWithoutFOptsLength>
 8013010:	4603      	mov	r3, r0
 8013012:	461a      	mov	r2, r3
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013018:	f107 0308 	add.w	r3, r7, #8
 801301c:	4618      	mov	r0, r3
 801301e:	f001 fb19 	bl	8014654 <LoRaMacCommandsGetSizeSerializedCmds>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d001      	beq.n	801302c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013028:	2313      	movs	r3, #19
 801302a:	e020      	b.n	801306e <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	2b0f      	cmp	r3, #15
 8013030:	d819      	bhi.n	8013066 <LoRaMacQueryTxPossible+0xf6>
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	785b      	ldrb	r3, [r3, #1]
 8013036:	461a      	mov	r2, r3
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	429a      	cmp	r2, r3
 801303c:	d313      	bcc.n	8013066 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	785a      	ldrb	r2, [r3, #1]
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	b2db      	uxtb	r3, r3
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	b2da      	uxtb	r2, r3
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	785b      	ldrb	r3, [r3, #1]
 8013052:	4619      	mov	r1, r3
 8013054:	79fa      	ldrb	r2, [r7, #7]
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	4413      	add	r3, r2
 801305a:	4299      	cmp	r1, r3
 801305c:	d301      	bcc.n	8013062 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	e005      	b.n	801306e <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013062:	2308      	movs	r3, #8
 8013064:	e003      	b.n	801306e <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	2200      	movs	r2, #0
 801306a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801306c:	2308      	movs	r3, #8
    }
}
 801306e:	4618      	mov	r0, r3
 8013070:	3728      	adds	r7, #40	; 0x28
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	20000ddc 	.word	0x20000ddc
 801307c:	200008d0 	.word	0x200008d0

08013080 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013080:	b590      	push	{r4, r7, lr}
 8013082:	b087      	sub	sp, #28
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013088:	2300      	movs	r3, #0
 801308a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d101      	bne.n	8013096 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013092:	2303      	movs	r3, #3
 8013094:	e171      	b.n	801337a <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	2b37      	cmp	r3, #55	; 0x37
 801309c:	f200 8166 	bhi.w	801336c <LoRaMacMibGetRequestConfirm+0x2ec>
 80130a0:	a201      	add	r2, pc, #4	; (adr r2, 80130a8 <LoRaMacMibGetRequestConfirm+0x28>)
 80130a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a6:	bf00      	nop
 80130a8:	08013189 	.word	0x08013189
 80130ac:	08013195 	.word	0x08013195
 80130b0:	080131a1 	.word	0x080131a1
 80130b4:	080131ad 	.word	0x080131ad
 80130b8:	080131b9 	.word	0x080131b9
 80130bc:	080131c5 	.word	0x080131c5
 80130c0:	080131d1 	.word	0x080131d1
 80130c4:	0801336d 	.word	0x0801336d
 80130c8:	0801336d 	.word	0x0801336d
 80130cc:	0801336d 	.word	0x0801336d
 80130d0:	0801336d 	.word	0x0801336d
 80130d4:	0801336d 	.word	0x0801336d
 80130d8:	0801336d 	.word	0x0801336d
 80130dc:	0801336d 	.word	0x0801336d
 80130e0:	0801336d 	.word	0x0801336d
 80130e4:	080131dd 	.word	0x080131dd
 80130e8:	080131e9 	.word	0x080131e9
 80130ec:	080131f5 	.word	0x080131f5
 80130f0:	08013217 	.word	0x08013217
 80130f4:	08013229 	.word	0x08013229
 80130f8:	0801323b 	.word	0x0801323b
 80130fc:	0801324d 	.word	0x0801324d
 8013100:	08013281 	.word	0x08013281
 8013104:	0801325f 	.word	0x0801325f
 8013108:	080132a3 	.word	0x080132a3
 801310c:	080132af 	.word	0x080132af
 8013110:	080132b9 	.word	0x080132b9
 8013114:	080132c3 	.word	0x080132c3
 8013118:	080132cd 	.word	0x080132cd
 801311c:	080132d7 	.word	0x080132d7
 8013120:	080132e1 	.word	0x080132e1
 8013124:	080132ed 	.word	0x080132ed
 8013128:	08013305 	.word	0x08013305
 801312c:	080132f9 	.word	0x080132f9
 8013130:	08013311 	.word	0x08013311
 8013134:	0801331b 	.word	0x0801331b
 8013138:	08013327 	.word	0x08013327
 801313c:	08013341 	.word	0x08013341
 8013140:	08013331 	.word	0x08013331
 8013144:	08013339 	.word	0x08013339
 8013148:	0801336d 	.word	0x0801336d
 801314c:	0801334d 	.word	0x0801334d
 8013150:	0801336d 	.word	0x0801336d
 8013154:	0801336d 	.word	0x0801336d
 8013158:	0801336d 	.word	0x0801336d
 801315c:	0801336d 	.word	0x0801336d
 8013160:	0801336d 	.word	0x0801336d
 8013164:	0801336d 	.word	0x0801336d
 8013168:	0801336d 	.word	0x0801336d
 801316c:	0801336d 	.word	0x0801336d
 8013170:	0801336d 	.word	0x0801336d
 8013174:	0801336d 	.word	0x0801336d
 8013178:	0801336d 	.word	0x0801336d
 801317c:	0801336d 	.word	0x0801336d
 8013180:	0801336d 	.word	0x0801336d
 8013184:	08013361 	.word	0x08013361
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013188:	4b7e      	ldr	r3, [pc, #504]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 801318a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	711a      	strb	r2, [r3, #4]
            break;
 8013192:	e0f1      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013194:	4b7b      	ldr	r3, [pc, #492]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013196:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	711a      	strb	r2, [r3, #4]
            break;
 801319e:	e0eb      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80131a0:	f7fa ff8e 	bl	800e0c0 <SecureElementGetDevEui>
 80131a4:	4602      	mov	r2, r0
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	605a      	str	r2, [r3, #4]
            break;
 80131aa:	e0e5      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80131ac:	f7fa ffaa 	bl	800e104 <SecureElementGetJoinEui>
 80131b0:	4602      	mov	r2, r0
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	605a      	str	r2, [r3, #4]
            break;
 80131b6:	e0df      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80131b8:	4b72      	ldr	r3, [pc, #456]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80131ba:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	711a      	strb	r2, [r3, #4]
            break;
 80131c2:	e0d9      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80131c4:	4b6f      	ldr	r3, [pc, #444]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80131c6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	605a      	str	r2, [r3, #4]
            break;
 80131ce:	e0d3      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80131d0:	4b6c      	ldr	r3, [pc, #432]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80131d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	605a      	str	r2, [r3, #4]
            break;
 80131da:	e0cd      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80131dc:	4b69      	ldr	r3, [pc, #420]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80131de:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	711a      	strb	r2, [r3, #4]
            break;
 80131e6:	e0c7      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80131e8:	4b66      	ldr	r3, [pc, #408]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80131ea:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	711a      	strb	r2, [r3, #4]
            break;
 80131f2:	e0c1      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80131f4:	231d      	movs	r3, #29
 80131f6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80131f8:	4b62      	ldr	r3, [pc, #392]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80131fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131fe:	f107 0210 	add.w	r2, r7, #16
 8013202:	4611      	mov	r1, r2
 8013204:	4618      	mov	r0, r3
 8013206:	f002 ff13 	bl	8016030 <RegionGetPhyParam>
 801320a:	4603      	mov	r3, r0
 801320c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	605a      	str	r2, [r3, #4]
            break;
 8013214:	e0b0      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4a5a      	ldr	r2, [pc, #360]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 801321a:	3304      	adds	r3, #4
 801321c:	3264      	adds	r2, #100	; 0x64
 801321e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013222:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013226:	e0a7      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4a56      	ldr	r2, [pc, #344]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 801322c:	3304      	adds	r3, #4
 801322e:	32a8      	adds	r2, #168	; 0xa8
 8013230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013234:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013238:	e09e      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4a51      	ldr	r2, [pc, #324]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 801323e:	3304      	adds	r3, #4
 8013240:	326c      	adds	r2, #108	; 0x6c
 8013242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013246:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801324a:	e095      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	4a4d      	ldr	r2, [pc, #308]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013250:	3304      	adds	r3, #4
 8013252:	32b0      	adds	r2, #176	; 0xb0
 8013254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013258:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801325c:	e08c      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801325e:	231b      	movs	r3, #27
 8013260:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013262:	4b48      	ldr	r3, [pc, #288]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013268:	f107 0210 	add.w	r2, r7, #16
 801326c:	4611      	mov	r1, r2
 801326e:	4618      	mov	r0, r3
 8013270:	f002 fede 	bl	8016030 <RegionGetPhyParam>
 8013274:	4603      	mov	r3, r0
 8013276:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	605a      	str	r2, [r3, #4]
            break;
 801327e:	e07b      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013280:	231a      	movs	r3, #26
 8013282:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013284:	4b3f      	ldr	r3, [pc, #252]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801328a:	f107 0210 	add.w	r2, r7, #16
 801328e:	4611      	mov	r1, r2
 8013290:	4618      	mov	r0, r3
 8013292:	f002 fecd 	bl	8016030 <RegionGetPhyParam>
 8013296:	4603      	mov	r3, r0
 8013298:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	605a      	str	r2, [r3, #4]
            break;
 80132a0:	e06a      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80132a2:	4b38      	ldr	r3, [pc, #224]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132a4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	711a      	strb	r2, [r3, #4]
            break;
 80132ac:	e064      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80132ae:	4b35      	ldr	r3, [pc, #212]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	605a      	str	r2, [r3, #4]
            break;
 80132b6:	e05f      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80132b8:	4b32      	ldr	r3, [pc, #200]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	605a      	str	r2, [r3, #4]
            break;
 80132c0:	e05a      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80132c2:	4b30      	ldr	r3, [pc, #192]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	605a      	str	r2, [r3, #4]
            break;
 80132ca:	e055      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80132cc:	4b2d      	ldr	r3, [pc, #180]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	605a      	str	r2, [r3, #4]
            break;
 80132d4:	e050      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80132d6:	4b2b      	ldr	r3, [pc, #172]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	605a      	str	r2, [r3, #4]
            break;
 80132de:	e04b      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80132e0:	4b28      	ldr	r3, [pc, #160]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132e2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	711a      	strb	r2, [r3, #4]
            break;
 80132ea:	e045      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80132ec:	4b25      	ldr	r3, [pc, #148]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132ee:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	711a      	strb	r2, [r3, #4]
            break;
 80132f6:	e03f      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80132f8:	4b22      	ldr	r3, [pc, #136]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 80132fa:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	711a      	strb	r2, [r3, #4]
            break;
 8013302:	e039      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013304:	4b1f      	ldr	r3, [pc, #124]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013306:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	711a      	strb	r2, [r3, #4]
            break;
 801330e:	e033      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013310:	4b1c      	ldr	r3, [pc, #112]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	605a      	str	r2, [r3, #4]
            break;
 8013318:	e02e      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801331a:	4b1a      	ldr	r3, [pc, #104]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 801331c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	711a      	strb	r2, [r3, #4]
            break;
 8013324:	e028      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013326:	4b17      	ldr	r3, [pc, #92]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013328:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	605a      	str	r2, [r3, #4]
            break;
 801332e:	e023      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4a14      	ldr	r2, [pc, #80]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013334:	605a      	str	r2, [r3, #4]
            break;
 8013336:	e01f      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4a13      	ldr	r2, [pc, #76]	; (8013388 <LoRaMacMibGetRequestConfirm+0x308>)
 801333c:	605a      	str	r2, [r3, #4]
            break;
 801333e:	e01b      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013340:	4b10      	ldr	r3, [pc, #64]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013342:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	605a      	str	r2, [r3, #4]
            break;
 801334a:	e015      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4a0d      	ldr	r2, [pc, #52]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013350:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8013354:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013356:	687c      	ldr	r4, [r7, #4]
 8013358:	f002 fff2 	bl	8016340 <RegionGetVersion>
 801335c:	60a0      	str	r0, [r4, #8]
            break;
 801335e:	e00b      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8013360:	4b08      	ldr	r3, [pc, #32]	; (8013384 <LoRaMacMibGetRequestConfirm+0x304>)
 8013362:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	605a      	str	r2, [r3, #4]
            break;
 801336a:	e005      	b.n	8013378 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f000 ff45 	bl	80141fc <LoRaMacClassBMibGetRequestConfirm>
 8013372:	4603      	mov	r3, r0
 8013374:	75fb      	strb	r3, [r7, #23]
            break;
 8013376:	bf00      	nop
        }
    }
    return status;
 8013378:	7dfb      	ldrb	r3, [r7, #23]
}
 801337a:	4618      	mov	r0, r3
 801337c:	371c      	adds	r7, #28
 801337e:	46bd      	mov	sp, r7
 8013380:	bd90      	pop	{r4, r7, pc}
 8013382:	bf00      	nop
 8013384:	20000ddc 	.word	0x20000ddc
 8013388:	20001504 	.word	0x20001504

0801338c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013394:	2300      	movs	r3, #0
 8013396:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d101      	bne.n	80133a2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801339e:	2303      	movs	r3, #3
 80133a0:	e348      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80133a2:	4bb7      	ldr	r3, [pc, #732]	; (8013680 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80133a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80133a8:	f003 0302 	and.w	r3, r3, #2
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d001      	beq.n	80133b4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80133b0:	2301      	movs	r3, #1
 80133b2:	e33f      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	2b37      	cmp	r3, #55	; 0x37
 80133ba:	f200 8319 	bhi.w	80139f0 <LoRaMacMibSetRequestConfirm+0x664>
 80133be:	a201      	add	r2, pc, #4	; (adr r2, 80133c4 <LoRaMacMibSetRequestConfirm+0x38>)
 80133c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c4:	080134a5 	.word	0x080134a5
 80133c8:	080134b5 	.word	0x080134b5
 80133cc:	080134cf 	.word	0x080134cf
 80133d0:	080134e7 	.word	0x080134e7
 80133d4:	080134ff 	.word	0x080134ff
 80133d8:	0801350b 	.word	0x0801350b
 80133dc:	08013517 	.word	0x08013517
 80133e0:	08013523 	.word	0x08013523
 80133e4:	08013549 	.word	0x08013549
 80133e8:	0801356f 	.word	0x0801356f
 80133ec:	08013595 	.word	0x08013595
 80133f0:	080135bb 	.word	0x080135bb
 80133f4:	080135e1 	.word	0x080135e1
 80133f8:	08013607 	.word	0x08013607
 80133fc:	0801362d 	.word	0x0801362d
 8013400:	08013653 	.word	0x08013653
 8013404:	08013673 	.word	0x08013673
 8013408:	080139f1 	.word	0x080139f1
 801340c:	0801368d 	.word	0x0801368d
 8013410:	080136fd 	.word	0x080136fd
 8013414:	0801373d 	.word	0x0801373d
 8013418:	0801379f 	.word	0x0801379f
 801341c:	0801380f 	.word	0x0801380f
 8013420:	080137df 	.word	0x080137df
 8013424:	0801383f 	.word	0x0801383f
 8013428:	08013861 	.word	0x08013861
 801342c:	0801386b 	.word	0x0801386b
 8013430:	08013875 	.word	0x08013875
 8013434:	0801387f 	.word	0x0801387f
 8013438:	08013889 	.word	0x08013889
 801343c:	08013893 	.word	0x08013893
 8013440:	080138c5 	.word	0x080138c5
 8013444:	08013931 	.word	0x08013931
 8013448:	080138ff 	.word	0x080138ff
 801344c:	0801396d 	.word	0x0801396d
 8013450:	08013983 	.word	0x08013983
 8013454:	0801399b 	.word	0x0801399b
 8013458:	080139a5 	.word	0x080139a5
 801345c:	080139b1 	.word	0x080139b1
 8013460:	080139f1 	.word	0x080139f1
 8013464:	080139bb 	.word	0x080139bb
 8013468:	080139f1 	.word	0x080139f1
 801346c:	080139f1 	.word	0x080139f1
 8013470:	080139f1 	.word	0x080139f1
 8013474:	080139f1 	.word	0x080139f1
 8013478:	080139f1 	.word	0x080139f1
 801347c:	080139f1 	.word	0x080139f1
 8013480:	080139f1 	.word	0x080139f1
 8013484:	080139f1 	.word	0x080139f1
 8013488:	080139f1 	.word	0x080139f1
 801348c:	080139f1 	.word	0x080139f1
 8013490:	080139f1 	.word	0x080139f1
 8013494:	080139f1 	.word	0x080139f1
 8013498:	080139f1 	.word	0x080139f1
 801349c:	080139f1 	.word	0x080139f1
 80134a0:	080139e5 	.word	0x080139e5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	791b      	ldrb	r3, [r3, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7fd fb99 	bl	8010be0 <SwitchClass>
 80134ae:	4603      	mov	r3, r0
 80134b0:	75fb      	strb	r3, [r7, #23]
            break;
 80134b2:	e2be      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	791b      	ldrb	r3, [r3, #4]
 80134b8:	2b02      	cmp	r3, #2
 80134ba:	d005      	beq.n	80134c8 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	791a      	ldrb	r2, [r3, #4]
 80134c0:	4b70      	ldr	r3, [pc, #448]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80134c2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80134c6:	e2b4      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134c8:	2303      	movs	r3, #3
 80134ca:	75fb      	strb	r3, [r7, #23]
            break;
 80134cc:	e2b1      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fa fddc 	bl	800e090 <SecureElementSetDevEui>
 80134d8:	4603      	mov	r3, r0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	f000 828e 	beq.w	80139fc <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134e0:	2303      	movs	r3, #3
 80134e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80134e4:	e28a      	b.n	80139fc <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fa fdf2 	bl	800e0d4 <SecureElementSetJoinEui>
 80134f0:	4603      	mov	r3, r0
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f000 8284 	beq.w	8013a00 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134f8:	2303      	movs	r3, #3
 80134fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80134fc:	e280      	b.n	8013a00 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	791a      	ldrb	r2, [r3, #4]
 8013502:	4b60      	ldr	r3, [pc, #384]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013504:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8013508:	e293      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	4a5d      	ldr	r2, [pc, #372]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013510:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8013514:	e28d      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	4a5a      	ldr	r2, [pc, #360]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801351c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8013520:	e287      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d00b      	beq.n	8013542 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	4619      	mov	r1, r3
 8013530:	2000      	movs	r0, #0
 8013532:	f001 ff8d 	bl	8015450 <LoRaMacCryptoSetKey>
 8013536:	4603      	mov	r3, r0
 8013538:	2b00      	cmp	r3, #0
 801353a:	f000 8263 	beq.w	8013a04 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801353e:	2311      	movs	r3, #17
 8013540:	e278      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013542:	2303      	movs	r3, #3
 8013544:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013546:	e25d      	b.n	8013a04 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d00b      	beq.n	8013568 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	4619      	mov	r1, r3
 8013556:	2001      	movs	r0, #1
 8013558:	f001 ff7a 	bl	8015450 <LoRaMacCryptoSetKey>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 8252 	beq.w	8013a08 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013564:	2311      	movs	r3, #17
 8013566:	e265      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013568:	2303      	movs	r3, #3
 801356a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801356c:	e24c      	b.n	8013a08 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00b      	beq.n	801358e <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	4619      	mov	r1, r3
 801357c:	2002      	movs	r0, #2
 801357e:	f001 ff67 	bl	8015450 <LoRaMacCryptoSetKey>
 8013582:	4603      	mov	r3, r0
 8013584:	2b00      	cmp	r3, #0
 8013586:	f000 8241 	beq.w	8013a0c <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801358a:	2311      	movs	r3, #17
 801358c:	e252      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801358e:	2303      	movs	r3, #3
 8013590:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013592:	e23b      	b.n	8013a0c <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00b      	beq.n	80135b4 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	4619      	mov	r1, r3
 80135a2:	2003      	movs	r0, #3
 80135a4:	f001 ff54 	bl	8015450 <LoRaMacCryptoSetKey>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f000 8230 	beq.w	8013a10 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80135b0:	2311      	movs	r3, #17
 80135b2:	e23f      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135b4:	2303      	movs	r3, #3
 80135b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80135b8:	e22a      	b.n	8013a10 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d00b      	beq.n	80135da <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	4619      	mov	r1, r3
 80135c8:	207f      	movs	r0, #127	; 0x7f
 80135ca:	f001 ff41 	bl	8015450 <LoRaMacCryptoSetKey>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f000 821f 	beq.w	8013a14 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80135d6:	2311      	movs	r3, #17
 80135d8:	e22c      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135da:	2303      	movs	r3, #3
 80135dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80135de:	e219      	b.n	8013a14 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00b      	beq.n	8013600 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	4619      	mov	r1, r3
 80135ee:	2080      	movs	r0, #128	; 0x80
 80135f0:	f001 ff2e 	bl	8015450 <LoRaMacCryptoSetKey>
 80135f4:	4603      	mov	r3, r0
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f000 820e 	beq.w	8013a18 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80135fc:	2311      	movs	r3, #17
 80135fe:	e219      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013600:	2303      	movs	r3, #3
 8013602:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013604:	e208      	b.n	8013a18 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d00b      	beq.n	8013626 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	4619      	mov	r1, r3
 8013614:	2081      	movs	r0, #129	; 0x81
 8013616:	f001 ff1b 	bl	8015450 <LoRaMacCryptoSetKey>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	f000 81fd 	beq.w	8013a1c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013622:	2311      	movs	r3, #17
 8013624:	e206      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013626:	2303      	movs	r3, #3
 8013628:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801362a:	e1f7      	b.n	8013a1c <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d00b      	beq.n	801364c <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	4619      	mov	r1, r3
 801363a:	2082      	movs	r0, #130	; 0x82
 801363c:	f001 ff08 	bl	8015450 <LoRaMacCryptoSetKey>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	f000 81ec 	beq.w	8013a20 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013648:	2311      	movs	r3, #17
 801364a:	e1f3      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801364c:	2303      	movs	r3, #3
 801364e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013650:	e1e6      	b.n	8013a20 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	791a      	ldrb	r2, [r3, #4]
 8013656:	4b0b      	ldr	r3, [pc, #44]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013658:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801365c:	4b0a      	ldr	r3, [pc, #40]	; (8013688 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013660:	4a08      	ldr	r2, [pc, #32]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013662:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8013666:	4610      	mov	r0, r2
 8013668:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801366a:	4b07      	ldr	r3, [pc, #28]	; (8013688 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801366e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013670:	e1df      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	791a      	ldrb	r2, [r3, #4]
 8013676:	4b03      	ldr	r3, [pc, #12]	; (8013684 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801367c:	e1d9      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
 801367e:	bf00      	nop
 8013680:	200008d0 	.word	0x200008d0
 8013684:	20000ddc 	.word	0x20000ddc
 8013688:	080206a0 	.word	0x080206a0
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	7a1b      	ldrb	r3, [r3, #8]
 8013690:	b25b      	sxtb	r3, r3
 8013692:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013694:	4bb3      	ldr	r3, [pc, #716]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013696:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801369a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801369c:	4bb1      	ldr	r3, [pc, #708]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801369e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136a2:	f107 0108 	add.w	r1, r7, #8
 80136a6:	2207      	movs	r2, #7
 80136a8:	4618      	mov	r0, r3
 80136aa:	f002 fcfc 	bl	80160a6 <RegionVerify>
 80136ae:	4603      	mov	r3, r0
 80136b0:	f083 0301 	eor.w	r3, r3, #1
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d002      	beq.n	80136c0 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136ba:	2303      	movs	r3, #3
 80136bc:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80136be:	e1b8      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80136c6:	4ba7      	ldr	r3, [pc, #668]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80136c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136cc:	f107 0108 	add.w	r1, r7, #8
 80136d0:	2200      	movs	r2, #0
 80136d2:	4618      	mov	r0, r3
 80136d4:	f002 fce7 	bl	80160a6 <RegionVerify>
 80136d8:	4603      	mov	r3, r0
 80136da:	f083 0301 	eor.w	r3, r3, #1
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136e4:	2303      	movs	r3, #3
 80136e6:	75fb      	strb	r3, [r7, #23]
            break;
 80136e8:	e1a3      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80136ea:	4b9e      	ldr	r3, [pc, #632]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80136ec:	687a      	ldr	r2, [r7, #4]
 80136ee:	3364      	adds	r3, #100	; 0x64
 80136f0:	3204      	adds	r2, #4
 80136f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136f6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80136fa:	e19a      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	7a1b      	ldrb	r3, [r3, #8]
 8013700:	b25b      	sxtb	r3, r3
 8013702:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013704:	4b97      	ldr	r3, [pc, #604]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013706:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801370a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801370c:	4b95      	ldr	r3, [pc, #596]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801370e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013712:	f107 0108 	add.w	r1, r7, #8
 8013716:	2207      	movs	r2, #7
 8013718:	4618      	mov	r0, r3
 801371a:	f002 fcc4 	bl	80160a6 <RegionVerify>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d008      	beq.n	8013736 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013724:	4b8f      	ldr	r3, [pc, #572]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	33a8      	adds	r3, #168	; 0xa8
 801372a:	3204      	adds	r2, #4
 801372c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013730:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013734:	e17d      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013736:	2303      	movs	r3, #3
 8013738:	75fb      	strb	r3, [r7, #23]
            break;
 801373a:	e17a      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	7a1b      	ldrb	r3, [r3, #8]
 8013740:	b25b      	sxtb	r3, r3
 8013742:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013744:	4b87      	ldr	r3, [pc, #540]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013746:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801374a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801374c:	4b85      	ldr	r3, [pc, #532]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801374e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013752:	f107 0108 	add.w	r1, r7, #8
 8013756:	2207      	movs	r2, #7
 8013758:	4618      	mov	r0, r3
 801375a:	f002 fca4 	bl	80160a6 <RegionVerify>
 801375e:	4603      	mov	r3, r0
 8013760:	2b00      	cmp	r3, #0
 8013762:	d019      	beq.n	8013798 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013764:	4b7f      	ldr	r3, [pc, #508]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013766:	687a      	ldr	r2, [r7, #4]
 8013768:	336c      	adds	r3, #108	; 0x6c
 801376a:	3204      	adds	r2, #4
 801376c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013770:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013774:	4b7b      	ldr	r3, [pc, #492]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013776:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801377a:	2b02      	cmp	r3, #2
 801377c:	f040 8152 	bne.w	8013a24 <LoRaMacMibSetRequestConfirm+0x698>
 8013780:	4b78      	ldr	r3, [pc, #480]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013782:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013786:	2b00      	cmp	r3, #0
 8013788:	f000 814c 	beq.w	8013a24 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801378c:	4b76      	ldr	r3, [pc, #472]	; (8013968 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013790:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013792:	f7fe fc67 	bl	8012064 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013796:	e145      	b.n	8013a24 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013798:	2303      	movs	r3, #3
 801379a:	75fb      	strb	r3, [r7, #23]
            break;
 801379c:	e142      	b.n	8013a24 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	7a1b      	ldrb	r3, [r3, #8]
 80137a2:	b25b      	sxtb	r3, r3
 80137a4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137a6:	4b6f      	ldr	r3, [pc, #444]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80137a8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80137ac:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80137ae:	4b6d      	ldr	r3, [pc, #436]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80137b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137b4:	f107 0108 	add.w	r1, r7, #8
 80137b8:	2207      	movs	r2, #7
 80137ba:	4618      	mov	r0, r3
 80137bc:	f002 fc73 	bl	80160a6 <RegionVerify>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d008      	beq.n	80137d8 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80137c6:	4b67      	ldr	r3, [pc, #412]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	33b0      	adds	r3, #176	; 0xb0
 80137cc:	3204      	adds	r2, #4
 80137ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137d2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80137d6:	e12c      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137d8:	2303      	movs	r3, #3
 80137da:	75fb      	strb	r3, [r7, #23]
            break;
 80137dc:	e129      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80137e4:	2301      	movs	r3, #1
 80137e6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80137e8:	4b5e      	ldr	r3, [pc, #376]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80137ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137ee:	f107 020c 	add.w	r2, r7, #12
 80137f2:	4611      	mov	r1, r2
 80137f4:	4618      	mov	r0, r3
 80137f6:	f002 fc7f 	bl	80160f8 <RegionChanMaskSet>
 80137fa:	4603      	mov	r3, r0
 80137fc:	f083 0301 	eor.w	r3, r3, #1
 8013800:	b2db      	uxtb	r3, r3
 8013802:	2b00      	cmp	r3, #0
 8013804:	f000 8110 	beq.w	8013a28 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013808:	2303      	movs	r3, #3
 801380a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801380c:	e10c      	b.n	8013a28 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013814:	2300      	movs	r3, #0
 8013816:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013818:	4b52      	ldr	r3, [pc, #328]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801381a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801381e:	f107 020c 	add.w	r2, r7, #12
 8013822:	4611      	mov	r1, r2
 8013824:	4618      	mov	r0, r3
 8013826:	f002 fc67 	bl	80160f8 <RegionChanMaskSet>
 801382a:	4603      	mov	r3, r0
 801382c:	f083 0301 	eor.w	r3, r3, #1
 8013830:	b2db      	uxtb	r3, r3
 8013832:	2b00      	cmp	r3, #0
 8013834:	f000 80fa 	beq.w	8013a2c <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013838:	2303      	movs	r3, #3
 801383a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801383c:	e0f6      	b.n	8013a2c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	791b      	ldrb	r3, [r3, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d009      	beq.n	801385a <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801384a:	2b0f      	cmp	r3, #15
 801384c:	d805      	bhi.n	801385a <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	791a      	ldrb	r2, [r3, #4]
 8013852:	4b44      	ldr	r3, [pc, #272]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013854:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013858:	e0eb      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801385a:	2303      	movs	r3, #3
 801385c:	75fb      	strb	r3, [r7, #23]
            break;
 801385e:	e0e8      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	4a3f      	ldr	r2, [pc, #252]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013866:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8013868:	e0e3      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	4a3d      	ldr	r2, [pc, #244]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013870:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8013872:	e0de      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	4a3a      	ldr	r2, [pc, #232]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801387a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801387c:	e0d9      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	4a38      	ldr	r2, [pc, #224]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013884:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013886:	e0d4      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	4a35      	ldr	r2, [pc, #212]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801388e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013890:	e0cf      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013898:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801389a:	4b32      	ldr	r3, [pc, #200]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801389c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138a0:	f107 0108 	add.w	r1, r7, #8
 80138a4:	2206      	movs	r2, #6
 80138a6:	4618      	mov	r0, r3
 80138a8:	f002 fbfd 	bl	80160a6 <RegionVerify>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d005      	beq.n	80138be <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80138b2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80138b6:	4b2b      	ldr	r3, [pc, #172]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138b8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138bc:	e0b9      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138be:	2303      	movs	r3, #3
 80138c0:	75fb      	strb	r3, [r7, #23]
            break;
 80138c2:	e0b6      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80138ca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80138cc:	4b25      	ldr	r3, [pc, #148]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80138d2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80138d4:	4b23      	ldr	r3, [pc, #140]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138da:	f107 0108 	add.w	r1, r7, #8
 80138de:	2205      	movs	r2, #5
 80138e0:	4618      	mov	r0, r3
 80138e2:	f002 fbe0 	bl	80160a6 <RegionVerify>
 80138e6:	4603      	mov	r3, r0
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d005      	beq.n	80138f8 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80138ec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80138f0:	4b1c      	ldr	r3, [pc, #112]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138f6:	e09c      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138f8:	2303      	movs	r3, #3
 80138fa:	75fb      	strb	r3, [r7, #23]
            break;
 80138fc:	e099      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013904:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013906:	4b17      	ldr	r3, [pc, #92]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801390c:	f107 0108 	add.w	r1, r7, #8
 8013910:	220a      	movs	r2, #10
 8013912:	4618      	mov	r0, r3
 8013914:	f002 fbc7 	bl	80160a6 <RegionVerify>
 8013918:	4603      	mov	r3, r0
 801391a:	2b00      	cmp	r3, #0
 801391c:	d005      	beq.n	801392a <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801391e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013922:	4b10      	ldr	r3, [pc, #64]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013924:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013928:	e083      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801392a:	2303      	movs	r3, #3
 801392c:	75fb      	strb	r3, [r7, #23]
            break;
 801392e:	e080      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013936:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013938:	4b0a      	ldr	r3, [pc, #40]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801393e:	f107 0108 	add.w	r1, r7, #8
 8013942:	2209      	movs	r2, #9
 8013944:	4618      	mov	r0, r3
 8013946:	f002 fbae 	bl	80160a6 <RegionVerify>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d005      	beq.n	801395c <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013950:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013954:	4b03      	ldr	r3, [pc, #12]	; (8013964 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801395a:	e06a      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801395c:	2303      	movs	r3, #3
 801395e:	75fb      	strb	r3, [r7, #23]
            break;
 8013960:	e067      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
 8013962:	bf00      	nop
 8013964:	20000ddc 	.word	0x20000ddc
 8013968:	080206a0 	.word	0x080206a0
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	4a32      	ldr	r2, [pc, #200]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013972:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8013976:	4b31      	ldr	r3, [pc, #196]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801397c:	4a2f      	ldr	r2, [pc, #188]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 801397e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8013980:	e057      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	791a      	ldrb	r2, [r3, #4]
 8013986:	4b2d      	ldr	r3, [pc, #180]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013988:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 801398c:	4b2b      	ldr	r3, [pc, #172]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 801398e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013992:	4b2a      	ldr	r3, [pc, #168]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8013998:	e04b      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	4a27      	ldr	r2, [pc, #156]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80139a0:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 80139a2:	e046      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	4a24      	ldr	r2, [pc, #144]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80139aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 80139ae:	e040      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80139b0:	f7fe fdb2 	bl	8012518 <RestoreNvmData>
 80139b4:	4603      	mov	r3, r0
 80139b6:	75fb      	strb	r3, [r7, #23]
            break;
 80139b8:	e03b      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	799b      	ldrb	r3, [r3, #6]
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d80d      	bhi.n	80139de <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80139c2:	4a1e      	ldr	r2, [pc, #120]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	685b      	ldr	r3, [r3, #4]
 80139c8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6858      	ldr	r0, [r3, #4]
 80139d0:	f001 fc78 	bl	80152c4 <LoRaMacCryptoSetLrWanVersion>
 80139d4:	4603      	mov	r3, r0
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d02a      	beq.n	8013a30 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139da:	2311      	movs	r3, #17
 80139dc:	e02a      	b.n	8013a34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139de:	2303      	movs	r3, #3
 80139e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80139e2:	e025      	b.n	8013a30 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	4a14      	ldr	r2, [pc, #80]	; (8013a3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 80139ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 80139ee:	e020      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 fc0d 	bl	8014210 <LoRaMacMibClassBSetRequestConfirm>
 80139f6:	4603      	mov	r3, r0
 80139f8:	75fb      	strb	r3, [r7, #23]
            break;
 80139fa:	e01a      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80139fc:	bf00      	nop
 80139fe:	e018      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a00:	bf00      	nop
 8013a02:	e016      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a04:	bf00      	nop
 8013a06:	e014      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a08:	bf00      	nop
 8013a0a:	e012      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a0c:	bf00      	nop
 8013a0e:	e010      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a10:	bf00      	nop
 8013a12:	e00e      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a14:	bf00      	nop
 8013a16:	e00c      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a18:	bf00      	nop
 8013a1a:	e00a      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a1c:	bf00      	nop
 8013a1e:	e008      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a20:	bf00      	nop
 8013a22:	e006      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a24:	bf00      	nop
 8013a26:	e004      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a28:	bf00      	nop
 8013a2a:	e002      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a2c:	bf00      	nop
 8013a2e:	e000      	b.n	8013a32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013a30:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3718      	adds	r7, #24
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	20000ddc 	.word	0x20000ddc

08013a40 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b086      	sub	sp, #24
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013a48:	2302      	movs	r3, #2
 8013a4a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d101      	bne.n	8013a5a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a56:	2303      	movs	r3, #3
 8013a58:	e127      	b.n	8013caa <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013a5a:	f7fc fcd3 	bl	8010404 <LoRaMacIsBusy>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d001      	beq.n	8013a68 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013a64:	2301      	movs	r3, #1
 8013a66:	e120      	b.n	8013caa <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013a68:	f001 f8d0 	bl	8014c0c <LoRaMacConfirmQueueIsFull>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d001      	beq.n	8013a76 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013a72:	2301      	movs	r3, #1
 8013a74:	e119      	b.n	8013caa <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013a76:	f001 f8bd 	bl	8014bf4 <LoRaMacConfirmQueueGetCnt>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d104      	bne.n	8013a8a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013a80:	2214      	movs	r2, #20
 8013a82:	2100      	movs	r1, #0
 8013a84:	488b      	ldr	r0, [pc, #556]	; (8013cb4 <LoRaMacMlmeRequest+0x274>)
 8013a86:	f004 fdef 	bl	8018668 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a8a:	4b8b      	ldr	r3, [pc, #556]	; (8013cb8 <LoRaMacMlmeRequest+0x278>)
 8013a8c:	2201      	movs	r2, #1
 8013a8e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013a92:	4a89      	ldr	r2, [pc, #548]	; (8013cb8 <LoRaMacMlmeRequest+0x278>)
 8013a94:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013a98:	f043 0304 	orr.w	r3, r3, #4
 8013a9c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	3b01      	subs	r3, #1
 8013ab4:	2b0d      	cmp	r3, #13
 8013ab6:	f200 80ce 	bhi.w	8013c56 <LoRaMacMlmeRequest+0x216>
 8013aba:	a201      	add	r2, pc, #4	; (adr r2, 8013ac0 <LoRaMacMlmeRequest+0x80>)
 8013abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac0:	08013af9 	.word	0x08013af9
 8013ac4:	08013c57 	.word	0x08013c57
 8013ac8:	08013c57 	.word	0x08013c57
 8013acc:	08013b63 	.word	0x08013b63
 8013ad0:	08013b81 	.word	0x08013b81
 8013ad4:	08013b91 	.word	0x08013b91
 8013ad8:	08013c57 	.word	0x08013c57
 8013adc:	08013c57 	.word	0x08013c57
 8013ae0:	08013c57 	.word	0x08013c57
 8013ae4:	08013bad 	.word	0x08013bad
 8013ae8:	08013c57 	.word	0x08013c57
 8013aec:	08013c2b 	.word	0x08013c2b
 8013af0:	08013bcb 	.word	0x08013bcb
 8013af4:	08013c0d 	.word	0x08013c0d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013af8:	4b6f      	ldr	r3, [pc, #444]	; (8013cb8 <LoRaMacMlmeRequest+0x278>)
 8013afa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013afe:	f003 0320 	and.w	r3, r3, #32
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d001      	beq.n	8013b0a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8013b06:	2301      	movs	r3, #1
 8013b08:	e0cf      	b.n	8013caa <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8013b0a:	f7fe f989 	bl	8011e20 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013b0e:	4b6b      	ldr	r3, [pc, #428]	; (8013cbc <LoRaMacMlmeRequest+0x27c>)
 8013b10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	795b      	ldrb	r3, [r3, #5]
 8013b18:	b25b      	sxtb	r3, r3
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	f002 fbaa 	bl	8016276 <RegionAlternateDr>
 8013b22:	4603      	mov	r3, r0
 8013b24:	461a      	mov	r2, r3
 8013b26:	4b65      	ldr	r3, [pc, #404]	; (8013cbc <LoRaMacMlmeRequest+0x27c>)
 8013b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013b2c:	2307      	movs	r3, #7
 8013b2e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8013b30:	20ff      	movs	r0, #255	; 0xff
 8013b32:	f7fd feed 	bl	8011910 <SendReJoinReq>
 8013b36:	4603      	mov	r3, r0
 8013b38:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8013b3a:	7dfb      	ldrb	r3, [r7, #23]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	f000 808c 	beq.w	8013c5a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013b42:	4b5e      	ldr	r3, [pc, #376]	; (8013cbc <LoRaMacMlmeRequest+0x27c>)
 8013b44:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	795b      	ldrb	r3, [r3, #5]
 8013b4c:	b25b      	sxtb	r3, r3
 8013b4e:	2201      	movs	r2, #1
 8013b50:	4619      	mov	r1, r3
 8013b52:	f002 fb90 	bl	8016276 <RegionAlternateDr>
 8013b56:	4603      	mov	r3, r0
 8013b58:	461a      	mov	r2, r3
 8013b5a:	4b58      	ldr	r3, [pc, #352]	; (8013cbc <LoRaMacMlmeRequest+0x27c>)
 8013b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013b60:	e07b      	b.n	8013c5a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013b66:	f107 030c 	add.w	r3, r7, #12
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	2002      	movs	r0, #2
 8013b70:	f000 fcb2 	bl	80144d8 <LoRaMacCommandsAddCmd>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d071      	beq.n	8013c5e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b7a:	2313      	movs	r3, #19
 8013b7c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b7e:	e06e      	b.n	8013c5e <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	889b      	ldrh	r3, [r3, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fe fc73 	bl	8012470 <SetTxContinuousWave>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	75fb      	strb	r3, [r7, #23]
            break;
 8013b8e:	e06d      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	8898      	ldrh	r0, [r3, #4]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6899      	ldr	r1, [r3, #8]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013b9e:	b2db      	uxtb	r3, r3
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	f7fe fc99 	bl	80124d8 <SetTxContinuousWave1>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	75fb      	strb	r3, [r7, #23]
            break;
 8013baa:	e05f      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013bac:	2300      	movs	r3, #0
 8013bae:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013bb0:	f107 030c 	add.w	r3, r7, #12
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	200d      	movs	r0, #13
 8013bba:	f000 fc8d 	bl	80144d8 <LoRaMacCommandsAddCmd>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d04e      	beq.n	8013c62 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013bc4:	2313      	movs	r3, #19
 8013bc6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013bc8:	e04b      	b.n	8013c62 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013bca:	4b3c      	ldr	r3, [pc, #240]	; (8013cbc <LoRaMacMlmeRequest+0x27c>)
 8013bcc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d148      	bne.n	8013c66 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	791b      	ldrb	r3, [r3, #4]
 8013bd8:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	791b      	ldrb	r3, [r3, #4]
 8013bde:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	4618      	mov	r0, r3
 8013be6:	f000 fae8 	bl	80141ba <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013bea:	7dbb      	ldrb	r3, [r7, #22]
 8013bec:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013bf2:	f107 030c 	add.w	r3, r7, #12
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	2010      	movs	r0, #16
 8013bfc:	f000 fc6c 	bl	80144d8 <LoRaMacCommandsAddCmd>
 8013c00:	4603      	mov	r3, r0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d02f      	beq.n	8013c66 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013c06:	2313      	movs	r3, #19
 8013c08:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8013c0a:	e02c      	b.n	8013c66 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013c10:	f107 030c 	add.w	r3, r7, #12
 8013c14:	2200      	movs	r2, #0
 8013c16:	4619      	mov	r1, r3
 8013c18:	2012      	movs	r0, #18
 8013c1a:	f000 fc5d 	bl	80144d8 <LoRaMacCommandsAddCmd>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d022      	beq.n	8013c6a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013c24:	2313      	movs	r3, #19
 8013c26:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c28:	e01f      	b.n	8013c6a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013c2e:	f000 fa7a 	bl	8014126 <LoRaMacClassBIsAcquisitionInProgress>
 8013c32:	4603      	mov	r3, r0
 8013c34:	f083 0301 	eor.w	r3, r3, #1
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d008      	beq.n	8013c50 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013c3e:	2000      	movs	r0, #0
 8013c40:	f000 fa53 	bl	80140ea <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013c44:	2000      	movs	r0, #0
 8013c46:	f000 fa75 	bl	8014134 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013c4e:	e00d      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8013c50:	2301      	movs	r3, #1
 8013c52:	75fb      	strb	r3, [r7, #23]
            break;
 8013c54:	e00a      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8013c56:	bf00      	nop
 8013c58:	e008      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
            break;
 8013c5a:	bf00      	nop
 8013c5c:	e006      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
            break;
 8013c5e:	bf00      	nop
 8013c60:	e004      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
            break;
 8013c62:	bf00      	nop
 8013c64:	e002      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
            break;
 8013c66:	bf00      	nop
 8013c68:	e000      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
            break;
 8013c6a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013c6c:	4b12      	ldr	r3, [pc, #72]	; (8013cb8 <LoRaMacMlmeRequest+0x278>)
 8013c6e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013c76:	7dfb      	ldrb	r3, [r7, #23]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d010      	beq.n	8013c9e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013c7c:	f000 ffba 	bl	8014bf4 <LoRaMacConfirmQueueGetCnt>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d110      	bne.n	8013ca8 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8013c86:	4b0c      	ldr	r3, [pc, #48]	; (8013cb8 <LoRaMacMlmeRequest+0x278>)
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013c8e:	4a0a      	ldr	r2, [pc, #40]	; (8013cb8 <LoRaMacMlmeRequest+0x278>)
 8013c90:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013c94:	f36f 0382 	bfc	r3, #2, #1
 8013c98:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8013c9c:	e004      	b.n	8013ca8 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013c9e:	f107 0310 	add.w	r3, r7, #16
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 fe58 	bl	8014958 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8013ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3718      	adds	r7, #24
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	20000d1c 	.word	0x20000d1c
 8013cb8:	200008d0 	.word	0x200008d0
 8013cbc:	20000ddc 	.word	0x20000ddc

08013cc0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b08c      	sub	sp, #48	; 0x30
 8013cc4:	af02      	add	r7, sp, #8
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	460b      	mov	r3, r1
 8013cca:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013ccc:	2302      	movs	r3, #2
 8013cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d101      	bne.n	8013cee <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013cea:	2303      	movs	r3, #3
 8013cec:	e0d4      	b.n	8013e98 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8013cee:	f7fc fb89 	bl	8010404 <LoRaMacIsBusy>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d001      	beq.n	8013cfc <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e0cd      	b.n	8013e98 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013d00:	2214      	movs	r2, #20
 8013d02:	2100      	movs	r1, #0
 8013d04:	4866      	ldr	r0, [pc, #408]	; (8013ea0 <LoRaMacMcpsRequest+0x1e0>)
 8013d06:	f004 fcaf 	bl	8018668 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d0a:	4b66      	ldr	r3, [pc, #408]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013d12:	4b64      	ldr	r3, [pc, #400]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013d14:	2201      	movs	r2, #1
 8013d16:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b03      	cmp	r3, #3
 8013d20:	d03d      	beq.n	8013d9e <LoRaMacMcpsRequest+0xde>
 8013d22:	2b03      	cmp	r3, #3
 8013d24:	dc4f      	bgt.n	8013dc6 <LoRaMacMcpsRequest+0x106>
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d002      	beq.n	8013d30 <LoRaMacMcpsRequest+0x70>
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d019      	beq.n	8013d62 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013d2e:	e04a      	b.n	8013dc6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8013d30:	2301      	movs	r3, #1
 8013d32:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013d34:	4b5b      	ldr	r3, [pc, #364]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013d36:	2201      	movs	r2, #1
 8013d38:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013d3c:	7b3b      	ldrb	r3, [r7, #12]
 8013d3e:	2202      	movs	r2, #2
 8013d40:	f362 1347 	bfi	r3, r2, #5, #3
 8013d44:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	791b      	ldrb	r3, [r3, #4]
 8013d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	689b      	ldr	r3, [r3, #8]
 8013d52:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	899b      	ldrh	r3, [r3, #12]
 8013d58:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	7b9b      	ldrb	r3, [r3, #14]
 8013d5e:	777b      	strb	r3, [r7, #29]
            break;
 8013d60:	e032      	b.n	8013dc8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013d62:	2301      	movs	r3, #1
 8013d64:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	7bdb      	ldrb	r3, [r3, #15]
 8013d6a:	2b08      	cmp	r3, #8
 8013d6c:	bf28      	it	cs
 8013d6e:	2308      	movcs	r3, #8
 8013d70:	b2da      	uxtb	r2, r3
 8013d72:	4b4c      	ldr	r3, [pc, #304]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013d74:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013d78:	7b3b      	ldrb	r3, [r7, #12]
 8013d7a:	2204      	movs	r2, #4
 8013d7c:	f362 1347 	bfi	r3, r2, #5, #3
 8013d80:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	791b      	ldrb	r3, [r3, #4]
 8013d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	689b      	ldr	r3, [r3, #8]
 8013d8e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	899b      	ldrh	r3, [r3, #12]
 8013d94:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	7b9b      	ldrb	r3, [r3, #14]
 8013d9a:	777b      	strb	r3, [r7, #29]
            break;
 8013d9c:	e014      	b.n	8013dc8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013da2:	4b40      	ldr	r3, [pc, #256]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013da4:	2201      	movs	r2, #1
 8013da6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013daa:	7b3b      	ldrb	r3, [r7, #12]
 8013dac:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8013db0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	685b      	ldr	r3, [r3, #4]
 8013db6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	891b      	ldrh	r3, [r3, #8]
 8013dbc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	7a9b      	ldrb	r3, [r3, #10]
 8013dc2:	777b      	strb	r3, [r7, #29]
            break;
 8013dc4:	e000      	b.n	8013dc8 <LoRaMacMcpsRequest+0x108>
            break;
 8013dc6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013dc8:	2302      	movs	r3, #2
 8013dca:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013dcc:	4b36      	ldr	r3, [pc, #216]	; (8013ea8 <LoRaMacMcpsRequest+0x1e8>)
 8013dce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013dd2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013dd4:	4b34      	ldr	r3, [pc, #208]	; (8013ea8 <LoRaMacMcpsRequest+0x1e8>)
 8013dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013dda:	f107 0214 	add.w	r2, r7, #20
 8013dde:	4611      	mov	r1, r2
 8013de0:	4618      	mov	r0, r3
 8013de2:	f002 f925 	bl	8016030 <RegionGetPhyParam>
 8013de6:	4603      	mov	r3, r0
 8013de8:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	b25b      	sxtb	r3, r3
 8013dee:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8013df2:	4293      	cmp	r3, r2
 8013df4:	bfb8      	it	lt
 8013df6:	4613      	movlt	r3, r2
 8013df8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8013dfa:	7f3b      	ldrb	r3, [r7, #28]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d044      	beq.n	8013e8a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8013e00:	4b29      	ldr	r3, [pc, #164]	; (8013ea8 <LoRaMacMcpsRequest+0x1e8>)
 8013e02:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013e06:	f083 0301 	eor.w	r3, r3, #1
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d019      	beq.n	8013e44 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8013e10:	7f7b      	ldrb	r3, [r7, #29]
 8013e12:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e14:	4b24      	ldr	r3, [pc, #144]	; (8013ea8 <LoRaMacMcpsRequest+0x1e8>)
 8013e16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013e1a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013e1c:	4b22      	ldr	r3, [pc, #136]	; (8013ea8 <LoRaMacMcpsRequest+0x1e8>)
 8013e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e22:	f107 0108 	add.w	r1, r7, #8
 8013e26:	2205      	movs	r2, #5
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f002 f93c 	bl	80160a6 <RegionVerify>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d005      	beq.n	8013e40 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013e34:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013e38:	4b1b      	ldr	r3, [pc, #108]	; (8013ea8 <LoRaMacMcpsRequest+0x1e8>)
 8013e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013e3e:	e001      	b.n	8013e44 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e40:	2303      	movs	r3, #3
 8013e42:	e029      	b.n	8013e98 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013e44:	8bfa      	ldrh	r2, [r7, #30]
 8013e46:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8013e4a:	f107 000c 	add.w	r0, r7, #12
 8013e4e:	78fb      	ldrb	r3, [r7, #3]
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	4613      	mov	r3, r2
 8013e54:	6a3a      	ldr	r2, [r7, #32]
 8013e56:	f7fd fc7b 	bl	8011750 <Send>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8013e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d10c      	bne.n	8013e82 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	781a      	ldrb	r2, [r3, #0]
 8013e6c:	4b0d      	ldr	r3, [pc, #52]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013e6e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013e72:	4a0c      	ldr	r2, [pc, #48]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013e74:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013e78:	f043 0301 	orr.w	r3, r3, #1
 8013e7c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8013e80:	e003      	b.n	8013e8a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013e82:	4b08      	ldr	r3, [pc, #32]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013e84:	2200      	movs	r2, #0
 8013e86:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013e8a:	4b06      	ldr	r3, [pc, #24]	; (8013ea4 <LoRaMacMcpsRequest+0x1e4>)
 8013e8c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	611a      	str	r2, [r3, #16]

    return status;
 8013e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3728      	adds	r7, #40	; 0x28
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20000d08 	.word	0x20000d08
 8013ea4:	200008d0 	.word	0x200008d0
 8013ea8:	20000ddc 	.word	0x20000ddc

08013eac <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013eb6:	79fb      	ldrb	r3, [r7, #7]
 8013eb8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013eba:	4b0a      	ldr	r3, [pc, #40]	; (8013ee4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013ec0:	f107 010c 	add.w	r1, r7, #12
 8013ec4:	220f      	movs	r2, #15
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f002 f8ed 	bl	80160a6 <RegionVerify>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d003      	beq.n	8013eda <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013ed2:	4a04      	ldr	r2, [pc, #16]	; (8013ee4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013ed4:	79fb      	ldrb	r3, [r7, #7]
 8013ed6:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8013eda:	bf00      	nop
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	20000ddc 	.word	0x20000ddc

08013ee8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013eec:	f7fe ffec 	bl	8012ec8 <LoRaMacStop>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d114      	bne.n	8013f20 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013ef6:	480c      	ldr	r0, [pc, #48]	; (8013f28 <LoRaMacDeInitialization+0x40>)
 8013ef8:	f008 fc8e 	bl	801c818 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013efc:	480b      	ldr	r0, [pc, #44]	; (8013f2c <LoRaMacDeInitialization+0x44>)
 8013efe:	f008 fc8b 	bl	801c818 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013f02:	480b      	ldr	r0, [pc, #44]	; (8013f30 <LoRaMacDeInitialization+0x48>)
 8013f04:	f008 fc88 	bl	801c818 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8013f08:	480a      	ldr	r0, [pc, #40]	; (8013f34 <LoRaMacDeInitialization+0x4c>)
 8013f0a:	f008 fc85 	bl	801c818 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013f0e:	f000 f95e 	bl	80141ce <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8013f12:	f7fd ff85 	bl	8011e20 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013f16:	4b08      	ldr	r3, [pc, #32]	; (8013f38 <LoRaMacDeInitialization+0x50>)
 8013f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f1a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	e000      	b.n	8013f22 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013f20:	2301      	movs	r3, #1
    }
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	20000c38 	.word	0x20000c38
 8013f2c:	20000c50 	.word	0x20000c50
 8013f30:	20000c68 	.word	0x20000c68
 8013f34:	20000cc8 	.word	0x20000cc8
 8013f38:	080206a0 	.word	0x080206a0

08013f3c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b08c      	sub	sp, #48	; 0x30
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	60b9      	str	r1, [r7, #8]
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	7c1b      	ldrb	r3, [r3, #16]
 8013f54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	7c5b      	ldrb	r3, [r3, #17]
 8013f5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	689a      	ldr	r2, [r3, #8]
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	795b      	ldrb	r3, [r3, #5]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 808b 	beq.w	8014088 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013f72:	2302      	movs	r3, #2
 8013f74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	7c9b      	ldrb	r3, [r3, #18]
 8013f7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	7cdb      	ldrb	r3, [r3, #19]
 8013f84:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013f88:	4611      	mov	r1, r2
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f002 f850 	bl	8016030 <RegionGetPhyParam>
 8013f90:	4603      	mov	r3, r0
 8013f92:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013f94:	6a3b      	ldr	r3, [r7, #32]
 8013f96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8013f9a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8013f9e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	bfb8      	it	lt
 8013fa6:	4613      	movlt	r3, r2
 8013fa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8013fac:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013fb0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d106      	bne.n	8013fc6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013fc4:	e060      	b.n	8014088 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	68fa      	ldr	r2, [r7, #12]
 8013fcc:	8992      	ldrh	r2, [r2, #12]
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	d303      	bcc.n	8013fda <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013fd8:	e002      	b.n	8013fe0 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	689b      	ldr	r3, [r3, #8]
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	8992      	ldrh	r2, [r2, #12]
 8013fe8:	4611      	mov	r1, r2
 8013fea:	68fa      	ldr	r2, [r7, #12]
 8013fec:	89d2      	ldrh	r2, [r2, #14]
 8013fee:	440a      	add	r2, r1
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	d349      	bcc.n	8014088 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013ff4:	2308      	movs	r3, #8
 8013ff6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	7cdb      	ldrb	r3, [r3, #19]
 8013ffe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014002:	4611      	mov	r1, r2
 8014004:	4618      	mov	r0, r3
 8014006:	f002 f813 	bl	8016030 <RegionGetPhyParam>
 801400a:	4603      	mov	r3, r0
 801400c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	68fa      	ldr	r2, [r7, #12]
 801401a:	89d2      	ldrh	r2, [r2, #14]
 801401c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014020:	fb01 f202 	mul.w	r2, r1, r2
 8014024:	1a9b      	subs	r3, r3, r2
 8014026:	2b01      	cmp	r3, #1
 8014028:	d12e      	bne.n	8014088 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801402a:	2322      	movs	r3, #34	; 0x22
 801402c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8014030:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014034:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	7c9b      	ldrb	r3, [r3, #18]
 801403c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	7cdb      	ldrb	r3, [r3, #19]
 8014044:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014048:	4611      	mov	r1, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f001 fff0 	bl	8016030 <RegionGetPhyParam>
 8014050:	4603      	mov	r3, r0
 8014052:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8014054:	6a3b      	ldr	r3, [r7, #32]
 8014056:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801405a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801405e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8014062:	429a      	cmp	r2, r3
 8014064:	d110      	bne.n	8014088 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8014066:	2300      	movs	r3, #0
 8014068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	791b      	ldrb	r3, [r3, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d009      	beq.n	8014088 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014074:	2302      	movs	r3, #2
 8014076:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	7cdb      	ldrb	r3, [r3, #19]
 801407c:	f107 0214 	add.w	r2, r7, #20
 8014080:	4611      	mov	r1, r2
 8014082:	4618      	mov	r0, r3
 8014084:	f001 fffd 	bl	8016082 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801408e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014096:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801409c:	4618      	mov	r0, r3
 801409e:	3730      	adds	r7, #48	; 0x30
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	607a      	str	r2, [r7, #4]
 80140b0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	789b      	ldrb	r3, [r3, #2]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d107      	bne.n	80140ca <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	68b9      	ldr	r1, [r7, #8]
 80140c0:	68f8      	ldr	r0, [r7, #12]
 80140c2:	f7ff ff3b 	bl	8013f3c <CalcNextV10X>
 80140c6:	4603      	mov	r3, r0
 80140c8:	e000      	b.n	80140cc <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80140ca:	2300      	movs	r3, #0
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3710      	adds	r7, #16
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80140d4:	b480      	push	{r7}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	60b9      	str	r1, [r7, #8]
 80140de:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140e0:	bf00      	nop
 80140e2:	3714      	adds	r7, #20
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bc80      	pop	{r7}
 80140e8:	4770      	bx	lr

080140ea <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80140ea:	b480      	push	{r7}
 80140ec:	b083      	sub	sp, #12
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	4603      	mov	r3, r0
 80140f2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140f4:	bf00      	nop
 80140f6:	370c      	adds	r7, #12
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bc80      	pop	{r7}
 80140fc:	4770      	bx	lr

080140fe <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80140fe:	b480      	push	{r7}
 8014100:	b083      	sub	sp, #12
 8014102:	af00      	add	r7, sp, #0
 8014104:	4603      	mov	r3, r0
 8014106:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014108:	bf00      	nop
 801410a:	370c      	adds	r7, #12
 801410c:	46bd      	mov	sp, r7
 801410e:	bc80      	pop	{r7}
 8014110:	4770      	bx	lr

08014112 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014112:	b480      	push	{r7}
 8014114:	b083      	sub	sp, #12
 8014116:	af00      	add	r7, sp, #0
 8014118:	4603      	mov	r3, r0
 801411a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801411c:	bf00      	nop
 801411e:	370c      	adds	r7, #12
 8014120:	46bd      	mov	sp, r7
 8014122:	bc80      	pop	{r7}
 8014124:	4770      	bx	lr

08014126 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014126:	b480      	push	{r7}
 8014128:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801412a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801412c:	4618      	mov	r0, r3
 801412e:	46bd      	mov	sp, r7
 8014130:	bc80      	pop	{r7}
 8014132:	4770      	bx	lr

08014134 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801413c:	bf00      	nop
 801413e:	370c      	adds	r7, #12
 8014140:	46bd      	mov	sp, r7
 8014142:	bc80      	pop	{r7}
 8014144:	4770      	bx	lr

08014146 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014146:	b480      	push	{r7}
 8014148:	b083      	sub	sp, #12
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801414e:	bf00      	nop
 8014150:	370c      	adds	r7, #12
 8014152:	46bd      	mov	sp, r7
 8014154:	bc80      	pop	{r7}
 8014156:	4770      	bx	lr

08014158 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014160:	bf00      	nop
 8014162:	370c      	adds	r7, #12
 8014164:	46bd      	mov	sp, r7
 8014166:	bc80      	pop	{r7}
 8014168:	4770      	bx	lr

0801416a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801416a:	b480      	push	{r7}
 801416c:	b083      	sub	sp, #12
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
 8014172:	460b      	mov	r3, r1
 8014174:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014176:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014178:	4618      	mov	r0, r3
 801417a:	370c      	adds	r7, #12
 801417c:	46bd      	mov	sp, r7
 801417e:	bc80      	pop	{r7}
 8014180:	4770      	bx	lr

08014182 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014182:	b480      	push	{r7}
 8014184:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014186:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014188:	4618      	mov	r0, r3
 801418a:	46bd      	mov	sp, r7
 801418c:	bc80      	pop	{r7}
 801418e:	4770      	bx	lr

08014190 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014190:	b480      	push	{r7}
 8014192:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014194:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014196:	4618      	mov	r0, r3
 8014198:	46bd      	mov	sp, r7
 801419a:	bc80      	pop	{r7}
 801419c:	4770      	bx	lr

0801419e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801419e:	b480      	push	{r7}
 80141a0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80141a2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bc80      	pop	{r7}
 80141aa:	4770      	bx	lr

080141ac <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80141ac:	b480      	push	{r7}
 80141ae:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80141b0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bc80      	pop	{r7}
 80141b8:	4770      	bx	lr

080141ba <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80141ba:	b480      	push	{r7}
 80141bc:	b083      	sub	sp, #12
 80141be:	af00      	add	r7, sp, #0
 80141c0:	4603      	mov	r3, r0
 80141c2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141c4:	bf00      	nop
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bc80      	pop	{r7}
 80141cc:	4770      	bx	lr

080141ce <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80141ce:	b480      	push	{r7}
 80141d0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141d2:	bf00      	nop
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bc80      	pop	{r7}
 80141d8:	4770      	bx	lr

080141da <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80141da:	b480      	push	{r7}
 80141dc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141de:	bf00      	nop
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bc80      	pop	{r7}
 80141e4:	4770      	bx	lr

080141e6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80141e6:	b480      	push	{r7}
 80141e8:	b083      	sub	sp, #12
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	4603      	mov	r3, r0
 80141ee:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80141f0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	370c      	adds	r7, #12
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bc80      	pop	{r7}
 80141fa:	4770      	bx	lr

080141fc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014204:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014206:	4618      	mov	r0, r3
 8014208:	370c      	adds	r7, #12
 801420a:	46bd      	mov	sp, r7
 801420c:	bc80      	pop	{r7}
 801420e:	4770      	bx	lr

08014210 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014218:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801421a:	4618      	mov	r0, r3
 801421c:	370c      	adds	r7, #12
 801421e:	46bd      	mov	sp, r7
 8014220:	bc80      	pop	{r7}
 8014222:	4770      	bx	lr

08014224 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014224:	b480      	push	{r7}
 8014226:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014228:	bf00      	nop
 801422a:	46bd      	mov	sp, r7
 801422c:	bc80      	pop	{r7}
 801422e:	4770      	bx	lr

08014230 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	4603      	mov	r3, r0
 8014238:	6039      	str	r1, [r7, #0]
 801423a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801423c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801423e:	4618      	mov	r0, r3
 8014240:	370c      	adds	r7, #12
 8014242:	46bd      	mov	sp, r7
 8014244:	bc80      	pop	{r7}
 8014246:	4770      	bx	lr

08014248 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014248:	b480      	push	{r7}
 801424a:	b083      	sub	sp, #12
 801424c:	af00      	add	r7, sp, #0
 801424e:	4603      	mov	r3, r0
 8014250:	603a      	str	r2, [r7, #0]
 8014252:	80fb      	strh	r3, [r7, #6]
 8014254:	460b      	mov	r3, r1
 8014256:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014258:	bf00      	nop
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	bc80      	pop	{r7}
 8014260:	4770      	bx	lr

08014262 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014262:	b480      	push	{r7}
 8014264:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014266:	bf00      	nop
 8014268:	46bd      	mov	sp, r7
 801426a:	bc80      	pop	{r7}
 801426c:	4770      	bx	lr

0801426e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801426e:	b480      	push	{r7}
 8014270:	b083      	sub	sp, #12
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8014276:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014278:	4618      	mov	r0, r3
 801427a:	370c      	adds	r7, #12
 801427c:	46bd      	mov	sp, r7
 801427e:	bc80      	pop	{r7}
 8014280:	4770      	bx	lr

08014282 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014282:	b480      	push	{r7}
 8014284:	b083      	sub	sp, #12
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801428a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801428c:	4618      	mov	r0, r3
 801428e:	370c      	adds	r7, #12
 8014290:	46bd      	mov	sp, r7
 8014292:	bc80      	pop	{r7}
 8014294:	4770      	bx	lr

08014296 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014296:	b480      	push	{r7}
 8014298:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801429a:	bf00      	nop
 801429c:	46bd      	mov	sp, r7
 801429e:	bc80      	pop	{r7}
 80142a0:	4770      	bx	lr

080142a2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80142a2:	b480      	push	{r7}
 80142a4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142a6:	bf00      	nop
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bc80      	pop	{r7}
 80142ac:	4770      	bx	lr

080142ae <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80142ae:	b480      	push	{r7}
 80142b0:	b085      	sub	sp, #20
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80142ba:	2300      	movs	r3, #0
 80142bc:	81fb      	strh	r3, [r7, #14]
 80142be:	e00a      	b.n	80142d6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80142c0:	89fb      	ldrh	r3, [r7, #14]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	4413      	add	r3, r2
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d001      	beq.n	80142d0 <IsSlotFree+0x22>
        {
            return false;
 80142cc:	2300      	movs	r3, #0
 80142ce:	e006      	b.n	80142de <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80142d0:	89fb      	ldrh	r3, [r7, #14]
 80142d2:	3301      	adds	r3, #1
 80142d4:	81fb      	strh	r3, [r7, #14]
 80142d6:	89fb      	ldrh	r3, [r7, #14]
 80142d8:	2b0f      	cmp	r3, #15
 80142da:	d9f1      	bls.n	80142c0 <IsSlotFree+0x12>
        }
    }
    return true;
 80142dc:	2301      	movs	r3, #1
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3714      	adds	r7, #20
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bc80      	pop	{r7}
 80142e6:	4770      	bx	lr

080142e8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80142ee:	2300      	movs	r3, #0
 80142f0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80142f2:	e007      	b.n	8014304 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80142f4:	79fb      	ldrb	r3, [r7, #7]
 80142f6:	3301      	adds	r3, #1
 80142f8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80142fa:	79fb      	ldrb	r3, [r7, #7]
 80142fc:	2b0f      	cmp	r3, #15
 80142fe:	d101      	bne.n	8014304 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014300:	2300      	movs	r3, #0
 8014302:	e012      	b.n	801432a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	011b      	lsls	r3, r3, #4
 8014308:	3308      	adds	r3, #8
 801430a:	4a0a      	ldr	r2, [pc, #40]	; (8014334 <MallocNewMacCommandSlot+0x4c>)
 801430c:	4413      	add	r3, r2
 801430e:	4618      	mov	r0, r3
 8014310:	f7ff ffcd 	bl	80142ae <IsSlotFree>
 8014314:	4603      	mov	r3, r0
 8014316:	f083 0301 	eor.w	r3, r3, #1
 801431a:	b2db      	uxtb	r3, r3
 801431c:	2b00      	cmp	r3, #0
 801431e:	d1e9      	bne.n	80142f4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014320:	79fb      	ldrb	r3, [r7, #7]
 8014322:	011b      	lsls	r3, r3, #4
 8014324:	3308      	adds	r3, #8
 8014326:	4a03      	ldr	r2, [pc, #12]	; (8014334 <MallocNewMacCommandSlot+0x4c>)
 8014328:	4413      	add	r3, r2
}
 801432a:	4618      	mov	r0, r3
 801432c:	3708      	adds	r7, #8
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	20001c44 	.word	0x20001c44

08014338 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <FreeMacCommandSlot+0x12>
    {
        return false;
 8014346:	2300      	movs	r3, #0
 8014348:	e005      	b.n	8014356 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801434a:	2210      	movs	r2, #16
 801434c:	2100      	movs	r1, #0
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f004 f98a 	bl	8018668 <memset1>

    return true;
 8014354:	2301      	movs	r3, #1
}
 8014356:	4618      	mov	r0, r3
 8014358:	3708      	adds	r7, #8
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}

0801435e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801435e:	b480      	push	{r7}
 8014360:	b083      	sub	sp, #12
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d101      	bne.n	8014370 <LinkedListInit+0x12>
    {
        return false;
 801436c:	2300      	movs	r3, #0
 801436e:	e006      	b.n	801437e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2200      	movs	r2, #0
 8014374:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2200      	movs	r2, #0
 801437a:	605a      	str	r2, [r3, #4]

    return true;
 801437c:	2301      	movs	r3, #1
}
 801437e:	4618      	mov	r0, r3
 8014380:	370c      	adds	r7, #12
 8014382:	46bd      	mov	sp, r7
 8014384:	bc80      	pop	{r7}
 8014386:	4770      	bx	lr

08014388 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d002      	beq.n	801439e <LinkedListAdd+0x16>
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <LinkedListAdd+0x1a>
    {
        return false;
 801439e:	2300      	movs	r3, #0
 80143a0:	e015      	b.n	80143ce <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d102      	bne.n	80143b0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	683a      	ldr	r2, [r7, #0]
 80143ae:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d003      	beq.n	80143c0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	685b      	ldr	r3, [r3, #4]
 80143bc:	683a      	ldr	r2, [r7, #0]
 80143be:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	2200      	movs	r2, #0
 80143c4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	683a      	ldr	r2, [r7, #0]
 80143ca:	605a      	str	r2, [r3, #4]

    return true;
 80143cc:	2301      	movs	r3, #1
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	370c      	adds	r7, #12
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bc80      	pop	{r7}
 80143d6:	4770      	bx	lr

080143d8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80143d8:	b480      	push	{r7}
 80143da:	b085      	sub	sp, #20
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d002      	beq.n	80143ee <LinkedListGetPrevious+0x16>
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d101      	bne.n	80143f2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	e016      	b.n	8014420 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80143f8:	683a      	ldr	r2, [r7, #0]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d00c      	beq.n	801441a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014400:	e002      	b.n	8014408 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d007      	beq.n	801441e <LinkedListGetPrevious+0x46>
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	683a      	ldr	r2, [r7, #0]
 8014414:	429a      	cmp	r2, r3
 8014416:	d1f4      	bne.n	8014402 <LinkedListGetPrevious+0x2a>
 8014418:	e001      	b.n	801441e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801441a:	2300      	movs	r3, #0
 801441c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801441e:	68fb      	ldr	r3, [r7, #12]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3714      	adds	r7, #20
 8014424:	46bd      	mov	sp, r7
 8014426:	bc80      	pop	{r7}
 8014428:	4770      	bx	lr

0801442a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b084      	sub	sp, #16
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
 8014432:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d002      	beq.n	8014440 <LinkedListRemove+0x16>
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d101      	bne.n	8014444 <LinkedListRemove+0x1a>
    {
        return false;
 8014440:	2300      	movs	r3, #0
 8014442:	e020      	b.n	8014486 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014444:	6839      	ldr	r1, [r7, #0]
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f7ff ffc6 	bl	80143d8 <LinkedListGetPrevious>
 801444c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	683a      	ldr	r2, [r7, #0]
 8014454:	429a      	cmp	r2, r3
 8014456:	d103      	bne.n	8014460 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	685b      	ldr	r3, [r3, #4]
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	429a      	cmp	r2, r3
 8014468:	d102      	bne.n	8014470 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	68fa      	ldr	r2, [r7, #12]
 801446e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d003      	beq.n	801447e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	2200      	movs	r2, #0
 8014482:	601a      	str	r2, [r3, #0]

    return true;
 8014484:	2301      	movs	r3, #1
}
 8014486:	4618      	mov	r0, r3
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801448e:	b480      	push	{r7}
 8014490:	b083      	sub	sp, #12
 8014492:	af00      	add	r7, sp, #0
 8014494:	4603      	mov	r3, r0
 8014496:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014498:	79fb      	ldrb	r3, [r7, #7]
 801449a:	2b05      	cmp	r3, #5
 801449c:	d004      	beq.n	80144a8 <IsSticky+0x1a>
 801449e:	2b05      	cmp	r3, #5
 80144a0:	db04      	blt.n	80144ac <IsSticky+0x1e>
 80144a2:	3b08      	subs	r3, #8
 80144a4:	2b02      	cmp	r3, #2
 80144a6:	d801      	bhi.n	80144ac <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80144a8:	2301      	movs	r3, #1
 80144aa:	e000      	b.n	80144ae <IsSticky+0x20>
        default:
            return false;
 80144ac:	2300      	movs	r3, #0
    }
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	370c      	adds	r7, #12
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bc80      	pop	{r7}
 80144b6:	4770      	bx	lr

080144b8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80144bc:	22fc      	movs	r2, #252	; 0xfc
 80144be:	2100      	movs	r1, #0
 80144c0:	4804      	ldr	r0, [pc, #16]	; (80144d4 <LoRaMacCommandsInit+0x1c>)
 80144c2:	f004 f8d1 	bl	8018668 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80144c6:	4803      	ldr	r0, [pc, #12]	; (80144d4 <LoRaMacCommandsInit+0x1c>)
 80144c8:	f7ff ff49 	bl	801435e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	bd80      	pop	{r7, pc}
 80144d2:	bf00      	nop
 80144d4:	20001c44 	.word	0x20001c44

080144d8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b086      	sub	sp, #24
 80144dc:	af00      	add	r7, sp, #0
 80144de:	4603      	mov	r3, r0
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
 80144e4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d101      	bne.n	80144f0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e033      	b.n	8014558 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80144f0:	f7ff fefa 	bl	80142e8 <MallocNewMacCommandSlot>
 80144f4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d101      	bne.n	8014500 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80144fc:	2302      	movs	r3, #2
 80144fe:	e02b      	b.n	8014558 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014500:	6979      	ldr	r1, [r7, #20]
 8014502:	4817      	ldr	r0, [pc, #92]	; (8014560 <LoRaMacCommandsAddCmd+0x88>)
 8014504:	f7ff ff40 	bl	8014388 <LinkedListAdd>
 8014508:	4603      	mov	r3, r0
 801450a:	f083 0301 	eor.w	r3, r3, #1
 801450e:	b2db      	uxtb	r3, r3
 8014510:	2b00      	cmp	r3, #0
 8014512:	d001      	beq.n	8014518 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014514:	2305      	movs	r3, #5
 8014516:	e01f      	b.n	8014558 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	7bfa      	ldrb	r2, [r7, #15]
 801451c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	687a      	ldr	r2, [r7, #4]
 8014522:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	3305      	adds	r3, #5
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	b292      	uxth	r2, r2
 801452c:	68b9      	ldr	r1, [r7, #8]
 801452e:	4618      	mov	r0, r3
 8014530:	f004 f85f 	bl	80185f2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014534:	7bfb      	ldrb	r3, [r7, #15]
 8014536:	4618      	mov	r0, r3
 8014538:	f7ff ffa9 	bl	801448e <IsSticky>
 801453c:	4603      	mov	r3, r0
 801453e:	461a      	mov	r2, r3
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014544:	4b06      	ldr	r3, [pc, #24]	; (8014560 <LoRaMacCommandsAddCmd+0x88>)
 8014546:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4413      	add	r3, r2
 801454e:	3301      	adds	r3, #1
 8014550:	4a03      	ldr	r2, [pc, #12]	; (8014560 <LoRaMacCommandsAddCmd+0x88>)
 8014552:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8014556:	2300      	movs	r3, #0
}
 8014558:	4618      	mov	r0, r3
 801455a:	3718      	adds	r7, #24
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	20001c44 	.word	0x20001c44

08014564 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014572:	2301      	movs	r3, #1
 8014574:	e021      	b.n	80145ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014576:	6879      	ldr	r1, [r7, #4]
 8014578:	4812      	ldr	r0, [pc, #72]	; (80145c4 <LoRaMacCommandsRemoveCmd+0x60>)
 801457a:	f7ff ff56 	bl	801442a <LinkedListRemove>
 801457e:	4603      	mov	r3, r0
 8014580:	f083 0301 	eor.w	r3, r3, #1
 8014584:	b2db      	uxtb	r3, r3
 8014586:	2b00      	cmp	r3, #0
 8014588:	d001      	beq.n	801458e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801458a:	2303      	movs	r3, #3
 801458c:	e015      	b.n	80145ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801458e:	4b0d      	ldr	r3, [pc, #52]	; (80145c4 <LoRaMacCommandsRemoveCmd+0x60>)
 8014590:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	689b      	ldr	r3, [r3, #8]
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	3b01      	subs	r3, #1
 801459c:	4a09      	ldr	r2, [pc, #36]	; (80145c4 <LoRaMacCommandsRemoveCmd+0x60>)
 801459e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f7ff fec8 	bl	8014338 <FreeMacCommandSlot>
 80145a8:	4603      	mov	r3, r0
 80145aa:	f083 0301 	eor.w	r3, r3, #1
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d001      	beq.n	80145b8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80145b4:	2305      	movs	r3, #5
 80145b6:	e000      	b.n	80145ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80145b8:	2300      	movs	r3, #0
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3708      	adds	r7, #8
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	20001c44 	.word	0x20001c44

080145c8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80145ce:	4b0f      	ldr	r3, [pc, #60]	; (801460c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80145d4:	e012      	b.n	80145fc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	7b1b      	ldrb	r3, [r3, #12]
 80145da:	f083 0301 	eor.w	r3, r3, #1
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d008      	beq.n	80145f6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f7ff ffba 	bl	8014564 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	607b      	str	r3, [r7, #4]
 80145f4:	e002      	b.n	80145fc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d1e9      	bne.n	80145d6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014602:	2300      	movs	r3, #0
}
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}
 801460c:	20001c44 	.word	0x20001c44

08014610 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014616:	4b0e      	ldr	r3, [pc, #56]	; (8014650 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801461c:	e00f      	b.n	801463e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	791b      	ldrb	r3, [r3, #4]
 8014628:	4618      	mov	r0, r3
 801462a:	f7ff ff30 	bl	801448e <IsSticky>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d002      	beq.n	801463a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7ff ff95 	bl	8014564 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d1ec      	bne.n	801461e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014644:	2300      	movs	r3, #0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3708      	adds	r7, #8
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	20001c44 	.word	0x20001c44

08014654 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d101      	bne.n	8014666 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014662:	2301      	movs	r3, #1
 8014664:	e005      	b.n	8014672 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014666:	4b05      	ldr	r3, [pc, #20]	; (801467c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014668:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014670:	2300      	movs	r3, #0
}
 8014672:	4618      	mov	r0, r3
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	bc80      	pop	{r7}
 801467a:	4770      	bx	lr
 801467c:	20001c44 	.word	0x20001c44

08014680 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b088      	sub	sp, #32
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801468c:	4b25      	ldr	r3, [pc, #148]	; (8014724 <LoRaMacCommandsSerializeCmds+0xa4>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014692:	2300      	movs	r3, #0
 8014694:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d002      	beq.n	80146a2 <LoRaMacCommandsSerializeCmds+0x22>
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d126      	bne.n	80146f0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80146a2:	2301      	movs	r3, #1
 80146a4:	e039      	b.n	801471a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80146a6:	7efb      	ldrb	r3, [r7, #27]
 80146a8:	68fa      	ldr	r2, [r7, #12]
 80146aa:	1ad2      	subs	r2, r2, r3
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	3301      	adds	r3, #1
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d320      	bcc.n	80146f8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80146b6:	7efb      	ldrb	r3, [r7, #27]
 80146b8:	1c5a      	adds	r2, r3, #1
 80146ba:	76fa      	strb	r2, [r7, #27]
 80146bc:	461a      	mov	r2, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	4413      	add	r3, r2
 80146c2:	69fa      	ldr	r2, [r7, #28]
 80146c4:	7912      	ldrb	r2, [r2, #4]
 80146c6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80146c8:	7efb      	ldrb	r3, [r7, #27]
 80146ca:	687a      	ldr	r2, [r7, #4]
 80146cc:	18d0      	adds	r0, r2, r3
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	1d59      	adds	r1, r3, #5
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	461a      	mov	r2, r3
 80146da:	f003 ff8a 	bl	80185f2 <memcpy1>
            itr += curElement->PayloadSize;
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	689b      	ldr	r3, [r3, #8]
 80146e2:	b2da      	uxtb	r2, r3
 80146e4:	7efb      	ldrb	r3, [r7, #27]
 80146e6:	4413      	add	r3, r2
 80146e8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d1d7      	bne.n	80146a6 <LoRaMacCommandsSerializeCmds+0x26>
 80146f6:	e009      	b.n	801470c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80146f8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80146fa:	e007      	b.n	801470c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014702:	69f8      	ldr	r0, [r7, #28]
 8014704:	f7ff ff2e 	bl	8014564 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1f4      	bne.n	80146fc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014712:	68b8      	ldr	r0, [r7, #8]
 8014714:	f7ff ff9e 	bl	8014654 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014718:	2300      	movs	r3, #0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3720      	adds	r7, #32
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20001c44 	.word	0x20001c44

08014728 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d101      	bne.n	801473a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014736:	2301      	movs	r3, #1
 8014738:	e016      	b.n	8014768 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801473a:	4b0e      	ldr	r3, [pc, #56]	; (8014774 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2200      	movs	r2, #0
 8014744:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014746:	e00b      	b.n	8014760 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	7b1b      	ldrb	r3, [r3, #12]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d004      	beq.n	801475a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2201      	movs	r2, #1
 8014754:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014756:	2300      	movs	r3, #0
 8014758:	e006      	b.n	8014768 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d1f0      	bne.n	8014748 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014766:	2300      	movs	r3, #0
}
 8014768:	4618      	mov	r0, r3
 801476a:	3714      	adds	r7, #20
 801476c:	46bd      	mov	sp, r7
 801476e:	bc80      	pop	{r7}
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	20001c44 	.word	0x20001c44

08014778 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014778:	b480      	push	{r7}
 801477a:	b085      	sub	sp, #20
 801477c:	af00      	add	r7, sp, #0
 801477e:	4603      	mov	r3, r0
 8014780:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014782:	2300      	movs	r3, #0
 8014784:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014786:	79fb      	ldrb	r3, [r7, #7]
 8014788:	3b02      	subs	r3, #2
 801478a:	2b11      	cmp	r3, #17
 801478c:	d850      	bhi.n	8014830 <LoRaMacCommandsGetCmdSize+0xb8>
 801478e:	a201      	add	r2, pc, #4	; (adr r2, 8014794 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014794:	080147dd 	.word	0x080147dd
 8014798:	080147e3 	.word	0x080147e3
 801479c:	080147e9 	.word	0x080147e9
 80147a0:	080147ef 	.word	0x080147ef
 80147a4:	080147f5 	.word	0x080147f5
 80147a8:	080147fb 	.word	0x080147fb
 80147ac:	08014801 	.word	0x08014801
 80147b0:	08014807 	.word	0x08014807
 80147b4:	0801480d 	.word	0x0801480d
 80147b8:	08014831 	.word	0x08014831
 80147bc:	08014831 	.word	0x08014831
 80147c0:	08014813 	.word	0x08014813
 80147c4:	08014831 	.word	0x08014831
 80147c8:	08014831 	.word	0x08014831
 80147cc:	08014819 	.word	0x08014819
 80147d0:	0801481f 	.word	0x0801481f
 80147d4:	08014825 	.word	0x08014825
 80147d8:	0801482b 	.word	0x0801482b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80147dc:	2303      	movs	r3, #3
 80147de:	73fb      	strb	r3, [r7, #15]
            break;
 80147e0:	e027      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80147e2:	2305      	movs	r3, #5
 80147e4:	73fb      	strb	r3, [r7, #15]
            break;
 80147e6:	e024      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80147e8:	2302      	movs	r3, #2
 80147ea:	73fb      	strb	r3, [r7, #15]
            break;
 80147ec:	e021      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80147ee:	2305      	movs	r3, #5
 80147f0:	73fb      	strb	r3, [r7, #15]
            break;
 80147f2:	e01e      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80147f4:	2301      	movs	r3, #1
 80147f6:	73fb      	strb	r3, [r7, #15]
            break;
 80147f8:	e01b      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80147fa:	2306      	movs	r3, #6
 80147fc:	73fb      	strb	r3, [r7, #15]
            break;
 80147fe:	e018      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014800:	2302      	movs	r3, #2
 8014802:	73fb      	strb	r3, [r7, #15]
            break;
 8014804:	e015      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014806:	2302      	movs	r3, #2
 8014808:	73fb      	strb	r3, [r7, #15]
            break;
 801480a:	e012      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801480c:	2305      	movs	r3, #5
 801480e:	73fb      	strb	r3, [r7, #15]
            break;
 8014810:	e00f      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014812:	2306      	movs	r3, #6
 8014814:	73fb      	strb	r3, [r7, #15]
            break;
 8014816:	e00c      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014818:	2301      	movs	r3, #1
 801481a:	73fb      	strb	r3, [r7, #15]
            break;
 801481c:	e009      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801481e:	2305      	movs	r3, #5
 8014820:	73fb      	strb	r3, [r7, #15]
            break;
 8014822:	e006      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014824:	2304      	movs	r3, #4
 8014826:	73fb      	strb	r3, [r7, #15]
            break;
 8014828:	e003      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801482a:	2304      	movs	r3, #4
 801482c:	73fb      	strb	r3, [r7, #15]
            break;
 801482e:	e000      	b.n	8014832 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014830:	bf00      	nop
        }
    }
    return cidSize;
 8014832:	7bfb      	ldrb	r3, [r7, #15]
}
 8014834:	4618      	mov	r0, r3
 8014836:	3714      	adds	r7, #20
 8014838:	46bd      	mov	sp, r7
 801483a:	bc80      	pop	{r7}
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop

08014840 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014840:	b480      	push	{r7}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4a07      	ldr	r2, [pc, #28]	; (8014868 <IncreaseBufferPointer+0x28>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d102      	bne.n	8014856 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014850:	4b06      	ldr	r3, [pc, #24]	; (801486c <IncreaseBufferPointer+0x2c>)
 8014852:	607b      	str	r3, [r7, #4]
 8014854:	e002      	b.n	801485c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	3304      	adds	r3, #4
 801485a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801485c:	687b      	ldr	r3, [r7, #4]
}
 801485e:	4618      	mov	r0, r3
 8014860:	370c      	adds	r7, #12
 8014862:	46bd      	mov	sp, r7
 8014864:	bc80      	pop	{r7}
 8014866:	4770      	bx	lr
 8014868:	20001d5c 	.word	0x20001d5c
 801486c:	20001d4c 	.word	0x20001d4c

08014870 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014870:	b480      	push	{r7}
 8014872:	b083      	sub	sp, #12
 8014874:	af00      	add	r7, sp, #0
 8014876:	4603      	mov	r3, r0
 8014878:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801487a:	79fb      	ldrb	r3, [r7, #7]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d101      	bne.n	8014884 <IsListEmpty+0x14>
    {
        return true;
 8014880:	2301      	movs	r3, #1
 8014882:	e000      	b.n	8014886 <IsListEmpty+0x16>
    }
    return false;
 8014884:	2300      	movs	r3, #0
}
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	bc80      	pop	{r7}
 801488e:	4770      	bx	lr

08014890 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	4603      	mov	r3, r0
 8014898:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801489a:	79fb      	ldrb	r3, [r7, #7]
 801489c:	2b04      	cmp	r3, #4
 801489e:	d901      	bls.n	80148a4 <IsListFull+0x14>
    {
        return true;
 80148a0:	2301      	movs	r3, #1
 80148a2:	e000      	b.n	80148a6 <IsListFull+0x16>
    }
    return false;
 80148a4:	2300      	movs	r3, #0
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	370c      	adds	r7, #12
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bc80      	pop	{r7}
 80148ae:	4770      	bx	lr

080148b0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b086      	sub	sp, #24
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	4603      	mov	r3, r0
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	607a      	str	r2, [r7, #4]
 80148bc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80148c2:	4b13      	ldr	r3, [pc, #76]	; (8014910 <GetElement+0x60>)
 80148c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7ff ffd1 	bl	8014870 <IsListEmpty>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <GetElement+0x28>
    {
        return NULL;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e017      	b.n	8014908 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80148d8:	2300      	movs	r3, #0
 80148da:	74fb      	strb	r3, [r7, #19]
 80148dc:	e00d      	b.n	80148fa <GetElement+0x4a>
    {
        if( element->Request == request )
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	7bfa      	ldrb	r2, [r7, #15]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d101      	bne.n	80148ec <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	e00d      	b.n	8014908 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80148ec:	6978      	ldr	r0, [r7, #20]
 80148ee:	f7ff ffa7 	bl	8014840 <IncreaseBufferPointer>
 80148f2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80148f4:	7cfb      	ldrb	r3, [r7, #19]
 80148f6:	3301      	adds	r3, #1
 80148f8:	74fb      	strb	r3, [r7, #19]
 80148fa:	4b05      	ldr	r3, [pc, #20]	; (8014910 <GetElement+0x60>)
 80148fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014900:	7cfa      	ldrb	r2, [r7, #19]
 8014902:	429a      	cmp	r2, r3
 8014904:	d3eb      	bcc.n	80148de <GetElement+0x2e>
    }

    return NULL;
 8014906:	2300      	movs	r3, #0
}
 8014908:	4618      	mov	r0, r3
 801490a:	3718      	adds	r7, #24
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	20001d40 	.word	0x20001d40

08014914 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801491c:	4a0c      	ldr	r2, [pc, #48]	; (8014950 <LoRaMacConfirmQueueInit+0x3c>)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014922:	4b0b      	ldr	r3, [pc, #44]	; (8014950 <LoRaMacConfirmQueueInit+0x3c>)
 8014924:	2200      	movs	r2, #0
 8014926:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801492a:	4b09      	ldr	r3, [pc, #36]	; (8014950 <LoRaMacConfirmQueueInit+0x3c>)
 801492c:	4a09      	ldr	r2, [pc, #36]	; (8014954 <LoRaMacConfirmQueueInit+0x40>)
 801492e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014930:	4b07      	ldr	r3, [pc, #28]	; (8014950 <LoRaMacConfirmQueueInit+0x3c>)
 8014932:	4a08      	ldr	r2, [pc, #32]	; (8014954 <LoRaMacConfirmQueueInit+0x40>)
 8014934:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014936:	2214      	movs	r2, #20
 8014938:	21ff      	movs	r1, #255	; 0xff
 801493a:	4806      	ldr	r0, [pc, #24]	; (8014954 <LoRaMacConfirmQueueInit+0x40>)
 801493c:	f003 fe94 	bl	8018668 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014940:	4b03      	ldr	r3, [pc, #12]	; (8014950 <LoRaMacConfirmQueueInit+0x3c>)
 8014942:	2201      	movs	r2, #1
 8014944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8014948:	bf00      	nop
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	20001d40 	.word	0x20001d40
 8014954:	20001d4c 	.word	0x20001d4c

08014958 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014960:	4b19      	ldr	r3, [pc, #100]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 8014962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014966:	4618      	mov	r0, r3
 8014968:	f7ff ff92 	bl	8014890 <IsListFull>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d001      	beq.n	8014976 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014972:	2300      	movs	r3, #0
 8014974:	e023      	b.n	80149be <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014976:	4b14      	ldr	r3, [pc, #80]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	7812      	ldrb	r2, [r2, #0]
 801497e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014980:	4b11      	ldr	r3, [pc, #68]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 8014982:	689b      	ldr	r3, [r3, #8]
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	7852      	ldrb	r2, [r2, #1]
 8014988:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801498a:	4b0f      	ldr	r3, [pc, #60]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 801498c:	689b      	ldr	r3, [r3, #8]
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	78d2      	ldrb	r2, [r2, #3]
 8014992:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8014994:	4b0c      	ldr	r3, [pc, #48]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 8014996:	689b      	ldr	r3, [r3, #8]
 8014998:	2200      	movs	r2, #0
 801499a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801499c:	4b0a      	ldr	r3, [pc, #40]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 801499e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149a2:	3301      	adds	r3, #1
 80149a4:	b2da      	uxtb	r2, r3
 80149a6:	4b08      	ldr	r3, [pc, #32]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 80149a8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80149ac:	4b06      	ldr	r3, [pc, #24]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 80149ae:	689b      	ldr	r3, [r3, #8]
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7ff ff45 	bl	8014840 <IncreaseBufferPointer>
 80149b6:	4603      	mov	r3, r0
 80149b8:	4a03      	ldr	r2, [pc, #12]	; (80149c8 <LoRaMacConfirmQueueAdd+0x70>)
 80149ba:	6093      	str	r3, [r2, #8]

    return true;
 80149bc:	2301      	movs	r3, #1
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3708      	adds	r7, #8
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	20001d40 	.word	0x20001d40

080149cc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80149d0:	4b0e      	ldr	r3, [pc, #56]	; (8014a0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80149d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7ff ff4a 	bl	8014870 <IsListEmpty>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d001      	beq.n	80149e6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80149e2:	2300      	movs	r3, #0
 80149e4:	e010      	b.n	8014a08 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80149e6:	4b09      	ldr	r3, [pc, #36]	; (8014a0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80149e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149ec:	3b01      	subs	r3, #1
 80149ee:	b2da      	uxtb	r2, r3
 80149f0:	4b06      	ldr	r3, [pc, #24]	; (8014a0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80149f2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80149f6:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7ff ff20 	bl	8014840 <IncreaseBufferPointer>
 8014a00:	4603      	mov	r3, r0
 8014a02:	4a02      	ldr	r2, [pc, #8]	; (8014a0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014a04:	6053      	str	r3, [r2, #4]

    return true;
 8014a06:	2301      	movs	r3, #1
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	20001d40 	.word	0x20001d40

08014a10 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b084      	sub	sp, #16
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	4603      	mov	r3, r0
 8014a18:	460a      	mov	r2, r1
 8014a1a:	71fb      	strb	r3, [r7, #7]
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014a20:	2300      	movs	r3, #0
 8014a22:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014a24:	4b10      	ldr	r3, [pc, #64]	; (8014a68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7ff ff20 	bl	8014870 <IsListEmpty>
 8014a30:	4603      	mov	r3, r0
 8014a32:	f083 0301 	eor.w	r3, r3, #1
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d011      	beq.n	8014a60 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014a3c:	4b0a      	ldr	r3, [pc, #40]	; (8014a68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014a3e:	6859      	ldr	r1, [r3, #4]
 8014a40:	4b09      	ldr	r3, [pc, #36]	; (8014a68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014a42:	689a      	ldr	r2, [r3, #8]
 8014a44:	79bb      	ldrb	r3, [r7, #6]
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7ff ff32 	bl	80148b0 <GetElement>
 8014a4c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d005      	beq.n	8014a60 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	79fa      	ldrb	r2, [r7, #7]
 8014a58:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2201      	movs	r2, #1
 8014a5e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014a60:	bf00      	nop
 8014a62:	3710      	adds	r7, #16
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	20001d40 	.word	0x20001d40

08014a6c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	4603      	mov	r3, r0
 8014a74:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014a76:	2300      	movs	r3, #0
 8014a78:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014a7a:	4b10      	ldr	r3, [pc, #64]	; (8014abc <LoRaMacConfirmQueueGetStatus+0x50>)
 8014a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7ff fef5 	bl	8014870 <IsListEmpty>
 8014a86:	4603      	mov	r3, r0
 8014a88:	f083 0301 	eor.w	r3, r3, #1
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00e      	beq.n	8014ab0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014a92:	4b0a      	ldr	r3, [pc, #40]	; (8014abc <LoRaMacConfirmQueueGetStatus+0x50>)
 8014a94:	6859      	ldr	r1, [r3, #4]
 8014a96:	4b09      	ldr	r3, [pc, #36]	; (8014abc <LoRaMacConfirmQueueGetStatus+0x50>)
 8014a98:	689a      	ldr	r2, [r3, #8]
 8014a9a:	79fb      	ldrb	r3, [r7, #7]
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7ff ff07 	bl	80148b0 <GetElement>
 8014aa2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d002      	beq.n	8014ab0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	785b      	ldrb	r3, [r3, #1]
 8014aae:	e000      	b.n	8014ab2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014ab0:	2301      	movs	r3, #1
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3710      	adds	r7, #16
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20001d40 	.word	0x20001d40

08014ac0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b084      	sub	sp, #16
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014aca:	4b16      	ldr	r3, [pc, #88]	; (8014b24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014ad0:	4a14      	ldr	r2, [pc, #80]	; (8014b24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014ad2:	79fb      	ldrb	r3, [r7, #7]
 8014ad4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014ad8:	4b12      	ldr	r3, [pc, #72]	; (8014b24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7ff fec6 	bl	8014870 <IsListEmpty>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	f083 0301 	eor.w	r3, r3, #1
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d015      	beq.n	8014b1c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	79fa      	ldrb	r2, [r7, #7]
 8014af4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	78db      	ldrb	r3, [r3, #3]
 8014afa:	f083 0301 	eor.w	r3, r3, #1
 8014afe:	b2db      	uxtb	r3, r3
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d002      	beq.n	8014b0a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2201      	movs	r2, #1
 8014b08:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f7ff fe98 	bl	8014840 <IncreaseBufferPointer>
 8014b10:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014b12:	4b04      	ldr	r3, [pc, #16]	; (8014b24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014b14:	689b      	ldr	r3, [r3, #8]
 8014b16:	68fa      	ldr	r2, [r7, #12]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d1e9      	bne.n	8014af0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014b1c:	bf00      	nop
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	20001d40 	.word	0x20001d40

08014b28 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	4603      	mov	r3, r0
 8014b30:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014b32:	4b09      	ldr	r3, [pc, #36]	; (8014b58 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014b34:	6859      	ldr	r1, [r3, #4]
 8014b36:	4b08      	ldr	r3, [pc, #32]	; (8014b58 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014b38:	689a      	ldr	r2, [r3, #8]
 8014b3a:	79fb      	ldrb	r3, [r7, #7]
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7ff feb7 	bl	80148b0 <GetElement>
 8014b42:	4603      	mov	r3, r0
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d001      	beq.n	8014b4c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	e000      	b.n	8014b4e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014b4c:	2300      	movs	r3, #0
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3708      	adds	r7, #8
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	20001d40 	.word	0x20001d40

08014b5c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014b64:	4b22      	ldr	r3, [pc, #136]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b6a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014b70:	2300      	movs	r3, #0
 8014b72:	73fb      	strb	r3, [r7, #15]
 8014b74:	e032      	b.n	8014bdc <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014b76:	4b1e      	ldr	r3, [pc, #120]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	781a      	ldrb	r2, [r3, #0]
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014b80:	4b1b      	ldr	r3, [pc, #108]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	785a      	ldrb	r2, [r3, #1]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014b8a:	4b19      	ldr	r3, [pc, #100]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	789b      	ldrb	r3, [r3, #2]
 8014b90:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014b92:	7b7b      	ldrb	r3, [r7, #13]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d005      	beq.n	8014ba4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014b98:	4b15      	ldr	r3, [pc, #84]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	689b      	ldr	r3, [r3, #8]
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	4798      	blx	r3
 8014ba2:	e00b      	b.n	8014bbc <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014ba4:	4b12      	ldr	r3, [pc, #72]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014bac:	4b10      	ldr	r3, [pc, #64]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	785b      	ldrb	r3, [r3, #1]
 8014bb2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014bb4:	4b0e      	ldr	r3, [pc, #56]	; (8014bf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	78db      	ldrb	r3, [r3, #3]
 8014bba:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014bbc:	f7ff ff06 	bl	80149cc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014bc0:	7b7b      	ldrb	r3, [r7, #13]
 8014bc2:	f083 0301 	eor.w	r3, r3, #1
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d004      	beq.n	8014bd6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014bcc:	f107 0308 	add.w	r3, r7, #8
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7ff fec1 	bl	8014958 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014bd6:	7bfb      	ldrb	r3, [r7, #15]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	73fb      	strb	r3, [r7, #15]
 8014bdc:	7bfa      	ldrb	r2, [r7, #15]
 8014bde:	7bbb      	ldrb	r3, [r7, #14]
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d3c8      	bcc.n	8014b76 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014be4:	bf00      	nop
 8014be6:	bf00      	nop
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	20001d40 	.word	0x20001d40

08014bf4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014bf8:	4b03      	ldr	r3, [pc, #12]	; (8014c08 <LoRaMacConfirmQueueGetCnt+0x14>)
 8014bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bc80      	pop	{r7}
 8014c04:	4770      	bx	lr
 8014c06:	bf00      	nop
 8014c08:	20001d40 	.word	0x20001d40

08014c0c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014c10:	4b06      	ldr	r3, [pc, #24]	; (8014c2c <LoRaMacConfirmQueueIsFull+0x20>)
 8014c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff fe3a 	bl	8014890 <IsListFull>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d001      	beq.n	8014c26 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014c22:	2301      	movs	r3, #1
 8014c24:	e000      	b.n	8014c28 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8014c26:	2300      	movs	r3, #0
    }
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	20001d40 	.word	0x20001d40

08014c30 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b08e      	sub	sp, #56	; 0x38
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	60f8      	str	r0, [r7, #12]
 8014c38:	607b      	str	r3, [r7, #4]
 8014c3a:	460b      	mov	r3, r1
 8014c3c:	817b      	strh	r3, [r7, #10]
 8014c3e:	4613      	mov	r3, r2
 8014c40:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d101      	bne.n	8014c4c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c48:	230a      	movs	r3, #10
 8014c4a:	e086      	b.n	8014d5a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8014c52:	2301      	movs	r3, #1
 8014c54:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8014c56:	2300      	movs	r3, #0
 8014c58:	623b      	str	r3, [r7, #32]
 8014c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c5e:	2200      	movs	r2, #0
 8014c60:	601a      	str	r2, [r3, #0]
 8014c62:	605a      	str	r2, [r3, #4]
 8014c64:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8014c66:	2300      	movs	r3, #0
 8014c68:	613b      	str	r3, [r7, #16]
 8014c6a:	f107 0314 	add.w	r3, r7, #20
 8014c6e:	2200      	movs	r2, #0
 8014c70:	601a      	str	r2, [r3, #0]
 8014c72:	605a      	str	r2, [r3, #4]
 8014c74:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8014c76:	2301      	movs	r3, #1
 8014c78:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014c7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014c7e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	0a1b      	lsrs	r3, r3, #8
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	0c1b      	lsrs	r3, r3, #16
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	0e1b      	lsrs	r3, r3, #24
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8014c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ca6:	0a1b      	lsrs	r3, r3, #8
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cae:	0c1b      	lsrs	r3, r3, #16
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cb6:	0e1b      	lsrs	r3, r3, #24
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014cbc:	e048      	b.n	8014d50 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8014cbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014cc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014cca:	f107 0320 	add.w	r3, r7, #32
 8014cce:	7a7a      	ldrb	r2, [r7, #9]
 8014cd0:	f107 0010 	add.w	r0, r7, #16
 8014cd4:	2110      	movs	r1, #16
 8014cd6:	f7f9 f8a0 	bl	800de1a <SecureElementAesEncrypt>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d001      	beq.n	8014ce4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ce0:	230f      	movs	r3, #15
 8014ce2:	e03a      	b.n	8014d5a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014cea:	e01e      	b.n	8014d2a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014cec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014cf4:	4413      	add	r3, r2
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	4413      	add	r3, r2
 8014cfc:	7819      	ldrb	r1, [r3, #0]
 8014cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014d02:	3338      	adds	r3, #56	; 0x38
 8014d04:	443b      	add	r3, r7
 8014d06:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014d0a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8014d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014d12:	4403      	add	r3, r0
 8014d14:	4618      	mov	r0, r3
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	4403      	add	r3, r0
 8014d1a:	404a      	eors	r2, r1
 8014d1c:	b2d2      	uxtb	r2, r2
 8014d1e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014d20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014d24:	3301      	adds	r3, #1
 8014d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014d2e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014d32:	2a10      	cmp	r2, #16
 8014d34:	bfa8      	it	ge
 8014d36:	2210      	movge	r2, #16
 8014d38:	b212      	sxth	r2, r2
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	dbd6      	blt.n	8014cec <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014d3e:	897b      	ldrh	r3, [r7, #10]
 8014d40:	3b10      	subs	r3, #16
 8014d42:	b29b      	uxth	r3, r3
 8014d44:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8014d46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d4a:	3310      	adds	r3, #16
 8014d4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8014d50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	dcb2      	bgt.n	8014cbe <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3738      	adds	r7, #56	; 0x38
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}

08014d62 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014d62:	b490      	push	{r4, r7}
 8014d64:	b082      	sub	sp, #8
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	4604      	mov	r4, r0
 8014d6a:	4608      	mov	r0, r1
 8014d6c:	4611      	mov	r1, r2
 8014d6e:	461a      	mov	r2, r3
 8014d70:	4623      	mov	r3, r4
 8014d72:	80fb      	strh	r3, [r7, #6]
 8014d74:	4603      	mov	r3, r0
 8014d76:	717b      	strb	r3, [r7, #5]
 8014d78:	460b      	mov	r3, r1
 8014d7a:	713b      	strb	r3, [r7, #4]
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014d80:	69bb      	ldr	r3, [r7, #24]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d101      	bne.n	8014d8a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d86:	230a      	movs	r3, #10
 8014d88:	e04e      	b.n	8014e28 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	2249      	movs	r2, #73	; 0x49
 8014d8e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	3301      	adds	r3, #1
 8014d94:	2200      	movs	r2, #0
 8014d96:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014d98:	69bb      	ldr	r3, [r7, #24]
 8014d9a:	3302      	adds	r3, #2
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014da0:	69bb      	ldr	r3, [r7, #24]
 8014da2:	3303      	adds	r3, #3
 8014da4:	2200      	movs	r2, #0
 8014da6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014da8:	69bb      	ldr	r3, [r7, #24]
 8014daa:	3304      	adds	r3, #4
 8014dac:	2200      	movs	r2, #0
 8014dae:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	3305      	adds	r3, #5
 8014db4:	78fa      	ldrb	r2, [r7, #3]
 8014db6:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014db8:	69bb      	ldr	r3, [r7, #24]
 8014dba:	3306      	adds	r3, #6
 8014dbc:	693a      	ldr	r2, [r7, #16]
 8014dbe:	b2d2      	uxtb	r2, r2
 8014dc0:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	0a1a      	lsrs	r2, r3, #8
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	3307      	adds	r3, #7
 8014dca:	b2d2      	uxtb	r2, r2
 8014dcc:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	0c1a      	lsrs	r2, r3, #16
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	3308      	adds	r3, #8
 8014dd6:	b2d2      	uxtb	r2, r2
 8014dd8:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	0e1a      	lsrs	r2, r3, #24
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	3309      	adds	r3, #9
 8014de2:	b2d2      	uxtb	r2, r2
 8014de4:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	330a      	adds	r3, #10
 8014dea:	697a      	ldr	r2, [r7, #20]
 8014dec:	b2d2      	uxtb	r2, r2
 8014dee:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	0a1a      	lsrs	r2, r3, #8
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	330b      	adds	r3, #11
 8014df8:	b2d2      	uxtb	r2, r2
 8014dfa:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	0c1a      	lsrs	r2, r3, #16
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	330c      	adds	r3, #12
 8014e04:	b2d2      	uxtb	r2, r2
 8014e06:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	0e1a      	lsrs	r2, r3, #24
 8014e0c:	69bb      	ldr	r3, [r7, #24]
 8014e0e:	330d      	adds	r3, #13
 8014e10:	b2d2      	uxtb	r2, r2
 8014e12:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	330e      	adds	r3, #14
 8014e18:	2200      	movs	r2, #0
 8014e1a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014e1c:	69bb      	ldr	r3, [r7, #24]
 8014e1e:	330f      	adds	r3, #15
 8014e20:	88fa      	ldrh	r2, [r7, #6]
 8014e22:	b2d2      	uxtb	r2, r2
 8014e24:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014e26:	2300      	movs	r3, #0
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bc90      	pop	{r4, r7}
 8014e30:	4770      	bx	lr

08014e32 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014e32:	b590      	push	{r4, r7, lr}
 8014e34:	b08b      	sub	sp, #44	; 0x2c
 8014e36:	af04      	add	r7, sp, #16
 8014e38:	6078      	str	r0, [r7, #4]
 8014e3a:	4608      	mov	r0, r1
 8014e3c:	4611      	mov	r1, r2
 8014e3e:	461a      	mov	r2, r3
 8014e40:	4603      	mov	r3, r0
 8014e42:	807b      	strh	r3, [r7, #2]
 8014e44:	460b      	mov	r3, r1
 8014e46:	707b      	strb	r3, [r7, #1]
 8014e48:	4613      	mov	r3, r2
 8014e4a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d002      	beq.n	8014e58 <ComputeCmacB0+0x26>
 8014e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e58:	230a      	movs	r3, #10
 8014e5a:	e024      	b.n	8014ea6 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014e5c:	887b      	ldrh	r3, [r7, #2]
 8014e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e62:	d901      	bls.n	8014e68 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014e64:	230e      	movs	r3, #14
 8014e66:	e01e      	b.n	8014ea6 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014e68:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8014e6c:	783a      	ldrb	r2, [r7, #0]
 8014e6e:	7879      	ldrb	r1, [r7, #1]
 8014e70:	8878      	ldrh	r0, [r7, #2]
 8014e72:	f107 0308 	add.w	r3, r7, #8
 8014e76:	9302      	str	r3, [sp, #8]
 8014e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7a:	9301      	str	r3, [sp, #4]
 8014e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e7e:	9300      	str	r3, [sp, #0]
 8014e80:	4623      	mov	r3, r4
 8014e82:	f7ff ff6e 	bl	8014d62 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014e86:	7879      	ldrb	r1, [r7, #1]
 8014e88:	887a      	ldrh	r2, [r7, #2]
 8014e8a:	f107 0008 	add.w	r0, r7, #8
 8014e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e90:	9300      	str	r3, [sp, #0]
 8014e92:	460b      	mov	r3, r1
 8014e94:	6879      	ldr	r1, [r7, #4]
 8014e96:	f7f8 ff73 	bl	800dd80 <SecureElementComputeAesCmac>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d001      	beq.n	8014ea4 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ea0:	230f      	movs	r3, #15
 8014ea2:	e000      	b.n	8014ea6 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014ea4:	2300      	movs	r3, #0
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	371c      	adds	r7, #28
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd90      	pop	{r4, r7, pc}

08014eae <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014eae:	b590      	push	{r4, r7, lr}
 8014eb0:	b0cd      	sub	sp, #308	; 0x134
 8014eb2:	af04      	add	r7, sp, #16
 8014eb4:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014eb8:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014ebc:	6020      	str	r0, [r4, #0]
 8014ebe:	460c      	mov	r4, r1
 8014ec0:	4610      	mov	r0, r2
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ec8:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014ecc:	4622      	mov	r2, r4
 8014ece:	801a      	strh	r2, [r3, #0]
 8014ed0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ed4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014ed8:	4602      	mov	r2, r0
 8014eda:	701a      	strb	r2, [r3, #0]
 8014edc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ee0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014ee4:	460a      	mov	r2, r1
 8014ee6:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014ee8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014eec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d101      	bne.n	8014efa <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ef6:	230a      	movs	r3, #10
 8014ef8:	e063      	b.n	8014fc2 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014efa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014efe:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014f02:	881b      	ldrh	r3, [r3, #0]
 8014f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f08:	d901      	bls.n	8014f0e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014f0a:	230e      	movs	r3, #14
 8014f0c:	e059      	b.n	8014fc2 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014f0e:	f107 030c 	add.w	r3, r7, #12
 8014f12:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014f16:	2100      	movs	r1, #0
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f003 fba5 	bl	8018668 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014f1e:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8014f22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014f2a:	781a      	ldrb	r2, [r3, #0]
 8014f2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f30:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014f34:	7819      	ldrb	r1, [r3, #0]
 8014f36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f3a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014f3e:	8818      	ldrh	r0, [r3, #0]
 8014f40:	f107 030c 	add.w	r3, r7, #12
 8014f44:	9302      	str	r3, [sp, #8]
 8014f46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014f4a:	9301      	str	r3, [sp, #4]
 8014f4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014f50:	9300      	str	r3, [sp, #0]
 8014f52:	4623      	mov	r3, r4
 8014f54:	f7ff ff05 	bl	8014d62 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014f58:	f107 030c 	add.w	r3, r7, #12
 8014f5c:	3310      	adds	r3, #16
 8014f5e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014f62:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8014f66:	8812      	ldrh	r2, [r2, #0]
 8014f68:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014f6c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014f70:	6809      	ldr	r1, [r1, #0]
 8014f72:	4618      	mov	r0, r3
 8014f74:	f003 fb3d 	bl	80185f2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014f78:	2306      	movs	r3, #6
 8014f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014f7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f82:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014f86:	881b      	ldrh	r3, [r3, #0]
 8014f88:	3310      	adds	r3, #16
 8014f8a:	b299      	uxth	r1, r3
 8014f8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f90:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	f107 000c 	add.w	r0, r7, #12
 8014f9a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014f9e:	f7f8 ff0d 	bl	800ddbc <SecureElementVerifyAesCmac>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d101      	bne.n	8014fb4 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	e006      	b.n	8014fc2 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014fb8:	2b01      	cmp	r3, #1
 8014fba:	d101      	bne.n	8014fc0 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	e000      	b.n	8014fc2 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fc0:	230f      	movs	r3, #15
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd90      	pop	{r4, r7, pc}

08014fcc <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	6039      	str	r1, [r7, #0]
 8014fd6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014fd8:	2300      	movs	r3, #0
 8014fda:	73fb      	strb	r3, [r7, #15]
 8014fdc:	e011      	b.n	8015002 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014fde:	7bfb      	ldrb	r3, [r7, #15]
 8014fe0:	4a0c      	ldr	r2, [pc, #48]	; (8015014 <GetKeyAddrItem+0x48>)
 8014fe2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014fe6:	79fa      	ldrb	r2, [r7, #7]
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d107      	bne.n	8014ffc <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014fec:	7bfb      	ldrb	r3, [r7, #15]
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	4a08      	ldr	r2, [pc, #32]	; (8015014 <GetKeyAddrItem+0x48>)
 8014ff2:	441a      	add	r2, r3
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	e006      	b.n	801500a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014ffc:	7bfb      	ldrb	r3, [r7, #15]
 8014ffe:	3301      	adds	r3, #1
 8015000:	73fb      	strb	r3, [r7, #15]
 8015002:	7bfb      	ldrb	r3, [r7, #15]
 8015004:	2b01      	cmp	r3, #1
 8015006:	d9ea      	bls.n	8014fde <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015008:	230c      	movs	r3, #12
}
 801500a:	4618      	mov	r0, r3
 801500c:	3714      	adds	r7, #20
 801500e:	46bd      	mov	sp, r7
 8015010:	bc80      	pop	{r7}
 8015012:	4770      	bx	lr
 8015014:	2000012c 	.word	0x2000012c

08015018 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b088      	sub	sp, #32
 801501c:	af00      	add	r7, sp, #0
 801501e:	60b9      	str	r1, [r7, #8]
 8015020:	607a      	str	r2, [r7, #4]
 8015022:	461a      	mov	r2, r3
 8015024:	4603      	mov	r3, r0
 8015026:	73fb      	strb	r3, [r7, #15]
 8015028:	4613      	mov	r3, r2
 801502a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 801502c:	2300      	movs	r3, #0
 801502e:	613b      	str	r3, [r7, #16]
 8015030:	f107 0314 	add.w	r3, r7, #20
 8015034:	2200      	movs	r2, #0
 8015036:	601a      	str	r2, [r3, #0]
 8015038:	605a      	str	r2, [r3, #4]
 801503a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 801503c:	7bfb      	ldrb	r3, [r7, #15]
 801503e:	2b02      	cmp	r3, #2
 8015040:	d002      	beq.n	8015048 <DeriveSessionKey10x+0x30>
 8015042:	2b03      	cmp	r3, #3
 8015044:	d003      	beq.n	801504e <DeriveSessionKey10x+0x36>
 8015046:	e005      	b.n	8015054 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8015048:	2301      	movs	r3, #1
 801504a:	743b      	strb	r3, [r7, #16]
            break;
 801504c:	e004      	b.n	8015058 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801504e:	2302      	movs	r3, #2
 8015050:	743b      	strb	r3, [r7, #16]
            break;
 8015052:	e001      	b.n	8015058 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015054:	230b      	movs	r3, #11
 8015056:	e02a      	b.n	80150ae <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	b2db      	uxtb	r3, r3
 801505c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	0a1b      	lsrs	r3, r3, #8
 8015062:	b2db      	uxtb	r3, r3
 8015064:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	0c1b      	lsrs	r3, r3, #16
 801506a:	b2db      	uxtb	r3, r3
 801506c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	b2db      	uxtb	r3, r3
 8015072:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	0a1b      	lsrs	r3, r3, #8
 8015078:	b2db      	uxtb	r3, r3
 801507a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	0c1b      	lsrs	r3, r3, #16
 8015080:	b2db      	uxtb	r3, r3
 8015082:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015084:	89bb      	ldrh	r3, [r7, #12]
 8015086:	b2db      	uxtb	r3, r3
 8015088:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801508a:	89bb      	ldrh	r3, [r7, #12]
 801508c:	0a1b      	lsrs	r3, r3, #8
 801508e:	b29b      	uxth	r3, r3
 8015090:	b2db      	uxtb	r3, r3
 8015092:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015094:	7bfa      	ldrb	r2, [r7, #15]
 8015096:	f107 0310 	add.w	r3, r7, #16
 801509a:	2101      	movs	r1, #1
 801509c:	4618      	mov	r0, r3
 801509e:	f7f8 ff23 	bl	800dee8 <SecureElementDeriveAndStoreKey>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d001      	beq.n	80150ac <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150a8:	230f      	movs	r3, #15
 80150aa:	e000      	b.n	80150ae <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80150ac:	2300      	movs	r3, #0
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3720      	adds	r7, #32
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
	...

080150b8 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80150b8:	b480      	push	{r7}
 80150ba:	b083      	sub	sp, #12
 80150bc:	af00      	add	r7, sp, #0
 80150be:	4603      	mov	r3, r0
 80150c0:	6039      	str	r1, [r7, #0]
 80150c2:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d101      	bne.n	80150ce <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150ca:	230a      	movs	r3, #10
 80150cc:	e03b      	b.n	8015146 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80150ce:	79fb      	ldrb	r3, [r7, #7]
 80150d0:	3b01      	subs	r3, #1
 80150d2:	2b03      	cmp	r3, #3
 80150d4:	d834      	bhi.n	8015140 <GetLastFcntDown+0x88>
 80150d6:	a201      	add	r2, pc, #4	; (adr r2, 80150dc <GetLastFcntDown+0x24>)
 80150d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150dc:	080150ed 	.word	0x080150ed
 80150e0:	08015105 	.word	0x08015105
 80150e4:	0801511d 	.word	0x0801511d
 80150e8:	08015135 	.word	0x08015135
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80150ec:	4b18      	ldr	r3, [pc, #96]	; (8015150 <GetLastFcntDown+0x98>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	691a      	ldr	r2, [r3, #16]
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80150f6:	4b16      	ldr	r3, [pc, #88]	; (8015150 <GetLastFcntDown+0x98>)
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	4b15      	ldr	r3, [pc, #84]	; (8015150 <GetLastFcntDown+0x98>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	6912      	ldr	r2, [r2, #16]
 8015100:	621a      	str	r2, [r3, #32]
            break;
 8015102:	e01f      	b.n	8015144 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015104:	4b12      	ldr	r3, [pc, #72]	; (8015150 <GetLastFcntDown+0x98>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	695a      	ldr	r2, [r3, #20]
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801510e:	4b10      	ldr	r3, [pc, #64]	; (8015150 <GetLastFcntDown+0x98>)
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	4b0f      	ldr	r3, [pc, #60]	; (8015150 <GetLastFcntDown+0x98>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	6952      	ldr	r2, [r2, #20]
 8015118:	621a      	str	r2, [r3, #32]
            break;
 801511a:	e013      	b.n	8015144 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801511c:	4b0c      	ldr	r3, [pc, #48]	; (8015150 <GetLastFcntDown+0x98>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	699a      	ldr	r2, [r3, #24]
 8015122:	683b      	ldr	r3, [r7, #0]
 8015124:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8015126:	4b0a      	ldr	r3, [pc, #40]	; (8015150 <GetLastFcntDown+0x98>)
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	4b09      	ldr	r3, [pc, #36]	; (8015150 <GetLastFcntDown+0x98>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	6992      	ldr	r2, [r2, #24]
 8015130:	621a      	str	r2, [r3, #32]
            break;
 8015132:	e007      	b.n	8015144 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8015134:	4b06      	ldr	r3, [pc, #24]	; (8015150 <GetLastFcntDown+0x98>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	69da      	ldr	r2, [r3, #28]
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	601a      	str	r2, [r3, #0]
            break;
 801513e:	e001      	b.n	8015144 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015140:	2305      	movs	r3, #5
 8015142:	e000      	b.n	8015146 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015144:	2300      	movs	r3, #0
}
 8015146:	4618      	mov	r0, r3
 8015148:	370c      	adds	r7, #12
 801514a:	46bd      	mov	sp, r7
 801514c:	bc80      	pop	{r7}
 801514e:	4770      	bx	lr
 8015150:	20001d64 	.word	0x20001d64

08015154 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	6039      	str	r1, [r7, #0]
 801515e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015160:	2300      	movs	r3, #0
 8015162:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015164:	f107 020c 	add.w	r2, r7, #12
 8015168:	79fb      	ldrb	r3, [r7, #7]
 801516a:	4611      	mov	r1, r2
 801516c:	4618      	mov	r0, r3
 801516e:	f7ff ffa3 	bl	80150b8 <GetLastFcntDown>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <CheckFCntDown+0x28>
    {
        return false;
 8015178:	2300      	movs	r3, #0
 801517a:	e00a      	b.n	8015192 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	429a      	cmp	r2, r3
 8015182:	d803      	bhi.n	801518c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015184:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801518a:	d101      	bne.n	8015190 <CheckFCntDown+0x3c>
    {
        return true;
 801518c:	2301      	movs	r3, #1
 801518e:	e000      	b.n	8015192 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015190:	2300      	movs	r3, #0
    }
}
 8015192:	4618      	mov	r0, r3
 8015194:	3710      	adds	r7, #16
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
	...

0801519c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	4603      	mov	r3, r0
 80151a4:	6039      	str	r1, [r7, #0]
 80151a6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80151a8:	79fb      	ldrb	r3, [r7, #7]
 80151aa:	3b01      	subs	r3, #1
 80151ac:	2b03      	cmp	r3, #3
 80151ae:	d81f      	bhi.n	80151f0 <UpdateFCntDown+0x54>
 80151b0:	a201      	add	r2, pc, #4	; (adr r2, 80151b8 <UpdateFCntDown+0x1c>)
 80151b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151b6:	bf00      	nop
 80151b8:	080151c9 	.word	0x080151c9
 80151bc:	080151d3 	.word	0x080151d3
 80151c0:	080151dd 	.word	0x080151dd
 80151c4:	080151e7 	.word	0x080151e7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80151c8:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <UpdateFCntDown+0x60>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	683a      	ldr	r2, [r7, #0]
 80151ce:	611a      	str	r2, [r3, #16]
            break;
 80151d0:	e00f      	b.n	80151f2 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80151d2:	4b0a      	ldr	r3, [pc, #40]	; (80151fc <UpdateFCntDown+0x60>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	683a      	ldr	r2, [r7, #0]
 80151d8:	615a      	str	r2, [r3, #20]
            break;
 80151da:	e00a      	b.n	80151f2 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80151dc:	4b07      	ldr	r3, [pc, #28]	; (80151fc <UpdateFCntDown+0x60>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	683a      	ldr	r2, [r7, #0]
 80151e2:	619a      	str	r2, [r3, #24]
            break;
 80151e4:	e005      	b.n	80151f2 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80151e6:	4b05      	ldr	r3, [pc, #20]	; (80151fc <UpdateFCntDown+0x60>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	683a      	ldr	r2, [r7, #0]
 80151ec:	61da      	str	r2, [r3, #28]
            break;
 80151ee:	e000      	b.n	80151f2 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80151f0:	bf00      	nop
    }
}
 80151f2:	bf00      	nop
 80151f4:	370c      	adds	r7, #12
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bc80      	pop	{r7}
 80151fa:	4770      	bx	lr
 80151fc:	20001d64 	.word	0x20001d64

08015200 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015200:	b480      	push	{r7}
 8015202:	b083      	sub	sp, #12
 8015204:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8015206:	4b18      	ldr	r3, [pc, #96]	; (8015268 <ResetFCnts+0x68>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2200      	movs	r2, #0
 801520c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801520e:	4b16      	ldr	r3, [pc, #88]	; (8015268 <ResetFCnts+0x68>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	f04f 32ff 	mov.w	r2, #4294967295
 8015216:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015218:	4b13      	ldr	r3, [pc, #76]	; (8015268 <ResetFCnts+0x68>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	f04f 32ff 	mov.w	r2, #4294967295
 8015220:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015222:	4b11      	ldr	r3, [pc, #68]	; (8015268 <ResetFCnts+0x68>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f04f 32ff 	mov.w	r2, #4294967295
 801522a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801522c:	4b0e      	ldr	r3, [pc, #56]	; (8015268 <ResetFCnts+0x68>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	4b0d      	ldr	r3, [pc, #52]	; (8015268 <ResetFCnts+0x68>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	6992      	ldr	r2, [r2, #24]
 8015236:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015238:	2300      	movs	r3, #0
 801523a:	607b      	str	r3, [r7, #4]
 801523c:	e00b      	b.n	8015256 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801523e:	4b0a      	ldr	r3, [pc, #40]	; (8015268 <ResetFCnts+0x68>)
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	3306      	adds	r3, #6
 8015246:	009b      	lsls	r3, r3, #2
 8015248:	4413      	add	r3, r2
 801524a:	f04f 32ff 	mov.w	r2, #4294967295
 801524e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	3301      	adds	r3, #1
 8015254:	607b      	str	r3, [r7, #4]
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2b00      	cmp	r3, #0
 801525a:	ddf0      	ble.n	801523e <ResetFCnts+0x3e>
    }
}
 801525c:	bf00      	nop
 801525e:	bf00      	nop
 8015260:	370c      	adds	r7, #12
 8015262:	46bd      	mov	sp, r7
 8015264:	bc80      	pop	{r7}
 8015266:	4770      	bx	lr
 8015268:	20001d64 	.word	0x20001d64

0801526c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d101      	bne.n	801527e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801527a:	2309      	movs	r3, #9
 801527c:	e01c      	b.n	80152b8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801527e:	4a10      	ldr	r2, [pc, #64]	; (80152c0 <LoRaMacCryptoInit+0x54>)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015284:	4b0e      	ldr	r3, [pc, #56]	; (80152c0 <LoRaMacCryptoInit+0x54>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2228      	movs	r2, #40	; 0x28
 801528a:	2100      	movs	r1, #0
 801528c:	4618      	mov	r0, r3
 801528e:	f003 f9eb 	bl	8018668 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8015292:	4b0b      	ldr	r3, [pc, #44]	; (80152c0 <LoRaMacCryptoInit+0x54>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2201      	movs	r2, #1
 8015298:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801529a:	4b09      	ldr	r3, [pc, #36]	; (80152c0 <LoRaMacCryptoInit+0x54>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2201      	movs	r2, #1
 80152a0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80152a2:	4b07      	ldr	r3, [pc, #28]	; (80152c0 <LoRaMacCryptoInit+0x54>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2201      	movs	r2, #1
 80152a8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80152aa:	4b05      	ldr	r3, [pc, #20]	; (80152c0 <LoRaMacCryptoInit+0x54>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	2200      	movs	r2, #0
 80152b0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80152b2:	f7ff ffa5 	bl	8015200 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80152b6:	2300      	movs	r3, #0
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	20001d64 	.word	0x20001d64

080152c4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80152cc:	4b04      	ldr	r3, [pc, #16]	; (80152e0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	687a      	ldr	r2, [r7, #4]
 80152d2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	370c      	adds	r7, #12
 80152da:	46bd      	mov	sp, r7
 80152dc:	bc80      	pop	{r7}
 80152de:	4770      	bx	lr
 80152e0:	20001d64 	.word	0x20001d64

080152e4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d101      	bne.n	80152f6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152f2:	230a      	movs	r3, #10
 80152f4:	e006      	b.n	8015304 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80152f6:	4b06      	ldr	r3, [pc, #24]	; (8015310 <LoRaMacCryptoGetFCntUp+0x2c>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	68db      	ldr	r3, [r3, #12]
 80152fc:	1c5a      	adds	r2, r3, #1
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015302:	2300      	movs	r3, #0
}
 8015304:	4618      	mov	r0, r3
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	bc80      	pop	{r7}
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	20001d64 	.word	0x20001d64

08015314 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015318:	b08a      	sub	sp, #40	; 0x28
 801531a:	af00      	add	r7, sp, #0
 801531c:	613a      	str	r2, [r7, #16]
 801531e:	60fb      	str	r3, [r7, #12]
 8015320:	4603      	mov	r3, r0
 8015322:	75fb      	strb	r3, [r7, #23]
 8015324:	460b      	mov	r3, r1
 8015326:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8015328:	2300      	movs	r3, #0
 801532a:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 801532c:	2300      	movs	r3, #0
 801532e:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015330:	2313      	movs	r3, #19
 8015332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d101      	bne.n	8015340 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801533c:	230a      	movs	r3, #10
 801533e:	e057      	b.n	80153f0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015340:	f107 021c 	add.w	r2, r7, #28
 8015344:	7dfb      	ldrb	r3, [r7, #23]
 8015346:	4611      	mov	r1, r2
 8015348:	4618      	mov	r0, r3
 801534a:	f7ff feb5 	bl	80150b8 <GetLastFcntDown>
 801534e:	4603      	mov	r3, r0
 8015350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015358:	2b00      	cmp	r3, #0
 801535a:	d002      	beq.n	8015362 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 801535c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015360:	e046      	b.n	80153f0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015368:	d103      	bne.n	8015372 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	693a      	ldr	r2, [r7, #16]
 801536e:	601a      	str	r2, [r3, #0]
 8015370:	e01e      	b.n	80153b0 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	b29b      	uxth	r3, r3
 8015376:	693a      	ldr	r2, [r7, #16]
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 801537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537e:	2b00      	cmp	r3, #0
 8015380:	dd05      	ble.n	801538e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015382:	69fa      	ldr	r2, [r7, #28]
 8015384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015386:	441a      	add	r2, r3
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	601a      	str	r2, [r3, #0]
 801538c:	e010      	b.n	80153b0 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015390:	2b00      	cmp	r3, #0
 8015392:	d104      	bne.n	801539e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015394:	69fa      	ldr	r2, [r7, #28]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801539a:	2307      	movs	r3, #7
 801539c:	e028      	b.n	80153f0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	0c1b      	lsrs	r3, r3, #16
 80153a2:	041b      	lsls	r3, r3, #16
 80153a4:	693a      	ldr	r2, [r7, #16]
 80153a6:	4413      	add	r3, r2
 80153a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80153b0:	4b12      	ldr	r3, [pc, #72]	; (80153fc <LoRaMacCryptoGetFCntDown+0xe8>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	789b      	ldrb	r3, [r3, #2]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d119      	bne.n	80153ee <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	2200      	movs	r2, #0
 80153c0:	603b      	str	r3, [r7, #0]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	2200      	movs	r2, #0
 80153c8:	469a      	mov	sl, r3
 80153ca:	4693      	mov	fp, r2
 80153cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80153d0:	4611      	mov	r1, r2
 80153d2:	ebb1 040a 	subs.w	r4, r1, sl
 80153d6:	eb63 050b 	sbc.w	r5, r3, fp
 80153da:	8abb      	ldrh	r3, [r7, #20]
 80153dc:	2200      	movs	r2, #0
 80153de:	4698      	mov	r8, r3
 80153e0:	4691      	mov	r9, r2
 80153e2:	4544      	cmp	r4, r8
 80153e4:	eb75 0309 	sbcs.w	r3, r5, r9
 80153e8:	db01      	blt.n	80153ee <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80153ea:	2308      	movs	r3, #8
 80153ec:	e000      	b.n	80153f0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80153ee:	2300      	movs	r3, #0
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3728      	adds	r7, #40	; 0x28
 80153f4:	46bd      	mov	sp, r7
 80153f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80153fa:	bf00      	nop
 80153fc:	20001d64 	.word	0x20001d64

08015400 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015400:	b480      	push	{r7}
 8015402:	b085      	sub	sp, #20
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d101      	bne.n	8015412 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801540e:	230a      	movs	r3, #10
 8015410:	e017      	b.n	8015442 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015412:	2300      	movs	r3, #0
 8015414:	60fb      	str	r3, [r7, #12]
 8015416:	e010      	b.n	801543a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015418:	4b0c      	ldr	r3, [pc, #48]	; (801544c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801541a:	6819      	ldr	r1, [r3, #0]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	222c      	movs	r2, #44	; 0x2c
 8015420:	fb02 f303 	mul.w	r3, r2, r3
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	4413      	add	r3, r2
 8015428:	68fa      	ldr	r2, [r7, #12]
 801542a:	3206      	adds	r2, #6
 801542c:	0092      	lsls	r2, r2, #2
 801542e:	440a      	add	r2, r1
 8015430:	3204      	adds	r2, #4
 8015432:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	3301      	adds	r3, #1
 8015438:	60fb      	str	r3, [r7, #12]
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	2b00      	cmp	r3, #0
 801543e:	ddeb      	ble.n	8015418 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015440:	2300      	movs	r3, #0
}
 8015442:	4618      	mov	r0, r3
 8015444:	3714      	adds	r7, #20
 8015446:	46bd      	mov	sp, r7
 8015448:	bc80      	pop	{r7}
 801544a:	4770      	bx	lr
 801544c:	20001d64 	.word	0x20001d64

08015450 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	4603      	mov	r3, r0
 8015458:	6039      	str	r1, [r7, #0]
 801545a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801545c:	79fb      	ldrb	r3, [r7, #7]
 801545e:	6839      	ldr	r1, [r7, #0]
 8015460:	4618      	mov	r0, r3
 8015462:	f7f8 fc2f 	bl	800dcc4 <SecureElementSetKey>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d001      	beq.n	8015470 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801546c:	230f      	movs	r3, #15
 801546e:	e018      	b.n	80154a2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8015470:	79fb      	ldrb	r3, [r7, #7]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d114      	bne.n	80154a0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015476:	4b0d      	ldr	r3, [pc, #52]	; (80154ac <LoRaMacCryptoSetKey+0x5c>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	789b      	ldrb	r3, [r3, #2]
 801547c:	79fa      	ldrb	r2, [r7, #7]
 801547e:	4611      	mov	r1, r2
 8015480:	4618      	mov	r0, r3
 8015482:	f000 fa3f 	bl	8015904 <LoRaMacCryptoDeriveMcRootKey>
 8015486:	4603      	mov	r3, r0
 8015488:	2b00      	cmp	r3, #0
 801548a:	d001      	beq.n	8015490 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801548c:	230f      	movs	r3, #15
 801548e:	e008      	b.n	80154a2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015490:	2004      	movs	r0, #4
 8015492:	f000 fa62 	bl	801595a <LoRaMacCryptoDeriveMcKEKey>
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d001      	beq.n	80154a0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801549c:	230f      	movs	r3, #15
 801549e:	e000      	b.n	80154a2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80154a0:	2300      	movs	r3, #0
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3708      	adds	r7, #8
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	20001d64 	.word	0x20001d64

080154b0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b086      	sub	sp, #24
 80154b4:	af02      	add	r7, sp, #8
 80154b6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d101      	bne.n	80154c2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154be:	230a      	movs	r3, #10
 80154c0:	e033      	b.n	801552a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80154c2:	2301      	movs	r3, #1
 80154c4:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80154c6:	2300      	movs	r3, #0
 80154c8:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80154ca:	f107 0308 	add.w	r3, r7, #8
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7f8 fdc8 	bl	800e064 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80154d4:	68ba      	ldr	r2, [r7, #8]
 80154d6:	4b17      	ldr	r3, [pc, #92]	; (8015534 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	b292      	uxth	r2, r2
 80154dc:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80154de:	4b15      	ldr	r3, [pc, #84]	; (8015534 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	889a      	ldrh	r2, [r3, #4]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f000 fc18 	bl	8015d1e <LoRaMacSerializerJoinRequest>
 80154ee:	4603      	mov	r3, r0
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d001      	beq.n	80154f8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80154f4:	2311      	movs	r3, #17
 80154f6:	e018      	b.n	801552a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6819      	ldr	r1, [r3, #0]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	3318      	adds	r3, #24
 8015500:	7bfa      	ldrb	r2, [r7, #15]
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	4613      	mov	r3, r2
 8015506:	2213      	movs	r2, #19
 8015508:	2000      	movs	r0, #0
 801550a:	f7f8 fc39 	bl	800dd80 <SecureElementComputeAesCmac>
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d001      	beq.n	8015518 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015514:	230f      	movs	r3, #15
 8015516:	e008      	b.n	801552a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f000 fc00 	bl	8015d1e <LoRaMacSerializerJoinRequest>
 801551e:	4603      	mov	r3, r0
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015524:	2311      	movs	r3, #17
 8015526:	e000      	b.n	801552a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
 8015532:	bf00      	nop
 8015534:	20001d64 	.word	0x20001d64

08015538 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015538:	b590      	push	{r4, r7, lr}
 801553a:	b097      	sub	sp, #92	; 0x5c
 801553c:	af04      	add	r7, sp, #16
 801553e:	4603      	mov	r3, r0
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	607a      	str	r2, [r7, #4]
 8015544:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d002      	beq.n	8015552 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015552:	230a      	movs	r3, #10
 8015554:	e0bd      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015556:	2313      	movs	r3, #19
 8015558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801555c:	2300      	movs	r3, #0
 801555e:	61bb      	str	r3, [r7, #24]
 8015560:	f107 031c 	add.w	r3, r7, #28
 8015564:	221d      	movs	r2, #29
 8015566:	2100      	movs	r1, #0
 8015568:	4618      	mov	r0, r3
 801556a:	f007 fe09 	bl	801d180 <memset>
    uint8_t versionMinor         = 0;
 801556e:	2300      	movs	r3, #0
 8015570:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015572:	4b5a      	ldr	r3, [pc, #360]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	889b      	ldrh	r3, [r3, #4]
 8015578:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681c      	ldr	r4, [r3, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	791b      	ldrb	r3, [r3, #4]
 8015584:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8015588:	7bf8      	ldrb	r0, [r7, #15]
 801558a:	f107 0217 	add.w	r2, r7, #23
 801558e:	9202      	str	r2, [sp, #8]
 8015590:	f107 0218 	add.w	r2, r7, #24
 8015594:	9201      	str	r2, [sp, #4]
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	4623      	mov	r3, r4
 801559a:	460a      	mov	r2, r1
 801559c:	68b9      	ldr	r1, [r7, #8]
 801559e:	f7f8 fce3 	bl	800df68 <SecureElementProcessJoinAccept>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d001      	beq.n	80155ac <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80155a8:	230f      	movs	r3, #15
 80155aa:	e092      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6818      	ldr	r0, [r3, #0]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	791b      	ldrb	r3, [r3, #4]
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	f107 0318 	add.w	r3, r7, #24
 80155ba:	4619      	mov	r1, r3
 80155bc:	f003 f819 	bl	80185f2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f000 f9ed 	bl	80159a0 <LoRaMacParserJoinAccept>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d001      	beq.n	80155d0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80155cc:	2310      	movs	r3, #16
 80155ce:	e080      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	799b      	ldrb	r3, [r3, #6]
 80155d4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	79db      	ldrb	r3, [r3, #7]
 80155da:	021b      	lsls	r3, r3, #8
 80155dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155de:	4313      	orrs	r3, r2
 80155e0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	7a1b      	ldrb	r3, [r3, #8]
 80155e6:	041b      	lsls	r3, r3, #16
 80155e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155ea:	4313      	orrs	r3, r2
 80155ec:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80155ee:	4b3b      	ldr	r3, [pc, #236]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	689b      	ldr	r3, [r3, #8]
 80155f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d010      	beq.n	801561c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80155fa:	4b38      	ldr	r3, [pc, #224]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015600:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8015602:	7dfb      	ldrb	r3, [r7, #23]
 8015604:	2100      	movs	r1, #0
 8015606:	4618      	mov	r0, r3
 8015608:	f000 f97c 	bl	8015904 <LoRaMacCryptoDeriveMcRootKey>
 801560c:	4603      	mov	r3, r0
 801560e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015616:	2b00      	cmp	r3, #0
 8015618:	d005      	beq.n	8015626 <LoRaMacCryptoHandleJoinAccept+0xee>
 801561a:	e001      	b.n	8015620 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801561c:	2303      	movs	r3, #3
 801561e:	e058      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8015620:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015624:	e055      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8015626:	2004      	movs	r0, #4
 8015628:	f000 f997 	bl	801595a <LoRaMacCryptoDeriveMcKEKey>
 801562c:	4603      	mov	r3, r0
 801562e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015632:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015636:	2b00      	cmp	r3, #0
 8015638:	d002      	beq.n	8015640 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801563a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801563e:	e048      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	7a5b      	ldrb	r3, [r3, #9]
 8015644:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	7a9b      	ldrb	r3, [r3, #10]
 801564a:	021b      	lsls	r3, r3, #8
 801564c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801564e:	4313      	orrs	r3, r2
 8015650:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	7adb      	ldrb	r3, [r3, #11]
 8015656:	041b      	lsls	r3, r3, #16
 8015658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801565a:	4313      	orrs	r3, r2
 801565c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801565e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015666:	2003      	movs	r0, #3
 8015668:	f7ff fcd6 	bl	8015018 <DeriveSessionKey10x>
 801566c:	4603      	mov	r3, r0
 801566e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015672:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015676:	2b00      	cmp	r3, #0
 8015678:	d002      	beq.n	8015680 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801567a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801567e:	e028      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015680:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015688:	2002      	movs	r0, #2
 801568a:	f7ff fcc5 	bl	8015018 <DeriveSessionKey10x>
 801568e:	4603      	mov	r3, r0
 8015690:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015694:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015698:	2b00      	cmp	r3, #0
 801569a:	d002      	beq.n	80156a2 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801569c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80156a0:	e017      	b.n	80156d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80156a2:	4b0e      	ldr	r3, [pc, #56]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	7dfa      	ldrb	r2, [r7, #23]
 80156a8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80156aa:	4b0c      	ldr	r3, [pc, #48]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2200      	movs	r2, #0
 80156b0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80156b2:	4b0a      	ldr	r3, [pc, #40]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ba:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80156bc:	4b07      	ldr	r3, [pc, #28]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f04f 32ff 	mov.w	r2, #4294967295
 80156c4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80156c6:	4b05      	ldr	r3, [pc, #20]	; (80156dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	f04f 32ff 	mov.w	r2, #4294967295
 80156ce:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80156d0:	2300      	movs	r3, #0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	374c      	adds	r7, #76	; 0x4c
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd90      	pop	{r4, r7, pc}
 80156da:	bf00      	nop
 80156dc:	20001d64 	.word	0x20001d64

080156e0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80156e0:	b590      	push	{r4, r7, lr}
 80156e2:	b08b      	sub	sp, #44	; 0x2c
 80156e4:	af04      	add	r7, sp, #16
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	607b      	str	r3, [r7, #4]
 80156ea:	460b      	mov	r3, r1
 80156ec:	72fb      	strb	r3, [r7, #11]
 80156ee:	4613      	mov	r3, r2
 80156f0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80156f2:	2313      	movs	r3, #19
 80156f4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80156f6:	2303      	movs	r3, #3
 80156f8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d101      	bne.n	8015704 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015700:	230a      	movs	r3, #10
 8015702:	e05f      	b.n	80157c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015704:	4b31      	ldr	r3, [pc, #196]	; (80157cc <LoRaMacCryptoSecureMessage+0xec>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	68db      	ldr	r3, [r3, #12]
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	429a      	cmp	r2, r3
 801570e:	d201      	bcs.n	8015714 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015710:	2306      	movs	r3, #6
 8015712:	e057      	b.n	80157c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f893 3020 	ldrb.w	r3, [r3, #32]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d101      	bne.n	8015722 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801571e:	2302      	movs	r3, #2
 8015720:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015722:	4b2a      	ldr	r3, [pc, #168]	; (80157cc <LoRaMacCryptoSecureMessage+0xec>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	68fa      	ldr	r2, [r7, #12]
 801572a:	429a      	cmp	r2, r3
 801572c:	d916      	bls.n	801575c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015738:	b219      	sxth	r1, r3
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	689c      	ldr	r4, [r3, #8]
 801573e:	7dfa      	ldrb	r2, [r7, #23]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	9301      	str	r3, [sp, #4]
 8015744:	2300      	movs	r3, #0
 8015746:	9300      	str	r3, [sp, #0]
 8015748:	4623      	mov	r3, r4
 801574a:	f7ff fa71 	bl	8014c30 <PayloadEncrypt>
 801574e:	4603      	mov	r3, r0
 8015750:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015752:	7dbb      	ldrb	r3, [r7, #22]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d001      	beq.n	801575c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015758:	7dbb      	ldrb	r3, [r7, #22]
 801575a:	e033      	b.n	80157c4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f000 fb60 	bl	8015e22 <LoRaMacSerializerData>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d001      	beq.n	801576c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015768:	2311      	movs	r3, #17
 801576a:	e02b      	b.n	80157c4 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801576c:	2302      	movs	r3, #2
 801576e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	6818      	ldr	r0, [r3, #0]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	791b      	ldrb	r3, [r3, #4]
 8015778:	b29b      	uxth	r3, r3
 801577a:	3b04      	subs	r3, #4
 801577c:	b299      	uxth	r1, r3
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	689b      	ldr	r3, [r3, #8]
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	322c      	adds	r2, #44	; 0x2c
 8015786:	7dfc      	ldrb	r4, [r7, #23]
 8015788:	9203      	str	r2, [sp, #12]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	9202      	str	r2, [sp, #8]
 801578e:	9301      	str	r3, [sp, #4]
 8015790:	2300      	movs	r3, #0
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	2300      	movs	r3, #0
 8015796:	4622      	mov	r2, r4
 8015798:	f7ff fb4b 	bl	8014e32 <ComputeCmacB0>
 801579c:	4603      	mov	r3, r0
 801579e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80157a0:	7dbb      	ldrb	r3, [r7, #22]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d001      	beq.n	80157aa <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80157a6:	7dbb      	ldrb	r3, [r7, #22]
 80157a8:	e00c      	b.n	80157c4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f000 fb39 	bl	8015e22 <LoRaMacSerializerData>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d001      	beq.n	80157ba <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80157b6:	2311      	movs	r3, #17
 80157b8:	e004      	b.n	80157c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80157ba:	4b04      	ldr	r3, [pc, #16]	; (80157cc <LoRaMacCryptoSecureMessage+0xec>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	371c      	adds	r7, #28
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd90      	pop	{r4, r7, pc}
 80157cc:	20001d64 	.word	0x20001d64

080157d0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80157d0:	b590      	push	{r4, r7, lr}
 80157d2:	b08b      	sub	sp, #44	; 0x2c
 80157d4:	af04      	add	r7, sp, #16
 80157d6:	60b9      	str	r1, [r7, #8]
 80157d8:	607b      	str	r3, [r7, #4]
 80157da:	4603      	mov	r3, r0
 80157dc:	73fb      	strb	r3, [r7, #15]
 80157de:	4613      	mov	r3, r2
 80157e0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80157e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d101      	bne.n	80157ec <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157e8:	230a      	movs	r3, #10
 80157ea:	e084      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80157ec:	7bbb      	ldrb	r3, [r7, #14]
 80157ee:	6879      	ldr	r1, [r7, #4]
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7ff fcaf 	bl	8015154 <CheckFCntDown>
 80157f6:	4603      	mov	r3, r0
 80157f8:	f083 0301 	eor.w	r3, r3, #1
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015802:	2306      	movs	r3, #6
 8015804:	e077      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015806:	2313      	movs	r3, #19
 8015808:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801580a:	2303      	movs	r3, #3
 801580c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801580e:	2302      	movs	r3, #2
 8015810:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015814:	f000 f98f 	bl	8015b36 <LoRaMacParserData>
 8015818:	4603      	mov	r3, r0
 801581a:	2b00      	cmp	r3, #0
 801581c:	d001      	beq.n	8015822 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801581e:	2310      	movs	r3, #16
 8015820:	e069      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015822:	f107 0210 	add.w	r2, r7, #16
 8015826:	7bfb      	ldrb	r3, [r7, #15]
 8015828:	4611      	mov	r1, r2
 801582a:	4618      	mov	r0, r3
 801582c:	f7ff fbce 	bl	8014fcc <GetKeyAddrItem>
 8015830:	4603      	mov	r3, r0
 8015832:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015834:	7d7b      	ldrb	r3, [r7, #21]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d001      	beq.n	801583e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801583a:	7d7b      	ldrb	r3, [r7, #21]
 801583c:	e05b      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	785b      	ldrb	r3, [r3, #1]
 8015842:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	789b      	ldrb	r3, [r3, #2]
 8015848:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584c:	689b      	ldr	r3, [r3, #8]
 801584e:	68ba      	ldr	r2, [r7, #8]
 8015850:	429a      	cmp	r2, r3
 8015852:	d001      	beq.n	8015858 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015854:	2302      	movs	r3, #2
 8015856:	e04e      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585a:	7b1b      	ldrb	r3, [r3, #12]
 801585c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015860:	b2db      	uxtb	r3, r3
 8015862:	2b00      	cmp	r3, #0
 8015864:	bf14      	ite	ne
 8015866:	2301      	movne	r3, #1
 8015868:	2300      	moveq	r3, #0
 801586a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801586c:	4b24      	ldr	r3, [pc, #144]	; (8015900 <LoRaMacCryptoUnsecureMessage+0x130>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	789b      	ldrb	r3, [r3, #2]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d101      	bne.n	801587a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015876:	2300      	movs	r3, #0
 8015878:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587c:	6818      	ldr	r0, [r3, #0]
 801587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015880:	791b      	ldrb	r3, [r3, #4]
 8015882:	b29b      	uxth	r3, r3
 8015884:	3b04      	subs	r3, #4
 8015886:	b299      	uxth	r1, r3
 8015888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801588c:	7dbc      	ldrb	r4, [r7, #22]
 801588e:	7d3a      	ldrb	r2, [r7, #20]
 8015890:	9303      	str	r3, [sp, #12]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	9302      	str	r3, [sp, #8]
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	9301      	str	r3, [sp, #4]
 801589a:	2301      	movs	r3, #1
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	4623      	mov	r3, r4
 80158a0:	f7ff fb05 	bl	8014eae <VerifyCmacB0>
 80158a4:	4603      	mov	r3, r0
 80158a6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80158a8:	7d7b      	ldrb	r3, [r7, #21]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d001      	beq.n	80158b2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80158ae:	7d7b      	ldrb	r3, [r7, #21]
 80158b0:	e021      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80158b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d101      	bne.n	80158c0 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80158bc:	2302      	movs	r3, #2
 80158be:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80158c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80158c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158ca:	b219      	sxth	r1, r3
 80158cc:	7dfa      	ldrb	r2, [r7, #23]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	9301      	str	r3, [sp, #4]
 80158d2:	2301      	movs	r3, #1
 80158d4:	9300      	str	r3, [sp, #0]
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	f7ff f9aa 	bl	8014c30 <PayloadEncrypt>
 80158dc:	4603      	mov	r3, r0
 80158de:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80158e0:	7d7b      	ldrb	r3, [r7, #21]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80158e6:	7d7b      	ldrb	r3, [r7, #21]
 80158e8:	e005      	b.n	80158f6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80158ea:	7bbb      	ldrb	r3, [r7, #14]
 80158ec:	6879      	ldr	r1, [r7, #4]
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7ff fc54 	bl	801519c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80158f4:	2300      	movs	r3, #0
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	371c      	adds	r7, #28
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd90      	pop	{r4, r7, pc}
 80158fe:	bf00      	nop
 8015900:	20001d64 	.word	0x20001d64

08015904 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b086      	sub	sp, #24
 8015908:	af00      	add	r7, sp, #0
 801590a:	4603      	mov	r3, r0
 801590c:	460a      	mov	r2, r1
 801590e:	71fb      	strb	r3, [r7, #7]
 8015910:	4613      	mov	r3, r2
 8015912:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015914:	79bb      	ldrb	r3, [r7, #6]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d001      	beq.n	801591e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801591a:	230b      	movs	r3, #11
 801591c:	e019      	b.n	8015952 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801591e:	2300      	movs	r3, #0
 8015920:	60bb      	str	r3, [r7, #8]
 8015922:	f107 030c 	add.w	r3, r7, #12
 8015926:	2200      	movs	r2, #0
 8015928:	601a      	str	r2, [r3, #0]
 801592a:	605a      	str	r2, [r3, #4]
 801592c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801592e:	79fb      	ldrb	r3, [r7, #7]
 8015930:	2b01      	cmp	r3, #1
 8015932:	d101      	bne.n	8015938 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8015934:	2320      	movs	r3, #32
 8015936:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015938:	79b9      	ldrb	r1, [r7, #6]
 801593a:	f107 0308 	add.w	r3, r7, #8
 801593e:	2204      	movs	r2, #4
 8015940:	4618      	mov	r0, r3
 8015942:	f7f8 fad1 	bl	800dee8 <SecureElementDeriveAndStoreKey>
 8015946:	4603      	mov	r3, r0
 8015948:	2b00      	cmp	r3, #0
 801594a:	d001      	beq.n	8015950 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801594c:	230f      	movs	r3, #15
 801594e:	e000      	b.n	8015952 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015950:	2300      	movs	r3, #0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3718      	adds	r7, #24
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b086      	sub	sp, #24
 801595e:	af00      	add	r7, sp, #0
 8015960:	4603      	mov	r3, r0
 8015962:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015964:	79fb      	ldrb	r3, [r7, #7]
 8015966:	2b04      	cmp	r3, #4
 8015968:	d001      	beq.n	801596e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801596a:	230b      	movs	r3, #11
 801596c:	e014      	b.n	8015998 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801596e:	2300      	movs	r3, #0
 8015970:	60bb      	str	r3, [r7, #8]
 8015972:	f107 030c 	add.w	r3, r7, #12
 8015976:	2200      	movs	r2, #0
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	605a      	str	r2, [r3, #4]
 801597c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801597e:	79f9      	ldrb	r1, [r7, #7]
 8015980:	f107 0308 	add.w	r3, r7, #8
 8015984:	227f      	movs	r2, #127	; 0x7f
 8015986:	4618      	mov	r0, r3
 8015988:	f7f8 faae 	bl	800dee8 <SecureElementDeriveAndStoreKey>
 801598c:	4603      	mov	r3, r0
 801598e:	2b00      	cmp	r3, #0
 8015990:	d001      	beq.n	8015996 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015992:	230f      	movs	r3, #15
 8015994:	e000      	b.n	8015998 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015996:	2300      	movs	r3, #0
}
 8015998:	4618      	mov	r0, r3
 801599a:	3718      	adds	r7, #24
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d003      	beq.n	80159b6 <LoRaMacParserJoinAccept+0x16>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d101      	bne.n	80159ba <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80159b6:	2302      	movs	r3, #2
 80159b8:	e0b9      	b.n	8015b2e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80159ba:	2300      	movs	r3, #0
 80159bc:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	89fb      	ldrh	r3, [r7, #14]
 80159c4:	1c59      	adds	r1, r3, #1
 80159c6:	81f9      	strh	r1, [r7, #14]
 80159c8:	4413      	add	r3, r2
 80159ca:	781a      	ldrb	r2, [r3, #0]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	1d98      	adds	r0, r3, #6
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	89fb      	ldrh	r3, [r7, #14]
 80159da:	4413      	add	r3, r2
 80159dc:	2203      	movs	r2, #3
 80159de:	4619      	mov	r1, r3
 80159e0:	f002 fe07 	bl	80185f2 <memcpy1>
    bufItr = bufItr + 3;
 80159e4:	89fb      	ldrh	r3, [r7, #14]
 80159e6:	3303      	adds	r3, #3
 80159e8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f103 0009 	add.w	r0, r3, #9
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681a      	ldr	r2, [r3, #0]
 80159f4:	89fb      	ldrh	r3, [r7, #14]
 80159f6:	4413      	add	r3, r2
 80159f8:	2203      	movs	r2, #3
 80159fa:	4619      	mov	r1, r3
 80159fc:	f002 fdf9 	bl	80185f2 <memcpy1>
    bufItr = bufItr + 3;
 8015a00:	89fb      	ldrh	r3, [r7, #14]
 8015a02:	3303      	adds	r3, #3
 8015a04:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	89fb      	ldrh	r3, [r7, #14]
 8015a0c:	1c59      	adds	r1, r3, #1
 8015a0e:	81f9      	strh	r1, [r7, #14]
 8015a10:	4413      	add	r3, r2
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	461a      	mov	r2, r3
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	89fb      	ldrh	r3, [r7, #14]
 8015a20:	1c59      	adds	r1, r3, #1
 8015a22:	81f9      	strh	r1, [r7, #14]
 8015a24:	4413      	add	r3, r2
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	021a      	lsls	r2, r3, #8
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	68db      	ldr	r3, [r3, #12]
 8015a2e:	431a      	orrs	r2, r3
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681a      	ldr	r2, [r3, #0]
 8015a38:	89fb      	ldrh	r3, [r7, #14]
 8015a3a:	1c59      	adds	r1, r3, #1
 8015a3c:	81f9      	strh	r1, [r7, #14]
 8015a3e:	4413      	add	r3, r2
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	041a      	lsls	r2, r3, #16
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	431a      	orrs	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	89fb      	ldrh	r3, [r7, #14]
 8015a54:	1c59      	adds	r1, r3, #1
 8015a56:	81f9      	strh	r1, [r7, #14]
 8015a58:	4413      	add	r3, r2
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	061a      	lsls	r2, r3, #24
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	431a      	orrs	r2, r3
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	89fb      	ldrh	r3, [r7, #14]
 8015a6e:	1c59      	adds	r1, r3, #1
 8015a70:	81f9      	strh	r1, [r7, #14]
 8015a72:	4413      	add	r3, r2
 8015a74:	781a      	ldrb	r2, [r3, #0]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	89fb      	ldrh	r3, [r7, #14]
 8015a80:	1c59      	adds	r1, r3, #1
 8015a82:	81f9      	strh	r1, [r7, #14]
 8015a84:	4413      	add	r3, r2
 8015a86:	781a      	ldrb	r2, [r3, #0]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	791b      	ldrb	r3, [r3, #4]
 8015a90:	1f1a      	subs	r2, r3, #4
 8015a92:	89fb      	ldrh	r3, [r7, #14]
 8015a94:	1ad3      	subs	r3, r2, r3
 8015a96:	2b10      	cmp	r3, #16
 8015a98:	d10e      	bne.n	8015ab8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f103 0012 	add.w	r0, r3, #18
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681a      	ldr	r2, [r3, #0]
 8015aa4:	89fb      	ldrh	r3, [r7, #14]
 8015aa6:	4413      	add	r3, r2
 8015aa8:	2210      	movs	r2, #16
 8015aaa:	4619      	mov	r1, r3
 8015aac:	f002 fda1 	bl	80185f2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015ab0:	89fb      	ldrh	r3, [r7, #14]
 8015ab2:	3310      	adds	r3, #16
 8015ab4:	81fb      	strh	r3, [r7, #14]
 8015ab6:	e008      	b.n	8015aca <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	791b      	ldrb	r3, [r3, #4]
 8015abc:	1f1a      	subs	r2, r3, #4
 8015abe:	89fb      	ldrh	r3, [r7, #14]
 8015ac0:	1ad3      	subs	r3, r2, r3
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	dd01      	ble.n	8015aca <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	e031      	b.n	8015b2e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	89fb      	ldrh	r3, [r7, #14]
 8015ad0:	1c59      	adds	r1, r3, #1
 8015ad2:	81f9      	strh	r1, [r7, #14]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	781b      	ldrb	r3, [r3, #0]
 8015ad8:	461a      	mov	r2, r3
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	89fb      	ldrh	r3, [r7, #14]
 8015ae4:	1c59      	adds	r1, r3, #1
 8015ae6:	81f9      	strh	r1, [r7, #14]
 8015ae8:	4413      	add	r3, r2
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	021a      	lsls	r2, r3, #8
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af2:	431a      	orrs	r2, r3
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681a      	ldr	r2, [r3, #0]
 8015afc:	89fb      	ldrh	r3, [r7, #14]
 8015afe:	1c59      	adds	r1, r3, #1
 8015b00:	81f9      	strh	r1, [r7, #14]
 8015b02:	4413      	add	r3, r2
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	041a      	lsls	r2, r3, #16
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0c:	431a      	orrs	r2, r3
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681a      	ldr	r2, [r3, #0]
 8015b16:	89fb      	ldrh	r3, [r7, #14]
 8015b18:	1c59      	adds	r1, r3, #1
 8015b1a:	81f9      	strh	r1, [r7, #14]
 8015b1c:	4413      	add	r3, r2
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	061a      	lsls	r2, r3, #24
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b26:	431a      	orrs	r2, r3
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015b2c:	2300      	movs	r3, #0
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b084      	sub	sp, #16
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d003      	beq.n	8015b4c <LoRaMacParserData+0x16>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d101      	bne.n	8015b50 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015b4c:	2302      	movs	r3, #2
 8015b4e:	e0e2      	b.n	8015d16 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8015b50:	2300      	movs	r3, #0
 8015b52:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	89fb      	ldrh	r3, [r7, #14]
 8015b5a:	1c59      	adds	r1, r3, #1
 8015b5c:	81f9      	strh	r1, [r7, #14]
 8015b5e:	4413      	add	r3, r2
 8015b60:	781a      	ldrb	r2, [r3, #0]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	89fb      	ldrh	r3, [r7, #14]
 8015b6c:	1c59      	adds	r1, r3, #1
 8015b6e:	81f9      	strh	r1, [r7, #14]
 8015b70:	4413      	add	r3, r2
 8015b72:	781b      	ldrb	r3, [r3, #0]
 8015b74:	461a      	mov	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	89fb      	ldrh	r3, [r7, #14]
 8015b80:	1c59      	adds	r1, r3, #1
 8015b82:	81f9      	strh	r1, [r7, #14]
 8015b84:	4413      	add	r3, r2
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	021a      	lsls	r2, r3, #8
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	689b      	ldr	r3, [r3, #8]
 8015b8e:	431a      	orrs	r2, r3
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	89fb      	ldrh	r3, [r7, #14]
 8015b9a:	1c59      	adds	r1, r3, #1
 8015b9c:	81f9      	strh	r1, [r7, #14]
 8015b9e:	4413      	add	r3, r2
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	041a      	lsls	r2, r3, #16
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	689b      	ldr	r3, [r3, #8]
 8015ba8:	431a      	orrs	r2, r3
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	89fb      	ldrh	r3, [r7, #14]
 8015bb4:	1c59      	adds	r1, r3, #1
 8015bb6:	81f9      	strh	r1, [r7, #14]
 8015bb8:	4413      	add	r3, r2
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	061a      	lsls	r2, r3, #24
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	689b      	ldr	r3, [r3, #8]
 8015bc2:	431a      	orrs	r2, r3
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	89fb      	ldrh	r3, [r7, #14]
 8015bce:	1c59      	adds	r1, r3, #1
 8015bd0:	81f9      	strh	r1, [r7, #14]
 8015bd2:	4413      	add	r3, r2
 8015bd4:	781a      	ldrb	r2, [r3, #0]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	89fb      	ldrh	r3, [r7, #14]
 8015be0:	1c59      	adds	r1, r3, #1
 8015be2:	81f9      	strh	r1, [r7, #14]
 8015be4:	4413      	add	r3, r2
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	b29a      	uxth	r2, r3
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	89fb      	ldrh	r3, [r7, #14]
 8015bf4:	1c59      	adds	r1, r3, #1
 8015bf6:	81f9      	strh	r1, [r7, #14]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	0219      	lsls	r1, r3, #8
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	89db      	ldrh	r3, [r3, #14]
 8015c02:	b21a      	sxth	r2, r3
 8015c04:	b20b      	sxth	r3, r1
 8015c06:	4313      	orrs	r3, r2
 8015c08:	b21b      	sxth	r3, r3
 8015c0a:	b29a      	uxth	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f103 0010 	add.w	r0, r3, #16
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	89fb      	ldrh	r3, [r7, #14]
 8015c1c:	18d1      	adds	r1, r2, r3
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	7b1b      	ldrb	r3, [r3, #12]
 8015c22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015c26:	b2db      	uxtb	r3, r3
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	f002 fce1 	bl	80185f2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	7b1b      	ldrb	r3, [r3, #12]
 8015c34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	89fb      	ldrh	r3, [r7, #14]
 8015c3e:	4413      	add	r3, r2
 8015c40:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2200      	movs	r2, #0
 8015c46:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	791b      	ldrb	r3, [r3, #4]
 8015c56:	461a      	mov	r2, r3
 8015c58:	89fb      	ldrh	r3, [r7, #14]
 8015c5a:	1ad3      	subs	r3, r2, r3
 8015c5c:	2b04      	cmp	r3, #4
 8015c5e:	dd28      	ble.n	8015cb2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	89fb      	ldrh	r3, [r7, #14]
 8015c66:	1c59      	adds	r1, r3, #1
 8015c68:	81f9      	strh	r1, [r7, #14]
 8015c6a:	4413      	add	r3, r2
 8015c6c:	781a      	ldrb	r2, [r3, #0]
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	791a      	ldrb	r2, [r3, #4]
 8015c78:	89fb      	ldrh	r3, [r7, #14]
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	1ad3      	subs	r3, r2, r3
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	3b04      	subs	r3, #4
 8015c82:	b2da      	uxtb	r2, r3
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681a      	ldr	r2, [r3, #0]
 8015c92:	89fb      	ldrh	r3, [r7, #14]
 8015c94:	18d1      	adds	r1, r2, r3
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	f002 fca7 	bl	80185f2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	89fb      	ldrh	r3, [r7, #14]
 8015cae:	4413      	add	r3, r2
 8015cb0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681a      	ldr	r2, [r3, #0]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	791b      	ldrb	r3, [r3, #4]
 8015cba:	3b04      	subs	r3, #4
 8015cbc:	4413      	add	r3, r2
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	461a      	mov	r2, r3
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6819      	ldr	r1, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	791b      	ldrb	r3, [r3, #4]
 8015cd2:	3b03      	subs	r3, #3
 8015cd4:	440b      	add	r3, r1
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	021b      	lsls	r3, r3, #8
 8015cda:	431a      	orrs	r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6819      	ldr	r1, [r3, #0]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	791b      	ldrb	r3, [r3, #4]
 8015cec:	3b02      	subs	r3, #2
 8015cee:	440b      	add	r3, r1
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	041b      	lsls	r3, r3, #16
 8015cf4:	431a      	orrs	r2, r3
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	6819      	ldr	r1, [r3, #0]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	791b      	ldrb	r3, [r3, #4]
 8015d06:	3b01      	subs	r3, #1
 8015d08:	440b      	add	r3, r1
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	061b      	lsls	r3, r3, #24
 8015d0e:	431a      	orrs	r2, r3
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015d14:	2300      	movs	r3, #0
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}

08015d1e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015d1e:	b580      	push	{r7, lr}
 8015d20:	b084      	sub	sp, #16
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d003      	beq.n	8015d34 <LoRaMacSerializerJoinRequest+0x16>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d101      	bne.n	8015d38 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015d34:	2301      	movs	r3, #1
 8015d36:	e070      	b.n	8015e1a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	791b      	ldrb	r3, [r3, #4]
 8015d40:	2b16      	cmp	r3, #22
 8015d42:	d801      	bhi.n	8015d48 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015d44:	2302      	movs	r3, #2
 8015d46:	e068      	b.n	8015e1a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	89fb      	ldrh	r3, [r7, #14]
 8015d4e:	1c59      	adds	r1, r3, #1
 8015d50:	81f9      	strh	r1, [r7, #14]
 8015d52:	4413      	add	r3, r2
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	7952      	ldrb	r2, [r2, #5]
 8015d58:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	89fb      	ldrh	r3, [r7, #14]
 8015d60:	18d0      	adds	r0, r2, r3
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	3306      	adds	r3, #6
 8015d66:	2208      	movs	r2, #8
 8015d68:	4619      	mov	r1, r3
 8015d6a:	f002 fc5d 	bl	8018628 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015d6e:	89fb      	ldrh	r3, [r7, #14]
 8015d70:	3308      	adds	r3, #8
 8015d72:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681a      	ldr	r2, [r3, #0]
 8015d78:	89fb      	ldrh	r3, [r7, #14]
 8015d7a:	18d0      	adds	r0, r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	330e      	adds	r3, #14
 8015d80:	2208      	movs	r2, #8
 8015d82:	4619      	mov	r1, r3
 8015d84:	f002 fc50 	bl	8018628 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015d88:	89fb      	ldrh	r3, [r7, #14]
 8015d8a:	3308      	adds	r3, #8
 8015d8c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	8ad9      	ldrh	r1, [r3, #22]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	89fb      	ldrh	r3, [r7, #14]
 8015d98:	1c58      	adds	r0, r3, #1
 8015d9a:	81f8      	strh	r0, [r7, #14]
 8015d9c:	4413      	add	r3, r2
 8015d9e:	b2ca      	uxtb	r2, r1
 8015da0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	8adb      	ldrh	r3, [r3, #22]
 8015da6:	0a1b      	lsrs	r3, r3, #8
 8015da8:	b299      	uxth	r1, r3
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681a      	ldr	r2, [r3, #0]
 8015dae:	89fb      	ldrh	r3, [r7, #14]
 8015db0:	1c58      	adds	r0, r3, #1
 8015db2:	81f8      	strh	r0, [r7, #14]
 8015db4:	4413      	add	r3, r2
 8015db6:	b2ca      	uxtb	r2, r1
 8015db8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6999      	ldr	r1, [r3, #24]
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	89fb      	ldrh	r3, [r7, #14]
 8015dc4:	1c58      	adds	r0, r3, #1
 8015dc6:	81f8      	strh	r0, [r7, #14]
 8015dc8:	4413      	add	r3, r2
 8015dca:	b2ca      	uxtb	r2, r1
 8015dcc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	699b      	ldr	r3, [r3, #24]
 8015dd2:	0a19      	lsrs	r1, r3, #8
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	89fb      	ldrh	r3, [r7, #14]
 8015dda:	1c58      	adds	r0, r3, #1
 8015ddc:	81f8      	strh	r0, [r7, #14]
 8015dde:	4413      	add	r3, r2
 8015de0:	b2ca      	uxtb	r2, r1
 8015de2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	699b      	ldr	r3, [r3, #24]
 8015de8:	0c19      	lsrs	r1, r3, #16
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	89fb      	ldrh	r3, [r7, #14]
 8015df0:	1c58      	adds	r0, r3, #1
 8015df2:	81f8      	strh	r0, [r7, #14]
 8015df4:	4413      	add	r3, r2
 8015df6:	b2ca      	uxtb	r2, r1
 8015df8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	699b      	ldr	r3, [r3, #24]
 8015dfe:	0e19      	lsrs	r1, r3, #24
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681a      	ldr	r2, [r3, #0]
 8015e04:	89fb      	ldrh	r3, [r7, #14]
 8015e06:	1c58      	adds	r0, r3, #1
 8015e08:	81f8      	strh	r0, [r7, #14]
 8015e0a:	4413      	add	r3, r2
 8015e0c:	b2ca      	uxtb	r2, r1
 8015e0e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015e10:	89fb      	ldrh	r3, [r7, #14]
 8015e12:	b2da      	uxtb	r2, r3
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015e18:	2300      	movs	r3, #0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3710      	adds	r7, #16
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}

08015e22 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b084      	sub	sp, #16
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d003      	beq.n	8015e38 <LoRaMacSerializerData+0x16>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d101      	bne.n	8015e3c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015e38:	2301      	movs	r3, #1
 8015e3a:	e0e5      	b.n	8016008 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015e40:	2308      	movs	r3, #8
 8015e42:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	7b1b      	ldrb	r3, [r3, #12]
 8015e48:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	b29a      	uxth	r2, r3
 8015e50:	89bb      	ldrh	r3, [r7, #12]
 8015e52:	4413      	add	r3, r2
 8015e54:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d002      	beq.n	8015e66 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015e60:	89bb      	ldrh	r3, [r7, #12]
 8015e62:	3301      	adds	r3, #1
 8015e64:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	89bb      	ldrh	r3, [r7, #12]
 8015e70:	4413      	add	r3, r2
 8015e72:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015e74:	89bb      	ldrh	r3, [r7, #12]
 8015e76:	3304      	adds	r3, #4
 8015e78:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	791b      	ldrb	r3, [r3, #4]
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	89ba      	ldrh	r2, [r7, #12]
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d901      	bls.n	8015e8a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015e86:	2302      	movs	r3, #2
 8015e88:	e0be      	b.n	8016008 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681a      	ldr	r2, [r3, #0]
 8015e8e:	89fb      	ldrh	r3, [r7, #14]
 8015e90:	1c59      	adds	r1, r3, #1
 8015e92:	81f9      	strh	r1, [r7, #14]
 8015e94:	4413      	add	r3, r2
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	7952      	ldrb	r2, [r2, #5]
 8015e9a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6899      	ldr	r1, [r3, #8]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	89fb      	ldrh	r3, [r7, #14]
 8015ea6:	1c58      	adds	r0, r3, #1
 8015ea8:	81f8      	strh	r0, [r7, #14]
 8015eaa:	4413      	add	r3, r2
 8015eac:	b2ca      	uxtb	r2, r1
 8015eae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	689b      	ldr	r3, [r3, #8]
 8015eb4:	0a19      	lsrs	r1, r3, #8
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	89fb      	ldrh	r3, [r7, #14]
 8015ebc:	1c58      	adds	r0, r3, #1
 8015ebe:	81f8      	strh	r0, [r7, #14]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	b2ca      	uxtb	r2, r1
 8015ec4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	689b      	ldr	r3, [r3, #8]
 8015eca:	0c19      	lsrs	r1, r3, #16
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	89fb      	ldrh	r3, [r7, #14]
 8015ed2:	1c58      	adds	r0, r3, #1
 8015ed4:	81f8      	strh	r0, [r7, #14]
 8015ed6:	4413      	add	r3, r2
 8015ed8:	b2ca      	uxtb	r2, r1
 8015eda:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	689b      	ldr	r3, [r3, #8]
 8015ee0:	0e19      	lsrs	r1, r3, #24
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681a      	ldr	r2, [r3, #0]
 8015ee6:	89fb      	ldrh	r3, [r7, #14]
 8015ee8:	1c58      	adds	r0, r3, #1
 8015eea:	81f8      	strh	r0, [r7, #14]
 8015eec:	4413      	add	r3, r2
 8015eee:	b2ca      	uxtb	r2, r1
 8015ef0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	89fb      	ldrh	r3, [r7, #14]
 8015ef8:	1c59      	adds	r1, r3, #1
 8015efa:	81f9      	strh	r1, [r7, #14]
 8015efc:	4413      	add	r3, r2
 8015efe:	687a      	ldr	r2, [r7, #4]
 8015f00:	7b12      	ldrb	r2, [r2, #12]
 8015f02:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	89d9      	ldrh	r1, [r3, #14]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681a      	ldr	r2, [r3, #0]
 8015f0c:	89fb      	ldrh	r3, [r7, #14]
 8015f0e:	1c58      	adds	r0, r3, #1
 8015f10:	81f8      	strh	r0, [r7, #14]
 8015f12:	4413      	add	r3, r2
 8015f14:	b2ca      	uxtb	r2, r1
 8015f16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	89db      	ldrh	r3, [r3, #14]
 8015f1c:	0a1b      	lsrs	r3, r3, #8
 8015f1e:	b299      	uxth	r1, r3
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681a      	ldr	r2, [r3, #0]
 8015f24:	89fb      	ldrh	r3, [r7, #14]
 8015f26:	1c58      	adds	r0, r3, #1
 8015f28:	81f8      	strh	r0, [r7, #14]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	b2ca      	uxtb	r2, r1
 8015f2e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681a      	ldr	r2, [r3, #0]
 8015f34:	89fb      	ldrh	r3, [r7, #14]
 8015f36:	18d0      	adds	r0, r2, r3
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f103 0110 	add.w	r1, r3, #16
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	7b1b      	ldrb	r3, [r3, #12]
 8015f42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	f002 fb51 	bl	80185f2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	7b1b      	ldrb	r3, [r3, #12]
 8015f54:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015f58:	b2db      	uxtb	r3, r3
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	89fb      	ldrh	r3, [r7, #14]
 8015f5e:	4413      	add	r3, r2
 8015f60:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d009      	beq.n	8015f80 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681a      	ldr	r2, [r3, #0]
 8015f70:	89fb      	ldrh	r3, [r7, #14]
 8015f72:	1c59      	adds	r1, r3, #1
 8015f74:	81f9      	strh	r1, [r7, #14]
 8015f76:	4413      	add	r3, r2
 8015f78:	687a      	ldr	r2, [r7, #4]
 8015f7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015f7e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	89fb      	ldrh	r3, [r7, #14]
 8015f86:	18d0      	adds	r0, r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	461a      	mov	r2, r3
 8015f96:	f002 fb2c 	bl	80185f2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fa0:	b29a      	uxth	r2, r3
 8015fa2:	89fb      	ldrh	r3, [r7, #14]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681a      	ldr	r2, [r3, #0]
 8015fb0:	89fb      	ldrh	r3, [r7, #14]
 8015fb2:	1c58      	adds	r0, r3, #1
 8015fb4:	81f8      	strh	r0, [r7, #14]
 8015fb6:	4413      	add	r3, r2
 8015fb8:	b2ca      	uxtb	r2, r1
 8015fba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc0:	0a19      	lsrs	r1, r3, #8
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	89fb      	ldrh	r3, [r7, #14]
 8015fc8:	1c58      	adds	r0, r3, #1
 8015fca:	81f8      	strh	r0, [r7, #14]
 8015fcc:	4413      	add	r3, r2
 8015fce:	b2ca      	uxtb	r2, r1
 8015fd0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fd6:	0c19      	lsrs	r1, r3, #16
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681a      	ldr	r2, [r3, #0]
 8015fdc:	89fb      	ldrh	r3, [r7, #14]
 8015fde:	1c58      	adds	r0, r3, #1
 8015fe0:	81f8      	strh	r0, [r7, #14]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	b2ca      	uxtb	r2, r1
 8015fe6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fec:	0e19      	lsrs	r1, r3, #24
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681a      	ldr	r2, [r3, #0]
 8015ff2:	89fb      	ldrh	r3, [r7, #14]
 8015ff4:	1c58      	adds	r0, r3, #1
 8015ff6:	81f8      	strh	r0, [r7, #14]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	b2ca      	uxtb	r2, r1
 8015ffc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015ffe:	89fb      	ldrh	r3, [r7, #14]
 8016000:	b2da      	uxtb	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016006:	2300      	movs	r3, #0
}
 8016008:	4618      	mov	r0, r3
 801600a:	3710      	adds	r7, #16
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}

08016010 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016010:	b480      	push	{r7}
 8016012:	b083      	sub	sp, #12
 8016014:	af00      	add	r7, sp, #0
 8016016:	4603      	mov	r3, r0
 8016018:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801601a:	79fb      	ldrb	r3, [r7, #7]
 801601c:	2b05      	cmp	r3, #5
 801601e:	d101      	bne.n	8016024 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016020:	2301      	movs	r3, #1
 8016022:	e000      	b.n	8016026 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016024:	2300      	movs	r3, #0
        }
    }
}
 8016026:	4618      	mov	r0, r3
 8016028:	370c      	adds	r7, #12
 801602a:	46bd      	mov	sp, r7
 801602c:	bc80      	pop	{r7}
 801602e:	4770      	bx	lr

08016030 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0
 8016036:	4603      	mov	r3, r0
 8016038:	6039      	str	r1, [r7, #0]
 801603a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801603c:	2300      	movs	r3, #0
 801603e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8016040:	79fb      	ldrb	r3, [r7, #7]
 8016042:	2b05      	cmp	r3, #5
 8016044:	d105      	bne.n	8016052 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016046:	6838      	ldr	r0, [r7, #0]
 8016048:	f001 f962 	bl	8017310 <RegionEU868GetPhyParam>
 801604c:	4603      	mov	r3, r0
 801604e:	60fb      	str	r3, [r7, #12]
 8016050:	e001      	b.n	8016056 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	4618      	mov	r0, r3
 801605a:	3710      	adds	r7, #16
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	4603      	mov	r3, r0
 8016068:	6039      	str	r1, [r7, #0]
 801606a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801606c:	79fb      	ldrb	r3, [r7, #7]
 801606e:	2b05      	cmp	r3, #5
 8016070:	d103      	bne.n	801607a <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016072:	6838      	ldr	r0, [r7, #0]
 8016074:	f001 fa98 	bl	80175a8 <RegionEU868SetBandTxDone>
 8016078:	e000      	b.n	801607c <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801607a:	bf00      	nop
        }
    }
}
 801607c:	3708      	adds	r7, #8
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}

08016082 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016082:	b580      	push	{r7, lr}
 8016084:	b082      	sub	sp, #8
 8016086:	af00      	add	r7, sp, #0
 8016088:	4603      	mov	r3, r0
 801608a:	6039      	str	r1, [r7, #0]
 801608c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801608e:	79fb      	ldrb	r3, [r7, #7]
 8016090:	2b05      	cmp	r3, #5
 8016092:	d103      	bne.n	801609c <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016094:	6838      	ldr	r0, [r7, #0]
 8016096:	f001 fab3 	bl	8017600 <RegionEU868InitDefaults>
 801609a:	e000      	b.n	801609e <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801609c:	bf00      	nop
        }
    }
}
 801609e:	bf00      	nop
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b082      	sub	sp, #8
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	4603      	mov	r3, r0
 80160ae:	6039      	str	r1, [r7, #0]
 80160b0:	71fb      	strb	r3, [r7, #7]
 80160b2:	4613      	mov	r3, r2
 80160b4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80160b6:	79fb      	ldrb	r3, [r7, #7]
 80160b8:	2b05      	cmp	r3, #5
 80160ba:	d106      	bne.n	80160ca <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80160bc:	79bb      	ldrb	r3, [r7, #6]
 80160be:	4619      	mov	r1, r3
 80160c0:	6838      	ldr	r0, [r7, #0]
 80160c2:	f001 fb3b 	bl	801773c <RegionEU868Verify>
 80160c6:	4603      	mov	r3, r0
 80160c8:	e000      	b.n	80160cc <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80160ca:	2300      	movs	r3, #0
        }
    }
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3708      	adds	r7, #8
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b082      	sub	sp, #8
 80160d8:	af00      	add	r7, sp, #0
 80160da:	4603      	mov	r3, r0
 80160dc:	6039      	str	r1, [r7, #0]
 80160de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80160e0:	79fb      	ldrb	r3, [r7, #7]
 80160e2:	2b05      	cmp	r3, #5
 80160e4:	d103      	bne.n	80160ee <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80160e6:	6838      	ldr	r0, [r7, #0]
 80160e8:	f001 fba4 	bl	8017834 <RegionEU868ApplyCFList>
 80160ec:	e000      	b.n	80160f0 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80160ee:	bf00      	nop
        }
    }
}
 80160f0:	bf00      	nop
 80160f2:	3708      	adds	r7, #8
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	6039      	str	r1, [r7, #0]
 8016102:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016104:	79fb      	ldrb	r3, [r7, #7]
 8016106:	2b05      	cmp	r3, #5
 8016108:	d104      	bne.n	8016114 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801610a:	6838      	ldr	r0, [r7, #0]
 801610c:	f001 fc06 	bl	801791c <RegionEU868ChanMaskSet>
 8016110:	4603      	mov	r3, r0
 8016112:	e000      	b.n	8016116 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016114:	2300      	movs	r3, #0
        }
    }
}
 8016116:	4618      	mov	r0, r3
 8016118:	3708      	adds	r7, #8
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b082      	sub	sp, #8
 8016122:	af00      	add	r7, sp, #0
 8016124:	603b      	str	r3, [r7, #0]
 8016126:	4603      	mov	r3, r0
 8016128:	71fb      	strb	r3, [r7, #7]
 801612a:	460b      	mov	r3, r1
 801612c:	71bb      	strb	r3, [r7, #6]
 801612e:	4613      	mov	r3, r2
 8016130:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016132:	79fb      	ldrb	r3, [r7, #7]
 8016134:	2b05      	cmp	r3, #5
 8016136:	d107      	bne.n	8016148 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016138:	7979      	ldrb	r1, [r7, #5]
 801613a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	683a      	ldr	r2, [r7, #0]
 8016142:	f001 fc15 	bl	8017970 <RegionEU868ComputeRxWindowParameters>
 8016146:	e000      	b.n	801614a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016148:	bf00      	nop
        }
    }
}
 801614a:	bf00      	nop
 801614c:	3708      	adds	r7, #8
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}

08016152 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016152:	b580      	push	{r7, lr}
 8016154:	b084      	sub	sp, #16
 8016156:	af00      	add	r7, sp, #0
 8016158:	4603      	mov	r3, r0
 801615a:	60b9      	str	r1, [r7, #8]
 801615c:	607a      	str	r2, [r7, #4]
 801615e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016160:	7bfb      	ldrb	r3, [r7, #15]
 8016162:	2b05      	cmp	r3, #5
 8016164:	d105      	bne.n	8016172 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016166:	6879      	ldr	r1, [r7, #4]
 8016168:	68b8      	ldr	r0, [r7, #8]
 801616a:	f001 fc5b 	bl	8017a24 <RegionEU868RxConfig>
 801616e:	4603      	mov	r3, r0
 8016170:	e000      	b.n	8016174 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016172:	2300      	movs	r3, #0
        }
    }
}
 8016174:	4618      	mov	r0, r3
 8016176:	3710      	adds	r7, #16
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}

0801617c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b084      	sub	sp, #16
 8016180:	af00      	add	r7, sp, #0
 8016182:	60b9      	str	r1, [r7, #8]
 8016184:	607a      	str	r2, [r7, #4]
 8016186:	603b      	str	r3, [r7, #0]
 8016188:	4603      	mov	r3, r0
 801618a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801618c:	7bfb      	ldrb	r3, [r7, #15]
 801618e:	2b05      	cmp	r3, #5
 8016190:	d106      	bne.n	80161a0 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016192:	683a      	ldr	r2, [r7, #0]
 8016194:	6879      	ldr	r1, [r7, #4]
 8016196:	68b8      	ldr	r0, [r7, #8]
 8016198:	f001 fd14 	bl	8017bc4 <RegionEU868TxConfig>
 801619c:	4603      	mov	r3, r0
 801619e:	e000      	b.n	80161a2 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80161a0:	2300      	movs	r3, #0
        }
    }
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3710      	adds	r7, #16
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}

080161aa <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80161aa:	b580      	push	{r7, lr}
 80161ac:	b086      	sub	sp, #24
 80161ae:	af02      	add	r7, sp, #8
 80161b0:	60b9      	str	r1, [r7, #8]
 80161b2:	607a      	str	r2, [r7, #4]
 80161b4:	603b      	str	r3, [r7, #0]
 80161b6:	4603      	mov	r3, r0
 80161b8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80161ba:	7bfb      	ldrb	r3, [r7, #15]
 80161bc:	2b05      	cmp	r3, #5
 80161be:	d109      	bne.n	80161d4 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	9300      	str	r3, [sp, #0]
 80161c4:	69bb      	ldr	r3, [r7, #24]
 80161c6:	683a      	ldr	r2, [r7, #0]
 80161c8:	6879      	ldr	r1, [r7, #4]
 80161ca:	68b8      	ldr	r0, [r7, #8]
 80161cc:	f001 fdca 	bl	8017d64 <RegionEU868LinkAdrReq>
 80161d0:	4603      	mov	r3, r0
 80161d2:	e000      	b.n	80161d6 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80161d4:	2300      	movs	r3, #0
        }
    }
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}

080161de <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80161de:	b580      	push	{r7, lr}
 80161e0:	b082      	sub	sp, #8
 80161e2:	af00      	add	r7, sp, #0
 80161e4:	4603      	mov	r3, r0
 80161e6:	6039      	str	r1, [r7, #0]
 80161e8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80161ea:	79fb      	ldrb	r3, [r7, #7]
 80161ec:	2b05      	cmp	r3, #5
 80161ee:	d104      	bne.n	80161fa <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80161f0:	6838      	ldr	r0, [r7, #0]
 80161f2:	f001 fed9 	bl	8017fa8 <RegionEU868RxParamSetupReq>
 80161f6:	4603      	mov	r3, r0
 80161f8:	e000      	b.n	80161fc <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80161fa:	2300      	movs	r3, #0
        }
    }
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	3708      	adds	r7, #8
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	4603      	mov	r3, r0
 801620c:	6039      	str	r1, [r7, #0]
 801620e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016210:	79fb      	ldrb	r3, [r7, #7]
 8016212:	2b05      	cmp	r3, #5
 8016214:	d104      	bne.n	8016220 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016216:	6838      	ldr	r0, [r7, #0]
 8016218:	f001 ff04 	bl	8018024 <RegionEU868NewChannelReq>
 801621c:	4603      	mov	r3, r0
 801621e:	e000      	b.n	8016222 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016220:	2300      	movs	r3, #0
        }
    }
}
 8016222:	4618      	mov	r0, r3
 8016224:	3708      	adds	r7, #8
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}

0801622a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801622a:	b580      	push	{r7, lr}
 801622c:	b082      	sub	sp, #8
 801622e:	af00      	add	r7, sp, #0
 8016230:	4603      	mov	r3, r0
 8016232:	6039      	str	r1, [r7, #0]
 8016234:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016236:	79fb      	ldrb	r3, [r7, #7]
 8016238:	2b05      	cmp	r3, #5
 801623a:	d104      	bne.n	8016246 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801623c:	6838      	ldr	r0, [r7, #0]
 801623e:	f001 ff4f 	bl	80180e0 <RegionEU868TxParamSetupReq>
 8016242:	4603      	mov	r3, r0
 8016244:	e000      	b.n	8016248 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016246:	2300      	movs	r3, #0
        }
    }
}
 8016248:	4618      	mov	r0, r3
 801624a:	3708      	adds	r7, #8
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}

08016250 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	4603      	mov	r3, r0
 8016258:	6039      	str	r1, [r7, #0]
 801625a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801625c:	79fb      	ldrb	r3, [r7, #7]
 801625e:	2b05      	cmp	r3, #5
 8016260:	d104      	bne.n	801626c <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016262:	6838      	ldr	r0, [r7, #0]
 8016264:	f001 ff48 	bl	80180f8 <RegionEU868DlChannelReq>
 8016268:	4603      	mov	r3, r0
 801626a:	e000      	b.n	801626e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801626c:	2300      	movs	r3, #0
        }
    }
}
 801626e:	4618      	mov	r0, r3
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b082      	sub	sp, #8
 801627a:	af00      	add	r7, sp, #0
 801627c:	4603      	mov	r3, r0
 801627e:	71fb      	strb	r3, [r7, #7]
 8016280:	460b      	mov	r3, r1
 8016282:	71bb      	strb	r3, [r7, #6]
 8016284:	4613      	mov	r3, r2
 8016286:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016288:	79fb      	ldrb	r3, [r7, #7]
 801628a:	2b05      	cmp	r3, #5
 801628c:	d108      	bne.n	80162a0 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801628e:	797a      	ldrb	r2, [r7, #5]
 8016290:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016294:	4611      	mov	r1, r2
 8016296:	4618      	mov	r0, r3
 8016298:	f001 ff72 	bl	8018180 <RegionEU868AlternateDr>
 801629c:	4603      	mov	r3, r0
 801629e:	e000      	b.n	80162a2 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80162a0:	2300      	movs	r3, #0
        }
    }
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3708      	adds	r7, #8
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}

080162aa <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b084      	sub	sp, #16
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
 80162b4:	603b      	str	r3, [r7, #0]
 80162b6:	4603      	mov	r3, r0
 80162b8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80162ba:	7bfb      	ldrb	r3, [r7, #15]
 80162bc:	2b05      	cmp	r3, #5
 80162be:	d107      	bne.n	80162d0 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	683a      	ldr	r2, [r7, #0]
 80162c4:	6879      	ldr	r1, [r7, #4]
 80162c6:	68b8      	ldr	r0, [r7, #8]
 80162c8:	f001 ff6a 	bl	80181a0 <RegionEU868NextChannel>
 80162cc:	4603      	mov	r3, r0
 80162ce:	e000      	b.n	80162d2 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80162d0:	2309      	movs	r3, #9
        }
    }
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3710      	adds	r7, #16
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}

080162da <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80162da:	b580      	push	{r7, lr}
 80162dc:	b082      	sub	sp, #8
 80162de:	af00      	add	r7, sp, #0
 80162e0:	4603      	mov	r3, r0
 80162e2:	6039      	str	r1, [r7, #0]
 80162e4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80162e6:	79fb      	ldrb	r3, [r7, #7]
 80162e8:	2b05      	cmp	r3, #5
 80162ea:	d103      	bne.n	80162f4 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80162ec:	6838      	ldr	r0, [r7, #0]
 80162ee:	f002 f8d1 	bl	8018494 <RegionEU868SetContinuousWave>
 80162f2:	e000      	b.n	80162f6 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80162f4:	bf00      	nop
        }
    }
}
 80162f6:	bf00      	nop
 80162f8:	3708      	adds	r7, #8
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80162fe:	b590      	push	{r4, r7, lr}
 8016300:	b083      	sub	sp, #12
 8016302:	af00      	add	r7, sp, #0
 8016304:	4604      	mov	r4, r0
 8016306:	4608      	mov	r0, r1
 8016308:	4611      	mov	r1, r2
 801630a:	461a      	mov	r2, r3
 801630c:	4623      	mov	r3, r4
 801630e:	71fb      	strb	r3, [r7, #7]
 8016310:	4603      	mov	r3, r0
 8016312:	71bb      	strb	r3, [r7, #6]
 8016314:	460b      	mov	r3, r1
 8016316:	717b      	strb	r3, [r7, #5]
 8016318:	4613      	mov	r3, r2
 801631a:	713b      	strb	r3, [r7, #4]
    switch( region )
 801631c:	79fb      	ldrb	r3, [r7, #7]
 801631e:	2b05      	cmp	r3, #5
 8016320:	d109      	bne.n	8016336 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016322:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8016326:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801632a:	79bb      	ldrb	r3, [r7, #6]
 801632c:	4618      	mov	r0, r3
 801632e:	f002 f8ff 	bl	8018530 <RegionEU868ApplyDrOffset>
 8016332:	4603      	mov	r3, r0
 8016334:	e000      	b.n	8016338 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016336:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8016338:	4618      	mov	r0, r3
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	bd90      	pop	{r4, r7, pc}

08016340 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016340:	b480      	push	{r7}
 8016342:	b083      	sub	sp, #12
 8016344:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016346:	4b04      	ldr	r3, [pc, #16]	; (8016358 <RegionGetVersion+0x18>)
 8016348:	607b      	str	r3, [r7, #4]

    return version;
 801634a:	687b      	ldr	r3, [r7, #4]
}
 801634c:	4618      	mov	r0, r3
 801634e:	370c      	adds	r7, #12
 8016350:	46bd      	mov	sp, r7
 8016352:	bc80      	pop	{r7}
 8016354:	4770      	bx	lr
 8016356:	bf00      	nop
 8016358:	01010003 	.word	0x01010003

0801635c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801635c:	b480      	push	{r7}
 801635e:	b087      	sub	sp, #28
 8016360:	af00      	add	r7, sp, #0
 8016362:	60f8      	str	r0, [r7, #12]
 8016364:	4608      	mov	r0, r1
 8016366:	4639      	mov	r1, r7
 8016368:	e881 000c 	stmia.w	r1, {r2, r3}
 801636c:	4603      	mov	r3, r0
 801636e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	881b      	ldrh	r3, [r3, #0]
 8016374:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016376:	7afb      	ldrb	r3, [r7, #11]
 8016378:	f083 0301 	eor.w	r3, r3, #1
 801637c:	b2db      	uxtb	r3, r3
 801637e:	2b00      	cmp	r3, #0
 8016380:	d01b      	beq.n	80163ba <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016382:	f242 7310 	movw	r3, #10000	; 0x2710
 8016386:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801638e:	d202      	bcs.n	8016396 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016390:	2364      	movs	r3, #100	; 0x64
 8016392:	82bb      	strh	r3, [r7, #20]
 8016394:	e00b      	b.n	80163ae <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801639c:	4293      	cmp	r3, r2
 801639e:	d803      	bhi.n	80163a8 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80163a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80163a4:	82bb      	strh	r3, [r7, #20]
 80163a6:	e002      	b.n	80163ae <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80163a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80163ac:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80163ae:	8aba      	ldrh	r2, [r7, #20]
 80163b0:	8afb      	ldrh	r3, [r7, #22]
 80163b2:	4293      	cmp	r3, r2
 80163b4:	bf38      	it	cc
 80163b6:	4613      	movcc	r3, r2
 80163b8:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80163ba:	8afb      	ldrh	r3, [r7, #22]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d101      	bne.n	80163c4 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80163c0:	2301      	movs	r3, #1
 80163c2:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80163c4:	8afb      	ldrh	r3, [r7, #22]
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	371c      	adds	r7, #28
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bc80      	pop	{r7}
 80163ce:	4770      	bx	lr

080163d0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b08e      	sub	sp, #56	; 0x38
 80163d4:	af02      	add	r7, sp, #8
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	4608      	mov	r0, r1
 80163da:	4639      	mov	r1, r7
 80163dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80163e0:	4603      	mov	r3, r0
 80163e2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80163ea:	4b4b      	ldr	r3, [pc, #300]	; (8016518 <SetMaxTimeCredits+0x148>)
 80163ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80163ee:	463b      	mov	r3, r7
 80163f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80163f4:	f005 fcfc 	bl	801bdf0 <SysTimeToMs>
 80163f8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80163fa:	f107 0314 	add.w	r3, r7, #20
 80163fe:	2200      	movs	r2, #0
 8016400:	601a      	str	r2, [r3, #0]
 8016402:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016404:	7af9      	ldrb	r1, [r7, #11]
 8016406:	463b      	mov	r3, r7
 8016408:	cb0c      	ldmia	r3, {r2, r3}
 801640a:	68f8      	ldr	r0, [r7, #12]
 801640c:	f7ff ffa6 	bl	801635c <GetDutyCycle>
 8016410:	4603      	mov	r3, r0
 8016412:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8016414:	7afb      	ldrb	r3, [r7, #11]
 8016416:	f083 0301 	eor.w	r3, r3, #1
 801641a:	b2db      	uxtb	r3, r3
 801641c:	2b00      	cmp	r3, #0
 801641e:	d062      	beq.n	80164e6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016422:	2b64      	cmp	r3, #100	; 0x64
 8016424:	d105      	bne.n	8016432 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016426:	4b3c      	ldr	r3, [pc, #240]	; (8016518 <SetMaxTimeCredits+0x148>)
 8016428:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801642e:	609a      	str	r2, [r3, #8]
 8016430:	e00b      	b.n	801644a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016432:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016438:	d105      	bne.n	8016446 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801643a:	4b38      	ldr	r3, [pc, #224]	; (801651c <SetMaxTimeCredits+0x14c>)
 801643c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016442:	609a      	str	r2, [r3, #8]
 8016444:	e001      	b.n	801644a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016446:	4b36      	ldr	r3, [pc, #216]	; (8016520 <SetMaxTimeCredits+0x150>)
 8016448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	689a      	ldr	r2, [r3, #8]
 801644e:	f107 031c 	add.w	r3, r7, #28
 8016452:	4611      	mov	r1, r2
 8016454:	4618      	mov	r0, r3
 8016456:	f005 fcf3 	bl	801be40 <SysTimeFromMs>
 801645a:	f107 0014 	add.w	r0, r7, #20
 801645e:	6a3b      	ldr	r3, [r7, #32]
 8016460:	9300      	str	r3, [sp, #0]
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	463a      	mov	r2, r7
 8016466:	ca06      	ldmia	r2, {r1, r2}
 8016468:	f005 fc03 	bl	801bc72 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801646c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016470:	f083 0301 	eor.w	r3, r3, #1
 8016474:	b2db      	uxtb	r3, r3
 8016476:	2b00      	cmp	r3, #0
 8016478:	d006      	beq.n	8016488 <SetMaxTimeCredits+0xb8>
 801647a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801647e:	f083 0301 	eor.w	r3, r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	d108      	bne.n	801649a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801648c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801648e:	429a      	cmp	r2, r3
 8016490:	d103      	bne.n	801649a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016492:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016494:	4a23      	ldr	r2, [pc, #140]	; (8016524 <SetMaxTimeCredits+0x154>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d92f      	bls.n	80164fa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801649e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	4a21      	ldr	r2, [pc, #132]	; (8016528 <SetMaxTimeCredits+0x158>)
 80164a4:	4293      	cmp	r3, r2
 80164a6:	d928      	bls.n	80164fa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80164ae:	3b30      	subs	r3, #48	; 0x30
 80164b0:	4a1e      	ldr	r2, [pc, #120]	; (801652c <SetMaxTimeCredits+0x15c>)
 80164b2:	fba2 2303 	umull	r2, r3, r2, r3
 80164b6:	0c1b      	lsrs	r3, r3, #16
 80164b8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	4a1c      	ldr	r2, [pc, #112]	; (8016530 <SetMaxTimeCredits+0x160>)
 80164be:	fb02 f303 	mul.w	r3, r2, r3
 80164c2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80164ca:	3330      	adds	r3, #48	; 0x30
 80164cc:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80164d2:	f107 0314 	add.w	r3, r7, #20
 80164d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80164da:	f005 fc89 	bl	801bdf0 <SysTimeToMs>
 80164de:	4602      	mov	r2, r0
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	609a      	str	r2, [r3, #8]
 80164e4:	e009      	b.n	80164fa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80164e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80164ea:	f083 0301 	eor.w	r3, r3, #1
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d002      	beq.n	80164fa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164f8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d102      	bne.n	8016508 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016506:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801650c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801650e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8016510:	4618      	mov	r0, r3
 8016512:	3730      	adds	r7, #48	; 0x30
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	001b7740 	.word	0x001b7740
 801651c:	0112a880 	.word	0x0112a880
 8016520:	02932e00 	.word	0x02932e00
 8016524:	0001517f 	.word	0x0001517f
 8016528:	0001ec2f 	.word	0x0001ec2f
 801652c:	c22e4507 	.word	0xc22e4507
 8016530:	00015180 	.word	0x00015180

08016534 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b086      	sub	sp, #24
 8016538:	af02      	add	r7, sp, #8
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	4608      	mov	r0, r1
 801653e:	4611      	mov	r1, r2
 8016540:	461a      	mov	r2, r3
 8016542:	4603      	mov	r3, r0
 8016544:	70fb      	strb	r3, [r7, #3]
 8016546:	460b      	mov	r3, r1
 8016548:	70bb      	strb	r3, [r7, #2]
 801654a:	4613      	mov	r3, r2
 801654c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801654e:	78f9      	ldrb	r1, [r7, #3]
 8016550:	787b      	ldrb	r3, [r7, #1]
 8016552:	9301      	str	r3, [sp, #4]
 8016554:	78bb      	ldrb	r3, [r7, #2]
 8016556:	9300      	str	r3, [sp, #0]
 8016558:	f107 0318 	add.w	r3, r7, #24
 801655c:	cb0c      	ldmia	r3, {r2, r3}
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f7ff ff36 	bl	80163d0 <SetMaxTimeCredits>
 8016564:	4603      	mov	r3, r0
 8016566:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016568:	78fb      	ldrb	r3, [r7, #3]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d00a      	beq.n	8016584 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	4618      	mov	r0, r3
 8016574:	f006 fa7c 	bl	801ca70 <UTIL_TIMER_GetElapsedTime>
 8016578:	4602      	mov	r2, r0
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	441a      	add	r2, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	68da      	ldr	r2, [r3, #12]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	691b      	ldr	r3, [r3, #16]
 801658c:	429a      	cmp	r2, r3
 801658e:	d903      	bls.n	8016598 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	691a      	ldr	r2, [r3, #16]
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6a3a      	ldr	r2, [r7, #32]
 801659c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801659e:	89fb      	ldrh	r3, [r7, #14]
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3710      	adds	r7, #16
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80165a8:	b480      	push	{r7}
 80165aa:	b085      	sub	sp, #20
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	4603      	mov	r3, r0
 80165b0:	460a      	mov	r2, r1
 80165b2:	80fb      	strh	r3, [r7, #6]
 80165b4:	4613      	mov	r3, r2
 80165b6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80165b8:	2300      	movs	r3, #0
 80165ba:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80165bc:	2300      	movs	r3, #0
 80165be:	73bb      	strb	r3, [r7, #14]
 80165c0:	e011      	b.n	80165e6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80165c2:	88fa      	ldrh	r2, [r7, #6]
 80165c4:	7bbb      	ldrb	r3, [r7, #14]
 80165c6:	2101      	movs	r1, #1
 80165c8:	fa01 f303 	lsl.w	r3, r1, r3
 80165cc:	401a      	ands	r2, r3
 80165ce:	7bbb      	ldrb	r3, [r7, #14]
 80165d0:	2101      	movs	r1, #1
 80165d2:	fa01 f303 	lsl.w	r3, r1, r3
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d102      	bne.n	80165e0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80165da:	7bfb      	ldrb	r3, [r7, #15]
 80165dc:	3301      	adds	r3, #1
 80165de:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80165e0:	7bbb      	ldrb	r3, [r7, #14]
 80165e2:	3301      	adds	r3, #1
 80165e4:	73bb      	strb	r3, [r7, #14]
 80165e6:	7bba      	ldrb	r2, [r7, #14]
 80165e8:	797b      	ldrb	r3, [r7, #5]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d3e9      	bcc.n	80165c2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80165ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3714      	adds	r7, #20
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bc80      	pop	{r7}
 80165f8:	4770      	bx	lr

080165fa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80165fa:	b580      	push	{r7, lr}
 80165fc:	b084      	sub	sp, #16
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6039      	str	r1, [r7, #0]
 8016602:	4611      	mov	r1, r2
 8016604:	461a      	mov	r2, r3
 8016606:	4603      	mov	r3, r0
 8016608:	71fb      	strb	r3, [r7, #7]
 801660a:	460b      	mov	r3, r1
 801660c:	71bb      	strb	r3, [r7, #6]
 801660e:	4613      	mov	r3, r2
 8016610:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016612:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016616:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801661a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801661e:	4618      	mov	r0, r3
 8016620:	f000 f85d 	bl	80166de <RegionCommonValueInRange>
 8016624:	4603      	mov	r3, r0
 8016626:	2b00      	cmp	r3, #0
 8016628:	d101      	bne.n	801662e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801662a:	2300      	movs	r3, #0
 801662c:	e053      	b.n	80166d6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801662e:	2300      	movs	r3, #0
 8016630:	73fb      	strb	r3, [r7, #15]
 8016632:	2300      	movs	r3, #0
 8016634:	73bb      	strb	r3, [r7, #14]
 8016636:	e049      	b.n	80166cc <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016638:	2300      	movs	r3, #0
 801663a:	737b      	strb	r3, [r7, #13]
 801663c:	e03d      	b.n	80166ba <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801663e:	7bbb      	ldrb	r3, [r7, #14]
 8016640:	005b      	lsls	r3, r3, #1
 8016642:	683a      	ldr	r2, [r7, #0]
 8016644:	4413      	add	r3, r2
 8016646:	881b      	ldrh	r3, [r3, #0]
 8016648:	461a      	mov	r2, r3
 801664a:	7b7b      	ldrb	r3, [r7, #13]
 801664c:	fa42 f303 	asr.w	r3, r2, r3
 8016650:	f003 0301 	and.w	r3, r3, #1
 8016654:	2b00      	cmp	r3, #0
 8016656:	d02d      	beq.n	80166b4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016658:	7bfa      	ldrb	r2, [r7, #15]
 801665a:	7b7b      	ldrb	r3, [r7, #13]
 801665c:	4413      	add	r3, r2
 801665e:	461a      	mov	r2, r3
 8016660:	4613      	mov	r3, r2
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	461a      	mov	r2, r3
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	4413      	add	r3, r2
 801666e:	7a1b      	ldrb	r3, [r3, #8]
 8016670:	f343 0303 	sbfx	r3, r3, #0, #4
 8016674:	b25b      	sxtb	r3, r3
 8016676:	f003 030f 	and.w	r3, r3, #15
 801667a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801667c:	7bfa      	ldrb	r2, [r7, #15]
 801667e:	7b7b      	ldrb	r3, [r7, #13]
 8016680:	4413      	add	r3, r2
 8016682:	461a      	mov	r2, r3
 8016684:	4613      	mov	r3, r2
 8016686:	005b      	lsls	r3, r3, #1
 8016688:	4413      	add	r3, r2
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	461a      	mov	r2, r3
 801668e:	69fb      	ldr	r3, [r7, #28]
 8016690:	4413      	add	r3, r2
 8016692:	7a1b      	ldrb	r3, [r3, #8]
 8016694:	f343 1303 	sbfx	r3, r3, #4, #4
 8016698:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801669a:	f003 030f 	and.w	r3, r3, #15
 801669e:	b25a      	sxtb	r2, r3
 80166a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80166a4:	4618      	mov	r0, r3
 80166a6:	f000 f81a 	bl	80166de <RegionCommonValueInRange>
 80166aa:	4603      	mov	r3, r0
 80166ac:	2b01      	cmp	r3, #1
 80166ae:	d101      	bne.n	80166b4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80166b0:	2301      	movs	r3, #1
 80166b2:	e010      	b.n	80166d6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80166b4:	7b7b      	ldrb	r3, [r7, #13]
 80166b6:	3301      	adds	r3, #1
 80166b8:	737b      	strb	r3, [r7, #13]
 80166ba:	7b7b      	ldrb	r3, [r7, #13]
 80166bc:	2b0f      	cmp	r3, #15
 80166be:	d9be      	bls.n	801663e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80166c0:	7bfb      	ldrb	r3, [r7, #15]
 80166c2:	3310      	adds	r3, #16
 80166c4:	73fb      	strb	r3, [r7, #15]
 80166c6:	7bbb      	ldrb	r3, [r7, #14]
 80166c8:	3301      	adds	r3, #1
 80166ca:	73bb      	strb	r3, [r7, #14]
 80166cc:	7bfa      	ldrb	r2, [r7, #15]
 80166ce:	79fb      	ldrb	r3, [r7, #7]
 80166d0:	429a      	cmp	r2, r3
 80166d2:	d3b1      	bcc.n	8016638 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80166d4:	2300      	movs	r3, #0
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3710      	adds	r7, #16
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80166de:	b480      	push	{r7}
 80166e0:	b083      	sub	sp, #12
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	4603      	mov	r3, r0
 80166e6:	71fb      	strb	r3, [r7, #7]
 80166e8:	460b      	mov	r3, r1
 80166ea:	71bb      	strb	r3, [r7, #6]
 80166ec:	4613      	mov	r3, r2
 80166ee:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80166f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80166f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80166f8:	429a      	cmp	r2, r3
 80166fa:	db07      	blt.n	801670c <RegionCommonValueInRange+0x2e>
 80166fc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016700:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016704:	429a      	cmp	r2, r3
 8016706:	dc01      	bgt.n	801670c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016708:	2301      	movs	r3, #1
 801670a:	e000      	b.n	801670e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801670c:	2300      	movs	r3, #0
}
 801670e:	4618      	mov	r0, r3
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	bc80      	pop	{r7}
 8016716:	4770      	bx	lr

08016718 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016718:	b480      	push	{r7}
 801671a:	b085      	sub	sp, #20
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	460b      	mov	r3, r1
 8016722:	70fb      	strb	r3, [r7, #3]
 8016724:	4613      	mov	r3, r2
 8016726:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016728:	78fb      	ldrb	r3, [r7, #3]
 801672a:	091b      	lsrs	r3, r3, #4
 801672c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801672e:	78bb      	ldrb	r3, [r7, #2]
 8016730:	091b      	lsrs	r3, r3, #4
 8016732:	b2db      	uxtb	r3, r3
 8016734:	7bfa      	ldrb	r2, [r7, #15]
 8016736:	429a      	cmp	r2, r3
 8016738:	d803      	bhi.n	8016742 <RegionCommonChanDisable+0x2a>
 801673a:	78fa      	ldrb	r2, [r7, #3]
 801673c:	78bb      	ldrb	r3, [r7, #2]
 801673e:	429a      	cmp	r2, r3
 8016740:	d301      	bcc.n	8016746 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016742:	2300      	movs	r3, #0
 8016744:	e017      	b.n	8016776 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016746:	7bfb      	ldrb	r3, [r7, #15]
 8016748:	005b      	lsls	r3, r3, #1
 801674a:	687a      	ldr	r2, [r7, #4]
 801674c:	4413      	add	r3, r2
 801674e:	881b      	ldrh	r3, [r3, #0]
 8016750:	b21a      	sxth	r2, r3
 8016752:	78fb      	ldrb	r3, [r7, #3]
 8016754:	f003 030f 	and.w	r3, r3, #15
 8016758:	2101      	movs	r1, #1
 801675a:	fa01 f303 	lsl.w	r3, r1, r3
 801675e:	b21b      	sxth	r3, r3
 8016760:	43db      	mvns	r3, r3
 8016762:	b21b      	sxth	r3, r3
 8016764:	4013      	ands	r3, r2
 8016766:	b219      	sxth	r1, r3
 8016768:	7bfb      	ldrb	r3, [r7, #15]
 801676a:	005b      	lsls	r3, r3, #1
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	4413      	add	r3, r2
 8016770:	b28a      	uxth	r2, r1
 8016772:	801a      	strh	r2, [r3, #0]

    return true;
 8016774:	2301      	movs	r3, #1
}
 8016776:	4618      	mov	r0, r3
 8016778:	3714      	adds	r7, #20
 801677a:	46bd      	mov	sp, r7
 801677c:	bc80      	pop	{r7}
 801677e:	4770      	bx	lr

08016780 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	460b      	mov	r3, r1
 801678a:	70fb      	strb	r3, [r7, #3]
 801678c:	4613      	mov	r3, r2
 801678e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016790:	2300      	movs	r3, #0
 8016792:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d101      	bne.n	801679e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801679a:	2300      	movs	r3, #0
 801679c:	e018      	b.n	80167d0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801679e:	78fb      	ldrb	r3, [r7, #3]
 80167a0:	73bb      	strb	r3, [r7, #14]
 80167a2:	e010      	b.n	80167c6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80167a4:	7bbb      	ldrb	r3, [r7, #14]
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	687a      	ldr	r2, [r7, #4]
 80167aa:	4413      	add	r3, r2
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	2110      	movs	r1, #16
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7ff fef9 	bl	80165a8 <CountChannels>
 80167b6:	4603      	mov	r3, r0
 80167b8:	461a      	mov	r2, r3
 80167ba:	7bfb      	ldrb	r3, [r7, #15]
 80167bc:	4413      	add	r3, r2
 80167be:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80167c0:	7bbb      	ldrb	r3, [r7, #14]
 80167c2:	3301      	adds	r3, #1
 80167c4:	73bb      	strb	r3, [r7, #14]
 80167c6:	7bba      	ldrb	r2, [r7, #14]
 80167c8:	78bb      	ldrb	r3, [r7, #2]
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d3ea      	bcc.n	80167a4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80167ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3710      	adds	r7, #16
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80167d8:	b480      	push	{r7}
 80167da:	b087      	sub	sp, #28
 80167dc:	af00      	add	r7, sp, #0
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	4613      	mov	r3, r2
 80167e4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d016      	beq.n	801681a <RegionCommonChanMaskCopy+0x42>
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d013      	beq.n	801681a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80167f2:	2300      	movs	r3, #0
 80167f4:	75fb      	strb	r3, [r7, #23]
 80167f6:	e00c      	b.n	8016812 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80167f8:	7dfb      	ldrb	r3, [r7, #23]
 80167fa:	005b      	lsls	r3, r3, #1
 80167fc:	68ba      	ldr	r2, [r7, #8]
 80167fe:	441a      	add	r2, r3
 8016800:	7dfb      	ldrb	r3, [r7, #23]
 8016802:	005b      	lsls	r3, r3, #1
 8016804:	68f9      	ldr	r1, [r7, #12]
 8016806:	440b      	add	r3, r1
 8016808:	8812      	ldrh	r2, [r2, #0]
 801680a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801680c:	7dfb      	ldrb	r3, [r7, #23]
 801680e:	3301      	adds	r3, #1
 8016810:	75fb      	strb	r3, [r7, #23]
 8016812:	7dfa      	ldrb	r2, [r7, #23]
 8016814:	79fb      	ldrb	r3, [r7, #7]
 8016816:	429a      	cmp	r2, r3
 8016818:	d3ee      	bcc.n	80167f8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801681a:	bf00      	nop
 801681c:	371c      	adds	r7, #28
 801681e:	46bd      	mov	sp, r7
 8016820:	bc80      	pop	{r7}
 8016822:	4770      	bx	lr

08016824 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016824:	b082      	sub	sp, #8
 8016826:	b580      	push	{r7, lr}
 8016828:	b086      	sub	sp, #24
 801682a:	af00      	add	r7, sp, #0
 801682c:	60f8      	str	r0, [r7, #12]
 801682e:	60b9      	str	r1, [r7, #8]
 8016830:	627b      	str	r3, [r7, #36]	; 0x24
 8016832:	4613      	mov	r3, r2
 8016834:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016836:	79f9      	ldrb	r1, [r7, #7]
 8016838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801683c:	cb0c      	ldmia	r3, {r2, r3}
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	f7ff fd8c 	bl	801635c <GetDutyCycle>
 8016844:	4603      	mov	r3, r0
 8016846:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	68da      	ldr	r2, [r3, #12]
 801684c:	8afb      	ldrh	r3, [r7, #22]
 801684e:	68b9      	ldr	r1, [r7, #8]
 8016850:	fb01 f303 	mul.w	r3, r1, r3
 8016854:	429a      	cmp	r2, r3
 8016856:	d909      	bls.n	801686c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	68da      	ldr	r2, [r3, #12]
 801685c:	8afb      	ldrh	r3, [r7, #22]
 801685e:	68b9      	ldr	r1, [r7, #8]
 8016860:	fb01 f303 	mul.w	r3, r1, r3
 8016864:	1ad2      	subs	r2, r2, r3
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801686a:	e002      	b.n	8016872 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	2200      	movs	r2, #0
 8016870:	60da      	str	r2, [r3, #12]
}
 8016872:	bf00      	nop
 8016874:	3718      	adds	r7, #24
 8016876:	46bd      	mov	sp, r7
 8016878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801687c:	b002      	add	sp, #8
 801687e:	4770      	bx	lr

08016880 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016882:	b08f      	sub	sp, #60	; 0x3c
 8016884:	af04      	add	r7, sp, #16
 8016886:	6039      	str	r1, [r7, #0]
 8016888:	4611      	mov	r1, r2
 801688a:	461a      	mov	r2, r3
 801688c:	4603      	mov	r3, r0
 801688e:	71fb      	strb	r3, [r7, #7]
 8016890:	460b      	mov	r3, r1
 8016892:	71bb      	strb	r3, [r7, #6]
 8016894:	4613      	mov	r3, r2
 8016896:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016898:	f04f 33ff 	mov.w	r3, #4294967295
 801689c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801689e:	f006 f8d5 	bl	801ca4c <UTIL_TIMER_GetCurrentTime>
 80168a2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80168a4:	2300      	movs	r3, #0
 80168a6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80168a8:	2301      	movs	r3, #1
 80168aa:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80168ac:	2300      	movs	r3, #0
 80168ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80168b2:	2300      	movs	r3, #0
 80168b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80168b8:	e0ba      	b.n	8016a30 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80168ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80168be:	4613      	mov	r3, r2
 80168c0:	005b      	lsls	r3, r3, #1
 80168c2:	4413      	add	r3, r2
 80168c4:	00db      	lsls	r3, r3, #3
 80168c6:	461a      	mov	r2, r3
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	189c      	adds	r4, r3, r2
 80168cc:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80168d0:	797a      	ldrb	r2, [r7, #5]
 80168d2:	79fd      	ldrb	r5, [r7, #7]
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	9302      	str	r3, [sp, #8]
 80168d8:	46ec      	mov	ip, sp
 80168da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80168de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80168e6:	4633      	mov	r3, r6
 80168e8:	4629      	mov	r1, r5
 80168ea:	4620      	mov	r0, r4
 80168ec:	f7ff fe22 	bl	8016534 <UpdateTimeCredits>
 80168f0:	4603      	mov	r3, r0
 80168f2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80168f4:	8afa      	ldrh	r2, [r7, #22]
 80168f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168f8:	fb02 f303 	mul.w	r3, r2, r3
 80168fc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80168fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016902:	4613      	mov	r3, r2
 8016904:	005b      	lsls	r3, r3, #1
 8016906:	4413      	add	r3, r2
 8016908:	00db      	lsls	r3, r3, #3
 801690a:	461a      	mov	r2, r3
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	4413      	add	r3, r2
 8016910:	68db      	ldr	r3, [r3, #12]
 8016912:	69ba      	ldr	r2, [r7, #24]
 8016914:	429a      	cmp	r2, r3
 8016916:	d308      	bcc.n	801692a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016918:	797b      	ldrb	r3, [r7, #5]
 801691a:	f083 0301 	eor.w	r3, r3, #1
 801691e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016920:	2b00      	cmp	r3, #0
 8016922:	d013      	beq.n	801694c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016924:	79fb      	ldrb	r3, [r7, #7]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d010      	beq.n	801694c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801692a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801692e:	4613      	mov	r3, r2
 8016930:	005b      	lsls	r3, r3, #1
 8016932:	4413      	add	r3, r2
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	461a      	mov	r2, r3
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	4413      	add	r3, r2
 801693c:	2201      	movs	r2, #1
 801693e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016944:	3301      	adds	r3, #1
 8016946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801694a:	e06c      	b.n	8016a26 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801694c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016950:	4613      	mov	r3, r2
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	461a      	mov	r2, r3
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	4413      	add	r3, r2
 801695e:	2200      	movs	r2, #0
 8016960:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016962:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016966:	4613      	mov	r3, r2
 8016968:	005b      	lsls	r3, r3, #1
 801696a:	4413      	add	r3, r2
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	461a      	mov	r2, r3
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	4413      	add	r3, r2
 8016974:	691b      	ldr	r3, [r3, #16]
 8016976:	69ba      	ldr	r2, [r7, #24]
 8016978:	429a      	cmp	r2, r3
 801697a:	d215      	bcs.n	80169a8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801697c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016980:	4613      	mov	r3, r2
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	4413      	add	r3, r2
 8016986:	00db      	lsls	r3, r3, #3
 8016988:	461a      	mov	r2, r3
 801698a:	683b      	ldr	r3, [r7, #0]
 801698c:	4413      	add	r3, r2
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	69ba      	ldr	r2, [r7, #24]
 8016992:	1ad3      	subs	r3, r2, r3
 8016994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016996:	4293      	cmp	r3, r2
 8016998:	bf28      	it	cs
 801699a:	4613      	movcs	r3, r2
 801699c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801699e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80169a2:	3301      	adds	r3, #1
 80169a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80169a8:	79fb      	ldrb	r3, [r7, #7]
 80169aa:	f083 0301 	eor.w	r3, r3, #1
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d038      	beq.n	8016a26 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80169b4:	2300      	movs	r3, #0
 80169b6:	60fb      	str	r3, [r7, #12]
 80169b8:	2300      	movs	r3, #0
 80169ba:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80169bc:	8afb      	ldrh	r3, [r7, #22]
 80169be:	2b64      	cmp	r3, #100	; 0x64
 80169c0:	d103      	bne.n	80169ca <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80169c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80169c6:	60fb      	str	r3, [r7, #12]
 80169c8:	e009      	b.n	80169de <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80169ca:	8afb      	ldrh	r3, [r7, #22]
 80169cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80169d0:	d103      	bne.n	80169da <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80169d2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80169d6:	60fb      	str	r3, [r7, #12]
 80169d8:	e001      	b.n	80169de <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80169da:	4b1e      	ldr	r3, [pc, #120]	; (8016a54 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80169dc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80169de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169e0:	4a1c      	ldr	r2, [pc, #112]	; (8016a54 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d90e      	bls.n	8016a04 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80169e6:	68fa      	ldr	r2, [r7, #12]
 80169e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169ea:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80169ee:	3b30      	subs	r3, #48	; 0x30
 80169f0:	4919      	ldr	r1, [pc, #100]	; (8016a58 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80169f2:	fba1 1303 	umull	r1, r3, r1, r3
 80169f6:	0c1b      	lsrs	r3, r3, #16
 80169f8:	3301      	adds	r3, #1
 80169fa:	4918      	ldr	r1, [pc, #96]	; (8016a5c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80169fc:	fb01 f303 	mul.w	r3, r1, r3
 8016a00:	4413      	add	r3, r2
 8016a02:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016a04:	f107 000c 	add.w	r0, r7, #12
 8016a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a0e:	f107 020c 	add.w	r2, r7, #12
 8016a12:	ca06      	ldmia	r2, {r1, r2}
 8016a14:	f005 f92d 	bl	801bc72 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016a18:	f107 030c 	add.w	r3, r7, #12
 8016a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a20:	f005 f9e6 	bl	801bdf0 <SysTimeToMs>
 8016a24:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8016a26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a2a:	3301      	adds	r3, #1
 8016a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016a30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016a34:	79bb      	ldrb	r3, [r7, #6]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	f4ff af3f 	bcc.w	80168ba <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d102      	bne.n	8016a4a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016a44:	f04f 33ff 	mov.w	r3, #4294967295
 8016a48:	e000      	b.n	8016a4c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	372c      	adds	r7, #44	; 0x2c
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a54:	0001ec30 	.word	0x0001ec30
 8016a58:	c22e4507 	.word	0xc22e4507
 8016a5c:	00015180 	.word	0x00015180

08016a60 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016a60:	b480      	push	{r7}
 8016a62:	b085      	sub	sp, #20
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	2b03      	cmp	r3, #3
 8016a74:	d13f      	bne.n	8016af6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	b25a      	sxtb	r2, r3
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a88:	f003 030f 	and.w	r3, r3, #15
 8016a8c:	b25a      	sxtb	r2, r3
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a98:	b2db      	uxtb	r3, r3
 8016a9a:	091b      	lsrs	r3, r3, #4
 8016a9c:	b2db      	uxtb	r3, r3
 8016a9e:	b25a      	sxtb	r2, r3
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	3302      	adds	r3, #2
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	b29a      	uxth	r2, r3
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	889b      	ldrh	r3, [r3, #4]
 8016ab4:	b21a      	sxth	r2, r3
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	3303      	adds	r3, #3
 8016aba:	781b      	ldrb	r3, [r3, #0]
 8016abc:	021b      	lsls	r3, r3, #8
 8016abe:	b21b      	sxth	r3, r3
 8016ac0:	4313      	orrs	r3, r2
 8016ac2:	b21b      	sxth	r3, r3
 8016ac4:	b29a      	uxth	r2, r3
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	791a      	ldrb	r2, [r3, #4]
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	091b      	lsrs	r3, r3, #4
 8016ad8:	b2db      	uxtb	r3, r3
 8016ada:	f003 0307 	and.w	r3, r3, #7
 8016ade:	b2da      	uxtb	r2, r3
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	f003 030f 	and.w	r3, r3, #15
 8016aec:	b2da      	uxtb	r2, r3
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016af2:	2305      	movs	r3, #5
 8016af4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3714      	adds	r7, #20
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bc80      	pop	{r7}
 8016b00:	4770      	bx	lr

08016b02 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016b02:	b5b0      	push	{r4, r5, r7, lr}
 8016b04:	b088      	sub	sp, #32
 8016b06:	af02      	add	r7, sp, #8
 8016b08:	60f8      	str	r0, [r7, #12]
 8016b0a:	60b9      	str	r1, [r7, #8]
 8016b0c:	607a      	str	r2, [r7, #4]
 8016b0e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	791b      	ldrb	r3, [r3, #4]
 8016b14:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	799b      	ldrb	r3, [r3, #6]
 8016b1a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	79db      	ldrb	r3, [r3, #7]
 8016b20:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	7a1b      	ldrb	r3, [r3, #8]
 8016b26:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	795b      	ldrb	r3, [r3, #5]
 8016b2c:	f083 0301 	eor.w	r3, r3, #1
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d008      	beq.n	8016b48 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	7adb      	ldrb	r3, [r3, #11]
 8016b3a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	7a5b      	ldrb	r3, [r3, #9]
 8016b40:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	7a9b      	ldrb	r3, [r3, #10]
 8016b46:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016b48:	7dfb      	ldrb	r3, [r7, #23]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d04a      	beq.n	8016be4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016b4e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016b52:	2b0f      	cmp	r3, #15
 8016b54:	d103      	bne.n	8016b5e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	7a5b      	ldrb	r3, [r3, #9]
 8016b5a:	75bb      	strb	r3, [r7, #22]
 8016b5c:	e01d      	b.n	8016b9a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	7b18      	ldrb	r0, [r3, #12]
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	6919      	ldr	r1, [r3, #16]
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016b72:	68fa      	ldr	r2, [r7, #12]
 8016b74:	6992      	ldr	r2, [r2, #24]
 8016b76:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016b7a:	9201      	str	r2, [sp, #4]
 8016b7c:	9300      	str	r3, [sp, #0]
 8016b7e:	462b      	mov	r3, r5
 8016b80:	4622      	mov	r2, r4
 8016b82:	f7ff fd3a 	bl	80165fa <RegionCommonChanVerifyDr>
 8016b86:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016b88:	f083 0301 	eor.w	r3, r3, #1
 8016b8c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d003      	beq.n	8016b9a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016b92:	7dfb      	ldrb	r3, [r7, #23]
 8016b94:	f023 0302 	bic.w	r3, r3, #2
 8016b98:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016b9a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016b9e:	2b0f      	cmp	r3, #15
 8016ba0:	d103      	bne.n	8016baa <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	7a9b      	ldrb	r3, [r3, #10]
 8016ba6:	757b      	strb	r3, [r7, #21]
 8016ba8:	e01c      	b.n	8016be4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016bb6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7ff fd8f 	bl	80166de <RegionCommonValueInRange>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d10e      	bne.n	8016be4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016bcc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	da03      	bge.n	8016bdc <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	7f5b      	ldrb	r3, [r3, #29]
 8016bd8:	757b      	strb	r3, [r7, #21]
 8016bda:	e003      	b.n	8016be4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016bdc:	7dfb      	ldrb	r3, [r7, #23]
 8016bde:	f023 0304 	bic.w	r3, r3, #4
 8016be2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016be4:	7dfb      	ldrb	r3, [r7, #23]
 8016be6:	2b07      	cmp	r3, #7
 8016be8:	d105      	bne.n	8016bf6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016bea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d101      	bne.n	8016bf6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	7dba      	ldrb	r2, [r7, #22]
 8016bfa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	7d7a      	ldrb	r2, [r7, #21]
 8016c00:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016c02:	7d3a      	ldrb	r2, [r7, #20]
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	701a      	strb	r2, [r3, #0]

    return status;
 8016c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3718      	adds	r7, #24
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016c14 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016c14:	b480      	push	{r7}
 8016c16:	b083      	sub	sp, #12
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	6039      	str	r1, [r7, #0]
 8016c1e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016c20:	79fb      	ldrb	r3, [r7, #7]
 8016c22:	4a06      	ldr	r2, [pc, #24]	; (8016c3c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016c24:	fa02 f303 	lsl.w	r3, r2, r3
 8016c28:	461a      	mov	r2, r3
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	370c      	adds	r7, #12
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bc80      	pop	{r7}
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	000f4240 	.word	0x000f4240

08016c40 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	4603      	mov	r3, r0
 8016c48:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016c4a:	79fb      	ldrb	r3, [r7, #7]
 8016c4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016c50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016c54:	4618      	mov	r0, r3
 8016c56:	370c      	adds	r7, #12
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bc80      	pop	{r7}
 8016c5c:	4770      	bx	lr
	...

08016c60 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016c60:	b480      	push	{r7}
 8016c62:	b085      	sub	sp, #20
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	607a      	str	r2, [r7, #4]
 8016c6a:	603b      	str	r3, [r7, #0]
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016c70:	7afa      	ldrb	r2, [r7, #11]
 8016c72:	7afb      	ldrb	r3, [r7, #11]
 8016c74:	3b04      	subs	r3, #4
 8016c76:	4619      	mov	r1, r3
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	fb03 f101 	mul.w	r1, r3, r1
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016c84:	fb00 f303 	mul.w	r3, r0, r3
 8016c88:	440b      	add	r3, r1
 8016c8a:	005b      	lsls	r3, r3, #1
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d013      	beq.n	8016cb8 <RegionCommonComputeRxWindowParameters+0x58>
 8016c90:	7afb      	ldrb	r3, [r7, #11]
 8016c92:	3b04      	subs	r3, #4
 8016c94:	4619      	mov	r1, r3
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	fb03 f101 	mul.w	r1, r3, r1
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016ca2:	fb00 f303 	mul.w	r3, r0, r3
 8016ca6:	440b      	add	r3, r1
 8016ca8:	0059      	lsls	r1, r3, #1
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	440b      	add	r3, r1
 8016cae:	1e59      	subs	r1, r3, #1
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8016cb6:	e00f      	b.n	8016cd8 <RegionCommonComputeRxWindowParameters+0x78>
 8016cb8:	7afb      	ldrb	r3, [r7, #11]
 8016cba:	3b04      	subs	r3, #4
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	fb03 f101 	mul.w	r1, r3, r1
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016cca:	fb00 f303 	mul.w	r3, r0, r3
 8016cce:	440b      	add	r3, r1
 8016cd0:	0059      	lsls	r1, r3, #1
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	bf38      	it	cc
 8016cdc:	461a      	movcc	r2, r3
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	009b      	lsls	r3, r3, #2
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	69bb      	ldr	r3, [r7, #24]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	fb02 f303 	mul.w	r3, r2, r3
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d007      	beq.n	8016d06 <RegionCommonComputeRxWindowParameters+0xa6>
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	68fa      	ldr	r2, [r7, #12]
 8016cfc:	fb02 f303 	mul.w	r3, r2, r3
 8016d00:	3301      	adds	r3, #1
 8016d02:	085b      	lsrs	r3, r3, #1
 8016d04:	e005      	b.n	8016d12 <RegionCommonComputeRxWindowParameters+0xb2>
 8016d06:	69bb      	ldr	r3, [r7, #24]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	68fa      	ldr	r2, [r7, #12]
 8016d0c:	fb02 f303 	mul.w	r3, r2, r3
 8016d10:	085b      	lsrs	r3, r3, #1
 8016d12:	1acb      	subs	r3, r1, r3
 8016d14:	683a      	ldr	r2, [r7, #0]
 8016d16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016d1a:	fb01 f202 	mul.w	r2, r1, r2
 8016d1e:	1a9b      	subs	r3, r3, r2
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	dd27      	ble.n	8016d74 <RegionCommonComputeRxWindowParameters+0x114>
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	009b      	lsls	r3, r3, #2
 8016d28:	4619      	mov	r1, r3
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	68fa      	ldr	r2, [r7, #12]
 8016d30:	fb02 f303 	mul.w	r3, r2, r3
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d007      	beq.n	8016d48 <RegionCommonComputeRxWindowParameters+0xe8>
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	68fa      	ldr	r2, [r7, #12]
 8016d3e:	fb02 f303 	mul.w	r3, r2, r3
 8016d42:	3301      	adds	r3, #1
 8016d44:	085b      	lsrs	r3, r3, #1
 8016d46:	e005      	b.n	8016d54 <RegionCommonComputeRxWindowParameters+0xf4>
 8016d48:	69bb      	ldr	r3, [r7, #24]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	68fa      	ldr	r2, [r7, #12]
 8016d4e:	fb02 f303 	mul.w	r3, r2, r3
 8016d52:	085b      	lsrs	r3, r3, #1
 8016d54:	1acb      	subs	r3, r1, r3
 8016d56:	683a      	ldr	r2, [r7, #0]
 8016d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016d5c:	fb01 f202 	mul.w	r2, r1, r2
 8016d60:	1a9b      	subs	r3, r3, r2
 8016d62:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8016d66:	4a19      	ldr	r2, [pc, #100]	; (8016dcc <RegionCommonComputeRxWindowParameters+0x16c>)
 8016d68:	fb82 1203 	smull	r1, r2, r2, r3
 8016d6c:	1192      	asrs	r2, r2, #6
 8016d6e:	17db      	asrs	r3, r3, #31
 8016d70:	1ad3      	subs	r3, r2, r3
 8016d72:	e024      	b.n	8016dbe <RegionCommonComputeRxWindowParameters+0x15e>
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	4619      	mov	r1, r3
 8016d7a:	69bb      	ldr	r3, [r7, #24]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	68fa      	ldr	r2, [r7, #12]
 8016d80:	fb02 f303 	mul.w	r3, r2, r3
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d007      	beq.n	8016d98 <RegionCommonComputeRxWindowParameters+0x138>
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	68fa      	ldr	r2, [r7, #12]
 8016d8e:	fb02 f303 	mul.w	r3, r2, r3
 8016d92:	3301      	adds	r3, #1
 8016d94:	085b      	lsrs	r3, r3, #1
 8016d96:	e005      	b.n	8016da4 <RegionCommonComputeRxWindowParameters+0x144>
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	68fa      	ldr	r2, [r7, #12]
 8016d9e:	fb02 f303 	mul.w	r3, r2, r3
 8016da2:	085b      	lsrs	r3, r3, #1
 8016da4:	1acb      	subs	r3, r1, r3
 8016da6:	683a      	ldr	r2, [r7, #0]
 8016da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016dac:	fb01 f202 	mul.w	r2, r1, r2
 8016db0:	1a9b      	subs	r3, r3, r2
 8016db2:	4a06      	ldr	r2, [pc, #24]	; (8016dcc <RegionCommonComputeRxWindowParameters+0x16c>)
 8016db4:	fb82 1203 	smull	r1, r2, r2, r3
 8016db8:	1192      	asrs	r2, r2, #6
 8016dba:	17db      	asrs	r3, r3, #31
 8016dbc:	1ad3      	subs	r3, r2, r3
 8016dbe:	69fa      	ldr	r2, [r7, #28]
 8016dc0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016dc2:	bf00      	nop
 8016dc4:	3714      	adds	r7, #20
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bc80      	pop	{r7}
 8016dca:	4770      	bx	lr
 8016dcc:	10624dd3 	.word	0x10624dd3

08016dd0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b086      	sub	sp, #24
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
 8016ddc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016dde:	2300      	movs	r3, #0
 8016de0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016de6:	005b      	lsls	r3, r3, #1
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7e9 ffc5 	bl	8000d78 <__aeabi_ui2f>
 8016dee:	4603      	mov	r3, r0
 8016df0:	4619      	mov	r1, r3
 8016df2:	68b8      	ldr	r0, [r7, #8]
 8016df4:	f7e9 ff0e 	bl	8000c14 <__aeabi_fsub>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	6879      	ldr	r1, [r7, #4]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7e9 ff09 	bl	8000c14 <__aeabi_fsub>
 8016e02:	4603      	mov	r3, r0
 8016e04:	4618      	mov	r0, r3
 8016e06:	f7e9 fb77 	bl	80004f8 <__aeabi_f2d>
 8016e0a:	4602      	mov	r2, r0
 8016e0c:	460b      	mov	r3, r1
 8016e0e:	4610      	mov	r0, r2
 8016e10:	4619      	mov	r1, r3
 8016e12:	f009 f8d5 	bl	801ffc0 <floor>
 8016e16:	4602      	mov	r2, r0
 8016e18:	460b      	mov	r3, r1
 8016e1a:	4610      	mov	r0, r2
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	f7e9 fe5d 	bl	8000adc <__aeabi_d2iz>
 8016e22:	4603      	mov	r3, r0
 8016e24:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3718      	adds	r7, #24
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016e32:	b590      	push	{r4, r7, lr}
 8016e34:	b087      	sub	sp, #28
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	60f8      	str	r0, [r7, #12]
 8016e3a:	60b9      	str	r1, [r7, #8]
 8016e3c:	607a      	str	r2, [r7, #4]
 8016e3e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016e40:	2300      	movs	r3, #0
 8016e42:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016e44:	2300      	movs	r3, #0
 8016e46:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016e48:	2300      	movs	r3, #0
 8016e4a:	757b      	strb	r3, [r7, #21]
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	753b      	strb	r3, [r7, #20]
 8016e50:	e09c      	b.n	8016f8c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016e52:	2300      	movs	r3, #0
 8016e54:	74fb      	strb	r3, [r7, #19]
 8016e56:	e08f      	b.n	8016f78 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	685a      	ldr	r2, [r3, #4]
 8016e5c:	7d3b      	ldrb	r3, [r7, #20]
 8016e5e:	005b      	lsls	r3, r3, #1
 8016e60:	4413      	add	r3, r2
 8016e62:	881b      	ldrh	r3, [r3, #0]
 8016e64:	461a      	mov	r2, r3
 8016e66:	7cfb      	ldrb	r3, [r7, #19]
 8016e68:	fa42 f303 	asr.w	r3, r2, r3
 8016e6c:	f003 0301 	and.w	r3, r3, #1
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d07e      	beq.n	8016f72 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	689a      	ldr	r2, [r3, #8]
 8016e78:	7d79      	ldrb	r1, [r7, #21]
 8016e7a:	7cfb      	ldrb	r3, [r7, #19]
 8016e7c:	440b      	add	r3, r1
 8016e7e:	4619      	mov	r1, r3
 8016e80:	460b      	mov	r3, r1
 8016e82:	005b      	lsls	r3, r3, #1
 8016e84:	440b      	add	r3, r1
 8016e86:	009b      	lsls	r3, r3, #2
 8016e88:	4413      	add	r3, r2
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d06b      	beq.n	8016f68 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	781b      	ldrb	r3, [r3, #0]
 8016e94:	f083 0301 	eor.w	r3, r3, #1
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d011      	beq.n	8016ec2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00d      	beq.n	8016ec2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	695a      	ldr	r2, [r3, #20]
 8016eaa:	7d3b      	ldrb	r3, [r7, #20]
 8016eac:	005b      	lsls	r3, r3, #1
 8016eae:	4413      	add	r3, r2
 8016eb0:	881b      	ldrh	r3, [r3, #0]
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	7cfb      	ldrb	r3, [r7, #19]
 8016eb6:	fa42 f303 	asr.w	r3, r2, r3
 8016eba:	f003 0301 	and.w	r3, r3, #1
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d054      	beq.n	8016f6c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	785b      	ldrb	r3, [r3, #1]
 8016ec6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	689a      	ldr	r2, [r3, #8]
 8016ecc:	7d79      	ldrb	r1, [r7, #21]
 8016ece:	7cfb      	ldrb	r3, [r7, #19]
 8016ed0:	440b      	add	r3, r1
 8016ed2:	4619      	mov	r1, r3
 8016ed4:	460b      	mov	r3, r1
 8016ed6:	005b      	lsls	r3, r3, #1
 8016ed8:	440b      	add	r3, r1
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	4413      	add	r3, r2
 8016ede:	7a1b      	ldrb	r3, [r3, #8]
 8016ee0:	f343 0303 	sbfx	r3, r3, #0, #4
 8016ee4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016ee6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	689a      	ldr	r2, [r3, #8]
 8016eec:	7d79      	ldrb	r1, [r7, #21]
 8016eee:	7cfb      	ldrb	r3, [r7, #19]
 8016ef0:	440b      	add	r3, r1
 8016ef2:	4619      	mov	r1, r3
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	005b      	lsls	r3, r3, #1
 8016ef8:	440b      	add	r3, r1
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	4413      	add	r3, r2
 8016efe:	7a1b      	ldrb	r3, [r3, #8]
 8016f00:	f343 1303 	sbfx	r3, r3, #4, #4
 8016f04:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016f06:	461a      	mov	r2, r3
 8016f08:	4621      	mov	r1, r4
 8016f0a:	f7ff fbe8 	bl	80166de <RegionCommonValueInRange>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d02d      	beq.n	8016f70 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	68da      	ldr	r2, [r3, #12]
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	6899      	ldr	r1, [r3, #8]
 8016f1c:	7d78      	ldrb	r0, [r7, #21]
 8016f1e:	7cfb      	ldrb	r3, [r7, #19]
 8016f20:	4403      	add	r3, r0
 8016f22:	4618      	mov	r0, r3
 8016f24:	4603      	mov	r3, r0
 8016f26:	005b      	lsls	r3, r3, #1
 8016f28:	4403      	add	r3, r0
 8016f2a:	009b      	lsls	r3, r3, #2
 8016f2c:	440b      	add	r3, r1
 8016f2e:	7a5b      	ldrb	r3, [r3, #9]
 8016f30:	4619      	mov	r1, r3
 8016f32:	460b      	mov	r3, r1
 8016f34:	005b      	lsls	r3, r3, #1
 8016f36:	440b      	add	r3, r1
 8016f38:	00db      	lsls	r3, r3, #3
 8016f3a:	4413      	add	r3, r2
 8016f3c:	7d1b      	ldrb	r3, [r3, #20]
 8016f3e:	f083 0301 	eor.w	r3, r3, #1
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d003      	beq.n	8016f50 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016f48:	7dbb      	ldrb	r3, [r7, #22]
 8016f4a:	3301      	adds	r3, #1
 8016f4c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016f4e:	e010      	b.n	8016f72 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016f50:	7dfb      	ldrb	r3, [r7, #23]
 8016f52:	1c5a      	adds	r2, r3, #1
 8016f54:	75fa      	strb	r2, [r7, #23]
 8016f56:	461a      	mov	r2, r3
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	4413      	add	r3, r2
 8016f5c:	7d79      	ldrb	r1, [r7, #21]
 8016f5e:	7cfa      	ldrb	r2, [r7, #19]
 8016f60:	440a      	add	r2, r1
 8016f62:	b2d2      	uxtb	r2, r2
 8016f64:	701a      	strb	r2, [r3, #0]
 8016f66:	e004      	b.n	8016f72 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016f68:	bf00      	nop
 8016f6a:	e002      	b.n	8016f72 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016f6c:	bf00      	nop
 8016f6e:	e000      	b.n	8016f72 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016f70:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016f72:	7cfb      	ldrb	r3, [r7, #19]
 8016f74:	3301      	adds	r3, #1
 8016f76:	74fb      	strb	r3, [r7, #19]
 8016f78:	7cfb      	ldrb	r3, [r7, #19]
 8016f7a:	2b0f      	cmp	r3, #15
 8016f7c:	f67f af6c 	bls.w	8016e58 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016f80:	7d7b      	ldrb	r3, [r7, #21]
 8016f82:	3310      	adds	r3, #16
 8016f84:	757b      	strb	r3, [r7, #21]
 8016f86:	7d3b      	ldrb	r3, [r7, #20]
 8016f88:	3301      	adds	r3, #1
 8016f8a:	753b      	strb	r3, [r7, #20]
 8016f8c:	7d7b      	ldrb	r3, [r7, #21]
 8016f8e:	b29a      	uxth	r2, r3
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	8a1b      	ldrh	r3, [r3, #16]
 8016f94:	429a      	cmp	r2, r3
 8016f96:	f4ff af5c 	bcc.w	8016e52 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	7dfa      	ldrb	r2, [r7, #23]
 8016f9e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	7dba      	ldrb	r2, [r7, #22]
 8016fa4:	701a      	strb	r2, [r3, #0]
}
 8016fa6:	bf00      	nop
 8016fa8:	371c      	adds	r7, #28
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd90      	pop	{r4, r7, pc}

08016fae <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fb0:	b08b      	sub	sp, #44	; 0x2c
 8016fb2:	af04      	add	r7, sp, #16
 8016fb4:	60f8      	str	r0, [r7, #12]
 8016fb6:	60b9      	str	r1, [r7, #8]
 8016fb8:	607a      	str	r2, [r7, #4]
 8016fba:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f005 fd55 	bl	801ca70 <UTIL_TIMER_GetElapsedTime>
 8016fc6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	697b      	ldr	r3, [r7, #20]
 8016fce:	1ad2      	subs	r2, r2, r3
 8016fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fd2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	685b      	ldr	r3, [r3, #4]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d004      	beq.n	8016ff2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016fec:	697a      	ldr	r2, [r7, #20]
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d32b      	bcc.n	801704a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	69db      	ldr	r3, [r3, #28]
 8016ffc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017002:	68dd      	ldr	r5, [r3, #12]
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	7a5e      	ldrb	r6, [r3, #9]
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	7d1b      	ldrb	r3, [r3, #20]
 8017012:	68fa      	ldr	r2, [r7, #12]
 8017014:	6992      	ldr	r2, [r2, #24]
 8017016:	9203      	str	r2, [sp, #12]
 8017018:	68fa      	ldr	r2, [r7, #12]
 801701a:	f10d 0e04 	add.w	lr, sp, #4
 801701e:	320c      	adds	r2, #12
 8017020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017024:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017028:	9300      	str	r3, [sp, #0]
 801702a:	4663      	mov	r3, ip
 801702c:	4632      	mov	r2, r6
 801702e:	4629      	mov	r1, r5
 8017030:	4620      	mov	r0, r4
 8017032:	f7ff fc25 	bl	8016880 <RegionCommonUpdateBandTimeOff>
 8017036:	4602      	mov	r2, r0
 8017038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801703a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	69d8      	ldr	r0, [r3, #28]
 8017040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017042:	683a      	ldr	r2, [r7, #0]
 8017044:	6879      	ldr	r1, [r7, #4]
 8017046:	f7ff fef4 	bl	8016e32 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d004      	beq.n	801705c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017054:	2200      	movs	r2, #0
 8017056:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017058:	2300      	movs	r3, #0
 801705a:	e006      	b.n	801706a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d001      	beq.n	8017068 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017064:	230b      	movs	r3, #11
 8017066:	e000      	b.n	801706a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017068:	230c      	movs	r3, #12
    }
}
 801706a:	4618      	mov	r0, r3
 801706c:	371c      	adds	r7, #28
 801706e:	46bd      	mov	sp, r7
 8017070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017072 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017072:	b5b0      	push	{r4, r5, r7, lr}
 8017074:	b086      	sub	sp, #24
 8017076:	af02      	add	r7, sp, #8
 8017078:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	781b      	ldrb	r3, [r3, #0]
 801707e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f993 2000 	ldrsb.w	r2, [r3]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801708c:	429a      	cmp	r2, r3
 801708e:	d103      	bne.n	8017098 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017096:	e026      	b.n	80170e6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017098:	7bfb      	ldrb	r3, [r7, #15]
 801709a:	3b01      	subs	r3, #1
 801709c:	b2db      	uxtb	r3, r3
 801709e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80170a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d019      	beq.n	80170e2 <RegionCommonGetNextLowerTxDr+0x70>
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	78d8      	ldrb	r0, [r3, #3]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	6859      	ldr	r1, [r3, #4]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80170c2:	687a      	ldr	r2, [r7, #4]
 80170c4:	6892      	ldr	r2, [r2, #8]
 80170c6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80170ca:	9201      	str	r2, [sp, #4]
 80170cc:	9300      	str	r3, [sp, #0]
 80170ce:	462b      	mov	r3, r5
 80170d0:	4622      	mov	r2, r4
 80170d2:	f7ff fa92 	bl	80165fa <RegionCommonChanVerifyDr>
 80170d6:	4603      	mov	r3, r0
 80170d8:	f083 0301 	eor.w	r3, r3, #1
 80170dc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d1da      	bne.n	8017098 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80170e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3710      	adds	r7, #16
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bdb0      	pop	{r4, r5, r7, pc}

080170ee <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80170ee:	b480      	push	{r7}
 80170f0:	b083      	sub	sp, #12
 80170f2:	af00      	add	r7, sp, #0
 80170f4:	4603      	mov	r3, r0
 80170f6:	460a      	mov	r2, r1
 80170f8:	71fb      	strb	r3, [r7, #7]
 80170fa:	4613      	mov	r3, r2
 80170fc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80170fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017106:	4293      	cmp	r3, r2
 8017108:	bfb8      	it	lt
 801710a:	4613      	movlt	r3, r2
 801710c:	b25b      	sxtb	r3, r3
}
 801710e:	4618      	mov	r0, r3
 8017110:	370c      	adds	r7, #12
 8017112:	46bd      	mov	sp, r7
 8017114:	bc80      	pop	{r7}
 8017116:	4770      	bx	lr

08017118 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017118:	b480      	push	{r7}
 801711a:	b083      	sub	sp, #12
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	009b      	lsls	r3, r3, #2
 8017126:	683a      	ldr	r2, [r7, #0]
 8017128:	4413      	add	r3, r2
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	4a07      	ldr	r2, [pc, #28]	; (801714c <RegionCommonGetBandwidth+0x34>)
 801712e:	4293      	cmp	r3, r2
 8017130:	d004      	beq.n	801713c <RegionCommonGetBandwidth+0x24>
 8017132:	4a07      	ldr	r2, [pc, #28]	; (8017150 <RegionCommonGetBandwidth+0x38>)
 8017134:	4293      	cmp	r3, r2
 8017136:	d003      	beq.n	8017140 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017138:	2300      	movs	r3, #0
 801713a:	e002      	b.n	8017142 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801713c:	2301      	movs	r3, #1
 801713e:	e000      	b.n	8017142 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017140:	2302      	movs	r3, #2
    }
}
 8017142:	4618      	mov	r0, r3
 8017144:	370c      	adds	r7, #12
 8017146:	46bd      	mov	sp, r7
 8017148:	bc80      	pop	{r7}
 801714a:	4770      	bx	lr
 801714c:	0003d090 	.word	0x0003d090
 8017150:	0007a120 	.word	0x0007a120

08017154 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	4603      	mov	r3, r0
 801715c:	6039      	str	r1, [r7, #0]
 801715e:	71fb      	strb	r3, [r7, #7]
 8017160:	4613      	mov	r3, r2
 8017162:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017164:	bf00      	nop
 8017166:	370c      	adds	r7, #12
 8017168:	46bd      	mov	sp, r7
 801716a:	bc80      	pop	{r7}
 801716c:	4770      	bx	lr

0801716e <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801716e:	b480      	push	{r7}
 8017170:	b083      	sub	sp, #12
 8017172:	af00      	add	r7, sp, #0
 8017174:	6078      	str	r0, [r7, #4]
 8017176:	460b      	mov	r3, r1
 8017178:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 801717a:	bf00      	nop
 801717c:	370c      	adds	r7, #12
 801717e:	46bd      	mov	sp, r7
 8017180:	bc80      	pop	{r7}
 8017182:	4770      	bx	lr

08017184 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b082      	sub	sp, #8
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801718e:	4b2d      	ldr	r3, [pc, #180]	; (8017244 <VerifyRfFreq+0xc0>)
 8017190:	6a1b      	ldr	r3, [r3, #32]
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	4798      	blx	r3
 8017196:	4603      	mov	r3, r0
 8017198:	f083 0301 	eor.w	r3, r3, #1
 801719c:	b2db      	uxtb	r3, r3
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d001      	beq.n	80171a6 <VerifyRfFreq+0x22>
    {
        return false;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e04a      	b.n	801723c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	4a27      	ldr	r2, [pc, #156]	; (8017248 <VerifyRfFreq+0xc4>)
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d307      	bcc.n	80171be <VerifyRfFreq+0x3a>
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	4a26      	ldr	r2, [pc, #152]	; (801724c <VerifyRfFreq+0xc8>)
 80171b2:	4293      	cmp	r3, r2
 80171b4:	d803      	bhi.n	80171be <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	2202      	movs	r2, #2
 80171ba:	701a      	strb	r2, [r3, #0]
 80171bc:	e03d      	b.n	801723a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	4a22      	ldr	r2, [pc, #136]	; (801724c <VerifyRfFreq+0xc8>)
 80171c2:	4293      	cmp	r3, r2
 80171c4:	d907      	bls.n	80171d6 <VerifyRfFreq+0x52>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	4a21      	ldr	r2, [pc, #132]	; (8017250 <VerifyRfFreq+0xcc>)
 80171ca:	4293      	cmp	r3, r2
 80171cc:	d803      	bhi.n	80171d6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	2200      	movs	r2, #0
 80171d2:	701a      	strb	r2, [r3, #0]
 80171d4:	e031      	b.n	801723a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	4a1d      	ldr	r2, [pc, #116]	; (8017250 <VerifyRfFreq+0xcc>)
 80171da:	4293      	cmp	r3, r2
 80171dc:	d907      	bls.n	80171ee <VerifyRfFreq+0x6a>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	4a1c      	ldr	r2, [pc, #112]	; (8017254 <VerifyRfFreq+0xd0>)
 80171e2:	4293      	cmp	r3, r2
 80171e4:	d803      	bhi.n	80171ee <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	2201      	movs	r2, #1
 80171ea:	701a      	strb	r2, [r3, #0]
 80171ec:	e025      	b.n	801723a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4a19      	ldr	r2, [pc, #100]	; (8017258 <VerifyRfFreq+0xd4>)
 80171f2:	4293      	cmp	r3, r2
 80171f4:	d907      	bls.n	8017206 <VerifyRfFreq+0x82>
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	4a18      	ldr	r2, [pc, #96]	; (801725c <VerifyRfFreq+0xd8>)
 80171fa:	4293      	cmp	r3, r2
 80171fc:	d803      	bhi.n	8017206 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	2205      	movs	r2, #5
 8017202:	701a      	strb	r2, [r3, #0]
 8017204:	e019      	b.n	801723a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	4a15      	ldr	r2, [pc, #84]	; (8017260 <VerifyRfFreq+0xdc>)
 801720a:	4293      	cmp	r3, r2
 801720c:	d907      	bls.n	801721e <VerifyRfFreq+0x9a>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	4a14      	ldr	r2, [pc, #80]	; (8017264 <VerifyRfFreq+0xe0>)
 8017212:	4293      	cmp	r3, r2
 8017214:	d803      	bhi.n	801721e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	2203      	movs	r2, #3
 801721a:	701a      	strb	r2, [r3, #0]
 801721c:	e00d      	b.n	801723a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	4a11      	ldr	r2, [pc, #68]	; (8017268 <VerifyRfFreq+0xe4>)
 8017222:	4293      	cmp	r3, r2
 8017224:	d307      	bcc.n	8017236 <VerifyRfFreq+0xb2>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	4a10      	ldr	r2, [pc, #64]	; (801726c <VerifyRfFreq+0xe8>)
 801722a:	4293      	cmp	r3, r2
 801722c:	d803      	bhi.n	8017236 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	2204      	movs	r2, #4
 8017232:	701a      	strb	r2, [r3, #0]
 8017234:	e001      	b.n	801723a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8017236:	2300      	movs	r3, #0
 8017238:	e000      	b.n	801723c <VerifyRfFreq+0xb8>
    }
    return true;
 801723a:	2301      	movs	r3, #1
}
 801723c:	4618      	mov	r0, r3
 801723e:	3708      	adds	r7, #8
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	080206a0 	.word	0x080206a0
 8017248:	337055c0 	.word	0x337055c0
 801724c:	338eda3f 	.word	0x338eda3f
 8017250:	33bca100 	.word	0x33bca100
 8017254:	33c5c8c0 	.word	0x33c5c8c0
 8017258:	33c74f5f 	.word	0x33c74f5f
 801725c:	33cef080 	.word	0x33cef080
 8017260:	33d1fdbf 	.word	0x33d1fdbf
 8017264:	33d5ce50 	.word	0x33d5ce50
 8017268:	33d691a0 	.word	0x33d691a0
 801726c:	33db2580 	.word	0x33db2580

08017270 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017270:	b590      	push	{r4, r7, lr}
 8017272:	b08b      	sub	sp, #44	; 0x2c
 8017274:	af04      	add	r7, sp, #16
 8017276:	4603      	mov	r3, r0
 8017278:	460a      	mov	r2, r1
 801727a:	71fb      	strb	r3, [r7, #7]
 801727c:	4613      	mov	r3, r2
 801727e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017284:	4a1f      	ldr	r2, [pc, #124]	; (8017304 <GetTimeOnAir+0x94>)
 8017286:	5cd3      	ldrb	r3, [r2, r3]
 8017288:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801728a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801728e:	491e      	ldr	r1, [pc, #120]	; (8017308 <GetTimeOnAir+0x98>)
 8017290:	4618      	mov	r0, r3
 8017292:	f7ff ff41 	bl	8017118 <RegionCommonGetBandwidth>
 8017296:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017298:	2300      	movs	r3, #0
 801729a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801729c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80172a0:	2b07      	cmp	r3, #7
 80172a2:	d118      	bne.n	80172d6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80172a4:	4b19      	ldr	r3, [pc, #100]	; (801730c <GetTimeOnAir+0x9c>)
 80172a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80172a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80172b0:	fb02 f303 	mul.w	r3, r2, r3
 80172b4:	4619      	mov	r1, r3
 80172b6:	88bb      	ldrh	r3, [r7, #4]
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	2201      	movs	r2, #1
 80172bc:	9203      	str	r2, [sp, #12]
 80172be:	9302      	str	r3, [sp, #8]
 80172c0:	2300      	movs	r3, #0
 80172c2:	9301      	str	r3, [sp, #4]
 80172c4:	2305      	movs	r3, #5
 80172c6:	9300      	str	r3, [sp, #0]
 80172c8:	2300      	movs	r3, #0
 80172ca:	460a      	mov	r2, r1
 80172cc:	68f9      	ldr	r1, [r7, #12]
 80172ce:	2000      	movs	r0, #0
 80172d0:	47a0      	blx	r4
 80172d2:	6178      	str	r0, [r7, #20]
 80172d4:	e011      	b.n	80172fa <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80172d6:	4b0d      	ldr	r3, [pc, #52]	; (801730c <GetTimeOnAir+0x9c>)
 80172d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80172da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80172de:	88bb      	ldrh	r3, [r7, #4]
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	2101      	movs	r1, #1
 80172e4:	9103      	str	r1, [sp, #12]
 80172e6:	9302      	str	r3, [sp, #8]
 80172e8:	2300      	movs	r3, #0
 80172ea:	9301      	str	r3, [sp, #4]
 80172ec:	2308      	movs	r3, #8
 80172ee:	9300      	str	r3, [sp, #0]
 80172f0:	2301      	movs	r3, #1
 80172f2:	68f9      	ldr	r1, [r7, #12]
 80172f4:	2001      	movs	r0, #1
 80172f6:	47a0      	blx	r4
 80172f8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80172fa:	697b      	ldr	r3, [r7, #20]
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	371c      	adds	r7, #28
 8017300:	46bd      	mov	sp, r7
 8017302:	bd90      	pop	{r4, r7, pc}
 8017304:	08020668 	.word	0x08020668
 8017308:	08020670 	.word	0x08020670
 801730c:	080206a0 	.word	0x080206a0

08017310 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b088      	sub	sp, #32
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017318:	2300      	movs	r3, #0
 801731a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	781b      	ldrb	r3, [r3, #0]
 8017320:	3b01      	subs	r3, #1
 8017322:	2b38      	cmp	r3, #56	; 0x38
 8017324:	f200 8128 	bhi.w	8017578 <RegionEU868GetPhyParam+0x268>
 8017328:	a201      	add	r2, pc, #4	; (adr r2, 8017330 <RegionEU868GetPhyParam+0x20>)
 801732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801732e:	bf00      	nop
 8017330:	08017415 	.word	0x08017415
 8017334:	0801741b 	.word	0x0801741b
 8017338:	08017579 	.word	0x08017579
 801733c:	08017579 	.word	0x08017579
 8017340:	08017579 	.word	0x08017579
 8017344:	08017421 	.word	0x08017421
 8017348:	08017579 	.word	0x08017579
 801734c:	0801745b 	.word	0x0801745b
 8017350:	08017579 	.word	0x08017579
 8017354:	08017461 	.word	0x08017461
 8017358:	08017467 	.word	0x08017467
 801735c:	0801746d 	.word	0x0801746d
 8017360:	08017473 	.word	0x08017473
 8017364:	08017483 	.word	0x08017483
 8017368:	08017493 	.word	0x08017493
 801736c:	08017499 	.word	0x08017499
 8017370:	080174a1 	.word	0x080174a1
 8017374:	080174a9 	.word	0x080174a9
 8017378:	080174b1 	.word	0x080174b1
 801737c:	080174b9 	.word	0x080174b9
 8017380:	080174c1 	.word	0x080174c1
 8017384:	080174c9 	.word	0x080174c9
 8017388:	080174dd 	.word	0x080174dd
 801738c:	080174e3 	.word	0x080174e3
 8017390:	080174e9 	.word	0x080174e9
 8017394:	080174ef 	.word	0x080174ef
 8017398:	080174fb 	.word	0x080174fb
 801739c:	08017507 	.word	0x08017507
 80173a0:	0801750d 	.word	0x0801750d
 80173a4:	08017515 	.word	0x08017515
 80173a8:	0801751b 	.word	0x0801751b
 80173ac:	08017521 	.word	0x08017521
 80173b0:	08017529 	.word	0x08017529
 80173b4:	08017427 	.word	0x08017427
 80173b8:	08017579 	.word	0x08017579
 80173bc:	08017579 	.word	0x08017579
 80173c0:	08017579 	.word	0x08017579
 80173c4:	08017579 	.word	0x08017579
 80173c8:	08017579 	.word	0x08017579
 80173cc:	08017579 	.word	0x08017579
 80173d0:	08017579 	.word	0x08017579
 80173d4:	08017579 	.word	0x08017579
 80173d8:	08017579 	.word	0x08017579
 80173dc:	08017579 	.word	0x08017579
 80173e0:	08017579 	.word	0x08017579
 80173e4:	08017579 	.word	0x08017579
 80173e8:	08017579 	.word	0x08017579
 80173ec:	0801752f 	.word	0x0801752f
 80173f0:	08017535 	.word	0x08017535
 80173f4:	08017543 	.word	0x08017543
 80173f8:	08017579 	.word	0x08017579
 80173fc:	08017579 	.word	0x08017579
 8017400:	08017549 	.word	0x08017549
 8017404:	0801754f 	.word	0x0801754f
 8017408:	08017579 	.word	0x08017579
 801740c:	08017555 	.word	0x08017555
 8017410:	08017565 	.word	0x08017565
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017414:	2300      	movs	r3, #0
 8017416:	61bb      	str	r3, [r7, #24]
            break;
 8017418:	e0af      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801741a:	2300      	movs	r3, #0
 801741c:	61bb      	str	r3, [r7, #24]
            break;
 801741e:	e0ac      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017420:	2300      	movs	r3, #0
 8017422:	61bb      	str	r3, [r7, #24]
            break;
 8017424:	e0a9      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801742c:	733b      	strb	r3, [r7, #12]
 801742e:	2307      	movs	r3, #7
 8017430:	737b      	strb	r3, [r7, #13]
 8017432:	2300      	movs	r3, #0
 8017434:	73bb      	strb	r3, [r7, #14]
 8017436:	2310      	movs	r3, #16
 8017438:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801743a:	4b53      	ldr	r3, [pc, #332]	; (8017588 <RegionEU868GetPhyParam+0x278>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017442:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017444:	4b50      	ldr	r3, [pc, #320]	; (8017588 <RegionEU868GetPhyParam+0x278>)
 8017446:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017448:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801744a:	f107 030c 	add.w	r3, r7, #12
 801744e:	4618      	mov	r0, r3
 8017450:	f7ff fe0f 	bl	8017072 <RegionCommonGetNextLowerTxDr>
 8017454:	4603      	mov	r3, r0
 8017456:	61bb      	str	r3, [r7, #24]
            break;
 8017458:	e08f      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801745a:	2300      	movs	r3, #0
 801745c:	61bb      	str	r3, [r7, #24]
            break;
 801745e:	e08c      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017460:	2300      	movs	r3, #0
 8017462:	61bb      	str	r3, [r7, #24]
            break;
 8017464:	e089      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017466:	2340      	movs	r3, #64	; 0x40
 8017468:	61bb      	str	r3, [r7, #24]
            break;
 801746a:	e086      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801746c:	2320      	movs	r3, #32
 801746e:	61bb      	str	r3, [r7, #24]
            break;
 8017470:	e083      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017478:	461a      	mov	r2, r3
 801747a:	4b44      	ldr	r3, [pc, #272]	; (801758c <RegionEU868GetPhyParam+0x27c>)
 801747c:	5c9b      	ldrb	r3, [r3, r2]
 801747e:	61bb      	str	r3, [r7, #24]
            break;
 8017480:	e07b      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017488:	461a      	mov	r2, r3
 801748a:	4b41      	ldr	r3, [pc, #260]	; (8017590 <RegionEU868GetPhyParam+0x280>)
 801748c:	5c9b      	ldrb	r3, [r3, r2]
 801748e:	61bb      	str	r3, [r7, #24]
            break;
 8017490:	e073      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017492:	2301      	movs	r3, #1
 8017494:	61bb      	str	r3, [r7, #24]
            break;
 8017496:	e070      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017498:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801749c:	61bb      	str	r3, [r7, #24]
            break;
 801749e:	e06c      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80174a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80174a4:	61bb      	str	r3, [r7, #24]
            break;
 80174a6:	e068      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80174a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80174ac:	61bb      	str	r3, [r7, #24]
            break;
 80174ae:	e064      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80174b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80174b4:	61bb      	str	r3, [r7, #24]
            break;
 80174b6:	e060      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80174b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80174bc:	61bb      	str	r3, [r7, #24]
            break;
 80174be:	e05c      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80174c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80174c4:	61bb      	str	r3, [r7, #24]
            break;
 80174c6:	e058      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80174c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80174cc:	4831      	ldr	r0, [pc, #196]	; (8017594 <RegionEU868GetPhyParam+0x284>)
 80174ce:	f001 f879 	bl	80185c4 <randr>
 80174d2:	4603      	mov	r3, r0
 80174d4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80174d8:	61bb      	str	r3, [r7, #24]
            break;
 80174da:	e04e      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80174dc:	2300      	movs	r3, #0
 80174de:	61bb      	str	r3, [r7, #24]
            break;
 80174e0:	e04b      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80174e2:	4b2d      	ldr	r3, [pc, #180]	; (8017598 <RegionEU868GetPhyParam+0x288>)
 80174e4:	61bb      	str	r3, [r7, #24]
            break;
 80174e6:	e048      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80174e8:	2300      	movs	r3, #0
 80174ea:	61bb      	str	r3, [r7, #24]
            break;
 80174ec:	e045      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80174ee:	4b26      	ldr	r3, [pc, #152]	; (8017588 <RegionEU868GetPhyParam+0x278>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80174f6:	61bb      	str	r3, [r7, #24]
            break;
 80174f8:	e03f      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80174fa:	4b23      	ldr	r3, [pc, #140]	; (8017588 <RegionEU868GetPhyParam+0x278>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017502:	61bb      	str	r3, [r7, #24]
            break;
 8017504:	e039      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017506:	2310      	movs	r3, #16
 8017508:	61bb      	str	r3, [r7, #24]
            break;
 801750a:	e036      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801750c:	4b1e      	ldr	r3, [pc, #120]	; (8017588 <RegionEU868GetPhyParam+0x278>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	61bb      	str	r3, [r7, #24]
            break;
 8017512:	e032      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017514:	2300      	movs	r3, #0
 8017516:	61bb      	str	r3, [r7, #24]
            break;
 8017518:	e02f      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801751a:	2300      	movs	r3, #0
 801751c:	61bb      	str	r3, [r7, #24]
            break;
 801751e:	e02c      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017520:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8017524:	61bb      	str	r3, [r7, #24]
            break;
 8017526:	e028      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017528:	4b1c      	ldr	r3, [pc, #112]	; (801759c <RegionEU868GetPhyParam+0x28c>)
 801752a:	61bb      	str	r3, [r7, #24]
            break;
 801752c:	e025      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801752e:	4b1a      	ldr	r3, [pc, #104]	; (8017598 <RegionEU868GetPhyParam+0x288>)
 8017530:	61bb      	str	r3, [r7, #24]
            break;
 8017532:	e022      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017534:	2311      	movs	r3, #17
 8017536:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017538:	2302      	movs	r3, #2
 801753a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801753c:	2300      	movs	r3, #0
 801753e:	76bb      	strb	r3, [r7, #26]
            break;
 8017540:	e01b      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017542:	2303      	movs	r3, #3
 8017544:	61bb      	str	r3, [r7, #24]
            break;
 8017546:	e018      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017548:	4b13      	ldr	r3, [pc, #76]	; (8017598 <RegionEU868GetPhyParam+0x288>)
 801754a:	61bb      	str	r3, [r7, #24]
            break;
 801754c:	e015      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801754e:	2303      	movs	r3, #3
 8017550:	61bb      	str	r3, [r7, #24]
            break;
 8017552:	e012      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801755a:	461a      	mov	r2, r3
 801755c:	4b10      	ldr	r3, [pc, #64]	; (80175a0 <RegionEU868GetPhyParam+0x290>)
 801755e:	5c9b      	ldrb	r3, [r3, r2]
 8017560:	61bb      	str	r3, [r7, #24]
            break;
 8017562:	e00a      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801756a:	490e      	ldr	r1, [pc, #56]	; (80175a4 <RegionEU868GetPhyParam+0x294>)
 801756c:	4618      	mov	r0, r3
 801756e:	f7ff fdd3 	bl	8017118 <RegionCommonGetBandwidth>
 8017572:	4603      	mov	r3, r0
 8017574:	61bb      	str	r3, [r7, #24]
            break;
 8017576:	e000      	b.n	801757a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8017578:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801757a:	69bb      	ldr	r3, [r7, #24]
 801757c:	61fb      	str	r3, [r7, #28]
 801757e:	69fb      	ldr	r3, [r7, #28]
}
 8017580:	4618      	mov	r0, r3
 8017582:	3720      	adds	r7, #32
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}
 8017588:	20001d6c 	.word	0x20001d6c
 801758c:	08020690 	.word	0x08020690
 8017590:	08020698 	.word	0x08020698
 8017594:	fffffc18 	.word	0xfffffc18
 8017598:	33d3e608 	.word	0x33d3e608
 801759c:	4009999a 	.word	0x4009999a
 80175a0:	08020668 	.word	0x08020668
 80175a4:	08020670 	.word	0x08020670

080175a8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80175a8:	b590      	push	{r4, r7, lr}
 80175aa:	b085      	sub	sp, #20
 80175ac:	af02      	add	r7, sp, #8
 80175ae:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80175b0:	4b11      	ldr	r3, [pc, #68]	; (80175f8 <RegionEU868SetBandTxDone+0x50>)
 80175b2:	681a      	ldr	r2, [r3, #0]
 80175b4:	4b11      	ldr	r3, [pc, #68]	; (80175fc <RegionEU868SetBandTxDone+0x54>)
 80175b6:	6819      	ldr	r1, [r3, #0]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	4618      	mov	r0, r3
 80175be:	4603      	mov	r3, r0
 80175c0:	005b      	lsls	r3, r3, #1
 80175c2:	4403      	add	r3, r0
 80175c4:	009b      	lsls	r3, r3, #2
 80175c6:	440b      	add	r3, r1
 80175c8:	3309      	adds	r3, #9
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	4619      	mov	r1, r3
 80175ce:	460b      	mov	r3, r1
 80175d0:	005b      	lsls	r3, r3, #1
 80175d2:	440b      	add	r3, r1
 80175d4:	00db      	lsls	r3, r3, #3
 80175d6:	18d0      	adds	r0, r2, r3
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6899      	ldr	r1, [r3, #8]
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	785c      	ldrb	r4, [r3, #1]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	691a      	ldr	r2, [r3, #16]
 80175e4:	9200      	str	r2, [sp, #0]
 80175e6:	68db      	ldr	r3, [r3, #12]
 80175e8:	4622      	mov	r2, r4
 80175ea:	f7ff f91b 	bl	8016824 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80175ee:	bf00      	nop
 80175f0:	370c      	adds	r7, #12
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd90      	pop	{r4, r7, pc}
 80175f6:	bf00      	nop
 80175f8:	20001d68 	.word	0x20001d68
 80175fc:	20001d6c 	.word	0x20001d6c

08017600 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b0b0      	sub	sp, #192	; 0xc0
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017608:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801760c:	2290      	movs	r2, #144	; 0x90
 801760e:	2100      	movs	r1, #0
 8017610:	4618      	mov	r0, r3
 8017612:	f005 fdb5 	bl	801d180 <memset>
 8017616:	2364      	movs	r3, #100	; 0x64
 8017618:	863b      	strh	r3, [r7, #48]	; 0x30
 801761a:	2364      	movs	r3, #100	; 0x64
 801761c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017624:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8017628:	230a      	movs	r3, #10
 801762a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801762e:	2364      	movs	r3, #100	; 0x64
 8017630:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8017634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017638:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	7a1b      	ldrb	r3, [r3, #8]
 8017640:	2b02      	cmp	r3, #2
 8017642:	d05e      	beq.n	8017702 <RegionEU868InitDefaults+0x102>
 8017644:	2b02      	cmp	r3, #2
 8017646:	dc6b      	bgt.n	8017720 <RegionEU868InitDefaults+0x120>
 8017648:	2b00      	cmp	r3, #0
 801764a:	d002      	beq.n	8017652 <RegionEU868InitDefaults+0x52>
 801764c:	2b01      	cmp	r3, #1
 801764e:	d03f      	beq.n	80176d0 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017650:	e066      	b.n	8017720 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d063      	beq.n	8017722 <RegionEU868InitDefaults+0x122>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d05f      	beq.n	8017722 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	4a30      	ldr	r2, [pc, #192]	; (8017728 <RegionEU868InitDefaults+0x128>)
 8017668:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	685b      	ldr	r3, [r3, #4]
 801766e:	4a2f      	ldr	r2, [pc, #188]	; (801772c <RegionEU868InitDefaults+0x12c>)
 8017670:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017672:	4b2d      	ldr	r3, [pc, #180]	; (8017728 <RegionEU868InitDefaults+0x128>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	4618      	mov	r0, r3
 8017678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801767c:	2290      	movs	r2, #144	; 0x90
 801767e:	4619      	mov	r1, r3
 8017680:	f000 ffb7 	bl	80185f2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017684:	4b29      	ldr	r3, [pc, #164]	; (801772c <RegionEU868InitDefaults+0x12c>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	4a29      	ldr	r2, [pc, #164]	; (8017730 <RegionEU868InitDefaults+0x130>)
 801768a:	ca07      	ldmia	r2, {r0, r1, r2}
 801768c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017690:	4b26      	ldr	r3, [pc, #152]	; (801772c <RegionEU868InitDefaults+0x12c>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	4a27      	ldr	r2, [pc, #156]	; (8017734 <RegionEU868InitDefaults+0x134>)
 8017696:	330c      	adds	r3, #12
 8017698:	ca07      	ldmia	r2, {r0, r1, r2}
 801769a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801769e:	4b23      	ldr	r3, [pc, #140]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	4a25      	ldr	r2, [pc, #148]	; (8017738 <RegionEU868InitDefaults+0x138>)
 80176a4:	3318      	adds	r3, #24
 80176a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80176a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80176ac:	4b1f      	ldr	r3, [pc, #124]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2207      	movs	r2, #7
 80176b2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80176b6:	4b1d      	ldr	r3, [pc, #116]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80176be:	4b1b      	ldr	r3, [pc, #108]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80176c6:	2201      	movs	r2, #1
 80176c8:	4619      	mov	r1, r3
 80176ca:	f7ff f885 	bl	80167d8 <RegionCommonChanMaskCopy>
 80176ce:	e028      	b.n	8017722 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80176d0:	4b16      	ldr	r3, [pc, #88]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	2200      	movs	r2, #0
 80176d6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80176d8:	4b14      	ldr	r3, [pc, #80]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	2200      	movs	r2, #0
 80176de:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80176e0:	4b12      	ldr	r3, [pc, #72]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2200      	movs	r2, #0
 80176e6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80176e8:	4b10      	ldr	r3, [pc, #64]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80176f0:	4b0e      	ldr	r3, [pc, #56]	; (801772c <RegionEU868InitDefaults+0x12c>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80176f8:	2201      	movs	r2, #1
 80176fa:	4619      	mov	r1, r3
 80176fc:	f7ff f86c 	bl	80167d8 <RegionCommonChanMaskCopy>
            break;
 8017700:	e00f      	b.n	8017722 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017702:	4b0a      	ldr	r3, [pc, #40]	; (801772c <RegionEU868InitDefaults+0x12c>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 801770a:	4b08      	ldr	r3, [pc, #32]	; (801772c <RegionEU868InitDefaults+0x12c>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8017712:	4b06      	ldr	r3, [pc, #24]	; (801772c <RegionEU868InitDefaults+0x12c>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	430a      	orrs	r2, r1
 8017718:	b292      	uxth	r2, r2
 801771a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801771e:	e000      	b.n	8017722 <RegionEU868InitDefaults+0x122>
            break;
 8017720:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017722:	37c0      	adds	r7, #192	; 0xc0
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	20001d68 	.word	0x20001d68
 801772c:	20001d6c 	.word	0x20001d6c
 8017730:	08020188 	.word	0x08020188
 8017734:	08020194 	.word	0x08020194
 8017738:	080201a0 	.word	0x080201a0

0801773c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	460b      	mov	r3, r1
 8017746:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017748:	78fb      	ldrb	r3, [r7, #3]
 801774a:	2b0f      	cmp	r3, #15
 801774c:	d86c      	bhi.n	8017828 <RegionEU868Verify+0xec>
 801774e:	a201      	add	r2, pc, #4	; (adr r2, 8017754 <RegionEU868Verify+0x18>)
 8017750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017754:	08017795 	.word	0x08017795
 8017758:	08017829 	.word	0x08017829
 801775c:	08017829 	.word	0x08017829
 8017760:	08017829 	.word	0x08017829
 8017764:	08017829 	.word	0x08017829
 8017768:	080177ad 	.word	0x080177ad
 801776c:	080177cb 	.word	0x080177cb
 8017770:	080177e9 	.word	0x080177e9
 8017774:	08017829 	.word	0x08017829
 8017778:	08017807 	.word	0x08017807
 801777c:	08017807 	.word	0x08017807
 8017780:	08017829 	.word	0x08017829
 8017784:	08017829 	.word	0x08017829
 8017788:	08017829 	.word	0x08017829
 801778c:	08017829 	.word	0x08017829
 8017790:	08017825 	.word	0x08017825
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017794:	2300      	movs	r3, #0
 8017796:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	f107 020f 	add.w	r2, r7, #15
 80177a0:	4611      	mov	r1, r2
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7ff fcee 	bl	8017184 <VerifyRfFreq>
 80177a8:	4603      	mov	r3, r0
 80177aa:	e03e      	b.n	801782a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f993 3000 	ldrsb.w	r3, [r3]
 80177b2:	2207      	movs	r2, #7
 80177b4:	2100      	movs	r1, #0
 80177b6:	4618      	mov	r0, r3
 80177b8:	f7fe ff91 	bl	80166de <RegionCommonValueInRange>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	bf14      	ite	ne
 80177c2:	2301      	movne	r3, #1
 80177c4:	2300      	moveq	r3, #0
 80177c6:	b2db      	uxtb	r3, r3
 80177c8:	e02f      	b.n	801782a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f993 3000 	ldrsb.w	r3, [r3]
 80177d0:	2205      	movs	r2, #5
 80177d2:	2100      	movs	r1, #0
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7fe ff82 	bl	80166de <RegionCommonValueInRange>
 80177da:	4603      	mov	r3, r0
 80177dc:	2b00      	cmp	r3, #0
 80177de:	bf14      	ite	ne
 80177e0:	2301      	movne	r3, #1
 80177e2:	2300      	moveq	r3, #0
 80177e4:	b2db      	uxtb	r3, r3
 80177e6:	e020      	b.n	801782a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f993 3000 	ldrsb.w	r3, [r3]
 80177ee:	2207      	movs	r2, #7
 80177f0:	2100      	movs	r1, #0
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7fe ff73 	bl	80166de <RegionCommonValueInRange>
 80177f8:	4603      	mov	r3, r0
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	bf14      	ite	ne
 80177fe:	2301      	movne	r3, #1
 8017800:	2300      	moveq	r3, #0
 8017802:	b2db      	uxtb	r3, r3
 8017804:	e011      	b.n	801782a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f993 3000 	ldrsb.w	r3, [r3]
 801780c:	2207      	movs	r2, #7
 801780e:	2100      	movs	r1, #0
 8017810:	4618      	mov	r0, r3
 8017812:	f7fe ff64 	bl	80166de <RegionCommonValueInRange>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	bf14      	ite	ne
 801781c:	2301      	movne	r3, #1
 801781e:	2300      	moveq	r3, #0
 8017820:	b2db      	uxtb	r3, r3
 8017822:	e002      	b.n	801782a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017824:	2301      	movs	r3, #1
 8017826:	e000      	b.n	801782a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017828:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801782a:	4618      	mov	r0, r3
 801782c:	3710      	adds	r7, #16
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop

08017834 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b08a      	sub	sp, #40	; 0x28
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801783c:	2350      	movs	r3, #80	; 0x50
 801783e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	791b      	ldrb	r3, [r3, #4]
 8017846:	2b10      	cmp	r3, #16
 8017848:	d162      	bne.n	8017910 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	330f      	adds	r3, #15
 8017850:	781b      	ldrb	r3, [r3, #0]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d15e      	bne.n	8017914 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017856:	2300      	movs	r3, #0
 8017858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801785c:	2303      	movs	r3, #3
 801785e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017862:	e050      	b.n	8017906 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017868:	2b07      	cmp	r3, #7
 801786a:	d824      	bhi.n	80178b6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	681a      	ldr	r2, [r3, #0]
 8017870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017874:	4413      	add	r3, r2
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801787a:	69ba      	ldr	r2, [r7, #24]
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	6819      	ldr	r1, [r3, #0]
 8017880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017884:	3301      	adds	r3, #1
 8017886:	440b      	add	r3, r1
 8017888:	781b      	ldrb	r3, [r3, #0]
 801788a:	021b      	lsls	r3, r3, #8
 801788c:	4313      	orrs	r3, r2
 801788e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017890:	69ba      	ldr	r2, [r7, #24]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	6819      	ldr	r1, [r3, #0]
 8017896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801789a:	3302      	adds	r3, #2
 801789c:	440b      	add	r3, r1
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	041b      	lsls	r3, r3, #16
 80178a2:	4313      	orrs	r3, r2
 80178a4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80178a6:	69bb      	ldr	r3, [r7, #24]
 80178a8:	2264      	movs	r2, #100	; 0x64
 80178aa:	fb02 f303 	mul.w	r3, r2, r3
 80178ae:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80178b0:	2300      	movs	r3, #0
 80178b2:	61fb      	str	r3, [r7, #28]
 80178b4:	e006      	b.n	80178c4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80178ba:	2300      	movs	r3, #0
 80178bc:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80178c0:	2300      	movs	r3, #0
 80178c2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d00b      	beq.n	80178e2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80178ca:	f107 0318 	add.w	r3, r7, #24
 80178ce:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80178d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80178d4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80178d6:	f107 0310 	add.w	r3, r7, #16
 80178da:	4618      	mov	r0, r3
 80178dc:	f000 fd0e 	bl	80182fc <RegionEU868ChannelAdd>
 80178e0:	e007      	b.n	80178f2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80178e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80178e6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80178e8:	f107 030c 	add.w	r3, r7, #12
 80178ec:	4618      	mov	r0, r3
 80178ee:	f000 fda7 	bl	8018440 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80178f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80178f6:	3303      	adds	r3, #3
 80178f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80178fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017900:	3301      	adds	r3, #1
 8017902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017906:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801790a:	2b0f      	cmp	r3, #15
 801790c:	d9aa      	bls.n	8017864 <RegionEU868ApplyCFList+0x30>
 801790e:	e002      	b.n	8017916 <RegionEU868ApplyCFList+0xe2>
        return;
 8017910:	bf00      	nop
 8017912:	e000      	b.n	8017916 <RegionEU868ApplyCFList+0xe2>
        return;
 8017914:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017916:	3728      	adds	r7, #40	; 0x28
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	791b      	ldrb	r3, [r3, #4]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d002      	beq.n	8017932 <RegionEU868ChanMaskSet+0x16>
 801792c:	2b01      	cmp	r3, #1
 801792e:	d00b      	beq.n	8017948 <RegionEU868ChanMaskSet+0x2c>
 8017930:	e015      	b.n	801795e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017932:	4b0e      	ldr	r3, [pc, #56]	; (801796c <RegionEU868ChanMaskSet+0x50>)
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2201      	movs	r2, #1
 8017940:	4619      	mov	r1, r3
 8017942:	f7fe ff49 	bl	80167d8 <RegionCommonChanMaskCopy>
            break;
 8017946:	e00c      	b.n	8017962 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017948:	4b08      	ldr	r3, [pc, #32]	; (801796c <RegionEU868ChanMaskSet+0x50>)
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	2201      	movs	r2, #1
 8017956:	4619      	mov	r1, r3
 8017958:	f7fe ff3e 	bl	80167d8 <RegionCommonChanMaskCopy>
            break;
 801795c:	e001      	b.n	8017962 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801795e:	2300      	movs	r3, #0
 8017960:	e000      	b.n	8017964 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8017962:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017964:	4618      	mov	r0, r3
 8017966:	3708      	adds	r7, #8
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}
 801796c:	20001d6c 	.word	0x20001d6c

08017970 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b088      	sub	sp, #32
 8017974:	af02      	add	r7, sp, #8
 8017976:	60ba      	str	r2, [r7, #8]
 8017978:	607b      	str	r3, [r7, #4]
 801797a:	4603      	mov	r3, r0
 801797c:	73fb      	strb	r3, [r7, #15]
 801797e:	460b      	mov	r3, r1
 8017980:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017982:	2300      	movs	r3, #0
 8017984:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801798a:	2b07      	cmp	r3, #7
 801798c:	bfa8      	it	ge
 801798e:	2307      	movge	r3, #7
 8017990:	b25a      	sxtb	r2, r3
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801799c:	491e      	ldr	r1, [pc, #120]	; (8017a18 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801799e:	4618      	mov	r0, r3
 80179a0:	f7ff fbba 	bl	8017118 <RegionCommonGetBandwidth>
 80179a4:	4603      	mov	r3, r0
 80179a6:	b2da      	uxtb	r2, r3
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80179b2:	2b07      	cmp	r3, #7
 80179b4:	d10a      	bne.n	80179cc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80179bc:	461a      	mov	r2, r3
 80179be:	4b17      	ldr	r3, [pc, #92]	; (8017a1c <RegionEU868ComputeRxWindowParameters+0xac>)
 80179c0:	5c9b      	ldrb	r3, [r3, r2]
 80179c2:	4618      	mov	r0, r3
 80179c4:	f7ff f93c 	bl	8016c40 <RegionCommonComputeSymbolTimeFsk>
 80179c8:	6178      	str	r0, [r7, #20]
 80179ca:	e011      	b.n	80179f0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80179d2:	461a      	mov	r2, r3
 80179d4:	4b11      	ldr	r3, [pc, #68]	; (8017a1c <RegionEU868ComputeRxWindowParameters+0xac>)
 80179d6:	5c9a      	ldrb	r2, [r3, r2]
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80179de:	4619      	mov	r1, r3
 80179e0:	4b0d      	ldr	r3, [pc, #52]	; (8017a18 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80179e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80179e6:	4619      	mov	r1, r3
 80179e8:	4610      	mov	r0, r2
 80179ea:	f7ff f913 	bl	8016c14 <RegionCommonComputeSymbolTimeLoRa>
 80179ee:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80179f0:	4b0b      	ldr	r3, [pc, #44]	; (8017a20 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80179f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179f4:	4798      	blx	r3
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	3308      	adds	r3, #8
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	320c      	adds	r2, #12
 80179fe:	7bb9      	ldrb	r1, [r7, #14]
 8017a00:	9201      	str	r2, [sp, #4]
 8017a02:	9300      	str	r3, [sp, #0]
 8017a04:	4603      	mov	r3, r0
 8017a06:	68ba      	ldr	r2, [r7, #8]
 8017a08:	6978      	ldr	r0, [r7, #20]
 8017a0a:	f7ff f929 	bl	8016c60 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017a0e:	bf00      	nop
 8017a10:	3718      	adds	r7, #24
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	bf00      	nop
 8017a18:	08020670 	.word	0x08020670
 8017a1c:	08020668 	.word	0x08020668
 8017a20:	080206a0 	.word	0x080206a0

08017a24 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017a24:	b5b0      	push	{r4, r5, r7, lr}
 8017a26:	b090      	sub	sp, #64	; 0x40
 8017a28:	af0a      	add	r7, sp, #40	; 0x28
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	785b      	ldrb	r3, [r3, #1]
 8017a32:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017a34:	2300      	movs	r3, #0
 8017a36:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	685b      	ldr	r3, [r3, #4]
 8017a40:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017a42:	4b5a      	ldr	r3, [pc, #360]	; (8017bac <RegionEU868RxConfig+0x188>)
 8017a44:	685b      	ldr	r3, [r3, #4]
 8017a46:	4798      	blx	r3
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d001      	beq.n	8017a52 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	e0a8      	b.n	8017ba4 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	7cdb      	ldrb	r3, [r3, #19]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d126      	bne.n	8017aa8 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8017a5a:	4b55      	ldr	r3, [pc, #340]	; (8017bb0 <RegionEU868RxConfig+0x18c>)
 8017a5c:	681a      	ldr	r2, [r3, #0]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	4619      	mov	r1, r3
 8017a64:	460b      	mov	r3, r1
 8017a66:	005b      	lsls	r3, r3, #1
 8017a68:	440b      	add	r3, r1
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	4413      	add	r3, r2
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017a72:	4b4f      	ldr	r3, [pc, #316]	; (8017bb0 <RegionEU868RxConfig+0x18c>)
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	4619      	mov	r1, r3
 8017a7c:	460b      	mov	r3, r1
 8017a7e:	005b      	lsls	r3, r3, #1
 8017a80:	440b      	add	r3, r1
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	4413      	add	r3, r2
 8017a86:	3304      	adds	r3, #4
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d00c      	beq.n	8017aa8 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017a8e:	4b48      	ldr	r3, [pc, #288]	; (8017bb0 <RegionEU868RxConfig+0x18c>)
 8017a90:	681a      	ldr	r2, [r3, #0]
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	4619      	mov	r1, r3
 8017a98:	460b      	mov	r3, r1
 8017a9a:	005b      	lsls	r3, r3, #1
 8017a9c:	440b      	add	r3, r1
 8017a9e:	009b      	lsls	r3, r3, #2
 8017aa0:	4413      	add	r3, r2
 8017aa2:	3304      	adds	r3, #4
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017aac:	4a41      	ldr	r2, [pc, #260]	; (8017bb4 <RegionEU868RxConfig+0x190>)
 8017aae:	5cd3      	ldrb	r3, [r2, r3]
 8017ab0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017ab2:	4b3e      	ldr	r3, [pc, #248]	; (8017bac <RegionEU868RxConfig+0x188>)
 8017ab4:	68db      	ldr	r3, [r3, #12]
 8017ab6:	6938      	ldr	r0, [r7, #16]
 8017ab8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017abe:	2b07      	cmp	r3, #7
 8017ac0:	d128      	bne.n	8017b14 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017ac6:	4b39      	ldr	r3, [pc, #228]	; (8017bac <RegionEU868RxConfig+0x188>)
 8017ac8:	699c      	ldr	r4, [r3, #24]
 8017aca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017ad2:	fb02 f303 	mul.w	r3, r2, r3
 8017ad6:	4619      	mov	r1, r3
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	689b      	ldr	r3, [r3, #8]
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	687a      	ldr	r2, [r7, #4]
 8017ae0:	7c92      	ldrb	r2, [r2, #18]
 8017ae2:	7df8      	ldrb	r0, [r7, #23]
 8017ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	9208      	str	r2, [sp, #32]
 8017aea:	2200      	movs	r2, #0
 8017aec:	9207      	str	r2, [sp, #28]
 8017aee:	2200      	movs	r2, #0
 8017af0:	9206      	str	r2, [sp, #24]
 8017af2:	2201      	movs	r2, #1
 8017af4:	9205      	str	r2, [sp, #20]
 8017af6:	2200      	movs	r2, #0
 8017af8:	9204      	str	r2, [sp, #16]
 8017afa:	2200      	movs	r2, #0
 8017afc:	9203      	str	r2, [sp, #12]
 8017afe:	9302      	str	r3, [sp, #8]
 8017b00:	2305      	movs	r3, #5
 8017b02:	9301      	str	r3, [sp, #4]
 8017b04:	4b2c      	ldr	r3, [pc, #176]	; (8017bb8 <RegionEU868RxConfig+0x194>)
 8017b06:	9300      	str	r3, [sp, #0]
 8017b08:	2300      	movs	r3, #0
 8017b0a:	460a      	mov	r2, r1
 8017b0c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017b10:	47a0      	blx	r4
 8017b12:	e024      	b.n	8017b5e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017b14:	2301      	movs	r3, #1
 8017b16:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017b18:	4b24      	ldr	r3, [pc, #144]	; (8017bac <RegionEU868RxConfig+0x188>)
 8017b1a:	699c      	ldr	r4, [r3, #24]
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	789b      	ldrb	r3, [r3, #2]
 8017b20:	461d      	mov	r5, r3
 8017b22:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	689b      	ldr	r3, [r3, #8]
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	687a      	ldr	r2, [r7, #4]
 8017b2e:	7c92      	ldrb	r2, [r2, #18]
 8017b30:	7df8      	ldrb	r0, [r7, #23]
 8017b32:	9209      	str	r2, [sp, #36]	; 0x24
 8017b34:	2201      	movs	r2, #1
 8017b36:	9208      	str	r2, [sp, #32]
 8017b38:	2200      	movs	r2, #0
 8017b3a:	9207      	str	r2, [sp, #28]
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	9206      	str	r2, [sp, #24]
 8017b40:	2200      	movs	r2, #0
 8017b42:	9205      	str	r2, [sp, #20]
 8017b44:	2200      	movs	r2, #0
 8017b46:	9204      	str	r2, [sp, #16]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	9203      	str	r2, [sp, #12]
 8017b4c:	9302      	str	r3, [sp, #8]
 8017b4e:	2308      	movs	r3, #8
 8017b50:	9301      	str	r3, [sp, #4]
 8017b52:	2300      	movs	r3, #0
 8017b54:	9300      	str	r3, [sp, #0]
 8017b56:	2301      	movs	r3, #1
 8017b58:	460a      	mov	r2, r1
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	7c5b      	ldrb	r3, [r3, #17]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d005      	beq.n	8017b72 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b6a:	4a14      	ldr	r2, [pc, #80]	; (8017bbc <RegionEU868RxConfig+0x198>)
 8017b6c:	5cd3      	ldrb	r3, [r2, r3]
 8017b6e:	75bb      	strb	r3, [r7, #22]
 8017b70:	e004      	b.n	8017b7c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b76:	4a12      	ldr	r2, [pc, #72]	; (8017bc0 <RegionEU868RxConfig+0x19c>)
 8017b78:	5cd3      	ldrb	r3, [r2, r3]
 8017b7a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017b7c:	4b0b      	ldr	r3, [pc, #44]	; (8017bac <RegionEU868RxConfig+0x188>)
 8017b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017b80:	7dba      	ldrb	r2, [r7, #22]
 8017b82:	320d      	adds	r2, #13
 8017b84:	b2d1      	uxtb	r1, r2
 8017b86:	7dfa      	ldrb	r2, [r7, #23]
 8017b88:	4610      	mov	r0, r2
 8017b8a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	7cdb      	ldrb	r3, [r3, #19]
 8017b90:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017b94:	6939      	ldr	r1, [r7, #16]
 8017b96:	4618      	mov	r0, r3
 8017b98:	f7ff fadc 	bl	8017154 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	7bfa      	ldrb	r2, [r7, #15]
 8017ba0:	701a      	strb	r2, [r3, #0]
    return true;
 8017ba2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3718      	adds	r7, #24
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bdb0      	pop	{r4, r5, r7, pc}
 8017bac:	080206a0 	.word	0x080206a0
 8017bb0:	20001d6c 	.word	0x20001d6c
 8017bb4:	08020668 	.word	0x08020668
 8017bb8:	00014585 	.word	0x00014585
 8017bbc:	08020698 	.word	0x08020698
 8017bc0:	08020690 	.word	0x08020690

08017bc4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017bc4:	b590      	push	{r4, r7, lr}
 8017bc6:	b093      	sub	sp, #76	; 0x4c
 8017bc8:	af0a      	add	r7, sp, #40	; 0x28
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	4b5d      	ldr	r3, [pc, #372]	; (8017d50 <RegionEU868TxConfig+0x18c>)
 8017bda:	5c9b      	ldrb	r3, [r3, r2]
 8017bdc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017be4:	4b5b      	ldr	r3, [pc, #364]	; (8017d54 <RegionEU868TxConfig+0x190>)
 8017be6:	681a      	ldr	r2, [r3, #0]
 8017be8:	4b5b      	ldr	r3, [pc, #364]	; (8017d58 <RegionEU868TxConfig+0x194>)
 8017bea:	6819      	ldr	r1, [r3, #0]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	781b      	ldrb	r3, [r3, #0]
 8017bf0:	461c      	mov	r4, r3
 8017bf2:	4623      	mov	r3, r4
 8017bf4:	005b      	lsls	r3, r3, #1
 8017bf6:	4423      	add	r3, r4
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	440b      	add	r3, r1
 8017bfc:	3309      	adds	r3, #9
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	4619      	mov	r1, r3
 8017c02:	460b      	mov	r3, r1
 8017c04:	005b      	lsls	r3, r3, #1
 8017c06:	440b      	add	r3, r1
 8017c08:	00db      	lsls	r3, r3, #3
 8017c0a:	4413      	add	r3, r2
 8017c0c:	3302      	adds	r3, #2
 8017c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8017c12:	4619      	mov	r1, r3
 8017c14:	f7ff fa6b 	bl	80170ee <RegionCommonLimitTxPower>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c22:	494e      	ldr	r1, [pc, #312]	; (8017d5c <RegionEU868TxConfig+0x198>)
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7ff fa77 	bl	8017118 <RegionCommonGetBandwidth>
 8017c2a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	6859      	ldr	r1, [r3, #4]
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	689a      	ldr	r2, [r3, #8]
 8017c38:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7ff f8c7 	bl	8016dd0 <RegionCommonComputeTxPower>
 8017c42:	4603      	mov	r3, r0
 8017c44:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017c46:	4b46      	ldr	r3, [pc, #280]	; (8017d60 <RegionEU868TxConfig+0x19c>)
 8017c48:	68da      	ldr	r2, [r3, #12]
 8017c4a:	4b43      	ldr	r3, [pc, #268]	; (8017d58 <RegionEU868TxConfig+0x194>)
 8017c4c:	6819      	ldr	r1, [r3, #0]
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	4618      	mov	r0, r3
 8017c54:	4603      	mov	r3, r0
 8017c56:	005b      	lsls	r3, r3, #1
 8017c58:	4403      	add	r3, r0
 8017c5a:	009b      	lsls	r3, r3, #2
 8017c5c:	440b      	add	r3, r1
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	4618      	mov	r0, r3
 8017c62:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c6a:	2b07      	cmp	r3, #7
 8017c6c:	d124      	bne.n	8017cb8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017c72:	4b3b      	ldr	r3, [pc, #236]	; (8017d60 <RegionEU868TxConfig+0x19c>)
 8017c74:	69dc      	ldr	r4, [r3, #28]
 8017c76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017c7e:	fb02 f303 	mul.w	r3, r2, r3
 8017c82:	461a      	mov	r2, r3
 8017c84:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017c88:	7ff8      	ldrb	r0, [r7, #31]
 8017c8a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017c8e:	9308      	str	r3, [sp, #32]
 8017c90:	2300      	movs	r3, #0
 8017c92:	9307      	str	r3, [sp, #28]
 8017c94:	2300      	movs	r3, #0
 8017c96:	9306      	str	r3, [sp, #24]
 8017c98:	2300      	movs	r3, #0
 8017c9a:	9305      	str	r3, [sp, #20]
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	9304      	str	r3, [sp, #16]
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	9303      	str	r3, [sp, #12]
 8017ca4:	2305      	movs	r3, #5
 8017ca6:	9302      	str	r3, [sp, #8]
 8017ca8:	2300      	movs	r3, #0
 8017caa:	9301      	str	r3, [sp, #4]
 8017cac:	9200      	str	r2, [sp, #0]
 8017cae:	69bb      	ldr	r3, [r7, #24]
 8017cb0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017cb4:	47a0      	blx	r4
 8017cb6:	e01d      	b.n	8017cf4 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8017cb8:	2301      	movs	r3, #1
 8017cba:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017cbc:	4b28      	ldr	r3, [pc, #160]	; (8017d60 <RegionEU868TxConfig+0x19c>)
 8017cbe:	69dc      	ldr	r4, [r3, #28]
 8017cc0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017cc4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017cc8:	7ff8      	ldrb	r0, [r7, #31]
 8017cca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017cce:	9208      	str	r2, [sp, #32]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	9207      	str	r2, [sp, #28]
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	9206      	str	r2, [sp, #24]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	9205      	str	r2, [sp, #20]
 8017cdc:	2201      	movs	r2, #1
 8017cde:	9204      	str	r2, [sp, #16]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	9203      	str	r2, [sp, #12]
 8017ce4:	2208      	movs	r2, #8
 8017ce6:	9202      	str	r2, [sp, #8]
 8017ce8:	2201      	movs	r2, #1
 8017cea:	9201      	str	r2, [sp, #4]
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	69bb      	ldr	r3, [r7, #24]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017cf4:	4b18      	ldr	r3, [pc, #96]	; (8017d58 <RegionEU868TxConfig+0x194>)
 8017cf6:	681a      	ldr	r2, [r3, #0]
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	4619      	mov	r1, r3
 8017cfe:	460b      	mov	r3, r1
 8017d00:	005b      	lsls	r3, r3, #1
 8017d02:	440b      	add	r3, r1
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	4413      	add	r3, r2
 8017d08:	681a      	ldr	r2, [r3, #0]
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d10:	4619      	mov	r1, r3
 8017d12:	4610      	mov	r0, r2
 8017d14:	f7ff fa2b 	bl	801716e <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	899b      	ldrh	r3, [r3, #12]
 8017d22:	4619      	mov	r1, r3
 8017d24:	4610      	mov	r0, r2
 8017d26:	f7ff faa3 	bl	8017270 <GetTimeOnAir>
 8017d2a:	4602      	mov	r2, r0
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017d30:	4b0b      	ldr	r3, [pc, #44]	; (8017d60 <RegionEU868TxConfig+0x19c>)
 8017d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d34:	68fa      	ldr	r2, [r7, #12]
 8017d36:	8992      	ldrh	r2, [r2, #12]
 8017d38:	b2d1      	uxtb	r1, r2
 8017d3a:	7ffa      	ldrb	r2, [r7, #31]
 8017d3c:	4610      	mov	r0, r2
 8017d3e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	7f7a      	ldrb	r2, [r7, #29]
 8017d44:	701a      	strb	r2, [r3, #0]
    return true;
 8017d46:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017d48:	4618      	mov	r0, r3
 8017d4a:	3724      	adds	r7, #36	; 0x24
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	bd90      	pop	{r4, r7, pc}
 8017d50:	08020668 	.word	0x08020668
 8017d54:	20001d68 	.word	0x20001d68
 8017d58:	20001d6c 	.word	0x20001d6c
 8017d5c:	08020670 	.word	0x08020670
 8017d60:	080206a0 	.word	0x080206a0

08017d64 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017d64:	b590      	push	{r4, r7, lr}
 8017d66:	b093      	sub	sp, #76	; 0x4c
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	60f8      	str	r0, [r7, #12]
 8017d6c:	60b9      	str	r1, [r7, #8]
 8017d6e:	607a      	str	r2, [r7, #4]
 8017d70:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017d72:	2307      	movs	r3, #7
 8017d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	601a      	str	r2, [r3, #0]
 8017d80:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017d82:	2300      	movs	r3, #0
 8017d84:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017d92:	e085      	b.n	8017ea0 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	685a      	ldr	r2, [r3, #4]
 8017d98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d9c:	4413      	add	r3, r2
 8017d9e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017da2:	4611      	mov	r1, r2
 8017da4:	4618      	mov	r0, r3
 8017da6:	f7fe fe5b 	bl	8016a60 <RegionCommonParseLinkAdrReq>
 8017daa:	4603      	mov	r3, r0
 8017dac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017db0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d07b      	beq.n	8017eb0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017db8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017dbc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017dc0:	4413      	add	r3, r2
 8017dc2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017dc6:	2307      	movs	r3, #7
 8017dc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017dd0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017dd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d109      	bne.n	8017dee <RegionEU868LinkAdrReq+0x8a>
 8017dda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d106      	bne.n	8017dee <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017de0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017de4:	f023 0301 	bic.w	r3, r3, #1
 8017de8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017dec:	e058      	b.n	8017ea0 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017dee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d003      	beq.n	8017dfe <RegionEU868LinkAdrReq+0x9a>
 8017df6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017dfa:	2b05      	cmp	r3, #5
 8017dfc:	d903      	bls.n	8017e06 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017dfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017e02:	2b06      	cmp	r3, #6
 8017e04:	d906      	bls.n	8017e14 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017e06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017e0a:	f023 0301 	bic.w	r3, r3, #1
 8017e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017e12:	e045      	b.n	8017ea0 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017e14:	2300      	movs	r3, #0
 8017e16:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017e1a:	e03d      	b.n	8017e98 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017e1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017e20:	2b06      	cmp	r3, #6
 8017e22:	d118      	bne.n	8017e56 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017e24:	4b5f      	ldr	r3, [pc, #380]	; (8017fa4 <RegionEU868LinkAdrReq+0x240>)
 8017e26:	6819      	ldr	r1, [r3, #0]
 8017e28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	4413      	add	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	440b      	add	r3, r1
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d028      	beq.n	8017e8e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017e3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017e40:	2201      	movs	r2, #1
 8017e42:	fa02 f303 	lsl.w	r3, r2, r3
 8017e46:	b21a      	sxth	r2, r3
 8017e48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e4a:	b21b      	sxth	r3, r3
 8017e4c:	4313      	orrs	r3, r2
 8017e4e:	b21b      	sxth	r3, r3
 8017e50:	b29b      	uxth	r3, r3
 8017e52:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017e54:	e01b      	b.n	8017e8e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017e56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e58:	461a      	mov	r2, r3
 8017e5a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017e5e:	fa42 f303 	asr.w	r3, r2, r3
 8017e62:	f003 0301 	and.w	r3, r3, #1
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d011      	beq.n	8017e8e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017e6a:	4b4e      	ldr	r3, [pc, #312]	; (8017fa4 <RegionEU868LinkAdrReq+0x240>)
 8017e6c:	6819      	ldr	r1, [r3, #0]
 8017e6e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017e72:	4613      	mov	r3, r2
 8017e74:	005b      	lsls	r3, r3, #1
 8017e76:	4413      	add	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	440b      	add	r3, r1
 8017e7c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d105      	bne.n	8017e8e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017e82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017e86:	f023 0301 	bic.w	r3, r3, #1
 8017e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017e8e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017e92:	3301      	adds	r3, #1
 8017e94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017e98:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017e9c:	2b0f      	cmp	r3, #15
 8017e9e:	d9bd      	bls.n	8017e1c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	7a1b      	ldrb	r3, [r3, #8]
 8017ea4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	f4ff af73 	bcc.w	8017d94 <RegionEU868LinkAdrReq+0x30>
 8017eae:	e000      	b.n	8017eb2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017eb0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017eb2:	2302      	movs	r3, #2
 8017eb4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	7a5b      	ldrb	r3, [r3, #9]
 8017ebc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7ff fa23 	bl	8017310 <RegionEU868GetPhyParam>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8017ece:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017ed2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	7a9b      	ldrb	r3, [r3, #10]
 8017ed8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017eda:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017ede:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017ee0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8017ee4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017ee6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017eea:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017ef2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017efa:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	7b5b      	ldrb	r3, [r3, #13]
 8017f00:	b25b      	sxtb	r3, r3
 8017f02:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017f04:	2310      	movs	r3, #16
 8017f06:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017f08:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017f0c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f10:	b25b      	sxtb	r3, r3
 8017f12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017f16:	2307      	movs	r3, #7
 8017f18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017f1c:	4b21      	ldr	r3, [pc, #132]	; (8017fa4 <RegionEU868LinkAdrReq+0x240>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8017f22:	2307      	movs	r3, #7
 8017f24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017f28:	2300      	movs	r3, #0
 8017f2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017f34:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017f38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017f3c:	1c9a      	adds	r2, r3, #2
 8017f3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017f42:	1c59      	adds	r1, r3, #1
 8017f44:	f107 0010 	add.w	r0, r7, #16
 8017f48:	4623      	mov	r3, r4
 8017f4a:	f7fe fdda 	bl	8016b02 <RegionCommonLinkAdrReqVerifyParams>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017f54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017f58:	2b07      	cmp	r3, #7
 8017f5a:	d10d      	bne.n	8017f78 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017f5c:	4b11      	ldr	r3, [pc, #68]	; (8017fa4 <RegionEU868LinkAdrReq+0x240>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017f64:	220c      	movs	r2, #12
 8017f66:	2100      	movs	r1, #0
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f000 fb7d 	bl	8018668 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017f6e:	4b0d      	ldr	r3, [pc, #52]	; (8017fa4 <RegionEU868LinkAdrReq+0x240>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017f74:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017f78:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017f80:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017f88:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017f92:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017f96:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017f98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	374c      	adds	r7, #76	; 0x4c
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd90      	pop	{r4, r7, pc}
 8017fa4:	20001d6c 	.word	0x20001d6c

08017fa8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b084      	sub	sp, #16
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017fb0:	2307      	movs	r3, #7
 8017fb2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	f107 020e 	add.w	r2, r7, #14
 8017fc0:	4611      	mov	r1, r2
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7ff f8de 	bl	8017184 <VerifyRfFreq>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	f083 0301 	eor.w	r3, r3, #1
 8017fce:	b2db      	uxtb	r3, r3
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d003      	beq.n	8017fdc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017fd4:	7bfb      	ldrb	r3, [r7, #15]
 8017fd6:	f023 0301 	bic.w	r3, r3, #1
 8017fda:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f993 3000 	ldrsb.w	r3, [r3]
 8017fe2:	2207      	movs	r2, #7
 8017fe4:	2100      	movs	r1, #0
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7fe fb79 	bl	80166de <RegionCommonValueInRange>
 8017fec:	4603      	mov	r3, r0
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d103      	bne.n	8017ffa <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8017ff2:	7bfb      	ldrb	r3, [r7, #15]
 8017ff4:	f023 0302 	bic.w	r3, r3, #2
 8017ff8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018000:	2205      	movs	r2, #5
 8018002:	2100      	movs	r1, #0
 8018004:	4618      	mov	r0, r3
 8018006:	f7fe fb6a 	bl	80166de <RegionCommonValueInRange>
 801800a:	4603      	mov	r3, r0
 801800c:	2b00      	cmp	r3, #0
 801800e:	d103      	bne.n	8018018 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018010:	7bfb      	ldrb	r3, [r7, #15]
 8018012:	f023 0304 	bic.w	r3, r3, #4
 8018016:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8018018:	7bfb      	ldrb	r3, [r7, #15]
}
 801801a:	4618      	mov	r0, r3
 801801c:	3710      	adds	r7, #16
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
	...

08018024 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b086      	sub	sp, #24
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801802c:	2303      	movs	r3, #3
 801802e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d114      	bne.n	8018064 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018040:	b2db      	uxtb	r3, r3
 8018042:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018044:	f107 0308 	add.w	r3, r7, #8
 8018048:	4618      	mov	r0, r3
 801804a:	f000 f9f9 	bl	8018440 <RegionEU868ChannelsRemove>
 801804e:	4603      	mov	r3, r0
 8018050:	f083 0301 	eor.w	r3, r3, #1
 8018054:	b2db      	uxtb	r3, r3
 8018056:	2b00      	cmp	r3, #0
 8018058:	d03b      	beq.n	80180d2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801805a:	7dfb      	ldrb	r3, [r7, #23]
 801805c:	f023 0303 	bic.w	r3, r3, #3
 8018060:	75fb      	strb	r3, [r7, #23]
 8018062:	e036      	b.n	80180d2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018070:	b2db      	uxtb	r3, r3
 8018072:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018074:	f107 030c 	add.w	r3, r7, #12
 8018078:	4618      	mov	r0, r3
 801807a:	f000 f93f 	bl	80182fc <RegionEU868ChannelAdd>
 801807e:	4603      	mov	r3, r0
 8018080:	2b06      	cmp	r3, #6
 8018082:	d820      	bhi.n	80180c6 <RegionEU868NewChannelReq+0xa2>
 8018084:	a201      	add	r2, pc, #4	; (adr r2, 801808c <RegionEU868NewChannelReq+0x68>)
 8018086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801808a:	bf00      	nop
 801808c:	080180d1 	.word	0x080180d1
 8018090:	080180c7 	.word	0x080180c7
 8018094:	080180c7 	.word	0x080180c7
 8018098:	080180c7 	.word	0x080180c7
 801809c:	080180a9 	.word	0x080180a9
 80180a0:	080180b3 	.word	0x080180b3
 80180a4:	080180bd 	.word	0x080180bd
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80180a8:	7dfb      	ldrb	r3, [r7, #23]
 80180aa:	f023 0301 	bic.w	r3, r3, #1
 80180ae:	75fb      	strb	r3, [r7, #23]
                break;
 80180b0:	e00f      	b.n	80180d2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80180b2:	7dfb      	ldrb	r3, [r7, #23]
 80180b4:	f023 0302 	bic.w	r3, r3, #2
 80180b8:	75fb      	strb	r3, [r7, #23]
                break;
 80180ba:	e00a      	b.n	80180d2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80180bc:	7dfb      	ldrb	r3, [r7, #23]
 80180be:	f023 0303 	bic.w	r3, r3, #3
 80180c2:	75fb      	strb	r3, [r7, #23]
                break;
 80180c4:	e005      	b.n	80180d2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80180c6:	7dfb      	ldrb	r3, [r7, #23]
 80180c8:	f023 0303 	bic.w	r3, r3, #3
 80180cc:	75fb      	strb	r3, [r7, #23]
                break;
 80180ce:	e000      	b.n	80180d2 <RegionEU868NewChannelReq+0xae>
                break;
 80180d0:	bf00      	nop
            }
        }
    }

    return status;
 80180d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3718      	adds	r7, #24
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop

080180e0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80180e0:	b480      	push	{r7}
 80180e2:	b083      	sub	sp, #12
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80180e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80180ec:	4618      	mov	r0, r3
 80180ee:	370c      	adds	r7, #12
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bc80      	pop	{r7}
 80180f4:	4770      	bx	lr
	...

080180f8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018100:	2303      	movs	r3, #3
 8018102:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018104:	2300      	movs	r3, #0
 8018106:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	f107 020e 	add.w	r2, r7, #14
 8018110:	4611      	mov	r1, r2
 8018112:	4618      	mov	r0, r3
 8018114:	f7ff f836 	bl	8017184 <VerifyRfFreq>
 8018118:	4603      	mov	r3, r0
 801811a:	f083 0301 	eor.w	r3, r3, #1
 801811e:	b2db      	uxtb	r3, r3
 8018120:	2b00      	cmp	r3, #0
 8018122:	d003      	beq.n	801812c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8018124:	7bfb      	ldrb	r3, [r7, #15]
 8018126:	f023 0301 	bic.w	r3, r3, #1
 801812a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801812c:	4b13      	ldr	r3, [pc, #76]	; (801817c <RegionEU868DlChannelReq+0x84>)
 801812e:	681a      	ldr	r2, [r3, #0]
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	781b      	ldrb	r3, [r3, #0]
 8018134:	4619      	mov	r1, r3
 8018136:	460b      	mov	r3, r1
 8018138:	005b      	lsls	r3, r3, #1
 801813a:	440b      	add	r3, r1
 801813c:	009b      	lsls	r3, r3, #2
 801813e:	4413      	add	r3, r2
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d103      	bne.n	801814e <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8018146:	7bfb      	ldrb	r3, [r7, #15]
 8018148:	f023 0302 	bic.w	r3, r3, #2
 801814c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801814e:	7bfb      	ldrb	r3, [r7, #15]
 8018150:	2b03      	cmp	r3, #3
 8018152:	d10d      	bne.n	8018170 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018154:	4b09      	ldr	r3, [pc, #36]	; (801817c <RegionEU868DlChannelReq+0x84>)
 8018156:	6819      	ldr	r1, [r3, #0]
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	781b      	ldrb	r3, [r3, #0]
 801815c:	4618      	mov	r0, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	685a      	ldr	r2, [r3, #4]
 8018162:	4603      	mov	r3, r0
 8018164:	005b      	lsls	r3, r3, #1
 8018166:	4403      	add	r3, r0
 8018168:	009b      	lsls	r3, r3, #2
 801816a:	440b      	add	r3, r1
 801816c:	3304      	adds	r3, #4
 801816e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018174:	4618      	mov	r0, r3
 8018176:	3710      	adds	r7, #16
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}
 801817c:	20001d6c 	.word	0x20001d6c

08018180 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018180:	b480      	push	{r7}
 8018182:	b083      	sub	sp, #12
 8018184:	af00      	add	r7, sp, #0
 8018186:	4603      	mov	r3, r0
 8018188:	460a      	mov	r2, r1
 801818a:	71fb      	strb	r3, [r7, #7]
 801818c:	4613      	mov	r3, r2
 801818e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018190:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8018194:	4618      	mov	r0, r3
 8018196:	370c      	adds	r7, #12
 8018198:	46bd      	mov	sp, r7
 801819a:	bc80      	pop	{r7}
 801819c:	4770      	bx	lr
	...

080181a0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b09a      	sub	sp, #104	; 0x68
 80181a4:	af02      	add	r7, sp, #8
 80181a6:	60f8      	str	r0, [r7, #12]
 80181a8:	60b9      	str	r1, [r7, #8]
 80181aa:	607a      	str	r2, [r7, #4]
 80181ac:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80181ae:	2300      	movs	r3, #0
 80181b0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80181b4:	2300      	movs	r3, #0
 80181b6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80181ba:	2300      	movs	r3, #0
 80181bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80181be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80181c2:	2200      	movs	r2, #0
 80181c4:	601a      	str	r2, [r3, #0]
 80181c6:	605a      	str	r2, [r3, #4]
 80181c8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80181ca:	230c      	movs	r3, #12
 80181cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80181d0:	2307      	movs	r3, #7
 80181d2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80181d4:	4b47      	ldr	r3, [pc, #284]	; (80182f4 <RegionEU868NextChannel+0x154>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80181dc:	2201      	movs	r2, #1
 80181de:	2100      	movs	r1, #0
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7fe facd 	bl	8016780 <RegionCommonCountChannels>
 80181e6:	4603      	mov	r3, r0
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d10a      	bne.n	8018202 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80181ec:	4b41      	ldr	r3, [pc, #260]	; (80182f4 <RegionEU868NextChannel+0x154>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80181f4:	4b3f      	ldr	r3, [pc, #252]	; (80182f4 <RegionEU868NextChannel+0x154>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	f042 0207 	orr.w	r2, r2, #7
 80181fc:	b292      	uxth	r2, r2
 80181fe:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	7a5b      	ldrb	r3, [r3, #9]
 8018206:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801820e:	b2db      	uxtb	r3, r3
 8018210:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018212:	4b38      	ldr	r3, [pc, #224]	; (80182f4 <RegionEU868NextChannel+0x154>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801821a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801821c:	4b35      	ldr	r3, [pc, #212]	; (80182f4 <RegionEU868NextChannel+0x154>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8018222:	4b35      	ldr	r3, [pc, #212]	; (80182f8 <RegionEU868NextChannel+0x158>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018228:	2310      	movs	r3, #16
 801822a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801822c:	f107 0312 	add.w	r3, r7, #18
 8018230:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	685b      	ldr	r3, [r3, #4]
 801823c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	7a9b      	ldrb	r3, [r3, #10]
 8018242:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018246:	2306      	movs	r3, #6
 8018248:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801824c:	68fa      	ldr	r2, [r7, #12]
 801824e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018252:	320c      	adds	r2, #12
 8018254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018258:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	7d1b      	ldrb	r3, [r3, #20]
 8018260:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	8adb      	ldrh	r3, [r3, #22]
 801826e:	4619      	mov	r1, r3
 8018270:	4610      	mov	r0, r2
 8018272:	f7fe fffd 	bl	8017270 <GetTimeOnAir>
 8018276:	4603      	mov	r3, r0
 8018278:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801827a:	f107 0314 	add.w	r3, r7, #20
 801827e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018280:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8018284:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018288:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	9301      	str	r3, [sp, #4]
 8018290:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8018294:	9300      	str	r3, [sp, #0]
 8018296:	460b      	mov	r3, r1
 8018298:	6839      	ldr	r1, [r7, #0]
 801829a:	f7fe fe88 	bl	8016fae <RegionCommonIdentifyChannels>
 801829e:	4603      	mov	r3, r0
 80182a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80182a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d10e      	bne.n	80182ca <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80182ac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80182b0:	3b01      	subs	r3, #1
 80182b2:	4619      	mov	r1, r3
 80182b4:	2000      	movs	r0, #0
 80182b6:	f000 f985 	bl	80185c4 <randr>
 80182ba:	4603      	mov	r3, r0
 80182bc:	3360      	adds	r3, #96	; 0x60
 80182be:	443b      	add	r3, r7
 80182c0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	701a      	strb	r2, [r3, #0]
 80182c8:	e00e      	b.n	80182e8 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80182ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80182ce:	2b0c      	cmp	r3, #12
 80182d0:	d10a      	bne.n	80182e8 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80182d2:	4b08      	ldr	r3, [pc, #32]	; (80182f4 <RegionEU868NextChannel+0x154>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80182da:	4b06      	ldr	r3, [pc, #24]	; (80182f4 <RegionEU868NextChannel+0x154>)
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	f042 0207 	orr.w	r2, r2, #7
 80182e2:	b292      	uxth	r2, r2
 80182e4:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 80182e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80182ec:	4618      	mov	r0, r3
 80182ee:	3760      	adds	r7, #96	; 0x60
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	20001d6c 	.word	0x20001d6c
 80182f8:	20001d68 	.word	0x20001d68

080182fc <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018304:	2300      	movs	r3, #0
 8018306:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8018308:	2300      	movs	r3, #0
 801830a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801830c:	2300      	movs	r3, #0
 801830e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	791b      	ldrb	r3, [r3, #4]
 8018314:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018316:	7b7b      	ldrb	r3, [r7, #13]
 8018318:	2b02      	cmp	r3, #2
 801831a:	d801      	bhi.n	8018320 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801831c:	2306      	movs	r3, #6
 801831e:	e089      	b.n	8018434 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018320:	7b7b      	ldrb	r3, [r7, #13]
 8018322:	2b0f      	cmp	r3, #15
 8018324:	d901      	bls.n	801832a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018326:	2303      	movs	r3, #3
 8018328:	e084      	b.n	8018434 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	7a1b      	ldrb	r3, [r3, #8]
 8018330:	f343 0303 	sbfx	r3, r3, #0, #4
 8018334:	b25b      	sxtb	r3, r3
 8018336:	2207      	movs	r2, #7
 8018338:	2100      	movs	r1, #0
 801833a:	4618      	mov	r0, r3
 801833c:	f7fe f9cf 	bl	80166de <RegionCommonValueInRange>
 8018340:	4603      	mov	r3, r0
 8018342:	2b00      	cmp	r3, #0
 8018344:	d101      	bne.n	801834a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018346:	2301      	movs	r3, #1
 8018348:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	7a1b      	ldrb	r3, [r3, #8]
 8018350:	f343 1303 	sbfx	r3, r3, #4, #4
 8018354:	b25b      	sxtb	r3, r3
 8018356:	2207      	movs	r2, #7
 8018358:	2100      	movs	r1, #0
 801835a:	4618      	mov	r0, r3
 801835c:	f7fe f9bf 	bl	80166de <RegionCommonValueInRange>
 8018360:	4603      	mov	r3, r0
 8018362:	2b00      	cmp	r3, #0
 8018364:	d101      	bne.n	801836a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018366:	2301      	movs	r3, #1
 8018368:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	7a1b      	ldrb	r3, [r3, #8]
 8018370:	f343 0303 	sbfx	r3, r3, #0, #4
 8018374:	b25a      	sxtb	r2, r3
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	7a1b      	ldrb	r3, [r3, #8]
 801837c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018380:	b25b      	sxtb	r3, r3
 8018382:	429a      	cmp	r2, r3
 8018384:	dd01      	ble.n	801838a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8018386:	2301      	movs	r3, #1
 8018388:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801838a:	7bbb      	ldrb	r3, [r7, #14]
 801838c:	f083 0301 	eor.w	r3, r3, #1
 8018390:	b2db      	uxtb	r3, r3
 8018392:	2b00      	cmp	r3, #0
 8018394:	d010      	beq.n	80183b8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	f107 020c 	add.w	r2, r7, #12
 80183a0:	4611      	mov	r1, r2
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7fe feee 	bl	8017184 <VerifyRfFreq>
 80183a8:	4603      	mov	r3, r0
 80183aa:	f083 0301 	eor.w	r3, r3, #1
 80183ae:	b2db      	uxtb	r3, r3
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d001      	beq.n	80183b8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80183b4:	2301      	movs	r3, #1
 80183b6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80183b8:	7bfb      	ldrb	r3, [r7, #15]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d004      	beq.n	80183c8 <RegionEU868ChannelAdd+0xcc>
 80183be:	7bbb      	ldrb	r3, [r7, #14]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d001      	beq.n	80183c8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80183c4:	2306      	movs	r3, #6
 80183c6:	e035      	b.n	8018434 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80183c8:	7bfb      	ldrb	r3, [r7, #15]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d001      	beq.n	80183d2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80183ce:	2305      	movs	r3, #5
 80183d0:	e030      	b.n	8018434 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80183d2:	7bbb      	ldrb	r3, [r7, #14]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d001      	beq.n	80183dc <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80183d8:	2304      	movs	r3, #4
 80183da:	e02b      	b.n	8018434 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80183dc:	4b17      	ldr	r3, [pc, #92]	; (801843c <RegionEU868ChannelAdd+0x140>)
 80183de:	6819      	ldr	r1, [r3, #0]
 80183e0:	7b7a      	ldrb	r2, [r7, #13]
 80183e2:	4613      	mov	r3, r2
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	4413      	add	r3, r2
 80183e8:	009b      	lsls	r3, r3, #2
 80183ea:	18c8      	adds	r0, r1, r3
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	220c      	movs	r2, #12
 80183f2:	4619      	mov	r1, r3
 80183f4:	f000 f8fd 	bl	80185f2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80183f8:	4b10      	ldr	r3, [pc, #64]	; (801843c <RegionEU868ChannelAdd+0x140>)
 80183fa:	6819      	ldr	r1, [r3, #0]
 80183fc:	7b7a      	ldrb	r2, [r7, #13]
 80183fe:	7b38      	ldrb	r0, [r7, #12]
 8018400:	4613      	mov	r3, r2
 8018402:	005b      	lsls	r3, r3, #1
 8018404:	4413      	add	r3, r2
 8018406:	009b      	lsls	r3, r3, #2
 8018408:	440b      	add	r3, r1
 801840a:	3309      	adds	r3, #9
 801840c:	4602      	mov	r2, r0
 801840e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8018410:	4b0a      	ldr	r3, [pc, #40]	; (801843c <RegionEU868ChannelAdd+0x140>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8018418:	b21a      	sxth	r2, r3
 801841a:	7b7b      	ldrb	r3, [r7, #13]
 801841c:	2101      	movs	r1, #1
 801841e:	fa01 f303 	lsl.w	r3, r1, r3
 8018422:	b21b      	sxth	r3, r3
 8018424:	4313      	orrs	r3, r2
 8018426:	b21a      	sxth	r2, r3
 8018428:	4b04      	ldr	r3, [pc, #16]	; (801843c <RegionEU868ChannelAdd+0x140>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	b292      	uxth	r2, r2
 801842e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8018432:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018434:	4618      	mov	r0, r3
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}
 801843c:	20001d6c 	.word	0x20001d6c

08018440 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b086      	sub	sp, #24
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	781b      	ldrb	r3, [r3, #0]
 801844c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801844e:	7dfb      	ldrb	r3, [r7, #23]
 8018450:	2b02      	cmp	r3, #2
 8018452:	d801      	bhi.n	8018458 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018454:	2300      	movs	r3, #0
 8018456:	e016      	b.n	8018486 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018458:	4b0d      	ldr	r3, [pc, #52]	; (8018490 <RegionEU868ChannelsRemove+0x50>)
 801845a:	6819      	ldr	r1, [r3, #0]
 801845c:	7dfa      	ldrb	r2, [r7, #23]
 801845e:	4613      	mov	r3, r2
 8018460:	005b      	lsls	r3, r3, #1
 8018462:	4413      	add	r3, r2
 8018464:	009b      	lsls	r3, r3, #2
 8018466:	440b      	add	r3, r1
 8018468:	461a      	mov	r2, r3
 801846a:	2300      	movs	r3, #0
 801846c:	6013      	str	r3, [r2, #0]
 801846e:	6053      	str	r3, [r2, #4]
 8018470:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018472:	4b07      	ldr	r3, [pc, #28]	; (8018490 <RegionEU868ChannelsRemove+0x50>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801847a:	7df9      	ldrb	r1, [r7, #23]
 801847c:	2210      	movs	r2, #16
 801847e:	4618      	mov	r0, r3
 8018480:	f7fe f94a 	bl	8016718 <RegionCommonChanDisable>
 8018484:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018486:	4618      	mov	r0, r3
 8018488:	3718      	adds	r7, #24
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	20001d6c 	.word	0x20001d6c

08018494 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018494:	b590      	push	{r4, r7, lr}
 8018496:	b085      	sub	sp, #20
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80184a2:	4b20      	ldr	r3, [pc, #128]	; (8018524 <RegionEU868SetContinuousWave+0x90>)
 80184a4:	681a      	ldr	r2, [r3, #0]
 80184a6:	4b20      	ldr	r3, [pc, #128]	; (8018528 <RegionEU868SetContinuousWave+0x94>)
 80184a8:	6819      	ldr	r1, [r3, #0]
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	461c      	mov	r4, r3
 80184b0:	4623      	mov	r3, r4
 80184b2:	005b      	lsls	r3, r3, #1
 80184b4:	4423      	add	r3, r4
 80184b6:	009b      	lsls	r3, r3, #2
 80184b8:	440b      	add	r3, r1
 80184ba:	3309      	adds	r3, #9
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	4619      	mov	r1, r3
 80184c0:	460b      	mov	r3, r1
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	440b      	add	r3, r1
 80184c6:	00db      	lsls	r3, r3, #3
 80184c8:	4413      	add	r3, r2
 80184ca:	3302      	adds	r3, #2
 80184cc:	f993 3000 	ldrsb.w	r3, [r3]
 80184d0:	4619      	mov	r1, r3
 80184d2:	f7fe fe0c 	bl	80170ee <RegionCommonLimitTxPower>
 80184d6:	4603      	mov	r3, r0
 80184d8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80184da:	2300      	movs	r3, #0
 80184dc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80184de:	4b12      	ldr	r3, [pc, #72]	; (8018528 <RegionEU868SetContinuousWave+0x94>)
 80184e0:	681a      	ldr	r2, [r3, #0]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	781b      	ldrb	r3, [r3, #0]
 80184e6:	4619      	mov	r1, r3
 80184e8:	460b      	mov	r3, r1
 80184ea:	005b      	lsls	r3, r3, #1
 80184ec:	440b      	add	r3, r1
 80184ee:	009b      	lsls	r3, r3, #2
 80184f0:	4413      	add	r3, r2
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6859      	ldr	r1, [r3, #4]
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	689a      	ldr	r2, [r3, #8]
 80184fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018502:	4618      	mov	r0, r3
 8018504:	f7fe fc64 	bl	8016dd0 <RegionCommonComputeTxPower>
 8018508:	4603      	mov	r3, r0
 801850a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801850c:	4b07      	ldr	r3, [pc, #28]	; (801852c <RegionEU868SetContinuousWave+0x98>)
 801850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018510:	687a      	ldr	r2, [r7, #4]
 8018512:	8992      	ldrh	r2, [r2, #12]
 8018514:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018518:	68b8      	ldr	r0, [r7, #8]
 801851a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801851c:	bf00      	nop
 801851e:	3714      	adds	r7, #20
 8018520:	46bd      	mov	sp, r7
 8018522:	bd90      	pop	{r4, r7, pc}
 8018524:	20001d68 	.word	0x20001d68
 8018528:	20001d6c 	.word	0x20001d6c
 801852c:	080206a0 	.word	0x080206a0

08018530 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018530:	b480      	push	{r7}
 8018532:	b085      	sub	sp, #20
 8018534:	af00      	add	r7, sp, #0
 8018536:	4603      	mov	r3, r0
 8018538:	71fb      	strb	r3, [r7, #7]
 801853a:	460b      	mov	r3, r1
 801853c:	71bb      	strb	r3, [r7, #6]
 801853e:	4613      	mov	r3, r2
 8018540:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018542:	79ba      	ldrb	r2, [r7, #6]
 8018544:	797b      	ldrb	r3, [r7, #5]
 8018546:	1ad3      	subs	r3, r2, r3
 8018548:	b2db      	uxtb	r3, r3
 801854a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801854c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018550:	2b00      	cmp	r3, #0
 8018552:	da01      	bge.n	8018558 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018554:	2300      	movs	r3, #0
 8018556:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018558:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801855a:	4618      	mov	r0, r3
 801855c:	3714      	adds	r7, #20
 801855e:	46bd      	mov	sp, r7
 8018560:	bc80      	pop	{r7}
 8018562:	4770      	bx	lr

08018564 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018564:	b480      	push	{r7}
 8018566:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018568:	4b0d      	ldr	r3, [pc, #52]	; (80185a0 <rand1+0x3c>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	4a0d      	ldr	r2, [pc, #52]	; (80185a4 <rand1+0x40>)
 801856e:	fb02 f303 	mul.w	r3, r2, r3
 8018572:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018576:	3339      	adds	r3, #57	; 0x39
 8018578:	4a09      	ldr	r2, [pc, #36]	; (80185a0 <rand1+0x3c>)
 801857a:	6013      	str	r3, [r2, #0]
 801857c:	4b08      	ldr	r3, [pc, #32]	; (80185a0 <rand1+0x3c>)
 801857e:	681a      	ldr	r2, [r3, #0]
 8018580:	2303      	movs	r3, #3
 8018582:	fba3 1302 	umull	r1, r3, r3, r2
 8018586:	1ad1      	subs	r1, r2, r3
 8018588:	0849      	lsrs	r1, r1, #1
 801858a:	440b      	add	r3, r1
 801858c:	0f99      	lsrs	r1, r3, #30
 801858e:	460b      	mov	r3, r1
 8018590:	07db      	lsls	r3, r3, #31
 8018592:	1a5b      	subs	r3, r3, r1
 8018594:	1ad1      	subs	r1, r2, r3
 8018596:	460b      	mov	r3, r1
}
 8018598:	4618      	mov	r0, r3
 801859a:	46bd      	mov	sp, r7
 801859c:	bc80      	pop	{r7}
 801859e:	4770      	bx	lr
 80185a0:	20000134 	.word	0x20000134
 80185a4:	41c64e6d 	.word	0x41c64e6d

080185a8 <srand1>:

void srand1( uint32_t seed )
{
 80185a8:	b480      	push	{r7}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
    next = seed;
 80185b0:	4a03      	ldr	r2, [pc, #12]	; (80185c0 <srand1+0x18>)
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6013      	str	r3, [r2, #0]
}
 80185b6:	bf00      	nop
 80185b8:	370c      	adds	r7, #12
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bc80      	pop	{r7}
 80185be:	4770      	bx	lr
 80185c0:	20000134 	.word	0x20000134

080185c4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b082      	sub	sp, #8
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
 80185cc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80185ce:	f7ff ffc9 	bl	8018564 <rand1>
 80185d2:	4602      	mov	r2, r0
 80185d4:	6839      	ldr	r1, [r7, #0]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	1acb      	subs	r3, r1, r3
 80185da:	3301      	adds	r3, #1
 80185dc:	fb92 f1f3 	sdiv	r1, r2, r3
 80185e0:	fb01 f303 	mul.w	r3, r1, r3
 80185e4:	1ad2      	subs	r2, r2, r3
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	4413      	add	r3, r2
}
 80185ea:	4618      	mov	r0, r3
 80185ec:	3708      	adds	r7, #8
 80185ee:	46bd      	mov	sp, r7
 80185f0:	bd80      	pop	{r7, pc}

080185f2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80185f2:	b480      	push	{r7}
 80185f4:	b085      	sub	sp, #20
 80185f6:	af00      	add	r7, sp, #0
 80185f8:	60f8      	str	r0, [r7, #12]
 80185fa:	60b9      	str	r1, [r7, #8]
 80185fc:	4613      	mov	r3, r2
 80185fe:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018600:	e007      	b.n	8018612 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018602:	68ba      	ldr	r2, [r7, #8]
 8018604:	1c53      	adds	r3, r2, #1
 8018606:	60bb      	str	r3, [r7, #8]
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	1c59      	adds	r1, r3, #1
 801860c:	60f9      	str	r1, [r7, #12]
 801860e:	7812      	ldrb	r2, [r2, #0]
 8018610:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018612:	88fb      	ldrh	r3, [r7, #6]
 8018614:	1e5a      	subs	r2, r3, #1
 8018616:	80fa      	strh	r2, [r7, #6]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d1f2      	bne.n	8018602 <memcpy1+0x10>
    }
}
 801861c:	bf00      	nop
 801861e:	bf00      	nop
 8018620:	3714      	adds	r7, #20
 8018622:	46bd      	mov	sp, r7
 8018624:	bc80      	pop	{r7}
 8018626:	4770      	bx	lr

08018628 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018628:	b480      	push	{r7}
 801862a:	b085      	sub	sp, #20
 801862c:	af00      	add	r7, sp, #0
 801862e:	60f8      	str	r0, [r7, #12]
 8018630:	60b9      	str	r1, [r7, #8]
 8018632:	4613      	mov	r3, r2
 8018634:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018636:	88fb      	ldrh	r3, [r7, #6]
 8018638:	3b01      	subs	r3, #1
 801863a:	68fa      	ldr	r2, [r7, #12]
 801863c:	4413      	add	r3, r2
 801863e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018640:	e007      	b.n	8018652 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018642:	68ba      	ldr	r2, [r7, #8]
 8018644:	1c53      	adds	r3, r2, #1
 8018646:	60bb      	str	r3, [r7, #8]
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	1e59      	subs	r1, r3, #1
 801864c:	60f9      	str	r1, [r7, #12]
 801864e:	7812      	ldrb	r2, [r2, #0]
 8018650:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018652:	88fb      	ldrh	r3, [r7, #6]
 8018654:	1e5a      	subs	r2, r3, #1
 8018656:	80fa      	strh	r2, [r7, #6]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d1f2      	bne.n	8018642 <memcpyr+0x1a>
    }
}
 801865c:	bf00      	nop
 801865e:	bf00      	nop
 8018660:	3714      	adds	r7, #20
 8018662:	46bd      	mov	sp, r7
 8018664:	bc80      	pop	{r7}
 8018666:	4770      	bx	lr

08018668 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018668:	b480      	push	{r7}
 801866a:	b083      	sub	sp, #12
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
 8018670:	460b      	mov	r3, r1
 8018672:	70fb      	strb	r3, [r7, #3]
 8018674:	4613      	mov	r3, r2
 8018676:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018678:	e004      	b.n	8018684 <memset1+0x1c>
    {
        *dst++ = value;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	1c5a      	adds	r2, r3, #1
 801867e:	607a      	str	r2, [r7, #4]
 8018680:	78fa      	ldrb	r2, [r7, #3]
 8018682:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018684:	883b      	ldrh	r3, [r7, #0]
 8018686:	1e5a      	subs	r2, r3, #1
 8018688:	803a      	strh	r2, [r7, #0]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d1f5      	bne.n	801867a <memset1+0x12>
    }
}
 801868e:	bf00      	nop
 8018690:	bf00      	nop
 8018692:	370c      	adds	r7, #12
 8018694:	46bd      	mov	sp, r7
 8018696:	bc80      	pop	{r7}
 8018698:	4770      	bx	lr
	...

0801869c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801869c:	b480      	push	{r7}
 801869e:	b085      	sub	sp, #20
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
 80186a4:	460b      	mov	r3, r1
 80186a6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80186a8:	f04f 33ff 	mov.w	r3, #4294967295
 80186ac:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d101      	bne.n	80186b8 <Crc32+0x1c>
    {
        return 0;
 80186b4:	2300      	movs	r3, #0
 80186b6:	e026      	b.n	8018706 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80186b8:	2300      	movs	r3, #0
 80186ba:	817b      	strh	r3, [r7, #10]
 80186bc:	e01d      	b.n	80186fa <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80186be:	897b      	ldrh	r3, [r7, #10]
 80186c0:	687a      	ldr	r2, [r7, #4]
 80186c2:	4413      	add	r3, r2
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	461a      	mov	r2, r3
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	4053      	eors	r3, r2
 80186cc:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80186ce:	2300      	movs	r3, #0
 80186d0:	813b      	strh	r3, [r7, #8]
 80186d2:	e00c      	b.n	80186ee <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	085a      	lsrs	r2, r3, #1
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	f003 0301 	and.w	r3, r3, #1
 80186de:	425b      	negs	r3, r3
 80186e0:	490b      	ldr	r1, [pc, #44]	; (8018710 <Crc32+0x74>)
 80186e2:	400b      	ands	r3, r1
 80186e4:	4053      	eors	r3, r2
 80186e6:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80186e8:	893b      	ldrh	r3, [r7, #8]
 80186ea:	3301      	adds	r3, #1
 80186ec:	813b      	strh	r3, [r7, #8]
 80186ee:	893b      	ldrh	r3, [r7, #8]
 80186f0:	2b07      	cmp	r3, #7
 80186f2:	d9ef      	bls.n	80186d4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80186f4:	897b      	ldrh	r3, [r7, #10]
 80186f6:	3301      	adds	r3, #1
 80186f8:	817b      	strh	r3, [r7, #10]
 80186fa:	897a      	ldrh	r2, [r7, #10]
 80186fc:	887b      	ldrh	r3, [r7, #2]
 80186fe:	429a      	cmp	r2, r3
 8018700:	d3dd      	bcc.n	80186be <Crc32+0x22>
        }
    }

    return ~crc;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	43db      	mvns	r3, r3
}
 8018706:	4618      	mov	r0, r3
 8018708:	3714      	adds	r7, #20
 801870a:	46bd      	mov	sp, r7
 801870c:	bc80      	pop	{r7}
 801870e:	4770      	bx	lr
 8018710:	edb88320 	.word	0xedb88320

08018714 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af02      	add	r7, sp, #8
 801871a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801871c:	4a24      	ldr	r2, [pc, #144]	; (80187b0 <RadioInit+0x9c>)
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018722:	4b24      	ldr	r3, [pc, #144]	; (80187b4 <RadioInit+0xa0>)
 8018724:	2200      	movs	r2, #0
 8018726:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018728:	4b22      	ldr	r3, [pc, #136]	; (80187b4 <RadioInit+0xa0>)
 801872a:	2200      	movs	r2, #0
 801872c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801872e:	4b21      	ldr	r3, [pc, #132]	; (80187b4 <RadioInit+0xa0>)
 8018730:	2200      	movs	r2, #0
 8018732:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018734:	4b1f      	ldr	r3, [pc, #124]	; (80187b4 <RadioInit+0xa0>)
 8018736:	2200      	movs	r2, #0
 8018738:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801873a:	481f      	ldr	r0, [pc, #124]	; (80187b8 <RadioInit+0xa4>)
 801873c:	f001 ff50 	bl	801a5e0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018740:	4b1c      	ldr	r3, [pc, #112]	; (80187b4 <RadioInit+0xa0>)
 8018742:	2200      	movs	r2, #0
 8018744:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018746:	4b1b      	ldr	r3, [pc, #108]	; (80187b4 <RadioInit+0xa0>)
 8018748:	2200      	movs	r2, #0
 801874a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801874c:	f002 f9de 	bl	801ab0c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018750:	2100      	movs	r1, #0
 8018752:	2000      	movs	r0, #0
 8018754:	f002 fda6 	bl	801b2a4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018758:	2204      	movs	r2, #4
 801875a:	2100      	movs	r1, #0
 801875c:	2001      	movs	r0, #1
 801875e:	f002 fb63 	bl	801ae28 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018762:	2300      	movs	r3, #0
 8018764:	2200      	movs	r2, #0
 8018766:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801876a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801876e:	f002 fa93 	bl	801ac98 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8018772:	f000 fe7d 	bl	8019470 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018776:	2300      	movs	r3, #0
 8018778:	9300      	str	r3, [sp, #0]
 801877a:	4b10      	ldr	r3, [pc, #64]	; (80187bc <RadioInit+0xa8>)
 801877c:	2200      	movs	r2, #0
 801877e:	f04f 31ff 	mov.w	r1, #4294967295
 8018782:	480f      	ldr	r0, [pc, #60]	; (80187c0 <RadioInit+0xac>)
 8018784:	f003 ffa4 	bl	801c6d0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018788:	2300      	movs	r3, #0
 801878a:	9300      	str	r3, [sp, #0]
 801878c:	4b0d      	ldr	r3, [pc, #52]	; (80187c4 <RadioInit+0xb0>)
 801878e:	2200      	movs	r2, #0
 8018790:	f04f 31ff 	mov.w	r1, #4294967295
 8018794:	480c      	ldr	r0, [pc, #48]	; (80187c8 <RadioInit+0xb4>)
 8018796:	f003 ff9b 	bl	801c6d0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801879a:	4809      	ldr	r0, [pc, #36]	; (80187c0 <RadioInit+0xac>)
 801879c:	f004 f83c 	bl	801c818 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80187a0:	4809      	ldr	r0, [pc, #36]	; (80187c8 <RadioInit+0xb4>)
 80187a2:	f004 f839 	bl	801c818 <UTIL_TIMER_Stop>
}
 80187a6:	bf00      	nop
 80187a8:	3708      	adds	r7, #8
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	20001e70 	.word	0x20001e70
 80187b4:	20001e74 	.word	0x20001e74
 80187b8:	0801985d 	.word	0x0801985d
 80187bc:	080197e5 	.word	0x080197e5
 80187c0:	20001ed0 	.word	0x20001ed0
 80187c4:	080197f9 	.word	0x080197f9
 80187c8:	20001ee8 	.word	0x20001ee8

080187cc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80187d0:	f001 ff48 	bl	801a664 <SUBGRF_GetOperatingMode>
 80187d4:	4603      	mov	r3, r0
 80187d6:	2b07      	cmp	r3, #7
 80187d8:	d00a      	beq.n	80187f0 <RadioGetStatus+0x24>
 80187da:	2b07      	cmp	r3, #7
 80187dc:	dc0a      	bgt.n	80187f4 <RadioGetStatus+0x28>
 80187de:	2b04      	cmp	r3, #4
 80187e0:	d002      	beq.n	80187e8 <RadioGetStatus+0x1c>
 80187e2:	2b05      	cmp	r3, #5
 80187e4:	d002      	beq.n	80187ec <RadioGetStatus+0x20>
 80187e6:	e005      	b.n	80187f4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80187e8:	2302      	movs	r3, #2
 80187ea:	e004      	b.n	80187f6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80187ec:	2301      	movs	r3, #1
 80187ee:	e002      	b.n	80187f6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80187f0:	2303      	movs	r3, #3
 80187f2:	e000      	b.n	80187f6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80187f4:	2300      	movs	r3, #0
    }
}
 80187f6:	4618      	mov	r0, r3
 80187f8:	bd80      	pop	{r7, pc}
	...

080187fc <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
 8018802:	4603      	mov	r3, r0
 8018804:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018806:	4a2a      	ldr	r2, [pc, #168]	; (80188b0 <RadioSetModem+0xb4>)
 8018808:	79fb      	ldrb	r3, [r7, #7]
 801880a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801880c:	79fb      	ldrb	r3, [r7, #7]
 801880e:	4618      	mov	r0, r3
 8018810:	f003 f90b 	bl	801ba2a <RFW_SetRadioModem>
    switch( modem )
 8018814:	79fb      	ldrb	r3, [r7, #7]
 8018816:	2b05      	cmp	r3, #5
 8018818:	d80e      	bhi.n	8018838 <RadioSetModem+0x3c>
 801881a:	a201      	add	r2, pc, #4	; (adr r2, 8018820 <RadioSetModem+0x24>)
 801881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018820:	08018847 	.word	0x08018847
 8018824:	08018855 	.word	0x08018855
 8018828:	08018839 	.word	0x08018839
 801882c:	0801887b 	.word	0x0801887b
 8018830:	08018889 	.word	0x08018889
 8018834:	08018897 	.word	0x08018897
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018838:	2003      	movs	r0, #3
 801883a:	f002 facf 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801883e:	4b1c      	ldr	r3, [pc, #112]	; (80188b0 <RadioSetModem+0xb4>)
 8018840:	2200      	movs	r2, #0
 8018842:	735a      	strb	r2, [r3, #13]
        break;
 8018844:	e02f      	b.n	80188a6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018846:	2000      	movs	r0, #0
 8018848:	f002 fac8 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801884c:	4b18      	ldr	r3, [pc, #96]	; (80188b0 <RadioSetModem+0xb4>)
 801884e:	2200      	movs	r2, #0
 8018850:	735a      	strb	r2, [r3, #13]
        break;
 8018852:	e028      	b.n	80188a6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018854:	2001      	movs	r0, #1
 8018856:	f002 fac1 	bl	801addc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801885a:	4b15      	ldr	r3, [pc, #84]	; (80188b0 <RadioSetModem+0xb4>)
 801885c:	7b5a      	ldrb	r2, [r3, #13]
 801885e:	4b14      	ldr	r3, [pc, #80]	; (80188b0 <RadioSetModem+0xb4>)
 8018860:	7b1b      	ldrb	r3, [r3, #12]
 8018862:	429a      	cmp	r2, r3
 8018864:	d01e      	beq.n	80188a4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018866:	4b12      	ldr	r3, [pc, #72]	; (80188b0 <RadioSetModem+0xb4>)
 8018868:	7b1a      	ldrb	r2, [r3, #12]
 801886a:	4b11      	ldr	r3, [pc, #68]	; (80188b0 <RadioSetModem+0xb4>)
 801886c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801886e:	4b10      	ldr	r3, [pc, #64]	; (80188b0 <RadioSetModem+0xb4>)
 8018870:	7b5b      	ldrb	r3, [r3, #13]
 8018872:	4618      	mov	r0, r3
 8018874:	f000 ff80 	bl	8019778 <RadioSetPublicNetwork>
        }
        break;
 8018878:	e014      	b.n	80188a4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801887a:	2002      	movs	r0, #2
 801887c:	f002 faae 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018880:	4b0b      	ldr	r3, [pc, #44]	; (80188b0 <RadioSetModem+0xb4>)
 8018882:	2200      	movs	r2, #0
 8018884:	735a      	strb	r2, [r3, #13]
        break;
 8018886:	e00e      	b.n	80188a6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018888:	2002      	movs	r0, #2
 801888a:	f002 faa7 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801888e:	4b08      	ldr	r3, [pc, #32]	; (80188b0 <RadioSetModem+0xb4>)
 8018890:	2200      	movs	r2, #0
 8018892:	735a      	strb	r2, [r3, #13]
        break;
 8018894:	e007      	b.n	80188a6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018896:	2000      	movs	r0, #0
 8018898:	f002 faa0 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801889c:	4b04      	ldr	r3, [pc, #16]	; (80188b0 <RadioSetModem+0xb4>)
 801889e:	2200      	movs	r2, #0
 80188a0:	735a      	strb	r2, [r3, #13]
        break;
 80188a2:	e000      	b.n	80188a6 <RadioSetModem+0xaa>
        break;
 80188a4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80188a6:	bf00      	nop
 80188a8:	3708      	adds	r7, #8
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}
 80188ae:	bf00      	nop
 80188b0:	20001e74 	.word	0x20001e74

080188b4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b082      	sub	sp, #8
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f002 fa47 	bl	801ad50 <SUBGRF_SetRfFrequency>
}
 80188c2:	bf00      	nop
 80188c4:	3708      	adds	r7, #8
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}

080188ca <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80188ca:	b580      	push	{r7, lr}
 80188cc:	b090      	sub	sp, #64	; 0x40
 80188ce:	af0a      	add	r7, sp, #40	; 0x28
 80188d0:	60f8      	str	r0, [r7, #12]
 80188d2:	60b9      	str	r1, [r7, #8]
 80188d4:	603b      	str	r3, [r7, #0]
 80188d6:	4613      	mov	r3, r2
 80188d8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80188da:	2301      	movs	r3, #1
 80188dc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80188de:	2300      	movs	r3, #0
 80188e0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80188e2:	2300      	movs	r3, #0
 80188e4:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80188e6:	f000 fdd6 	bl	8019496 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80188ea:	2000      	movs	r0, #0
 80188ec:	f7ff ff86 	bl	80187fc <RadioSetModem>

    RadioSetChannel( freq );
 80188f0:	68f8      	ldr	r0, [r7, #12]
 80188f2:	f7ff ffdf 	bl	80188b4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80188f6:	2301      	movs	r3, #1
 80188f8:	9309      	str	r3, [sp, #36]	; 0x24
 80188fa:	2300      	movs	r3, #0
 80188fc:	9308      	str	r3, [sp, #32]
 80188fe:	2300      	movs	r3, #0
 8018900:	9307      	str	r3, [sp, #28]
 8018902:	2300      	movs	r3, #0
 8018904:	9306      	str	r3, [sp, #24]
 8018906:	2300      	movs	r3, #0
 8018908:	9305      	str	r3, [sp, #20]
 801890a:	2300      	movs	r3, #0
 801890c:	9304      	str	r3, [sp, #16]
 801890e:	2300      	movs	r3, #0
 8018910:	9303      	str	r3, [sp, #12]
 8018912:	2300      	movs	r3, #0
 8018914:	9302      	str	r3, [sp, #8]
 8018916:	2303      	movs	r3, #3
 8018918:	9301      	str	r3, [sp, #4]
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	2300      	movs	r3, #0
 8018920:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018924:	68b9      	ldr	r1, [r7, #8]
 8018926:	2000      	movs	r0, #0
 8018928:	f000 f83c 	bl	80189a4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801892c:	2000      	movs	r0, #0
 801892e:	f000 fdb9 	bl	80194a4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018932:	f000 ff4f 	bl	80197d4 <RadioGetWakeupTime>
 8018936:	4603      	mov	r3, r0
 8018938:	4618      	mov	r0, r3
 801893a:	f7e9 fc23 	bl	8002184 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801893e:	f004 f885 	bl	801ca4c <UTIL_TIMER_GetCurrentTime>
 8018942:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018944:	e00d      	b.n	8018962 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018946:	2000      	movs	r0, #0
 8018948:	f000 fe94 	bl	8019674 <RadioRssi>
 801894c:	4603      	mov	r3, r0
 801894e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018950:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018958:	429a      	cmp	r2, r3
 801895a:	dd02      	ble.n	8018962 <RadioIsChannelFree+0x98>
        {
            status = false;
 801895c:	2300      	movs	r3, #0
 801895e:	75fb      	strb	r3, [r7, #23]
            break;
 8018960:	e006      	b.n	8018970 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018962:	6938      	ldr	r0, [r7, #16]
 8018964:	f004 f884 	bl	801ca70 <UTIL_TIMER_GetElapsedTime>
 8018968:	4602      	mov	r2, r0
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	4293      	cmp	r3, r2
 801896e:	d8ea      	bhi.n	8018946 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018970:	f000 fd91 	bl	8019496 <RadioStandby>

    return status;
 8018974:	7dfb      	ldrb	r3, [r7, #23]
}
 8018976:	4618      	mov	r0, r3
 8018978:	3718      	adds	r7, #24
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}

0801897e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801897e:	b580      	push	{r7, lr}
 8018980:	b082      	sub	sp, #8
 8018982:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018984:	2300      	movs	r3, #0
 8018986:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018988:	2300      	movs	r3, #0
 801898a:	2200      	movs	r2, #0
 801898c:	2100      	movs	r1, #0
 801898e:	2000      	movs	r0, #0
 8018990:	f002 f982 	bl	801ac98 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018994:	f001 ff37 	bl	801a806 <SUBGRF_GetRandom>
 8018998:	6078      	str	r0, [r7, #4]

    return rnd;
 801899a:	687b      	ldr	r3, [r7, #4]
}
 801899c:	4618      	mov	r0, r3
 801899e:	3708      	adds	r7, #8
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}

080189a4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b08a      	sub	sp, #40	; 0x28
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	60b9      	str	r1, [r7, #8]
 80189ac:	607a      	str	r2, [r7, #4]
 80189ae:	461a      	mov	r2, r3
 80189b0:	4603      	mov	r3, r0
 80189b2:	73fb      	strb	r3, [r7, #15]
 80189b4:	4613      	mov	r3, r2
 80189b6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80189b8:	4ab9      	ldr	r2, [pc, #740]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 80189ba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189be:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80189c0:	f002 fff1 	bl	801b9a6 <RFW_DeInit>
    if( rxContinuous == true )
 80189c4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d001      	beq.n	80189d0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80189cc:	2300      	movs	r3, #0
 80189ce:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80189d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d004      	beq.n	80189e2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80189d8:	4ab2      	ldr	r2, [pc, #712]	; (8018ca4 <RadioSetRxConfig+0x300>)
 80189da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80189de:	7013      	strb	r3, [r2, #0]
 80189e0:	e002      	b.n	80189e8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80189e2:	4bb0      	ldr	r3, [pc, #704]	; (8018ca4 <RadioSetRxConfig+0x300>)
 80189e4:	22ff      	movs	r2, #255	; 0xff
 80189e6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80189e8:	7bfb      	ldrb	r3, [r7, #15]
 80189ea:	2b05      	cmp	r3, #5
 80189ec:	d009      	beq.n	8018a02 <RadioSetRxConfig+0x5e>
 80189ee:	2b05      	cmp	r3, #5
 80189f0:	f300 81ca 	bgt.w	8018d88 <RadioSetRxConfig+0x3e4>
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f000 80bf 	beq.w	8018b78 <RadioSetRxConfig+0x1d4>
 80189fa:	2b01      	cmp	r3, #1
 80189fc:	f000 8124 	beq.w	8018c48 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018a00:	e1c2      	b.n	8018d88 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018a02:	2001      	movs	r0, #1
 8018a04:	f002 f844 	bl	801aa90 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018a08:	4ba5      	ldr	r3, [pc, #660]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018a10:	4aa3      	ldr	r2, [pc, #652]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018a16:	4ba2      	ldr	r3, [pc, #648]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a18:	2209      	movs	r2, #9
 8018a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018a1e:	4ba0      	ldr	r3, [pc, #640]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a20:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018a24:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018a26:	68b8      	ldr	r0, [r7, #8]
 8018a28:	f002 fef0 	bl	801b80c <SUBGRF_GetFskBandwidthRegValue>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	461a      	mov	r2, r3
 8018a30:	4b9b      	ldr	r3, [pc, #620]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018a36:	4b9a      	ldr	r3, [pc, #616]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a38:	2200      	movs	r2, #0
 8018a3a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018a3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	b29a      	uxth	r2, r3
 8018a42:	4b97      	ldr	r3, [pc, #604]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a44:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018a46:	4b96      	ldr	r3, [pc, #600]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a48:	2200      	movs	r2, #0
 8018a4a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018a4c:	4b94      	ldr	r3, [pc, #592]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a4e:	2210      	movs	r2, #16
 8018a50:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018a52:	4b93      	ldr	r3, [pc, #588]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a54:	2200      	movs	r2, #0
 8018a56:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018a58:	4b91      	ldr	r3, [pc, #580]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018a5e:	4b91      	ldr	r3, [pc, #580]	; (8018ca4 <RadioSetRxConfig+0x300>)
 8018a60:	781a      	ldrb	r2, [r3, #0]
 8018a62:	4b8f      	ldr	r3, [pc, #572]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a64:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018a66:	4b8e      	ldr	r3, [pc, #568]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a68:	2201      	movs	r2, #1
 8018a6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018a6c:	4b8c      	ldr	r3, [pc, #560]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018a6e:	2200      	movs	r2, #0
 8018a70:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018a72:	2005      	movs	r0, #5
 8018a74:	f7ff fec2 	bl	80187fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a78:	488b      	ldr	r0, [pc, #556]	; (8018ca8 <RadioSetRxConfig+0x304>)
 8018a7a:	f002 faa3 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a7e:	488b      	ldr	r0, [pc, #556]	; (8018cac <RadioSetRxConfig+0x308>)
 8018a80:	f002 fb72 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018a84:	4a8a      	ldr	r2, [pc, #552]	; (8018cb0 <RadioSetRxConfig+0x30c>)
 8018a86:	f107 031c 	add.w	r3, r7, #28
 8018a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a92:	f107 031c 	add.w	r3, r7, #28
 8018a96:	4618      	mov	r0, r3
 8018a98:	f001 fe33 	bl	801a702 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018a9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018aa0:	f001 fe7e 	bl	801a7a0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018aa4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018aa8:	f000 fe03 	bl	80196b2 <RadioRead>
 8018aac:	4603      	mov	r3, r0
 8018aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ab6:	f023 0310 	bic.w	r3, r3, #16
 8018aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018ac8:	f000 fde1 	bl	801968e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018acc:	2104      	movs	r1, #4
 8018ace:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8018ad2:	f000 fddc 	bl	801968e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018ad6:	f640 009b 	movw	r0, #2203	; 0x89b
 8018ada:	f000 fdea 	bl	80196b2 <RadioRead>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ae8:	f023 031c 	bic.w	r3, r3, #28
 8018aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018af4:	f043 0308 	orr.w	r3, r3, #8
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	4619      	mov	r1, r3
 8018afc:	f640 009b 	movw	r0, #2203	; 0x89b
 8018b00:	f000 fdc5 	bl	801968e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018b04:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018b08:	f000 fdd3 	bl	80196b2 <RadioRead>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b16:	f023 0318 	bic.w	r3, r3, #24
 8018b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b22:	f043 0318 	orr.w	r3, r3, #24
 8018b26:	b2db      	uxtb	r3, r3
 8018b28:	4619      	mov	r1, r3
 8018b2a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018b2e:	f000 fdae 	bl	801968e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018b32:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018b36:	f000 fdbc 	bl	80196b2 <RadioRead>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b50:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018b54:	b2db      	uxtb	r3, r3
 8018b56:	4619      	mov	r1, r3
 8018b58:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018b5c:	f000 fd97 	bl	801968e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018b60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018b62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018b66:	fb02 f303 	mul.w	r3, r2, r3
 8018b6a:	461a      	mov	r2, r3
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b72:	4a4b      	ldr	r2, [pc, #300]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018b74:	6093      	str	r3, [r2, #8]
            break;
 8018b76:	e108      	b.n	8018d8a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018b78:	2000      	movs	r0, #0
 8018b7a:	f001 ff89 	bl	801aa90 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018b7e:	4b48      	ldr	r3, [pc, #288]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018b80:	2200      	movs	r2, #0
 8018b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018b86:	4a46      	ldr	r2, [pc, #280]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018b8c:	4b44      	ldr	r3, [pc, #272]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018b8e:	220b      	movs	r2, #11
 8018b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018b94:	68b8      	ldr	r0, [r7, #8]
 8018b96:	f002 fe39 	bl	801b80c <SUBGRF_GetFskBandwidthRegValue>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	461a      	mov	r2, r3
 8018b9e:	4b40      	ldr	r3, [pc, #256]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018ba4:	4b3e      	ldr	r3, [pc, #248]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018baa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018bac:	00db      	lsls	r3, r3, #3
 8018bae:	b29a      	uxth	r2, r3
 8018bb0:	4b3b      	ldr	r3, [pc, #236]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bb2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018bb4:	4b3a      	ldr	r3, [pc, #232]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bb6:	2204      	movs	r2, #4
 8018bb8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018bba:	4b39      	ldr	r3, [pc, #228]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bbc:	2218      	movs	r2, #24
 8018bbe:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018bc0:	4b37      	ldr	r3, [pc, #220]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018bc6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018bca:	f083 0301 	eor.w	r3, r3, #1
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	461a      	mov	r2, r3
 8018bd2:	4b33      	ldr	r3, [pc, #204]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bd4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018bd6:	4b33      	ldr	r3, [pc, #204]	; (8018ca4 <RadioSetRxConfig+0x300>)
 8018bd8:	781a      	ldrb	r2, [r3, #0]
 8018bda:	4b31      	ldr	r3, [pc, #196]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bdc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018bde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d003      	beq.n	8018bee <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018be6:	4b2e      	ldr	r3, [pc, #184]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018be8:	22f2      	movs	r2, #242	; 0xf2
 8018bea:	75da      	strb	r2, [r3, #23]
 8018bec:	e002      	b.n	8018bf4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018bee:	4b2c      	ldr	r3, [pc, #176]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bf0:	2201      	movs	r2, #1
 8018bf2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018bf4:	4b2a      	ldr	r3, [pc, #168]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018bf6:	2201      	movs	r2, #1
 8018bf8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018bfa:	f000 fc4c 	bl	8019496 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018bfe:	2000      	movs	r0, #0
 8018c00:	f7ff fdfc 	bl	80187fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c04:	4828      	ldr	r0, [pc, #160]	; (8018ca8 <RadioSetRxConfig+0x304>)
 8018c06:	f002 f9dd 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c0a:	4828      	ldr	r0, [pc, #160]	; (8018cac <RadioSetRxConfig+0x308>)
 8018c0c:	f002 faac 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018c10:	4a28      	ldr	r2, [pc, #160]	; (8018cb4 <RadioSetRxConfig+0x310>)
 8018c12:	f107 0314 	add.w	r3, r7, #20
 8018c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c1e:	f107 0314 	add.w	r3, r7, #20
 8018c22:	4618      	mov	r0, r3
 8018c24:	f001 fd6d 	bl	801a702 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018c28:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018c2c:	f001 fdb8 	bl	801a7a0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018c30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018c32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018c36:	fb02 f303 	mul.w	r3, r2, r3
 8018c3a:	461a      	mov	r2, r3
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c42:	4a17      	ldr	r2, [pc, #92]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018c44:	6093      	str	r3, [r2, #8]
            break;
 8018c46:	e0a0      	b.n	8018d8a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018c48:	2000      	movs	r0, #0
 8018c4a:	f001 ff21 	bl	801aa90 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018c4e:	4b14      	ldr	r3, [pc, #80]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018c50:	2201      	movs	r2, #1
 8018c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	b2da      	uxtb	r2, r3
 8018c5a:	4b11      	ldr	r3, [pc, #68]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018c60:	4a15      	ldr	r2, [pc, #84]	; (8018cb8 <RadioSetRxConfig+0x314>)
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	4413      	add	r3, r2
 8018c66:	781a      	ldrb	r2, [r3, #0]
 8018c68:	4b0d      	ldr	r3, [pc, #52]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018c6e:	4a0c      	ldr	r2, [pc, #48]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018c70:	7bbb      	ldrb	r3, [r7, #14]
 8018c72:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d105      	bne.n	8018c88 <RadioSetRxConfig+0x2e4>
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2b0b      	cmp	r3, #11
 8018c80:	d008      	beq.n	8018c94 <RadioSetRxConfig+0x2f0>
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	2b0c      	cmp	r3, #12
 8018c86:	d005      	beq.n	8018c94 <RadioSetRxConfig+0x2f0>
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d116      	bne.n	8018cbc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	2b0c      	cmp	r3, #12
 8018c92:	d113      	bne.n	8018cbc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018c94:	4b02      	ldr	r3, [pc, #8]	; (8018ca0 <RadioSetRxConfig+0x2fc>)
 8018c96:	2201      	movs	r2, #1
 8018c98:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018c9c:	e012      	b.n	8018cc4 <RadioSetRxConfig+0x320>
 8018c9e:	bf00      	nop
 8018ca0:	20001e74 	.word	0x20001e74
 8018ca4:	20000138 	.word	0x20000138
 8018ca8:	20001eac 	.word	0x20001eac
 8018cac:	20001e82 	.word	0x20001e82
 8018cb0:	080201ac 	.word	0x080201ac
 8018cb4:	080201b4 	.word	0x080201b4
 8018cb8:	08020724 	.word	0x08020724
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018cbc:	4b35      	ldr	r3, [pc, #212]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018cc4:	4b33      	ldr	r3, [pc, #204]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018cc6:	2201      	movs	r2, #1
 8018cc8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018cca:	4b32      	ldr	r3, [pc, #200]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018cd0:	2b05      	cmp	r3, #5
 8018cd2:	d004      	beq.n	8018cde <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018cd4:	4b2f      	ldr	r3, [pc, #188]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018cda:	2b06      	cmp	r3, #6
 8018cdc:	d10a      	bne.n	8018cf4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018cde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ce0:	2b0b      	cmp	r3, #11
 8018ce2:	d803      	bhi.n	8018cec <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018ce4:	4b2b      	ldr	r3, [pc, #172]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018ce6:	220c      	movs	r2, #12
 8018ce8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018cea:	e006      	b.n	8018cfa <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018cec:	4a29      	ldr	r2, [pc, #164]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018cee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cf0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018cf2:	e002      	b.n	8018cfa <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018cf4:	4a27      	ldr	r2, [pc, #156]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018cf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cf8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018cfa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018cfe:	4b25      	ldr	r3, [pc, #148]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018d00:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018d02:	4b25      	ldr	r3, [pc, #148]	; (8018d98 <RadioSetRxConfig+0x3f4>)
 8018d04:	781a      	ldrb	r2, [r3, #0]
 8018d06:	4b23      	ldr	r3, [pc, #140]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018d08:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018d0a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018d0e:	4b21      	ldr	r3, [pc, #132]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018d10:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018d14:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8018d18:	4b1e      	ldr	r3, [pc, #120]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018d1e:	f000 fbba 	bl	8019496 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018d22:	2001      	movs	r0, #1
 8018d24:	f7ff fd6a 	bl	80187fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d28:	481c      	ldr	r0, [pc, #112]	; (8018d9c <RadioSetRxConfig+0x3f8>)
 8018d2a:	f002 f94b 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d2e:	481c      	ldr	r0, [pc, #112]	; (8018da0 <RadioSetRxConfig+0x3fc>)
 8018d30:	f002 fa1a 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018d34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f001 feb8 	bl	801aaae <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018d3e:	4b15      	ldr	r3, [pc, #84]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018d40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d10d      	bne.n	8018d64 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018d48:	f240 7036 	movw	r0, #1846	; 0x736
 8018d4c:	f002 fb68 	bl	801b420 <SUBGRF_ReadRegister>
 8018d50:	4603      	mov	r3, r0
 8018d52:	f023 0304 	bic.w	r3, r3, #4
 8018d56:	b2db      	uxtb	r3, r3
 8018d58:	4619      	mov	r1, r3
 8018d5a:	f240 7036 	movw	r0, #1846	; 0x736
 8018d5e:	f002 fb4b 	bl	801b3f8 <SUBGRF_WriteRegister>
 8018d62:	e00c      	b.n	8018d7e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018d64:	f240 7036 	movw	r0, #1846	; 0x736
 8018d68:	f002 fb5a 	bl	801b420 <SUBGRF_ReadRegister>
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	f043 0304 	orr.w	r3, r3, #4
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	4619      	mov	r1, r3
 8018d76:	f240 7036 	movw	r0, #1846	; 0x736
 8018d7a:	f002 fb3d 	bl	801b3f8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018d7e:	4b05      	ldr	r3, [pc, #20]	; (8018d94 <RadioSetRxConfig+0x3f0>)
 8018d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d84:	609a      	str	r2, [r3, #8]
            break;
 8018d86:	e000      	b.n	8018d8a <RadioSetRxConfig+0x3e6>
            break;
 8018d88:	bf00      	nop
    }
}
 8018d8a:	bf00      	nop
 8018d8c:	3728      	adds	r7, #40	; 0x28
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}
 8018d92:	bf00      	nop
 8018d94:	20001e74 	.word	0x20001e74
 8018d98:	20000138 	.word	0x20000138
 8018d9c:	20001eac 	.word	0x20001eac
 8018da0:	20001e82 	.word	0x20001e82

08018da4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b086      	sub	sp, #24
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	60ba      	str	r2, [r7, #8]
 8018dac:	607b      	str	r3, [r7, #4]
 8018dae:	4603      	mov	r3, r0
 8018db0:	73fb      	strb	r3, [r7, #15]
 8018db2:	460b      	mov	r3, r1
 8018db4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018db6:	f002 fdf6 	bl	801b9a6 <RFW_DeInit>
    switch( modem )
 8018dba:	7bfb      	ldrb	r3, [r7, #15]
 8018dbc:	2b04      	cmp	r3, #4
 8018dbe:	f000 80c7 	beq.w	8018f50 <RadioSetTxConfig+0x1ac>
 8018dc2:	2b04      	cmp	r3, #4
 8018dc4:	f300 80d6 	bgt.w	8018f74 <RadioSetTxConfig+0x1d0>
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d002      	beq.n	8018dd2 <RadioSetTxConfig+0x2e>
 8018dcc:	2b01      	cmp	r3, #1
 8018dce:	d059      	beq.n	8018e84 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018dd0:	e0d0      	b.n	8018f74 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018dd2:	4b74      	ldr	r3, [pc, #464]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018dda:	4a72      	ldr	r2, [pc, #456]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ddc:	6a3b      	ldr	r3, [r7, #32]
 8018dde:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018de0:	4b70      	ldr	r3, [pc, #448]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018de2:	220b      	movs	r2, #11
 8018de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018de8:	6878      	ldr	r0, [r7, #4]
 8018dea:	f002 fd0f 	bl	801b80c <SUBGRF_GetFskBandwidthRegValue>
 8018dee:	4603      	mov	r3, r0
 8018df0:	461a      	mov	r2, r3
 8018df2:	4b6c      	ldr	r3, [pc, #432]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018df8:	4a6a      	ldr	r2, [pc, #424]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018dfe:	4b69      	ldr	r3, [pc, #420]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e00:	2200      	movs	r2, #0
 8018e02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018e04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018e06:	00db      	lsls	r3, r3, #3
 8018e08:	b29a      	uxth	r2, r3
 8018e0a:	4b66      	ldr	r3, [pc, #408]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e0c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018e0e:	4b65      	ldr	r3, [pc, #404]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e10:	2204      	movs	r2, #4
 8018e12:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018e14:	4b63      	ldr	r3, [pc, #396]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e16:	2218      	movs	r2, #24
 8018e18:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018e1a:	4b62      	ldr	r3, [pc, #392]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e1c:	2200      	movs	r2, #0
 8018e1e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018e20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018e24:	f083 0301 	eor.w	r3, r3, #1
 8018e28:	b2db      	uxtb	r3, r3
 8018e2a:	461a      	mov	r2, r3
 8018e2c:	4b5d      	ldr	r3, [pc, #372]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e2e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018e30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d003      	beq.n	8018e40 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018e38:	4b5a      	ldr	r3, [pc, #360]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e3a:	22f2      	movs	r2, #242	; 0xf2
 8018e3c:	75da      	strb	r2, [r3, #23]
 8018e3e:	e002      	b.n	8018e46 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018e40:	4b58      	ldr	r3, [pc, #352]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e42:	2201      	movs	r2, #1
 8018e44:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018e46:	4b57      	ldr	r3, [pc, #348]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e48:	2201      	movs	r2, #1
 8018e4a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018e4c:	f000 fb23 	bl	8019496 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018e50:	2000      	movs	r0, #0
 8018e52:	f7ff fcd3 	bl	80187fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e56:	4854      	ldr	r0, [pc, #336]	; (8018fa8 <RadioSetTxConfig+0x204>)
 8018e58:	f002 f8b4 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e5c:	4853      	ldr	r0, [pc, #332]	; (8018fac <RadioSetTxConfig+0x208>)
 8018e5e:	f002 f983 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018e62:	4a53      	ldr	r2, [pc, #332]	; (8018fb0 <RadioSetTxConfig+0x20c>)
 8018e64:	f107 0310 	add.w	r3, r7, #16
 8018e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018e70:	f107 0310 	add.w	r3, r7, #16
 8018e74:	4618      	mov	r0, r3
 8018e76:	f001 fc44 	bl	801a702 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018e7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018e7e:	f001 fc8f 	bl	801a7a0 <SUBGRF_SetWhiteningSeed>
            break;
 8018e82:	e078      	b.n	8018f76 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018e84:	4b47      	ldr	r3, [pc, #284]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e86:	2201      	movs	r2, #1
 8018e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018e8c:	6a3b      	ldr	r3, [r7, #32]
 8018e8e:	b2da      	uxtb	r2, r3
 8018e90:	4b44      	ldr	r3, [pc, #272]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018e96:	4a47      	ldr	r2, [pc, #284]	; (8018fb4 <RadioSetTxConfig+0x210>)
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	4413      	add	r3, r2
 8018e9c:	781a      	ldrb	r2, [r3, #0]
 8018e9e:	4b41      	ldr	r3, [pc, #260]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018ea4:	4a3f      	ldr	r2, [pc, #252]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ea6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018eaa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d105      	bne.n	8018ec0 <RadioSetTxConfig+0x11c>
 8018eb4:	6a3b      	ldr	r3, [r7, #32]
 8018eb6:	2b0b      	cmp	r3, #11
 8018eb8:	d008      	beq.n	8018ecc <RadioSetTxConfig+0x128>
 8018eba:	6a3b      	ldr	r3, [r7, #32]
 8018ebc:	2b0c      	cmp	r3, #12
 8018ebe:	d005      	beq.n	8018ecc <RadioSetTxConfig+0x128>
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	2b01      	cmp	r3, #1
 8018ec4:	d107      	bne.n	8018ed6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018ec6:	6a3b      	ldr	r3, [r7, #32]
 8018ec8:	2b0c      	cmp	r3, #12
 8018eca:	d104      	bne.n	8018ed6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018ecc:	4b35      	ldr	r3, [pc, #212]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ece:	2201      	movs	r2, #1
 8018ed0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018ed4:	e003      	b.n	8018ede <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018ed6:	4b33      	ldr	r3, [pc, #204]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ed8:	2200      	movs	r2, #0
 8018eda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018ede:	4b31      	ldr	r3, [pc, #196]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ee0:	2201      	movs	r2, #1
 8018ee2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ee4:	4b2f      	ldr	r3, [pc, #188]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018eea:	2b05      	cmp	r3, #5
 8018eec:	d004      	beq.n	8018ef8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018eee:	4b2d      	ldr	r3, [pc, #180]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ef4:	2b06      	cmp	r3, #6
 8018ef6:	d10a      	bne.n	8018f0e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018ef8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018efa:	2b0b      	cmp	r3, #11
 8018efc:	d803      	bhi.n	8018f06 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018efe:	4b29      	ldr	r3, [pc, #164]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f00:	220c      	movs	r2, #12
 8018f02:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018f04:	e006      	b.n	8018f14 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018f06:	4a27      	ldr	r2, [pc, #156]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018f0a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018f0c:	e002      	b.n	8018f14 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018f0e:	4a25      	ldr	r2, [pc, #148]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018f12:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018f14:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018f18:	4b22      	ldr	r3, [pc, #136]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f1a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018f1c:	4b26      	ldr	r3, [pc, #152]	; (8018fb8 <RadioSetTxConfig+0x214>)
 8018f1e:	781a      	ldrb	r2, [r3, #0]
 8018f20:	4b20      	ldr	r3, [pc, #128]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f22:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018f24:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018f28:	4b1e      	ldr	r3, [pc, #120]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f2a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018f2e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018f32:	4b1c      	ldr	r3, [pc, #112]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018f38:	f000 faad 	bl	8019496 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018f3c:	2001      	movs	r0, #1
 8018f3e:	f7ff fc5d 	bl	80187fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f42:	4819      	ldr	r0, [pc, #100]	; (8018fa8 <RadioSetTxConfig+0x204>)
 8018f44:	f002 f83e 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f48:	4818      	ldr	r0, [pc, #96]	; (8018fac <RadioSetTxConfig+0x208>)
 8018f4a:	f002 f90d 	bl	801b168 <SUBGRF_SetPacketParams>
            break;
 8018f4e:	e012      	b.n	8018f76 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018f50:	2004      	movs	r0, #4
 8018f52:	f7ff fc53 	bl	80187fc <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018f56:	4b13      	ldr	r3, [pc, #76]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f58:	2202      	movs	r2, #2
 8018f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018f5e:	4a11      	ldr	r2, [pc, #68]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f60:	6a3b      	ldr	r3, [r7, #32]
 8018f62:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018f64:	4b0f      	ldr	r3, [pc, #60]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f66:	2216      	movs	r2, #22
 8018f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f6c:	480e      	ldr	r0, [pc, #56]	; (8018fa8 <RadioSetTxConfig+0x204>)
 8018f6e:	f002 f829 	bl	801afc4 <SUBGRF_SetModulationParams>
            break;
 8018f72:	e000      	b.n	8018f76 <RadioSetTxConfig+0x1d2>
            break;
 8018f74:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f002 fb58 	bl	801b630 <SUBGRF_SetRfTxPower>
 8018f80:	4603      	mov	r3, r0
 8018f82:	461a      	mov	r2, r3
 8018f84:	4b07      	ldr	r3, [pc, #28]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f86:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018f8a:	4b06      	ldr	r3, [pc, #24]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018f90:	4618      	mov	r0, r3
 8018f92:	f002 fd1c 	bl	801b9ce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018f96:	4a03      	ldr	r2, [pc, #12]	; (8018fa4 <RadioSetTxConfig+0x200>)
 8018f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f9a:	6053      	str	r3, [r2, #4]
}
 8018f9c:	bf00      	nop
 8018f9e:	3718      	adds	r7, #24
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}
 8018fa4:	20001e74 	.word	0x20001e74
 8018fa8:	20001eac 	.word	0x20001eac
 8018fac:	20001e82 	.word	0x20001e82
 8018fb0:	080201b4 	.word	0x080201b4
 8018fb4:	08020724 	.word	0x08020724
 8018fb8:	20000138 	.word	0x20000138

08018fbc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018fbc:	b480      	push	{r7}
 8018fbe:	b083      	sub	sp, #12
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
    return true;
 8018fc4:	2301      	movs	r3, #1
}
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	370c      	adds	r7, #12
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bc80      	pop	{r7}
 8018fce:	4770      	bx	lr

08018fd0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018fd0:	b480      	push	{r7}
 8018fd2:	b085      	sub	sp, #20
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018fde:	79fb      	ldrb	r3, [r7, #7]
 8018fe0:	2b0a      	cmp	r3, #10
 8018fe2:	d83e      	bhi.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
 8018fe4:	a201      	add	r2, pc, #4	; (adr r2, 8018fec <RadioGetLoRaBandwidthInHz+0x1c>)
 8018fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fea:	bf00      	nop
 8018fec:	08019019 	.word	0x08019019
 8018ff0:	08019029 	.word	0x08019029
 8018ff4:	08019039 	.word	0x08019039
 8018ff8:	08019049 	.word	0x08019049
 8018ffc:	08019051 	.word	0x08019051
 8019000:	08019057 	.word	0x08019057
 8019004:	0801905d 	.word	0x0801905d
 8019008:	08019063 	.word	0x08019063
 801900c:	08019021 	.word	0x08019021
 8019010:	08019031 	.word	0x08019031
 8019014:	08019041 	.word	0x08019041
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019018:	f641 6384 	movw	r3, #7812	; 0x1e84
 801901c:	60fb      	str	r3, [r7, #12]
        break;
 801901e:	e020      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019020:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019024:	60fb      	str	r3, [r7, #12]
        break;
 8019026:	e01c      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019028:	f643 5309 	movw	r3, #15625	; 0x3d09
 801902c:	60fb      	str	r3, [r7, #12]
        break;
 801902e:	e018      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019030:	f245 1361 	movw	r3, #20833	; 0x5161
 8019034:	60fb      	str	r3, [r7, #12]
        break;
 8019036:	e014      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019038:	f647 2312 	movw	r3, #31250	; 0x7a12
 801903c:	60fb      	str	r3, [r7, #12]
        break;
 801903e:	e010      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019040:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019044:	60fb      	str	r3, [r7, #12]
        break;
 8019046:	e00c      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019048:	f24f 4324 	movw	r3, #62500	; 0xf424
 801904c:	60fb      	str	r3, [r7, #12]
        break;
 801904e:	e008      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019050:	4b07      	ldr	r3, [pc, #28]	; (8019070 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019052:	60fb      	str	r3, [r7, #12]
        break;
 8019054:	e005      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019056:	4b07      	ldr	r3, [pc, #28]	; (8019074 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019058:	60fb      	str	r3, [r7, #12]
        break;
 801905a:	e002      	b.n	8019062 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801905c:	4b06      	ldr	r3, [pc, #24]	; (8019078 <RadioGetLoRaBandwidthInHz+0xa8>)
 801905e:	60fb      	str	r3, [r7, #12]
        break;
 8019060:	bf00      	nop
    }

    return bandwidthInHz;
 8019062:	68fb      	ldr	r3, [r7, #12]
}
 8019064:	4618      	mov	r0, r3
 8019066:	3714      	adds	r7, #20
 8019068:	46bd      	mov	sp, r7
 801906a:	bc80      	pop	{r7}
 801906c:	4770      	bx	lr
 801906e:	bf00      	nop
 8019070:	0001e848 	.word	0x0001e848
 8019074:	0003d090 	.word	0x0003d090
 8019078:	0007a120 	.word	0x0007a120

0801907c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801907c:	b480      	push	{r7}
 801907e:	b083      	sub	sp, #12
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	4608      	mov	r0, r1
 8019086:	4611      	mov	r1, r2
 8019088:	461a      	mov	r2, r3
 801908a:	4603      	mov	r3, r0
 801908c:	70fb      	strb	r3, [r7, #3]
 801908e:	460b      	mov	r3, r1
 8019090:	803b      	strh	r3, [r7, #0]
 8019092:	4613      	mov	r3, r2
 8019094:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8019096:	883b      	ldrh	r3, [r7, #0]
 8019098:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801909a:	78ba      	ldrb	r2, [r7, #2]
 801909c:	f082 0201 	eor.w	r2, r2, #1
 80190a0:	b2d2      	uxtb	r2, r2
 80190a2:	2a00      	cmp	r2, #0
 80190a4:	d001      	beq.n	80190aa <RadioGetGfskTimeOnAirNumerator+0x2e>
 80190a6:	2208      	movs	r2, #8
 80190a8:	e000      	b.n	80190ac <RadioGetGfskTimeOnAirNumerator+0x30>
 80190aa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80190ac:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80190ae:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80190b2:	7c3b      	ldrb	r3, [r7, #16]
 80190b4:	7d39      	ldrb	r1, [r7, #20]
 80190b6:	2900      	cmp	r1, #0
 80190b8:	d001      	beq.n	80190be <RadioGetGfskTimeOnAirNumerator+0x42>
 80190ba:	2102      	movs	r1, #2
 80190bc:	e000      	b.n	80190c0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80190be:	2100      	movs	r1, #0
 80190c0:	440b      	add	r3, r1
 80190c2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80190c4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	370c      	adds	r7, #12
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bc80      	pop	{r7}
 80190ce:	4770      	bx	lr

080190d0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80190d0:	b480      	push	{r7}
 80190d2:	b08b      	sub	sp, #44	; 0x2c
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	60b9      	str	r1, [r7, #8]
 80190da:	4611      	mov	r1, r2
 80190dc:	461a      	mov	r2, r3
 80190de:	460b      	mov	r3, r1
 80190e0:	71fb      	strb	r3, [r7, #7]
 80190e2:	4613      	mov	r3, r2
 80190e4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80190e6:	79fb      	ldrb	r3, [r7, #7]
 80190e8:	3304      	adds	r3, #4
 80190ea:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80190ec:	2300      	movs	r3, #0
 80190ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	2b05      	cmp	r3, #5
 80190f6:	d002      	beq.n	80190fe <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80190f8:	68bb      	ldr	r3, [r7, #8]
 80190fa:	2b06      	cmp	r3, #6
 80190fc:	d104      	bne.n	8019108 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80190fe:	88bb      	ldrh	r3, [r7, #4]
 8019100:	2b0b      	cmp	r3, #11
 8019102:	d801      	bhi.n	8019108 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019104:	230c      	movs	r3, #12
 8019106:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d105      	bne.n	801911a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	2b0b      	cmp	r3, #11
 8019112:	d008      	beq.n	8019126 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	2b0c      	cmp	r3, #12
 8019118:	d005      	beq.n	8019126 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	2b01      	cmp	r3, #1
 801911e:	d105      	bne.n	801912c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	2b0c      	cmp	r3, #12
 8019124:	d102      	bne.n	801912c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019126:	2301      	movs	r3, #1
 8019128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801912c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019130:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019132:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019136:	2a00      	cmp	r2, #0
 8019138:	d001      	beq.n	801913e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801913a:	2210      	movs	r2, #16
 801913c:	e000      	b.n	8019140 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801913e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019140:	4413      	add	r3, r2
 8019142:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019148:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801914a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801914e:	2a00      	cmp	r2, #0
 8019150:	d001      	beq.n	8019156 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019152:	2200      	movs	r2, #0
 8019154:	e000      	b.n	8019158 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019156:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019158:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801915a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	2b06      	cmp	r3, #6
 8019160:	d803      	bhi.n	801916a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019162:	68bb      	ldr	r3, [r7, #8]
 8019164:	009b      	lsls	r3, r3, #2
 8019166:	623b      	str	r3, [r7, #32]
 8019168:	e00e      	b.n	8019188 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801916a:	69fb      	ldr	r3, [r7, #28]
 801916c:	3308      	adds	r3, #8
 801916e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019174:	2b00      	cmp	r3, #0
 8019176:	d004      	beq.n	8019182 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	3b02      	subs	r3, #2
 801917c:	009b      	lsls	r3, r3, #2
 801917e:	623b      	str	r3, [r7, #32]
 8019180:	e002      	b.n	8019188 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019182:	68bb      	ldr	r3, [r7, #8]
 8019184:	009b      	lsls	r3, r3, #2
 8019186:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019188:	69fb      	ldr	r3, [r7, #28]
 801918a:	2b00      	cmp	r3, #0
 801918c:	da01      	bge.n	8019192 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801918e:	2300      	movs	r3, #0
 8019190:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019192:	69fa      	ldr	r2, [r7, #28]
 8019194:	6a3b      	ldr	r3, [r7, #32]
 8019196:	4413      	add	r3, r2
 8019198:	1e5a      	subs	r2, r3, #1
 801919a:	6a3b      	ldr	r3, [r7, #32]
 801919c:	fb92 f3f3 	sdiv	r3, r2, r3
 80191a0:	697a      	ldr	r2, [r7, #20]
 80191a2:	fb03 f202 	mul.w	r2, r3, r2
 80191a6:	88bb      	ldrh	r3, [r7, #4]
 80191a8:	4413      	add	r3, r2
    int32_t intermediate =
 80191aa:	330c      	adds	r3, #12
 80191ac:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80191ae:	68bb      	ldr	r3, [r7, #8]
 80191b0:	2b06      	cmp	r3, #6
 80191b2:	d802      	bhi.n	80191ba <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80191b4:	69bb      	ldr	r3, [r7, #24]
 80191b6:	3302      	adds	r3, #2
 80191b8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80191ba:	69bb      	ldr	r3, [r7, #24]
 80191bc:	009b      	lsls	r3, r3, #2
 80191be:	1c5a      	adds	r2, r3, #1
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	3b02      	subs	r3, #2
 80191c4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80191c8:	4618      	mov	r0, r3
 80191ca:	372c      	adds	r7, #44	; 0x2c
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bc80      	pop	{r7}
 80191d0:	4770      	bx	lr
	...

080191d4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b08a      	sub	sp, #40	; 0x28
 80191d8:	af04      	add	r7, sp, #16
 80191da:	60b9      	str	r1, [r7, #8]
 80191dc:	607a      	str	r2, [r7, #4]
 80191de:	461a      	mov	r2, r3
 80191e0:	4603      	mov	r3, r0
 80191e2:	73fb      	strb	r3, [r7, #15]
 80191e4:	4613      	mov	r3, r2
 80191e6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80191e8:	2300      	movs	r3, #0
 80191ea:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80191ec:	2301      	movs	r3, #1
 80191ee:	613b      	str	r3, [r7, #16]

    switch( modem )
 80191f0:	7bfb      	ldrb	r3, [r7, #15]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d002      	beq.n	80191fc <RadioTimeOnAir+0x28>
 80191f6:	2b01      	cmp	r3, #1
 80191f8:	d017      	beq.n	801922a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80191fa:	e035      	b.n	8019268 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80191fc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019200:	8c3a      	ldrh	r2, [r7, #32]
 8019202:	7bb9      	ldrb	r1, [r7, #14]
 8019204:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019208:	9301      	str	r3, [sp, #4]
 801920a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801920e:	9300      	str	r3, [sp, #0]
 8019210:	4603      	mov	r3, r0
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f7ff ff32 	bl	801907c <RadioGetGfskTimeOnAirNumerator>
 8019218:	4603      	mov	r3, r0
 801921a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801921e:	fb02 f303 	mul.w	r3, r2, r3
 8019222:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	613b      	str	r3, [r7, #16]
        break;
 8019228:	e01e      	b.n	8019268 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801922a:	8c39      	ldrh	r1, [r7, #32]
 801922c:	7bba      	ldrb	r2, [r7, #14]
 801922e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019232:	9302      	str	r3, [sp, #8]
 8019234:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019238:	9301      	str	r3, [sp, #4]
 801923a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801923e:	9300      	str	r3, [sp, #0]
 8019240:	460b      	mov	r3, r1
 8019242:	6879      	ldr	r1, [r7, #4]
 8019244:	68b8      	ldr	r0, [r7, #8]
 8019246:	f7ff ff43 	bl	80190d0 <RadioGetLoRaTimeOnAirNumerator>
 801924a:	4603      	mov	r3, r0
 801924c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019250:	fb02 f303 	mul.w	r3, r2, r3
 8019254:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019256:	4a0a      	ldr	r2, [pc, #40]	; (8019280 <RadioTimeOnAir+0xac>)
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	4413      	add	r3, r2
 801925c:	781b      	ldrb	r3, [r3, #0]
 801925e:	4618      	mov	r0, r3
 8019260:	f7ff feb6 	bl	8018fd0 <RadioGetLoRaBandwidthInHz>
 8019264:	6138      	str	r0, [r7, #16]
        break;
 8019266:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8019268:	697a      	ldr	r2, [r7, #20]
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	4413      	add	r3, r2
 801926e:	1e5a      	subs	r2, r3, #1
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019276:	4618      	mov	r0, r3
 8019278:	3718      	adds	r7, #24
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}
 801927e:	bf00      	nop
 8019280:	08020724 	.word	0x08020724

08019284 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b084      	sub	sp, #16
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
 801928c:	460b      	mov	r3, r1
 801928e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019290:	2300      	movs	r3, #0
 8019292:	2200      	movs	r2, #0
 8019294:	f240 2101 	movw	r1, #513	; 0x201
 8019298:	f240 2001 	movw	r0, #513	; 0x201
 801929c:	f001 fcfc 	bl	801ac98 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80192a0:	4b6f      	ldr	r3, [pc, #444]	; (8019460 <RadioSend+0x1dc>)
 80192a2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80192a6:	2101      	movs	r1, #1
 80192a8:	4618      	mov	r0, r3
 80192aa:	f002 f999 	bl	801b5e0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80192ae:	4b6c      	ldr	r3, [pc, #432]	; (8019460 <RadioSend+0x1dc>)
 80192b0:	781b      	ldrb	r3, [r3, #0]
 80192b2:	2b01      	cmp	r3, #1
 80192b4:	d112      	bne.n	80192dc <RadioSend+0x58>
 80192b6:	4b6a      	ldr	r3, [pc, #424]	; (8019460 <RadioSend+0x1dc>)
 80192b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80192bc:	2b06      	cmp	r3, #6
 80192be:	d10d      	bne.n	80192dc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80192c0:	f640 0089 	movw	r0, #2185	; 0x889
 80192c4:	f002 f8ac 	bl	801b420 <SUBGRF_ReadRegister>
 80192c8:	4603      	mov	r3, r0
 80192ca:	f023 0304 	bic.w	r3, r3, #4
 80192ce:	b2db      	uxtb	r3, r3
 80192d0:	4619      	mov	r1, r3
 80192d2:	f640 0089 	movw	r0, #2185	; 0x889
 80192d6:	f002 f88f 	bl	801b3f8 <SUBGRF_WriteRegister>
 80192da:	e00c      	b.n	80192f6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80192dc:	f640 0089 	movw	r0, #2185	; 0x889
 80192e0:	f002 f89e 	bl	801b420 <SUBGRF_ReadRegister>
 80192e4:	4603      	mov	r3, r0
 80192e6:	f043 0304 	orr.w	r3, r3, #4
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	4619      	mov	r1, r3
 80192ee:	f640 0089 	movw	r0, #2185	; 0x889
 80192f2:	f002 f881 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80192f6:	4b5a      	ldr	r3, [pc, #360]	; (8019460 <RadioSend+0x1dc>)
 80192f8:	781b      	ldrb	r3, [r3, #0]
 80192fa:	2b04      	cmp	r3, #4
 80192fc:	f200 80a1 	bhi.w	8019442 <RadioSend+0x1be>
 8019300:	a201      	add	r2, pc, #4	; (adr r2, 8019308 <RadioSend+0x84>)
 8019302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019306:	bf00      	nop
 8019308:	08019337 	.word	0x08019337
 801930c:	0801931d 	.word	0x0801931d
 8019310:	08019337 	.word	0x08019337
 8019314:	0801938b 	.word	0x0801938b
 8019318:	080193ab 	.word	0x080193ab
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801931c:	4a50      	ldr	r2, [pc, #320]	; (8019460 <RadioSend+0x1dc>)
 801931e:	78fb      	ldrb	r3, [r7, #3]
 8019320:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019322:	4850      	ldr	r0, [pc, #320]	; (8019464 <RadioSend+0x1e0>)
 8019324:	f001 ff20 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019328:	78fb      	ldrb	r3, [r7, #3]
 801932a:	2200      	movs	r2, #0
 801932c:	4619      	mov	r1, r3
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	f001 f9d4 	bl	801a6dc <SUBGRF_SendPayload>
            break;
 8019334:	e086      	b.n	8019444 <RadioSend+0x1c0>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019336:	f002 fb3c 	bl	801b9b2 <RFW_Is_Init>
 801933a:	4603      	mov	r3, r0
 801933c:	2b01      	cmp	r3, #1
 801933e:	d117      	bne.n	8019370 <RadioSend+0xec>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019340:	f107 020d 	add.w	r2, r7, #13
 8019344:	78fb      	ldrb	r3, [r7, #3]
 8019346:	4619      	mov	r1, r3
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f002 fb4a 	bl	801b9e2 <RFW_TransmitInit>
 801934e:	4603      	mov	r3, r0
 8019350:	2b00      	cmp	r3, #0
 8019352:	f040 8081 	bne.w	8019458 <RadioSend+0x1d4>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019356:	7b7a      	ldrb	r2, [r7, #13]
 8019358:	4b41      	ldr	r3, [pc, #260]	; (8019460 <RadioSend+0x1dc>)
 801935a:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801935c:	4841      	ldr	r0, [pc, #260]	; (8019464 <RadioSend+0x1e0>)
 801935e:	f001 ff03 	bl	801b168 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8019362:	7b7b      	ldrb	r3, [r7, #13]
 8019364:	2200      	movs	r2, #0
 8019366:	4619      	mov	r1, r3
 8019368:	6878      	ldr	r0, [r7, #4]
 801936a:	f001 f9b7 	bl	801a6dc <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801936e:	e069      	b.n	8019444 <RadioSend+0x1c0>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019370:	4a3b      	ldr	r2, [pc, #236]	; (8019460 <RadioSend+0x1dc>)
 8019372:	78fb      	ldrb	r3, [r7, #3]
 8019374:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019376:	483b      	ldr	r0, [pc, #236]	; (8019464 <RadioSend+0x1e0>)
 8019378:	f001 fef6 	bl	801b168 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801937c:	78fb      	ldrb	r3, [r7, #3]
 801937e:	2200      	movs	r2, #0
 8019380:	4619      	mov	r1, r3
 8019382:	6878      	ldr	r0, [r7, #4]
 8019384:	f001 f9aa 	bl	801a6dc <SUBGRF_SendPayload>
            break;
 8019388:	e05c      	b.n	8019444 <RadioSend+0x1c0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801938a:	4b35      	ldr	r3, [pc, #212]	; (8019460 <RadioSend+0x1dc>)
 801938c:	2202      	movs	r2, #2
 801938e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019390:	4a33      	ldr	r2, [pc, #204]	; (8019460 <RadioSend+0x1dc>)
 8019392:	78fb      	ldrb	r3, [r7, #3]
 8019394:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019396:	4833      	ldr	r0, [pc, #204]	; (8019464 <RadioSend+0x1e0>)
 8019398:	f001 fee6 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801939c:	78fb      	ldrb	r3, [r7, #3]
 801939e:	2200      	movs	r2, #0
 80193a0:	4619      	mov	r1, r3
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	f001 f99a 	bl	801a6dc <SUBGRF_SendPayload>
            break;
 80193a8:	e04c      	b.n	8019444 <RadioSend+0x1c0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80193aa:	78fb      	ldrb	r3, [r7, #3]
 80193ac:	461a      	mov	r2, r3
 80193ae:	6879      	ldr	r1, [r7, #4]
 80193b0:	482d      	ldr	r0, [pc, #180]	; (8019468 <RadioSend+0x1e4>)
 80193b2:	f000 fc8a 	bl	8019cca <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80193b6:	4b2a      	ldr	r3, [pc, #168]	; (8019460 <RadioSend+0x1dc>)
 80193b8:	2202      	movs	r2, #2
 80193ba:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80193bc:	78fb      	ldrb	r3, [r7, #3]
 80193be:	3301      	adds	r3, #1
 80193c0:	b2da      	uxtb	r2, r3
 80193c2:	4b27      	ldr	r3, [pc, #156]	; (8019460 <RadioSend+0x1dc>)
 80193c4:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80193c6:	4827      	ldr	r0, [pc, #156]	; (8019464 <RadioSend+0x1e0>)
 80193c8:	f001 fece 	bl	801b168 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80193cc:	2100      	movs	r1, #0
 80193ce:	20f1      	movs	r0, #241	; 0xf1
 80193d0:	f000 f95d 	bl	801968e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80193d4:	2100      	movs	r1, #0
 80193d6:	20f0      	movs	r0, #240	; 0xf0
 80193d8:	f000 f959 	bl	801968e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80193dc:	4b20      	ldr	r3, [pc, #128]	; (8019460 <RadioSend+0x1dc>)
 80193de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193e0:	2b64      	cmp	r3, #100	; 0x64
 80193e2:	d108      	bne.n	80193f6 <RadioSend+0x172>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80193e4:	2170      	movs	r1, #112	; 0x70
 80193e6:	20f3      	movs	r0, #243	; 0xf3
 80193e8:	f000 f951 	bl	801968e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80193ec:	211d      	movs	r1, #29
 80193ee:	20f2      	movs	r0, #242	; 0xf2
 80193f0:	f000 f94d 	bl	801968e <RadioWrite>
 80193f4:	e007      	b.n	8019406 <RadioSend+0x182>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80193f6:	21e1      	movs	r1, #225	; 0xe1
 80193f8:	20f3      	movs	r0, #243	; 0xf3
 80193fa:	f000 f948 	bl	801968e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80193fe:	2104      	movs	r1, #4
 8019400:	20f2      	movs	r0, #242	; 0xf2
 8019402:	f000 f944 	bl	801968e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019406:	78fb      	ldrb	r3, [r7, #3]
 8019408:	b29b      	uxth	r3, r3
 801940a:	00db      	lsls	r3, r3, #3
 801940c:	b29b      	uxth	r3, r3
 801940e:	3302      	adds	r3, #2
 8019410:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019412:	89fb      	ldrh	r3, [r7, #14]
 8019414:	0a1b      	lsrs	r3, r3, #8
 8019416:	b29b      	uxth	r3, r3
 8019418:	b2db      	uxtb	r3, r3
 801941a:	4619      	mov	r1, r3
 801941c:	20f4      	movs	r0, #244	; 0xf4
 801941e:	f000 f936 	bl	801968e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019422:	89fb      	ldrh	r3, [r7, #14]
 8019424:	b2db      	uxtb	r3, r3
 8019426:	4619      	mov	r1, r3
 8019428:	20f5      	movs	r0, #245	; 0xf5
 801942a:	f000 f930 	bl	801968e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801942e:	78fb      	ldrb	r3, [r7, #3]
 8019430:	3301      	adds	r3, #1
 8019432:	b2db      	uxtb	r3, r3
 8019434:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019438:	4619      	mov	r1, r3
 801943a:	480b      	ldr	r0, [pc, #44]	; (8019468 <RadioSend+0x1e4>)
 801943c:	f001 f94e 	bl	801a6dc <SUBGRF_SendPayload>
            break;
 8019440:	e000      	b.n	8019444 <RadioSend+0x1c0>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019442:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019444:	4b06      	ldr	r3, [pc, #24]	; (8019460 <RadioSend+0x1dc>)
 8019446:	685b      	ldr	r3, [r3, #4]
 8019448:	4619      	mov	r1, r3
 801944a:	4808      	ldr	r0, [pc, #32]	; (801946c <RadioSend+0x1e8>)
 801944c:	f003 fa54 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019450:	4806      	ldr	r0, [pc, #24]	; (801946c <RadioSend+0x1e8>)
 8019452:	f003 f973 	bl	801c73c <UTIL_TIMER_Start>
 8019456:	e000      	b.n	801945a <RadioSend+0x1d6>
                return;
 8019458:	bf00      	nop
}
 801945a:	3710      	adds	r7, #16
 801945c:	46bd      	mov	sp, r7
 801945e:	bd80      	pop	{r7, pc}
 8019460:	20001e74 	.word	0x20001e74
 8019464:	20001e82 	.word	0x20001e82
 8019468:	20001d70 	.word	0x20001d70
 801946c:	20001ed0 	.word	0x20001ed0

08019470 <RadioSleep>:

static void RadioSleep( void )
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019476:	2300      	movs	r3, #0
 8019478:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801947a:	793b      	ldrb	r3, [r7, #4]
 801947c:	f043 0304 	orr.w	r3, r3, #4
 8019480:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019482:	7938      	ldrb	r0, [r7, #4]
 8019484:	f001 fa06 	bl	801a894 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019488:	2002      	movs	r0, #2
 801948a:	f7e8 fe7b 	bl	8002184 <HAL_Delay>
}
 801948e:	bf00      	nop
 8019490:	3708      	adds	r7, #8
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}

08019496 <RadioStandby>:

static void RadioStandby( void )
{
 8019496:	b580      	push	{r7, lr}
 8019498:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801949a:	2000      	movs	r0, #0
 801949c:	f001 fa2c 	bl	801a8f8 <SUBGRF_SetStandby>
}
 80194a0:	bf00      	nop
 80194a2:	bd80      	pop	{r7, pc}

080194a4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b082      	sub	sp, #8
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80194ac:	f002 fa81 	bl	801b9b2 <RFW_Is_Init>
 80194b0:	4603      	mov	r3, r0
 80194b2:	2b01      	cmp	r3, #1
 80194b4:	d102      	bne.n	80194bc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80194b6:	f002 faa4 	bl	801ba02 <RFW_ReceiveInit>
 80194ba:	e007      	b.n	80194cc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80194bc:	2300      	movs	r3, #0
 80194be:	2200      	movs	r2, #0
 80194c0:	f240 2162 	movw	r1, #610	; 0x262
 80194c4:	f240 2062 	movw	r0, #610	; 0x262
 80194c8:	f001 fbe6 	bl	801ac98 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d006      	beq.n	80194e0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80194d2:	6879      	ldr	r1, [r7, #4]
 80194d4:	4811      	ldr	r0, [pc, #68]	; (801951c <RadioRx+0x78>)
 80194d6:	f003 fa0f 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80194da:	4810      	ldr	r0, [pc, #64]	; (801951c <RadioRx+0x78>)
 80194dc:	f003 f92e 	bl	801c73c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80194e0:	4b0f      	ldr	r3, [pc, #60]	; (8019520 <RadioRx+0x7c>)
 80194e2:	2200      	movs	r2, #0
 80194e4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80194e6:	4b0e      	ldr	r3, [pc, #56]	; (8019520 <RadioRx+0x7c>)
 80194e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80194ec:	2100      	movs	r1, #0
 80194ee:	4618      	mov	r0, r3
 80194f0:	f002 f876 	bl	801b5e0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80194f4:	4b0a      	ldr	r3, [pc, #40]	; (8019520 <RadioRx+0x7c>)
 80194f6:	785b      	ldrb	r3, [r3, #1]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d004      	beq.n	8019506 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80194fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019500:	f001 fa36 	bl	801a970 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019504:	e005      	b.n	8019512 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019506:	4b06      	ldr	r3, [pc, #24]	; (8019520 <RadioRx+0x7c>)
 8019508:	689b      	ldr	r3, [r3, #8]
 801950a:	019b      	lsls	r3, r3, #6
 801950c:	4618      	mov	r0, r3
 801950e:	f001 fa2f 	bl	801a970 <SUBGRF_SetRx>
}
 8019512:	bf00      	nop
 8019514:	3708      	adds	r7, #8
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}
 801951a:	bf00      	nop
 801951c:	20001ee8 	.word	0x20001ee8
 8019520:	20001e74 	.word	0x20001e74

08019524 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b082      	sub	sp, #8
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801952c:	f002 fa41 	bl	801b9b2 <RFW_Is_Init>
 8019530:	4603      	mov	r3, r0
 8019532:	2b01      	cmp	r3, #1
 8019534:	d102      	bne.n	801953c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019536:	f002 fa64 	bl	801ba02 <RFW_ReceiveInit>
 801953a:	e007      	b.n	801954c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801953c:	2300      	movs	r3, #0
 801953e:	2200      	movs	r2, #0
 8019540:	f240 2162 	movw	r1, #610	; 0x262
 8019544:	f240 2062 	movw	r0, #610	; 0x262
 8019548:	f001 fba6 	bl	801ac98 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d006      	beq.n	8019560 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019552:	6879      	ldr	r1, [r7, #4]
 8019554:	4811      	ldr	r0, [pc, #68]	; (801959c <RadioRxBoosted+0x78>)
 8019556:	f003 f9cf 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801955a:	4810      	ldr	r0, [pc, #64]	; (801959c <RadioRxBoosted+0x78>)
 801955c:	f003 f8ee 	bl	801c73c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019560:	4b0f      	ldr	r3, [pc, #60]	; (80195a0 <RadioRxBoosted+0x7c>)
 8019562:	2200      	movs	r2, #0
 8019564:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019566:	4b0e      	ldr	r3, [pc, #56]	; (80195a0 <RadioRxBoosted+0x7c>)
 8019568:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801956c:	2100      	movs	r1, #0
 801956e:	4618      	mov	r0, r3
 8019570:	f002 f836 	bl	801b5e0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019574:	4b0a      	ldr	r3, [pc, #40]	; (80195a0 <RadioRxBoosted+0x7c>)
 8019576:	785b      	ldrb	r3, [r3, #1]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d004      	beq.n	8019586 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801957c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019580:	f001 fa16 	bl	801a9b0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019584:	e005      	b.n	8019592 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019586:	4b06      	ldr	r3, [pc, #24]	; (80195a0 <RadioRxBoosted+0x7c>)
 8019588:	689b      	ldr	r3, [r3, #8]
 801958a:	019b      	lsls	r3, r3, #6
 801958c:	4618      	mov	r0, r3
 801958e:	f001 fa0f 	bl	801a9b0 <SUBGRF_SetRxBoosted>
}
 8019592:	bf00      	nop
 8019594:	3708      	adds	r7, #8
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
 801959a:	bf00      	nop
 801959c:	20001ee8 	.word	0x20001ee8
 80195a0:	20001e74 	.word	0x20001e74

080195a4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b082      	sub	sp, #8
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
 80195ac:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	005a      	lsls	r2, r3, #1
 80195b2:	683b      	ldr	r3, [r7, #0]
 80195b4:	4413      	add	r3, r2
 80195b6:	4a0c      	ldr	r2, [pc, #48]	; (80195e8 <RadioSetRxDutyCycle+0x44>)
 80195b8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80195ba:	2300      	movs	r3, #0
 80195bc:	2200      	movs	r2, #0
 80195be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80195c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80195c6:	f001 fb67 	bl	801ac98 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80195ca:	4b07      	ldr	r3, [pc, #28]	; (80195e8 <RadioSetRxDutyCycle+0x44>)
 80195cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80195d0:	2100      	movs	r1, #0
 80195d2:	4618      	mov	r0, r3
 80195d4:	f002 f804 	bl	801b5e0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80195d8:	6839      	ldr	r1, [r7, #0]
 80195da:	6878      	ldr	r0, [r7, #4]
 80195dc:	f001 fa0c 	bl	801a9f8 <SUBGRF_SetRxDutyCycle>
}
 80195e0:	bf00      	nop
 80195e2:	3708      	adds	r7, #8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	20001e74 	.word	0x20001e74

080195ec <RadioStartCad>:

static void RadioStartCad( void )
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80195f0:	4b09      	ldr	r3, [pc, #36]	; (8019618 <RadioStartCad+0x2c>)
 80195f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80195f6:	2100      	movs	r1, #0
 80195f8:	4618      	mov	r0, r3
 80195fa:	f001 fff1 	bl	801b5e0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80195fe:	2300      	movs	r3, #0
 8019600:	2200      	movs	r2, #0
 8019602:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019606:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801960a:	f001 fb45 	bl	801ac98 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801960e:	f001 fa1f 	bl	801aa50 <SUBGRF_SetCad>
}
 8019612:	bf00      	nop
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	20001e74 	.word	0x20001e74

0801961c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
 8019624:	460b      	mov	r3, r1
 8019626:	70fb      	strb	r3, [r7, #3]
 8019628:	4613      	mov	r3, r2
 801962a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801962c:	883b      	ldrh	r3, [r7, #0]
 801962e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019632:	fb02 f303 	mul.w	r3, r2, r3
 8019636:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f001 fb89 	bl	801ad50 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801963e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019642:	4618      	mov	r0, r3
 8019644:	f001 fff4 	bl	801b630 <SUBGRF_SetRfTxPower>
 8019648:	4603      	mov	r3, r0
 801964a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801964c:	7afb      	ldrb	r3, [r7, #11]
 801964e:	2101      	movs	r1, #1
 8019650:	4618      	mov	r0, r3
 8019652:	f001 ffc5 	bl	801b5e0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019656:	f001 fa09 	bl	801aa6c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801965a:	68f9      	ldr	r1, [r7, #12]
 801965c:	4804      	ldr	r0, [pc, #16]	; (8019670 <RadioSetTxContinuousWave+0x54>)
 801965e:	f003 f94b 	bl	801c8f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019662:	4803      	ldr	r0, [pc, #12]	; (8019670 <RadioSetTxContinuousWave+0x54>)
 8019664:	f003 f86a 	bl	801c73c <UTIL_TIMER_Start>
}
 8019668:	bf00      	nop
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}
 8019670:	20001ed0 	.word	0x20001ed0

08019674 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b082      	sub	sp, #8
 8019678:	af00      	add	r7, sp, #0
 801967a:	4603      	mov	r3, r0
 801967c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801967e:	f001 fe28 	bl	801b2d2 <SUBGRF_GetRssiInst>
 8019682:	4603      	mov	r3, r0
 8019684:	b21b      	sxth	r3, r3
}
 8019686:	4618      	mov	r0, r3
 8019688:	3708      	adds	r7, #8
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}

0801968e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801968e:	b580      	push	{r7, lr}
 8019690:	b082      	sub	sp, #8
 8019692:	af00      	add	r7, sp, #0
 8019694:	4603      	mov	r3, r0
 8019696:	460a      	mov	r2, r1
 8019698:	80fb      	strh	r3, [r7, #6]
 801969a:	4613      	mov	r3, r2
 801969c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801969e:	797a      	ldrb	r2, [r7, #5]
 80196a0:	88fb      	ldrh	r3, [r7, #6]
 80196a2:	4611      	mov	r1, r2
 80196a4:	4618      	mov	r0, r3
 80196a6:	f001 fea7 	bl	801b3f8 <SUBGRF_WriteRegister>
}
 80196aa:	bf00      	nop
 80196ac:	3708      	adds	r7, #8
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd80      	pop	{r7, pc}

080196b2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80196b2:	b580      	push	{r7, lr}
 80196b4:	b082      	sub	sp, #8
 80196b6:	af00      	add	r7, sp, #0
 80196b8:	4603      	mov	r3, r0
 80196ba:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80196bc:	88fb      	ldrh	r3, [r7, #6]
 80196be:	4618      	mov	r0, r3
 80196c0:	f001 feae 	bl	801b420 <SUBGRF_ReadRegister>
 80196c4:	4603      	mov	r3, r0
}
 80196c6:	4618      	mov	r0, r3
 80196c8:	3708      	adds	r7, #8
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}

080196ce <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80196ce:	b580      	push	{r7, lr}
 80196d0:	b082      	sub	sp, #8
 80196d2:	af00      	add	r7, sp, #0
 80196d4:	4603      	mov	r3, r0
 80196d6:	6039      	str	r1, [r7, #0]
 80196d8:	80fb      	strh	r3, [r7, #6]
 80196da:	4613      	mov	r3, r2
 80196dc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80196de:	797b      	ldrb	r3, [r7, #5]
 80196e0:	b29a      	uxth	r2, r3
 80196e2:	88fb      	ldrh	r3, [r7, #6]
 80196e4:	6839      	ldr	r1, [r7, #0]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f001 feae 	bl	801b448 <SUBGRF_WriteRegisters>
}
 80196ec:	bf00      	nop
 80196ee:	3708      	adds	r7, #8
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}

080196f4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	4603      	mov	r3, r0
 80196fc:	6039      	str	r1, [r7, #0]
 80196fe:	80fb      	strh	r3, [r7, #6]
 8019700:	4613      	mov	r3, r2
 8019702:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019704:	797b      	ldrb	r3, [r7, #5]
 8019706:	b29a      	uxth	r2, r3
 8019708:	88fb      	ldrh	r3, [r7, #6]
 801970a:	6839      	ldr	r1, [r7, #0]
 801970c:	4618      	mov	r0, r3
 801970e:	f001 febd 	bl	801b48c <SUBGRF_ReadRegisters>
}
 8019712:	bf00      	nop
 8019714:	3708      	adds	r7, #8
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
	...

0801971c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b082      	sub	sp, #8
 8019720:	af00      	add	r7, sp, #0
 8019722:	4603      	mov	r3, r0
 8019724:	460a      	mov	r2, r1
 8019726:	71fb      	strb	r3, [r7, #7]
 8019728:	4613      	mov	r3, r2
 801972a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801972c:	79fb      	ldrb	r3, [r7, #7]
 801972e:	2b01      	cmp	r3, #1
 8019730:	d10a      	bne.n	8019748 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019732:	4a0e      	ldr	r2, [pc, #56]	; (801976c <RadioSetMaxPayloadLength+0x50>)
 8019734:	79bb      	ldrb	r3, [r7, #6]
 8019736:	7013      	strb	r3, [r2, #0]
 8019738:	4b0c      	ldr	r3, [pc, #48]	; (801976c <RadioSetMaxPayloadLength+0x50>)
 801973a:	781a      	ldrb	r2, [r3, #0]
 801973c:	4b0c      	ldr	r3, [pc, #48]	; (8019770 <RadioSetMaxPayloadLength+0x54>)
 801973e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019740:	480c      	ldr	r0, [pc, #48]	; (8019774 <RadioSetMaxPayloadLength+0x58>)
 8019742:	f001 fd11 	bl	801b168 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019746:	e00d      	b.n	8019764 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019748:	4b09      	ldr	r3, [pc, #36]	; (8019770 <RadioSetMaxPayloadLength+0x54>)
 801974a:	7d5b      	ldrb	r3, [r3, #21]
 801974c:	2b01      	cmp	r3, #1
 801974e:	d109      	bne.n	8019764 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019750:	4a06      	ldr	r2, [pc, #24]	; (801976c <RadioSetMaxPayloadLength+0x50>)
 8019752:	79bb      	ldrb	r3, [r7, #6]
 8019754:	7013      	strb	r3, [r2, #0]
 8019756:	4b05      	ldr	r3, [pc, #20]	; (801976c <RadioSetMaxPayloadLength+0x50>)
 8019758:	781a      	ldrb	r2, [r3, #0]
 801975a:	4b05      	ldr	r3, [pc, #20]	; (8019770 <RadioSetMaxPayloadLength+0x54>)
 801975c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801975e:	4805      	ldr	r0, [pc, #20]	; (8019774 <RadioSetMaxPayloadLength+0x58>)
 8019760:	f001 fd02 	bl	801b168 <SUBGRF_SetPacketParams>
}
 8019764:	bf00      	nop
 8019766:	3708      	adds	r7, #8
 8019768:	46bd      	mov	sp, r7
 801976a:	bd80      	pop	{r7, pc}
 801976c:	20000138 	.word	0x20000138
 8019770:	20001e74 	.word	0x20001e74
 8019774:	20001e82 	.word	0x20001e82

08019778 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b082      	sub	sp, #8
 801977c:	af00      	add	r7, sp, #0
 801977e:	4603      	mov	r3, r0
 8019780:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019782:	4a13      	ldr	r2, [pc, #76]	; (80197d0 <RadioSetPublicNetwork+0x58>)
 8019784:	79fb      	ldrb	r3, [r7, #7]
 8019786:	7313      	strb	r3, [r2, #12]
 8019788:	4b11      	ldr	r3, [pc, #68]	; (80197d0 <RadioSetPublicNetwork+0x58>)
 801978a:	7b1a      	ldrb	r2, [r3, #12]
 801978c:	4b10      	ldr	r3, [pc, #64]	; (80197d0 <RadioSetPublicNetwork+0x58>)
 801978e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019790:	2001      	movs	r0, #1
 8019792:	f7ff f833 	bl	80187fc <RadioSetModem>
    if( enable == true )
 8019796:	79fb      	ldrb	r3, [r7, #7]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d00a      	beq.n	80197b2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801979c:	2134      	movs	r1, #52	; 0x34
 801979e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80197a2:	f001 fe29 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80197a6:	2144      	movs	r1, #68	; 0x44
 80197a8:	f240 7041 	movw	r0, #1857	; 0x741
 80197ac:	f001 fe24 	bl	801b3f8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80197b0:	e009      	b.n	80197c6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80197b2:	2114      	movs	r1, #20
 80197b4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80197b8:	f001 fe1e 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80197bc:	2124      	movs	r1, #36	; 0x24
 80197be:	f240 7041 	movw	r0, #1857	; 0x741
 80197c2:	f001 fe19 	bl	801b3f8 <SUBGRF_WriteRegister>
}
 80197c6:	bf00      	nop
 80197c8:	3708      	adds	r7, #8
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bd80      	pop	{r7, pc}
 80197ce:	bf00      	nop
 80197d0:	20001e74 	.word	0x20001e74

080197d4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80197d8:	f001 ff5e 	bl	801b698 <SUBGRF_GetRadioWakeUpTime>
 80197dc:	4603      	mov	r3, r0
 80197de:	3303      	adds	r3, #3
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	bd80      	pop	{r7, pc}

080197e4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80197ec:	f000 f80e 	bl	801980c <RadioOnTxTimeoutProcess>
}
 80197f0:	bf00      	nop
 80197f2:	3708      	adds	r7, #8
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}

080197f8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b082      	sub	sp, #8
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019800:	f000 f818 	bl	8019834 <RadioOnRxTimeoutProcess>
}
 8019804:	bf00      	nop
 8019806:	3708      	adds	r7, #8
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}

0801980c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801980c:	b580      	push	{r7, lr}
 801980e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019810:	4b07      	ldr	r3, [pc, #28]	; (8019830 <RadioOnTxTimeoutProcess+0x24>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d008      	beq.n	801982a <RadioOnTxTimeoutProcess+0x1e>
 8019818:	4b05      	ldr	r3, [pc, #20]	; (8019830 <RadioOnTxTimeoutProcess+0x24>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d003      	beq.n	801982a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019822:	4b03      	ldr	r3, [pc, #12]	; (8019830 <RadioOnTxTimeoutProcess+0x24>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	685b      	ldr	r3, [r3, #4]
 8019828:	4798      	blx	r3
    }
}
 801982a:	bf00      	nop
 801982c:	bd80      	pop	{r7, pc}
 801982e:	bf00      	nop
 8019830:	20001e70 	.word	0x20001e70

08019834 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019834:	b580      	push	{r7, lr}
 8019836:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019838:	4b07      	ldr	r3, [pc, #28]	; (8019858 <RadioOnRxTimeoutProcess+0x24>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d008      	beq.n	8019852 <RadioOnRxTimeoutProcess+0x1e>
 8019840:	4b05      	ldr	r3, [pc, #20]	; (8019858 <RadioOnRxTimeoutProcess+0x24>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	68db      	ldr	r3, [r3, #12]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d003      	beq.n	8019852 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801984a:	4b03      	ldr	r3, [pc, #12]	; (8019858 <RadioOnRxTimeoutProcess+0x24>)
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	68db      	ldr	r3, [r3, #12]
 8019850:	4798      	blx	r3
    }
}
 8019852:	bf00      	nop
 8019854:	bd80      	pop	{r7, pc}
 8019856:	bf00      	nop
 8019858:	20001e70 	.word	0x20001e70

0801985c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b082      	sub	sp, #8
 8019860:	af00      	add	r7, sp, #0
 8019862:	4603      	mov	r3, r0
 8019864:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019866:	4a05      	ldr	r2, [pc, #20]	; (801987c <RadioOnDioIrq+0x20>)
 8019868:	88fb      	ldrh	r3, [r7, #6]
 801986a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801986e:	f000 f807 	bl	8019880 <RadioIrqProcess>
}
 8019872:	bf00      	nop
 8019874:	3708      	adds	r7, #8
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}
 801987a:	bf00      	nop
 801987c:	20001e74 	.word	0x20001e74

08019880 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019880:	b590      	push	{r4, r7, lr}
 8019882:	b083      	sub	sp, #12
 8019884:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019886:	2300      	movs	r3, #0
 8019888:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801988a:	2300      	movs	r3, #0
 801988c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801988e:	4ba5      	ldr	r3, [pc, #660]	; (8019b24 <RadioIrqProcess+0x2a4>)
 8019890:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019898:	f000 810c 	beq.w	8019ab4 <RadioIrqProcess+0x234>
 801989c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198a0:	f300 81c0 	bgt.w	8019c24 <RadioIrqProcess+0x3a4>
 80198a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80198a8:	f000 80f0 	beq.w	8019a8c <RadioIrqProcess+0x20c>
 80198ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80198b0:	f300 81b8 	bgt.w	8019c24 <RadioIrqProcess+0x3a4>
 80198b4:	2b80      	cmp	r3, #128	; 0x80
 80198b6:	f000 80d5 	beq.w	8019a64 <RadioIrqProcess+0x1e4>
 80198ba:	2b80      	cmp	r3, #128	; 0x80
 80198bc:	f300 81b2 	bgt.w	8019c24 <RadioIrqProcess+0x3a4>
 80198c0:	2b20      	cmp	r3, #32
 80198c2:	dc49      	bgt.n	8019958 <RadioIrqProcess+0xd8>
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	f340 81ad 	ble.w	8019c24 <RadioIrqProcess+0x3a4>
 80198ca:	3b01      	subs	r3, #1
 80198cc:	2b1f      	cmp	r3, #31
 80198ce:	f200 81a9 	bhi.w	8019c24 <RadioIrqProcess+0x3a4>
 80198d2:	a201      	add	r2, pc, #4	; (adr r2, 80198d8 <RadioIrqProcess+0x58>)
 80198d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198d8:	08019961 	.word	0x08019961
 80198dc:	0801999b 	.word	0x0801999b
 80198e0:	08019c25 	.word	0x08019c25
 80198e4:	08019b41 	.word	0x08019b41
 80198e8:	08019c25 	.word	0x08019c25
 80198ec:	08019c25 	.word	0x08019c25
 80198f0:	08019c25 	.word	0x08019c25
 80198f4:	08019baf 	.word	0x08019baf
 80198f8:	08019c25 	.word	0x08019c25
 80198fc:	08019c25 	.word	0x08019c25
 8019900:	08019c25 	.word	0x08019c25
 8019904:	08019c25 	.word	0x08019c25
 8019908:	08019c25 	.word	0x08019c25
 801990c:	08019c25 	.word	0x08019c25
 8019910:	08019c25 	.word	0x08019c25
 8019914:	08019c25 	.word	0x08019c25
 8019918:	08019c25 	.word	0x08019c25
 801991c:	08019c25 	.word	0x08019c25
 8019920:	08019c25 	.word	0x08019c25
 8019924:	08019c25 	.word	0x08019c25
 8019928:	08019c25 	.word	0x08019c25
 801992c:	08019c25 	.word	0x08019c25
 8019930:	08019c25 	.word	0x08019c25
 8019934:	08019c25 	.word	0x08019c25
 8019938:	08019c25 	.word	0x08019c25
 801993c:	08019c25 	.word	0x08019c25
 8019940:	08019c25 	.word	0x08019c25
 8019944:	08019c25 	.word	0x08019c25
 8019948:	08019c25 	.word	0x08019c25
 801994c:	08019c25 	.word	0x08019c25
 8019950:	08019c25 	.word	0x08019c25
 8019954:	08019bbf 	.word	0x08019bbf
 8019958:	2b40      	cmp	r3, #64	; 0x40
 801995a:	f000 814b 	beq.w	8019bf4 <RadioIrqProcess+0x374>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801995e:	e161      	b.n	8019c24 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8019960:	4871      	ldr	r0, [pc, #452]	; (8019b28 <RadioIrqProcess+0x2a8>)
 8019962:	f002 ff59 	bl	801c818 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019966:	2000      	movs	r0, #0
 8019968:	f000 ffc6 	bl	801a8f8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801996c:	f002 f828 	bl	801b9c0 <RFW_Is_LongPacketModeEnabled>
 8019970:	4603      	mov	r3, r0
 8019972:	2b01      	cmp	r3, #1
 8019974:	d101      	bne.n	801997a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019976:	f002 f84c 	bl	801ba12 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801997a:	4b6c      	ldr	r3, [pc, #432]	; (8019b2c <RadioIrqProcess+0x2ac>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	f000 8152 	beq.w	8019c28 <RadioIrqProcess+0x3a8>
 8019984:	4b69      	ldr	r3, [pc, #420]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	2b00      	cmp	r3, #0
 801998c:	f000 814c 	beq.w	8019c28 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8019990:	4b66      	ldr	r3, [pc, #408]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	4798      	blx	r3
        break;
 8019998:	e146      	b.n	8019c28 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 801999a:	4865      	ldr	r0, [pc, #404]	; (8019b30 <RadioIrqProcess+0x2b0>)
 801999c:	f002 ff3c 	bl	801c818 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80199a0:	4b60      	ldr	r3, [pc, #384]	; (8019b24 <RadioIrqProcess+0x2a4>)
 80199a2:	785b      	ldrb	r3, [r3, #1]
 80199a4:	f083 0301 	eor.w	r3, r3, #1
 80199a8:	b2db      	uxtb	r3, r3
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d014      	beq.n	80199d8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80199ae:	2000      	movs	r0, #0
 80199b0:	f000 ffa2 	bl	801a8f8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80199b4:	2100      	movs	r1, #0
 80199b6:	f640 1002 	movw	r0, #2306	; 0x902
 80199ba:	f001 fd1d 	bl	801b3f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80199be:	f640 1044 	movw	r0, #2372	; 0x944
 80199c2:	f001 fd2d 	bl	801b420 <SUBGRF_ReadRegister>
 80199c6:	4603      	mov	r3, r0
 80199c8:	f043 0302 	orr.w	r3, r3, #2
 80199cc:	b2db      	uxtb	r3, r3
 80199ce:	4619      	mov	r1, r3
 80199d0:	f640 1044 	movw	r0, #2372	; 0x944
 80199d4:	f001 fd10 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80199d8:	1dfb      	adds	r3, r7, #7
 80199da:	22ff      	movs	r2, #255	; 0xff
 80199dc:	4619      	mov	r1, r3
 80199de:	4855      	ldr	r0, [pc, #340]	; (8019b34 <RadioIrqProcess+0x2b4>)
 80199e0:	f000 fe5a 	bl	801a698 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80199e4:	4854      	ldr	r0, [pc, #336]	; (8019b38 <RadioIrqProcess+0x2b8>)
 80199e6:	f001 fcb5 	bl	801b354 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80199ea:	4b50      	ldr	r3, [pc, #320]	; (8019b2c <RadioIrqProcess+0x2ac>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d036      	beq.n	8019a60 <RadioIrqProcess+0x1e0>
 80199f2:	4b4e      	ldr	r3, [pc, #312]	; (8019b2c <RadioIrqProcess+0x2ac>)
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	689b      	ldr	r3, [r3, #8]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d031      	beq.n	8019a60 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 80199fc:	4b49      	ldr	r3, [pc, #292]	; (8019b24 <RadioIrqProcess+0x2a4>)
 80199fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019a02:	2b01      	cmp	r3, #1
 8019a04:	d10e      	bne.n	8019a24 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8019a06:	4b49      	ldr	r3, [pc, #292]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	689c      	ldr	r4, [r3, #8]
 8019a0c:	79fb      	ldrb	r3, [r7, #7]
 8019a0e:	b299      	uxth	r1, r3
 8019a10:	4b44      	ldr	r3, [pc, #272]	; (8019b24 <RadioIrqProcess+0x2a4>)
 8019a12:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8019a16:	b21a      	sxth	r2, r3
 8019a18:	4b42      	ldr	r3, [pc, #264]	; (8019b24 <RadioIrqProcess+0x2a4>)
 8019a1a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8019a1e:	4845      	ldr	r0, [pc, #276]	; (8019b34 <RadioIrqProcess+0x2b4>)
 8019a20:	47a0      	blx	r4
                break;
 8019a22:	e01e      	b.n	8019a62 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019a24:	4b3f      	ldr	r3, [pc, #252]	; (8019b24 <RadioIrqProcess+0x2a4>)
 8019a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a28:	463a      	mov	r2, r7
 8019a2a:	4611      	mov	r1, r2
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f001 ff15 	bl	801b85c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8019a32:	4b3e      	ldr	r3, [pc, #248]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	689c      	ldr	r4, [r3, #8]
 8019a38:	79fb      	ldrb	r3, [r7, #7]
 8019a3a:	b299      	uxth	r1, r3
 8019a3c:	4b39      	ldr	r3, [pc, #228]	; (8019b24 <RadioIrqProcess+0x2a4>)
 8019a3e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019a42:	b218      	sxth	r0, r3
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8019a4a:	4a3c      	ldr	r2, [pc, #240]	; (8019b3c <RadioIrqProcess+0x2bc>)
 8019a4c:	fb82 c203 	smull	ip, r2, r2, r3
 8019a50:	1192      	asrs	r2, r2, #6
 8019a52:	17db      	asrs	r3, r3, #31
 8019a54:	1ad3      	subs	r3, r2, r3
 8019a56:	b25b      	sxtb	r3, r3
 8019a58:	4602      	mov	r2, r0
 8019a5a:	4836      	ldr	r0, [pc, #216]	; (8019b34 <RadioIrqProcess+0x2b4>)
 8019a5c:	47a0      	blx	r4
                break;
 8019a5e:	e000      	b.n	8019a62 <RadioIrqProcess+0x1e2>
        }
 8019a60:	bf00      	nop
        break;
 8019a62:	e0f0      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        SUBGRF_SetStandby( STDBY_RC );
 8019a64:	2000      	movs	r0, #0
 8019a66:	f000 ff47 	bl	801a8f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019a6a:	4b30      	ldr	r3, [pc, #192]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	f000 80dc 	beq.w	8019c2c <RadioIrqProcess+0x3ac>
 8019a74:	4b2d      	ldr	r3, [pc, #180]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	699b      	ldr	r3, [r3, #24]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	f000 80d6 	beq.w	8019c2c <RadioIrqProcess+0x3ac>
            RadioEvents->CadDone( false );
 8019a80:	4b2a      	ldr	r3, [pc, #168]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	699b      	ldr	r3, [r3, #24]
 8019a86:	2000      	movs	r0, #0
 8019a88:	4798      	blx	r3
        break;
 8019a8a:	e0cf      	b.n	8019c2c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8019a8c:	2000      	movs	r0, #0
 8019a8e:	f000 ff33 	bl	801a8f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019a92:	4b26      	ldr	r3, [pc, #152]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	f000 80ca 	beq.w	8019c30 <RadioIrqProcess+0x3b0>
 8019a9c:	4b23      	ldr	r3, [pc, #140]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	699b      	ldr	r3, [r3, #24]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	f000 80c4 	beq.w	8019c30 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( true );
 8019aa8:	4b20      	ldr	r3, [pc, #128]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	699b      	ldr	r3, [r3, #24]
 8019aae:	2001      	movs	r0, #1
 8019ab0:	4798      	blx	r3
        break;
 8019ab2:	e0bd      	b.n	8019c30 <RadioIrqProcess+0x3b0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019ab4:	f000 fdd6 	bl	801a664 <SUBGRF_GetOperatingMode>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	2b04      	cmp	r3, #4
 8019abc:	d115      	bne.n	8019aea <RadioIrqProcess+0x26a>
            TimerStop( &TxTimeoutTimer );
 8019abe:	481a      	ldr	r0, [pc, #104]	; (8019b28 <RadioIrqProcess+0x2a8>)
 8019ac0:	f002 feaa 	bl	801c818 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019ac4:	2000      	movs	r0, #0
 8019ac6:	f000 ff17 	bl	801a8f8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019aca:	4b18      	ldr	r3, [pc, #96]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	f000 80b0 	beq.w	8019c34 <RadioIrqProcess+0x3b4>
 8019ad4:	4b15      	ldr	r3, [pc, #84]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	685b      	ldr	r3, [r3, #4]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	f000 80aa 	beq.w	8019c34 <RadioIrqProcess+0x3b4>
                RadioEvents->TxTimeout( );
 8019ae0:	4b12      	ldr	r3, [pc, #72]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	685b      	ldr	r3, [r3, #4]
 8019ae6:	4798      	blx	r3
        break;
 8019ae8:	e0a4      	b.n	8019c34 <RadioIrqProcess+0x3b4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019aea:	f000 fdbb 	bl	801a664 <SUBGRF_GetOperatingMode>
 8019aee:	4603      	mov	r3, r0
 8019af0:	2b05      	cmp	r3, #5
 8019af2:	f040 809f 	bne.w	8019c34 <RadioIrqProcess+0x3b4>
            TimerStop( &RxTimeoutTimer );
 8019af6:	480e      	ldr	r0, [pc, #56]	; (8019b30 <RadioIrqProcess+0x2b0>)
 8019af8:	f002 fe8e 	bl	801c818 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019afc:	2000      	movs	r0, #0
 8019afe:	f000 fefb 	bl	801a8f8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019b02:	4b0a      	ldr	r3, [pc, #40]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	f000 8094 	beq.w	8019c34 <RadioIrqProcess+0x3b4>
 8019b0c:	4b07      	ldr	r3, [pc, #28]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	68db      	ldr	r3, [r3, #12]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	f000 808e 	beq.w	8019c34 <RadioIrqProcess+0x3b4>
                RadioEvents->RxTimeout( );
 8019b18:	4b04      	ldr	r3, [pc, #16]	; (8019b2c <RadioIrqProcess+0x2ac>)
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	4798      	blx	r3
        break;
 8019b20:	e088      	b.n	8019c34 <RadioIrqProcess+0x3b4>
 8019b22:	bf00      	nop
 8019b24:	20001e74 	.word	0x20001e74
 8019b28:	20001ed0 	.word	0x20001ed0
 8019b2c:	20001e70 	.word	0x20001e70
 8019b30:	20001ee8 	.word	0x20001ee8
 8019b34:	20001d70 	.word	0x20001d70
 8019b38:	20001e98 	.word	0x20001e98
 8019b3c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019b40:	4b43      	ldr	r3, [pc, #268]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d077      	beq.n	8019c38 <RadioIrqProcess+0x3b8>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8019b48:	4a42      	ldr	r2, [pc, #264]	; (8019c54 <RadioIrqProcess+0x3d4>)
 8019b4a:	4b41      	ldr	r3, [pc, #260]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b4e:	0c1b      	lsrs	r3, r3, #16
 8019b50:	b2db      	uxtb	r3, r3
 8019b52:	4619      	mov	r1, r3
 8019b54:	f640 1003 	movw	r0, #2307	; 0x903
 8019b58:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8019b5a:	4a3e      	ldr	r2, [pc, #248]	; (8019c54 <RadioIrqProcess+0x3d4>)
 8019b5c:	4b3c      	ldr	r3, [pc, #240]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b60:	0a1b      	lsrs	r3, r3, #8
 8019b62:	b2db      	uxtb	r3, r3
 8019b64:	4619      	mov	r1, r3
 8019b66:	f640 1004 	movw	r0, #2308	; 0x904
 8019b6a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8019b6c:	4a39      	ldr	r2, [pc, #228]	; (8019c54 <RadioIrqProcess+0x3d4>)
 8019b6e:	4b38      	ldr	r3, [pc, #224]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b72:	b2db      	uxtb	r3, r3
 8019b74:	4619      	mov	r1, r3
 8019b76:	f640 1005 	movw	r0, #2309	; 0x905
 8019b7a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8019b7c:	4c35      	ldr	r4, [pc, #212]	; (8019c54 <RadioIrqProcess+0x3d4>)
 8019b7e:	4b36      	ldr	r3, [pc, #216]	; (8019c58 <RadioIrqProcess+0x3d8>)
 8019b80:	f640 1002 	movw	r0, #2306	; 0x902
 8019b84:	4798      	blx	r3
 8019b86:	4603      	mov	r3, r0
 8019b88:	f043 0301 	orr.w	r3, r3, #1
 8019b8c:	b2db      	uxtb	r3, r3
 8019b8e:	4619      	mov	r1, r3
 8019b90:	f640 1002 	movw	r0, #2306	; 0x902
 8019b94:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8019b96:	4b2e      	ldr	r3, [pc, #184]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019b98:	2200      	movs	r2, #0
 8019b9a:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	f240 2162 	movw	r1, #610	; 0x262
 8019ba4:	f240 2062 	movw	r0, #610	; 0x262
 8019ba8:	f001 f876 	bl	801ac98 <SUBGRF_SetDioIrqParams>
        break;
 8019bac:	e044      	b.n	8019c38 <RadioIrqProcess+0x3b8>
        if( 1UL == RFW_Is_Init( ) )
 8019bae:	f001 ff00 	bl	801b9b2 <RFW_Is_Init>
 8019bb2:	4603      	mov	r3, r0
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d141      	bne.n	8019c3c <RadioIrqProcess+0x3bc>
            RFW_ReceivePayload( );
 8019bb8:	f001 ff31 	bl	801ba1e <RFW_ReceivePayload>
        break;
 8019bbc:	e03e      	b.n	8019c3c <RadioIrqProcess+0x3bc>
        TimerStop( &RxTimeoutTimer );
 8019bbe:	4827      	ldr	r0, [pc, #156]	; (8019c5c <RadioIrqProcess+0x3dc>)
 8019bc0:	f002 fe2a 	bl	801c818 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019bc4:	4b22      	ldr	r3, [pc, #136]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019bc6:	785b      	ldrb	r3, [r3, #1]
 8019bc8:	f083 0301 	eor.w	r3, r3, #1
 8019bcc:	b2db      	uxtb	r3, r3
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d002      	beq.n	8019bd8 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8019bd2:	2000      	movs	r0, #0
 8019bd4:	f000 fe90 	bl	801a8f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019bd8:	4b21      	ldr	r3, [pc, #132]	; (8019c60 <RadioIrqProcess+0x3e0>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d02f      	beq.n	8019c40 <RadioIrqProcess+0x3c0>
 8019be0:	4b1f      	ldr	r3, [pc, #124]	; (8019c60 <RadioIrqProcess+0x3e0>)
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	68db      	ldr	r3, [r3, #12]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d02a      	beq.n	8019c40 <RadioIrqProcess+0x3c0>
            RadioEvents->RxTimeout( );
 8019bea:	4b1d      	ldr	r3, [pc, #116]	; (8019c60 <RadioIrqProcess+0x3e0>)
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	68db      	ldr	r3, [r3, #12]
 8019bf0:	4798      	blx	r3
        break;
 8019bf2:	e025      	b.n	8019c40 <RadioIrqProcess+0x3c0>
        if( SubgRf.RxContinuous == false )
 8019bf4:	4b16      	ldr	r3, [pc, #88]	; (8019c50 <RadioIrqProcess+0x3d0>)
 8019bf6:	785b      	ldrb	r3, [r3, #1]
 8019bf8:	f083 0301 	eor.w	r3, r3, #1
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d002      	beq.n	8019c08 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8019c02:	2000      	movs	r0, #0
 8019c04:	f000 fe78 	bl	801a8f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019c08:	4b15      	ldr	r3, [pc, #84]	; (8019c60 <RadioIrqProcess+0x3e0>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d019      	beq.n	8019c44 <RadioIrqProcess+0x3c4>
 8019c10:	4b13      	ldr	r3, [pc, #76]	; (8019c60 <RadioIrqProcess+0x3e0>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	691b      	ldr	r3, [r3, #16]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d014      	beq.n	8019c44 <RadioIrqProcess+0x3c4>
            RadioEvents->RxError( );
 8019c1a:	4b11      	ldr	r3, [pc, #68]	; (8019c60 <RadioIrqProcess+0x3e0>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	691b      	ldr	r3, [r3, #16]
 8019c20:	4798      	blx	r3
        break;
 8019c22:	e00f      	b.n	8019c44 <RadioIrqProcess+0x3c4>
        break;
 8019c24:	bf00      	nop
 8019c26:	e00e      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c28:	bf00      	nop
 8019c2a:	e00c      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c2c:	bf00      	nop
 8019c2e:	e00a      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c30:	bf00      	nop
 8019c32:	e008      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c34:	bf00      	nop
 8019c36:	e006      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c38:	bf00      	nop
 8019c3a:	e004      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c3c:	bf00      	nop
 8019c3e:	e002      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c40:	bf00      	nop
 8019c42:	e000      	b.n	8019c46 <RadioIrqProcess+0x3c6>
        break;
 8019c44:	bf00      	nop
    }
}
 8019c46:	bf00      	nop
 8019c48:	370c      	adds	r7, #12
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	bd90      	pop	{r4, r7, pc}
 8019c4e:	bf00      	nop
 8019c50:	20001e74 	.word	0x20001e74
 8019c54:	0801968f 	.word	0x0801968f
 8019c58:	080196b3 	.word	0x080196b3
 8019c5c:	20001ee8 	.word	0x20001ee8
 8019c60:	20001e70 	.word	0x20001e70

08019c64 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019c68:	4b09      	ldr	r3, [pc, #36]	; (8019c90 <RadioTxPrbs+0x2c>)
 8019c6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c6e:	2101      	movs	r1, #1
 8019c70:	4618      	mov	r0, r3
 8019c72:	f001 fcb5 	bl	801b5e0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019c76:	4b07      	ldr	r3, [pc, #28]	; (8019c94 <RadioTxPrbs+0x30>)
 8019c78:	212d      	movs	r1, #45	; 0x2d
 8019c7a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019c7e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019c80:	f000 fefd 	bl	801aa7e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019c84:	4804      	ldr	r0, [pc, #16]	; (8019c98 <RadioTxPrbs+0x34>)
 8019c86:	f000 fe53 	bl	801a930 <SUBGRF_SetTx>
}
 8019c8a:	bf00      	nop
 8019c8c:	bd80      	pop	{r7, pc}
 8019c8e:	bf00      	nop
 8019c90:	20001e74 	.word	0x20001e74
 8019c94:	0801968f 	.word	0x0801968f
 8019c98:	000fffff 	.word	0x000fffff

08019c9c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b084      	sub	sp, #16
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019caa:	4618      	mov	r0, r3
 8019cac:	f001 fcc0 	bl	801b630 <SUBGRF_SetRfTxPower>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019cb4:	7bfb      	ldrb	r3, [r7, #15]
 8019cb6:	2101      	movs	r1, #1
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f001 fc91 	bl	801b5e0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019cbe:	f000 fed5 	bl	801aa6c <SUBGRF_SetTxContinuousWave>
}
 8019cc2:	bf00      	nop
 8019cc4:	3710      	adds	r7, #16
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}

08019cca <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019cca:	b480      	push	{r7}
 8019ccc:	b089      	sub	sp, #36	; 0x24
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	60f8      	str	r0, [r7, #12]
 8019cd2:	60b9      	str	r1, [r7, #8]
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019cd8:	2300      	movs	r3, #0
 8019cda:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019cdc:	2300      	movs	r3, #0
 8019cde:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	61bb      	str	r3, [r7, #24]
 8019ce4:	e011      	b.n	8019d0a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019ce6:	69bb      	ldr	r3, [r7, #24]
 8019ce8:	68ba      	ldr	r2, [r7, #8]
 8019cea:	4413      	add	r3, r2
 8019cec:	781a      	ldrb	r2, [r3, #0]
 8019cee:	69bb      	ldr	r3, [r7, #24]
 8019cf0:	68b9      	ldr	r1, [r7, #8]
 8019cf2:	440b      	add	r3, r1
 8019cf4:	43d2      	mvns	r2, r2
 8019cf6:	b2d2      	uxtb	r2, r2
 8019cf8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019cfa:	69bb      	ldr	r3, [r7, #24]
 8019cfc:	68fa      	ldr	r2, [r7, #12]
 8019cfe:	4413      	add	r3, r2
 8019d00:	2200      	movs	r2, #0
 8019d02:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019d04:	69bb      	ldr	r3, [r7, #24]
 8019d06:	3301      	adds	r3, #1
 8019d08:	61bb      	str	r3, [r7, #24]
 8019d0a:	79fb      	ldrb	r3, [r7, #7]
 8019d0c:	69ba      	ldr	r2, [r7, #24]
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	dbe9      	blt.n	8019ce6 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019d12:	2300      	movs	r3, #0
 8019d14:	61bb      	str	r3, [r7, #24]
 8019d16:	e049      	b.n	8019dac <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	425a      	negs	r2, r3
 8019d1c:	f003 0307 	and.w	r3, r3, #7
 8019d20:	f002 0207 	and.w	r2, r2, #7
 8019d24:	bf58      	it	pl
 8019d26:	4253      	negpl	r3, r2
 8019d28:	b2db      	uxtb	r3, r3
 8019d2a:	f1c3 0307 	rsb	r3, r3, #7
 8019d2e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019d30:	69bb      	ldr	r3, [r7, #24]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	da00      	bge.n	8019d38 <payload_integration+0x6e>
 8019d36:	3307      	adds	r3, #7
 8019d38:	10db      	asrs	r3, r3, #3
 8019d3a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019d3c:	69bb      	ldr	r3, [r7, #24]
 8019d3e:	3301      	adds	r3, #1
 8019d40:	425a      	negs	r2, r3
 8019d42:	f003 0307 	and.w	r3, r3, #7
 8019d46:	f002 0207 	and.w	r2, r2, #7
 8019d4a:	bf58      	it	pl
 8019d4c:	4253      	negpl	r3, r2
 8019d4e:	b2db      	uxtb	r3, r3
 8019d50:	f1c3 0307 	rsb	r3, r3, #7
 8019d54:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019d56:	69bb      	ldr	r3, [r7, #24]
 8019d58:	3301      	adds	r3, #1
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	da00      	bge.n	8019d60 <payload_integration+0x96>
 8019d5e:	3307      	adds	r3, #7
 8019d60:	10db      	asrs	r3, r3, #3
 8019d62:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019d64:	7dbb      	ldrb	r3, [r7, #22]
 8019d66:	68ba      	ldr	r2, [r7, #8]
 8019d68:	4413      	add	r3, r2
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	461a      	mov	r2, r3
 8019d6e:	7dfb      	ldrb	r3, [r7, #23]
 8019d70:	fa42 f303 	asr.w	r3, r2, r3
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	f003 0301 	and.w	r3, r3, #1
 8019d7a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019d7c:	7ffa      	ldrb	r2, [r7, #31]
 8019d7e:	7cfb      	ldrb	r3, [r7, #19]
 8019d80:	4053      	eors	r3, r2
 8019d82:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019d84:	7d3b      	ldrb	r3, [r7, #20]
 8019d86:	68fa      	ldr	r2, [r7, #12]
 8019d88:	4413      	add	r3, r2
 8019d8a:	781b      	ldrb	r3, [r3, #0]
 8019d8c:	b25a      	sxtb	r2, r3
 8019d8e:	7ff9      	ldrb	r1, [r7, #31]
 8019d90:	7d7b      	ldrb	r3, [r7, #21]
 8019d92:	fa01 f303 	lsl.w	r3, r1, r3
 8019d96:	b25b      	sxtb	r3, r3
 8019d98:	4313      	orrs	r3, r2
 8019d9a:	b259      	sxtb	r1, r3
 8019d9c:	7d3b      	ldrb	r3, [r7, #20]
 8019d9e:	68fa      	ldr	r2, [r7, #12]
 8019da0:	4413      	add	r3, r2
 8019da2:	b2ca      	uxtb	r2, r1
 8019da4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019da6:	69bb      	ldr	r3, [r7, #24]
 8019da8:	3301      	adds	r3, #1
 8019daa:	61bb      	str	r3, [r7, #24]
 8019dac:	79fb      	ldrb	r3, [r7, #7]
 8019dae:	00db      	lsls	r3, r3, #3
 8019db0:	69ba      	ldr	r2, [r7, #24]
 8019db2:	429a      	cmp	r2, r3
 8019db4:	dbb0      	blt.n	8019d18 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019db6:	7ffb      	ldrb	r3, [r7, #31]
 8019db8:	01db      	lsls	r3, r3, #7
 8019dba:	b25a      	sxtb	r2, r3
 8019dbc:	7ffb      	ldrb	r3, [r7, #31]
 8019dbe:	019b      	lsls	r3, r3, #6
 8019dc0:	b25b      	sxtb	r3, r3
 8019dc2:	4313      	orrs	r3, r2
 8019dc4:	b25b      	sxtb	r3, r3
 8019dc6:	7ffa      	ldrb	r2, [r7, #31]
 8019dc8:	2a00      	cmp	r2, #0
 8019dca:	d101      	bne.n	8019dd0 <payload_integration+0x106>
 8019dcc:	2220      	movs	r2, #32
 8019dce:	e000      	b.n	8019dd2 <payload_integration+0x108>
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	4313      	orrs	r3, r2
 8019dd4:	b259      	sxtb	r1, r3
 8019dd6:	79fb      	ldrb	r3, [r7, #7]
 8019dd8:	68fa      	ldr	r2, [r7, #12]
 8019dda:	4413      	add	r3, r2
 8019ddc:	b2ca      	uxtb	r2, r1
 8019dde:	701a      	strb	r2, [r3, #0]
}
 8019de0:	bf00      	nop
 8019de2:	3724      	adds	r7, #36	; 0x24
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bc80      	pop	{r7}
 8019de8:	4770      	bx	lr
	...

08019dec <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b08c      	sub	sp, #48	; 0x30
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	60b9      	str	r1, [r7, #8]
 8019df4:	607a      	str	r2, [r7, #4]
 8019df6:	603b      	str	r3, [r7, #0]
 8019df8:	4603      	mov	r3, r0
 8019dfa:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019e00:	2300      	movs	r3, #0
 8019e02:	623b      	str	r3, [r7, #32]
 8019e04:	2300      	movs	r3, #0
 8019e06:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019e08:	f001 fdcd 	bl	801b9a6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d001      	beq.n	8019e16 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019e12:	2300      	movs	r3, #0
 8019e14:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	bf14      	ite	ne
 8019e1c:	2301      	movne	r3, #1
 8019e1e:	2300      	moveq	r3, #0
 8019e20:	b2da      	uxtb	r2, r3
 8019e22:	4ba3      	ldr	r3, [pc, #652]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019e24:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019e26:	7bfb      	ldrb	r3, [r7, #15]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d003      	beq.n	8019e34 <RadioSetRxGenericConfig+0x48>
 8019e2c:	2b01      	cmp	r3, #1
 8019e2e:	f000 80dc 	beq.w	8019fea <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019e32:	e194      	b.n	801a15e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	689b      	ldr	r3, [r3, #8]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d003      	beq.n	8019e44 <RadioSetRxGenericConfig+0x58>
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	68db      	ldr	r3, [r3, #12]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d102      	bne.n	8019e4a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019e44:	f04f 33ff 	mov.w	r3, #4294967295
 8019e48:	e18a      	b.n	801a160 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	7f9b      	ldrb	r3, [r3, #30]
 8019e4e:	2b08      	cmp	r3, #8
 8019e50:	d902      	bls.n	8019e58 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019e52:	f04f 33ff 	mov.w	r3, #4294967295
 8019e56:	e183      	b.n	801a160 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	6919      	ldr	r1, [r3, #16]
 8019e5c:	68bb      	ldr	r3, [r7, #8]
 8019e5e:	7f9b      	ldrb	r3, [r3, #30]
 8019e60:	b29a      	uxth	r2, r3
 8019e62:	f107 0320 	add.w	r3, r7, #32
 8019e66:	4618      	mov	r0, r3
 8019e68:	f001 fe90 	bl	801bb8c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	bf14      	ite	ne
 8019e74:	2301      	movne	r3, #1
 8019e76:	2300      	moveq	r3, #0
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f000 fe08 	bl	801aa90 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019e80:	4b8b      	ldr	r3, [pc, #556]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019e82:	2200      	movs	r2, #0
 8019e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	689b      	ldr	r3, [r3, #8]
 8019e8c:	4a88      	ldr	r2, [pc, #544]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019e8e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019e96:	4b86      	ldr	r3, [pc, #536]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f001 fcb3 	bl	801b80c <SUBGRF_GetFskBandwidthRegValue>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	461a      	mov	r2, r3
 8019eaa:	4b81      	ldr	r3, [pc, #516]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019eb0:	4b7f      	ldr	r3, [pc, #508]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019eb6:	68bb      	ldr	r3, [r7, #8]
 8019eb8:	68db      	ldr	r3, [r3, #12]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	00db      	lsls	r3, r3, #3
 8019ebe:	b29a      	uxth	r2, r3
 8019ec0:	4b7b      	ldr	r3, [pc, #492]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019ec2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	7fda      	ldrb	r2, [r3, #31]
 8019ec8:	4b79      	ldr	r3, [pc, #484]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019eca:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019ecc:	68bb      	ldr	r3, [r7, #8]
 8019ece:	7f9b      	ldrb	r3, [r3, #30]
 8019ed0:	00db      	lsls	r3, r3, #3
 8019ed2:	b2da      	uxtb	r2, r3
 8019ed4:	4b76      	ldr	r3, [pc, #472]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019ed6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019ed8:	68bb      	ldr	r3, [r7, #8]
 8019eda:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019ede:	4b74      	ldr	r3, [pc, #464]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019ee0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d105      	bne.n	8019ef8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019eec:	68bb      	ldr	r3, [r7, #8]
 8019eee:	695b      	ldr	r3, [r3, #20]
 8019ef0:	b2da      	uxtb	r2, r3
 8019ef2:	4b6f      	ldr	r3, [pc, #444]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019ef4:	759a      	strb	r2, [r3, #22]
 8019ef6:	e00b      	b.n	8019f10 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019efe:	2b02      	cmp	r3, #2
 8019f00:	d103      	bne.n	8019f0a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019f02:	4b6b      	ldr	r3, [pc, #428]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f04:	22ff      	movs	r2, #255	; 0xff
 8019f06:	759a      	strb	r2, [r3, #22]
 8019f08:	e002      	b.n	8019f10 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019f0a:	4b69      	ldr	r3, [pc, #420]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f0c:	22ff      	movs	r2, #255	; 0xff
 8019f0e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019f16:	2b02      	cmp	r3, #2
 8019f18:	d004      	beq.n	8019f24 <RadioSetRxGenericConfig+0x138>
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019f20:	2b02      	cmp	r3, #2
 8019f22:	d12d      	bne.n	8019f80 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019f2a:	2bf1      	cmp	r3, #241	; 0xf1
 8019f2c:	d00c      	beq.n	8019f48 <RadioSetRxGenericConfig+0x15c>
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019f34:	2bf2      	cmp	r3, #242	; 0xf2
 8019f36:	d007      	beq.n	8019f48 <RadioSetRxGenericConfig+0x15c>
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019f3e:	2b01      	cmp	r3, #1
 8019f40:	d002      	beq.n	8019f48 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019f42:	f04f 33ff 	mov.w	r3, #4294967295
 8019f46:	e10b      	b.n	801a160 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019f48:	2300      	movs	r3, #0
 8019f4a:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019f50:	4b58      	ldr	r3, [pc, #352]	; (801a0b4 <RadioSetRxGenericConfig+0x2c8>)
 8019f52:	6819      	ldr	r1, [r3, #0]
 8019f54:	f107 0314 	add.w	r3, r7, #20
 8019f58:	4a57      	ldr	r2, [pc, #348]	; (801a0b8 <RadioSetRxGenericConfig+0x2cc>)
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	f001 fd16 	bl	801b98c <RFW_Init>
 8019f60:	4603      	mov	r3, r0
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d002      	beq.n	8019f6c <RadioSetRxGenericConfig+0x180>
            return -1;
 8019f66:	f04f 33ff 	mov.w	r3, #4294967295
 8019f6a:	e0f9      	b.n	801a160 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f6c:	4b50      	ldr	r3, [pc, #320]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f6e:	2200      	movs	r2, #0
 8019f70:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019f72:	4b4f      	ldr	r3, [pc, #316]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f74:	2201      	movs	r2, #1
 8019f76:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019f78:	4b4d      	ldr	r3, [pc, #308]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	755a      	strb	r2, [r3, #21]
        {
 8019f7e:	e00e      	b.n	8019f9e <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019f86:	4b4a      	ldr	r3, [pc, #296]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f88:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019f90:	4b47      	ldr	r3, [pc, #284]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f92:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019f9a:	4b45      	ldr	r3, [pc, #276]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019f9c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019f9e:	f7ff fa7a 	bl	8019496 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019fa2:	2000      	movs	r0, #0
 8019fa4:	f7fe fc2a 	bl	80187fc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fa8:	4844      	ldr	r0, [pc, #272]	; (801a0bc <RadioSetRxGenericConfig+0x2d0>)
 8019faa:	f001 f80b 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fae:	4844      	ldr	r0, [pc, #272]	; (801a0c0 <RadioSetRxGenericConfig+0x2d4>)
 8019fb0:	f001 f8da 	bl	801b168 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019fb4:	f107 0320 	add.w	r3, r7, #32
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f000 fba2 	bl	801a702 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019fbe:	68bb      	ldr	r3, [r7, #8]
 8019fc0:	8b9b      	ldrh	r3, [r3, #28]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f000 fbec 	bl	801a7a0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	8b1b      	ldrh	r3, [r3, #24]
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f000 fbc7 	bl	801a760 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019fd8:	fb03 f202 	mul.w	r2, r3, r2
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	689b      	ldr	r3, [r3, #8]
 8019fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fe4:	4a32      	ldr	r2, [pc, #200]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 8019fe6:	6093      	str	r3, [r2, #8]
        break;
 8019fe8:	e0b9      	b.n	801a15e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019fea:	68bb      	ldr	r3, [r7, #8]
 8019fec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d102      	bne.n	8019ff8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ff6:	e0b3      	b.n	801a160 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019ff8:	68bb      	ldr	r3, [r7, #8]
 8019ffa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019ffe:	2b01      	cmp	r3, #1
 801a000:	d104      	bne.n	801a00c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	695b      	ldr	r3, [r3, #20]
 801a006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a00a:	e002      	b.n	801a012 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a00c:	23ff      	movs	r3, #255	; 0xff
 801a00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a012:	68bb      	ldr	r3, [r7, #8]
 801a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a016:	2b00      	cmp	r3, #0
 801a018:	bf14      	ite	ne
 801a01a:	2301      	movne	r3, #1
 801a01c:	2300      	moveq	r3, #0
 801a01e:	b2db      	uxtb	r3, r3
 801a020:	4618      	mov	r0, r3
 801a022:	f000 fd35 	bl	801aa90 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	b2db      	uxtb	r3, r3
 801a02a:	4618      	mov	r0, r3
 801a02c:	f000 fd3f 	bl	801aaae <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a030:	4b1f      	ldr	r3, [pc, #124]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a032:	2201      	movs	r2, #1
 801a034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a038:	68bb      	ldr	r3, [r7, #8]
 801a03a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a03e:	4b1c      	ldr	r3, [pc, #112]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a04a:	4b19      	ldr	r3, [pc, #100]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a04c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a056:	4b16      	ldr	r3, [pc, #88]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a058:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a062:	2b02      	cmp	r3, #2
 801a064:	d010      	beq.n	801a088 <RadioSetRxGenericConfig+0x29c>
 801a066:	2b02      	cmp	r3, #2
 801a068:	dc2c      	bgt.n	801a0c4 <RadioSetRxGenericConfig+0x2d8>
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d002      	beq.n	801a074 <RadioSetRxGenericConfig+0x288>
 801a06e:	2b01      	cmp	r3, #1
 801a070:	d005      	beq.n	801a07e <RadioSetRxGenericConfig+0x292>
            break;
 801a072:	e027      	b.n	801a0c4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a074:	4b0e      	ldr	r3, [pc, #56]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a076:	2200      	movs	r2, #0
 801a078:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a07c:	e023      	b.n	801a0c6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a07e:	4b0c      	ldr	r3, [pc, #48]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a080:	2201      	movs	r2, #1
 801a082:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a086:	e01e      	b.n	801a0c6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a08e:	2b0b      	cmp	r3, #11
 801a090:	d004      	beq.n	801a09c <RadioSetRxGenericConfig+0x2b0>
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a098:	2b0c      	cmp	r3, #12
 801a09a:	d104      	bne.n	801a0a6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a09c:	4b04      	ldr	r3, [pc, #16]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a09e:	2201      	movs	r2, #1
 801a0a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a0a4:	e00f      	b.n	801a0c6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a0a6:	4b02      	ldr	r3, [pc, #8]	; (801a0b0 <RadioSetRxGenericConfig+0x2c4>)
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a0ae:	e00a      	b.n	801a0c6 <RadioSetRxGenericConfig+0x2da>
 801a0b0:	20001e74 	.word	0x20001e74
 801a0b4:	20001e70 	.word	0x20001e70
 801a0b8:	20001ee8 	.word	0x20001ee8
 801a0bc:	20001eac 	.word	0x20001eac
 801a0c0:	20001e82 	.word	0x20001e82
            break;
 801a0c4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a0c6:	4b28      	ldr	r3, [pc, #160]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a0c8:	2201      	movs	r2, #1
 801a0ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a0d0:	4b25      	ldr	r3, [pc, #148]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a0d2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a0d4:	68bb      	ldr	r3, [r7, #8]
 801a0d6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a0da:	4b23      	ldr	r3, [pc, #140]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a0dc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a0de:	4a22      	ldr	r2, [pc, #136]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a0e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a0e4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a0ec:	4b1e      	ldr	r3, [pc, #120]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a0ee:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801a0f8:	4b1b      	ldr	r3, [pc, #108]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a0fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a0fe:	f7ff f9ca 	bl	8019496 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a102:	2001      	movs	r0, #1
 801a104:	f7fe fb7a 	bl	80187fc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a108:	4818      	ldr	r0, [pc, #96]	; (801a16c <RadioSetRxGenericConfig+0x380>)
 801a10a:	f000 ff5b 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a10e:	4818      	ldr	r0, [pc, #96]	; (801a170 <RadioSetRxGenericConfig+0x384>)
 801a110:	f001 f82a 	bl	801b168 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a114:	4b14      	ldr	r3, [pc, #80]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a11a:	2b01      	cmp	r3, #1
 801a11c:	d10d      	bne.n	801a13a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a11e:	f240 7036 	movw	r0, #1846	; 0x736
 801a122:	f001 f97d 	bl	801b420 <SUBGRF_ReadRegister>
 801a126:	4603      	mov	r3, r0
 801a128:	f023 0304 	bic.w	r3, r3, #4
 801a12c:	b2db      	uxtb	r3, r3
 801a12e:	4619      	mov	r1, r3
 801a130:	f240 7036 	movw	r0, #1846	; 0x736
 801a134:	f001 f960 	bl	801b3f8 <SUBGRF_WriteRegister>
 801a138:	e00c      	b.n	801a154 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a13a:	f240 7036 	movw	r0, #1846	; 0x736
 801a13e:	f001 f96f 	bl	801b420 <SUBGRF_ReadRegister>
 801a142:	4603      	mov	r3, r0
 801a144:	f043 0304 	orr.w	r3, r3, #4
 801a148:	b2db      	uxtb	r3, r3
 801a14a:	4619      	mov	r1, r3
 801a14c:	f240 7036 	movw	r0, #1846	; 0x736
 801a150:	f001 f952 	bl	801b3f8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a154:	4b04      	ldr	r3, [pc, #16]	; (801a168 <RadioSetRxGenericConfig+0x37c>)
 801a156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a15a:	609a      	str	r2, [r3, #8]
        break;
 801a15c:	bf00      	nop
    }
    return status;
 801a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a160:	4618      	mov	r0, r3
 801a162:	3730      	adds	r7, #48	; 0x30
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}
 801a168:	20001e74 	.word	0x20001e74
 801a16c:	20001eac 	.word	0x20001eac
 801a170:	20001e82 	.word	0x20001e82

0801a174 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b08e      	sub	sp, #56	; 0x38
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60b9      	str	r1, [r7, #8]
 801a17c:	607b      	str	r3, [r7, #4]
 801a17e:	4603      	mov	r3, r0
 801a180:	73fb      	strb	r3, [r7, #15]
 801a182:	4613      	mov	r3, r2
 801a184:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a186:	2300      	movs	r3, #0
 801a188:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a18a:	2300      	movs	r3, #0
 801a18c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a18e:	f001 fc0a 	bl	801b9a6 <RFW_DeInit>
    switch( modem )
 801a192:	7bfb      	ldrb	r3, [r7, #15]
 801a194:	2b03      	cmp	r3, #3
 801a196:	f200 8204 	bhi.w	801a5a2 <RadioSetTxGenericConfig+0x42e>
 801a19a:	a201      	add	r2, pc, #4	; (adr r2, 801a1a0 <RadioSetTxGenericConfig+0x2c>)
 801a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1a0:	0801a325 	.word	0x0801a325
 801a1a4:	0801a46d 	.word	0x0801a46d
 801a1a8:	0801a565 	.word	0x0801a565
 801a1ac:	0801a1b1 	.word	0x0801a1b1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a1b0:	68bb      	ldr	r3, [r7, #8]
 801a1b2:	7c9b      	ldrb	r3, [r3, #18]
 801a1b4:	2b08      	cmp	r3, #8
 801a1b6:	d902      	bls.n	801a1be <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 801a1bc:	e206      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	6899      	ldr	r1, [r3, #8]
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	7c9b      	ldrb	r3, [r3, #18]
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f001 fcdd 	bl	801bb8c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a1d2:	68bb      	ldr	r3, [r7, #8]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d102      	bne.n	801a1e0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a1da:	f04f 33ff 	mov.w	r3, #4294967295
 801a1de:	e1f5      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801a1e0:	68bb      	ldr	r3, [r7, #8]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	f242 7210 	movw	r2, #10000	; 0x2710
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d813      	bhi.n	801a214 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801a1ec:	2302      	movs	r3, #2
 801a1ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a1f2:	4b99      	ldr	r3, [pc, #612]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a1f4:	2203      	movs	r2, #3
 801a1f6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a1f8:	4b97      	ldr	r3, [pc, #604]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a1fa:	2203      	movs	r2, #3
 801a1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4a94      	ldr	r2, [pc, #592]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a206:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	7cda      	ldrb	r2, [r3, #19]
 801a20c:	4b92      	ldr	r3, [pc, #584]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a212:	e017      	b.n	801a244 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801a214:	2300      	movs	r3, #0
 801a216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a21a:	4b8f      	ldr	r3, [pc, #572]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a21c:	2200      	movs	r2, #0
 801a21e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a220:	4b8d      	ldr	r3, [pc, #564]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a222:	2200      	movs	r2, #0
 801a224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	4a8a      	ldr	r2, [pc, #552]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a22e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a230:	68bb      	ldr	r3, [r7, #8]
 801a232:	7cda      	ldrb	r2, [r3, #19]
 801a234:	4b88      	ldr	r3, [pc, #544]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801a23a:	68bb      	ldr	r3, [r7, #8]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	089b      	lsrs	r3, r3, #2
 801a240:	4a85      	ldr	r2, [pc, #532]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a242:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	685b      	ldr	r3, [r3, #4]
 801a248:	b29b      	uxth	r3, r3
 801a24a:	00db      	lsls	r3, r3, #3
 801a24c:	b29a      	uxth	r2, r3
 801a24e:	4b82      	ldr	r3, [pc, #520]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a250:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a252:	4b81      	ldr	r3, [pc, #516]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a254:	2204      	movs	r2, #4
 801a256:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	7c9b      	ldrb	r3, [r3, #18]
 801a25c:	00db      	lsls	r3, r3, #3
 801a25e:	b2da      	uxtb	r2, r3
 801a260:	4b7d      	ldr	r3, [pc, #500]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a262:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a264:	4b7c      	ldr	r3, [pc, #496]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a266:	2200      	movs	r2, #0
 801a268:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	7d9b      	ldrb	r3, [r3, #22]
 801a26e:	2b02      	cmp	r3, #2
 801a270:	d003      	beq.n	801a27a <RadioSetTxGenericConfig+0x106>
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	7d1b      	ldrb	r3, [r3, #20]
 801a276:	2b02      	cmp	r3, #2
 801a278:	d12b      	bne.n	801a2d2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a27a:	68bb      	ldr	r3, [r7, #8]
 801a27c:	7d5b      	ldrb	r3, [r3, #21]
 801a27e:	2bf1      	cmp	r3, #241	; 0xf1
 801a280:	d00a      	beq.n	801a298 <RadioSetTxGenericConfig+0x124>
 801a282:	68bb      	ldr	r3, [r7, #8]
 801a284:	7d5b      	ldrb	r3, [r3, #21]
 801a286:	2bf2      	cmp	r3, #242	; 0xf2
 801a288:	d006      	beq.n	801a298 <RadioSetTxGenericConfig+0x124>
 801a28a:	68bb      	ldr	r3, [r7, #8]
 801a28c:	7d5b      	ldrb	r3, [r3, #21]
 801a28e:	2b01      	cmp	r3, #1
 801a290:	d002      	beq.n	801a298 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801a292:	f04f 33ff 	mov.w	r3, #4294967295
 801a296:	e199      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801a298:	68bb      	ldr	r3, [r7, #8]
 801a29a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a29c:	2301      	movs	r3, #1
 801a29e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a2a2:	4b6e      	ldr	r3, [pc, #440]	; (801a45c <RadioSetTxGenericConfig+0x2e8>)
 801a2a4:	6819      	ldr	r1, [r3, #0]
 801a2a6:	f107 0320 	add.w	r3, r7, #32
 801a2aa:	4a6d      	ldr	r2, [pc, #436]	; (801a460 <RadioSetTxGenericConfig+0x2ec>)
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	f001 fb6d 	bl	801b98c <RFW_Init>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d002      	beq.n	801a2be <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801a2b8:	f04f 33ff 	mov.w	r3, #4294967295
 801a2bc:	e186      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a2be:	4b66      	ldr	r3, [pc, #408]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a2c4:	4b64      	ldr	r3, [pc, #400]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a2c6:	2201      	movs	r2, #1
 801a2c8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a2ca:	4b63      	ldr	r3, [pc, #396]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	755a      	strb	r2, [r3, #21]
        {
 801a2d0:	e00b      	b.n	801a2ea <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a2d2:	68bb      	ldr	r3, [r7, #8]
 801a2d4:	7d5a      	ldrb	r2, [r3, #21]
 801a2d6:	4b60      	ldr	r3, [pc, #384]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a2d8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a2da:	68bb      	ldr	r3, [r7, #8]
 801a2dc:	7d9a      	ldrb	r2, [r3, #22]
 801a2de:	4b5e      	ldr	r3, [pc, #376]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a2e0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a2e2:	68bb      	ldr	r3, [r7, #8]
 801a2e4:	7d1a      	ldrb	r2, [r3, #20]
 801a2e6:	4b5c      	ldr	r3, [pc, #368]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a2e8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a2ea:	f7ff f8d4 	bl	8019496 <RadioStandby>
        RadioSetModem( radio_modem );
 801a2ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	f7fe fa82 	bl	80187fc <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2f8:	485a      	ldr	r0, [pc, #360]	; (801a464 <RadioSetTxGenericConfig+0x2f0>)
 801a2fa:	f000 fe63 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2fe:	485a      	ldr	r0, [pc, #360]	; (801a468 <RadioSetTxGenericConfig+0x2f4>)
 801a300:	f000 ff32 	bl	801b168 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a308:	4618      	mov	r0, r3
 801a30a:	f000 f9fa 	bl	801a702 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a30e:	68bb      	ldr	r3, [r7, #8]
 801a310:	8a1b      	ldrh	r3, [r3, #16]
 801a312:	4618      	mov	r0, r3
 801a314:	f000 fa44 	bl	801a7a0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801a318:	68bb      	ldr	r3, [r7, #8]
 801a31a:	899b      	ldrh	r3, [r3, #12]
 801a31c:	4618      	mov	r0, r3
 801a31e:	f000 fa1f 	bl	801a760 <SUBGRF_SetCrcPolynomial>
        break;
 801a322:	e13f      	b.n	801a5a4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d102      	bne.n	801a332 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a32c:	f04f 33ff 	mov.w	r3, #4294967295
 801a330:	e14c      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a332:	68bb      	ldr	r3, [r7, #8]
 801a334:	7c9b      	ldrb	r3, [r3, #18]
 801a336:	2b08      	cmp	r3, #8
 801a338:	d902      	bls.n	801a340 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a33a:	f04f 33ff 	mov.w	r3, #4294967295
 801a33e:	e145      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801a340:	68bb      	ldr	r3, [r7, #8]
 801a342:	6899      	ldr	r1, [r3, #8]
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	7c9b      	ldrb	r3, [r3, #18]
 801a348:	b29a      	uxth	r2, r3
 801a34a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a34e:	4618      	mov	r0, r3
 801a350:	f001 fc1c 	bl	801bb8c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a354:	4b40      	ldr	r3, [pc, #256]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a356:	2200      	movs	r2, #0
 801a358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a35c:	68bb      	ldr	r3, [r7, #8]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	4a3d      	ldr	r2, [pc, #244]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a362:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a364:	68bb      	ldr	r3, [r7, #8]
 801a366:	7cda      	ldrb	r2, [r3, #19]
 801a368:	4b3b      	ldr	r3, [pc, #236]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a36a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	699b      	ldr	r3, [r3, #24]
 801a372:	4a39      	ldr	r2, [pc, #228]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a374:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a376:	4b38      	ldr	r3, [pc, #224]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a378:	2200      	movs	r2, #0
 801a37a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a37c:	68bb      	ldr	r3, [r7, #8]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	b29b      	uxth	r3, r3
 801a382:	00db      	lsls	r3, r3, #3
 801a384:	b29a      	uxth	r2, r3
 801a386:	4b34      	ldr	r3, [pc, #208]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a388:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a38a:	4b33      	ldr	r3, [pc, #204]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a38c:	2204      	movs	r2, #4
 801a38e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	7c9b      	ldrb	r3, [r3, #18]
 801a394:	00db      	lsls	r3, r3, #3
 801a396:	b2da      	uxtb	r2, r3
 801a398:	4b2f      	ldr	r3, [pc, #188]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a39a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a39c:	4b2e      	ldr	r3, [pc, #184]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a39e:	2200      	movs	r2, #0
 801a3a0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	7d9b      	ldrb	r3, [r3, #22]
 801a3a6:	2b02      	cmp	r3, #2
 801a3a8:	d003      	beq.n	801a3b2 <RadioSetTxGenericConfig+0x23e>
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	7d1b      	ldrb	r3, [r3, #20]
 801a3ae:	2b02      	cmp	r3, #2
 801a3b0:	d12a      	bne.n	801a408 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a3b2:	68bb      	ldr	r3, [r7, #8]
 801a3b4:	7d5b      	ldrb	r3, [r3, #21]
 801a3b6:	2bf1      	cmp	r3, #241	; 0xf1
 801a3b8:	d00a      	beq.n	801a3d0 <RadioSetTxGenericConfig+0x25c>
 801a3ba:	68bb      	ldr	r3, [r7, #8]
 801a3bc:	7d5b      	ldrb	r3, [r3, #21]
 801a3be:	2bf2      	cmp	r3, #242	; 0xf2
 801a3c0:	d006      	beq.n	801a3d0 <RadioSetTxGenericConfig+0x25c>
 801a3c2:	68bb      	ldr	r3, [r7, #8]
 801a3c4:	7d5b      	ldrb	r3, [r3, #21]
 801a3c6:	2b01      	cmp	r3, #1
 801a3c8:	d002      	beq.n	801a3d0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a3ca:	f04f 33ff 	mov.w	r3, #4294967295
 801a3ce:	e0fd      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a3d8:	4b20      	ldr	r3, [pc, #128]	; (801a45c <RadioSetTxGenericConfig+0x2e8>)
 801a3da:	6819      	ldr	r1, [r3, #0]
 801a3dc:	f107 0314 	add.w	r3, r7, #20
 801a3e0:	4a1f      	ldr	r2, [pc, #124]	; (801a460 <RadioSetTxGenericConfig+0x2ec>)
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f001 fad2 	bl	801b98c <RFW_Init>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d002      	beq.n	801a3f4 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801a3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f2:	e0eb      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a3f4:	4b18      	ldr	r3, [pc, #96]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a3f6:	2200      	movs	r2, #0
 801a3f8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a3fa:	4b17      	ldr	r3, [pc, #92]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a3fc:	2201      	movs	r2, #1
 801a3fe:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a400:	4b15      	ldr	r3, [pc, #84]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a402:	2200      	movs	r2, #0
 801a404:	755a      	strb	r2, [r3, #21]
        {
 801a406:	e00b      	b.n	801a420 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	7d5a      	ldrb	r2, [r3, #21]
 801a40c:	4b12      	ldr	r3, [pc, #72]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a40e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a410:	68bb      	ldr	r3, [r7, #8]
 801a412:	7d9a      	ldrb	r2, [r3, #22]
 801a414:	4b10      	ldr	r3, [pc, #64]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a416:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a418:	68bb      	ldr	r3, [r7, #8]
 801a41a:	7d1a      	ldrb	r2, [r3, #20]
 801a41c:	4b0e      	ldr	r3, [pc, #56]	; (801a458 <RadioSetTxGenericConfig+0x2e4>)
 801a41e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a420:	f7ff f839 	bl	8019496 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a424:	2000      	movs	r0, #0
 801a426:	f7fe f9e9 	bl	80187fc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a42a:	480e      	ldr	r0, [pc, #56]	; (801a464 <RadioSetTxGenericConfig+0x2f0>)
 801a42c:	f000 fdca 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a430:	480d      	ldr	r0, [pc, #52]	; (801a468 <RadioSetTxGenericConfig+0x2f4>)
 801a432:	f000 fe99 	bl	801b168 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a43a:	4618      	mov	r0, r3
 801a43c:	f000 f961 	bl	801a702 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a440:	68bb      	ldr	r3, [r7, #8]
 801a442:	8a1b      	ldrh	r3, [r3, #16]
 801a444:	4618      	mov	r0, r3
 801a446:	f000 f9ab 	bl	801a7a0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	899b      	ldrh	r3, [r3, #12]
 801a44e:	4618      	mov	r0, r3
 801a450:	f000 f986 	bl	801a760 <SUBGRF_SetCrcPolynomial>
        break;
 801a454:	e0a6      	b.n	801a5a4 <RadioSetTxGenericConfig+0x430>
 801a456:	bf00      	nop
 801a458:	20001e74 	.word	0x20001e74
 801a45c:	20001e70 	.word	0x20001e70
 801a460:	20001ed0 	.word	0x20001ed0
 801a464:	20001eac 	.word	0x20001eac
 801a468:	20001e82 	.word	0x20001e82
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a46c:	4b59      	ldr	r3, [pc, #356]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a46e:	2201      	movs	r2, #1
 801a470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	781a      	ldrb	r2, [r3, #0]
 801a478:	4b56      	ldr	r3, [pc, #344]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a47a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a47e:	68bb      	ldr	r3, [r7, #8]
 801a480:	785a      	ldrb	r2, [r3, #1]
 801a482:	4b54      	ldr	r3, [pc, #336]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a488:	68bb      	ldr	r3, [r7, #8]
 801a48a:	789a      	ldrb	r2, [r3, #2]
 801a48c:	4b51      	ldr	r3, [pc, #324]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a48e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a492:	68bb      	ldr	r3, [r7, #8]
 801a494:	78db      	ldrb	r3, [r3, #3]
 801a496:	2b02      	cmp	r3, #2
 801a498:	d010      	beq.n	801a4bc <RadioSetTxGenericConfig+0x348>
 801a49a:	2b02      	cmp	r3, #2
 801a49c:	dc20      	bgt.n	801a4e0 <RadioSetTxGenericConfig+0x36c>
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d002      	beq.n	801a4a8 <RadioSetTxGenericConfig+0x334>
 801a4a2:	2b01      	cmp	r3, #1
 801a4a4:	d005      	beq.n	801a4b2 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a4a6:	e01b      	b.n	801a4e0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a4a8:	4b4a      	ldr	r3, [pc, #296]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4b0:	e017      	b.n	801a4e2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a4b2:	4b48      	ldr	r3, [pc, #288]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4b4:	2201      	movs	r2, #1
 801a4b6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4ba:	e012      	b.n	801a4e2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	781b      	ldrb	r3, [r3, #0]
 801a4c0:	2b0b      	cmp	r3, #11
 801a4c2:	d003      	beq.n	801a4cc <RadioSetTxGenericConfig+0x358>
 801a4c4:	68bb      	ldr	r3, [r7, #8]
 801a4c6:	781b      	ldrb	r3, [r3, #0]
 801a4c8:	2b0c      	cmp	r3, #12
 801a4ca:	d104      	bne.n	801a4d6 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a4cc:	4b41      	ldr	r3, [pc, #260]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4ce:	2201      	movs	r2, #1
 801a4d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4d4:	e005      	b.n	801a4e2 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a4d6:	4b3f      	ldr	r3, [pc, #252]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4d8:	2200      	movs	r2, #0
 801a4da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4de:	e000      	b.n	801a4e2 <RadioSetTxGenericConfig+0x36e>
            break;
 801a4e0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a4e2:	4b3c      	ldr	r3, [pc, #240]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4e4:	2201      	movs	r2, #1
 801a4e6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	889a      	ldrh	r2, [r3, #4]
 801a4ec:	4b39      	ldr	r3, [pc, #228]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4ee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	799a      	ldrb	r2, [r3, #6]
 801a4f4:	4b37      	ldr	r3, [pc, #220]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4f6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a4f8:	68bb      	ldr	r3, [r7, #8]
 801a4fa:	79da      	ldrb	r2, [r3, #7]
 801a4fc:	4b35      	ldr	r3, [pc, #212]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a4fe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a502:	68bb      	ldr	r3, [r7, #8]
 801a504:	7a1a      	ldrb	r2, [r3, #8]
 801a506:	4b33      	ldr	r3, [pc, #204]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a50c:	f7fe ffc3 	bl	8019496 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a510:	2001      	movs	r0, #1
 801a512:	f7fe f973 	bl	80187fc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a516:	4830      	ldr	r0, [pc, #192]	; (801a5d8 <RadioSetTxGenericConfig+0x464>)
 801a518:	f000 fd54 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a51c:	482f      	ldr	r0, [pc, #188]	; (801a5dc <RadioSetTxGenericConfig+0x468>)
 801a51e:	f000 fe23 	bl	801b168 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a522:	4b2c      	ldr	r3, [pc, #176]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a528:	2b06      	cmp	r3, #6
 801a52a:	d10d      	bne.n	801a548 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a52c:	f640 0089 	movw	r0, #2185	; 0x889
 801a530:	f000 ff76 	bl	801b420 <SUBGRF_ReadRegister>
 801a534:	4603      	mov	r3, r0
 801a536:	f023 0304 	bic.w	r3, r3, #4
 801a53a:	b2db      	uxtb	r3, r3
 801a53c:	4619      	mov	r1, r3
 801a53e:	f640 0089 	movw	r0, #2185	; 0x889
 801a542:	f000 ff59 	bl	801b3f8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a546:	e02d      	b.n	801a5a4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a548:	f640 0089 	movw	r0, #2185	; 0x889
 801a54c:	f000 ff68 	bl	801b420 <SUBGRF_ReadRegister>
 801a550:	4603      	mov	r3, r0
 801a552:	f043 0304 	orr.w	r3, r3, #4
 801a556:	b2db      	uxtb	r3, r3
 801a558:	4619      	mov	r1, r3
 801a55a:	f640 0089 	movw	r0, #2185	; 0x889
 801a55e:	f000 ff4b 	bl	801b3f8 <SUBGRF_WriteRegister>
        break;
 801a562:	e01f      	b.n	801a5a4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d004      	beq.n	801a576 <RadioSetTxGenericConfig+0x402>
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a574:	d902      	bls.n	801a57c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a576:	f04f 33ff 	mov.w	r3, #4294967295
 801a57a:	e027      	b.n	801a5cc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a57c:	2003      	movs	r0, #3
 801a57e:	f7fe f93d 	bl	80187fc <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a582:	4b14      	ldr	r3, [pc, #80]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a584:	2202      	movs	r2, #2
 801a586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	4a11      	ldr	r2, [pc, #68]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a590:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a592:	4b10      	ldr	r3, [pc, #64]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a594:	2216      	movs	r2, #22
 801a596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a59a:	480f      	ldr	r0, [pc, #60]	; (801a5d8 <RadioSetTxGenericConfig+0x464>)
 801a59c:	f000 fd12 	bl	801afc4 <SUBGRF_SetModulationParams>
        break;
 801a5a0:	e000      	b.n	801a5a4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a5a2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a5a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f001 f841 	bl	801b630 <SUBGRF_SetRfTxPower>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	461a      	mov	r2, r3
 801a5b2:	4b08      	ldr	r3, [pc, #32]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a5b4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a5b8:	4b06      	ldr	r3, [pc, #24]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a5ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a5be:	4618      	mov	r0, r3
 801a5c0:	f001 fa05 	bl	801b9ce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a5c4:	4a03      	ldr	r2, [pc, #12]	; (801a5d4 <RadioSetTxGenericConfig+0x460>)
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	6053      	str	r3, [r2, #4]
    return 0;
 801a5ca:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	3738      	adds	r7, #56	; 0x38
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bd80      	pop	{r7, pc}
 801a5d4:	20001e74 	.word	0x20001e74
 801a5d8:	20001eac 	.word	0x20001eac
 801a5dc:	20001e82 	.word	0x20001e82

0801a5e0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b084      	sub	sp, #16
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d002      	beq.n	801a5f4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a5ee:	4a1a      	ldr	r2, [pc, #104]	; (801a658 <SUBGRF_Init+0x78>)
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a5f4:	f7e7 fc24 	bl	8001e40 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a5f8:	2002      	movs	r0, #2
 801a5fa:	f001 f8e5 	bl	801b7c8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a5fe:	4b17      	ldr	r3, [pc, #92]	; (801a65c <SUBGRF_Init+0x7c>)
 801a600:	2200      	movs	r2, #0
 801a602:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a604:	2000      	movs	r0, #0
 801a606:	f000 f977 	bl	801a8f8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a60a:	f7f2 fa4c 	bl	800caa6 <RBI_IsTCXO>
 801a60e:	4603      	mov	r3, r0
 801a610:	2b01      	cmp	r3, #1
 801a612:	d10e      	bne.n	801a632 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a614:	2140      	movs	r1, #64	; 0x40
 801a616:	2001      	movs	r0, #1
 801a618:	f000 fb78 	bl	801ad0c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a61c:	2100      	movs	r1, #0
 801a61e:	f640 1011 	movw	r0, #2321	; 0x911
 801a622:	f000 fee9 	bl	801b3f8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a626:	237f      	movs	r3, #127	; 0x7f
 801a628:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a62a:	7b38      	ldrb	r0, [r7, #12]
 801a62c:	f000 fa85 	bl	801ab3a <SUBGRF_Calibrate>
 801a630:	e009      	b.n	801a646 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a632:	2120      	movs	r1, #32
 801a634:	f640 1011 	movw	r0, #2321	; 0x911
 801a638:	f000 fede 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a63c:	2120      	movs	r1, #32
 801a63e:	f640 1012 	movw	r0, #2322	; 0x912
 801a642:	f000 fed9 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a646:	f7f2 f997 	bl	800c978 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a64a:	4b05      	ldr	r3, [pc, #20]	; (801a660 <SUBGRF_Init+0x80>)
 801a64c:	2201      	movs	r2, #1
 801a64e:	701a      	strb	r2, [r3, #0]
}
 801a650:	bf00      	nop
 801a652:	3710      	adds	r7, #16
 801a654:	46bd      	mov	sp, r7
 801a656:	bd80      	pop	{r7, pc}
 801a658:	20001f0c 	.word	0x20001f0c
 801a65c:	20001f08 	.word	0x20001f08
 801a660:	20001f00 	.word	0x20001f00

0801a664 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a664:	b480      	push	{r7}
 801a666:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a668:	4b02      	ldr	r3, [pc, #8]	; (801a674 <SUBGRF_GetOperatingMode+0x10>)
 801a66a:	781b      	ldrb	r3, [r3, #0]
}
 801a66c:	4618      	mov	r0, r3
 801a66e:	46bd      	mov	sp, r7
 801a670:	bc80      	pop	{r7}
 801a672:	4770      	bx	lr
 801a674:	20001f00 	.word	0x20001f00

0801a678 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b082      	sub	sp, #8
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	460b      	mov	r3, r1
 801a682:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a684:	78fb      	ldrb	r3, [r7, #3]
 801a686:	461a      	mov	r2, r3
 801a688:	6879      	ldr	r1, [r7, #4]
 801a68a:	2000      	movs	r0, #0
 801a68c:	f000 ff20 	bl	801b4d0 <SUBGRF_WriteBuffer>
}
 801a690:	bf00      	nop
 801a692:	3708      	adds	r7, #8
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}

0801a698 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b086      	sub	sp, #24
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	60f8      	str	r0, [r7, #12]
 801a6a0:	60b9      	str	r1, [r7, #8]
 801a6a2:	4613      	mov	r3, r2
 801a6a4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a6aa:	f107 0317 	add.w	r3, r7, #23
 801a6ae:	4619      	mov	r1, r3
 801a6b0:	68b8      	ldr	r0, [r7, #8]
 801a6b2:	f000 fe23 	bl	801b2fc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	79fa      	ldrb	r2, [r7, #7]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d201      	bcs.n	801a6c4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	e007      	b.n	801a6d4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a6c4:	7df8      	ldrb	r0, [r7, #23]
 801a6c6:	68bb      	ldr	r3, [r7, #8]
 801a6c8:	781b      	ldrb	r3, [r3, #0]
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	68f9      	ldr	r1, [r7, #12]
 801a6ce:	f000 ff21 	bl	801b514 <SUBGRF_ReadBuffer>

    return 0;
 801a6d2:	2300      	movs	r3, #0
}
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	3718      	adds	r7, #24
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	bd80      	pop	{r7, pc}

0801a6dc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b084      	sub	sp, #16
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	60f8      	str	r0, [r7, #12]
 801a6e4:	460b      	mov	r3, r1
 801a6e6:	607a      	str	r2, [r7, #4]
 801a6e8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a6ea:	7afb      	ldrb	r3, [r7, #11]
 801a6ec:	4619      	mov	r1, r3
 801a6ee:	68f8      	ldr	r0, [r7, #12]
 801a6f0:	f7ff ffc2 	bl	801a678 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a6f4:	6878      	ldr	r0, [r7, #4]
 801a6f6:	f000 f91b 	bl	801a930 <SUBGRF_SetTx>
}
 801a6fa:	bf00      	nop
 801a6fc:	3710      	adds	r7, #16
 801a6fe:	46bd      	mov	sp, r7
 801a700:	bd80      	pop	{r7, pc}

0801a702 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a702:	b580      	push	{r7, lr}
 801a704:	b082      	sub	sp, #8
 801a706:	af00      	add	r7, sp, #0
 801a708:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a70a:	2208      	movs	r2, #8
 801a70c:	6879      	ldr	r1, [r7, #4]
 801a70e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a712:	f000 fe99 	bl	801b448 <SUBGRF_WriteRegisters>
    return 0;
 801a716:	2300      	movs	r3, #0
}
 801a718:	4618      	mov	r0, r3
 801a71a:	3708      	adds	r7, #8
 801a71c:	46bd      	mov	sp, r7
 801a71e:	bd80      	pop	{r7, pc}

0801a720 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	4603      	mov	r3, r0
 801a728:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a72a:	88fb      	ldrh	r3, [r7, #6]
 801a72c:	0a1b      	lsrs	r3, r3, #8
 801a72e:	b29b      	uxth	r3, r3
 801a730:	b2db      	uxtb	r3, r3
 801a732:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a734:	88fb      	ldrh	r3, [r7, #6]
 801a736:	b2db      	uxtb	r3, r3
 801a738:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a73a:	f000 fb6b 	bl	801ae14 <SUBGRF_GetPacketType>
 801a73e:	4603      	mov	r3, r0
 801a740:	2b00      	cmp	r3, #0
 801a742:	d108      	bne.n	801a756 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a744:	f107 030c 	add.w	r3, r7, #12
 801a748:	2202      	movs	r2, #2
 801a74a:	4619      	mov	r1, r3
 801a74c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a750:	f000 fe7a 	bl	801b448 <SUBGRF_WriteRegisters>
            break;
 801a754:	e000      	b.n	801a758 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a756:	bf00      	nop
    }
}
 801a758:	bf00      	nop
 801a75a:	3710      	adds	r7, #16
 801a75c:	46bd      	mov	sp, r7
 801a75e:	bd80      	pop	{r7, pc}

0801a760 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b084      	sub	sp, #16
 801a764:	af00      	add	r7, sp, #0
 801a766:	4603      	mov	r3, r0
 801a768:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a76a:	88fb      	ldrh	r3, [r7, #6]
 801a76c:	0a1b      	lsrs	r3, r3, #8
 801a76e:	b29b      	uxth	r3, r3
 801a770:	b2db      	uxtb	r3, r3
 801a772:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a774:	88fb      	ldrh	r3, [r7, #6]
 801a776:	b2db      	uxtb	r3, r3
 801a778:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a77a:	f000 fb4b 	bl	801ae14 <SUBGRF_GetPacketType>
 801a77e:	4603      	mov	r3, r0
 801a780:	2b00      	cmp	r3, #0
 801a782:	d108      	bne.n	801a796 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a784:	f107 030c 	add.w	r3, r7, #12
 801a788:	2202      	movs	r2, #2
 801a78a:	4619      	mov	r1, r3
 801a78c:	f240 60be 	movw	r0, #1726	; 0x6be
 801a790:	f000 fe5a 	bl	801b448 <SUBGRF_WriteRegisters>
            break;
 801a794:	e000      	b.n	801a798 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a796:	bf00      	nop
    }
}
 801a798:	bf00      	nop
 801a79a:	3710      	adds	r7, #16
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}

0801a7a0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b084      	sub	sp, #16
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	4603      	mov	r3, r0
 801a7a8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a7ae:	f000 fb31 	bl	801ae14 <SUBGRF_GetPacketType>
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d121      	bne.n	801a7fc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a7b8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a7bc:	f000 fe30 	bl	801b420 <SUBGRF_ReadRegister>
 801a7c0:	4603      	mov	r3, r0
 801a7c2:	f023 0301 	bic.w	r3, r3, #1
 801a7c6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a7c8:	88fb      	ldrh	r3, [r7, #6]
 801a7ca:	0a1b      	lsrs	r3, r3, #8
 801a7cc:	b29b      	uxth	r3, r3
 801a7ce:	b25b      	sxtb	r3, r3
 801a7d0:	f003 0301 	and.w	r3, r3, #1
 801a7d4:	b25a      	sxtb	r2, r3
 801a7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a7da:	4313      	orrs	r3, r2
 801a7dc:	b25b      	sxtb	r3, r3
 801a7de:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a7e0:	7bfb      	ldrb	r3, [r7, #15]
 801a7e2:	4619      	mov	r1, r3
 801a7e4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a7e8:	f000 fe06 	bl	801b3f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a7ec:	88fb      	ldrh	r3, [r7, #6]
 801a7ee:	b2db      	uxtb	r3, r3
 801a7f0:	4619      	mov	r1, r3
 801a7f2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a7f6:	f000 fdff 	bl	801b3f8 <SUBGRF_WriteRegister>
            break;
 801a7fa:	e000      	b.n	801a7fe <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a7fc:	bf00      	nop
    }
}
 801a7fe:	bf00      	nop
 801a800:	3710      	adds	r7, #16
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}

0801a806 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a806:	b580      	push	{r7, lr}
 801a808:	b082      	sub	sp, #8
 801a80a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a80c:	2300      	movs	r3, #0
 801a80e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a810:	2300      	movs	r3, #0
 801a812:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a814:	2300      	movs	r3, #0
 801a816:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a818:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a81c:	f000 fe00 	bl	801b420 <SUBGRF_ReadRegister>
 801a820:	4603      	mov	r3, r0
 801a822:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a824:	79fb      	ldrb	r3, [r7, #7]
 801a826:	f023 0301 	bic.w	r3, r3, #1
 801a82a:	b2db      	uxtb	r3, r3
 801a82c:	4619      	mov	r1, r3
 801a82e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a832:	f000 fde1 	bl	801b3f8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a836:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a83a:	f000 fdf1 	bl	801b420 <SUBGRF_ReadRegister>
 801a83e:	4603      	mov	r3, r0
 801a840:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a842:	79bb      	ldrb	r3, [r7, #6]
 801a844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a848:	b2db      	uxtb	r3, r3
 801a84a:	4619      	mov	r1, r3
 801a84c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a850:	f000 fdd2 	bl	801b3f8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a854:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a858:	f000 f88a 	bl	801a970 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a85c:	463b      	mov	r3, r7
 801a85e:	2204      	movs	r2, #4
 801a860:	4619      	mov	r1, r3
 801a862:	f640 0019 	movw	r0, #2073	; 0x819
 801a866:	f000 fe11 	bl	801b48c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a86a:	2000      	movs	r0, #0
 801a86c:	f000 f844 	bl	801a8f8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a870:	79fb      	ldrb	r3, [r7, #7]
 801a872:	4619      	mov	r1, r3
 801a874:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a878:	f000 fdbe 	bl	801b3f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a87c:	79bb      	ldrb	r3, [r7, #6]
 801a87e:	4619      	mov	r1, r3
 801a880:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a884:	f000 fdb8 	bl	801b3f8 <SUBGRF_WriteRegister>

    return number;
 801a888:	683b      	ldr	r3, [r7, #0]
}
 801a88a:	4618      	mov	r0, r3
 801a88c:	3708      	adds	r7, #8
 801a88e:	46bd      	mov	sp, r7
 801a890:	bd80      	pop	{r7, pc}
	...

0801a894 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b084      	sub	sp, #16
 801a898:	af00      	add	r7, sp, #0
 801a89a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a89c:	2000      	movs	r0, #0
 801a89e:	f7f2 f8a3 	bl	800c9e8 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a8a2:	2002      	movs	r0, #2
 801a8a4:	f000 ff90 	bl	801b7c8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8a8:	793b      	ldrb	r3, [r7, #4]
 801a8aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a8ae:	b2db      	uxtb	r3, r3
 801a8b0:	009b      	lsls	r3, r3, #2
 801a8b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8b4:	793b      	ldrb	r3, [r7, #4]
 801a8b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a8ba:	b2db      	uxtb	r3, r3
 801a8bc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8be:	b25b      	sxtb	r3, r3
 801a8c0:	4313      	orrs	r3, r2
 801a8c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a8c4:	793b      	ldrb	r3, [r7, #4]
 801a8c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a8ca:	b2db      	uxtb	r3, r3
 801a8cc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8ce:	4313      	orrs	r3, r2
 801a8d0:	b25b      	sxtb	r3, r3
 801a8d2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a8d6:	f107 030f 	add.w	r3, r7, #15
 801a8da:	2201      	movs	r2, #1
 801a8dc:	4619      	mov	r1, r3
 801a8de:	2084      	movs	r0, #132	; 0x84
 801a8e0:	f000 fe3a 	bl	801b558 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a8e4:	4b03      	ldr	r3, [pc, #12]	; (801a8f4 <SUBGRF_SetSleep+0x60>)
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	701a      	strb	r2, [r3, #0]
}
 801a8ea:	bf00      	nop
 801a8ec:	3710      	adds	r7, #16
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd80      	pop	{r7, pc}
 801a8f2:	bf00      	nop
 801a8f4:	20001f00 	.word	0x20001f00

0801a8f8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b082      	sub	sp, #8
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	4603      	mov	r3, r0
 801a900:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a902:	1dfb      	adds	r3, r7, #7
 801a904:	2201      	movs	r2, #1
 801a906:	4619      	mov	r1, r3
 801a908:	2080      	movs	r0, #128	; 0x80
 801a90a:	f000 fe25 	bl	801b558 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a90e:	79fb      	ldrb	r3, [r7, #7]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d103      	bne.n	801a91c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a914:	4b05      	ldr	r3, [pc, #20]	; (801a92c <SUBGRF_SetStandby+0x34>)
 801a916:	2201      	movs	r2, #1
 801a918:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a91a:	e002      	b.n	801a922 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a91c:	4b03      	ldr	r3, [pc, #12]	; (801a92c <SUBGRF_SetStandby+0x34>)
 801a91e:	2202      	movs	r2, #2
 801a920:	701a      	strb	r2, [r3, #0]
}
 801a922:	bf00      	nop
 801a924:	3708      	adds	r7, #8
 801a926:	46bd      	mov	sp, r7
 801a928:	bd80      	pop	{r7, pc}
 801a92a:	bf00      	nop
 801a92c:	20001f00 	.word	0x20001f00

0801a930 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a938:	4b0c      	ldr	r3, [pc, #48]	; (801a96c <SUBGRF_SetTx+0x3c>)
 801a93a:	2204      	movs	r2, #4
 801a93c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	0c1b      	lsrs	r3, r3, #16
 801a942:	b2db      	uxtb	r3, r3
 801a944:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	0a1b      	lsrs	r3, r3, #8
 801a94a:	b2db      	uxtb	r3, r3
 801a94c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	b2db      	uxtb	r3, r3
 801a952:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a954:	f107 030c 	add.w	r3, r7, #12
 801a958:	2203      	movs	r2, #3
 801a95a:	4619      	mov	r1, r3
 801a95c:	2083      	movs	r0, #131	; 0x83
 801a95e:	f000 fdfb 	bl	801b558 <SUBGRF_WriteCommand>
}
 801a962:	bf00      	nop
 801a964:	3710      	adds	r7, #16
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	20001f00 	.word	0x20001f00

0801a970 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b084      	sub	sp, #16
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a978:	4b0c      	ldr	r3, [pc, #48]	; (801a9ac <SUBGRF_SetRx+0x3c>)
 801a97a:	2205      	movs	r2, #5
 801a97c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	0c1b      	lsrs	r3, r3, #16
 801a982:	b2db      	uxtb	r3, r3
 801a984:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	0a1b      	lsrs	r3, r3, #8
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	b2db      	uxtb	r3, r3
 801a992:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a994:	f107 030c 	add.w	r3, r7, #12
 801a998:	2203      	movs	r2, #3
 801a99a:	4619      	mov	r1, r3
 801a99c:	2082      	movs	r0, #130	; 0x82
 801a99e:	f000 fddb 	bl	801b558 <SUBGRF_WriteCommand>
}
 801a9a2:	bf00      	nop
 801a9a4:	3710      	adds	r7, #16
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	20001f00 	.word	0x20001f00

0801a9b0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b084      	sub	sp, #16
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a9b8:	4b0e      	ldr	r3, [pc, #56]	; (801a9f4 <SUBGRF_SetRxBoosted+0x44>)
 801a9ba:	2205      	movs	r2, #5
 801a9bc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a9be:	2197      	movs	r1, #151	; 0x97
 801a9c0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a9c4:	f000 fd18 	bl	801b3f8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	0c1b      	lsrs	r3, r3, #16
 801a9cc:	b2db      	uxtb	r3, r3
 801a9ce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	0a1b      	lsrs	r3, r3, #8
 801a9d4:	b2db      	uxtb	r3, r3
 801a9d6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	b2db      	uxtb	r3, r3
 801a9dc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a9de:	f107 030c 	add.w	r3, r7, #12
 801a9e2:	2203      	movs	r2, #3
 801a9e4:	4619      	mov	r1, r3
 801a9e6:	2082      	movs	r0, #130	; 0x82
 801a9e8:	f000 fdb6 	bl	801b558 <SUBGRF_WriteCommand>
}
 801a9ec:	bf00      	nop
 801a9ee:	3710      	adds	r7, #16
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	bd80      	pop	{r7, pc}
 801a9f4:	20001f00 	.word	0x20001f00

0801a9f8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b084      	sub	sp, #16
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	0c1b      	lsrs	r3, r3, #16
 801aa06:	b2db      	uxtb	r3, r3
 801aa08:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	0a1b      	lsrs	r3, r3, #8
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801aa18:	683b      	ldr	r3, [r7, #0]
 801aa1a:	0c1b      	lsrs	r3, r3, #16
 801aa1c:	b2db      	uxtb	r3, r3
 801aa1e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	0a1b      	lsrs	r3, r3, #8
 801aa24:	b2db      	uxtb	r3, r3
 801aa26:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801aa28:	683b      	ldr	r3, [r7, #0]
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801aa2e:	f107 0308 	add.w	r3, r7, #8
 801aa32:	2206      	movs	r2, #6
 801aa34:	4619      	mov	r1, r3
 801aa36:	2094      	movs	r0, #148	; 0x94
 801aa38:	f000 fd8e 	bl	801b558 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801aa3c:	4b03      	ldr	r3, [pc, #12]	; (801aa4c <SUBGRF_SetRxDutyCycle+0x54>)
 801aa3e:	2206      	movs	r2, #6
 801aa40:	701a      	strb	r2, [r3, #0]
}
 801aa42:	bf00      	nop
 801aa44:	3710      	adds	r7, #16
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}
 801aa4a:	bf00      	nop
 801aa4c:	20001f00 	.word	0x20001f00

0801aa50 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801aa54:	2200      	movs	r2, #0
 801aa56:	2100      	movs	r1, #0
 801aa58:	20c5      	movs	r0, #197	; 0xc5
 801aa5a:	f000 fd7d 	bl	801b558 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801aa5e:	4b02      	ldr	r3, [pc, #8]	; (801aa68 <SUBGRF_SetCad+0x18>)
 801aa60:	2207      	movs	r2, #7
 801aa62:	701a      	strb	r2, [r3, #0]
}
 801aa64:	bf00      	nop
 801aa66:	bd80      	pop	{r7, pc}
 801aa68:	20001f00 	.word	0x20001f00

0801aa6c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801aa70:	2200      	movs	r2, #0
 801aa72:	2100      	movs	r1, #0
 801aa74:	20d1      	movs	r0, #209	; 0xd1
 801aa76:	f000 fd6f 	bl	801b558 <SUBGRF_WriteCommand>
}
 801aa7a:	bf00      	nop
 801aa7c:	bd80      	pop	{r7, pc}

0801aa7e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801aa7e:	b580      	push	{r7, lr}
 801aa80:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801aa82:	2200      	movs	r2, #0
 801aa84:	2100      	movs	r1, #0
 801aa86:	20d2      	movs	r0, #210	; 0xd2
 801aa88:	f000 fd66 	bl	801b558 <SUBGRF_WriteCommand>
}
 801aa8c:	bf00      	nop
 801aa8e:	bd80      	pop	{r7, pc}

0801aa90 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b082      	sub	sp, #8
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	4603      	mov	r3, r0
 801aa98:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801aa9a:	1dfb      	adds	r3, r7, #7
 801aa9c:	2201      	movs	r2, #1
 801aa9e:	4619      	mov	r1, r3
 801aaa0:	209f      	movs	r0, #159	; 0x9f
 801aaa2:	f000 fd59 	bl	801b558 <SUBGRF_WriteCommand>
}
 801aaa6:	bf00      	nop
 801aaa8:	3708      	adds	r7, #8
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}

0801aaae <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801aaae:	b580      	push	{r7, lr}
 801aab0:	b084      	sub	sp, #16
 801aab2:	af00      	add	r7, sp, #0
 801aab4:	4603      	mov	r3, r0
 801aab6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801aab8:	1dfb      	adds	r3, r7, #7
 801aaba:	2201      	movs	r2, #1
 801aabc:	4619      	mov	r1, r3
 801aabe:	20a0      	movs	r0, #160	; 0xa0
 801aac0:	f000 fd4a 	bl	801b558 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801aac4:	79fb      	ldrb	r3, [r7, #7]
 801aac6:	2b3f      	cmp	r3, #63	; 0x3f
 801aac8:	d91c      	bls.n	801ab04 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801aaca:	79fb      	ldrb	r3, [r7, #7]
 801aacc:	085b      	lsrs	r3, r3, #1
 801aace:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801aad0:	2300      	movs	r3, #0
 801aad2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801aad4:	2300      	movs	r3, #0
 801aad6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801aad8:	e005      	b.n	801aae6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801aada:	7bfb      	ldrb	r3, [r7, #15]
 801aadc:	089b      	lsrs	r3, r3, #2
 801aade:	73fb      	strb	r3, [r7, #15]
            exp++;
 801aae0:	7bbb      	ldrb	r3, [r7, #14]
 801aae2:	3301      	adds	r3, #1
 801aae4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801aae6:	7bfb      	ldrb	r3, [r7, #15]
 801aae8:	2b1f      	cmp	r3, #31
 801aaea:	d8f6      	bhi.n	801aada <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801aaec:	7bfb      	ldrb	r3, [r7, #15]
 801aaee:	00db      	lsls	r3, r3, #3
 801aaf0:	b2da      	uxtb	r2, r3
 801aaf2:	7bbb      	ldrb	r3, [r7, #14]
 801aaf4:	4413      	add	r3, r2
 801aaf6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801aaf8:	7b7b      	ldrb	r3, [r7, #13]
 801aafa:	4619      	mov	r1, r3
 801aafc:	f240 7006 	movw	r0, #1798	; 0x706
 801ab00:	f000 fc7a 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
}
 801ab04:	bf00      	nop
 801ab06:	3710      	adds	r7, #16
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}

0801ab0c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ab12:	f7f1 ffd3 	bl	800cabc <RBI_IsDCDC>
 801ab16:	4603      	mov	r3, r0
 801ab18:	2b01      	cmp	r3, #1
 801ab1a:	d102      	bne.n	801ab22 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ab1c:	2301      	movs	r3, #1
 801ab1e:	71fb      	strb	r3, [r7, #7]
 801ab20:	e001      	b.n	801ab26 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ab22:	2300      	movs	r3, #0
 801ab24:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ab26:	1dfb      	adds	r3, r7, #7
 801ab28:	2201      	movs	r2, #1
 801ab2a:	4619      	mov	r1, r3
 801ab2c:	2096      	movs	r0, #150	; 0x96
 801ab2e:	f000 fd13 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ab32:	bf00      	nop
 801ab34:	3708      	adds	r7, #8
 801ab36:	46bd      	mov	sp, r7
 801ab38:	bd80      	pop	{r7, pc}

0801ab3a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ab3a:	b580      	push	{r7, lr}
 801ab3c:	b084      	sub	sp, #16
 801ab3e:	af00      	add	r7, sp, #0
 801ab40:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab42:	793b      	ldrb	r3, [r7, #4]
 801ab44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ab48:	b2db      	uxtb	r3, r3
 801ab4a:	019b      	lsls	r3, r3, #6
 801ab4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab4e:	793b      	ldrb	r3, [r7, #4]
 801ab50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ab54:	b2db      	uxtb	r3, r3
 801ab56:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab58:	b25b      	sxtb	r3, r3
 801ab5a:	4313      	orrs	r3, r2
 801ab5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab5e:	793b      	ldrb	r3, [r7, #4]
 801ab60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ab64:	b2db      	uxtb	r3, r3
 801ab66:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab68:	b25b      	sxtb	r3, r3
 801ab6a:	4313      	orrs	r3, r2
 801ab6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ab6e:	793b      	ldrb	r3, [r7, #4]
 801ab70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ab74:	b2db      	uxtb	r3, r3
 801ab76:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab78:	b25b      	sxtb	r3, r3
 801ab7a:	4313      	orrs	r3, r2
 801ab7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ab7e:	793b      	ldrb	r3, [r7, #4]
 801ab80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ab84:	b2db      	uxtb	r3, r3
 801ab86:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ab88:	b25b      	sxtb	r3, r3
 801ab8a:	4313      	orrs	r3, r2
 801ab8c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ab8e:	793b      	ldrb	r3, [r7, #4]
 801ab90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801ab94:	b2db      	uxtb	r3, r3
 801ab96:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ab98:	b25b      	sxtb	r3, r3
 801ab9a:	4313      	orrs	r3, r2
 801ab9c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801ab9e:	793b      	ldrb	r3, [r7, #4]
 801aba0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801aba4:	b2db      	uxtb	r3, r3
 801aba6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801aba8:	4313      	orrs	r3, r2
 801abaa:	b25b      	sxtb	r3, r3
 801abac:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801abae:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801abb0:	f107 030f 	add.w	r3, r7, #15
 801abb4:	2201      	movs	r2, #1
 801abb6:	4619      	mov	r1, r3
 801abb8:	2089      	movs	r0, #137	; 0x89
 801abba:	f000 fccd 	bl	801b558 <SUBGRF_WriteCommand>
}
 801abbe:	bf00      	nop
 801abc0:	3710      	adds	r7, #16
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}
	...

0801abc8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b084      	sub	sp, #16
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	4a1b      	ldr	r2, [pc, #108]	; (801ac40 <SUBGRF_CalibrateImage+0x78>)
 801abd4:	4293      	cmp	r3, r2
 801abd6:	d904      	bls.n	801abe2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801abd8:	23e1      	movs	r3, #225	; 0xe1
 801abda:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801abdc:	23e9      	movs	r3, #233	; 0xe9
 801abde:	737b      	strb	r3, [r7, #13]
 801abe0:	e022      	b.n	801ac28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	4a17      	ldr	r2, [pc, #92]	; (801ac44 <SUBGRF_CalibrateImage+0x7c>)
 801abe6:	4293      	cmp	r3, r2
 801abe8:	d904      	bls.n	801abf4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801abea:	23d7      	movs	r3, #215	; 0xd7
 801abec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801abee:	23db      	movs	r3, #219	; 0xdb
 801abf0:	737b      	strb	r3, [r7, #13]
 801abf2:	e019      	b.n	801ac28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	4a14      	ldr	r2, [pc, #80]	; (801ac48 <SUBGRF_CalibrateImage+0x80>)
 801abf8:	4293      	cmp	r3, r2
 801abfa:	d904      	bls.n	801ac06 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801abfc:	23c1      	movs	r3, #193	; 0xc1
 801abfe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801ac00:	23c5      	movs	r3, #197	; 0xc5
 801ac02:	737b      	strb	r3, [r7, #13]
 801ac04:	e010      	b.n	801ac28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	4a10      	ldr	r2, [pc, #64]	; (801ac4c <SUBGRF_CalibrateImage+0x84>)
 801ac0a:	4293      	cmp	r3, r2
 801ac0c:	d904      	bls.n	801ac18 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ac0e:	2375      	movs	r3, #117	; 0x75
 801ac10:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ac12:	2381      	movs	r3, #129	; 0x81
 801ac14:	737b      	strb	r3, [r7, #13]
 801ac16:	e007      	b.n	801ac28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	4a0d      	ldr	r2, [pc, #52]	; (801ac50 <SUBGRF_CalibrateImage+0x88>)
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	d903      	bls.n	801ac28 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801ac20:	236b      	movs	r3, #107	; 0x6b
 801ac22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ac24:	236f      	movs	r3, #111	; 0x6f
 801ac26:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ac28:	f107 030c 	add.w	r3, r7, #12
 801ac2c:	2202      	movs	r2, #2
 801ac2e:	4619      	mov	r1, r3
 801ac30:	2098      	movs	r0, #152	; 0x98
 801ac32:	f000 fc91 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ac36:	bf00      	nop
 801ac38:	3710      	adds	r7, #16
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bd80      	pop	{r7, pc}
 801ac3e:	bf00      	nop
 801ac40:	35a4e900 	.word	0x35a4e900
 801ac44:	32a9f880 	.word	0x32a9f880
 801ac48:	2de54480 	.word	0x2de54480
 801ac4c:	1b6b0b00 	.word	0x1b6b0b00
 801ac50:	1954fc40 	.word	0x1954fc40

0801ac54 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ac54:	b590      	push	{r4, r7, lr}
 801ac56:	b085      	sub	sp, #20
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	4608      	mov	r0, r1
 801ac5e:	4611      	mov	r1, r2
 801ac60:	461a      	mov	r2, r3
 801ac62:	4623      	mov	r3, r4
 801ac64:	71fb      	strb	r3, [r7, #7]
 801ac66:	4603      	mov	r3, r0
 801ac68:	71bb      	strb	r3, [r7, #6]
 801ac6a:	460b      	mov	r3, r1
 801ac6c:	717b      	strb	r3, [r7, #5]
 801ac6e:	4613      	mov	r3, r2
 801ac70:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ac72:	79fb      	ldrb	r3, [r7, #7]
 801ac74:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ac76:	79bb      	ldrb	r3, [r7, #6]
 801ac78:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801ac7a:	797b      	ldrb	r3, [r7, #5]
 801ac7c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801ac7e:	793b      	ldrb	r3, [r7, #4]
 801ac80:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801ac82:	f107 030c 	add.w	r3, r7, #12
 801ac86:	2204      	movs	r2, #4
 801ac88:	4619      	mov	r1, r3
 801ac8a:	2095      	movs	r0, #149	; 0x95
 801ac8c:	f000 fc64 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ac90:	bf00      	nop
 801ac92:	3714      	adds	r7, #20
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd90      	pop	{r4, r7, pc}

0801ac98 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801ac98:	b590      	push	{r4, r7, lr}
 801ac9a:	b085      	sub	sp, #20
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	4604      	mov	r4, r0
 801aca0:	4608      	mov	r0, r1
 801aca2:	4611      	mov	r1, r2
 801aca4:	461a      	mov	r2, r3
 801aca6:	4623      	mov	r3, r4
 801aca8:	80fb      	strh	r3, [r7, #6]
 801acaa:	4603      	mov	r3, r0
 801acac:	80bb      	strh	r3, [r7, #4]
 801acae:	460b      	mov	r3, r1
 801acb0:	807b      	strh	r3, [r7, #2]
 801acb2:	4613      	mov	r3, r2
 801acb4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801acb6:	88fb      	ldrh	r3, [r7, #6]
 801acb8:	0a1b      	lsrs	r3, r3, #8
 801acba:	b29b      	uxth	r3, r3
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801acc0:	88fb      	ldrh	r3, [r7, #6]
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801acc6:	88bb      	ldrh	r3, [r7, #4]
 801acc8:	0a1b      	lsrs	r3, r3, #8
 801acca:	b29b      	uxth	r3, r3
 801accc:	b2db      	uxtb	r3, r3
 801acce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801acd0:	88bb      	ldrh	r3, [r7, #4]
 801acd2:	b2db      	uxtb	r3, r3
 801acd4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801acd6:	887b      	ldrh	r3, [r7, #2]
 801acd8:	0a1b      	lsrs	r3, r3, #8
 801acda:	b29b      	uxth	r3, r3
 801acdc:	b2db      	uxtb	r3, r3
 801acde:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801ace0:	887b      	ldrh	r3, [r7, #2]
 801ace2:	b2db      	uxtb	r3, r3
 801ace4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801ace6:	883b      	ldrh	r3, [r7, #0]
 801ace8:	0a1b      	lsrs	r3, r3, #8
 801acea:	b29b      	uxth	r3, r3
 801acec:	b2db      	uxtb	r3, r3
 801acee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801acf0:	883b      	ldrh	r3, [r7, #0]
 801acf2:	b2db      	uxtb	r3, r3
 801acf4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801acf6:	f107 0308 	add.w	r3, r7, #8
 801acfa:	2208      	movs	r2, #8
 801acfc:	4619      	mov	r1, r3
 801acfe:	2008      	movs	r0, #8
 801ad00:	f000 fc2a 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ad04:	bf00      	nop
 801ad06:	3714      	adds	r7, #20
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd90      	pop	{r4, r7, pc}

0801ad0c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b084      	sub	sp, #16
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	4603      	mov	r3, r0
 801ad14:	6039      	str	r1, [r7, #0]
 801ad16:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801ad18:	79fb      	ldrb	r3, [r7, #7]
 801ad1a:	f003 0307 	and.w	r3, r3, #7
 801ad1e:	b2db      	uxtb	r3, r3
 801ad20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	0c1b      	lsrs	r3, r3, #16
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	0a1b      	lsrs	r3, r3, #8
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	b2db      	uxtb	r3, r3
 801ad36:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ad38:	f107 030c 	add.w	r3, r7, #12
 801ad3c:	2204      	movs	r2, #4
 801ad3e:	4619      	mov	r1, r3
 801ad40:	2097      	movs	r0, #151	; 0x97
 801ad42:	f000 fc09 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ad46:	bf00      	nop
 801ad48:	3710      	adds	r7, #16
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}
	...

0801ad50 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ad50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ad54:	b084      	sub	sp, #16
 801ad56:	af00      	add	r7, sp, #0
 801ad58:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ad5e:	4b1d      	ldr	r3, [pc, #116]	; (801add4 <SUBGRF_SetRfFrequency+0x84>)
 801ad60:	781b      	ldrb	r3, [r3, #0]
 801ad62:	f083 0301 	eor.w	r3, r3, #1
 801ad66:	b2db      	uxtb	r3, r3
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d005      	beq.n	801ad78 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ad6c:	6878      	ldr	r0, [r7, #4]
 801ad6e:	f7ff ff2b 	bl	801abc8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801ad72:	4b18      	ldr	r3, [pc, #96]	; (801add4 <SUBGRF_SetRfFrequency+0x84>)
 801ad74:	2201      	movs	r2, #1
 801ad76:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	461c      	mov	r4, r3
 801ad7e:	4615      	mov	r5, r2
 801ad80:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ad84:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ad88:	4a13      	ldr	r2, [pc, #76]	; (801add8 <SUBGRF_SetRfFrequency+0x88>)
 801ad8a:	f04f 0300 	mov.w	r3, #0
 801ad8e:	4640      	mov	r0, r8
 801ad90:	4649      	mov	r1, r9
 801ad92:	f7e6 f86f 	bl	8000e74 <__aeabi_uldivmod>
 801ad96:	4602      	mov	r2, r0
 801ad98:	460b      	mov	r3, r1
 801ad9a:	4613      	mov	r3, r2
 801ad9c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	0e1b      	lsrs	r3, r3, #24
 801ada2:	b2db      	uxtb	r3, r3
 801ada4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	0c1b      	lsrs	r3, r3, #16
 801adaa:	b2db      	uxtb	r3, r3
 801adac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	0a1b      	lsrs	r3, r3, #8
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	b2db      	uxtb	r3, r3
 801adba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801adbc:	f107 0308 	add.w	r3, r7, #8
 801adc0:	2204      	movs	r2, #4
 801adc2:	4619      	mov	r1, r3
 801adc4:	2086      	movs	r0, #134	; 0x86
 801adc6:	f000 fbc7 	bl	801b558 <SUBGRF_WriteCommand>
}
 801adca:	bf00      	nop
 801adcc:	3710      	adds	r7, #16
 801adce:	46bd      	mov	sp, r7
 801add0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801add4:	20001f08 	.word	0x20001f08
 801add8:	01e84800 	.word	0x01e84800

0801addc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b082      	sub	sp, #8
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	4603      	mov	r3, r0
 801ade4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801ade6:	79fa      	ldrb	r2, [r7, #7]
 801ade8:	4b09      	ldr	r3, [pc, #36]	; (801ae10 <SUBGRF_SetPacketType+0x34>)
 801adea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801adec:	79fb      	ldrb	r3, [r7, #7]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d104      	bne.n	801adfc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801adf2:	2100      	movs	r1, #0
 801adf4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801adf8:	f000 fafe 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801adfc:	1dfb      	adds	r3, r7, #7
 801adfe:	2201      	movs	r2, #1
 801ae00:	4619      	mov	r1, r3
 801ae02:	208a      	movs	r0, #138	; 0x8a
 801ae04:	f000 fba8 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ae08:	bf00      	nop
 801ae0a:	3708      	adds	r7, #8
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}
 801ae10:	20001f01 	.word	0x20001f01

0801ae14 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ae14:	b480      	push	{r7}
 801ae16:	af00      	add	r7, sp, #0
    return PacketType;
 801ae18:	4b02      	ldr	r3, [pc, #8]	; (801ae24 <SUBGRF_GetPacketType+0x10>)
 801ae1a:	781b      	ldrb	r3, [r3, #0]
}
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bc80      	pop	{r7}
 801ae22:	4770      	bx	lr
 801ae24:	20001f01 	.word	0x20001f01

0801ae28 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b084      	sub	sp, #16
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	71fb      	strb	r3, [r7, #7]
 801ae32:	460b      	mov	r3, r1
 801ae34:	71bb      	strb	r3, [r7, #6]
 801ae36:	4613      	mov	r3, r2
 801ae38:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ae3a:	79fb      	ldrb	r3, [r7, #7]
 801ae3c:	2b01      	cmp	r3, #1
 801ae3e:	d149      	bne.n	801aed4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ae40:	2000      	movs	r0, #0
 801ae42:	f7f1 fe46 	bl	800cad2 <RBI_GetRFOMaxPowerConfig>
 801ae46:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ae48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae4c:	68fa      	ldr	r2, [r7, #12]
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	da01      	bge.n	801ae56 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	2b0e      	cmp	r3, #14
 801ae5a:	d10e      	bne.n	801ae7a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	2201      	movs	r2, #1
 801ae60:	2100      	movs	r1, #0
 801ae62:	2004      	movs	r0, #4
 801ae64:	f7ff fef6 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ae68:	79ba      	ldrb	r2, [r7, #6]
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	1ad3      	subs	r3, r2, r3
 801ae70:	b2db      	uxtb	r3, r3
 801ae72:	330e      	adds	r3, #14
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	71bb      	strb	r3, [r7, #6]
 801ae78:	e01f      	b.n	801aeba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	2b0a      	cmp	r3, #10
 801ae7e:	d10e      	bne.n	801ae9e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ae80:	2301      	movs	r3, #1
 801ae82:	2201      	movs	r2, #1
 801ae84:	2100      	movs	r1, #0
 801ae86:	2001      	movs	r0, #1
 801ae88:	f7ff fee4 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ae8c:	79ba      	ldrb	r2, [r7, #6]
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	b2db      	uxtb	r3, r3
 801ae92:	1ad3      	subs	r3, r2, r3
 801ae94:	b2db      	uxtb	r3, r3
 801ae96:	330d      	adds	r3, #13
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	71bb      	strb	r3, [r7, #6]
 801ae9c:	e00d      	b.n	801aeba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801ae9e:	2301      	movs	r3, #1
 801aea0:	2201      	movs	r2, #1
 801aea2:	2100      	movs	r1, #0
 801aea4:	2006      	movs	r0, #6
 801aea6:	f7ff fed5 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aeaa:	79ba      	ldrb	r2, [r7, #6]
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	1ad3      	subs	r3, r2, r3
 801aeb2:	b2db      	uxtb	r3, r3
 801aeb4:	330e      	adds	r3, #14
 801aeb6:	b2db      	uxtb	r3, r3
 801aeb8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801aeba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aebe:	f113 0f11 	cmn.w	r3, #17
 801aec2:	da01      	bge.n	801aec8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801aec4:	23ef      	movs	r3, #239	; 0xef
 801aec6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801aec8:	2118      	movs	r1, #24
 801aeca:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801aece:	f000 fa93 	bl	801b3f8 <SUBGRF_WriteRegister>
 801aed2:	e067      	b.n	801afa4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801aed4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801aed8:	f000 faa2 	bl	801b420 <SUBGRF_ReadRegister>
 801aedc:	4603      	mov	r3, r0
 801aede:	f043 031e 	orr.w	r3, r3, #30
 801aee2:	b2db      	uxtb	r3, r3
 801aee4:	4619      	mov	r1, r3
 801aee6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801aeea:	f000 fa85 	bl	801b3f8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801aeee:	2001      	movs	r0, #1
 801aef0:	f7f1 fdef 	bl	800cad2 <RBI_GetRFOMaxPowerConfig>
 801aef4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801aef6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aefa:	68fa      	ldr	r2, [r7, #12]
 801aefc:	429a      	cmp	r2, r3
 801aefe:	da01      	bge.n	801af04 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	2b14      	cmp	r3, #20
 801af08:	d10e      	bne.n	801af28 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801af0a:	2301      	movs	r3, #1
 801af0c:	2200      	movs	r2, #0
 801af0e:	2105      	movs	r1, #5
 801af10:	2003      	movs	r0, #3
 801af12:	f7ff fe9f 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af16:	79ba      	ldrb	r2, [r7, #6]
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	1ad3      	subs	r3, r2, r3
 801af1e:	b2db      	uxtb	r3, r3
 801af20:	3316      	adds	r3, #22
 801af22:	b2db      	uxtb	r3, r3
 801af24:	71bb      	strb	r3, [r7, #6]
 801af26:	e031      	b.n	801af8c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	2b11      	cmp	r3, #17
 801af2c:	d10e      	bne.n	801af4c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801af2e:	2301      	movs	r3, #1
 801af30:	2200      	movs	r2, #0
 801af32:	2103      	movs	r1, #3
 801af34:	2002      	movs	r0, #2
 801af36:	f7ff fe8d 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af3a:	79ba      	ldrb	r2, [r7, #6]
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	b2db      	uxtb	r3, r3
 801af40:	1ad3      	subs	r3, r2, r3
 801af42:	b2db      	uxtb	r3, r3
 801af44:	3316      	adds	r3, #22
 801af46:	b2db      	uxtb	r3, r3
 801af48:	71bb      	strb	r3, [r7, #6]
 801af4a:	e01f      	b.n	801af8c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	2b0e      	cmp	r3, #14
 801af50:	d10e      	bne.n	801af70 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801af52:	2301      	movs	r3, #1
 801af54:	2200      	movs	r2, #0
 801af56:	2102      	movs	r1, #2
 801af58:	2002      	movs	r0, #2
 801af5a:	f7ff fe7b 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801af5e:	79ba      	ldrb	r2, [r7, #6]
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	b2db      	uxtb	r3, r3
 801af64:	1ad3      	subs	r3, r2, r3
 801af66:	b2db      	uxtb	r3, r3
 801af68:	330e      	adds	r3, #14
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	71bb      	strb	r3, [r7, #6]
 801af6e:	e00d      	b.n	801af8c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801af70:	2301      	movs	r3, #1
 801af72:	2200      	movs	r2, #0
 801af74:	2107      	movs	r1, #7
 801af76:	2004      	movs	r0, #4
 801af78:	f7ff fe6c 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af7c:	79ba      	ldrb	r2, [r7, #6]
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	b2db      	uxtb	r3, r3
 801af82:	1ad3      	subs	r3, r2, r3
 801af84:	b2db      	uxtb	r3, r3
 801af86:	3316      	adds	r3, #22
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801af8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801af90:	f113 0f09 	cmn.w	r3, #9
 801af94:	da01      	bge.n	801af9a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801af96:	23f7      	movs	r3, #247	; 0xf7
 801af98:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801af9a:	2138      	movs	r1, #56	; 0x38
 801af9c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801afa0:	f000 fa2a 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801afa4:	79bb      	ldrb	r3, [r7, #6]
 801afa6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801afa8:	797b      	ldrb	r3, [r7, #5]
 801afaa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801afac:	f107 0308 	add.w	r3, r7, #8
 801afb0:	2202      	movs	r2, #2
 801afb2:	4619      	mov	r1, r3
 801afb4:	208e      	movs	r0, #142	; 0x8e
 801afb6:	f000 facf 	bl	801b558 <SUBGRF_WriteCommand>
}
 801afba:	bf00      	nop
 801afbc:	3710      	adds	r7, #16
 801afbe:	46bd      	mov	sp, r7
 801afc0:	bd80      	pop	{r7, pc}
	...

0801afc4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801afc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801afc8:	b086      	sub	sp, #24
 801afca:	af00      	add	r7, sp, #0
 801afcc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801afce:	2300      	movs	r3, #0
 801afd0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801afd2:	4a61      	ldr	r2, [pc, #388]	; (801b158 <SUBGRF_SetModulationParams+0x194>)
 801afd4:	f107 0308 	add.w	r3, r7, #8
 801afd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801afdc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	781a      	ldrb	r2, [r3, #0]
 801afe4:	4b5d      	ldr	r3, [pc, #372]	; (801b15c <SUBGRF_SetModulationParams+0x198>)
 801afe6:	781b      	ldrb	r3, [r3, #0]
 801afe8:	429a      	cmp	r2, r3
 801afea:	d004      	beq.n	801aff6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	4618      	mov	r0, r3
 801aff2:	f7ff fef3 	bl	801addc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b03      	cmp	r3, #3
 801affc:	f200 80a5 	bhi.w	801b14a <SUBGRF_SetModulationParams+0x186>
 801b000:	a201      	add	r2, pc, #4	; (adr r2, 801b008 <SUBGRF_SetModulationParams+0x44>)
 801b002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b006:	bf00      	nop
 801b008:	0801b019 	.word	0x0801b019
 801b00c:	0801b0d9 	.word	0x0801b0d9
 801b010:	0801b09b 	.word	0x0801b09b
 801b014:	0801b107 	.word	0x0801b107
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b018:	2308      	movs	r3, #8
 801b01a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	685b      	ldr	r3, [r3, #4]
 801b020:	4a4f      	ldr	r2, [pc, #316]	; (801b160 <SUBGRF_SetModulationParams+0x19c>)
 801b022:	fbb2 f3f3 	udiv	r3, r2, r3
 801b026:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b028:	697b      	ldr	r3, [r7, #20]
 801b02a:	0c1b      	lsrs	r3, r3, #16
 801b02c:	b2db      	uxtb	r3, r3
 801b02e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b030:	697b      	ldr	r3, [r7, #20]
 801b032:	0a1b      	lsrs	r3, r3, #8
 801b034:	b2db      	uxtb	r3, r3
 801b036:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	b2db      	uxtb	r3, r3
 801b03c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	7b1b      	ldrb	r3, [r3, #12]
 801b042:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	7b5b      	ldrb	r3, [r3, #13]
 801b048:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	689b      	ldr	r3, [r3, #8]
 801b04e:	2200      	movs	r2, #0
 801b050:	461c      	mov	r4, r3
 801b052:	4615      	mov	r5, r2
 801b054:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b058:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b05c:	4a41      	ldr	r2, [pc, #260]	; (801b164 <SUBGRF_SetModulationParams+0x1a0>)
 801b05e:	f04f 0300 	mov.w	r3, #0
 801b062:	4640      	mov	r0, r8
 801b064:	4649      	mov	r1, r9
 801b066:	f7e5 ff05 	bl	8000e74 <__aeabi_uldivmod>
 801b06a:	4602      	mov	r2, r0
 801b06c:	460b      	mov	r3, r1
 801b06e:	4613      	mov	r3, r2
 801b070:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	0c1b      	lsrs	r3, r3, #16
 801b076:	b2db      	uxtb	r3, r3
 801b078:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b07a:	697b      	ldr	r3, [r7, #20]
 801b07c:	0a1b      	lsrs	r3, r3, #8
 801b07e:	b2db      	uxtb	r3, r3
 801b080:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	b2db      	uxtb	r3, r3
 801b086:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b088:	7cfb      	ldrb	r3, [r7, #19]
 801b08a:	b29a      	uxth	r2, r3
 801b08c:	f107 0308 	add.w	r3, r7, #8
 801b090:	4619      	mov	r1, r3
 801b092:	208b      	movs	r0, #139	; 0x8b
 801b094:	f000 fa60 	bl	801b558 <SUBGRF_WriteCommand>
        break;
 801b098:	e058      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b09a:	2304      	movs	r3, #4
 801b09c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	691b      	ldr	r3, [r3, #16]
 801b0a2:	4a2f      	ldr	r2, [pc, #188]	; (801b160 <SUBGRF_SetModulationParams+0x19c>)
 801b0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 801b0a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b0aa:	697b      	ldr	r3, [r7, #20]
 801b0ac:	0c1b      	lsrs	r3, r3, #16
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	0a1b      	lsrs	r3, r3, #8
 801b0b6:	b2db      	uxtb	r3, r3
 801b0b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	7d1b      	ldrb	r3, [r3, #20]
 801b0c4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0c6:	7cfb      	ldrb	r3, [r7, #19]
 801b0c8:	b29a      	uxth	r2, r3
 801b0ca:	f107 0308 	add.w	r3, r7, #8
 801b0ce:	4619      	mov	r1, r3
 801b0d0:	208b      	movs	r0, #139	; 0x8b
 801b0d2:	f000 fa41 	bl	801b558 <SUBGRF_WriteCommand>
        break;
 801b0d6:	e039      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b0d8:	2304      	movs	r3, #4
 801b0da:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	7e1b      	ldrb	r3, [r3, #24]
 801b0e0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	7e5b      	ldrb	r3, [r3, #25]
 801b0e6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	7e9b      	ldrb	r3, [r3, #26]
 801b0ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	7edb      	ldrb	r3, [r3, #27]
 801b0f2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0f4:	7cfb      	ldrb	r3, [r7, #19]
 801b0f6:	b29a      	uxth	r2, r3
 801b0f8:	f107 0308 	add.w	r3, r7, #8
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	208b      	movs	r0, #139	; 0x8b
 801b100:	f000 fa2a 	bl	801b558 <SUBGRF_WriteCommand>

        break;
 801b104:	e022      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b106:	2305      	movs	r3, #5
 801b108:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	685b      	ldr	r3, [r3, #4]
 801b10e:	4a14      	ldr	r2, [pc, #80]	; (801b160 <SUBGRF_SetModulationParams+0x19c>)
 801b110:	fbb2 f3f3 	udiv	r3, r2, r3
 801b114:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	0c1b      	lsrs	r3, r3, #16
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b11e:	697b      	ldr	r3, [r7, #20]
 801b120:	0a1b      	lsrs	r3, r3, #8
 801b122:	b2db      	uxtb	r3, r3
 801b124:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b126:	697b      	ldr	r3, [r7, #20]
 801b128:	b2db      	uxtb	r3, r3
 801b12a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	7b1b      	ldrb	r3, [r3, #12]
 801b130:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	7b5b      	ldrb	r3, [r3, #13]
 801b136:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b138:	7cfb      	ldrb	r3, [r7, #19]
 801b13a:	b29a      	uxth	r2, r3
 801b13c:	f107 0308 	add.w	r3, r7, #8
 801b140:	4619      	mov	r1, r3
 801b142:	208b      	movs	r0, #139	; 0x8b
 801b144:	f000 fa08 	bl	801b558 <SUBGRF_WriteCommand>
        break;
 801b148:	e000      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b14a:	bf00      	nop
    }
}
 801b14c:	bf00      	nop
 801b14e:	3718      	adds	r7, #24
 801b150:	46bd      	mov	sp, r7
 801b152:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b156:	bf00      	nop
 801b158:	080201bc 	.word	0x080201bc
 801b15c:	20001f01 	.word	0x20001f01
 801b160:	3d090000 	.word	0x3d090000
 801b164:	01e84800 	.word	0x01e84800

0801b168 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b086      	sub	sp, #24
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b170:	2300      	movs	r3, #0
 801b172:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b174:	4a48      	ldr	r2, [pc, #288]	; (801b298 <SUBGRF_SetPacketParams+0x130>)
 801b176:	f107 030c 	add.w	r3, r7, #12
 801b17a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b17c:	c303      	stmia	r3!, {r0, r1}
 801b17e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	781a      	ldrb	r2, [r3, #0]
 801b184:	4b45      	ldr	r3, [pc, #276]	; (801b29c <SUBGRF_SetPacketParams+0x134>)
 801b186:	781b      	ldrb	r3, [r3, #0]
 801b188:	429a      	cmp	r2, r3
 801b18a:	d004      	beq.n	801b196 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	781b      	ldrb	r3, [r3, #0]
 801b190:	4618      	mov	r0, r3
 801b192:	f7ff fe23 	bl	801addc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	781b      	ldrb	r3, [r3, #0]
 801b19a:	2b03      	cmp	r3, #3
 801b19c:	d878      	bhi.n	801b290 <SUBGRF_SetPacketParams+0x128>
 801b19e:	a201      	add	r2, pc, #4	; (adr r2, 801b1a4 <SUBGRF_SetPacketParams+0x3c>)
 801b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1a4:	0801b1b5 	.word	0x0801b1b5
 801b1a8:	0801b245 	.word	0x0801b245
 801b1ac:	0801b239 	.word	0x0801b239
 801b1b0:	0801b1b5 	.word	0x0801b1b5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	7a5b      	ldrb	r3, [r3, #9]
 801b1b8:	2bf1      	cmp	r3, #241	; 0xf1
 801b1ba:	d10a      	bne.n	801b1d2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b1bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b1c0:	f7ff faae 	bl	801a720 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b1c4:	f248 0005 	movw	r0, #32773	; 0x8005
 801b1c8:	f7ff faca 	bl	801a760 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b1cc:	2302      	movs	r3, #2
 801b1ce:	75bb      	strb	r3, [r7, #22]
 801b1d0:	e011      	b.n	801b1f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	7a5b      	ldrb	r3, [r3, #9]
 801b1d6:	2bf2      	cmp	r3, #242	; 0xf2
 801b1d8:	d10a      	bne.n	801b1f0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b1da:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b1de:	f7ff fa9f 	bl	801a720 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b1e2:	f241 0021 	movw	r0, #4129	; 0x1021
 801b1e6:	f7ff fabb 	bl	801a760 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b1ea:	2306      	movs	r3, #6
 801b1ec:	75bb      	strb	r3, [r7, #22]
 801b1ee:	e002      	b.n	801b1f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	7a5b      	ldrb	r3, [r3, #9]
 801b1f4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b1f6:	2309      	movs	r3, #9
 801b1f8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	885b      	ldrh	r3, [r3, #2]
 801b1fe:	0a1b      	lsrs	r3, r3, #8
 801b200:	b29b      	uxth	r3, r3
 801b202:	b2db      	uxtb	r3, r3
 801b204:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	885b      	ldrh	r3, [r3, #2]
 801b20a:	b2db      	uxtb	r3, r3
 801b20c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	791b      	ldrb	r3, [r3, #4]
 801b212:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	795b      	ldrb	r3, [r3, #5]
 801b218:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	799b      	ldrb	r3, [r3, #6]
 801b21e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	79db      	ldrb	r3, [r3, #7]
 801b224:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	7a1b      	ldrb	r3, [r3, #8]
 801b22a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b22c:	7dbb      	ldrb	r3, [r7, #22]
 801b22e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	7a9b      	ldrb	r3, [r3, #10]
 801b234:	753b      	strb	r3, [r7, #20]
        break;
 801b236:	e022      	b.n	801b27e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b238:	2301      	movs	r3, #1
 801b23a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	7b1b      	ldrb	r3, [r3, #12]
 801b240:	733b      	strb	r3, [r7, #12]
        break;
 801b242:	e01c      	b.n	801b27e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b244:	2306      	movs	r3, #6
 801b246:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	89db      	ldrh	r3, [r3, #14]
 801b24c:	0a1b      	lsrs	r3, r3, #8
 801b24e:	b29b      	uxth	r3, r3
 801b250:	b2db      	uxtb	r3, r3
 801b252:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	89db      	ldrh	r3, [r3, #14]
 801b258:	b2db      	uxtb	r3, r3
 801b25a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	7c1a      	ldrb	r2, [r3, #16]
 801b260:	4b0f      	ldr	r3, [pc, #60]	; (801b2a0 <SUBGRF_SetPacketParams+0x138>)
 801b262:	4611      	mov	r1, r2
 801b264:	7019      	strb	r1, [r3, #0]
 801b266:	4613      	mov	r3, r2
 801b268:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	7c5b      	ldrb	r3, [r3, #17]
 801b26e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	7c9b      	ldrb	r3, [r3, #18]
 801b274:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	7cdb      	ldrb	r3, [r3, #19]
 801b27a:	747b      	strb	r3, [r7, #17]
        break;
 801b27c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b27e:	7dfb      	ldrb	r3, [r7, #23]
 801b280:	b29a      	uxth	r2, r3
 801b282:	f107 030c 	add.w	r3, r7, #12
 801b286:	4619      	mov	r1, r3
 801b288:	208c      	movs	r0, #140	; 0x8c
 801b28a:	f000 f965 	bl	801b558 <SUBGRF_WriteCommand>
 801b28e:	e000      	b.n	801b292 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b290:	bf00      	nop
}
 801b292:	3718      	adds	r7, #24
 801b294:	46bd      	mov	sp, r7
 801b296:	bd80      	pop	{r7, pc}
 801b298:	080201c4 	.word	0x080201c4
 801b29c:	20001f01 	.word	0x20001f01
 801b2a0:	20001f02 	.word	0x20001f02

0801b2a4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b084      	sub	sp, #16
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	460a      	mov	r2, r1
 801b2ae:	71fb      	strb	r3, [r7, #7]
 801b2b0:	4613      	mov	r3, r2
 801b2b2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b2b4:	79fb      	ldrb	r3, [r7, #7]
 801b2b6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b2b8:	79bb      	ldrb	r3, [r7, #6]
 801b2ba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b2bc:	f107 030c 	add.w	r3, r7, #12
 801b2c0:	2202      	movs	r2, #2
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	208f      	movs	r0, #143	; 0x8f
 801b2c6:	f000 f947 	bl	801b558 <SUBGRF_WriteCommand>
}
 801b2ca:	bf00      	nop
 801b2cc:	3710      	adds	r7, #16
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	bd80      	pop	{r7, pc}

0801b2d2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b2d2:	b580      	push	{r7, lr}
 801b2d4:	b082      	sub	sp, #8
 801b2d6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b2d8:	2300      	movs	r3, #0
 801b2da:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b2dc:	1d3b      	adds	r3, r7, #4
 801b2de:	2201      	movs	r2, #1
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	2015      	movs	r0, #21
 801b2e4:	f000 f95a 	bl	801b59c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b2e8:	793b      	ldrb	r3, [r7, #4]
 801b2ea:	425b      	negs	r3, r3
 801b2ec:	105b      	asrs	r3, r3, #1
 801b2ee:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b2f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	3708      	adds	r7, #8
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	bd80      	pop	{r7, pc}

0801b2fc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b084      	sub	sp, #16
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
 801b304:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b306:	f107 030c 	add.w	r3, r7, #12
 801b30a:	2202      	movs	r2, #2
 801b30c:	4619      	mov	r1, r3
 801b30e:	2013      	movs	r0, #19
 801b310:	f000 f944 	bl	801b59c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b314:	f7ff fd7e 	bl	801ae14 <SUBGRF_GetPacketType>
 801b318:	4603      	mov	r3, r0
 801b31a:	2b01      	cmp	r3, #1
 801b31c:	d10d      	bne.n	801b33a <SUBGRF_GetRxBufferStatus+0x3e>
 801b31e:	4b0c      	ldr	r3, [pc, #48]	; (801b350 <SUBGRF_GetRxBufferStatus+0x54>)
 801b320:	781b      	ldrb	r3, [r3, #0]
 801b322:	b2db      	uxtb	r3, r3
 801b324:	2b01      	cmp	r3, #1
 801b326:	d108      	bne.n	801b33a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b328:	f240 7002 	movw	r0, #1794	; 0x702
 801b32c:	f000 f878 	bl	801b420 <SUBGRF_ReadRegister>
 801b330:	4603      	mov	r3, r0
 801b332:	461a      	mov	r2, r3
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	701a      	strb	r2, [r3, #0]
 801b338:	e002      	b.n	801b340 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b33a:	7b3a      	ldrb	r2, [r7, #12]
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b340:	7b7a      	ldrb	r2, [r7, #13]
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	701a      	strb	r2, [r3, #0]
}
 801b346:	bf00      	nop
 801b348:	3710      	adds	r7, #16
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	20001f02 	.word	0x20001f02

0801b354 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b084      	sub	sp, #16
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b35c:	f107 030c 	add.w	r3, r7, #12
 801b360:	2203      	movs	r2, #3
 801b362:	4619      	mov	r1, r3
 801b364:	2014      	movs	r0, #20
 801b366:	f000 f919 	bl	801b59c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b36a:	f7ff fd53 	bl	801ae14 <SUBGRF_GetPacketType>
 801b36e:	4603      	mov	r3, r0
 801b370:	461a      	mov	r2, r3
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	781b      	ldrb	r3, [r3, #0]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d002      	beq.n	801b384 <SUBGRF_GetPacketStatus+0x30>
 801b37e:	2b01      	cmp	r3, #1
 801b380:	d013      	beq.n	801b3aa <SUBGRF_GetPacketStatus+0x56>
 801b382:	e02a      	b.n	801b3da <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b384:	7b3a      	ldrb	r2, [r7, #12]
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b38a:	7b7b      	ldrb	r3, [r7, #13]
 801b38c:	425b      	negs	r3, r3
 801b38e:	105b      	asrs	r3, r3, #1
 801b390:	b25a      	sxtb	r2, r3
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b396:	7bbb      	ldrb	r3, [r7, #14]
 801b398:	425b      	negs	r3, r3
 801b39a:	105b      	asrs	r3, r3, #1
 801b39c:	b25a      	sxtb	r2, r3
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	609a      	str	r2, [r3, #8]
            break;
 801b3a8:	e020      	b.n	801b3ec <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b3aa:	7b3b      	ldrb	r3, [r7, #12]
 801b3ac:	425b      	negs	r3, r3
 801b3ae:	105b      	asrs	r3, r3, #1
 801b3b0:	b25a      	sxtb	r2, r3
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b3b6:	7b7b      	ldrb	r3, [r7, #13]
 801b3b8:	b25b      	sxtb	r3, r3
 801b3ba:	3302      	adds	r3, #2
 801b3bc:	109b      	asrs	r3, r3, #2
 801b3be:	b25a      	sxtb	r2, r3
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b3c4:	7bbb      	ldrb	r3, [r7, #14]
 801b3c6:	425b      	negs	r3, r3
 801b3c8:	105b      	asrs	r3, r3, #1
 801b3ca:	b25a      	sxtb	r2, r3
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b3d0:	4b08      	ldr	r3, [pc, #32]	; (801b3f4 <SUBGRF_GetPacketStatus+0xa0>)
 801b3d2:	681a      	ldr	r2, [r3, #0]
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	611a      	str	r2, [r3, #16]
            break;
 801b3d8:	e008      	b.n	801b3ec <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b3da:	2214      	movs	r2, #20
 801b3dc:	2100      	movs	r1, #0
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f000 fbf3 	bl	801bbca <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	220f      	movs	r2, #15
 801b3e8:	701a      	strb	r2, [r3, #0]
            break;
 801b3ea:	bf00      	nop
    }
}
 801b3ec:	bf00      	nop
 801b3ee:	3710      	adds	r7, #16
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}
 801b3f4:	20001f04 	.word	0x20001f04

0801b3f8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b082      	sub	sp, #8
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	4603      	mov	r3, r0
 801b400:	460a      	mov	r2, r1
 801b402:	80fb      	strh	r3, [r7, #6]
 801b404:	4613      	mov	r3, r2
 801b406:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b408:	1d7a      	adds	r2, r7, #5
 801b40a:	88f9      	ldrh	r1, [r7, #6]
 801b40c:	2301      	movs	r3, #1
 801b40e:	4803      	ldr	r0, [pc, #12]	; (801b41c <SUBGRF_WriteRegister+0x24>)
 801b410:	f7ec f8cc 	bl	80075ac <HAL_SUBGHZ_WriteRegisters>
}
 801b414:	bf00      	nop
 801b416:	3708      	adds	r7, #8
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd80      	pop	{r7, pc}
 801b41c:	200003d8 	.word	0x200003d8

0801b420 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b084      	sub	sp, #16
 801b424:	af00      	add	r7, sp, #0
 801b426:	4603      	mov	r3, r0
 801b428:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b42a:	f107 020f 	add.w	r2, r7, #15
 801b42e:	88f9      	ldrh	r1, [r7, #6]
 801b430:	2301      	movs	r3, #1
 801b432:	4804      	ldr	r0, [pc, #16]	; (801b444 <SUBGRF_ReadRegister+0x24>)
 801b434:	f7ec f919 	bl	800766a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b438:	7bfb      	ldrb	r3, [r7, #15]
}
 801b43a:	4618      	mov	r0, r3
 801b43c:	3710      	adds	r7, #16
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd80      	pop	{r7, pc}
 801b442:	bf00      	nop
 801b444:	200003d8 	.word	0x200003d8

0801b448 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b086      	sub	sp, #24
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	4603      	mov	r3, r0
 801b450:	6039      	str	r1, [r7, #0]
 801b452:	80fb      	strh	r3, [r7, #6]
 801b454:	4613      	mov	r3, r2
 801b456:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b458:	f3ef 8310 	mrs	r3, PRIMASK
 801b45c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b45e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b462:	b672      	cpsid	i
}
 801b464:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b466:	88bb      	ldrh	r3, [r7, #4]
 801b468:	88f9      	ldrh	r1, [r7, #6]
 801b46a:	683a      	ldr	r2, [r7, #0]
 801b46c:	4806      	ldr	r0, [pc, #24]	; (801b488 <SUBGRF_WriteRegisters+0x40>)
 801b46e:	f7ec f89d 	bl	80075ac <HAL_SUBGHZ_WriteRegisters>
 801b472:	697b      	ldr	r3, [r7, #20]
 801b474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	f383 8810 	msr	PRIMASK, r3
}
 801b47c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b47e:	bf00      	nop
 801b480:	3718      	adds	r7, #24
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}
 801b486:	bf00      	nop
 801b488:	200003d8 	.word	0x200003d8

0801b48c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b086      	sub	sp, #24
 801b490:	af00      	add	r7, sp, #0
 801b492:	4603      	mov	r3, r0
 801b494:	6039      	str	r1, [r7, #0]
 801b496:	80fb      	strh	r3, [r7, #6]
 801b498:	4613      	mov	r3, r2
 801b49a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b49c:	f3ef 8310 	mrs	r3, PRIMASK
 801b4a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4a6:	b672      	cpsid	i
}
 801b4a8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b4aa:	88bb      	ldrh	r3, [r7, #4]
 801b4ac:	88f9      	ldrh	r1, [r7, #6]
 801b4ae:	683a      	ldr	r2, [r7, #0]
 801b4b0:	4806      	ldr	r0, [pc, #24]	; (801b4cc <SUBGRF_ReadRegisters+0x40>)
 801b4b2:	f7ec f8da 	bl	800766a <HAL_SUBGHZ_ReadRegisters>
 801b4b6:	697b      	ldr	r3, [r7, #20]
 801b4b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4ba:	693b      	ldr	r3, [r7, #16]
 801b4bc:	f383 8810 	msr	PRIMASK, r3
}
 801b4c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b4c2:	bf00      	nop
 801b4c4:	3718      	adds	r7, #24
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	bd80      	pop	{r7, pc}
 801b4ca:	bf00      	nop
 801b4cc:	200003d8 	.word	0x200003d8

0801b4d0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b086      	sub	sp, #24
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	6039      	str	r1, [r7, #0]
 801b4da:	71fb      	strb	r3, [r7, #7]
 801b4dc:	4613      	mov	r3, r2
 801b4de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4e0:	f3ef 8310 	mrs	r3, PRIMASK
 801b4e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4ea:	b672      	cpsid	i
}
 801b4ec:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b4ee:	79bb      	ldrb	r3, [r7, #6]
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	79f9      	ldrb	r1, [r7, #7]
 801b4f4:	683a      	ldr	r2, [r7, #0]
 801b4f6:	4806      	ldr	r0, [pc, #24]	; (801b510 <SUBGRF_WriteBuffer+0x40>)
 801b4f8:	f7ec f9cb 	bl	8007892 <HAL_SUBGHZ_WriteBuffer>
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b500:	693b      	ldr	r3, [r7, #16]
 801b502:	f383 8810 	msr	PRIMASK, r3
}
 801b506:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b508:	bf00      	nop
 801b50a:	3718      	adds	r7, #24
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	200003d8 	.word	0x200003d8

0801b514 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b514:	b580      	push	{r7, lr}
 801b516:	b086      	sub	sp, #24
 801b518:	af00      	add	r7, sp, #0
 801b51a:	4603      	mov	r3, r0
 801b51c:	6039      	str	r1, [r7, #0]
 801b51e:	71fb      	strb	r3, [r7, #7]
 801b520:	4613      	mov	r3, r2
 801b522:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b524:	f3ef 8310 	mrs	r3, PRIMASK
 801b528:	60fb      	str	r3, [r7, #12]
  return(result);
 801b52a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b52c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b52e:	b672      	cpsid	i
}
 801b530:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b532:	79bb      	ldrb	r3, [r7, #6]
 801b534:	b29b      	uxth	r3, r3
 801b536:	79f9      	ldrb	r1, [r7, #7]
 801b538:	683a      	ldr	r2, [r7, #0]
 801b53a:	4806      	ldr	r0, [pc, #24]	; (801b554 <SUBGRF_ReadBuffer+0x40>)
 801b53c:	f7ec f9fc 	bl	8007938 <HAL_SUBGHZ_ReadBuffer>
 801b540:	697b      	ldr	r3, [r7, #20]
 801b542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b544:	693b      	ldr	r3, [r7, #16]
 801b546:	f383 8810 	msr	PRIMASK, r3
}
 801b54a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b54c:	bf00      	nop
 801b54e:	3718      	adds	r7, #24
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}
 801b554:	200003d8 	.word	0x200003d8

0801b558 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b558:	b580      	push	{r7, lr}
 801b55a:	b086      	sub	sp, #24
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	4603      	mov	r3, r0
 801b560:	6039      	str	r1, [r7, #0]
 801b562:	71fb      	strb	r3, [r7, #7]
 801b564:	4613      	mov	r3, r2
 801b566:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b568:	f3ef 8310 	mrs	r3, PRIMASK
 801b56c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b56e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b572:	b672      	cpsid	i
}
 801b574:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b576:	88bb      	ldrh	r3, [r7, #4]
 801b578:	79f9      	ldrb	r1, [r7, #7]
 801b57a:	683a      	ldr	r2, [r7, #0]
 801b57c:	4806      	ldr	r0, [pc, #24]	; (801b598 <SUBGRF_WriteCommand+0x40>)
 801b57e:	f7ec f8d5 	bl	800772c <HAL_SUBGHZ_ExecSetCmd>
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b586:	693b      	ldr	r3, [r7, #16]
 801b588:	f383 8810 	msr	PRIMASK, r3
}
 801b58c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b58e:	bf00      	nop
 801b590:	3718      	adds	r7, #24
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	200003d8 	.word	0x200003d8

0801b59c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b086      	sub	sp, #24
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	6039      	str	r1, [r7, #0]
 801b5a6:	71fb      	strb	r3, [r7, #7]
 801b5a8:	4613      	mov	r3, r2
 801b5aa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5ac:	f3ef 8310 	mrs	r3, PRIMASK
 801b5b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b5b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b5b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5b6:	b672      	cpsid	i
}
 801b5b8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b5ba:	88bb      	ldrh	r3, [r7, #4]
 801b5bc:	79f9      	ldrb	r1, [r7, #7]
 801b5be:	683a      	ldr	r2, [r7, #0]
 801b5c0:	4806      	ldr	r0, [pc, #24]	; (801b5dc <SUBGRF_ReadCommand+0x40>)
 801b5c2:	f7ec f912 	bl	80077ea <HAL_SUBGHZ_ExecGetCmd>
 801b5c6:	697b      	ldr	r3, [r7, #20]
 801b5c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ca:	693b      	ldr	r3, [r7, #16]
 801b5cc:	f383 8810 	msr	PRIMASK, r3
}
 801b5d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5d2:	bf00      	nop
 801b5d4:	3718      	adds	r7, #24
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bd80      	pop	{r7, pc}
 801b5da:	bf00      	nop
 801b5dc:	200003d8 	.word	0x200003d8

0801b5e0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b084      	sub	sp, #16
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	460a      	mov	r2, r1
 801b5ea:	71fb      	strb	r3, [r7, #7]
 801b5ec:	4613      	mov	r3, r2
 801b5ee:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b5f0:	2301      	movs	r3, #1
 801b5f2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b5f4:	79bb      	ldrb	r3, [r7, #6]
 801b5f6:	2b01      	cmp	r3, #1
 801b5f8:	d10d      	bne.n	801b616 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b5fa:	79fb      	ldrb	r3, [r7, #7]
 801b5fc:	2b01      	cmp	r3, #1
 801b5fe:	d104      	bne.n	801b60a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b600:	2302      	movs	r3, #2
 801b602:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b604:	2004      	movs	r0, #4
 801b606:	f000 f8df 	bl	801b7c8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b60a:	79fb      	ldrb	r3, [r7, #7]
 801b60c:	2b02      	cmp	r3, #2
 801b60e:	d107      	bne.n	801b620 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b610:	2303      	movs	r3, #3
 801b612:	73fb      	strb	r3, [r7, #15]
 801b614:	e004      	b.n	801b620 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b616:	79bb      	ldrb	r3, [r7, #6]
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d101      	bne.n	801b620 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b61c:	2301      	movs	r3, #1
 801b61e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b620:	7bfb      	ldrb	r3, [r7, #15]
 801b622:	4618      	mov	r0, r3
 801b624:	f7f1 f9e0 	bl	800c9e8 <RBI_ConfigRFSwitch>
}
 801b628:	bf00      	nop
 801b62a:	3710      	adds	r7, #16
 801b62c:	46bd      	mov	sp, r7
 801b62e:	bd80      	pop	{r7, pc}

0801b630 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b630:	b580      	push	{r7, lr}
 801b632:	b084      	sub	sp, #16
 801b634:	af00      	add	r7, sp, #0
 801b636:	4603      	mov	r3, r0
 801b638:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b63a:	2301      	movs	r3, #1
 801b63c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b63e:	f7f1 fa27 	bl	800ca90 <RBI_GetTxConfig>
 801b642:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b644:	68bb      	ldr	r3, [r7, #8]
 801b646:	2b02      	cmp	r3, #2
 801b648:	d016      	beq.n	801b678 <SUBGRF_SetRfTxPower+0x48>
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	2b02      	cmp	r3, #2
 801b64e:	dc16      	bgt.n	801b67e <SUBGRF_SetRfTxPower+0x4e>
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d003      	beq.n	801b65e <SUBGRF_SetRfTxPower+0x2e>
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	2b01      	cmp	r3, #1
 801b65a:	d00a      	beq.n	801b672 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b65c:	e00f      	b.n	801b67e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b662:	2b0f      	cmp	r3, #15
 801b664:	dd02      	ble.n	801b66c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b666:	2302      	movs	r3, #2
 801b668:	73fb      	strb	r3, [r7, #15]
            break;
 801b66a:	e009      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b66c:	2301      	movs	r3, #1
 801b66e:	73fb      	strb	r3, [r7, #15]
            break;
 801b670:	e006      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b672:	2301      	movs	r3, #1
 801b674:	73fb      	strb	r3, [r7, #15]
            break;
 801b676:	e003      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b678:	2302      	movs	r3, #2
 801b67a:	73fb      	strb	r3, [r7, #15]
            break;
 801b67c:	e000      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b67e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b680:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b684:	7bfb      	ldrb	r3, [r7, #15]
 801b686:	2202      	movs	r2, #2
 801b688:	4618      	mov	r0, r3
 801b68a:	f7ff fbcd 	bl	801ae28 <SUBGRF_SetTxParams>

    return paSelect;
 801b68e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b690:	4618      	mov	r0, r3
 801b692:	3710      	adds	r7, #16
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}

0801b698 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b698:	b480      	push	{r7}
 801b69a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b69c:	2301      	movs	r3, #1
}
 801b69e:	4618      	mov	r0, r3
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bc80      	pop	{r7}
 801b6a4:	4770      	bx	lr
	...

0801b6a8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b082      	sub	sp, #8
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b6b0:	4b03      	ldr	r3, [pc, #12]	; (801b6c0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	2001      	movs	r0, #1
 801b6b6:	4798      	blx	r3
}
 801b6b8:	bf00      	nop
 801b6ba:	3708      	adds	r7, #8
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bd80      	pop	{r7, pc}
 801b6c0:	20001f0c 	.word	0x20001f0c

0801b6c4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b082      	sub	sp, #8
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b6cc:	4b03      	ldr	r3, [pc, #12]	; (801b6dc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	2002      	movs	r0, #2
 801b6d2:	4798      	blx	r3
}
 801b6d4:	bf00      	nop
 801b6d6:	3708      	adds	r7, #8
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd80      	pop	{r7, pc}
 801b6dc:	20001f0c 	.word	0x20001f0c

0801b6e0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b082      	sub	sp, #8
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b6e8:	4b03      	ldr	r3, [pc, #12]	; (801b6f8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2040      	movs	r0, #64	; 0x40
 801b6ee:	4798      	blx	r3
}
 801b6f0:	bf00      	nop
 801b6f2:	3708      	adds	r7, #8
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	bd80      	pop	{r7, pc}
 801b6f8:	20001f0c 	.word	0x20001f0c

0801b6fc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b082      	sub	sp, #8
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
 801b704:	460b      	mov	r3, r1
 801b706:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b708:	78fb      	ldrb	r3, [r7, #3]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d002      	beq.n	801b714 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b70e:	2b01      	cmp	r3, #1
 801b710:	d005      	beq.n	801b71e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b712:	e00a      	b.n	801b72a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b714:	4b07      	ldr	r3, [pc, #28]	; (801b734 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2080      	movs	r0, #128	; 0x80
 801b71a:	4798      	blx	r3
            break;
 801b71c:	e005      	b.n	801b72a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b71e:	4b05      	ldr	r3, [pc, #20]	; (801b734 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b726:	4798      	blx	r3
            break;
 801b728:	bf00      	nop
    }
}
 801b72a:	bf00      	nop
 801b72c:	3708      	adds	r7, #8
 801b72e:	46bd      	mov	sp, r7
 801b730:	bd80      	pop	{r7, pc}
 801b732:	bf00      	nop
 801b734:	20001f0c 	.word	0x20001f0c

0801b738 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b740:	4b04      	ldr	r3, [pc, #16]	; (801b754 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b748:	4798      	blx	r3
}
 801b74a:	bf00      	nop
 801b74c:	3708      	adds	r7, #8
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}
 801b752:	bf00      	nop
 801b754:	20001f0c 	.word	0x20001f0c

0801b758 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b082      	sub	sp, #8
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b760:	4b03      	ldr	r3, [pc, #12]	; (801b770 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	2020      	movs	r0, #32
 801b766:	4798      	blx	r3
}
 801b768:	bf00      	nop
 801b76a:	3708      	adds	r7, #8
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd80      	pop	{r7, pc}
 801b770:	20001f0c 	.word	0x20001f0c

0801b774 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b082      	sub	sp, #8
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b77c:	4b03      	ldr	r3, [pc, #12]	; (801b78c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	2004      	movs	r0, #4
 801b782:	4798      	blx	r3
}
 801b784:	bf00      	nop
 801b786:	3708      	adds	r7, #8
 801b788:	46bd      	mov	sp, r7
 801b78a:	bd80      	pop	{r7, pc}
 801b78c:	20001f0c 	.word	0x20001f0c

0801b790 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b790:	b580      	push	{r7, lr}
 801b792:	b082      	sub	sp, #8
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b798:	4b03      	ldr	r3, [pc, #12]	; (801b7a8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2008      	movs	r0, #8
 801b79e:	4798      	blx	r3
}
 801b7a0:	bf00      	nop
 801b7a2:	3708      	adds	r7, #8
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	bd80      	pop	{r7, pc}
 801b7a8:	20001f0c 	.word	0x20001f0c

0801b7ac <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b082      	sub	sp, #8
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b7b4:	4b03      	ldr	r3, [pc, #12]	; (801b7c4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	2010      	movs	r0, #16
 801b7ba:	4798      	blx	r3
}
 801b7bc:	bf00      	nop
 801b7be:	3708      	adds	r7, #8
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}
 801b7c4:	20001f0c 	.word	0x20001f0c

0801b7c8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b084      	sub	sp, #16
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b7d2:	f7f1 f973 	bl	800cabc <RBI_IsDCDC>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	2b01      	cmp	r3, #1
 801b7da:	d112      	bne.n	801b802 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b7dc:	f640 1023 	movw	r0, #2339	; 0x923
 801b7e0:	f7ff fe1e 	bl	801b420 <SUBGRF_ReadRegister>
 801b7e4:	4603      	mov	r3, r0
 801b7e6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b7e8:	7bfb      	ldrb	r3, [r7, #15]
 801b7ea:	f023 0306 	bic.w	r3, r3, #6
 801b7ee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b7f0:	7bfa      	ldrb	r2, [r7, #15]
 801b7f2:	79fb      	ldrb	r3, [r7, #7]
 801b7f4:	4313      	orrs	r3, r2
 801b7f6:	b2db      	uxtb	r3, r3
 801b7f8:	4619      	mov	r1, r3
 801b7fa:	f640 1023 	movw	r0, #2339	; 0x923
 801b7fe:	f7ff fdfb 	bl	801b3f8 <SUBGRF_WriteRegister>
  }
}
 801b802:	bf00      	nop
 801b804:	3710      	adds	r7, #16
 801b806:	46bd      	mov	sp, r7
 801b808:	bd80      	pop	{r7, pc}
	...

0801b80c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b80c:	b480      	push	{r7}
 801b80e:	b085      	sub	sp, #20
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d101      	bne.n	801b81e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b81a:	231f      	movs	r3, #31
 801b81c:	e016      	b.n	801b84c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b81e:	2300      	movs	r3, #0
 801b820:	73fb      	strb	r3, [r7, #15]
 801b822:	e00f      	b.n	801b844 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b824:	7bfb      	ldrb	r3, [r7, #15]
 801b826:	4a0c      	ldr	r2, [pc, #48]	; (801b858 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b82c:	687a      	ldr	r2, [r7, #4]
 801b82e:	429a      	cmp	r2, r3
 801b830:	d205      	bcs.n	801b83e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b832:	7bfb      	ldrb	r3, [r7, #15]
 801b834:	4a08      	ldr	r2, [pc, #32]	; (801b858 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b836:	00db      	lsls	r3, r3, #3
 801b838:	4413      	add	r3, r2
 801b83a:	791b      	ldrb	r3, [r3, #4]
 801b83c:	e006      	b.n	801b84c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b83e:	7bfb      	ldrb	r3, [r7, #15]
 801b840:	3301      	adds	r3, #1
 801b842:	73fb      	strb	r3, [r7, #15]
 801b844:	7bfb      	ldrb	r3, [r7, #15]
 801b846:	2b15      	cmp	r3, #21
 801b848:	d9ec      	bls.n	801b824 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b84a:	e7fe      	b.n	801b84a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b84c:	4618      	mov	r0, r3
 801b84e:	3714      	adds	r7, #20
 801b850:	46bd      	mov	sp, r7
 801b852:	bc80      	pop	{r7}
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop
 801b858:	08020728 	.word	0x08020728

0801b85c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b85c:	b580      	push	{r7, lr}
 801b85e:	b08a      	sub	sp, #40	; 0x28
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
 801b864:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b866:	4b35      	ldr	r3, [pc, #212]	; (801b93c <SUBGRF_GetCFO+0xe0>)
 801b868:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b86a:	f640 0007 	movw	r0, #2055	; 0x807
 801b86e:	f7ff fdd7 	bl	801b420 <SUBGRF_ReadRegister>
 801b872:	4603      	mov	r3, r0
 801b874:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b876:	7ffb      	ldrb	r3, [r7, #31]
 801b878:	08db      	lsrs	r3, r3, #3
 801b87a:	b2db      	uxtb	r3, r3
 801b87c:	f003 0303 	and.w	r3, r3, #3
 801b880:	3328      	adds	r3, #40	; 0x28
 801b882:	443b      	add	r3, r7
 801b884:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b888:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b88a:	7ffb      	ldrb	r3, [r7, #31]
 801b88c:	f003 0307 	and.w	r3, r3, #7
 801b890:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b892:	7fba      	ldrb	r2, [r7, #30]
 801b894:	7f7b      	ldrb	r3, [r7, #29]
 801b896:	3b01      	subs	r3, #1
 801b898:	fa02 f303 	lsl.w	r3, r2, r3
 801b89c:	461a      	mov	r2, r3
 801b89e:	4b28      	ldr	r3, [pc, #160]	; (801b940 <SUBGRF_GetCFO+0xe4>)
 801b8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8a4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b8a6:	69ba      	ldr	r2, [r7, #24]
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8ae:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b8b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8ba:	697a      	ldr	r2, [r7, #20]
 801b8bc:	fb02 f303 	mul.w	r3, r2, r3
 801b8c0:	2b07      	cmp	r3, #7
 801b8c2:	d802      	bhi.n	801b8ca <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b8c4:	2302      	movs	r3, #2
 801b8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801b8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8ce:	697a      	ldr	r2, [r7, #20]
 801b8d0:	fb02 f303 	mul.w	r3, r2, r3
 801b8d4:	2b03      	cmp	r3, #3
 801b8d6:	d802      	bhi.n	801b8de <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b8d8:	2304      	movs	r3, #4
 801b8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b8de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b8e2:	69bb      	ldr	r3, [r7, #24]
 801b8e4:	fb02 f303 	mul.w	r3, r2, r3
 801b8e8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b8ea:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801b8ee:	f7ff fd97 	bl	801b420 <SUBGRF_ReadRegister>
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	021b      	lsls	r3, r3, #8
 801b8f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801b8fa:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b8fc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801b900:	f7ff fd8e 	bl	801b420 <SUBGRF_ReadRegister>
 801b904:	4603      	mov	r3, r0
 801b906:	461a      	mov	r2, r3
 801b908:	6a3b      	ldr	r3, [r7, #32]
 801b90a:	4313      	orrs	r3, r2
 801b90c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b90e:	6a3b      	ldr	r3, [r7, #32]
 801b910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b914:	2b00      	cmp	r3, #0
 801b916:	d005      	beq.n	801b924 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b918:	6a3b      	ldr	r3, [r7, #32]
 801b91a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b91e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b922:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b924:	693b      	ldr	r3, [r7, #16]
 801b926:	095b      	lsrs	r3, r3, #5
 801b928:	6a3a      	ldr	r2, [r7, #32]
 801b92a:	fb02 f303 	mul.w	r3, r2, r3
 801b92e:	11da      	asrs	r2, r3, #7
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	601a      	str	r2, [r3, #0]
}
 801b934:	bf00      	nop
 801b936:	3728      	adds	r7, #40	; 0x28
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd80      	pop	{r7, pc}
 801b93c:	0c0a0804 	.word	0x0c0a0804
 801b940:	01e84800 	.word	0x01e84800

0801b944 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b944:	b480      	push	{r7}
 801b946:	b087      	sub	sp, #28
 801b948:	af00      	add	r7, sp, #0
 801b94a:	4603      	mov	r3, r0
 801b94c:	60b9      	str	r1, [r7, #8]
 801b94e:	607a      	str	r2, [r7, #4]
 801b950:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b952:	2300      	movs	r3, #0
 801b954:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b956:	f04f 33ff 	mov.w	r3, #4294967295
 801b95a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b95c:	697b      	ldr	r3, [r7, #20]
}
 801b95e:	4618      	mov	r0, r3
 801b960:	371c      	adds	r7, #28
 801b962:	46bd      	mov	sp, r7
 801b964:	bc80      	pop	{r7}
 801b966:	4770      	bx	lr

0801b968 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b968:	b480      	push	{r7}
 801b96a:	b087      	sub	sp, #28
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	4603      	mov	r3, r0
 801b970:	60b9      	str	r1, [r7, #8]
 801b972:	607a      	str	r2, [r7, #4]
 801b974:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b976:	2300      	movs	r3, #0
 801b978:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b97a:	f04f 33ff 	mov.w	r3, #4294967295
 801b97e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b980:	697b      	ldr	r3, [r7, #20]
}
 801b982:	4618      	mov	r0, r3
 801b984:	371c      	adds	r7, #28
 801b986:	46bd      	mov	sp, r7
 801b988:	bc80      	pop	{r7}
 801b98a:	4770      	bx	lr

0801b98c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b98c:	b480      	push	{r7}
 801b98e:	b085      	sub	sp, #20
 801b990:	af00      	add	r7, sp, #0
 801b992:	60f8      	str	r0, [r7, #12]
 801b994:	60b9      	str	r1, [r7, #8]
 801b996:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b998:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3714      	adds	r7, #20
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bc80      	pop	{r7}
 801b9a4:	4770      	bx	lr

0801b9a6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b9a6:	b480      	push	{r7}
 801b9a8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b9aa:	bf00      	nop
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	bc80      	pop	{r7}
 801b9b0:	4770      	bx	lr

0801b9b2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b9b2:	b480      	push	{r7}
 801b9b4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b9b6:	2300      	movs	r3, #0
#endif
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bc80      	pop	{r7}
 801b9be:	4770      	bx	lr

0801b9c0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b9c0:	b480      	push	{r7}
 801b9c2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b9c4:	2300      	movs	r3, #0
#endif
}
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	bc80      	pop	{r7}
 801b9cc:	4770      	bx	lr

0801b9ce <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b9ce:	b480      	push	{r7}
 801b9d0:	b083      	sub	sp, #12
 801b9d2:	af00      	add	r7, sp, #0
 801b9d4:	4603      	mov	r3, r0
 801b9d6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b9d8:	bf00      	nop
 801b9da:	370c      	adds	r7, #12
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	bc80      	pop	{r7}
 801b9e0:	4770      	bx	lr

0801b9e2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b9e2:	b480      	push	{r7}
 801b9e4:	b087      	sub	sp, #28
 801b9e6:	af00      	add	r7, sp, #0
 801b9e8:	60f8      	str	r0, [r7, #12]
 801b9ea:	460b      	mov	r3, r1
 801b9ec:	607a      	str	r2, [r7, #4]
 801b9ee:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b9f0:	f04f 33ff 	mov.w	r3, #4294967295
 801b9f4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b9f6:	697b      	ldr	r3, [r7, #20]
}
 801b9f8:	4618      	mov	r0, r3
 801b9fa:	371c      	adds	r7, #28
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	bc80      	pop	{r7}
 801ba00:	4770      	bx	lr

0801ba02 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ba02:	b480      	push	{r7}
 801ba04:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801ba06:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bc80      	pop	{r7}
 801ba10:	4770      	bx	lr

0801ba12 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801ba12:	b480      	push	{r7}
 801ba14:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801ba16:	bf00      	nop
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bc80      	pop	{r7}
 801ba1c:	4770      	bx	lr

0801ba1e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ba1e:	b480      	push	{r7}
 801ba20:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801ba22:	bf00      	nop
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bc80      	pop	{r7}
 801ba28:	4770      	bx	lr

0801ba2a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801ba2a:	b480      	push	{r7}
 801ba2c:	b083      	sub	sp, #12
 801ba2e:	af00      	add	r7, sp, #0
 801ba30:	4603      	mov	r3, r0
 801ba32:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801ba34:	bf00      	nop
 801ba36:	370c      	adds	r7, #12
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bc80      	pop	{r7}
 801ba3c:	4770      	bx	lr
	...

0801ba40 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ba40:	b480      	push	{r7}
 801ba42:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ba44:	4b04      	ldr	r3, [pc, #16]	; (801ba58 <UTIL_LPM_Init+0x18>)
 801ba46:	2200      	movs	r2, #0
 801ba48:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ba4a:	4b04      	ldr	r3, [pc, #16]	; (801ba5c <UTIL_LPM_Init+0x1c>)
 801ba4c:	2200      	movs	r2, #0
 801ba4e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ba50:	bf00      	nop
 801ba52:	46bd      	mov	sp, r7
 801ba54:	bc80      	pop	{r7}
 801ba56:	4770      	bx	lr
 801ba58:	20001f10 	.word	0x20001f10
 801ba5c:	20001f14 	.word	0x20001f14

0801ba60 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ba60:	b480      	push	{r7}
 801ba62:	b087      	sub	sp, #28
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
 801ba68:	460b      	mov	r3, r1
 801ba6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba70:	613b      	str	r3, [r7, #16]
  return(result);
 801ba72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ba74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba76:	b672      	cpsid	i
}
 801ba78:	bf00      	nop
  
  switch( state )
 801ba7a:	78fb      	ldrb	r3, [r7, #3]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d008      	beq.n	801ba92 <UTIL_LPM_SetStopMode+0x32>
 801ba80:	2b01      	cmp	r3, #1
 801ba82:	d10e      	bne.n	801baa2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ba84:	4b0d      	ldr	r3, [pc, #52]	; (801babc <UTIL_LPM_SetStopMode+0x5c>)
 801ba86:	681a      	ldr	r2, [r3, #0]
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	4313      	orrs	r3, r2
 801ba8c:	4a0b      	ldr	r2, [pc, #44]	; (801babc <UTIL_LPM_SetStopMode+0x5c>)
 801ba8e:	6013      	str	r3, [r2, #0]
      break;
 801ba90:	e008      	b.n	801baa4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	43da      	mvns	r2, r3
 801ba96:	4b09      	ldr	r3, [pc, #36]	; (801babc <UTIL_LPM_SetStopMode+0x5c>)
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	4013      	ands	r3, r2
 801ba9c:	4a07      	ldr	r2, [pc, #28]	; (801babc <UTIL_LPM_SetStopMode+0x5c>)
 801ba9e:	6013      	str	r3, [r2, #0]
      break;
 801baa0:	e000      	b.n	801baa4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801baa2:	bf00      	nop
 801baa4:	697b      	ldr	r3, [r7, #20]
 801baa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	f383 8810 	msr	PRIMASK, r3
}
 801baae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bab0:	bf00      	nop
 801bab2:	371c      	adds	r7, #28
 801bab4:	46bd      	mov	sp, r7
 801bab6:	bc80      	pop	{r7}
 801bab8:	4770      	bx	lr
 801baba:	bf00      	nop
 801babc:	20001f10 	.word	0x20001f10

0801bac0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bac0:	b480      	push	{r7}
 801bac2:	b087      	sub	sp, #28
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
 801bac8:	460b      	mov	r3, r1
 801baca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bacc:	f3ef 8310 	mrs	r3, PRIMASK
 801bad0:	613b      	str	r3, [r7, #16]
  return(result);
 801bad2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bad6:	b672      	cpsid	i
}
 801bad8:	bf00      	nop
  
  switch(state)
 801bada:	78fb      	ldrb	r3, [r7, #3]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d008      	beq.n	801baf2 <UTIL_LPM_SetOffMode+0x32>
 801bae0:	2b01      	cmp	r3, #1
 801bae2:	d10e      	bne.n	801bb02 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bae4:	4b0d      	ldr	r3, [pc, #52]	; (801bb1c <UTIL_LPM_SetOffMode+0x5c>)
 801bae6:	681a      	ldr	r2, [r3, #0]
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	4313      	orrs	r3, r2
 801baec:	4a0b      	ldr	r2, [pc, #44]	; (801bb1c <UTIL_LPM_SetOffMode+0x5c>)
 801baee:	6013      	str	r3, [r2, #0]
      break;
 801baf0:	e008      	b.n	801bb04 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	43da      	mvns	r2, r3
 801baf6:	4b09      	ldr	r3, [pc, #36]	; (801bb1c <UTIL_LPM_SetOffMode+0x5c>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	4013      	ands	r3, r2
 801bafc:	4a07      	ldr	r2, [pc, #28]	; (801bb1c <UTIL_LPM_SetOffMode+0x5c>)
 801bafe:	6013      	str	r3, [r2, #0]
      break;
 801bb00:	e000      	b.n	801bb04 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801bb02:	bf00      	nop
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	f383 8810 	msr	PRIMASK, r3
}
 801bb0e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bb10:	bf00      	nop
 801bb12:	371c      	adds	r7, #28
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bc80      	pop	{r7}
 801bb18:	4770      	bx	lr
 801bb1a:	bf00      	nop
 801bb1c:	20001f14 	.word	0x20001f14

0801bb20 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b084      	sub	sp, #16
 801bb24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb26:	f3ef 8310 	mrs	r3, PRIMASK
 801bb2a:	60bb      	str	r3, [r7, #8]
  return(result);
 801bb2c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801bb2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb30:	b672      	cpsid	i
}
 801bb32:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801bb34:	4b12      	ldr	r3, [pc, #72]	; (801bb80 <UTIL_LPM_EnterLowPower+0x60>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d006      	beq.n	801bb4a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801bb3c:	4b11      	ldr	r3, [pc, #68]	; (801bb84 <UTIL_LPM_EnterLowPower+0x64>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801bb42:	4b10      	ldr	r3, [pc, #64]	; (801bb84 <UTIL_LPM_EnterLowPower+0x64>)
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	4798      	blx	r3
 801bb48:	e010      	b.n	801bb6c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801bb4a:	4b0f      	ldr	r3, [pc, #60]	; (801bb88 <UTIL_LPM_EnterLowPower+0x68>)
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d006      	beq.n	801bb60 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801bb52:	4b0c      	ldr	r3, [pc, #48]	; (801bb84 <UTIL_LPM_EnterLowPower+0x64>)
 801bb54:	689b      	ldr	r3, [r3, #8]
 801bb56:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801bb58:	4b0a      	ldr	r3, [pc, #40]	; (801bb84 <UTIL_LPM_EnterLowPower+0x64>)
 801bb5a:	68db      	ldr	r3, [r3, #12]
 801bb5c:	4798      	blx	r3
 801bb5e:	e005      	b.n	801bb6c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801bb60:	4b08      	ldr	r3, [pc, #32]	; (801bb84 <UTIL_LPM_EnterLowPower+0x64>)
 801bb62:	691b      	ldr	r3, [r3, #16]
 801bb64:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801bb66:	4b07      	ldr	r3, [pc, #28]	; (801bb84 <UTIL_LPM_EnterLowPower+0x64>)
 801bb68:	695b      	ldr	r3, [r3, #20]
 801bb6a:	4798      	blx	r3
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	f383 8810 	msr	PRIMASK, r3
}
 801bb76:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bb78:	bf00      	nop
 801bb7a:	3710      	adds	r7, #16
 801bb7c:	46bd      	mov	sp, r7
 801bb7e:	bd80      	pop	{r7, pc}
 801bb80:	20001f10 	.word	0x20001f10
 801bb84:	08020228 	.word	0x08020228
 801bb88:	20001f14 	.word	0x20001f14

0801bb8c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801bb8c:	b480      	push	{r7}
 801bb8e:	b087      	sub	sp, #28
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	60f8      	str	r0, [r7, #12]
 801bb94:	60b9      	str	r1, [r7, #8]
 801bb96:	4613      	mov	r3, r2
 801bb98:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801bb9e:	68bb      	ldr	r3, [r7, #8]
 801bba0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801bba2:	e007      	b.n	801bbb4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bba4:	693a      	ldr	r2, [r7, #16]
 801bba6:	1c53      	adds	r3, r2, #1
 801bba8:	613b      	str	r3, [r7, #16]
 801bbaa:	697b      	ldr	r3, [r7, #20]
 801bbac:	1c59      	adds	r1, r3, #1
 801bbae:	6179      	str	r1, [r7, #20]
 801bbb0:	7812      	ldrb	r2, [r2, #0]
 801bbb2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bbb4:	88fb      	ldrh	r3, [r7, #6]
 801bbb6:	1e5a      	subs	r2, r3, #1
 801bbb8:	80fa      	strh	r2, [r7, #6]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d1f2      	bne.n	801bba4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801bbbe:	bf00      	nop
 801bbc0:	bf00      	nop
 801bbc2:	371c      	adds	r7, #28
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bc80      	pop	{r7}
 801bbc8:	4770      	bx	lr

0801bbca <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bbca:	b480      	push	{r7}
 801bbcc:	b085      	sub	sp, #20
 801bbce:	af00      	add	r7, sp, #0
 801bbd0:	6078      	str	r0, [r7, #4]
 801bbd2:	460b      	mov	r3, r1
 801bbd4:	70fb      	strb	r3, [r7, #3]
 801bbd6:	4613      	mov	r3, r2
 801bbd8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bbde:	e004      	b.n	801bbea <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	1c5a      	adds	r2, r3, #1
 801bbe4:	60fa      	str	r2, [r7, #12]
 801bbe6:	78fa      	ldrb	r2, [r7, #3]
 801bbe8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bbea:	883b      	ldrh	r3, [r7, #0]
 801bbec:	1e5a      	subs	r2, r3, #1
 801bbee:	803a      	strh	r2, [r7, #0]
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d1f5      	bne.n	801bbe0 <UTIL_MEM_set_8+0x16>
  }
}
 801bbf4:	bf00      	nop
 801bbf6:	bf00      	nop
 801bbf8:	3714      	adds	r7, #20
 801bbfa:	46bd      	mov	sp, r7
 801bbfc:	bc80      	pop	{r7}
 801bbfe:	4770      	bx	lr

0801bc00 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bc00:	b082      	sub	sp, #8
 801bc02:	b480      	push	{r7}
 801bc04:	b087      	sub	sp, #28
 801bc06:	af00      	add	r7, sp, #0
 801bc08:	60f8      	str	r0, [r7, #12]
 801bc0a:	1d38      	adds	r0, r7, #4
 801bc0c:	e880 0006 	stmia.w	r0, {r1, r2}
 801bc10:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bc12:	2300      	movs	r3, #0
 801bc14:	613b      	str	r3, [r7, #16]
 801bc16:	2300      	movs	r3, #0
 801bc18:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc1e:	4413      	add	r3, r2
 801bc20:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bc22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bc26:	b29a      	uxth	r2, r3
 801bc28:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bc2c:	b29b      	uxth	r3, r3
 801bc2e:	4413      	add	r3, r2
 801bc30:	b29b      	uxth	r3, r3
 801bc32:	b21b      	sxth	r3, r3
 801bc34:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801bc36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bc3e:	db0a      	blt.n	801bc56 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801bc40:	693b      	ldr	r3, [r7, #16]
 801bc42:	3301      	adds	r3, #1
 801bc44:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801bc46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc4a:	b29b      	uxth	r3, r3
 801bc4c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801bc50:	b29b      	uxth	r3, r3
 801bc52:	b21b      	sxth	r3, r3
 801bc54:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	461a      	mov	r2, r3
 801bc5a:	f107 0310 	add.w	r3, r7, #16
 801bc5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bc62:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bc66:	68f8      	ldr	r0, [r7, #12]
 801bc68:	371c      	adds	r7, #28
 801bc6a:	46bd      	mov	sp, r7
 801bc6c:	bc80      	pop	{r7}
 801bc6e:	b002      	add	sp, #8
 801bc70:	4770      	bx	lr

0801bc72 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bc72:	b082      	sub	sp, #8
 801bc74:	b480      	push	{r7}
 801bc76:	b087      	sub	sp, #28
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	60f8      	str	r0, [r7, #12]
 801bc7c:	1d38      	adds	r0, r7, #4
 801bc7e:	e880 0006 	stmia.w	r0, {r1, r2}
 801bc82:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bc84:	2300      	movs	r3, #0
 801bc86:	613b      	str	r3, [r7, #16]
 801bc88:	2300      	movs	r3, #0
 801bc8a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801bc8c:	687a      	ldr	r2, [r7, #4]
 801bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc90:	1ad3      	subs	r3, r2, r3
 801bc92:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bc94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bc98:	b29a      	uxth	r2, r3
 801bc9a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bc9e:	b29b      	uxth	r3, r3
 801bca0:	1ad3      	subs	r3, r2, r3
 801bca2:	b29b      	uxth	r3, r3
 801bca4:	b21b      	sxth	r3, r3
 801bca6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801bca8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	da0a      	bge.n	801bcc6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801bcb0:	693b      	ldr	r3, [r7, #16]
 801bcb2:	3b01      	subs	r3, #1
 801bcb4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801bcb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcba:	b29b      	uxth	r3, r3
 801bcbc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801bcc0:	b29b      	uxth	r3, r3
 801bcc2:	b21b      	sxth	r3, r3
 801bcc4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	461a      	mov	r2, r3
 801bcca:	f107 0310 	add.w	r3, r7, #16
 801bcce:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bcd2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bcd6:	68f8      	ldr	r0, [r7, #12]
 801bcd8:	371c      	adds	r7, #28
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bc80      	pop	{r7}
 801bcde:	b002      	add	sp, #8
 801bce0:	4770      	bx	lr
	...

0801bce4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b088      	sub	sp, #32
 801bce8:	af02      	add	r7, sp, #8
 801bcea:	463b      	mov	r3, r7
 801bcec:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	60bb      	str	r3, [r7, #8]
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bcf8:	4b10      	ldr	r3, [pc, #64]	; (801bd3c <SysTimeSet+0x58>)
 801bcfa:	691b      	ldr	r3, [r3, #16]
 801bcfc:	f107 0208 	add.w	r2, r7, #8
 801bd00:	3204      	adds	r2, #4
 801bd02:	4610      	mov	r0, r2
 801bd04:	4798      	blx	r3
 801bd06:	4603      	mov	r3, r0
 801bd08:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bd0a:	f107 0010 	add.w	r0, r7, #16
 801bd0e:	68fb      	ldr	r3, [r7, #12]
 801bd10:	9300      	str	r3, [sp, #0]
 801bd12:	68bb      	ldr	r3, [r7, #8]
 801bd14:	463a      	mov	r2, r7
 801bd16:	ca06      	ldmia	r2, {r1, r2}
 801bd18:	f7ff ffab 	bl	801bc72 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bd1c:	4b07      	ldr	r3, [pc, #28]	; (801bd3c <SysTimeSet+0x58>)
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	693a      	ldr	r2, [r7, #16]
 801bd22:	4610      	mov	r0, r2
 801bd24:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bd26:	4b05      	ldr	r3, [pc, #20]	; (801bd3c <SysTimeSet+0x58>)
 801bd28:	689b      	ldr	r3, [r3, #8]
 801bd2a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bd2e:	4610      	mov	r0, r2
 801bd30:	4798      	blx	r3
}
 801bd32:	bf00      	nop
 801bd34:	3718      	adds	r7, #24
 801bd36:	46bd      	mov	sp, r7
 801bd38:	bd80      	pop	{r7, pc}
 801bd3a:	bf00      	nop
 801bd3c:	0802030c 	.word	0x0802030c

0801bd40 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801bd40:	b580      	push	{r7, lr}
 801bd42:	b08a      	sub	sp, #40	; 0x28
 801bd44:	af02      	add	r7, sp, #8
 801bd46:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd48:	2300      	movs	r3, #0
 801bd4a:	61bb      	str	r3, [r7, #24]
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd50:	2300      	movs	r3, #0
 801bd52:	613b      	str	r3, [r7, #16]
 801bd54:	2300      	movs	r3, #0
 801bd56:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd58:	4b14      	ldr	r3, [pc, #80]	; (801bdac <SysTimeGet+0x6c>)
 801bd5a:	691b      	ldr	r3, [r3, #16]
 801bd5c:	f107 0218 	add.w	r2, r7, #24
 801bd60:	3204      	adds	r2, #4
 801bd62:	4610      	mov	r0, r2
 801bd64:	4798      	blx	r3
 801bd66:	4603      	mov	r3, r0
 801bd68:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bd6a:	4b10      	ldr	r3, [pc, #64]	; (801bdac <SysTimeGet+0x6c>)
 801bd6c:	68db      	ldr	r3, [r3, #12]
 801bd6e:	4798      	blx	r3
 801bd70:	4603      	mov	r3, r0
 801bd72:	b21b      	sxth	r3, r3
 801bd74:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bd76:	4b0d      	ldr	r3, [pc, #52]	; (801bdac <SysTimeGet+0x6c>)
 801bd78:	685b      	ldr	r3, [r3, #4]
 801bd7a:	4798      	blx	r3
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801bd80:	f107 0010 	add.w	r0, r7, #16
 801bd84:	69fb      	ldr	r3, [r7, #28]
 801bd86:	9300      	str	r3, [sp, #0]
 801bd88:	69bb      	ldr	r3, [r7, #24]
 801bd8a:	f107 0208 	add.w	r2, r7, #8
 801bd8e:	ca06      	ldmia	r2, {r1, r2}
 801bd90:	f7ff ff36 	bl	801bc00 <SysTimeAdd>

  return sysTime;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	461a      	mov	r2, r3
 801bd98:	f107 0310 	add.w	r3, r7, #16
 801bd9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bda0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bda4:	6878      	ldr	r0, [r7, #4]
 801bda6:	3720      	adds	r7, #32
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd80      	pop	{r7, pc}
 801bdac:	0802030c 	.word	0x0802030c

0801bdb0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b084      	sub	sp, #16
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdb8:	2300      	movs	r3, #0
 801bdba:	60bb      	str	r3, [r7, #8]
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bdc0:	4b0a      	ldr	r3, [pc, #40]	; (801bdec <SysTimeGetMcuTime+0x3c>)
 801bdc2:	691b      	ldr	r3, [r3, #16]
 801bdc4:	f107 0208 	add.w	r2, r7, #8
 801bdc8:	3204      	adds	r2, #4
 801bdca:	4610      	mov	r0, r2
 801bdcc:	4798      	blx	r3
 801bdce:	4603      	mov	r3, r0
 801bdd0:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	461a      	mov	r2, r3
 801bdd6:	f107 0308 	add.w	r3, r7, #8
 801bdda:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bdde:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bde2:	6878      	ldr	r0, [r7, #4]
 801bde4:	3710      	adds	r7, #16
 801bde6:	46bd      	mov	sp, r7
 801bde8:	bd80      	pop	{r7, pc}
 801bdea:	bf00      	nop
 801bdec:	0802030c 	.word	0x0802030c

0801bdf0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b088      	sub	sp, #32
 801bdf4:	af02      	add	r7, sp, #8
 801bdf6:	463b      	mov	r3, r7
 801bdf8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bdfc:	4b0f      	ldr	r3, [pc, #60]	; (801be3c <SysTimeToMs+0x4c>)
 801bdfe:	68db      	ldr	r3, [r3, #12]
 801be00:	4798      	blx	r3
 801be02:	4603      	mov	r3, r0
 801be04:	b21b      	sxth	r3, r3
 801be06:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801be08:	4b0c      	ldr	r3, [pc, #48]	; (801be3c <SysTimeToMs+0x4c>)
 801be0a:	685b      	ldr	r3, [r3, #4]
 801be0c:	4798      	blx	r3
 801be0e:	4603      	mov	r3, r0
 801be10:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801be12:	f107 0008 	add.w	r0, r7, #8
 801be16:	697b      	ldr	r3, [r7, #20]
 801be18:	9300      	str	r3, [sp, #0]
 801be1a:	693b      	ldr	r3, [r7, #16]
 801be1c:	463a      	mov	r2, r7
 801be1e:	ca06      	ldmia	r2, {r1, r2}
 801be20:	f7ff ff27 	bl	801bc72 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801be2a:	fb02 f303 	mul.w	r3, r2, r3
 801be2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801be32:	4413      	add	r3, r2
}
 801be34:	4618      	mov	r0, r3
 801be36:	3718      	adds	r7, #24
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd80      	pop	{r7, pc}
 801be3c:	0802030c 	.word	0x0802030c

0801be40 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b08a      	sub	sp, #40	; 0x28
 801be44:	af02      	add	r7, sp, #8
 801be46:	6078      	str	r0, [r7, #4]
 801be48:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	4a19      	ldr	r2, [pc, #100]	; (801beb4 <SysTimeFromMs+0x74>)
 801be4e:	fba2 2303 	umull	r2, r3, r2, r3
 801be52:	099b      	lsrs	r3, r3, #6
 801be54:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801be56:	69fb      	ldr	r3, [r7, #28]
 801be58:	617b      	str	r3, [r7, #20]
 801be5a:	683b      	ldr	r3, [r7, #0]
 801be5c:	b29a      	uxth	r2, r3
 801be5e:	69fb      	ldr	r3, [r7, #28]
 801be60:	b29b      	uxth	r3, r3
 801be62:	4619      	mov	r1, r3
 801be64:	0149      	lsls	r1, r1, #5
 801be66:	1ac9      	subs	r1, r1, r3
 801be68:	0089      	lsls	r1, r1, #2
 801be6a:	440b      	add	r3, r1
 801be6c:	00db      	lsls	r3, r3, #3
 801be6e:	b29b      	uxth	r3, r3
 801be70:	1ad3      	subs	r3, r2, r3
 801be72:	b29b      	uxth	r3, r3
 801be74:	b21b      	sxth	r3, r3
 801be76:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801be78:	f107 030c 	add.w	r3, r7, #12
 801be7c:	2200      	movs	r2, #0
 801be7e:	601a      	str	r2, [r3, #0]
 801be80:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801be82:	4b0d      	ldr	r3, [pc, #52]	; (801beb8 <SysTimeFromMs+0x78>)
 801be84:	68db      	ldr	r3, [r3, #12]
 801be86:	4798      	blx	r3
 801be88:	4603      	mov	r3, r0
 801be8a:	b21b      	sxth	r3, r3
 801be8c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801be8e:	4b0a      	ldr	r3, [pc, #40]	; (801beb8 <SysTimeFromMs+0x78>)
 801be90:	685b      	ldr	r3, [r3, #4]
 801be92:	4798      	blx	r3
 801be94:	4603      	mov	r3, r0
 801be96:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801be98:	6878      	ldr	r0, [r7, #4]
 801be9a:	693b      	ldr	r3, [r7, #16]
 801be9c:	9300      	str	r3, [sp, #0]
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	f107 0214 	add.w	r2, r7, #20
 801bea4:	ca06      	ldmia	r2, {r1, r2}
 801bea6:	f7ff feab 	bl	801bc00 <SysTimeAdd>
}
 801beaa:	6878      	ldr	r0, [r7, #4]
 801beac:	3720      	adds	r7, #32
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}
 801beb2:	bf00      	nop
 801beb4:	10624dd3 	.word	0x10624dd3
 801beb8:	0802030c 	.word	0x0802030c

0801bebc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bebc:	b480      	push	{r7}
 801bebe:	b085      	sub	sp, #20
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bec4:	2300      	movs	r3, #0
 801bec6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801bec8:	e00e      	b.n	801bee8 <ee_skip_atoi+0x2c>
 801beca:	68fa      	ldr	r2, [r7, #12]
 801becc:	4613      	mov	r3, r2
 801bece:	009b      	lsls	r3, r3, #2
 801bed0:	4413      	add	r3, r2
 801bed2:	005b      	lsls	r3, r3, #1
 801bed4:	4618      	mov	r0, r3
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	1c59      	adds	r1, r3, #1
 801bedc:	687a      	ldr	r2, [r7, #4]
 801bede:	6011      	str	r1, [r2, #0]
 801bee0:	781b      	ldrb	r3, [r3, #0]
 801bee2:	4403      	add	r3, r0
 801bee4:	3b30      	subs	r3, #48	; 0x30
 801bee6:	60fb      	str	r3, [r7, #12]
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	781b      	ldrb	r3, [r3, #0]
 801beee:	2b2f      	cmp	r3, #47	; 0x2f
 801bef0:	d904      	bls.n	801befc <ee_skip_atoi+0x40>
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	781b      	ldrb	r3, [r3, #0]
 801bef8:	2b39      	cmp	r3, #57	; 0x39
 801befa:	d9e6      	bls.n	801beca <ee_skip_atoi+0xe>
  return i;
 801befc:	68fb      	ldr	r3, [r7, #12]
}
 801befe:	4618      	mov	r0, r3
 801bf00:	3714      	adds	r7, #20
 801bf02:	46bd      	mov	sp, r7
 801bf04:	bc80      	pop	{r7}
 801bf06:	4770      	bx	lr

0801bf08 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bf08:	b480      	push	{r7}
 801bf0a:	b099      	sub	sp, #100	; 0x64
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	60f8      	str	r0, [r7, #12]
 801bf10:	60b9      	str	r1, [r7, #8]
 801bf12:	607a      	str	r2, [r7, #4]
 801bf14:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bf16:	4b71      	ldr	r3, [pc, #452]	; (801c0dc <ee_number+0x1d4>)
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bf1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d002      	beq.n	801bf2c <ee_number+0x24>
 801bf26:	4b6e      	ldr	r3, [pc, #440]	; (801c0e0 <ee_number+0x1d8>)
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bf2c:	683b      	ldr	r3, [r7, #0]
 801bf2e:	2b01      	cmp	r3, #1
 801bf30:	dd02      	ble.n	801bf38 <ee_number+0x30>
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	2b24      	cmp	r3, #36	; 0x24
 801bf36:	dd01      	ble.n	801bf3c <ee_number+0x34>
 801bf38:	2300      	movs	r3, #0
 801bf3a:	e0ca      	b.n	801c0d2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bf3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf3e:	f003 0301 	and.w	r3, r3, #1
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d001      	beq.n	801bf4a <ee_number+0x42>
 801bf46:	2330      	movs	r3, #48	; 0x30
 801bf48:	e000      	b.n	801bf4c <ee_number+0x44>
 801bf4a:	2320      	movs	r3, #32
 801bf4c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801bf50:	2300      	movs	r3, #0
 801bf52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801bf56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf58:	f003 0302 	and.w	r3, r3, #2
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d00b      	beq.n	801bf78 <ee_number+0x70>
  {
    if (num < 0)
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	da08      	bge.n	801bf78 <ee_number+0x70>
    {
      sign = '-';
 801bf66:	232d      	movs	r3, #45	; 0x2d
 801bf68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	425b      	negs	r3, r3
 801bf70:	607b      	str	r3, [r7, #4]
      size--;
 801bf72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf74:	3b01      	subs	r3, #1
 801bf76:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bf78:	2300      	movs	r3, #0
 801bf7a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d11e      	bne.n	801bfc0 <ee_number+0xb8>
    tmp[i++] = '0';
 801bf82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf84:	1c5a      	adds	r2, r3, #1
 801bf86:	657a      	str	r2, [r7, #84]	; 0x54
 801bf88:	3360      	adds	r3, #96	; 0x60
 801bf8a:	443b      	add	r3, r7
 801bf8c:	2230      	movs	r2, #48	; 0x30
 801bf8e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bf92:	e018      	b.n	801bfc6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	683a      	ldr	r2, [r7, #0]
 801bf98:	fbb3 f1f2 	udiv	r1, r3, r2
 801bf9c:	fb01 f202 	mul.w	r2, r1, r2
 801bfa0:	1a9b      	subs	r3, r3, r2
 801bfa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bfa4:	441a      	add	r2, r3
 801bfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfa8:	1c59      	adds	r1, r3, #1
 801bfaa:	6579      	str	r1, [r7, #84]	; 0x54
 801bfac:	7812      	ldrb	r2, [r2, #0]
 801bfae:	3360      	adds	r3, #96	; 0x60
 801bfb0:	443b      	add	r3, r7
 801bfb2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bfb6:	687a      	ldr	r2, [r7, #4]
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	fbb2 f3f3 	udiv	r3, r2, r3
 801bfbe:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d1e6      	bne.n	801bf94 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bfc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bfc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfca:	429a      	cmp	r2, r3
 801bfcc:	dd01      	ble.n	801bfd2 <ee_number+0xca>
 801bfce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801bfd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bfd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfd6:	1ad3      	subs	r3, r2, r3
 801bfd8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bfda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bfdc:	f003 0301 	and.w	r3, r3, #1
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d112      	bne.n	801c00a <ee_number+0x102>
 801bfe4:	e00c      	b.n	801c000 <ee_number+0xf8>
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	1c5a      	adds	r2, r3, #1
 801bfea:	60fa      	str	r2, [r7, #12]
 801bfec:	2220      	movs	r2, #32
 801bfee:	701a      	strb	r2, [r3, #0]
 801bff0:	68bb      	ldr	r3, [r7, #8]
 801bff2:	3b01      	subs	r3, #1
 801bff4:	60bb      	str	r3, [r7, #8]
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d101      	bne.n	801c000 <ee_number+0xf8>
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	e068      	b.n	801c0d2 <ee_number+0x1ca>
 801c000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c002:	1e5a      	subs	r2, r3, #1
 801c004:	66ba      	str	r2, [r7, #104]	; 0x68
 801c006:	2b00      	cmp	r3, #0
 801c008:	dced      	bgt.n	801bfe6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d01b      	beq.n	801c04a <ee_number+0x142>
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	1c5a      	adds	r2, r3, #1
 801c016:	60fa      	str	r2, [r7, #12]
 801c018:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c01c:	701a      	strb	r2, [r3, #0]
 801c01e:	68bb      	ldr	r3, [r7, #8]
 801c020:	3b01      	subs	r3, #1
 801c022:	60bb      	str	r3, [r7, #8]
 801c024:	68bb      	ldr	r3, [r7, #8]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d10f      	bne.n	801c04a <ee_number+0x142>
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	e051      	b.n	801c0d2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	1c5a      	adds	r2, r3, #1
 801c032:	60fa      	str	r2, [r7, #12]
 801c034:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c038:	701a      	strb	r2, [r3, #0]
 801c03a:	68bb      	ldr	r3, [r7, #8]
 801c03c:	3b01      	subs	r3, #1
 801c03e:	60bb      	str	r3, [r7, #8]
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d101      	bne.n	801c04a <ee_number+0x142>
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	e043      	b.n	801c0d2 <ee_number+0x1ca>
 801c04a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c04c:	1e5a      	subs	r2, r3, #1
 801c04e:	66ba      	str	r2, [r7, #104]	; 0x68
 801c050:	2b00      	cmp	r3, #0
 801c052:	dcec      	bgt.n	801c02e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c054:	e00c      	b.n	801c070 <ee_number+0x168>
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	1c5a      	adds	r2, r3, #1
 801c05a:	60fa      	str	r2, [r7, #12]
 801c05c:	2230      	movs	r2, #48	; 0x30
 801c05e:	701a      	strb	r2, [r3, #0]
 801c060:	68bb      	ldr	r3, [r7, #8]
 801c062:	3b01      	subs	r3, #1
 801c064:	60bb      	str	r3, [r7, #8]
 801c066:	68bb      	ldr	r3, [r7, #8]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d101      	bne.n	801c070 <ee_number+0x168>
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	e030      	b.n	801c0d2 <ee_number+0x1ca>
 801c070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c072:	1e5a      	subs	r2, r3, #1
 801c074:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c078:	429a      	cmp	r2, r3
 801c07a:	dbec      	blt.n	801c056 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c07c:	e010      	b.n	801c0a0 <ee_number+0x198>
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	1c5a      	adds	r2, r3, #1
 801c082:	60fa      	str	r2, [r7, #12]
 801c084:	f107 0110 	add.w	r1, r7, #16
 801c088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c08a:	440a      	add	r2, r1
 801c08c:	7812      	ldrb	r2, [r2, #0]
 801c08e:	701a      	strb	r2, [r3, #0]
 801c090:	68bb      	ldr	r3, [r7, #8]
 801c092:	3b01      	subs	r3, #1
 801c094:	60bb      	str	r3, [r7, #8]
 801c096:	68bb      	ldr	r3, [r7, #8]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d101      	bne.n	801c0a0 <ee_number+0x198>
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	e018      	b.n	801c0d2 <ee_number+0x1ca>
 801c0a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c0a2:	1e5a      	subs	r2, r3, #1
 801c0a4:	657a      	str	r2, [r7, #84]	; 0x54
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	dce9      	bgt.n	801c07e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c0aa:	e00c      	b.n	801c0c6 <ee_number+0x1be>
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	1c5a      	adds	r2, r3, #1
 801c0b0:	60fa      	str	r2, [r7, #12]
 801c0b2:	2220      	movs	r2, #32
 801c0b4:	701a      	strb	r2, [r3, #0]
 801c0b6:	68bb      	ldr	r3, [r7, #8]
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	60bb      	str	r3, [r7, #8]
 801c0bc:	68bb      	ldr	r3, [r7, #8]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d101      	bne.n	801c0c6 <ee_number+0x1be>
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	e005      	b.n	801c0d2 <ee_number+0x1ca>
 801c0c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c0c8:	1e5a      	subs	r2, r3, #1
 801c0ca:	66ba      	str	r2, [r7, #104]	; 0x68
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	dced      	bgt.n	801c0ac <ee_number+0x1a4>

  return str;
 801c0d0:	68fb      	ldr	r3, [r7, #12]
}
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	3764      	adds	r7, #100	; 0x64
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	bc80      	pop	{r7}
 801c0da:	4770      	bx	lr
 801c0dc:	2000013c 	.word	0x2000013c
 801c0e0:	20000140 	.word	0x20000140

0801c0e4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b092      	sub	sp, #72	; 0x48
 801c0e8:	af04      	add	r7, sp, #16
 801c0ea:	60f8      	str	r0, [r7, #12]
 801c0ec:	60b9      	str	r1, [r7, #8]
 801c0ee:	607a      	str	r2, [r7, #4]
 801c0f0:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	dc01      	bgt.n	801c0fc <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	e142      	b.n	801c382 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c100:	e12a      	b.n	801c358 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	1ad2      	subs	r2, r2, r3
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	3b01      	subs	r3, #1
 801c10c:	429a      	cmp	r2, r3
 801c10e:	f280 8131 	bge.w	801c374 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	781b      	ldrb	r3, [r3, #0]
 801c116:	2b25      	cmp	r3, #37	; 0x25
 801c118:	d006      	beq.n	801c128 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c11a:	687a      	ldr	r2, [r7, #4]
 801c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c11e:	1c59      	adds	r1, r3, #1
 801c120:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c122:	7812      	ldrb	r2, [r2, #0]
 801c124:	701a      	strb	r2, [r3, #0]
      continue;
 801c126:	e114      	b.n	801c352 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801c128:	2300      	movs	r3, #0
 801c12a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	3301      	adds	r3, #1
 801c130:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	781b      	ldrb	r3, [r3, #0]
 801c136:	2b30      	cmp	r3, #48	; 0x30
 801c138:	d103      	bne.n	801c142 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c13a:	6a3b      	ldr	r3, [r7, #32]
 801c13c:	f043 0301 	orr.w	r3, r3, #1
 801c140:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c142:	f04f 33ff 	mov.w	r3, #4294967295
 801c146:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	781b      	ldrb	r3, [r3, #0]
 801c14c:	2b2f      	cmp	r3, #47	; 0x2f
 801c14e:	d908      	bls.n	801c162 <tiny_vsnprintf_like+0x7e>
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	781b      	ldrb	r3, [r3, #0]
 801c154:	2b39      	cmp	r3, #57	; 0x39
 801c156:	d804      	bhi.n	801c162 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c158:	1d3b      	adds	r3, r7, #4
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7ff feae 	bl	801bebc <ee_skip_atoi>
 801c160:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c162:	f04f 33ff 	mov.w	r3, #4294967295
 801c166:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c168:	f04f 33ff 	mov.w	r3, #4294967295
 801c16c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c16e:	230a      	movs	r3, #10
 801c170:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	781b      	ldrb	r3, [r3, #0]
 801c176:	3b58      	subs	r3, #88	; 0x58
 801c178:	2b20      	cmp	r3, #32
 801c17a:	f200 8094 	bhi.w	801c2a6 <tiny_vsnprintf_like+0x1c2>
 801c17e:	a201      	add	r2, pc, #4	; (adr r2, 801c184 <tiny_vsnprintf_like+0xa0>)
 801c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c184:	0801c28f 	.word	0x0801c28f
 801c188:	0801c2a7 	.word	0x0801c2a7
 801c18c:	0801c2a7 	.word	0x0801c2a7
 801c190:	0801c2a7 	.word	0x0801c2a7
 801c194:	0801c2a7 	.word	0x0801c2a7
 801c198:	0801c2a7 	.word	0x0801c2a7
 801c19c:	0801c2a7 	.word	0x0801c2a7
 801c1a0:	0801c2a7 	.word	0x0801c2a7
 801c1a4:	0801c2a7 	.word	0x0801c2a7
 801c1a8:	0801c2a7 	.word	0x0801c2a7
 801c1ac:	0801c2a7 	.word	0x0801c2a7
 801c1b0:	0801c213 	.word	0x0801c213
 801c1b4:	0801c29d 	.word	0x0801c29d
 801c1b8:	0801c2a7 	.word	0x0801c2a7
 801c1bc:	0801c2a7 	.word	0x0801c2a7
 801c1c0:	0801c2a7 	.word	0x0801c2a7
 801c1c4:	0801c2a7 	.word	0x0801c2a7
 801c1c8:	0801c29d 	.word	0x0801c29d
 801c1cc:	0801c2a7 	.word	0x0801c2a7
 801c1d0:	0801c2a7 	.word	0x0801c2a7
 801c1d4:	0801c2a7 	.word	0x0801c2a7
 801c1d8:	0801c2a7 	.word	0x0801c2a7
 801c1dc:	0801c2a7 	.word	0x0801c2a7
 801c1e0:	0801c2a7 	.word	0x0801c2a7
 801c1e4:	0801c2a7 	.word	0x0801c2a7
 801c1e8:	0801c2a7 	.word	0x0801c2a7
 801c1ec:	0801c2a7 	.word	0x0801c2a7
 801c1f0:	0801c233 	.word	0x0801c233
 801c1f4:	0801c2a7 	.word	0x0801c2a7
 801c1f8:	0801c2f3 	.word	0x0801c2f3
 801c1fc:	0801c2a7 	.word	0x0801c2a7
 801c200:	0801c2a7 	.word	0x0801c2a7
 801c204:	0801c297 	.word	0x0801c297
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c20a:	1c5a      	adds	r2, r3, #1
 801c20c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c20e:	2220      	movs	r2, #32
 801c210:	701a      	strb	r2, [r3, #0]
 801c212:	69fb      	ldr	r3, [r7, #28]
 801c214:	3b01      	subs	r3, #1
 801c216:	61fb      	str	r3, [r7, #28]
 801c218:	69fb      	ldr	r3, [r7, #28]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	dcf4      	bgt.n	801c208 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c21e:	683b      	ldr	r3, [r7, #0]
 801c220:	1d1a      	adds	r2, r3, #4
 801c222:	603a      	str	r2, [r7, #0]
 801c224:	6819      	ldr	r1, [r3, #0]
 801c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c228:	1c5a      	adds	r2, r3, #1
 801c22a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c22c:	b2ca      	uxtb	r2, r1
 801c22e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c230:	e08f      	b.n	801c352 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801c232:	683b      	ldr	r3, [r7, #0]
 801c234:	1d1a      	adds	r2, r3, #4
 801c236:	603a      	str	r2, [r7, #0]
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d101      	bne.n	801c246 <tiny_vsnprintf_like+0x162>
 801c242:	4b52      	ldr	r3, [pc, #328]	; (801c38c <tiny_vsnprintf_like+0x2a8>)
 801c244:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c248:	f7e3 ff9a 	bl	8000180 <strlen>
 801c24c:	4603      	mov	r3, r0
 801c24e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c250:	e004      	b.n	801c25c <tiny_vsnprintf_like+0x178>
 801c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c254:	1c5a      	adds	r2, r3, #1
 801c256:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c258:	2220      	movs	r2, #32
 801c25a:	701a      	strb	r2, [r3, #0]
 801c25c:	69fb      	ldr	r3, [r7, #28]
 801c25e:	1e5a      	subs	r2, r3, #1
 801c260:	61fa      	str	r2, [r7, #28]
 801c262:	693a      	ldr	r2, [r7, #16]
 801c264:	429a      	cmp	r2, r3
 801c266:	dbf4      	blt.n	801c252 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c268:	2300      	movs	r3, #0
 801c26a:	62bb      	str	r3, [r7, #40]	; 0x28
 801c26c:	e00a      	b.n	801c284 <tiny_vsnprintf_like+0x1a0>
 801c26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c270:	1c53      	adds	r3, r2, #1
 801c272:	627b      	str	r3, [r7, #36]	; 0x24
 801c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c276:	1c59      	adds	r1, r3, #1
 801c278:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c27a:	7812      	ldrb	r2, [r2, #0]
 801c27c:	701a      	strb	r2, [r3, #0]
 801c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c280:	3301      	adds	r3, #1
 801c282:	62bb      	str	r3, [r7, #40]	; 0x28
 801c284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	429a      	cmp	r2, r3
 801c28a:	dbf0      	blt.n	801c26e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c28c:	e061      	b.n	801c352 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c28e:	6a3b      	ldr	r3, [r7, #32]
 801c290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c294:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c296:	2310      	movs	r3, #16
 801c298:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801c29a:	e02d      	b.n	801c2f8 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c29c:	6a3b      	ldr	r3, [r7, #32]
 801c29e:	f043 0302 	orr.w	r3, r3, #2
 801c2a2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c2a4:	e025      	b.n	801c2f2 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	781b      	ldrb	r3, [r3, #0]
 801c2aa:	2b25      	cmp	r3, #37	; 0x25
 801c2ac:	d004      	beq.n	801c2b8 <tiny_vsnprintf_like+0x1d4>
 801c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2b0:	1c5a      	adds	r2, r3, #1
 801c2b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c2b4:	2225      	movs	r2, #37	; 0x25
 801c2b6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	1ad2      	subs	r2, r2, r3
 801c2be:	68bb      	ldr	r3, [r7, #8]
 801c2c0:	3b01      	subs	r3, #1
 801c2c2:	429a      	cmp	r2, r3
 801c2c4:	da17      	bge.n	801c2f6 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	781b      	ldrb	r3, [r3, #0]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d006      	beq.n	801c2dc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c2ce:	687a      	ldr	r2, [r7, #4]
 801c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2d2:	1c59      	adds	r1, r3, #1
 801c2d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c2d6:	7812      	ldrb	r2, [r2, #0]
 801c2d8:	701a      	strb	r2, [r3, #0]
 801c2da:	e002      	b.n	801c2e2 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	3b01      	subs	r3, #1
 801c2e0:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	1ad2      	subs	r2, r2, r3
 801c2e8:	68bb      	ldr	r3, [r7, #8]
 801c2ea:	3b01      	subs	r3, #1
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	db2f      	blt.n	801c350 <tiny_vsnprintf_like+0x26c>
 801c2f0:	e002      	b.n	801c2f8 <tiny_vsnprintf_like+0x214>
        break;
 801c2f2:	bf00      	nop
 801c2f4:	e000      	b.n	801c2f8 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801c2f6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	2b6c      	cmp	r3, #108	; 0x6c
 801c2fc:	d105      	bne.n	801c30a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	1d1a      	adds	r2, r3, #4
 801c302:	603a      	str	r2, [r7, #0]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	637b      	str	r3, [r7, #52]	; 0x34
 801c308:	e00f      	b.n	801c32a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801c30a:	6a3b      	ldr	r3, [r7, #32]
 801c30c:	f003 0302 	and.w	r3, r3, #2
 801c310:	2b00      	cmp	r3, #0
 801c312:	d005      	beq.n	801c320 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	1d1a      	adds	r2, r3, #4
 801c318:	603a      	str	r2, [r7, #0]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	637b      	str	r3, [r7, #52]	; 0x34
 801c31e:	e004      	b.n	801c32a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	1d1a      	adds	r2, r3, #4
 801c324:	603a      	str	r2, [r7, #0]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c32a:	68bb      	ldr	r3, [r7, #8]
 801c32c:	1e5a      	subs	r2, r3, #1
 801c32e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	1acb      	subs	r3, r1, r3
 801c334:	1ad1      	subs	r1, r2, r3
 801c336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c338:	6a3b      	ldr	r3, [r7, #32]
 801c33a:	9302      	str	r3, [sp, #8]
 801c33c:	69bb      	ldr	r3, [r7, #24]
 801c33e:	9301      	str	r3, [sp, #4]
 801c340:	69fb      	ldr	r3, [r7, #28]
 801c342:	9300      	str	r3, [sp, #0]
 801c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c348:	f7ff fdde 	bl	801bf08 <ee_number>
 801c34c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c34e:	e000      	b.n	801c352 <tiny_vsnprintf_like+0x26e>
        continue;
 801c350:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	3301      	adds	r3, #1
 801c356:	607b      	str	r3, [r7, #4]
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	781b      	ldrb	r3, [r3, #0]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	f47f aed0 	bne.w	801c102 <tiny_vsnprintf_like+0x1e>
 801c362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	1ad2      	subs	r2, r2, r3
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	3b01      	subs	r3, #1
 801c36c:	429a      	cmp	r2, r3
 801c36e:	f6bf aec8 	bge.w	801c102 <tiny_vsnprintf_like+0x1e>
 801c372:	e000      	b.n	801c376 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801c374:	bf00      	nop
  }

  *str = '\0';
 801c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c378:	2200      	movs	r2, #0
 801c37a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	1ad3      	subs	r3, r2, r3
}
 801c382:	4618      	mov	r0, r3
 801c384:	3738      	adds	r7, #56	; 0x38
 801c386:	46bd      	mov	sp, r7
 801c388:	bd80      	pop	{r7, pc}
 801c38a:	bf00      	nop
 801c38c:	08020220 	.word	0x08020220

0801c390 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b090      	sub	sp, #64	; 0x40
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c398:	4b73      	ldr	r3, [pc, #460]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c39e:	4b72      	ldr	r3, [pc, #456]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c3a0:	681a      	ldr	r2, [r3, #0]
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	4013      	ands	r3, r2
 801c3a6:	4a70      	ldr	r2, [pc, #448]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c3a8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c3aa:	4b70      	ldr	r3, [pc, #448]	; (801c56c <UTIL_SEQ_Run+0x1dc>)
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c3b0:	4b6f      	ldr	r3, [pc, #444]	; (801c570 <UTIL_SEQ_Run+0x1e0>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c3b6:	4b6f      	ldr	r3, [pc, #444]	; (801c574 <UTIL_SEQ_Run+0x1e4>)
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c3bc:	4b6e      	ldr	r3, [pc, #440]	; (801c578 <UTIL_SEQ_Run+0x1e8>)
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c3c2:	e08d      	b.n	801c4e0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c3c8:	e002      	b.n	801c3d0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3cc:	3301      	adds	r3, #1
 801c3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c3d0:	4a6a      	ldr	r2, [pc, #424]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c3d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3da:	401a      	ands	r2, r3
 801c3dc:	4b62      	ldr	r3, [pc, #392]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	4013      	ands	r3, r2
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d0f1      	beq.n	801c3ca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c3e6:	4a65      	ldr	r2, [pc, #404]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3f0:	401a      	ands	r2, r3
 801c3f2:	4b5d      	ldr	r3, [pc, #372]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	4013      	ands	r3, r2
 801c3f8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c3fa:	4a60      	ldr	r2, [pc, #384]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3fe:	00db      	lsls	r3, r3, #3
 801c400:	4413      	add	r3, r2
 801c402:	685a      	ldr	r2, [r3, #4]
 801c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c406:	4013      	ands	r3, r2
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d106      	bne.n	801c41a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c40c:	4a5b      	ldr	r2, [pc, #364]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c410:	00db      	lsls	r3, r3, #3
 801c412:	4413      	add	r3, r2
 801c414:	f04f 32ff 	mov.w	r2, #4294967295
 801c418:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c41a:	4a58      	ldr	r2, [pc, #352]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c41e:	00db      	lsls	r3, r3, #3
 801c420:	4413      	add	r3, r2
 801c422:	685a      	ldr	r2, [r3, #4]
 801c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c426:	4013      	ands	r3, r2
 801c428:	4618      	mov	r0, r3
 801c42a:	f000 f907 	bl	801c63c <SEQ_BitPosition>
 801c42e:	4603      	mov	r3, r0
 801c430:	461a      	mov	r2, r3
 801c432:	4b53      	ldr	r3, [pc, #332]	; (801c580 <UTIL_SEQ_Run+0x1f0>)
 801c434:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c436:	4a51      	ldr	r2, [pc, #324]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c43a:	00db      	lsls	r3, r3, #3
 801c43c:	4413      	add	r3, r2
 801c43e:	685a      	ldr	r2, [r3, #4]
 801c440:	4b4f      	ldr	r3, [pc, #316]	; (801c580 <UTIL_SEQ_Run+0x1f0>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	2101      	movs	r1, #1
 801c446:	fa01 f303 	lsl.w	r3, r1, r3
 801c44a:	43db      	mvns	r3, r3
 801c44c:	401a      	ands	r2, r3
 801c44e:	494b      	ldr	r1, [pc, #300]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	440b      	add	r3, r1
 801c456:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c458:	f3ef 8310 	mrs	r3, PRIMASK
 801c45c:	61bb      	str	r3, [r7, #24]
  return(result);
 801c45e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c462:	b672      	cpsid	i
}
 801c464:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c466:	4b46      	ldr	r3, [pc, #280]	; (801c580 <UTIL_SEQ_Run+0x1f0>)
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	2201      	movs	r2, #1
 801c46c:	fa02 f303 	lsl.w	r3, r2, r3
 801c470:	43da      	mvns	r2, r3
 801c472:	4b3e      	ldr	r3, [pc, #248]	; (801c56c <UTIL_SEQ_Run+0x1dc>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	4013      	ands	r3, r2
 801c478:	4a3c      	ldr	r2, [pc, #240]	; (801c56c <UTIL_SEQ_Run+0x1dc>)
 801c47a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c47c:	2301      	movs	r3, #1
 801c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c480:	e013      	b.n	801c4aa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c484:	3b01      	subs	r3, #1
 801c486:	4a3d      	ldr	r2, [pc, #244]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c488:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c48c:	4b3c      	ldr	r3, [pc, #240]	; (801c580 <UTIL_SEQ_Run+0x1f0>)
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	2201      	movs	r2, #1
 801c492:	fa02 f303 	lsl.w	r3, r2, r3
 801c496:	43da      	mvns	r2, r3
 801c498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c49a:	3b01      	subs	r3, #1
 801c49c:	400a      	ands	r2, r1
 801c49e:	4937      	ldr	r1, [pc, #220]	; (801c57c <UTIL_SEQ_Run+0x1ec>)
 801c4a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4a6:	3b01      	subs	r3, #1
 801c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d1e8      	bne.n	801c482 <UTIL_SEQ_Run+0xf2>
 801c4b0:	6a3b      	ldr	r3, [r7, #32]
 801c4b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4b4:	697b      	ldr	r3, [r7, #20]
 801c4b6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c4bc:	4b30      	ldr	r3, [pc, #192]	; (801c580 <UTIL_SEQ_Run+0x1f0>)
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	4a30      	ldr	r2, [pc, #192]	; (801c584 <UTIL_SEQ_Run+0x1f4>)
 801c4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c4c6:	4798      	blx	r3

    local_taskset = TaskSet;
 801c4c8:	4b28      	ldr	r3, [pc, #160]	; (801c56c <UTIL_SEQ_Run+0x1dc>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c4ce:	4b28      	ldr	r3, [pc, #160]	; (801c570 <UTIL_SEQ_Run+0x1e0>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c4d4:	4b27      	ldr	r3, [pc, #156]	; (801c574 <UTIL_SEQ_Run+0x1e4>)
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c4da:	4b27      	ldr	r3, [pc, #156]	; (801c578 <UTIL_SEQ_Run+0x1e8>)
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4e4:	401a      	ands	r2, r3
 801c4e6:	4b20      	ldr	r3, [pc, #128]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	4013      	ands	r3, r2
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d005      	beq.n	801c4fc <UTIL_SEQ_Run+0x16c>
 801c4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4f4:	4013      	ands	r3, r2
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	f43f af64 	beq.w	801c3c4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c4fc:	4b20      	ldr	r3, [pc, #128]	; (801c580 <UTIL_SEQ_Run+0x1f0>)
 801c4fe:	f04f 32ff 	mov.w	r2, #4294967295
 801c502:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c504:	f000 f88e 	bl	801c624 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c508:	f3ef 8310 	mrs	r3, PRIMASK
 801c50c:	613b      	str	r3, [r7, #16]
  return(result);
 801c50e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c512:	b672      	cpsid	i
}
 801c514:	bf00      	nop
  local_taskset = TaskSet;
 801c516:	4b15      	ldr	r3, [pc, #84]	; (801c56c <UTIL_SEQ_Run+0x1dc>)
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c51c:	4b14      	ldr	r3, [pc, #80]	; (801c570 <UTIL_SEQ_Run+0x1e0>)
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c522:	4b14      	ldr	r3, [pc, #80]	; (801c574 <UTIL_SEQ_Run+0x1e4>)
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c52c:	401a      	ands	r2, r3
 801c52e:	4b0e      	ldr	r3, [pc, #56]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	4013      	ands	r3, r2
 801c534:	2b00      	cmp	r3, #0
 801c536:	d107      	bne.n	801c548 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c538:	4b0f      	ldr	r3, [pc, #60]	; (801c578 <UTIL_SEQ_Run+0x1e8>)
 801c53a:	681a      	ldr	r2, [r3, #0]
 801c53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c53e:	4013      	ands	r3, r2
 801c540:	2b00      	cmp	r3, #0
 801c542:	d101      	bne.n	801c548 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c544:	f7e5 fd00 	bl	8001f48 <UTIL_SEQ_Idle>
 801c548:	69fb      	ldr	r3, [r7, #28]
 801c54a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	f383 8810 	msr	PRIMASK, r3
}
 801c552:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c554:	f000 f86c 	bl	801c630 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c558:	4a03      	ldr	r2, [pc, #12]	; (801c568 <UTIL_SEQ_Run+0x1d8>)
 801c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c55c:	6013      	str	r3, [r2, #0]

  return;
 801c55e:	bf00      	nop
}
 801c560:	3740      	adds	r7, #64	; 0x40
 801c562:	46bd      	mov	sp, r7
 801c564:	bd80      	pop	{r7, pc}
 801c566:	bf00      	nop
 801c568:	20000148 	.word	0x20000148
 801c56c:	20001f18 	.word	0x20001f18
 801c570:	20001f1c 	.word	0x20001f1c
 801c574:	20000144 	.word	0x20000144
 801c578:	20001f20 	.word	0x20001f20
 801c57c:	20001f3c 	.word	0x20001f3c
 801c580:	20001f24 	.word	0x20001f24
 801c584:	20001f28 	.word	0x20001f28

0801c588 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c588:	b580      	push	{r7, lr}
 801c58a:	b088      	sub	sp, #32
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	60f8      	str	r0, [r7, #12]
 801c590:	60b9      	str	r1, [r7, #8]
 801c592:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c594:	f3ef 8310 	mrs	r3, PRIMASK
 801c598:	617b      	str	r3, [r7, #20]
  return(result);
 801c59a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c59c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c59e:	b672      	cpsid	i
}
 801c5a0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c5a2:	68f8      	ldr	r0, [r7, #12]
 801c5a4:	f000 f84a 	bl	801c63c <SEQ_BitPosition>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	4619      	mov	r1, r3
 801c5ac:	4a06      	ldr	r2, [pc, #24]	; (801c5c8 <UTIL_SEQ_RegTask+0x40>)
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c5b4:	69fb      	ldr	r3, [r7, #28]
 801c5b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5b8:	69bb      	ldr	r3, [r7, #24]
 801c5ba:	f383 8810 	msr	PRIMASK, r3
}
 801c5be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c5c0:	bf00      	nop
}
 801c5c2:	3720      	adds	r7, #32
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bd80      	pop	{r7, pc}
 801c5c8:	20001f28 	.word	0x20001f28

0801c5cc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c5cc:	b480      	push	{r7}
 801c5ce:	b087      	sub	sp, #28
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
 801c5d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5d6:	f3ef 8310 	mrs	r3, PRIMASK
 801c5da:	60fb      	str	r3, [r7, #12]
  return(result);
 801c5dc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c5de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5e0:	b672      	cpsid	i
}
 801c5e2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c5e4:	4b0d      	ldr	r3, [pc, #52]	; (801c61c <UTIL_SEQ_SetTask+0x50>)
 801c5e6:	681a      	ldr	r2, [r3, #0]
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	4313      	orrs	r3, r2
 801c5ec:	4a0b      	ldr	r2, [pc, #44]	; (801c61c <UTIL_SEQ_SetTask+0x50>)
 801c5ee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c5f0:	4a0b      	ldr	r2, [pc, #44]	; (801c620 <UTIL_SEQ_SetTask+0x54>)
 801c5f2:	683b      	ldr	r3, [r7, #0]
 801c5f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	431a      	orrs	r2, r3
 801c5fc:	4908      	ldr	r1, [pc, #32]	; (801c620 <UTIL_SEQ_SetTask+0x54>)
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c604:	697b      	ldr	r3, [r7, #20]
 801c606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c608:	693b      	ldr	r3, [r7, #16]
 801c60a:	f383 8810 	msr	PRIMASK, r3
}
 801c60e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c610:	bf00      	nop
}
 801c612:	371c      	adds	r7, #28
 801c614:	46bd      	mov	sp, r7
 801c616:	bc80      	pop	{r7}
 801c618:	4770      	bx	lr
 801c61a:	bf00      	nop
 801c61c:	20001f18 	.word	0x20001f18
 801c620:	20001f3c 	.word	0x20001f3c

0801c624 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c624:	b480      	push	{r7}
 801c626:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c628:	bf00      	nop
}
 801c62a:	46bd      	mov	sp, r7
 801c62c:	bc80      	pop	{r7}
 801c62e:	4770      	bx	lr

0801c630 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c630:	b480      	push	{r7}
 801c632:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c634:	bf00      	nop
}
 801c636:	46bd      	mov	sp, r7
 801c638:	bc80      	pop	{r7}
 801c63a:	4770      	bx	lr

0801c63c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c63c:	b480      	push	{r7}
 801c63e:	b085      	sub	sp, #20
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c644:	2300      	movs	r3, #0
 801c646:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c64c:	68bb      	ldr	r3, [r7, #8]
 801c64e:	0c1b      	lsrs	r3, r3, #16
 801c650:	041b      	lsls	r3, r3, #16
 801c652:	2b00      	cmp	r3, #0
 801c654:	d104      	bne.n	801c660 <SEQ_BitPosition+0x24>
 801c656:	2310      	movs	r3, #16
 801c658:	73fb      	strb	r3, [r7, #15]
 801c65a:	68bb      	ldr	r3, [r7, #8]
 801c65c:	041b      	lsls	r3, r3, #16
 801c65e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c660:	68bb      	ldr	r3, [r7, #8]
 801c662:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c666:	2b00      	cmp	r3, #0
 801c668:	d105      	bne.n	801c676 <SEQ_BitPosition+0x3a>
 801c66a:	7bfb      	ldrb	r3, [r7, #15]
 801c66c:	3308      	adds	r3, #8
 801c66e:	73fb      	strb	r3, [r7, #15]
 801c670:	68bb      	ldr	r3, [r7, #8]
 801c672:	021b      	lsls	r3, r3, #8
 801c674:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c676:	68bb      	ldr	r3, [r7, #8]
 801c678:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d105      	bne.n	801c68c <SEQ_BitPosition+0x50>
 801c680:	7bfb      	ldrb	r3, [r7, #15]
 801c682:	3304      	adds	r3, #4
 801c684:	73fb      	strb	r3, [r7, #15]
 801c686:	68bb      	ldr	r3, [r7, #8]
 801c688:	011b      	lsls	r3, r3, #4
 801c68a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c68c:	68bb      	ldr	r3, [r7, #8]
 801c68e:	0f1b      	lsrs	r3, r3, #28
 801c690:	4a06      	ldr	r2, [pc, #24]	; (801c6ac <SEQ_BitPosition+0x70>)
 801c692:	5cd2      	ldrb	r2, [r2, r3]
 801c694:	7bfb      	ldrb	r3, [r7, #15]
 801c696:	4413      	add	r3, r2
 801c698:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c69a:	7bfb      	ldrb	r3, [r7, #15]
 801c69c:	f1c3 031f 	rsb	r3, r3, #31
 801c6a0:	b2db      	uxtb	r3, r3
}
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	3714      	adds	r7, #20
 801c6a6:	46bd      	mov	sp, r7
 801c6a8:	bc80      	pop	{r7}
 801c6aa:	4770      	bx	lr
 801c6ac:	080207d8 	.word	0x080207d8

0801c6b0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c6b4:	4b04      	ldr	r3, [pc, #16]	; (801c6c8 <UTIL_TIMER_Init+0x18>)
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c6ba:	4b04      	ldr	r3, [pc, #16]	; (801c6cc <UTIL_TIMER_Init+0x1c>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	4798      	blx	r3
 801c6c0:	4603      	mov	r3, r0
}
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	bd80      	pop	{r7, pc}
 801c6c6:	bf00      	nop
 801c6c8:	20001f44 	.word	0x20001f44
 801c6cc:	080202e0 	.word	0x080202e0

0801c6d0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	b084      	sub	sp, #16
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	60f8      	str	r0, [r7, #12]
 801c6d8:	60b9      	str	r1, [r7, #8]
 801c6da:	603b      	str	r3, [r7, #0]
 801c6dc:	4613      	mov	r3, r2
 801c6de:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d023      	beq.n	801c72e <UTIL_TIMER_Create+0x5e>
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d020      	beq.n	801c72e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c6f2:	4b11      	ldr	r3, [pc, #68]	; (801c738 <UTIL_TIMER_Create+0x68>)
 801c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6f6:	68b8      	ldr	r0, [r7, #8]
 801c6f8:	4798      	blx	r3
 801c6fa:	4602      	mov	r2, r0
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	2200      	movs	r2, #0
 801c704:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	2200      	movs	r2, #0
 801c70a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	2200      	movs	r2, #0
 801c710:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	683a      	ldr	r2, [r7, #0]
 801c716:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	69ba      	ldr	r2, [r7, #24]
 801c71c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	79fa      	ldrb	r2, [r7, #7]
 801c722:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	2200      	movs	r2, #0
 801c728:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c72a:	2300      	movs	r3, #0
 801c72c:	e000      	b.n	801c730 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c72e:	2301      	movs	r3, #1
  }
}
 801c730:	4618      	mov	r0, r3
 801c732:	3710      	adds	r7, #16
 801c734:	46bd      	mov	sp, r7
 801c736:	bd80      	pop	{r7, pc}
 801c738:	080202e0 	.word	0x080202e0

0801c73c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b08a      	sub	sp, #40	; 0x28
 801c740:	af00      	add	r7, sp, #0
 801c742:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c744:	2300      	movs	r3, #0
 801c746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d056      	beq.n	801c7fe <UTIL_TIMER_Start+0xc2>
 801c750:	6878      	ldr	r0, [r7, #4]
 801c752:	f000 f9a9 	bl	801caa8 <TimerExists>
 801c756:	4603      	mov	r3, r0
 801c758:	f083 0301 	eor.w	r3, r3, #1
 801c75c:	b2db      	uxtb	r3, r3
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d04d      	beq.n	801c7fe <UTIL_TIMER_Start+0xc2>
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	7a5b      	ldrb	r3, [r3, #9]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d149      	bne.n	801c7fe <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c76a:	f3ef 8310 	mrs	r3, PRIMASK
 801c76e:	613b      	str	r3, [r7, #16]
  return(result);
 801c770:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c774:	b672      	cpsid	i
}
 801c776:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	685b      	ldr	r3, [r3, #4]
 801c77c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c77e:	4b24      	ldr	r3, [pc, #144]	; (801c810 <UTIL_TIMER_Start+0xd4>)
 801c780:	6a1b      	ldr	r3, [r3, #32]
 801c782:	4798      	blx	r3
 801c784:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c786:	6a3a      	ldr	r2, [r7, #32]
 801c788:	69bb      	ldr	r3, [r7, #24]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d201      	bcs.n	801c792 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c78e:	69bb      	ldr	r3, [r7, #24]
 801c790:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	6a3a      	ldr	r2, [r7, #32]
 801c796:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	2200      	movs	r2, #0
 801c79c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	2201      	movs	r2, #1
 801c7a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c7aa:	4b1a      	ldr	r3, [pc, #104]	; (801c814 <UTIL_TIMER_Start+0xd8>)
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d106      	bne.n	801c7c0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c7b2:	4b17      	ldr	r3, [pc, #92]	; (801c810 <UTIL_TIMER_Start+0xd4>)
 801c7b4:	691b      	ldr	r3, [r3, #16]
 801c7b6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c7b8:	6878      	ldr	r0, [r7, #4]
 801c7ba:	f000 f9eb 	bl	801cb94 <TimerInsertNewHeadTimer>
 801c7be:	e017      	b.n	801c7f0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c7c0:	4b13      	ldr	r3, [pc, #76]	; (801c810 <UTIL_TIMER_Start+0xd4>)
 801c7c2:	699b      	ldr	r3, [r3, #24]
 801c7c4:	4798      	blx	r3
 801c7c6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	681a      	ldr	r2, [r3, #0]
 801c7cc:	697b      	ldr	r3, [r7, #20]
 801c7ce:	441a      	add	r2, r3
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	681a      	ldr	r2, [r3, #0]
 801c7d8:	4b0e      	ldr	r3, [pc, #56]	; (801c814 <UTIL_TIMER_Start+0xd8>)
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	429a      	cmp	r2, r3
 801c7e0:	d203      	bcs.n	801c7ea <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c7e2:	6878      	ldr	r0, [r7, #4]
 801c7e4:	f000 f9d6 	bl	801cb94 <TimerInsertNewHeadTimer>
 801c7e8:	e002      	b.n	801c7f0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c7ea:	6878      	ldr	r0, [r7, #4]
 801c7ec:	f000 f9a2 	bl	801cb34 <TimerInsertTimer>
 801c7f0:	69fb      	ldr	r3, [r7, #28]
 801c7f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	f383 8810 	msr	PRIMASK, r3
}
 801c7fa:	bf00      	nop
  {
 801c7fc:	e002      	b.n	801c804 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c7fe:	2301      	movs	r3, #1
 801c800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c808:	4618      	mov	r0, r3
 801c80a:	3728      	adds	r7, #40	; 0x28
 801c80c:	46bd      	mov	sp, r7
 801c80e:	bd80      	pop	{r7, pc}
 801c810:	080202e0 	.word	0x080202e0
 801c814:	20001f44 	.word	0x20001f44

0801c818 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b088      	sub	sp, #32
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c820:	2300      	movs	r3, #0
 801c822:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d05b      	beq.n	801c8e2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c82a:	f3ef 8310 	mrs	r3, PRIMASK
 801c82e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c830:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c834:	b672      	cpsid	i
}
 801c836:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c838:	4b2d      	ldr	r3, [pc, #180]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c83e:	4b2c      	ldr	r3, [pc, #176]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	2201      	movs	r2, #1
 801c848:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c84a:	4b29      	ldr	r3, [pc, #164]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d041      	beq.n	801c8d6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	2200      	movs	r2, #0
 801c856:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c858:	4b25      	ldr	r3, [pc, #148]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	687a      	ldr	r2, [r7, #4]
 801c85e:	429a      	cmp	r2, r3
 801c860:	d134      	bne.n	801c8cc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c862:	4b23      	ldr	r3, [pc, #140]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	2200      	movs	r2, #0
 801c868:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c86a:	4b21      	ldr	r3, [pc, #132]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	695b      	ldr	r3, [r3, #20]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d00a      	beq.n	801c88a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c874:	4b1e      	ldr	r3, [pc, #120]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	695b      	ldr	r3, [r3, #20]
 801c87a:	4a1d      	ldr	r2, [pc, #116]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c87c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c87e:	4b1c      	ldr	r3, [pc, #112]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	4618      	mov	r0, r3
 801c884:	f000 f92c 	bl	801cae0 <TimerSetTimeout>
 801c888:	e023      	b.n	801c8d2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c88a:	4b1a      	ldr	r3, [pc, #104]	; (801c8f4 <UTIL_TIMER_Stop+0xdc>)
 801c88c:	68db      	ldr	r3, [r3, #12]
 801c88e:	4798      	blx	r3
            TimerListHead = NULL;
 801c890:	4b17      	ldr	r3, [pc, #92]	; (801c8f0 <UTIL_TIMER_Stop+0xd8>)
 801c892:	2200      	movs	r2, #0
 801c894:	601a      	str	r2, [r3, #0]
 801c896:	e01c      	b.n	801c8d2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c898:	697a      	ldr	r2, [r7, #20]
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d110      	bne.n	801c8c2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c8a0:	697b      	ldr	r3, [r7, #20]
 801c8a2:	695b      	ldr	r3, [r3, #20]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d006      	beq.n	801c8b6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c8a8:	697b      	ldr	r3, [r7, #20]
 801c8aa:	695b      	ldr	r3, [r3, #20]
 801c8ac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c8ae:	69bb      	ldr	r3, [r7, #24]
 801c8b0:	697a      	ldr	r2, [r7, #20]
 801c8b2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c8b4:	e00d      	b.n	801c8d2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c8b6:	2300      	movs	r3, #0
 801c8b8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c8ba:	69bb      	ldr	r3, [r7, #24]
 801c8bc:	697a      	ldr	r2, [r7, #20]
 801c8be:	615a      	str	r2, [r3, #20]
            break;
 801c8c0:	e007      	b.n	801c8d2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c8c2:	697b      	ldr	r3, [r7, #20]
 801c8c4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c8c6:	697b      	ldr	r3, [r7, #20]
 801c8c8:	695b      	ldr	r3, [r3, #20]
 801c8ca:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d1e2      	bne.n	801c898 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	77fb      	strb	r3, [r7, #31]
 801c8d6:	693b      	ldr	r3, [r7, #16]
 801c8d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8da:	68bb      	ldr	r3, [r7, #8]
 801c8dc:	f383 8810 	msr	PRIMASK, r3
}
 801c8e0:	e001      	b.n	801c8e6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c8e2:	2301      	movs	r3, #1
 801c8e4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c8e6:	7ffb      	ldrb	r3, [r7, #31]
}
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	3720      	adds	r7, #32
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	bd80      	pop	{r7, pc}
 801c8f0:	20001f44 	.word	0x20001f44
 801c8f4:	080202e0 	.word	0x080202e0

0801c8f8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c8f8:	b580      	push	{r7, lr}
 801c8fa:	b084      	sub	sp, #16
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	6078      	str	r0, [r7, #4]
 801c900:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c902:	2300      	movs	r3, #0
 801c904:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d102      	bne.n	801c912 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c90c:	2301      	movs	r3, #1
 801c90e:	73fb      	strb	r3, [r7, #15]
 801c910:	e014      	b.n	801c93c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c912:	4b0d      	ldr	r3, [pc, #52]	; (801c948 <UTIL_TIMER_SetPeriod+0x50>)
 801c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c916:	6838      	ldr	r0, [r7, #0]
 801c918:	4798      	blx	r3
 801c91a:	4602      	mov	r2, r0
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c920:	6878      	ldr	r0, [r7, #4]
 801c922:	f000 f8c1 	bl	801caa8 <TimerExists>
 801c926:	4603      	mov	r3, r0
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d007      	beq.n	801c93c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c92c:	6878      	ldr	r0, [r7, #4]
 801c92e:	f7ff ff73 	bl	801c818 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c932:	6878      	ldr	r0, [r7, #4]
 801c934:	f7ff ff02 	bl	801c73c <UTIL_TIMER_Start>
 801c938:	4603      	mov	r3, r0
 801c93a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c93c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c93e:	4618      	mov	r0, r3
 801c940:	3710      	adds	r7, #16
 801c942:	46bd      	mov	sp, r7
 801c944:	bd80      	pop	{r7, pc}
 801c946:	bf00      	nop
 801c948:	080202e0 	.word	0x080202e0

0801c94c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c94c:	b590      	push	{r4, r7, lr}
 801c94e:	b089      	sub	sp, #36	; 0x24
 801c950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c952:	f3ef 8310 	mrs	r3, PRIMASK
 801c956:	60bb      	str	r3, [r7, #8]
  return(result);
 801c958:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c95a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c95c:	b672      	cpsid	i
}
 801c95e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c960:	4b38      	ldr	r3, [pc, #224]	; (801ca44 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c962:	695b      	ldr	r3, [r3, #20]
 801c964:	4798      	blx	r3
 801c966:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c968:	4b36      	ldr	r3, [pc, #216]	; (801ca44 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c96a:	691b      	ldr	r3, [r3, #16]
 801c96c:	4798      	blx	r3
 801c96e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c970:	693a      	ldr	r2, [r7, #16]
 801c972:	697b      	ldr	r3, [r7, #20]
 801c974:	1ad3      	subs	r3, r2, r3
 801c976:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c978:	4b33      	ldr	r3, [pc, #204]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d037      	beq.n	801c9f0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c980:	4b31      	ldr	r3, [pc, #196]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c986:	69fb      	ldr	r3, [r7, #28]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	68fa      	ldr	r2, [r7, #12]
 801c98c:	429a      	cmp	r2, r3
 801c98e:	d206      	bcs.n	801c99e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c990:	69fb      	ldr	r3, [r7, #28]
 801c992:	681a      	ldr	r2, [r3, #0]
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	1ad2      	subs	r2, r2, r3
 801c998:	69fb      	ldr	r3, [r7, #28]
 801c99a:	601a      	str	r2, [r3, #0]
 801c99c:	e002      	b.n	801c9a4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c99e:	69fb      	ldr	r3, [r7, #28]
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c9a4:	69fb      	ldr	r3, [r7, #28]
 801c9a6:	695b      	ldr	r3, [r3, #20]
 801c9a8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c9aa:	69fb      	ldr	r3, [r7, #28]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d1ea      	bne.n	801c986 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c9b0:	e01e      	b.n	801c9f0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c9b2:	4b25      	ldr	r3, [pc, #148]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c9b8:	4b23      	ldr	r3, [pc, #140]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	695b      	ldr	r3, [r3, #20]
 801c9be:	4a22      	ldr	r2, [pc, #136]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9c0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c9c2:	69fb      	ldr	r3, [r7, #28]
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c9ce:	69fb      	ldr	r3, [r7, #28]
 801c9d0:	68db      	ldr	r3, [r3, #12]
 801c9d2:	69fa      	ldr	r2, [r7, #28]
 801c9d4:	6912      	ldr	r2, [r2, #16]
 801c9d6:	4610      	mov	r0, r2
 801c9d8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c9da:	69fb      	ldr	r3, [r7, #28]
 801c9dc:	7adb      	ldrb	r3, [r3, #11]
 801c9de:	2b01      	cmp	r3, #1
 801c9e0:	d106      	bne.n	801c9f0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c9e2:	69fb      	ldr	r3, [r7, #28]
 801c9e4:	7a9b      	ldrb	r3, [r3, #10]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d102      	bne.n	801c9f0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c9ea:	69f8      	ldr	r0, [r7, #28]
 801c9ec:	f7ff fea6 	bl	801c73c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c9f0:	4b15      	ldr	r3, [pc, #84]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d00d      	beq.n	801ca14 <UTIL_TIMER_IRQ_Handler+0xc8>
 801c9f8:	4b13      	ldr	r3, [pc, #76]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d0d7      	beq.n	801c9b2 <UTIL_TIMER_IRQ_Handler+0x66>
 801ca02:	4b11      	ldr	r3, [pc, #68]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	681c      	ldr	r4, [r3, #0]
 801ca08:	4b0e      	ldr	r3, [pc, #56]	; (801ca44 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca0a:	699b      	ldr	r3, [r3, #24]
 801ca0c:	4798      	blx	r3
 801ca0e:	4603      	mov	r3, r0
 801ca10:	429c      	cmp	r4, r3
 801ca12:	d3ce      	bcc.n	801c9b2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ca14:	4b0c      	ldr	r3, [pc, #48]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d009      	beq.n	801ca30 <UTIL_TIMER_IRQ_Handler+0xe4>
 801ca1c:	4b0a      	ldr	r3, [pc, #40]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	7a1b      	ldrb	r3, [r3, #8]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d104      	bne.n	801ca30 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ca26:	4b08      	ldr	r3, [pc, #32]	; (801ca48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	f000 f858 	bl	801cae0 <TimerSetTimeout>
 801ca30:	69bb      	ldr	r3, [r7, #24]
 801ca32:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	f383 8810 	msr	PRIMASK, r3
}
 801ca3a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ca3c:	bf00      	nop
 801ca3e:	3724      	adds	r7, #36	; 0x24
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd90      	pop	{r4, r7, pc}
 801ca44:	080202e0 	.word	0x080202e0
 801ca48:	20001f44 	.word	0x20001f44

0801ca4c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b082      	sub	sp, #8
 801ca50:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ca52:	4b06      	ldr	r3, [pc, #24]	; (801ca6c <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca54:	69db      	ldr	r3, [r3, #28]
 801ca56:	4798      	blx	r3
 801ca58:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ca5a:	4b04      	ldr	r3, [pc, #16]	; (801ca6c <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca5e:	6878      	ldr	r0, [r7, #4]
 801ca60:	4798      	blx	r3
 801ca62:	4603      	mov	r3, r0
}
 801ca64:	4618      	mov	r0, r3
 801ca66:	3708      	adds	r7, #8
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd80      	pop	{r7, pc}
 801ca6c:	080202e0 	.word	0x080202e0

0801ca70 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b084      	sub	sp, #16
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ca78:	4b0a      	ldr	r3, [pc, #40]	; (801caa4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca7a:	69db      	ldr	r3, [r3, #28]
 801ca7c:	4798      	blx	r3
 801ca7e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ca80:	4b08      	ldr	r3, [pc, #32]	; (801caa4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca84:	6878      	ldr	r0, [r7, #4]
 801ca86:	4798      	blx	r3
 801ca88:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ca8a:	4b06      	ldr	r3, [pc, #24]	; (801caa4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca8e:	68f9      	ldr	r1, [r7, #12]
 801ca90:	68ba      	ldr	r2, [r7, #8]
 801ca92:	1a8a      	subs	r2, r1, r2
 801ca94:	4610      	mov	r0, r2
 801ca96:	4798      	blx	r3
 801ca98:	4603      	mov	r3, r0
}
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	3710      	adds	r7, #16
 801ca9e:	46bd      	mov	sp, r7
 801caa0:	bd80      	pop	{r7, pc}
 801caa2:	bf00      	nop
 801caa4:	080202e0 	.word	0x080202e0

0801caa8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801caa8:	b480      	push	{r7}
 801caaa:	b085      	sub	sp, #20
 801caac:	af00      	add	r7, sp, #0
 801caae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cab0:	4b0a      	ldr	r3, [pc, #40]	; (801cadc <TimerExists+0x34>)
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cab6:	e008      	b.n	801caca <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cab8:	68fa      	ldr	r2, [r7, #12]
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	429a      	cmp	r2, r3
 801cabe:	d101      	bne.n	801cac4 <TimerExists+0x1c>
    {
      return true;
 801cac0:	2301      	movs	r3, #1
 801cac2:	e006      	b.n	801cad2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	695b      	ldr	r3, [r3, #20]
 801cac8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d1f3      	bne.n	801cab8 <TimerExists+0x10>
  }
  return false;
 801cad0:	2300      	movs	r3, #0
}
 801cad2:	4618      	mov	r0, r3
 801cad4:	3714      	adds	r7, #20
 801cad6:	46bd      	mov	sp, r7
 801cad8:	bc80      	pop	{r7}
 801cada:	4770      	bx	lr
 801cadc:	20001f44 	.word	0x20001f44

0801cae0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cae0:	b590      	push	{r4, r7, lr}
 801cae2:	b085      	sub	sp, #20
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cae8:	4b11      	ldr	r3, [pc, #68]	; (801cb30 <TimerSetTimeout+0x50>)
 801caea:	6a1b      	ldr	r3, [r3, #32]
 801caec:	4798      	blx	r3
 801caee:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	2201      	movs	r2, #1
 801caf4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681c      	ldr	r4, [r3, #0]
 801cafa:	4b0d      	ldr	r3, [pc, #52]	; (801cb30 <TimerSetTimeout+0x50>)
 801cafc:	699b      	ldr	r3, [r3, #24]
 801cafe:	4798      	blx	r3
 801cb00:	4602      	mov	r2, r0
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	4413      	add	r3, r2
 801cb06:	429c      	cmp	r4, r3
 801cb08:	d207      	bcs.n	801cb1a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cb0a:	4b09      	ldr	r3, [pc, #36]	; (801cb30 <TimerSetTimeout+0x50>)
 801cb0c:	699b      	ldr	r3, [r3, #24]
 801cb0e:	4798      	blx	r3
 801cb10:	4602      	mov	r2, r0
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	441a      	add	r2, r3
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cb1a:	4b05      	ldr	r3, [pc, #20]	; (801cb30 <TimerSetTimeout+0x50>)
 801cb1c:	689b      	ldr	r3, [r3, #8]
 801cb1e:	687a      	ldr	r2, [r7, #4]
 801cb20:	6812      	ldr	r2, [r2, #0]
 801cb22:	4610      	mov	r0, r2
 801cb24:	4798      	blx	r3
}
 801cb26:	bf00      	nop
 801cb28:	3714      	adds	r7, #20
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	bd90      	pop	{r4, r7, pc}
 801cb2e:	bf00      	nop
 801cb30:	080202e0 	.word	0x080202e0

0801cb34 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cb34:	b480      	push	{r7}
 801cb36:	b085      	sub	sp, #20
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cb3c:	4b14      	ldr	r3, [pc, #80]	; (801cb90 <TimerInsertTimer+0x5c>)
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cb42:	4b13      	ldr	r3, [pc, #76]	; (801cb90 <TimerInsertTimer+0x5c>)
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	695b      	ldr	r3, [r3, #20]
 801cb48:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cb4a:	e012      	b.n	801cb72 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681a      	ldr	r2, [r3, #0]
 801cb50:	68bb      	ldr	r3, [r7, #8]
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	429a      	cmp	r2, r3
 801cb56:	d905      	bls.n	801cb64 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cb58:	68bb      	ldr	r3, [r7, #8]
 801cb5a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cb5c:	68bb      	ldr	r3, [r7, #8]
 801cb5e:	695b      	ldr	r3, [r3, #20]
 801cb60:	60bb      	str	r3, [r7, #8]
 801cb62:	e006      	b.n	801cb72 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	687a      	ldr	r2, [r7, #4]
 801cb68:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	68ba      	ldr	r2, [r7, #8]
 801cb6e:	615a      	str	r2, [r3, #20]
        return;
 801cb70:	e009      	b.n	801cb86 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	695b      	ldr	r3, [r3, #20]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d1e8      	bne.n	801cb4c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	687a      	ldr	r2, [r7, #4]
 801cb7e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2200      	movs	r2, #0
 801cb84:	615a      	str	r2, [r3, #20]
}
 801cb86:	3714      	adds	r7, #20
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	bc80      	pop	{r7}
 801cb8c:	4770      	bx	lr
 801cb8e:	bf00      	nop
 801cb90:	20001f44 	.word	0x20001f44

0801cb94 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b084      	sub	sp, #16
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cb9c:	4b0b      	ldr	r3, [pc, #44]	; (801cbcc <TimerInsertNewHeadTimer+0x38>)
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d002      	beq.n	801cbae <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	2200      	movs	r2, #0
 801cbac:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	68fa      	ldr	r2, [r7, #12]
 801cbb2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801cbb4:	4a05      	ldr	r2, [pc, #20]	; (801cbcc <TimerInsertNewHeadTimer+0x38>)
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801cbba:	4b04      	ldr	r3, [pc, #16]	; (801cbcc <TimerInsertNewHeadTimer+0x38>)
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	f7ff ff8e 	bl	801cae0 <TimerSetTimeout>
}
 801cbc4:	bf00      	nop
 801cbc6:	3710      	adds	r7, #16
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	bd80      	pop	{r7, pc}
 801cbcc:	20001f44 	.word	0x20001f44

0801cbd0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801cbd4:	2218      	movs	r2, #24
 801cbd6:	2100      	movs	r1, #0
 801cbd8:	4807      	ldr	r0, [pc, #28]	; (801cbf8 <UTIL_ADV_TRACE_Init+0x28>)
 801cbda:	f7fe fff6 	bl	801bbca <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801cbde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cbe2:	2100      	movs	r1, #0
 801cbe4:	4805      	ldr	r0, [pc, #20]	; (801cbfc <UTIL_ADV_TRACE_Init+0x2c>)
 801cbe6:	f7fe fff0 	bl	801bbca <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801cbea:	4b05      	ldr	r3, [pc, #20]	; (801cc00 <UTIL_ADV_TRACE_Init+0x30>)
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	4805      	ldr	r0, [pc, #20]	; (801cc04 <UTIL_ADV_TRACE_Init+0x34>)
 801cbf0:	4798      	blx	r3
 801cbf2:	4603      	mov	r3, r0
}
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	bd80      	pop	{r7, pc}
 801cbf8:	20001f48 	.word	0x20001f48
 801cbfc:	20001f60 	.word	0x20001f60
 801cc00:	08020320 	.word	0x08020320
 801cc04:	0801ce71 	.word	0x0801ce71

0801cc08 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801cc08:	b480      	push	{r7}
 801cc0a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cc0c:	4b06      	ldr	r3, [pc, #24]	; (801cc28 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cc0e:	8a5a      	ldrh	r2, [r3, #18]
 801cc10:	4b05      	ldr	r3, [pc, #20]	; (801cc28 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cc12:	8a1b      	ldrh	r3, [r3, #16]
 801cc14:	429a      	cmp	r2, r3
 801cc16:	d101      	bne.n	801cc1c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801cc18:	2301      	movs	r3, #1
 801cc1a:	e000      	b.n	801cc1e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801cc1c:	2300      	movs	r3, #0
}
 801cc1e:	4618      	mov	r0, r3
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bc80      	pop	{r7}
 801cc24:	4770      	bx	lr
 801cc26:	bf00      	nop
 801cc28:	20001f48 	.word	0x20001f48

0801cc2c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801cc2c:	b408      	push	{r3}
 801cc2e:	b580      	push	{r7, lr}
 801cc30:	b08d      	sub	sp, #52	; 0x34
 801cc32:	af00      	add	r7, sp, #0
 801cc34:	60f8      	str	r0, [r7, #12]
 801cc36:	60b9      	str	r1, [r7, #8]
 801cc38:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801cc3e:	2300      	movs	r3, #0
 801cc40:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801cc42:	4b37      	ldr	r3, [pc, #220]	; (801cd20 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc44:	7a1b      	ldrb	r3, [r3, #8]
 801cc46:	461a      	mov	r2, r3
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	4293      	cmp	r3, r2
 801cc4c:	d902      	bls.n	801cc54 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801cc4e:	f06f 0304 	mvn.w	r3, #4
 801cc52:	e05e      	b.n	801cd12 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801cc54:	4b32      	ldr	r3, [pc, #200]	; (801cd20 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc56:	68da      	ldr	r2, [r3, #12]
 801cc58:	68bb      	ldr	r3, [r7, #8]
 801cc5a:	4013      	ands	r3, r2
 801cc5c:	68ba      	ldr	r2, [r7, #8]
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d002      	beq.n	801cc68 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801cc62:	f06f 0305 	mvn.w	r3, #5
 801cc66:	e054      	b.n	801cd12 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801cc68:	4b2d      	ldr	r3, [pc, #180]	; (801cd20 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc6a:	685b      	ldr	r3, [r3, #4]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d00a      	beq.n	801cc86 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d007      	beq.n	801cc86 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801cc76:	4b2a      	ldr	r3, [pc, #168]	; (801cd20 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc78:	685b      	ldr	r3, [r3, #4]
 801cc7a:	f107 0116 	add.w	r1, r7, #22
 801cc7e:	f107 0218 	add.w	r2, r7, #24
 801cc82:	4610      	mov	r0, r2
 801cc84:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801cc86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cc8a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cc90:	f44f 7100 	mov.w	r1, #512	; 0x200
 801cc94:	4823      	ldr	r0, [pc, #140]	; (801cd24 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801cc96:	f7ff fa25 	bl	801c0e4 <tiny_vsnprintf_like>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801cc9e:	f000 f9f1 	bl	801d084 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801cca2:	8afa      	ldrh	r2, [r7, #22]
 801cca4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cca6:	4413      	add	r3, r2
 801cca8:	b29b      	uxth	r3, r3
 801ccaa:	f107 0214 	add.w	r2, r7, #20
 801ccae:	4611      	mov	r1, r2
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f000 f969 	bl	801cf88 <TRACE_AllocateBufer>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ccbc:	d025      	beq.n	801cd0a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ccc2:	e00e      	b.n	801cce2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ccc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ccc6:	8aba      	ldrh	r2, [r7, #20]
 801ccc8:	3330      	adds	r3, #48	; 0x30
 801ccca:	443b      	add	r3, r7
 801cccc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ccd0:	4b15      	ldr	r3, [pc, #84]	; (801cd28 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ccd2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ccd4:	8abb      	ldrh	r3, [r7, #20]
 801ccd6:	3301      	adds	r3, #1
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ccdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ccde:	3301      	adds	r3, #1
 801cce0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801cce2:	8afb      	ldrh	r3, [r7, #22]
 801cce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cce6:	429a      	cmp	r2, r3
 801cce8:	d3ec      	bcc.n	801ccc4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ccea:	8abb      	ldrh	r3, [r7, #20]
 801ccec:	461a      	mov	r2, r3
 801ccee:	4b0e      	ldr	r3, [pc, #56]	; (801cd28 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ccf0:	18d0      	adds	r0, r2, r3
 801ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ccf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ccfa:	f7ff f9f3 	bl	801c0e4 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ccfe:	f000 f9df 	bl	801d0c0 <TRACE_UnLock>

    return TRACE_Send();
 801cd02:	f000 f831 	bl	801cd68 <TRACE_Send>
 801cd06:	4603      	mov	r3, r0
 801cd08:	e003      	b.n	801cd12 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801cd0a:	f000 f9d9 	bl	801d0c0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801cd0e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801cd12:	4618      	mov	r0, r3
 801cd14:	3734      	adds	r7, #52	; 0x34
 801cd16:	46bd      	mov	sp, r7
 801cd18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cd1c:	b001      	add	sp, #4
 801cd1e:	4770      	bx	lr
 801cd20:	20001f48 	.word	0x20001f48
 801cd24:	20002360 	.word	0x20002360
 801cd28:	20001f60 	.word	0x20001f60

0801cd2c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801cd2c:	b480      	push	{r7}
 801cd2e:	b083      	sub	sp, #12
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cd34:	4a03      	ldr	r2, [pc, #12]	; (801cd44 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	6053      	str	r3, [r2, #4]
}
 801cd3a:	bf00      	nop
 801cd3c:	370c      	adds	r7, #12
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bc80      	pop	{r7}
 801cd42:	4770      	bx	lr
 801cd44:	20001f48 	.word	0x20001f48

0801cd48 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801cd48:	b480      	push	{r7}
 801cd4a:	b083      	sub	sp, #12
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	4603      	mov	r3, r0
 801cd50:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801cd52:	4a04      	ldr	r2, [pc, #16]	; (801cd64 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cd54:	79fb      	ldrb	r3, [r7, #7]
 801cd56:	7213      	strb	r3, [r2, #8]
}
 801cd58:	bf00      	nop
 801cd5a:	370c      	adds	r7, #12
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bc80      	pop	{r7}
 801cd60:	4770      	bx	lr
 801cd62:	bf00      	nop
 801cd64:	20001f48 	.word	0x20001f48

0801cd68 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	b088      	sub	sp, #32
 801cd6c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cd72:	2300      	movs	r3, #0
 801cd74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd76:	f3ef 8310 	mrs	r3, PRIMASK
 801cd7a:	613b      	str	r3, [r7, #16]
  return(result);
 801cd7c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cd7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd80:	b672      	cpsid	i
}
 801cd82:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cd84:	f000 f9ba 	bl	801d0fc <TRACE_IsLocked>
 801cd88:	4603      	mov	r3, r0
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d15d      	bne.n	801ce4a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801cd8e:	f000 f979 	bl	801d084 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801cd92:	4b34      	ldr	r3, [pc, #208]	; (801ce64 <TRACE_Send+0xfc>)
 801cd94:	8a1a      	ldrh	r2, [r3, #16]
 801cd96:	4b33      	ldr	r3, [pc, #204]	; (801ce64 <TRACE_Send+0xfc>)
 801cd98:	8a5b      	ldrh	r3, [r3, #18]
 801cd9a:	429a      	cmp	r2, r3
 801cd9c:	d04d      	beq.n	801ce3a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cd9e:	4b31      	ldr	r3, [pc, #196]	; (801ce64 <TRACE_Send+0xfc>)
 801cda0:	789b      	ldrb	r3, [r3, #2]
 801cda2:	2b01      	cmp	r3, #1
 801cda4:	d117      	bne.n	801cdd6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cda6:	4b2f      	ldr	r3, [pc, #188]	; (801ce64 <TRACE_Send+0xfc>)
 801cda8:	881a      	ldrh	r2, [r3, #0]
 801cdaa:	4b2e      	ldr	r3, [pc, #184]	; (801ce64 <TRACE_Send+0xfc>)
 801cdac:	8a1b      	ldrh	r3, [r3, #16]
 801cdae:	1ad3      	subs	r3, r2, r3
 801cdb0:	b29a      	uxth	r2, r3
 801cdb2:	4b2c      	ldr	r3, [pc, #176]	; (801ce64 <TRACE_Send+0xfc>)
 801cdb4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cdb6:	4b2b      	ldr	r3, [pc, #172]	; (801ce64 <TRACE_Send+0xfc>)
 801cdb8:	2202      	movs	r2, #2
 801cdba:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cdbc:	4b29      	ldr	r3, [pc, #164]	; (801ce64 <TRACE_Send+0xfc>)
 801cdbe:	2200      	movs	r2, #0
 801cdc0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cdc2:	4b28      	ldr	r3, [pc, #160]	; (801ce64 <TRACE_Send+0xfc>)
 801cdc4:	8a9b      	ldrh	r3, [r3, #20]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d105      	bne.n	801cdd6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cdca:	4b26      	ldr	r3, [pc, #152]	; (801ce64 <TRACE_Send+0xfc>)
 801cdcc:	2200      	movs	r2, #0
 801cdce:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cdd0:	4b24      	ldr	r3, [pc, #144]	; (801ce64 <TRACE_Send+0xfc>)
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cdd6:	4b23      	ldr	r3, [pc, #140]	; (801ce64 <TRACE_Send+0xfc>)
 801cdd8:	789b      	ldrb	r3, [r3, #2]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d115      	bne.n	801ce0a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cdde:	4b21      	ldr	r3, [pc, #132]	; (801ce64 <TRACE_Send+0xfc>)
 801cde0:	8a5a      	ldrh	r2, [r3, #18]
 801cde2:	4b20      	ldr	r3, [pc, #128]	; (801ce64 <TRACE_Send+0xfc>)
 801cde4:	8a1b      	ldrh	r3, [r3, #16]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	d908      	bls.n	801cdfc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cdea:	4b1e      	ldr	r3, [pc, #120]	; (801ce64 <TRACE_Send+0xfc>)
 801cdec:	8a5a      	ldrh	r2, [r3, #18]
 801cdee:	4b1d      	ldr	r3, [pc, #116]	; (801ce64 <TRACE_Send+0xfc>)
 801cdf0:	8a1b      	ldrh	r3, [r3, #16]
 801cdf2:	1ad3      	subs	r3, r2, r3
 801cdf4:	b29a      	uxth	r2, r3
 801cdf6:	4b1b      	ldr	r3, [pc, #108]	; (801ce64 <TRACE_Send+0xfc>)
 801cdf8:	829a      	strh	r2, [r3, #20]
 801cdfa:	e006      	b.n	801ce0a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cdfc:	4b19      	ldr	r3, [pc, #100]	; (801ce64 <TRACE_Send+0xfc>)
 801cdfe:	8a1b      	ldrh	r3, [r3, #16]
 801ce00:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ce04:	b29a      	uxth	r2, r3
 801ce06:	4b17      	ldr	r3, [pc, #92]	; (801ce64 <TRACE_Send+0xfc>)
 801ce08:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ce0a:	4b16      	ldr	r3, [pc, #88]	; (801ce64 <TRACE_Send+0xfc>)
 801ce0c:	8a1b      	ldrh	r3, [r3, #16]
 801ce0e:	461a      	mov	r2, r3
 801ce10:	4b15      	ldr	r3, [pc, #84]	; (801ce68 <TRACE_Send+0x100>)
 801ce12:	4413      	add	r3, r2
 801ce14:	61bb      	str	r3, [r7, #24]
 801ce16:	697b      	ldr	r3, [r7, #20]
 801ce18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	f383 8810 	msr	PRIMASK, r3
}
 801ce20:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ce22:	f7e5 f975 	bl	8002110 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ce26:	4b11      	ldr	r3, [pc, #68]	; (801ce6c <TRACE_Send+0x104>)
 801ce28:	68db      	ldr	r3, [r3, #12]
 801ce2a:	4a0e      	ldr	r2, [pc, #56]	; (801ce64 <TRACE_Send+0xfc>)
 801ce2c:	8a92      	ldrh	r2, [r2, #20]
 801ce2e:	4611      	mov	r1, r2
 801ce30:	69b8      	ldr	r0, [r7, #24]
 801ce32:	4798      	blx	r3
 801ce34:	4603      	mov	r3, r0
 801ce36:	77fb      	strb	r3, [r7, #31]
 801ce38:	e00d      	b.n	801ce56 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ce3a:	f000 f941 	bl	801d0c0 <TRACE_UnLock>
 801ce3e:	697b      	ldr	r3, [r7, #20]
 801ce40:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce42:	68bb      	ldr	r3, [r7, #8]
 801ce44:	f383 8810 	msr	PRIMASK, r3
}
 801ce48:	e005      	b.n	801ce56 <TRACE_Send+0xee>
 801ce4a:	697b      	ldr	r3, [r7, #20]
 801ce4c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	f383 8810 	msr	PRIMASK, r3
}
 801ce54:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ce56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	3720      	adds	r7, #32
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	bd80      	pop	{r7, pc}
 801ce62:	bf00      	nop
 801ce64:	20001f48 	.word	0x20001f48
 801ce68:	20001f60 	.word	0x20001f60
 801ce6c:	08020320 	.word	0x08020320

0801ce70 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b088      	sub	sp, #32
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ce78:	2300      	movs	r3, #0
 801ce7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce7c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce80:	617b      	str	r3, [r7, #20]
  return(result);
 801ce82:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ce84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce86:	b672      	cpsid	i
}
 801ce88:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ce8a:	4b3c      	ldr	r3, [pc, #240]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ce8c:	789b      	ldrb	r3, [r3, #2]
 801ce8e:	2b02      	cmp	r3, #2
 801ce90:	d106      	bne.n	801cea0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ce92:	4b3a      	ldr	r3, [pc, #232]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ce94:	2200      	movs	r2, #0
 801ce96:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ce98:	4b38      	ldr	r3, [pc, #224]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ce9a:	2200      	movs	r2, #0
 801ce9c:	821a      	strh	r2, [r3, #16]
 801ce9e:	e00a      	b.n	801ceb6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cea0:	4b36      	ldr	r3, [pc, #216]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cea2:	8a1a      	ldrh	r2, [r3, #16]
 801cea4:	4b35      	ldr	r3, [pc, #212]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cea6:	8a9b      	ldrh	r3, [r3, #20]
 801cea8:	4413      	add	r3, r2
 801ceaa:	b29b      	uxth	r3, r3
 801ceac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ceb0:	b29a      	uxth	r2, r3
 801ceb2:	4b32      	ldr	r3, [pc, #200]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ceb4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ceb6:	4b31      	ldr	r3, [pc, #196]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ceb8:	8a1a      	ldrh	r2, [r3, #16]
 801ceba:	4b30      	ldr	r3, [pc, #192]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cebc:	8a5b      	ldrh	r3, [r3, #18]
 801cebe:	429a      	cmp	r2, r3
 801cec0:	d04d      	beq.n	801cf5e <TRACE_TxCpltCallback+0xee>
 801cec2:	4b2e      	ldr	r3, [pc, #184]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cec4:	8adb      	ldrh	r3, [r3, #22]
 801cec6:	2b01      	cmp	r3, #1
 801cec8:	d149      	bne.n	801cf5e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ceca:	4b2c      	ldr	r3, [pc, #176]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cecc:	789b      	ldrb	r3, [r3, #2]
 801cece:	2b01      	cmp	r3, #1
 801ced0:	d117      	bne.n	801cf02 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ced2:	4b2a      	ldr	r3, [pc, #168]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ced4:	881a      	ldrh	r2, [r3, #0]
 801ced6:	4b29      	ldr	r3, [pc, #164]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ced8:	8a1b      	ldrh	r3, [r3, #16]
 801ceda:	1ad3      	subs	r3, r2, r3
 801cedc:	b29a      	uxth	r2, r3
 801cede:	4b27      	ldr	r3, [pc, #156]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cee0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cee2:	4b26      	ldr	r3, [pc, #152]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cee4:	2202      	movs	r2, #2
 801cee6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cee8:	4b24      	ldr	r3, [pc, #144]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801ceea:	2200      	movs	r2, #0
 801ceec:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ceee:	4b23      	ldr	r3, [pc, #140]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cef0:	8a9b      	ldrh	r3, [r3, #20]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d105      	bne.n	801cf02 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cef6:	4b21      	ldr	r3, [pc, #132]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cef8:	2200      	movs	r2, #0
 801cefa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cefc:	4b1f      	ldr	r3, [pc, #124]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cefe:	2200      	movs	r2, #0
 801cf00:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cf02:	4b1e      	ldr	r3, [pc, #120]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf04:	789b      	ldrb	r3, [r3, #2]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d115      	bne.n	801cf36 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cf0a:	4b1c      	ldr	r3, [pc, #112]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf0c:	8a5a      	ldrh	r2, [r3, #18]
 801cf0e:	4b1b      	ldr	r3, [pc, #108]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf10:	8a1b      	ldrh	r3, [r3, #16]
 801cf12:	429a      	cmp	r2, r3
 801cf14:	d908      	bls.n	801cf28 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cf16:	4b19      	ldr	r3, [pc, #100]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf18:	8a5a      	ldrh	r2, [r3, #18]
 801cf1a:	4b18      	ldr	r3, [pc, #96]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf1c:	8a1b      	ldrh	r3, [r3, #16]
 801cf1e:	1ad3      	subs	r3, r2, r3
 801cf20:	b29a      	uxth	r2, r3
 801cf22:	4b16      	ldr	r3, [pc, #88]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf24:	829a      	strh	r2, [r3, #20]
 801cf26:	e006      	b.n	801cf36 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cf28:	4b14      	ldr	r3, [pc, #80]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf2a:	8a1b      	ldrh	r3, [r3, #16]
 801cf2c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cf30:	b29a      	uxth	r2, r3
 801cf32:	4b12      	ldr	r3, [pc, #72]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf34:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cf36:	4b11      	ldr	r3, [pc, #68]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf38:	8a1b      	ldrh	r3, [r3, #16]
 801cf3a:	461a      	mov	r2, r3
 801cf3c:	4b10      	ldr	r3, [pc, #64]	; (801cf80 <TRACE_TxCpltCallback+0x110>)
 801cf3e:	4413      	add	r3, r2
 801cf40:	61fb      	str	r3, [r7, #28]
 801cf42:	69bb      	ldr	r3, [r7, #24]
 801cf44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf46:	693b      	ldr	r3, [r7, #16]
 801cf48:	f383 8810 	msr	PRIMASK, r3
}
 801cf4c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cf4e:	4b0d      	ldr	r3, [pc, #52]	; (801cf84 <TRACE_TxCpltCallback+0x114>)
 801cf50:	68db      	ldr	r3, [r3, #12]
 801cf52:	4a0a      	ldr	r2, [pc, #40]	; (801cf7c <TRACE_TxCpltCallback+0x10c>)
 801cf54:	8a92      	ldrh	r2, [r2, #20]
 801cf56:	4611      	mov	r1, r2
 801cf58:	69f8      	ldr	r0, [r7, #28]
 801cf5a:	4798      	blx	r3
 801cf5c:	e00a      	b.n	801cf74 <TRACE_TxCpltCallback+0x104>
 801cf5e:	69bb      	ldr	r3, [r7, #24]
 801cf60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	f383 8810 	msr	PRIMASK, r3
}
 801cf68:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cf6a:	f7e5 f8d9 	bl	8002120 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cf6e:	f000 f8a7 	bl	801d0c0 <TRACE_UnLock>
  }
}
 801cf72:	bf00      	nop
 801cf74:	bf00      	nop
 801cf76:	3720      	adds	r7, #32
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}
 801cf7c:	20001f48 	.word	0x20001f48
 801cf80:	20001f60 	.word	0x20001f60
 801cf84:	08020320 	.word	0x08020320

0801cf88 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cf88:	b480      	push	{r7}
 801cf8a:	b087      	sub	sp, #28
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	4603      	mov	r3, r0
 801cf90:	6039      	str	r1, [r7, #0]
 801cf92:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cf94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf98:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf9a:	f3ef 8310 	mrs	r3, PRIMASK
 801cf9e:	60fb      	str	r3, [r7, #12]
  return(result);
 801cfa0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cfa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cfa4:	b672      	cpsid	i
}
 801cfa6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cfa8:	4b35      	ldr	r3, [pc, #212]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfaa:	8a5a      	ldrh	r2, [r3, #18]
 801cfac:	4b34      	ldr	r3, [pc, #208]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfae:	8a1b      	ldrh	r3, [r3, #16]
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	d11b      	bne.n	801cfec <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cfb4:	4b32      	ldr	r3, [pc, #200]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfb6:	8a5b      	ldrh	r3, [r3, #18]
 801cfb8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cfbc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cfbe:	88fa      	ldrh	r2, [r7, #6]
 801cfc0:	8afb      	ldrh	r3, [r7, #22]
 801cfc2:	429a      	cmp	r2, r3
 801cfc4:	d33a      	bcc.n	801d03c <TRACE_AllocateBufer+0xb4>
 801cfc6:	4b2e      	ldr	r3, [pc, #184]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfc8:	8a1b      	ldrh	r3, [r3, #16]
 801cfca:	88fa      	ldrh	r2, [r7, #6]
 801cfcc:	429a      	cmp	r2, r3
 801cfce:	d235      	bcs.n	801d03c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cfd0:	4b2b      	ldr	r3, [pc, #172]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfd2:	2201      	movs	r2, #1
 801cfd4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cfd6:	4b2a      	ldr	r3, [pc, #168]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfd8:	8a5a      	ldrh	r2, [r3, #18]
 801cfda:	4b29      	ldr	r3, [pc, #164]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfdc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cfde:	4b28      	ldr	r3, [pc, #160]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfe0:	8a1b      	ldrh	r3, [r3, #16]
 801cfe2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cfe4:	4b26      	ldr	r3, [pc, #152]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfe6:	2200      	movs	r2, #0
 801cfe8:	825a      	strh	r2, [r3, #18]
 801cfea:	e027      	b.n	801d03c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cfec:	4b24      	ldr	r3, [pc, #144]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cfee:	8a5a      	ldrh	r2, [r3, #18]
 801cff0:	4b23      	ldr	r3, [pc, #140]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cff2:	8a1b      	ldrh	r3, [r3, #16]
 801cff4:	429a      	cmp	r2, r3
 801cff6:	d91b      	bls.n	801d030 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cff8:	4b21      	ldr	r3, [pc, #132]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801cffa:	8a5b      	ldrh	r3, [r3, #18]
 801cffc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d000:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d002:	88fa      	ldrh	r2, [r7, #6]
 801d004:	8afb      	ldrh	r3, [r7, #22]
 801d006:	429a      	cmp	r2, r3
 801d008:	d318      	bcc.n	801d03c <TRACE_AllocateBufer+0xb4>
 801d00a:	4b1d      	ldr	r3, [pc, #116]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d00c:	8a1b      	ldrh	r3, [r3, #16]
 801d00e:	88fa      	ldrh	r2, [r7, #6]
 801d010:	429a      	cmp	r2, r3
 801d012:	d213      	bcs.n	801d03c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d014:	4b1a      	ldr	r3, [pc, #104]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d016:	2201      	movs	r2, #1
 801d018:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d01a:	4b19      	ldr	r3, [pc, #100]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d01c:	8a5a      	ldrh	r2, [r3, #18]
 801d01e:	4b18      	ldr	r3, [pc, #96]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d020:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d022:	4b17      	ldr	r3, [pc, #92]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d024:	8a1b      	ldrh	r3, [r3, #16]
 801d026:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d028:	4b15      	ldr	r3, [pc, #84]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d02a:	2200      	movs	r2, #0
 801d02c:	825a      	strh	r2, [r3, #18]
 801d02e:	e005      	b.n	801d03c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d030:	4b13      	ldr	r3, [pc, #76]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d032:	8a1a      	ldrh	r2, [r3, #16]
 801d034:	4b12      	ldr	r3, [pc, #72]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d036:	8a5b      	ldrh	r3, [r3, #18]
 801d038:	1ad3      	subs	r3, r2, r3
 801d03a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d03c:	8afa      	ldrh	r2, [r7, #22]
 801d03e:	88fb      	ldrh	r3, [r7, #6]
 801d040:	429a      	cmp	r2, r3
 801d042:	d90f      	bls.n	801d064 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d044:	4b0e      	ldr	r3, [pc, #56]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d046:	8a5a      	ldrh	r2, [r3, #18]
 801d048:	683b      	ldr	r3, [r7, #0]
 801d04a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d04c:	4b0c      	ldr	r3, [pc, #48]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d04e:	8a5a      	ldrh	r2, [r3, #18]
 801d050:	88fb      	ldrh	r3, [r7, #6]
 801d052:	4413      	add	r3, r2
 801d054:	b29b      	uxth	r3, r3
 801d056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d05a:	b29a      	uxth	r2, r3
 801d05c:	4b08      	ldr	r3, [pc, #32]	; (801d080 <TRACE_AllocateBufer+0xf8>)
 801d05e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d060:	2300      	movs	r3, #0
 801d062:	82bb      	strh	r3, [r7, #20]
 801d064:	693b      	ldr	r3, [r7, #16]
 801d066:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d068:	68bb      	ldr	r3, [r7, #8]
 801d06a:	f383 8810 	msr	PRIMASK, r3
}
 801d06e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d070:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d074:	4618      	mov	r0, r3
 801d076:	371c      	adds	r7, #28
 801d078:	46bd      	mov	sp, r7
 801d07a:	bc80      	pop	{r7}
 801d07c:	4770      	bx	lr
 801d07e:	bf00      	nop
 801d080:	20001f48 	.word	0x20001f48

0801d084 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d084:	b480      	push	{r7}
 801d086:	b085      	sub	sp, #20
 801d088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d08a:	f3ef 8310 	mrs	r3, PRIMASK
 801d08e:	607b      	str	r3, [r7, #4]
  return(result);
 801d090:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d094:	b672      	cpsid	i
}
 801d096:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d098:	4b08      	ldr	r3, [pc, #32]	; (801d0bc <TRACE_Lock+0x38>)
 801d09a:	8adb      	ldrh	r3, [r3, #22]
 801d09c:	3301      	adds	r3, #1
 801d09e:	b29a      	uxth	r2, r3
 801d0a0:	4b06      	ldr	r3, [pc, #24]	; (801d0bc <TRACE_Lock+0x38>)
 801d0a2:	82da      	strh	r2, [r3, #22]
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0a8:	68bb      	ldr	r3, [r7, #8]
 801d0aa:	f383 8810 	msr	PRIMASK, r3
}
 801d0ae:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d0b0:	bf00      	nop
 801d0b2:	3714      	adds	r7, #20
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	bc80      	pop	{r7}
 801d0b8:	4770      	bx	lr
 801d0ba:	bf00      	nop
 801d0bc:	20001f48 	.word	0x20001f48

0801d0c0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d0c0:	b480      	push	{r7}
 801d0c2:	b085      	sub	sp, #20
 801d0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0c6:	f3ef 8310 	mrs	r3, PRIMASK
 801d0ca:	607b      	str	r3, [r7, #4]
  return(result);
 801d0cc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d0ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0d0:	b672      	cpsid	i
}
 801d0d2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d0d4:	4b08      	ldr	r3, [pc, #32]	; (801d0f8 <TRACE_UnLock+0x38>)
 801d0d6:	8adb      	ldrh	r3, [r3, #22]
 801d0d8:	3b01      	subs	r3, #1
 801d0da:	b29a      	uxth	r2, r3
 801d0dc:	4b06      	ldr	r3, [pc, #24]	; (801d0f8 <TRACE_UnLock+0x38>)
 801d0de:	82da      	strh	r2, [r3, #22]
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0e4:	68bb      	ldr	r3, [r7, #8]
 801d0e6:	f383 8810 	msr	PRIMASK, r3
}
 801d0ea:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d0ec:	bf00      	nop
 801d0ee:	3714      	adds	r7, #20
 801d0f0:	46bd      	mov	sp, r7
 801d0f2:	bc80      	pop	{r7}
 801d0f4:	4770      	bx	lr
 801d0f6:	bf00      	nop
 801d0f8:	20001f48 	.word	0x20001f48

0801d0fc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d0fc:	b480      	push	{r7}
 801d0fe:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d100:	4b05      	ldr	r3, [pc, #20]	; (801d118 <TRACE_IsLocked+0x1c>)
 801d102:	8adb      	ldrh	r3, [r3, #22]
 801d104:	2b00      	cmp	r3, #0
 801d106:	bf14      	ite	ne
 801d108:	2301      	movne	r3, #1
 801d10a:	2300      	moveq	r3, #0
 801d10c:	b2db      	uxtb	r3, r3
}
 801d10e:	4618      	mov	r0, r3
 801d110:	46bd      	mov	sp, r7
 801d112:	bc80      	pop	{r7}
 801d114:	4770      	bx	lr
 801d116:	bf00      	nop
 801d118:	20001f48 	.word	0x20001f48

0801d11c <atof>:
 801d11c:	2100      	movs	r1, #0
 801d11e:	f000 be53 	b.w	801ddc8 <strtod>

0801d122 <atoi>:
 801d122:	220a      	movs	r2, #10
 801d124:	2100      	movs	r1, #0
 801d126:	f000 bed7 	b.w	801ded8 <strtol>
	...

0801d12c <__errno>:
 801d12c:	4b01      	ldr	r3, [pc, #4]	; (801d134 <__errno+0x8>)
 801d12e:	6818      	ldr	r0, [r3, #0]
 801d130:	4770      	bx	lr
 801d132:	bf00      	nop
 801d134:	2000014c 	.word	0x2000014c

0801d138 <__libc_init_array>:
 801d138:	b570      	push	{r4, r5, r6, lr}
 801d13a:	4d0d      	ldr	r5, [pc, #52]	; (801d170 <__libc_init_array+0x38>)
 801d13c:	4c0d      	ldr	r4, [pc, #52]	; (801d174 <__libc_init_array+0x3c>)
 801d13e:	1b64      	subs	r4, r4, r5
 801d140:	10a4      	asrs	r4, r4, #2
 801d142:	2600      	movs	r6, #0
 801d144:	42a6      	cmp	r6, r4
 801d146:	d109      	bne.n	801d15c <__libc_init_array+0x24>
 801d148:	4d0b      	ldr	r5, [pc, #44]	; (801d178 <__libc_init_array+0x40>)
 801d14a:	4c0c      	ldr	r4, [pc, #48]	; (801d17c <__libc_init_array+0x44>)
 801d14c:	f002 ffb8 	bl	80200c0 <_init>
 801d150:	1b64      	subs	r4, r4, r5
 801d152:	10a4      	asrs	r4, r4, #2
 801d154:	2600      	movs	r6, #0
 801d156:	42a6      	cmp	r6, r4
 801d158:	d105      	bne.n	801d166 <__libc_init_array+0x2e>
 801d15a:	bd70      	pop	{r4, r5, r6, pc}
 801d15c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d160:	4798      	blx	r3
 801d162:	3601      	adds	r6, #1
 801d164:	e7ee      	b.n	801d144 <__libc_init_array+0xc>
 801d166:	f855 3b04 	ldr.w	r3, [r5], #4
 801d16a:	4798      	blx	r3
 801d16c:	3601      	adds	r6, #1
 801d16e:	e7f2      	b.n	801d156 <__libc_init_array+0x1e>
 801d170:	08020cdc 	.word	0x08020cdc
 801d174:	08020cdc 	.word	0x08020cdc
 801d178:	08020cdc 	.word	0x08020cdc
 801d17c:	08020ce0 	.word	0x08020ce0

0801d180 <memset>:
 801d180:	4402      	add	r2, r0
 801d182:	4603      	mov	r3, r0
 801d184:	4293      	cmp	r3, r2
 801d186:	d100      	bne.n	801d18a <memset+0xa>
 801d188:	4770      	bx	lr
 801d18a:	f803 1b01 	strb.w	r1, [r3], #1
 801d18e:	e7f9      	b.n	801d184 <memset+0x4>

0801d190 <strncpy>:
 801d190:	b510      	push	{r4, lr}
 801d192:	3901      	subs	r1, #1
 801d194:	4603      	mov	r3, r0
 801d196:	b132      	cbz	r2, 801d1a6 <strncpy+0x16>
 801d198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d19c:	f803 4b01 	strb.w	r4, [r3], #1
 801d1a0:	3a01      	subs	r2, #1
 801d1a2:	2c00      	cmp	r4, #0
 801d1a4:	d1f7      	bne.n	801d196 <strncpy+0x6>
 801d1a6:	441a      	add	r2, r3
 801d1a8:	2100      	movs	r1, #0
 801d1aa:	4293      	cmp	r3, r2
 801d1ac:	d100      	bne.n	801d1b0 <strncpy+0x20>
 801d1ae:	bd10      	pop	{r4, pc}
 801d1b0:	f803 1b01 	strb.w	r1, [r3], #1
 801d1b4:	e7f9      	b.n	801d1aa <strncpy+0x1a>

0801d1b6 <sulp>:
 801d1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1ba:	460f      	mov	r7, r1
 801d1bc:	4690      	mov	r8, r2
 801d1be:	f001 fd87 	bl	801ecd0 <__ulp>
 801d1c2:	4604      	mov	r4, r0
 801d1c4:	460d      	mov	r5, r1
 801d1c6:	f1b8 0f00 	cmp.w	r8, #0
 801d1ca:	d011      	beq.n	801d1f0 <sulp+0x3a>
 801d1cc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801d1d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	dd0b      	ble.n	801d1f0 <sulp+0x3a>
 801d1d8:	051b      	lsls	r3, r3, #20
 801d1da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801d1de:	2400      	movs	r4, #0
 801d1e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801d1e4:	4622      	mov	r2, r4
 801d1e6:	462b      	mov	r3, r5
 801d1e8:	f7e3 f9de 	bl	80005a8 <__aeabi_dmul>
 801d1ec:	4604      	mov	r4, r0
 801d1ee:	460d      	mov	r5, r1
 801d1f0:	4620      	mov	r0, r4
 801d1f2:	4629      	mov	r1, r5
 801d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d1f8 <_strtod_l>:
 801d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1fc:	b09f      	sub	sp, #124	; 0x7c
 801d1fe:	469b      	mov	fp, r3
 801d200:	2300      	movs	r3, #0
 801d202:	931a      	str	r3, [sp, #104]	; 0x68
 801d204:	4b9e      	ldr	r3, [pc, #632]	; (801d480 <_strtod_l+0x288>)
 801d206:	9215      	str	r2, [sp, #84]	; 0x54
 801d208:	681f      	ldr	r7, [r3, #0]
 801d20a:	4682      	mov	sl, r0
 801d20c:	4638      	mov	r0, r7
 801d20e:	460e      	mov	r6, r1
 801d210:	f7e2 ffb6 	bl	8000180 <strlen>
 801d214:	f04f 0800 	mov.w	r8, #0
 801d218:	4604      	mov	r4, r0
 801d21a:	f04f 0900 	mov.w	r9, #0
 801d21e:	9619      	str	r6, [sp, #100]	; 0x64
 801d220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d222:	781a      	ldrb	r2, [r3, #0]
 801d224:	2a2b      	cmp	r2, #43	; 0x2b
 801d226:	d04c      	beq.n	801d2c2 <_strtod_l+0xca>
 801d228:	d83a      	bhi.n	801d2a0 <_strtod_l+0xa8>
 801d22a:	2a0d      	cmp	r2, #13
 801d22c:	d833      	bhi.n	801d296 <_strtod_l+0x9e>
 801d22e:	2a08      	cmp	r2, #8
 801d230:	d833      	bhi.n	801d29a <_strtod_l+0xa2>
 801d232:	2a00      	cmp	r2, #0
 801d234:	d03d      	beq.n	801d2b2 <_strtod_l+0xba>
 801d236:	2300      	movs	r3, #0
 801d238:	930a      	str	r3, [sp, #40]	; 0x28
 801d23a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801d23c:	782b      	ldrb	r3, [r5, #0]
 801d23e:	2b30      	cmp	r3, #48	; 0x30
 801d240:	f040 80aa 	bne.w	801d398 <_strtod_l+0x1a0>
 801d244:	786b      	ldrb	r3, [r5, #1]
 801d246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d24a:	2b58      	cmp	r3, #88	; 0x58
 801d24c:	d166      	bne.n	801d31c <_strtod_l+0x124>
 801d24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d250:	9301      	str	r3, [sp, #4]
 801d252:	ab1a      	add	r3, sp, #104	; 0x68
 801d254:	9300      	str	r3, [sp, #0]
 801d256:	4a8b      	ldr	r2, [pc, #556]	; (801d484 <_strtod_l+0x28c>)
 801d258:	f8cd b008 	str.w	fp, [sp, #8]
 801d25c:	ab1b      	add	r3, sp, #108	; 0x6c
 801d25e:	a919      	add	r1, sp, #100	; 0x64
 801d260:	4650      	mov	r0, sl
 801d262:	f000 feab 	bl	801dfbc <__gethex>
 801d266:	f010 0607 	ands.w	r6, r0, #7
 801d26a:	4604      	mov	r4, r0
 801d26c:	d005      	beq.n	801d27a <_strtod_l+0x82>
 801d26e:	2e06      	cmp	r6, #6
 801d270:	d129      	bne.n	801d2c6 <_strtod_l+0xce>
 801d272:	3501      	adds	r5, #1
 801d274:	2300      	movs	r3, #0
 801d276:	9519      	str	r5, [sp, #100]	; 0x64
 801d278:	930a      	str	r3, [sp, #40]	; 0x28
 801d27a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	f040 858a 	bne.w	801dd96 <_strtod_l+0xb9e>
 801d282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d284:	b1d3      	cbz	r3, 801d2bc <_strtod_l+0xc4>
 801d286:	4642      	mov	r2, r8
 801d288:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d28c:	4610      	mov	r0, r2
 801d28e:	4619      	mov	r1, r3
 801d290:	b01f      	add	sp, #124	; 0x7c
 801d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d296:	2a20      	cmp	r2, #32
 801d298:	d1cd      	bne.n	801d236 <_strtod_l+0x3e>
 801d29a:	3301      	adds	r3, #1
 801d29c:	9319      	str	r3, [sp, #100]	; 0x64
 801d29e:	e7bf      	b.n	801d220 <_strtod_l+0x28>
 801d2a0:	2a2d      	cmp	r2, #45	; 0x2d
 801d2a2:	d1c8      	bne.n	801d236 <_strtod_l+0x3e>
 801d2a4:	2201      	movs	r2, #1
 801d2a6:	920a      	str	r2, [sp, #40]	; 0x28
 801d2a8:	1c5a      	adds	r2, r3, #1
 801d2aa:	9219      	str	r2, [sp, #100]	; 0x64
 801d2ac:	785b      	ldrb	r3, [r3, #1]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d1c3      	bne.n	801d23a <_strtod_l+0x42>
 801d2b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2b4:	9619      	str	r6, [sp, #100]	; 0x64
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	f040 856b 	bne.w	801dd92 <_strtod_l+0xb9a>
 801d2bc:	4642      	mov	r2, r8
 801d2be:	464b      	mov	r3, r9
 801d2c0:	e7e4      	b.n	801d28c <_strtod_l+0x94>
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	e7ef      	b.n	801d2a6 <_strtod_l+0xae>
 801d2c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d2c8:	b13a      	cbz	r2, 801d2da <_strtod_l+0xe2>
 801d2ca:	2135      	movs	r1, #53	; 0x35
 801d2cc:	a81c      	add	r0, sp, #112	; 0x70
 801d2ce:	f001 fe03 	bl	801eed8 <__copybits>
 801d2d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d2d4:	4650      	mov	r0, sl
 801d2d6:	f001 f9cf 	bl	801e678 <_Bfree>
 801d2da:	3e01      	subs	r6, #1
 801d2dc:	2e04      	cmp	r6, #4
 801d2de:	d806      	bhi.n	801d2ee <_strtod_l+0xf6>
 801d2e0:	e8df f006 	tbb	[pc, r6]
 801d2e4:	1714030a 	.word	0x1714030a
 801d2e8:	0a          	.byte	0x0a
 801d2e9:	00          	.byte	0x00
 801d2ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 801d2ee:	0721      	lsls	r1, r4, #28
 801d2f0:	d5c3      	bpl.n	801d27a <_strtod_l+0x82>
 801d2f2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801d2f6:	e7c0      	b.n	801d27a <_strtod_l+0x82>
 801d2f8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 801d2fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d2fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d302:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d306:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d30a:	e7f0      	b.n	801d2ee <_strtod_l+0xf6>
 801d30c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801d488 <_strtod_l+0x290>
 801d310:	e7ed      	b.n	801d2ee <_strtod_l+0xf6>
 801d312:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d316:	f04f 38ff 	mov.w	r8, #4294967295
 801d31a:	e7e8      	b.n	801d2ee <_strtod_l+0xf6>
 801d31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d31e:	1c5a      	adds	r2, r3, #1
 801d320:	9219      	str	r2, [sp, #100]	; 0x64
 801d322:	785b      	ldrb	r3, [r3, #1]
 801d324:	2b30      	cmp	r3, #48	; 0x30
 801d326:	d0f9      	beq.n	801d31c <_strtod_l+0x124>
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d0a6      	beq.n	801d27a <_strtod_l+0x82>
 801d32c:	2301      	movs	r3, #1
 801d32e:	9307      	str	r3, [sp, #28]
 801d330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d332:	9308      	str	r3, [sp, #32]
 801d334:	2300      	movs	r3, #0
 801d336:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d33a:	469b      	mov	fp, r3
 801d33c:	220a      	movs	r2, #10
 801d33e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d340:	7805      	ldrb	r5, [r0, #0]
 801d342:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801d346:	b2d9      	uxtb	r1, r3
 801d348:	2909      	cmp	r1, #9
 801d34a:	d927      	bls.n	801d39c <_strtod_l+0x1a4>
 801d34c:	4622      	mov	r2, r4
 801d34e:	4639      	mov	r1, r7
 801d350:	f001 fec4 	bl	801f0dc <strncmp>
 801d354:	2800      	cmp	r0, #0
 801d356:	d033      	beq.n	801d3c0 <_strtod_l+0x1c8>
 801d358:	2000      	movs	r0, #0
 801d35a:	462a      	mov	r2, r5
 801d35c:	465c      	mov	r4, fp
 801d35e:	9004      	str	r0, [sp, #16]
 801d360:	4603      	mov	r3, r0
 801d362:	2a65      	cmp	r2, #101	; 0x65
 801d364:	d001      	beq.n	801d36a <_strtod_l+0x172>
 801d366:	2a45      	cmp	r2, #69	; 0x45
 801d368:	d114      	bne.n	801d394 <_strtod_l+0x19c>
 801d36a:	b91c      	cbnz	r4, 801d374 <_strtod_l+0x17c>
 801d36c:	9a07      	ldr	r2, [sp, #28]
 801d36e:	4302      	orrs	r2, r0
 801d370:	d09f      	beq.n	801d2b2 <_strtod_l+0xba>
 801d372:	2400      	movs	r4, #0
 801d374:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801d376:	1c72      	adds	r2, r6, #1
 801d378:	9219      	str	r2, [sp, #100]	; 0x64
 801d37a:	7872      	ldrb	r2, [r6, #1]
 801d37c:	2a2b      	cmp	r2, #43	; 0x2b
 801d37e:	d079      	beq.n	801d474 <_strtod_l+0x27c>
 801d380:	2a2d      	cmp	r2, #45	; 0x2d
 801d382:	f000 8083 	beq.w	801d48c <_strtod_l+0x294>
 801d386:	2700      	movs	r7, #0
 801d388:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d38c:	2909      	cmp	r1, #9
 801d38e:	f240 8083 	bls.w	801d498 <_strtod_l+0x2a0>
 801d392:	9619      	str	r6, [sp, #100]	; 0x64
 801d394:	2500      	movs	r5, #0
 801d396:	e09f      	b.n	801d4d8 <_strtod_l+0x2e0>
 801d398:	2300      	movs	r3, #0
 801d39a:	e7c8      	b.n	801d32e <_strtod_l+0x136>
 801d39c:	f1bb 0f08 	cmp.w	fp, #8
 801d3a0:	bfd5      	itete	le
 801d3a2:	9906      	ldrle	r1, [sp, #24]
 801d3a4:	9905      	ldrgt	r1, [sp, #20]
 801d3a6:	fb02 3301 	mlale	r3, r2, r1, r3
 801d3aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d3ae:	f100 0001 	add.w	r0, r0, #1
 801d3b2:	bfd4      	ite	le
 801d3b4:	9306      	strle	r3, [sp, #24]
 801d3b6:	9305      	strgt	r3, [sp, #20]
 801d3b8:	f10b 0b01 	add.w	fp, fp, #1
 801d3bc:	9019      	str	r0, [sp, #100]	; 0x64
 801d3be:	e7be      	b.n	801d33e <_strtod_l+0x146>
 801d3c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d3c2:	191a      	adds	r2, r3, r4
 801d3c4:	9219      	str	r2, [sp, #100]	; 0x64
 801d3c6:	5d1a      	ldrb	r2, [r3, r4]
 801d3c8:	f1bb 0f00 	cmp.w	fp, #0
 801d3cc:	d036      	beq.n	801d43c <_strtod_l+0x244>
 801d3ce:	9004      	str	r0, [sp, #16]
 801d3d0:	465c      	mov	r4, fp
 801d3d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801d3d6:	2b09      	cmp	r3, #9
 801d3d8:	d912      	bls.n	801d400 <_strtod_l+0x208>
 801d3da:	2301      	movs	r3, #1
 801d3dc:	e7c1      	b.n	801d362 <_strtod_l+0x16a>
 801d3de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d3e0:	1c5a      	adds	r2, r3, #1
 801d3e2:	9219      	str	r2, [sp, #100]	; 0x64
 801d3e4:	785a      	ldrb	r2, [r3, #1]
 801d3e6:	3001      	adds	r0, #1
 801d3e8:	2a30      	cmp	r2, #48	; 0x30
 801d3ea:	d0f8      	beq.n	801d3de <_strtod_l+0x1e6>
 801d3ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d3f0:	2b08      	cmp	r3, #8
 801d3f2:	f200 84d5 	bhi.w	801dda0 <_strtod_l+0xba8>
 801d3f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d3f8:	9004      	str	r0, [sp, #16]
 801d3fa:	2000      	movs	r0, #0
 801d3fc:	9308      	str	r3, [sp, #32]
 801d3fe:	4604      	mov	r4, r0
 801d400:	3a30      	subs	r2, #48	; 0x30
 801d402:	f100 0301 	add.w	r3, r0, #1
 801d406:	d013      	beq.n	801d430 <_strtod_l+0x238>
 801d408:	9904      	ldr	r1, [sp, #16]
 801d40a:	4419      	add	r1, r3
 801d40c:	9104      	str	r1, [sp, #16]
 801d40e:	4623      	mov	r3, r4
 801d410:	1905      	adds	r5, r0, r4
 801d412:	210a      	movs	r1, #10
 801d414:	42ab      	cmp	r3, r5
 801d416:	d113      	bne.n	801d440 <_strtod_l+0x248>
 801d418:	1823      	adds	r3, r4, r0
 801d41a:	2b08      	cmp	r3, #8
 801d41c:	f104 0401 	add.w	r4, r4, #1
 801d420:	4404      	add	r4, r0
 801d422:	dc1b      	bgt.n	801d45c <_strtod_l+0x264>
 801d424:	9906      	ldr	r1, [sp, #24]
 801d426:	230a      	movs	r3, #10
 801d428:	fb03 2301 	mla	r3, r3, r1, r2
 801d42c:	9306      	str	r3, [sp, #24]
 801d42e:	2300      	movs	r3, #0
 801d430:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d432:	1c51      	adds	r1, r2, #1
 801d434:	9119      	str	r1, [sp, #100]	; 0x64
 801d436:	7852      	ldrb	r2, [r2, #1]
 801d438:	4618      	mov	r0, r3
 801d43a:	e7ca      	b.n	801d3d2 <_strtod_l+0x1da>
 801d43c:	4658      	mov	r0, fp
 801d43e:	e7d3      	b.n	801d3e8 <_strtod_l+0x1f0>
 801d440:	2b08      	cmp	r3, #8
 801d442:	dc04      	bgt.n	801d44e <_strtod_l+0x256>
 801d444:	9f06      	ldr	r7, [sp, #24]
 801d446:	434f      	muls	r7, r1
 801d448:	9706      	str	r7, [sp, #24]
 801d44a:	3301      	adds	r3, #1
 801d44c:	e7e2      	b.n	801d414 <_strtod_l+0x21c>
 801d44e:	1c5f      	adds	r7, r3, #1
 801d450:	2f10      	cmp	r7, #16
 801d452:	bfde      	ittt	le
 801d454:	9f05      	ldrle	r7, [sp, #20]
 801d456:	434f      	mulle	r7, r1
 801d458:	9705      	strle	r7, [sp, #20]
 801d45a:	e7f6      	b.n	801d44a <_strtod_l+0x252>
 801d45c:	2c10      	cmp	r4, #16
 801d45e:	bfdf      	itttt	le
 801d460:	9905      	ldrle	r1, [sp, #20]
 801d462:	230a      	movle	r3, #10
 801d464:	fb03 2301 	mlale	r3, r3, r1, r2
 801d468:	9305      	strle	r3, [sp, #20]
 801d46a:	e7e0      	b.n	801d42e <_strtod_l+0x236>
 801d46c:	2300      	movs	r3, #0
 801d46e:	9304      	str	r3, [sp, #16]
 801d470:	2301      	movs	r3, #1
 801d472:	e77b      	b.n	801d36c <_strtod_l+0x174>
 801d474:	2700      	movs	r7, #0
 801d476:	1cb2      	adds	r2, r6, #2
 801d478:	9219      	str	r2, [sp, #100]	; 0x64
 801d47a:	78b2      	ldrb	r2, [r6, #2]
 801d47c:	e784      	b.n	801d388 <_strtod_l+0x190>
 801d47e:	bf00      	nop
 801d480:	080209c0 	.word	0x080209c0
 801d484:	080207f8 	.word	0x080207f8
 801d488:	7ff00000 	.word	0x7ff00000
 801d48c:	2701      	movs	r7, #1
 801d48e:	e7f2      	b.n	801d476 <_strtod_l+0x27e>
 801d490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d492:	1c51      	adds	r1, r2, #1
 801d494:	9119      	str	r1, [sp, #100]	; 0x64
 801d496:	7852      	ldrb	r2, [r2, #1]
 801d498:	2a30      	cmp	r2, #48	; 0x30
 801d49a:	d0f9      	beq.n	801d490 <_strtod_l+0x298>
 801d49c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801d4a0:	2908      	cmp	r1, #8
 801d4a2:	f63f af77 	bhi.w	801d394 <_strtod_l+0x19c>
 801d4a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801d4aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d4ac:	9209      	str	r2, [sp, #36]	; 0x24
 801d4ae:	f04f 0e0a 	mov.w	lr, #10
 801d4b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d4b4:	1c51      	adds	r1, r2, #1
 801d4b6:	9119      	str	r1, [sp, #100]	; 0x64
 801d4b8:	7852      	ldrb	r2, [r2, #1]
 801d4ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801d4be:	2d09      	cmp	r5, #9
 801d4c0:	d935      	bls.n	801d52e <_strtod_l+0x336>
 801d4c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d4c4:	1b49      	subs	r1, r1, r5
 801d4c6:	2908      	cmp	r1, #8
 801d4c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801d4cc:	dc02      	bgt.n	801d4d4 <_strtod_l+0x2dc>
 801d4ce:	4565      	cmp	r5, ip
 801d4d0:	bfa8      	it	ge
 801d4d2:	4665      	movge	r5, ip
 801d4d4:	b107      	cbz	r7, 801d4d8 <_strtod_l+0x2e0>
 801d4d6:	426d      	negs	r5, r5
 801d4d8:	2c00      	cmp	r4, #0
 801d4da:	d14c      	bne.n	801d576 <_strtod_l+0x37e>
 801d4dc:	9907      	ldr	r1, [sp, #28]
 801d4de:	4301      	orrs	r1, r0
 801d4e0:	f47f aecb 	bne.w	801d27a <_strtod_l+0x82>
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	f47f aee4 	bne.w	801d2b2 <_strtod_l+0xba>
 801d4ea:	2a69      	cmp	r2, #105	; 0x69
 801d4ec:	d026      	beq.n	801d53c <_strtod_l+0x344>
 801d4ee:	dc23      	bgt.n	801d538 <_strtod_l+0x340>
 801d4f0:	2a49      	cmp	r2, #73	; 0x49
 801d4f2:	d023      	beq.n	801d53c <_strtod_l+0x344>
 801d4f4:	2a4e      	cmp	r2, #78	; 0x4e
 801d4f6:	f47f aedc 	bne.w	801d2b2 <_strtod_l+0xba>
 801d4fa:	499d      	ldr	r1, [pc, #628]	; (801d770 <_strtod_l+0x578>)
 801d4fc:	a819      	add	r0, sp, #100	; 0x64
 801d4fe:	f000 ffab 	bl	801e458 <__match>
 801d502:	2800      	cmp	r0, #0
 801d504:	f43f aed5 	beq.w	801d2b2 <_strtod_l+0xba>
 801d508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d50a:	781b      	ldrb	r3, [r3, #0]
 801d50c:	2b28      	cmp	r3, #40	; 0x28
 801d50e:	d12c      	bne.n	801d56a <_strtod_l+0x372>
 801d510:	4998      	ldr	r1, [pc, #608]	; (801d774 <_strtod_l+0x57c>)
 801d512:	aa1c      	add	r2, sp, #112	; 0x70
 801d514:	a819      	add	r0, sp, #100	; 0x64
 801d516:	f000 ffb3 	bl	801e480 <__hexnan>
 801d51a:	2805      	cmp	r0, #5
 801d51c:	d125      	bne.n	801d56a <_strtod_l+0x372>
 801d51e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d520:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 801d524:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801d528:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801d52c:	e6a5      	b.n	801d27a <_strtod_l+0x82>
 801d52e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 801d532:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801d536:	e7bc      	b.n	801d4b2 <_strtod_l+0x2ba>
 801d538:	2a6e      	cmp	r2, #110	; 0x6e
 801d53a:	e7dc      	b.n	801d4f6 <_strtod_l+0x2fe>
 801d53c:	498e      	ldr	r1, [pc, #568]	; (801d778 <_strtod_l+0x580>)
 801d53e:	a819      	add	r0, sp, #100	; 0x64
 801d540:	f000 ff8a 	bl	801e458 <__match>
 801d544:	2800      	cmp	r0, #0
 801d546:	f43f aeb4 	beq.w	801d2b2 <_strtod_l+0xba>
 801d54a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d54c:	498b      	ldr	r1, [pc, #556]	; (801d77c <_strtod_l+0x584>)
 801d54e:	3b01      	subs	r3, #1
 801d550:	a819      	add	r0, sp, #100	; 0x64
 801d552:	9319      	str	r3, [sp, #100]	; 0x64
 801d554:	f000 ff80 	bl	801e458 <__match>
 801d558:	b910      	cbnz	r0, 801d560 <_strtod_l+0x368>
 801d55a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d55c:	3301      	adds	r3, #1
 801d55e:	9319      	str	r3, [sp, #100]	; 0x64
 801d560:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801d780 <_strtod_l+0x588>
 801d564:	f04f 0800 	mov.w	r8, #0
 801d568:	e687      	b.n	801d27a <_strtod_l+0x82>
 801d56a:	4886      	ldr	r0, [pc, #536]	; (801d784 <_strtod_l+0x58c>)
 801d56c:	f001 fda0 	bl	801f0b0 <nan>
 801d570:	4680      	mov	r8, r0
 801d572:	4689      	mov	r9, r1
 801d574:	e681      	b.n	801d27a <_strtod_l+0x82>
 801d576:	9b04      	ldr	r3, [sp, #16]
 801d578:	9806      	ldr	r0, [sp, #24]
 801d57a:	1aeb      	subs	r3, r5, r3
 801d57c:	f1bb 0f00 	cmp.w	fp, #0
 801d580:	bf08      	it	eq
 801d582:	46a3      	moveq	fp, r4
 801d584:	2c10      	cmp	r4, #16
 801d586:	9307      	str	r3, [sp, #28]
 801d588:	4626      	mov	r6, r4
 801d58a:	bfa8      	it	ge
 801d58c:	2610      	movge	r6, #16
 801d58e:	f7e2 ff91 	bl	80004b4 <__aeabi_ui2d>
 801d592:	2c09      	cmp	r4, #9
 801d594:	4680      	mov	r8, r0
 801d596:	4689      	mov	r9, r1
 801d598:	dd13      	ble.n	801d5c2 <_strtod_l+0x3ca>
 801d59a:	4b7b      	ldr	r3, [pc, #492]	; (801d788 <_strtod_l+0x590>)
 801d59c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d5a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d5a4:	f7e3 f800 	bl	80005a8 <__aeabi_dmul>
 801d5a8:	4680      	mov	r8, r0
 801d5aa:	9805      	ldr	r0, [sp, #20]
 801d5ac:	4689      	mov	r9, r1
 801d5ae:	f7e2 ff81 	bl	80004b4 <__aeabi_ui2d>
 801d5b2:	4602      	mov	r2, r0
 801d5b4:	460b      	mov	r3, r1
 801d5b6:	4640      	mov	r0, r8
 801d5b8:	4649      	mov	r1, r9
 801d5ba:	f7e2 fe3f 	bl	800023c <__adddf3>
 801d5be:	4680      	mov	r8, r0
 801d5c0:	4689      	mov	r9, r1
 801d5c2:	2c0f      	cmp	r4, #15
 801d5c4:	dc36      	bgt.n	801d634 <_strtod_l+0x43c>
 801d5c6:	9b07      	ldr	r3, [sp, #28]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	f43f ae56 	beq.w	801d27a <_strtod_l+0x82>
 801d5ce:	dd22      	ble.n	801d616 <_strtod_l+0x41e>
 801d5d0:	2b16      	cmp	r3, #22
 801d5d2:	dc09      	bgt.n	801d5e8 <_strtod_l+0x3f0>
 801d5d4:	496c      	ldr	r1, [pc, #432]	; (801d788 <_strtod_l+0x590>)
 801d5d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d5de:	4642      	mov	r2, r8
 801d5e0:	464b      	mov	r3, r9
 801d5e2:	f7e2 ffe1 	bl	80005a8 <__aeabi_dmul>
 801d5e6:	e7c3      	b.n	801d570 <_strtod_l+0x378>
 801d5e8:	9a07      	ldr	r2, [sp, #28]
 801d5ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801d5ee:	4293      	cmp	r3, r2
 801d5f0:	db20      	blt.n	801d634 <_strtod_l+0x43c>
 801d5f2:	4d65      	ldr	r5, [pc, #404]	; (801d788 <_strtod_l+0x590>)
 801d5f4:	f1c4 040f 	rsb	r4, r4, #15
 801d5f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801d5fc:	4642      	mov	r2, r8
 801d5fe:	464b      	mov	r3, r9
 801d600:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d604:	f7e2 ffd0 	bl	80005a8 <__aeabi_dmul>
 801d608:	9b07      	ldr	r3, [sp, #28]
 801d60a:	1b1c      	subs	r4, r3, r4
 801d60c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801d610:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d614:	e7e5      	b.n	801d5e2 <_strtod_l+0x3ea>
 801d616:	9b07      	ldr	r3, [sp, #28]
 801d618:	3316      	adds	r3, #22
 801d61a:	db0b      	blt.n	801d634 <_strtod_l+0x43c>
 801d61c:	9b04      	ldr	r3, [sp, #16]
 801d61e:	1b5d      	subs	r5, r3, r5
 801d620:	4b59      	ldr	r3, [pc, #356]	; (801d788 <_strtod_l+0x590>)
 801d622:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801d626:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d62a:	4640      	mov	r0, r8
 801d62c:	4649      	mov	r1, r9
 801d62e:	f7e3 f8e5 	bl	80007fc <__aeabi_ddiv>
 801d632:	e79d      	b.n	801d570 <_strtod_l+0x378>
 801d634:	9b07      	ldr	r3, [sp, #28]
 801d636:	1ba6      	subs	r6, r4, r6
 801d638:	441e      	add	r6, r3
 801d63a:	2e00      	cmp	r6, #0
 801d63c:	dd74      	ble.n	801d728 <_strtod_l+0x530>
 801d63e:	f016 030f 	ands.w	r3, r6, #15
 801d642:	d00a      	beq.n	801d65a <_strtod_l+0x462>
 801d644:	4950      	ldr	r1, [pc, #320]	; (801d788 <_strtod_l+0x590>)
 801d646:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d64a:	4642      	mov	r2, r8
 801d64c:	464b      	mov	r3, r9
 801d64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d652:	f7e2 ffa9 	bl	80005a8 <__aeabi_dmul>
 801d656:	4680      	mov	r8, r0
 801d658:	4689      	mov	r9, r1
 801d65a:	f036 060f 	bics.w	r6, r6, #15
 801d65e:	d052      	beq.n	801d706 <_strtod_l+0x50e>
 801d660:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 801d664:	dd27      	ble.n	801d6b6 <_strtod_l+0x4be>
 801d666:	f04f 0b00 	mov.w	fp, #0
 801d66a:	f8cd b010 	str.w	fp, [sp, #16]
 801d66e:	f8cd b020 	str.w	fp, [sp, #32]
 801d672:	f8cd b018 	str.w	fp, [sp, #24]
 801d676:	2322      	movs	r3, #34	; 0x22
 801d678:	f8df 9104 	ldr.w	r9, [pc, #260]	; 801d780 <_strtod_l+0x588>
 801d67c:	f8ca 3000 	str.w	r3, [sl]
 801d680:	f04f 0800 	mov.w	r8, #0
 801d684:	9b08      	ldr	r3, [sp, #32]
 801d686:	2b00      	cmp	r3, #0
 801d688:	f43f adf7 	beq.w	801d27a <_strtod_l+0x82>
 801d68c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d68e:	4650      	mov	r0, sl
 801d690:	f000 fff2 	bl	801e678 <_Bfree>
 801d694:	9906      	ldr	r1, [sp, #24]
 801d696:	4650      	mov	r0, sl
 801d698:	f000 ffee 	bl	801e678 <_Bfree>
 801d69c:	9904      	ldr	r1, [sp, #16]
 801d69e:	4650      	mov	r0, sl
 801d6a0:	f000 ffea 	bl	801e678 <_Bfree>
 801d6a4:	9908      	ldr	r1, [sp, #32]
 801d6a6:	4650      	mov	r0, sl
 801d6a8:	f000 ffe6 	bl	801e678 <_Bfree>
 801d6ac:	4659      	mov	r1, fp
 801d6ae:	4650      	mov	r0, sl
 801d6b0:	f000 ffe2 	bl	801e678 <_Bfree>
 801d6b4:	e5e1      	b.n	801d27a <_strtod_l+0x82>
 801d6b6:	4b35      	ldr	r3, [pc, #212]	; (801d78c <_strtod_l+0x594>)
 801d6b8:	9305      	str	r3, [sp, #20]
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	1136      	asrs	r6, r6, #4
 801d6be:	4640      	mov	r0, r8
 801d6c0:	4649      	mov	r1, r9
 801d6c2:	461f      	mov	r7, r3
 801d6c4:	2e01      	cmp	r6, #1
 801d6c6:	dc21      	bgt.n	801d70c <_strtod_l+0x514>
 801d6c8:	b10b      	cbz	r3, 801d6ce <_strtod_l+0x4d6>
 801d6ca:	4680      	mov	r8, r0
 801d6cc:	4689      	mov	r9, r1
 801d6ce:	4b2f      	ldr	r3, [pc, #188]	; (801d78c <_strtod_l+0x594>)
 801d6d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801d6d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801d6d8:	4642      	mov	r2, r8
 801d6da:	464b      	mov	r3, r9
 801d6dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d6e0:	f7e2 ff62 	bl	80005a8 <__aeabi_dmul>
 801d6e4:	4b26      	ldr	r3, [pc, #152]	; (801d780 <_strtod_l+0x588>)
 801d6e6:	460a      	mov	r2, r1
 801d6e8:	400b      	ands	r3, r1
 801d6ea:	4929      	ldr	r1, [pc, #164]	; (801d790 <_strtod_l+0x598>)
 801d6ec:	428b      	cmp	r3, r1
 801d6ee:	4680      	mov	r8, r0
 801d6f0:	d8b9      	bhi.n	801d666 <_strtod_l+0x46e>
 801d6f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d6f6:	428b      	cmp	r3, r1
 801d6f8:	bf86      	itte	hi
 801d6fa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 801d794 <_strtod_l+0x59c>
 801d6fe:	f04f 38ff 	movhi.w	r8, #4294967295
 801d702:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801d706:	2300      	movs	r3, #0
 801d708:	9305      	str	r3, [sp, #20]
 801d70a:	e07f      	b.n	801d80c <_strtod_l+0x614>
 801d70c:	07f2      	lsls	r2, r6, #31
 801d70e:	d505      	bpl.n	801d71c <_strtod_l+0x524>
 801d710:	9b05      	ldr	r3, [sp, #20]
 801d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d716:	f7e2 ff47 	bl	80005a8 <__aeabi_dmul>
 801d71a:	2301      	movs	r3, #1
 801d71c:	9a05      	ldr	r2, [sp, #20]
 801d71e:	3208      	adds	r2, #8
 801d720:	3701      	adds	r7, #1
 801d722:	1076      	asrs	r6, r6, #1
 801d724:	9205      	str	r2, [sp, #20]
 801d726:	e7cd      	b.n	801d6c4 <_strtod_l+0x4cc>
 801d728:	d0ed      	beq.n	801d706 <_strtod_l+0x50e>
 801d72a:	4276      	negs	r6, r6
 801d72c:	f016 020f 	ands.w	r2, r6, #15
 801d730:	d00a      	beq.n	801d748 <_strtod_l+0x550>
 801d732:	4b15      	ldr	r3, [pc, #84]	; (801d788 <_strtod_l+0x590>)
 801d734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d738:	4640      	mov	r0, r8
 801d73a:	4649      	mov	r1, r9
 801d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d740:	f7e3 f85c 	bl	80007fc <__aeabi_ddiv>
 801d744:	4680      	mov	r8, r0
 801d746:	4689      	mov	r9, r1
 801d748:	1136      	asrs	r6, r6, #4
 801d74a:	d0dc      	beq.n	801d706 <_strtod_l+0x50e>
 801d74c:	2e1f      	cmp	r6, #31
 801d74e:	dd23      	ble.n	801d798 <_strtod_l+0x5a0>
 801d750:	f04f 0b00 	mov.w	fp, #0
 801d754:	f8cd b010 	str.w	fp, [sp, #16]
 801d758:	f8cd b020 	str.w	fp, [sp, #32]
 801d75c:	f8cd b018 	str.w	fp, [sp, #24]
 801d760:	2322      	movs	r3, #34	; 0x22
 801d762:	f04f 0800 	mov.w	r8, #0
 801d766:	f04f 0900 	mov.w	r9, #0
 801d76a:	f8ca 3000 	str.w	r3, [sl]
 801d76e:	e789      	b.n	801d684 <_strtod_l+0x48c>
 801d770:	080207f5 	.word	0x080207f5
 801d774:	0802080c 	.word	0x0802080c
 801d778:	080207ec 	.word	0x080207ec
 801d77c:	080207ef 	.word	0x080207ef
 801d780:	7ff00000 	.word	0x7ff00000
 801d784:	08020b7f 	.word	0x08020b7f
 801d788:	08020a70 	.word	0x08020a70
 801d78c:	08020a48 	.word	0x08020a48
 801d790:	7ca00000 	.word	0x7ca00000
 801d794:	7fefffff 	.word	0x7fefffff
 801d798:	f016 0310 	ands.w	r3, r6, #16
 801d79c:	bf18      	it	ne
 801d79e:	236a      	movne	r3, #106	; 0x6a
 801d7a0:	4fb1      	ldr	r7, [pc, #708]	; (801da68 <_strtod_l+0x870>)
 801d7a2:	9305      	str	r3, [sp, #20]
 801d7a4:	4640      	mov	r0, r8
 801d7a6:	4649      	mov	r1, r9
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	07f2      	lsls	r2, r6, #31
 801d7ac:	d504      	bpl.n	801d7b8 <_strtod_l+0x5c0>
 801d7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d7b2:	f7e2 fef9 	bl	80005a8 <__aeabi_dmul>
 801d7b6:	2301      	movs	r3, #1
 801d7b8:	1076      	asrs	r6, r6, #1
 801d7ba:	f107 0708 	add.w	r7, r7, #8
 801d7be:	d1f4      	bne.n	801d7aa <_strtod_l+0x5b2>
 801d7c0:	b10b      	cbz	r3, 801d7c6 <_strtod_l+0x5ce>
 801d7c2:	4680      	mov	r8, r0
 801d7c4:	4689      	mov	r9, r1
 801d7c6:	9b05      	ldr	r3, [sp, #20]
 801d7c8:	b1c3      	cbz	r3, 801d7fc <_strtod_l+0x604>
 801d7ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d7ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	4649      	mov	r1, r9
 801d7d6:	dd11      	ble.n	801d7fc <_strtod_l+0x604>
 801d7d8:	2b1f      	cmp	r3, #31
 801d7da:	f340 8124 	ble.w	801da26 <_strtod_l+0x82e>
 801d7de:	2b34      	cmp	r3, #52	; 0x34
 801d7e0:	bfde      	ittt	le
 801d7e2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d7e6:	f04f 33ff 	movle.w	r3, #4294967295
 801d7ea:	fa03 f202 	lslle.w	r2, r3, r2
 801d7ee:	f04f 0800 	mov.w	r8, #0
 801d7f2:	bfcc      	ite	gt
 801d7f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801d7f8:	ea02 0901 	andle.w	r9, r2, r1
 801d7fc:	2200      	movs	r2, #0
 801d7fe:	2300      	movs	r3, #0
 801d800:	4640      	mov	r0, r8
 801d802:	4649      	mov	r1, r9
 801d804:	f7e3 f938 	bl	8000a78 <__aeabi_dcmpeq>
 801d808:	2800      	cmp	r0, #0
 801d80a:	d1a1      	bne.n	801d750 <_strtod_l+0x558>
 801d80c:	9b06      	ldr	r3, [sp, #24]
 801d80e:	9300      	str	r3, [sp, #0]
 801d810:	9908      	ldr	r1, [sp, #32]
 801d812:	4623      	mov	r3, r4
 801d814:	465a      	mov	r2, fp
 801d816:	4650      	mov	r0, sl
 801d818:	f000 ff96 	bl	801e748 <__s2b>
 801d81c:	9008      	str	r0, [sp, #32]
 801d81e:	2800      	cmp	r0, #0
 801d820:	f43f af21 	beq.w	801d666 <_strtod_l+0x46e>
 801d824:	9b04      	ldr	r3, [sp, #16]
 801d826:	1b5d      	subs	r5, r3, r5
 801d828:	9b07      	ldr	r3, [sp, #28]
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	bfb4      	ite	lt
 801d82e:	462b      	movlt	r3, r5
 801d830:	2300      	movge	r3, #0
 801d832:	930e      	str	r3, [sp, #56]	; 0x38
 801d834:	9b07      	ldr	r3, [sp, #28]
 801d836:	f04f 0b00 	mov.w	fp, #0
 801d83a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d83e:	9314      	str	r3, [sp, #80]	; 0x50
 801d840:	f8cd b010 	str.w	fp, [sp, #16]
 801d844:	9b08      	ldr	r3, [sp, #32]
 801d846:	4650      	mov	r0, sl
 801d848:	6859      	ldr	r1, [r3, #4]
 801d84a:	f000 fed5 	bl	801e5f8 <_Balloc>
 801d84e:	9006      	str	r0, [sp, #24]
 801d850:	2800      	cmp	r0, #0
 801d852:	f43f af10 	beq.w	801d676 <_strtod_l+0x47e>
 801d856:	9b08      	ldr	r3, [sp, #32]
 801d858:	691a      	ldr	r2, [r3, #16]
 801d85a:	3202      	adds	r2, #2
 801d85c:	f103 010c 	add.w	r1, r3, #12
 801d860:	0092      	lsls	r2, r2, #2
 801d862:	300c      	adds	r0, #12
 801d864:	f000 feba 	bl	801e5dc <memcpy>
 801d868:	ab1c      	add	r3, sp, #112	; 0x70
 801d86a:	9301      	str	r3, [sp, #4]
 801d86c:	ab1b      	add	r3, sp, #108	; 0x6c
 801d86e:	9300      	str	r3, [sp, #0]
 801d870:	4642      	mov	r2, r8
 801d872:	464b      	mov	r3, r9
 801d874:	4650      	mov	r0, sl
 801d876:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 801d87a:	f001 faa3 	bl	801edc4 <__d2b>
 801d87e:	901a      	str	r0, [sp, #104]	; 0x68
 801d880:	2800      	cmp	r0, #0
 801d882:	f43f aef8 	beq.w	801d676 <_strtod_l+0x47e>
 801d886:	2101      	movs	r1, #1
 801d888:	4650      	mov	r0, sl
 801d88a:	f000 fff5 	bl	801e878 <__i2b>
 801d88e:	9004      	str	r0, [sp, #16]
 801d890:	4603      	mov	r3, r0
 801d892:	2800      	cmp	r0, #0
 801d894:	f43f aeef 	beq.w	801d676 <_strtod_l+0x47e>
 801d898:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801d89a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801d89c:	2d00      	cmp	r5, #0
 801d89e:	bfab      	itete	ge
 801d8a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801d8a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 801d8a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 801d8a6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 801d8a8:	bfac      	ite	ge
 801d8aa:	18ee      	addge	r6, r5, r3
 801d8ac:	1b5c      	sublt	r4, r3, r5
 801d8ae:	9b05      	ldr	r3, [sp, #20]
 801d8b0:	1aed      	subs	r5, r5, r3
 801d8b2:	4415      	add	r5, r2
 801d8b4:	4b6d      	ldr	r3, [pc, #436]	; (801da6c <_strtod_l+0x874>)
 801d8b6:	3d01      	subs	r5, #1
 801d8b8:	429d      	cmp	r5, r3
 801d8ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d8be:	f280 80c4 	bge.w	801da4a <_strtod_l+0x852>
 801d8c2:	1b5b      	subs	r3, r3, r5
 801d8c4:	2b1f      	cmp	r3, #31
 801d8c6:	eba2 0203 	sub.w	r2, r2, r3
 801d8ca:	f04f 0701 	mov.w	r7, #1
 801d8ce:	f300 80b1 	bgt.w	801da34 <_strtod_l+0x83c>
 801d8d2:	fa07 f303 	lsl.w	r3, r7, r3
 801d8d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d8d8:	2500      	movs	r5, #0
 801d8da:	18b7      	adds	r7, r6, r2
 801d8dc:	9b05      	ldr	r3, [sp, #20]
 801d8de:	42be      	cmp	r6, r7
 801d8e0:	4414      	add	r4, r2
 801d8e2:	441c      	add	r4, r3
 801d8e4:	4633      	mov	r3, r6
 801d8e6:	bfa8      	it	ge
 801d8e8:	463b      	movge	r3, r7
 801d8ea:	42a3      	cmp	r3, r4
 801d8ec:	bfa8      	it	ge
 801d8ee:	4623      	movge	r3, r4
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	bfc2      	ittt	gt
 801d8f4:	1aff      	subgt	r7, r7, r3
 801d8f6:	1ae4      	subgt	r4, r4, r3
 801d8f8:	1af6      	subgt	r6, r6, r3
 801d8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	dd17      	ble.n	801d930 <_strtod_l+0x738>
 801d900:	9904      	ldr	r1, [sp, #16]
 801d902:	461a      	mov	r2, r3
 801d904:	4650      	mov	r0, sl
 801d906:	f001 f875 	bl	801e9f4 <__pow5mult>
 801d90a:	9004      	str	r0, [sp, #16]
 801d90c:	2800      	cmp	r0, #0
 801d90e:	f43f aeb2 	beq.w	801d676 <_strtod_l+0x47e>
 801d912:	4601      	mov	r1, r0
 801d914:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d916:	4650      	mov	r0, sl
 801d918:	f000 ffc4 	bl	801e8a4 <__multiply>
 801d91c:	9009      	str	r0, [sp, #36]	; 0x24
 801d91e:	2800      	cmp	r0, #0
 801d920:	f43f aea9 	beq.w	801d676 <_strtod_l+0x47e>
 801d924:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d926:	4650      	mov	r0, sl
 801d928:	f000 fea6 	bl	801e678 <_Bfree>
 801d92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d92e:	931a      	str	r3, [sp, #104]	; 0x68
 801d930:	2f00      	cmp	r7, #0
 801d932:	f300 808e 	bgt.w	801da52 <_strtod_l+0x85a>
 801d936:	9b07      	ldr	r3, [sp, #28]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	dd08      	ble.n	801d94e <_strtod_l+0x756>
 801d93c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d93e:	9906      	ldr	r1, [sp, #24]
 801d940:	4650      	mov	r0, sl
 801d942:	f001 f857 	bl	801e9f4 <__pow5mult>
 801d946:	9006      	str	r0, [sp, #24]
 801d948:	2800      	cmp	r0, #0
 801d94a:	f43f ae94 	beq.w	801d676 <_strtod_l+0x47e>
 801d94e:	2c00      	cmp	r4, #0
 801d950:	dd08      	ble.n	801d964 <_strtod_l+0x76c>
 801d952:	9906      	ldr	r1, [sp, #24]
 801d954:	4622      	mov	r2, r4
 801d956:	4650      	mov	r0, sl
 801d958:	f001 f8a6 	bl	801eaa8 <__lshift>
 801d95c:	9006      	str	r0, [sp, #24]
 801d95e:	2800      	cmp	r0, #0
 801d960:	f43f ae89 	beq.w	801d676 <_strtod_l+0x47e>
 801d964:	2e00      	cmp	r6, #0
 801d966:	dd08      	ble.n	801d97a <_strtod_l+0x782>
 801d968:	9904      	ldr	r1, [sp, #16]
 801d96a:	4632      	mov	r2, r6
 801d96c:	4650      	mov	r0, sl
 801d96e:	f001 f89b 	bl	801eaa8 <__lshift>
 801d972:	9004      	str	r0, [sp, #16]
 801d974:	2800      	cmp	r0, #0
 801d976:	f43f ae7e 	beq.w	801d676 <_strtod_l+0x47e>
 801d97a:	9a06      	ldr	r2, [sp, #24]
 801d97c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d97e:	4650      	mov	r0, sl
 801d980:	f001 f91e 	bl	801ebc0 <__mdiff>
 801d984:	4683      	mov	fp, r0
 801d986:	2800      	cmp	r0, #0
 801d988:	f43f ae75 	beq.w	801d676 <_strtod_l+0x47e>
 801d98c:	2400      	movs	r4, #0
 801d98e:	68c3      	ldr	r3, [r0, #12]
 801d990:	9904      	ldr	r1, [sp, #16]
 801d992:	60c4      	str	r4, [r0, #12]
 801d994:	930b      	str	r3, [sp, #44]	; 0x2c
 801d996:	f001 f8f7 	bl	801eb88 <__mcmp>
 801d99a:	42a0      	cmp	r0, r4
 801d99c:	da6c      	bge.n	801da78 <_strtod_l+0x880>
 801d99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9a0:	ea53 0308 	orrs.w	r3, r3, r8
 801d9a4:	f040 8092 	bne.w	801dacc <_strtod_l+0x8d4>
 801d9a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	f040 808d 	bne.w	801dacc <_strtod_l+0x8d4>
 801d9b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d9b6:	0d1b      	lsrs	r3, r3, #20
 801d9b8:	051b      	lsls	r3, r3, #20
 801d9ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d9be:	f240 8085 	bls.w	801dacc <_strtod_l+0x8d4>
 801d9c2:	f8db 3014 	ldr.w	r3, [fp, #20]
 801d9c6:	b91b      	cbnz	r3, 801d9d0 <_strtod_l+0x7d8>
 801d9c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 801d9cc:	2b01      	cmp	r3, #1
 801d9ce:	dd7d      	ble.n	801dacc <_strtod_l+0x8d4>
 801d9d0:	4659      	mov	r1, fp
 801d9d2:	2201      	movs	r2, #1
 801d9d4:	4650      	mov	r0, sl
 801d9d6:	f001 f867 	bl	801eaa8 <__lshift>
 801d9da:	9904      	ldr	r1, [sp, #16]
 801d9dc:	4683      	mov	fp, r0
 801d9de:	f001 f8d3 	bl	801eb88 <__mcmp>
 801d9e2:	2800      	cmp	r0, #0
 801d9e4:	dd72      	ble.n	801dacc <_strtod_l+0x8d4>
 801d9e6:	9905      	ldr	r1, [sp, #20]
 801d9e8:	4a21      	ldr	r2, [pc, #132]	; (801da70 <_strtod_l+0x878>)
 801d9ea:	464b      	mov	r3, r9
 801d9ec:	2900      	cmp	r1, #0
 801d9ee:	f000 808d 	beq.w	801db0c <_strtod_l+0x914>
 801d9f2:	ea02 0109 	and.w	r1, r2, r9
 801d9f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d9fa:	f300 8087 	bgt.w	801db0c <_strtod_l+0x914>
 801d9fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801da02:	f77f aead 	ble.w	801d760 <_strtod_l+0x568>
 801da06:	4b1b      	ldr	r3, [pc, #108]	; (801da74 <_strtod_l+0x87c>)
 801da08:	4640      	mov	r0, r8
 801da0a:	4649      	mov	r1, r9
 801da0c:	2200      	movs	r2, #0
 801da0e:	f7e2 fdcb 	bl	80005a8 <__aeabi_dmul>
 801da12:	460b      	mov	r3, r1
 801da14:	4303      	orrs	r3, r0
 801da16:	bf08      	it	eq
 801da18:	2322      	moveq	r3, #34	; 0x22
 801da1a:	4680      	mov	r8, r0
 801da1c:	4689      	mov	r9, r1
 801da1e:	bf08      	it	eq
 801da20:	f8ca 3000 	streq.w	r3, [sl]
 801da24:	e632      	b.n	801d68c <_strtod_l+0x494>
 801da26:	f04f 32ff 	mov.w	r2, #4294967295
 801da2a:	fa02 f303 	lsl.w	r3, r2, r3
 801da2e:	ea03 0808 	and.w	r8, r3, r8
 801da32:	e6e3      	b.n	801d7fc <_strtod_l+0x604>
 801da34:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801da38:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801da3c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801da40:	35e2      	adds	r5, #226	; 0xe2
 801da42:	fa07 f505 	lsl.w	r5, r7, r5
 801da46:	970f      	str	r7, [sp, #60]	; 0x3c
 801da48:	e747      	b.n	801d8da <_strtod_l+0x6e2>
 801da4a:	2301      	movs	r3, #1
 801da4c:	2500      	movs	r5, #0
 801da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 801da50:	e743      	b.n	801d8da <_strtod_l+0x6e2>
 801da52:	991a      	ldr	r1, [sp, #104]	; 0x68
 801da54:	463a      	mov	r2, r7
 801da56:	4650      	mov	r0, sl
 801da58:	f001 f826 	bl	801eaa8 <__lshift>
 801da5c:	901a      	str	r0, [sp, #104]	; 0x68
 801da5e:	2800      	cmp	r0, #0
 801da60:	f47f af69 	bne.w	801d936 <_strtod_l+0x73e>
 801da64:	e607      	b.n	801d676 <_strtod_l+0x47e>
 801da66:	bf00      	nop
 801da68:	08020820 	.word	0x08020820
 801da6c:	fffffc02 	.word	0xfffffc02
 801da70:	7ff00000 	.word	0x7ff00000
 801da74:	39500000 	.word	0x39500000
 801da78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801da7c:	d165      	bne.n	801db4a <_strtod_l+0x952>
 801da7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801da80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801da84:	b35a      	cbz	r2, 801dade <_strtod_l+0x8e6>
 801da86:	4a9a      	ldr	r2, [pc, #616]	; (801dcf0 <_strtod_l+0xaf8>)
 801da88:	4293      	cmp	r3, r2
 801da8a:	d12b      	bne.n	801dae4 <_strtod_l+0x8ec>
 801da8c:	9b05      	ldr	r3, [sp, #20]
 801da8e:	4641      	mov	r1, r8
 801da90:	b303      	cbz	r3, 801dad4 <_strtod_l+0x8dc>
 801da92:	4b98      	ldr	r3, [pc, #608]	; (801dcf4 <_strtod_l+0xafc>)
 801da94:	464a      	mov	r2, r9
 801da96:	4013      	ands	r3, r2
 801da98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801da9c:	f04f 32ff 	mov.w	r2, #4294967295
 801daa0:	d81b      	bhi.n	801dada <_strtod_l+0x8e2>
 801daa2:	0d1b      	lsrs	r3, r3, #20
 801daa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801daa8:	fa02 f303 	lsl.w	r3, r2, r3
 801daac:	4299      	cmp	r1, r3
 801daae:	d119      	bne.n	801dae4 <_strtod_l+0x8ec>
 801dab0:	4b91      	ldr	r3, [pc, #580]	; (801dcf8 <_strtod_l+0xb00>)
 801dab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dab4:	429a      	cmp	r2, r3
 801dab6:	d102      	bne.n	801dabe <_strtod_l+0x8c6>
 801dab8:	3101      	adds	r1, #1
 801daba:	f43f addc 	beq.w	801d676 <_strtod_l+0x47e>
 801dabe:	4b8d      	ldr	r3, [pc, #564]	; (801dcf4 <_strtod_l+0xafc>)
 801dac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dac2:	401a      	ands	r2, r3
 801dac4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 801dac8:	f04f 0800 	mov.w	r8, #0
 801dacc:	9b05      	ldr	r3, [sp, #20]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d199      	bne.n	801da06 <_strtod_l+0x80e>
 801dad2:	e5db      	b.n	801d68c <_strtod_l+0x494>
 801dad4:	f04f 33ff 	mov.w	r3, #4294967295
 801dad8:	e7e8      	b.n	801daac <_strtod_l+0x8b4>
 801dada:	4613      	mov	r3, r2
 801dadc:	e7e6      	b.n	801daac <_strtod_l+0x8b4>
 801dade:	ea53 0308 	orrs.w	r3, r3, r8
 801dae2:	d080      	beq.n	801d9e6 <_strtod_l+0x7ee>
 801dae4:	b1e5      	cbz	r5, 801db20 <_strtod_l+0x928>
 801dae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dae8:	421d      	tst	r5, r3
 801daea:	d0ef      	beq.n	801dacc <_strtod_l+0x8d4>
 801daec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801daee:	9a05      	ldr	r2, [sp, #20]
 801daf0:	4640      	mov	r0, r8
 801daf2:	4649      	mov	r1, r9
 801daf4:	b1c3      	cbz	r3, 801db28 <_strtod_l+0x930>
 801daf6:	f7ff fb5e 	bl	801d1b6 <sulp>
 801dafa:	4602      	mov	r2, r0
 801dafc:	460b      	mov	r3, r1
 801dafe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801db02:	f7e2 fb9b 	bl	800023c <__adddf3>
 801db06:	4680      	mov	r8, r0
 801db08:	4689      	mov	r9, r1
 801db0a:	e7df      	b.n	801dacc <_strtod_l+0x8d4>
 801db0c:	4013      	ands	r3, r2
 801db0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801db12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801db16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801db1a:	f04f 38ff 	mov.w	r8, #4294967295
 801db1e:	e7d5      	b.n	801dacc <_strtod_l+0x8d4>
 801db20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db22:	ea13 0f08 	tst.w	r3, r8
 801db26:	e7e0      	b.n	801daea <_strtod_l+0x8f2>
 801db28:	f7ff fb45 	bl	801d1b6 <sulp>
 801db2c:	4602      	mov	r2, r0
 801db2e:	460b      	mov	r3, r1
 801db30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801db34:	f7e2 fb80 	bl	8000238 <__aeabi_dsub>
 801db38:	2200      	movs	r2, #0
 801db3a:	2300      	movs	r3, #0
 801db3c:	4680      	mov	r8, r0
 801db3e:	4689      	mov	r9, r1
 801db40:	f7e2 ff9a 	bl	8000a78 <__aeabi_dcmpeq>
 801db44:	2800      	cmp	r0, #0
 801db46:	d0c1      	beq.n	801dacc <_strtod_l+0x8d4>
 801db48:	e60a      	b.n	801d760 <_strtod_l+0x568>
 801db4a:	9904      	ldr	r1, [sp, #16]
 801db4c:	4658      	mov	r0, fp
 801db4e:	f001 f995 	bl	801ee7c <__ratio>
 801db52:	2200      	movs	r2, #0
 801db54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801db58:	4606      	mov	r6, r0
 801db5a:	460f      	mov	r7, r1
 801db5c:	f7e2 ffa0 	bl	8000aa0 <__aeabi_dcmple>
 801db60:	2800      	cmp	r0, #0
 801db62:	d070      	beq.n	801dc46 <_strtod_l+0xa4e>
 801db64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db66:	2b00      	cmp	r3, #0
 801db68:	d042      	beq.n	801dbf0 <_strtod_l+0x9f8>
 801db6a:	4f64      	ldr	r7, [pc, #400]	; (801dcfc <_strtod_l+0xb04>)
 801db6c:	2600      	movs	r6, #0
 801db6e:	4d63      	ldr	r5, [pc, #396]	; (801dcfc <_strtod_l+0xb04>)
 801db70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db76:	0d1b      	lsrs	r3, r3, #20
 801db78:	051b      	lsls	r3, r3, #20
 801db7a:	930f      	str	r3, [sp, #60]	; 0x3c
 801db7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801db7e:	4b60      	ldr	r3, [pc, #384]	; (801dd00 <_strtod_l+0xb08>)
 801db80:	429a      	cmp	r2, r3
 801db82:	f040 80c5 	bne.w	801dd10 <_strtod_l+0xb18>
 801db86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db88:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 801db8c:	4640      	mov	r0, r8
 801db8e:	4649      	mov	r1, r9
 801db90:	f001 f89e 	bl	801ecd0 <__ulp>
 801db94:	4602      	mov	r2, r0
 801db96:	460b      	mov	r3, r1
 801db98:	4630      	mov	r0, r6
 801db9a:	4639      	mov	r1, r7
 801db9c:	f7e2 fd04 	bl	80005a8 <__aeabi_dmul>
 801dba0:	4642      	mov	r2, r8
 801dba2:	464b      	mov	r3, r9
 801dba4:	f7e2 fb4a 	bl	800023c <__adddf3>
 801dba8:	460b      	mov	r3, r1
 801dbaa:	4952      	ldr	r1, [pc, #328]	; (801dcf4 <_strtod_l+0xafc>)
 801dbac:	4a55      	ldr	r2, [pc, #340]	; (801dd04 <_strtod_l+0xb0c>)
 801dbae:	4019      	ands	r1, r3
 801dbb0:	4291      	cmp	r1, r2
 801dbb2:	4680      	mov	r8, r0
 801dbb4:	d95d      	bls.n	801dc72 <_strtod_l+0xa7a>
 801dbb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dbb8:	4b4f      	ldr	r3, [pc, #316]	; (801dcf8 <_strtod_l+0xb00>)
 801dbba:	429a      	cmp	r2, r3
 801dbbc:	d103      	bne.n	801dbc6 <_strtod_l+0x9ce>
 801dbbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbc0:	3301      	adds	r3, #1
 801dbc2:	f43f ad58 	beq.w	801d676 <_strtod_l+0x47e>
 801dbc6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801dcf8 <_strtod_l+0xb00>
 801dbca:	f04f 38ff 	mov.w	r8, #4294967295
 801dbce:	991a      	ldr	r1, [sp, #104]	; 0x68
 801dbd0:	4650      	mov	r0, sl
 801dbd2:	f000 fd51 	bl	801e678 <_Bfree>
 801dbd6:	9906      	ldr	r1, [sp, #24]
 801dbd8:	4650      	mov	r0, sl
 801dbda:	f000 fd4d 	bl	801e678 <_Bfree>
 801dbde:	9904      	ldr	r1, [sp, #16]
 801dbe0:	4650      	mov	r0, sl
 801dbe2:	f000 fd49 	bl	801e678 <_Bfree>
 801dbe6:	4659      	mov	r1, fp
 801dbe8:	4650      	mov	r0, sl
 801dbea:	f000 fd45 	bl	801e678 <_Bfree>
 801dbee:	e629      	b.n	801d844 <_strtod_l+0x64c>
 801dbf0:	f1b8 0f00 	cmp.w	r8, #0
 801dbf4:	d119      	bne.n	801dc2a <_strtod_l+0xa32>
 801dbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dbfc:	b9e3      	cbnz	r3, 801dc38 <_strtod_l+0xa40>
 801dbfe:	4b3f      	ldr	r3, [pc, #252]	; (801dcfc <_strtod_l+0xb04>)
 801dc00:	2200      	movs	r2, #0
 801dc02:	4630      	mov	r0, r6
 801dc04:	4639      	mov	r1, r7
 801dc06:	f7e2 ff41 	bl	8000a8c <__aeabi_dcmplt>
 801dc0a:	b9c8      	cbnz	r0, 801dc40 <_strtod_l+0xa48>
 801dc0c:	4b3e      	ldr	r3, [pc, #248]	; (801dd08 <_strtod_l+0xb10>)
 801dc0e:	2200      	movs	r2, #0
 801dc10:	4630      	mov	r0, r6
 801dc12:	4639      	mov	r1, r7
 801dc14:	f7e2 fcc8 	bl	80005a8 <__aeabi_dmul>
 801dc18:	4604      	mov	r4, r0
 801dc1a:	460d      	mov	r5, r1
 801dc1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801dc20:	9416      	str	r4, [sp, #88]	; 0x58
 801dc22:	9317      	str	r3, [sp, #92]	; 0x5c
 801dc24:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 801dc28:	e7a2      	b.n	801db70 <_strtod_l+0x978>
 801dc2a:	f1b8 0f01 	cmp.w	r8, #1
 801dc2e:	d103      	bne.n	801dc38 <_strtod_l+0xa40>
 801dc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	f43f ad94 	beq.w	801d760 <_strtod_l+0x568>
 801dc38:	4f34      	ldr	r7, [pc, #208]	; (801dd0c <_strtod_l+0xb14>)
 801dc3a:	2600      	movs	r6, #0
 801dc3c:	2400      	movs	r4, #0
 801dc3e:	e796      	b.n	801db6e <_strtod_l+0x976>
 801dc40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc42:	4d31      	ldr	r5, [pc, #196]	; (801dd08 <_strtod_l+0xb10>)
 801dc44:	e7ea      	b.n	801dc1c <_strtod_l+0xa24>
 801dc46:	4b30      	ldr	r3, [pc, #192]	; (801dd08 <_strtod_l+0xb10>)
 801dc48:	2200      	movs	r2, #0
 801dc4a:	4630      	mov	r0, r6
 801dc4c:	4639      	mov	r1, r7
 801dc4e:	f7e2 fcab 	bl	80005a8 <__aeabi_dmul>
 801dc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc54:	4604      	mov	r4, r0
 801dc56:	460d      	mov	r5, r1
 801dc58:	b933      	cbnz	r3, 801dc68 <_strtod_l+0xa70>
 801dc5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dc5e:	9010      	str	r0, [sp, #64]	; 0x40
 801dc60:	9311      	str	r3, [sp, #68]	; 0x44
 801dc62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801dc66:	e783      	b.n	801db70 <_strtod_l+0x978>
 801dc68:	4602      	mov	r2, r0
 801dc6a:	460b      	mov	r3, r1
 801dc6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801dc70:	e7f7      	b.n	801dc62 <_strtod_l+0xa6a>
 801dc72:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801dc76:	9b05      	ldr	r3, [sp, #20]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d1a8      	bne.n	801dbce <_strtod_l+0x9d6>
 801dc7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dc80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dc82:	0d1b      	lsrs	r3, r3, #20
 801dc84:	051b      	lsls	r3, r3, #20
 801dc86:	429a      	cmp	r2, r3
 801dc88:	d1a1      	bne.n	801dbce <_strtod_l+0x9d6>
 801dc8a:	4620      	mov	r0, r4
 801dc8c:	4629      	mov	r1, r5
 801dc8e:	f7e3 f909 	bl	8000ea4 <__aeabi_d2lz>
 801dc92:	f7e2 fc5b 	bl	800054c <__aeabi_l2d>
 801dc96:	4602      	mov	r2, r0
 801dc98:	460b      	mov	r3, r1
 801dc9a:	4620      	mov	r0, r4
 801dc9c:	4629      	mov	r1, r5
 801dc9e:	f7e2 facb 	bl	8000238 <__aeabi_dsub>
 801dca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dca8:	ea43 0308 	orr.w	r3, r3, r8
 801dcac:	4313      	orrs	r3, r2
 801dcae:	4604      	mov	r4, r0
 801dcb0:	460d      	mov	r5, r1
 801dcb2:	d068      	beq.n	801dd86 <_strtod_l+0xb8e>
 801dcb4:	a30a      	add	r3, pc, #40	; (adr r3, 801dce0 <_strtod_l+0xae8>)
 801dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcba:	f7e2 fee7 	bl	8000a8c <__aeabi_dcmplt>
 801dcbe:	2800      	cmp	r0, #0
 801dcc0:	f47f ace4 	bne.w	801d68c <_strtod_l+0x494>
 801dcc4:	a308      	add	r3, pc, #32	; (adr r3, 801dce8 <_strtod_l+0xaf0>)
 801dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcca:	4620      	mov	r0, r4
 801dccc:	4629      	mov	r1, r5
 801dcce:	f7e2 fefb 	bl	8000ac8 <__aeabi_dcmpgt>
 801dcd2:	2800      	cmp	r0, #0
 801dcd4:	f43f af7b 	beq.w	801dbce <_strtod_l+0x9d6>
 801dcd8:	e4d8      	b.n	801d68c <_strtod_l+0x494>
 801dcda:	bf00      	nop
 801dcdc:	f3af 8000 	nop.w
 801dce0:	94a03595 	.word	0x94a03595
 801dce4:	3fdfffff 	.word	0x3fdfffff
 801dce8:	35afe535 	.word	0x35afe535
 801dcec:	3fe00000 	.word	0x3fe00000
 801dcf0:	000fffff 	.word	0x000fffff
 801dcf4:	7ff00000 	.word	0x7ff00000
 801dcf8:	7fefffff 	.word	0x7fefffff
 801dcfc:	3ff00000 	.word	0x3ff00000
 801dd00:	7fe00000 	.word	0x7fe00000
 801dd04:	7c9fffff 	.word	0x7c9fffff
 801dd08:	3fe00000 	.word	0x3fe00000
 801dd0c:	bff00000 	.word	0xbff00000
 801dd10:	9b05      	ldr	r3, [sp, #20]
 801dd12:	b313      	cbz	r3, 801dd5a <_strtod_l+0xb62>
 801dd14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801dd1a:	d81e      	bhi.n	801dd5a <_strtod_l+0xb62>
 801dd1c:	a326      	add	r3, pc, #152	; (adr r3, 801ddb8 <_strtod_l+0xbc0>)
 801dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd22:	4620      	mov	r0, r4
 801dd24:	4629      	mov	r1, r5
 801dd26:	f7e2 febb 	bl	8000aa0 <__aeabi_dcmple>
 801dd2a:	b190      	cbz	r0, 801dd52 <_strtod_l+0xb5a>
 801dd2c:	4629      	mov	r1, r5
 801dd2e:	4620      	mov	r0, r4
 801dd30:	f7e2 fefc 	bl	8000b2c <__aeabi_d2uiz>
 801dd34:	2801      	cmp	r0, #1
 801dd36:	bf38      	it	cc
 801dd38:	2001      	movcc	r0, #1
 801dd3a:	f7e2 fbbb 	bl	80004b4 <__aeabi_ui2d>
 801dd3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd40:	4604      	mov	r4, r0
 801dd42:	460d      	mov	r5, r1
 801dd44:	b9d3      	cbnz	r3, 801dd7c <_strtod_l+0xb84>
 801dd46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dd4a:	9012      	str	r0, [sp, #72]	; 0x48
 801dd4c:	9313      	str	r3, [sp, #76]	; 0x4c
 801dd4e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801dd52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dd54:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 801dd58:	1a9f      	subs	r7, r3, r2
 801dd5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801dd5e:	f000 ffb7 	bl	801ecd0 <__ulp>
 801dd62:	4602      	mov	r2, r0
 801dd64:	460b      	mov	r3, r1
 801dd66:	4630      	mov	r0, r6
 801dd68:	4639      	mov	r1, r7
 801dd6a:	f7e2 fc1d 	bl	80005a8 <__aeabi_dmul>
 801dd6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801dd72:	f7e2 fa63 	bl	800023c <__adddf3>
 801dd76:	4680      	mov	r8, r0
 801dd78:	4689      	mov	r9, r1
 801dd7a:	e77c      	b.n	801dc76 <_strtod_l+0xa7e>
 801dd7c:	4602      	mov	r2, r0
 801dd7e:	460b      	mov	r3, r1
 801dd80:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801dd84:	e7e3      	b.n	801dd4e <_strtod_l+0xb56>
 801dd86:	a30e      	add	r3, pc, #56	; (adr r3, 801ddc0 <_strtod_l+0xbc8>)
 801dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd8c:	f7e2 fe7e 	bl	8000a8c <__aeabi_dcmplt>
 801dd90:	e79f      	b.n	801dcd2 <_strtod_l+0xada>
 801dd92:	2300      	movs	r3, #0
 801dd94:	930a      	str	r3, [sp, #40]	; 0x28
 801dd96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dd98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dd9a:	6013      	str	r3, [r2, #0]
 801dd9c:	f7ff ba71 	b.w	801d282 <_strtod_l+0x8a>
 801dda0:	2a65      	cmp	r2, #101	; 0x65
 801dda2:	f43f ab63 	beq.w	801d46c <_strtod_l+0x274>
 801dda6:	2a45      	cmp	r2, #69	; 0x45
 801dda8:	f43f ab60 	beq.w	801d46c <_strtod_l+0x274>
 801ddac:	2301      	movs	r3, #1
 801ddae:	f7ff bb95 	b.w	801d4dc <_strtod_l+0x2e4>
 801ddb2:	bf00      	nop
 801ddb4:	f3af 8000 	nop.w
 801ddb8:	ffc00000 	.word	0xffc00000
 801ddbc:	41dfffff 	.word	0x41dfffff
 801ddc0:	94a03595 	.word	0x94a03595
 801ddc4:	3fcfffff 	.word	0x3fcfffff

0801ddc8 <strtod>:
 801ddc8:	460a      	mov	r2, r1
 801ddca:	4601      	mov	r1, r0
 801ddcc:	4802      	ldr	r0, [pc, #8]	; (801ddd8 <strtod+0x10>)
 801ddce:	4b03      	ldr	r3, [pc, #12]	; (801dddc <strtod+0x14>)
 801ddd0:	6800      	ldr	r0, [r0, #0]
 801ddd2:	f7ff ba11 	b.w	801d1f8 <_strtod_l>
 801ddd6:	bf00      	nop
 801ddd8:	2000014c 	.word	0x2000014c
 801dddc:	200001b4 	.word	0x200001b4

0801dde0 <_strtol_l.constprop.0>:
 801dde0:	2b01      	cmp	r3, #1
 801dde2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dde6:	4680      	mov	r8, r0
 801dde8:	d001      	beq.n	801ddee <_strtol_l.constprop.0+0xe>
 801ddea:	2b24      	cmp	r3, #36	; 0x24
 801ddec:	d906      	bls.n	801ddfc <_strtol_l.constprop.0+0x1c>
 801ddee:	f7ff f99d 	bl	801d12c <__errno>
 801ddf2:	2316      	movs	r3, #22
 801ddf4:	6003      	str	r3, [r0, #0]
 801ddf6:	2000      	movs	r0, #0
 801ddf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddfc:	4f35      	ldr	r7, [pc, #212]	; (801ded4 <_strtol_l.constprop.0+0xf4>)
 801ddfe:	460d      	mov	r5, r1
 801de00:	4628      	mov	r0, r5
 801de02:	f815 4b01 	ldrb.w	r4, [r5], #1
 801de06:	5de6      	ldrb	r6, [r4, r7]
 801de08:	f016 0608 	ands.w	r6, r6, #8
 801de0c:	d1f8      	bne.n	801de00 <_strtol_l.constprop.0+0x20>
 801de0e:	2c2d      	cmp	r4, #45	; 0x2d
 801de10:	d12f      	bne.n	801de72 <_strtol_l.constprop.0+0x92>
 801de12:	782c      	ldrb	r4, [r5, #0]
 801de14:	2601      	movs	r6, #1
 801de16:	1c85      	adds	r5, r0, #2
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d057      	beq.n	801decc <_strtol_l.constprop.0+0xec>
 801de1c:	2b10      	cmp	r3, #16
 801de1e:	d109      	bne.n	801de34 <_strtol_l.constprop.0+0x54>
 801de20:	2c30      	cmp	r4, #48	; 0x30
 801de22:	d107      	bne.n	801de34 <_strtol_l.constprop.0+0x54>
 801de24:	7828      	ldrb	r0, [r5, #0]
 801de26:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801de2a:	2858      	cmp	r0, #88	; 0x58
 801de2c:	d149      	bne.n	801dec2 <_strtol_l.constprop.0+0xe2>
 801de2e:	786c      	ldrb	r4, [r5, #1]
 801de30:	2310      	movs	r3, #16
 801de32:	3502      	adds	r5, #2
 801de34:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 801de38:	f10e 3eff 	add.w	lr, lr, #4294967295
 801de3c:	2700      	movs	r7, #0
 801de3e:	fbbe f9f3 	udiv	r9, lr, r3
 801de42:	4638      	mov	r0, r7
 801de44:	fb03 ea19 	mls	sl, r3, r9, lr
 801de48:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801de4c:	f1bc 0f09 	cmp.w	ip, #9
 801de50:	d814      	bhi.n	801de7c <_strtol_l.constprop.0+0x9c>
 801de52:	4664      	mov	r4, ip
 801de54:	42a3      	cmp	r3, r4
 801de56:	dd22      	ble.n	801de9e <_strtol_l.constprop.0+0xbe>
 801de58:	2f00      	cmp	r7, #0
 801de5a:	db1d      	blt.n	801de98 <_strtol_l.constprop.0+0xb8>
 801de5c:	4581      	cmp	r9, r0
 801de5e:	d31b      	bcc.n	801de98 <_strtol_l.constprop.0+0xb8>
 801de60:	d101      	bne.n	801de66 <_strtol_l.constprop.0+0x86>
 801de62:	45a2      	cmp	sl, r4
 801de64:	db18      	blt.n	801de98 <_strtol_l.constprop.0+0xb8>
 801de66:	fb00 4003 	mla	r0, r0, r3, r4
 801de6a:	2701      	movs	r7, #1
 801de6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801de70:	e7ea      	b.n	801de48 <_strtol_l.constprop.0+0x68>
 801de72:	2c2b      	cmp	r4, #43	; 0x2b
 801de74:	bf04      	itt	eq
 801de76:	782c      	ldrbeq	r4, [r5, #0]
 801de78:	1c85      	addeq	r5, r0, #2
 801de7a:	e7cd      	b.n	801de18 <_strtol_l.constprop.0+0x38>
 801de7c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801de80:	f1bc 0f19 	cmp.w	ip, #25
 801de84:	d801      	bhi.n	801de8a <_strtol_l.constprop.0+0xaa>
 801de86:	3c37      	subs	r4, #55	; 0x37
 801de88:	e7e4      	b.n	801de54 <_strtol_l.constprop.0+0x74>
 801de8a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801de8e:	f1bc 0f19 	cmp.w	ip, #25
 801de92:	d804      	bhi.n	801de9e <_strtol_l.constprop.0+0xbe>
 801de94:	3c57      	subs	r4, #87	; 0x57
 801de96:	e7dd      	b.n	801de54 <_strtol_l.constprop.0+0x74>
 801de98:	f04f 37ff 	mov.w	r7, #4294967295
 801de9c:	e7e6      	b.n	801de6c <_strtol_l.constprop.0+0x8c>
 801de9e:	2f00      	cmp	r7, #0
 801dea0:	da07      	bge.n	801deb2 <_strtol_l.constprop.0+0xd2>
 801dea2:	2322      	movs	r3, #34	; 0x22
 801dea4:	f8c8 3000 	str.w	r3, [r8]
 801dea8:	4670      	mov	r0, lr
 801deaa:	2a00      	cmp	r2, #0
 801deac:	d0a4      	beq.n	801ddf8 <_strtol_l.constprop.0+0x18>
 801deae:	1e69      	subs	r1, r5, #1
 801deb0:	e005      	b.n	801debe <_strtol_l.constprop.0+0xde>
 801deb2:	b106      	cbz	r6, 801deb6 <_strtol_l.constprop.0+0xd6>
 801deb4:	4240      	negs	r0, r0
 801deb6:	2a00      	cmp	r2, #0
 801deb8:	d09e      	beq.n	801ddf8 <_strtol_l.constprop.0+0x18>
 801deba:	2f00      	cmp	r7, #0
 801debc:	d1f7      	bne.n	801deae <_strtol_l.constprop.0+0xce>
 801debe:	6011      	str	r1, [r2, #0]
 801dec0:	e79a      	b.n	801ddf8 <_strtol_l.constprop.0+0x18>
 801dec2:	2430      	movs	r4, #48	; 0x30
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d1b5      	bne.n	801de34 <_strtol_l.constprop.0+0x54>
 801dec8:	2308      	movs	r3, #8
 801deca:	e7b3      	b.n	801de34 <_strtol_l.constprop.0+0x54>
 801decc:	2c30      	cmp	r4, #48	; 0x30
 801dece:	d0a9      	beq.n	801de24 <_strtol_l.constprop.0+0x44>
 801ded0:	230a      	movs	r3, #10
 801ded2:	e7af      	b.n	801de34 <_strtol_l.constprop.0+0x54>
 801ded4:	08020849 	.word	0x08020849

0801ded8 <strtol>:
 801ded8:	4613      	mov	r3, r2
 801deda:	460a      	mov	r2, r1
 801dedc:	4601      	mov	r1, r0
 801dede:	4802      	ldr	r0, [pc, #8]	; (801dee8 <strtol+0x10>)
 801dee0:	6800      	ldr	r0, [r0, #0]
 801dee2:	f7ff bf7d 	b.w	801dde0 <_strtol_l.constprop.0>
 801dee6:	bf00      	nop
 801dee8:	2000014c 	.word	0x2000014c

0801deec <rshift>:
 801deec:	6903      	ldr	r3, [r0, #16]
 801deee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801def2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801def6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801defa:	f100 0414 	add.w	r4, r0, #20
 801defe:	dd45      	ble.n	801df8c <rshift+0xa0>
 801df00:	f011 011f 	ands.w	r1, r1, #31
 801df04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801df08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801df0c:	d10c      	bne.n	801df28 <rshift+0x3c>
 801df0e:	f100 0710 	add.w	r7, r0, #16
 801df12:	4629      	mov	r1, r5
 801df14:	42b1      	cmp	r1, r6
 801df16:	d334      	bcc.n	801df82 <rshift+0x96>
 801df18:	1a9b      	subs	r3, r3, r2
 801df1a:	009b      	lsls	r3, r3, #2
 801df1c:	1eea      	subs	r2, r5, #3
 801df1e:	4296      	cmp	r6, r2
 801df20:	bf38      	it	cc
 801df22:	2300      	movcc	r3, #0
 801df24:	4423      	add	r3, r4
 801df26:	e015      	b.n	801df54 <rshift+0x68>
 801df28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801df2c:	f1c1 0820 	rsb	r8, r1, #32
 801df30:	40cf      	lsrs	r7, r1
 801df32:	f105 0e04 	add.w	lr, r5, #4
 801df36:	46a1      	mov	r9, r4
 801df38:	4576      	cmp	r6, lr
 801df3a:	46f4      	mov	ip, lr
 801df3c:	d815      	bhi.n	801df6a <rshift+0x7e>
 801df3e:	1a9a      	subs	r2, r3, r2
 801df40:	0092      	lsls	r2, r2, #2
 801df42:	3a04      	subs	r2, #4
 801df44:	3501      	adds	r5, #1
 801df46:	42ae      	cmp	r6, r5
 801df48:	bf38      	it	cc
 801df4a:	2200      	movcc	r2, #0
 801df4c:	18a3      	adds	r3, r4, r2
 801df4e:	50a7      	str	r7, [r4, r2]
 801df50:	b107      	cbz	r7, 801df54 <rshift+0x68>
 801df52:	3304      	adds	r3, #4
 801df54:	1b1a      	subs	r2, r3, r4
 801df56:	42a3      	cmp	r3, r4
 801df58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801df5c:	bf08      	it	eq
 801df5e:	2300      	moveq	r3, #0
 801df60:	6102      	str	r2, [r0, #16]
 801df62:	bf08      	it	eq
 801df64:	6143      	streq	r3, [r0, #20]
 801df66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df6a:	f8dc c000 	ldr.w	ip, [ip]
 801df6e:	fa0c fc08 	lsl.w	ip, ip, r8
 801df72:	ea4c 0707 	orr.w	r7, ip, r7
 801df76:	f849 7b04 	str.w	r7, [r9], #4
 801df7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801df7e:	40cf      	lsrs	r7, r1
 801df80:	e7da      	b.n	801df38 <rshift+0x4c>
 801df82:	f851 cb04 	ldr.w	ip, [r1], #4
 801df86:	f847 cf04 	str.w	ip, [r7, #4]!
 801df8a:	e7c3      	b.n	801df14 <rshift+0x28>
 801df8c:	4623      	mov	r3, r4
 801df8e:	e7e1      	b.n	801df54 <rshift+0x68>

0801df90 <__hexdig_fun>:
 801df90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801df94:	2b09      	cmp	r3, #9
 801df96:	d802      	bhi.n	801df9e <__hexdig_fun+0xe>
 801df98:	3820      	subs	r0, #32
 801df9a:	b2c0      	uxtb	r0, r0
 801df9c:	4770      	bx	lr
 801df9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801dfa2:	2b05      	cmp	r3, #5
 801dfa4:	d801      	bhi.n	801dfaa <__hexdig_fun+0x1a>
 801dfa6:	3847      	subs	r0, #71	; 0x47
 801dfa8:	e7f7      	b.n	801df9a <__hexdig_fun+0xa>
 801dfaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801dfae:	2b05      	cmp	r3, #5
 801dfb0:	d801      	bhi.n	801dfb6 <__hexdig_fun+0x26>
 801dfb2:	3827      	subs	r0, #39	; 0x27
 801dfb4:	e7f1      	b.n	801df9a <__hexdig_fun+0xa>
 801dfb6:	2000      	movs	r0, #0
 801dfb8:	4770      	bx	lr
	...

0801dfbc <__gethex>:
 801dfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc0:	b08b      	sub	sp, #44	; 0x2c
 801dfc2:	468b      	mov	fp, r1
 801dfc4:	9305      	str	r3, [sp, #20]
 801dfc6:	4bb2      	ldr	r3, [pc, #712]	; (801e290 <__gethex+0x2d4>)
 801dfc8:	9002      	str	r0, [sp, #8]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	9303      	str	r3, [sp, #12]
 801dfce:	4618      	mov	r0, r3
 801dfd0:	4690      	mov	r8, r2
 801dfd2:	f7e2 f8d5 	bl	8000180 <strlen>
 801dfd6:	9b03      	ldr	r3, [sp, #12]
 801dfd8:	f8db 2000 	ldr.w	r2, [fp]
 801dfdc:	4403      	add	r3, r0
 801dfde:	4682      	mov	sl, r0
 801dfe0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801dfe4:	9306      	str	r3, [sp, #24]
 801dfe6:	1c93      	adds	r3, r2, #2
 801dfe8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801dfec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801dff0:	32fe      	adds	r2, #254	; 0xfe
 801dff2:	18d1      	adds	r1, r2, r3
 801dff4:	461f      	mov	r7, r3
 801dff6:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dffa:	9101      	str	r1, [sp, #4]
 801dffc:	2830      	cmp	r0, #48	; 0x30
 801dffe:	d0f8      	beq.n	801dff2 <__gethex+0x36>
 801e000:	f7ff ffc6 	bl	801df90 <__hexdig_fun>
 801e004:	4604      	mov	r4, r0
 801e006:	2800      	cmp	r0, #0
 801e008:	d13a      	bne.n	801e080 <__gethex+0xc4>
 801e00a:	9903      	ldr	r1, [sp, #12]
 801e00c:	4652      	mov	r2, sl
 801e00e:	4638      	mov	r0, r7
 801e010:	f001 f864 	bl	801f0dc <strncmp>
 801e014:	4605      	mov	r5, r0
 801e016:	2800      	cmp	r0, #0
 801e018:	d166      	bne.n	801e0e8 <__gethex+0x12c>
 801e01a:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e01e:	eb07 060a 	add.w	r6, r7, sl
 801e022:	f7ff ffb5 	bl	801df90 <__hexdig_fun>
 801e026:	2800      	cmp	r0, #0
 801e028:	d060      	beq.n	801e0ec <__gethex+0x130>
 801e02a:	4633      	mov	r3, r6
 801e02c:	7818      	ldrb	r0, [r3, #0]
 801e02e:	2830      	cmp	r0, #48	; 0x30
 801e030:	461f      	mov	r7, r3
 801e032:	f103 0301 	add.w	r3, r3, #1
 801e036:	d0f9      	beq.n	801e02c <__gethex+0x70>
 801e038:	f7ff ffaa 	bl	801df90 <__hexdig_fun>
 801e03c:	2301      	movs	r3, #1
 801e03e:	fab0 f480 	clz	r4, r0
 801e042:	0964      	lsrs	r4, r4, #5
 801e044:	4635      	mov	r5, r6
 801e046:	9301      	str	r3, [sp, #4]
 801e048:	463a      	mov	r2, r7
 801e04a:	4616      	mov	r6, r2
 801e04c:	3201      	adds	r2, #1
 801e04e:	7830      	ldrb	r0, [r6, #0]
 801e050:	f7ff ff9e 	bl	801df90 <__hexdig_fun>
 801e054:	2800      	cmp	r0, #0
 801e056:	d1f8      	bne.n	801e04a <__gethex+0x8e>
 801e058:	9903      	ldr	r1, [sp, #12]
 801e05a:	4652      	mov	r2, sl
 801e05c:	4630      	mov	r0, r6
 801e05e:	f001 f83d 	bl	801f0dc <strncmp>
 801e062:	b980      	cbnz	r0, 801e086 <__gethex+0xca>
 801e064:	b94d      	cbnz	r5, 801e07a <__gethex+0xbe>
 801e066:	eb06 050a 	add.w	r5, r6, sl
 801e06a:	462a      	mov	r2, r5
 801e06c:	4616      	mov	r6, r2
 801e06e:	3201      	adds	r2, #1
 801e070:	7830      	ldrb	r0, [r6, #0]
 801e072:	f7ff ff8d 	bl	801df90 <__hexdig_fun>
 801e076:	2800      	cmp	r0, #0
 801e078:	d1f8      	bne.n	801e06c <__gethex+0xb0>
 801e07a:	1bad      	subs	r5, r5, r6
 801e07c:	00ad      	lsls	r5, r5, #2
 801e07e:	e004      	b.n	801e08a <__gethex+0xce>
 801e080:	2400      	movs	r4, #0
 801e082:	4625      	mov	r5, r4
 801e084:	e7e0      	b.n	801e048 <__gethex+0x8c>
 801e086:	2d00      	cmp	r5, #0
 801e088:	d1f7      	bne.n	801e07a <__gethex+0xbe>
 801e08a:	7833      	ldrb	r3, [r6, #0]
 801e08c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e090:	2b50      	cmp	r3, #80	; 0x50
 801e092:	d139      	bne.n	801e108 <__gethex+0x14c>
 801e094:	7873      	ldrb	r3, [r6, #1]
 801e096:	2b2b      	cmp	r3, #43	; 0x2b
 801e098:	d02a      	beq.n	801e0f0 <__gethex+0x134>
 801e09a:	2b2d      	cmp	r3, #45	; 0x2d
 801e09c:	d02c      	beq.n	801e0f8 <__gethex+0x13c>
 801e09e:	1c71      	adds	r1, r6, #1
 801e0a0:	f04f 0900 	mov.w	r9, #0
 801e0a4:	7808      	ldrb	r0, [r1, #0]
 801e0a6:	f7ff ff73 	bl	801df90 <__hexdig_fun>
 801e0aa:	1e43      	subs	r3, r0, #1
 801e0ac:	b2db      	uxtb	r3, r3
 801e0ae:	2b18      	cmp	r3, #24
 801e0b0:	d82a      	bhi.n	801e108 <__gethex+0x14c>
 801e0b2:	f1a0 0210 	sub.w	r2, r0, #16
 801e0b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e0ba:	f7ff ff69 	bl	801df90 <__hexdig_fun>
 801e0be:	1e43      	subs	r3, r0, #1
 801e0c0:	b2db      	uxtb	r3, r3
 801e0c2:	2b18      	cmp	r3, #24
 801e0c4:	d91b      	bls.n	801e0fe <__gethex+0x142>
 801e0c6:	f1b9 0f00 	cmp.w	r9, #0
 801e0ca:	d000      	beq.n	801e0ce <__gethex+0x112>
 801e0cc:	4252      	negs	r2, r2
 801e0ce:	4415      	add	r5, r2
 801e0d0:	f8cb 1000 	str.w	r1, [fp]
 801e0d4:	b1d4      	cbz	r4, 801e10c <__gethex+0x150>
 801e0d6:	9b01      	ldr	r3, [sp, #4]
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	bf14      	ite	ne
 801e0dc:	2700      	movne	r7, #0
 801e0de:	2706      	moveq	r7, #6
 801e0e0:	4638      	mov	r0, r7
 801e0e2:	b00b      	add	sp, #44	; 0x2c
 801e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0e8:	463e      	mov	r6, r7
 801e0ea:	4625      	mov	r5, r4
 801e0ec:	2401      	movs	r4, #1
 801e0ee:	e7cc      	b.n	801e08a <__gethex+0xce>
 801e0f0:	f04f 0900 	mov.w	r9, #0
 801e0f4:	1cb1      	adds	r1, r6, #2
 801e0f6:	e7d5      	b.n	801e0a4 <__gethex+0xe8>
 801e0f8:	f04f 0901 	mov.w	r9, #1
 801e0fc:	e7fa      	b.n	801e0f4 <__gethex+0x138>
 801e0fe:	230a      	movs	r3, #10
 801e100:	fb03 0202 	mla	r2, r3, r2, r0
 801e104:	3a10      	subs	r2, #16
 801e106:	e7d6      	b.n	801e0b6 <__gethex+0xfa>
 801e108:	4631      	mov	r1, r6
 801e10a:	e7e1      	b.n	801e0d0 <__gethex+0x114>
 801e10c:	1bf3      	subs	r3, r6, r7
 801e10e:	3b01      	subs	r3, #1
 801e110:	4621      	mov	r1, r4
 801e112:	2b07      	cmp	r3, #7
 801e114:	dc0a      	bgt.n	801e12c <__gethex+0x170>
 801e116:	9802      	ldr	r0, [sp, #8]
 801e118:	f000 fa6e 	bl	801e5f8 <_Balloc>
 801e11c:	4604      	mov	r4, r0
 801e11e:	b940      	cbnz	r0, 801e132 <__gethex+0x176>
 801e120:	4b5c      	ldr	r3, [pc, #368]	; (801e294 <__gethex+0x2d8>)
 801e122:	4602      	mov	r2, r0
 801e124:	21de      	movs	r1, #222	; 0xde
 801e126:	485c      	ldr	r0, [pc, #368]	; (801e298 <__gethex+0x2dc>)
 801e128:	f000 fffa 	bl	801f120 <__assert_func>
 801e12c:	3101      	adds	r1, #1
 801e12e:	105b      	asrs	r3, r3, #1
 801e130:	e7ef      	b.n	801e112 <__gethex+0x156>
 801e132:	f100 0914 	add.w	r9, r0, #20
 801e136:	f04f 0b00 	mov.w	fp, #0
 801e13a:	f1ca 0301 	rsb	r3, sl, #1
 801e13e:	f8cd 9010 	str.w	r9, [sp, #16]
 801e142:	f8cd b004 	str.w	fp, [sp, #4]
 801e146:	9308      	str	r3, [sp, #32]
 801e148:	42b7      	cmp	r7, r6
 801e14a:	d33f      	bcc.n	801e1cc <__gethex+0x210>
 801e14c:	9f04      	ldr	r7, [sp, #16]
 801e14e:	9b01      	ldr	r3, [sp, #4]
 801e150:	f847 3b04 	str.w	r3, [r7], #4
 801e154:	eba7 0709 	sub.w	r7, r7, r9
 801e158:	10bf      	asrs	r7, r7, #2
 801e15a:	6127      	str	r7, [r4, #16]
 801e15c:	4618      	mov	r0, r3
 801e15e:	f000 fb3d 	bl	801e7dc <__hi0bits>
 801e162:	017f      	lsls	r7, r7, #5
 801e164:	f8d8 6000 	ldr.w	r6, [r8]
 801e168:	1a3f      	subs	r7, r7, r0
 801e16a:	42b7      	cmp	r7, r6
 801e16c:	dd62      	ble.n	801e234 <__gethex+0x278>
 801e16e:	1bbf      	subs	r7, r7, r6
 801e170:	4639      	mov	r1, r7
 801e172:	4620      	mov	r0, r4
 801e174:	f000 fed3 	bl	801ef1e <__any_on>
 801e178:	4682      	mov	sl, r0
 801e17a:	b1a8      	cbz	r0, 801e1a8 <__gethex+0x1ec>
 801e17c:	1e7b      	subs	r3, r7, #1
 801e17e:	1159      	asrs	r1, r3, #5
 801e180:	f003 021f 	and.w	r2, r3, #31
 801e184:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e188:	f04f 0a01 	mov.w	sl, #1
 801e18c:	fa0a f202 	lsl.w	r2, sl, r2
 801e190:	420a      	tst	r2, r1
 801e192:	d009      	beq.n	801e1a8 <__gethex+0x1ec>
 801e194:	4553      	cmp	r3, sl
 801e196:	dd05      	ble.n	801e1a4 <__gethex+0x1e8>
 801e198:	1eb9      	subs	r1, r7, #2
 801e19a:	4620      	mov	r0, r4
 801e19c:	f000 febf 	bl	801ef1e <__any_on>
 801e1a0:	2800      	cmp	r0, #0
 801e1a2:	d144      	bne.n	801e22e <__gethex+0x272>
 801e1a4:	f04f 0a02 	mov.w	sl, #2
 801e1a8:	4639      	mov	r1, r7
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	f7ff fe9e 	bl	801deec <rshift>
 801e1b0:	443d      	add	r5, r7
 801e1b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e1b6:	42ab      	cmp	r3, r5
 801e1b8:	da4a      	bge.n	801e250 <__gethex+0x294>
 801e1ba:	9802      	ldr	r0, [sp, #8]
 801e1bc:	4621      	mov	r1, r4
 801e1be:	f000 fa5b 	bl	801e678 <_Bfree>
 801e1c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e1c4:	2300      	movs	r3, #0
 801e1c6:	6013      	str	r3, [r2, #0]
 801e1c8:	27a3      	movs	r7, #163	; 0xa3
 801e1ca:	e789      	b.n	801e0e0 <__gethex+0x124>
 801e1cc:	1e73      	subs	r3, r6, #1
 801e1ce:	9a06      	ldr	r2, [sp, #24]
 801e1d0:	9307      	str	r3, [sp, #28]
 801e1d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e1d6:	4293      	cmp	r3, r2
 801e1d8:	d019      	beq.n	801e20e <__gethex+0x252>
 801e1da:	f1bb 0f20 	cmp.w	fp, #32
 801e1de:	d107      	bne.n	801e1f0 <__gethex+0x234>
 801e1e0:	9b04      	ldr	r3, [sp, #16]
 801e1e2:	9a01      	ldr	r2, [sp, #4]
 801e1e4:	f843 2b04 	str.w	r2, [r3], #4
 801e1e8:	9304      	str	r3, [sp, #16]
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	9301      	str	r3, [sp, #4]
 801e1ee:	469b      	mov	fp, r3
 801e1f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e1f4:	f7ff fecc 	bl	801df90 <__hexdig_fun>
 801e1f8:	9b01      	ldr	r3, [sp, #4]
 801e1fa:	f000 000f 	and.w	r0, r0, #15
 801e1fe:	fa00 f00b 	lsl.w	r0, r0, fp
 801e202:	4303      	orrs	r3, r0
 801e204:	9301      	str	r3, [sp, #4]
 801e206:	f10b 0b04 	add.w	fp, fp, #4
 801e20a:	9b07      	ldr	r3, [sp, #28]
 801e20c:	e00d      	b.n	801e22a <__gethex+0x26e>
 801e20e:	9a08      	ldr	r2, [sp, #32]
 801e210:	1e73      	subs	r3, r6, #1
 801e212:	4413      	add	r3, r2
 801e214:	42bb      	cmp	r3, r7
 801e216:	d3e0      	bcc.n	801e1da <__gethex+0x21e>
 801e218:	4618      	mov	r0, r3
 801e21a:	9903      	ldr	r1, [sp, #12]
 801e21c:	9309      	str	r3, [sp, #36]	; 0x24
 801e21e:	4652      	mov	r2, sl
 801e220:	f000 ff5c 	bl	801f0dc <strncmp>
 801e224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e226:	2800      	cmp	r0, #0
 801e228:	d1d7      	bne.n	801e1da <__gethex+0x21e>
 801e22a:	461e      	mov	r6, r3
 801e22c:	e78c      	b.n	801e148 <__gethex+0x18c>
 801e22e:	f04f 0a03 	mov.w	sl, #3
 801e232:	e7b9      	b.n	801e1a8 <__gethex+0x1ec>
 801e234:	da09      	bge.n	801e24a <__gethex+0x28e>
 801e236:	1bf7      	subs	r7, r6, r7
 801e238:	4621      	mov	r1, r4
 801e23a:	9802      	ldr	r0, [sp, #8]
 801e23c:	463a      	mov	r2, r7
 801e23e:	f000 fc33 	bl	801eaa8 <__lshift>
 801e242:	1bed      	subs	r5, r5, r7
 801e244:	4604      	mov	r4, r0
 801e246:	f100 0914 	add.w	r9, r0, #20
 801e24a:	f04f 0a00 	mov.w	sl, #0
 801e24e:	e7b0      	b.n	801e1b2 <__gethex+0x1f6>
 801e250:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e254:	42a8      	cmp	r0, r5
 801e256:	dd71      	ble.n	801e33c <__gethex+0x380>
 801e258:	1b45      	subs	r5, r0, r5
 801e25a:	42ae      	cmp	r6, r5
 801e25c:	dc35      	bgt.n	801e2ca <__gethex+0x30e>
 801e25e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e262:	2b02      	cmp	r3, #2
 801e264:	d029      	beq.n	801e2ba <__gethex+0x2fe>
 801e266:	2b03      	cmp	r3, #3
 801e268:	d02b      	beq.n	801e2c2 <__gethex+0x306>
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	d11c      	bne.n	801e2a8 <__gethex+0x2ec>
 801e26e:	42ae      	cmp	r6, r5
 801e270:	d11a      	bne.n	801e2a8 <__gethex+0x2ec>
 801e272:	2e01      	cmp	r6, #1
 801e274:	d112      	bne.n	801e29c <__gethex+0x2e0>
 801e276:	9a05      	ldr	r2, [sp, #20]
 801e278:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e27c:	6013      	str	r3, [r2, #0]
 801e27e:	2301      	movs	r3, #1
 801e280:	6123      	str	r3, [r4, #16]
 801e282:	f8c9 3000 	str.w	r3, [r9]
 801e286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e288:	2762      	movs	r7, #98	; 0x62
 801e28a:	601c      	str	r4, [r3, #0]
 801e28c:	e728      	b.n	801e0e0 <__gethex+0x124>
 801e28e:	bf00      	nop
 801e290:	080209c0 	.word	0x080209c0
 801e294:	08020949 	.word	0x08020949
 801e298:	0802095a 	.word	0x0802095a
 801e29c:	1e71      	subs	r1, r6, #1
 801e29e:	4620      	mov	r0, r4
 801e2a0:	f000 fe3d 	bl	801ef1e <__any_on>
 801e2a4:	2800      	cmp	r0, #0
 801e2a6:	d1e6      	bne.n	801e276 <__gethex+0x2ba>
 801e2a8:	9802      	ldr	r0, [sp, #8]
 801e2aa:	4621      	mov	r1, r4
 801e2ac:	f000 f9e4 	bl	801e678 <_Bfree>
 801e2b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	6013      	str	r3, [r2, #0]
 801e2b6:	2750      	movs	r7, #80	; 0x50
 801e2b8:	e712      	b.n	801e0e0 <__gethex+0x124>
 801e2ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d1f3      	bne.n	801e2a8 <__gethex+0x2ec>
 801e2c0:	e7d9      	b.n	801e276 <__gethex+0x2ba>
 801e2c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d1d6      	bne.n	801e276 <__gethex+0x2ba>
 801e2c8:	e7ee      	b.n	801e2a8 <__gethex+0x2ec>
 801e2ca:	1e6f      	subs	r7, r5, #1
 801e2cc:	f1ba 0f00 	cmp.w	sl, #0
 801e2d0:	d131      	bne.n	801e336 <__gethex+0x37a>
 801e2d2:	b127      	cbz	r7, 801e2de <__gethex+0x322>
 801e2d4:	4639      	mov	r1, r7
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	f000 fe21 	bl	801ef1e <__any_on>
 801e2dc:	4682      	mov	sl, r0
 801e2de:	117b      	asrs	r3, r7, #5
 801e2e0:	2101      	movs	r1, #1
 801e2e2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e2e6:	f007 071f 	and.w	r7, r7, #31
 801e2ea:	fa01 f707 	lsl.w	r7, r1, r7
 801e2ee:	421f      	tst	r7, r3
 801e2f0:	4629      	mov	r1, r5
 801e2f2:	4620      	mov	r0, r4
 801e2f4:	bf18      	it	ne
 801e2f6:	f04a 0a02 	orrne.w	sl, sl, #2
 801e2fa:	1b76      	subs	r6, r6, r5
 801e2fc:	f7ff fdf6 	bl	801deec <rshift>
 801e300:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e304:	2702      	movs	r7, #2
 801e306:	f1ba 0f00 	cmp.w	sl, #0
 801e30a:	d048      	beq.n	801e39e <__gethex+0x3e2>
 801e30c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e310:	2b02      	cmp	r3, #2
 801e312:	d015      	beq.n	801e340 <__gethex+0x384>
 801e314:	2b03      	cmp	r3, #3
 801e316:	d017      	beq.n	801e348 <__gethex+0x38c>
 801e318:	2b01      	cmp	r3, #1
 801e31a:	d109      	bne.n	801e330 <__gethex+0x374>
 801e31c:	f01a 0f02 	tst.w	sl, #2
 801e320:	d006      	beq.n	801e330 <__gethex+0x374>
 801e322:	f8d9 0000 	ldr.w	r0, [r9]
 801e326:	ea4a 0a00 	orr.w	sl, sl, r0
 801e32a:	f01a 0f01 	tst.w	sl, #1
 801e32e:	d10e      	bne.n	801e34e <__gethex+0x392>
 801e330:	f047 0710 	orr.w	r7, r7, #16
 801e334:	e033      	b.n	801e39e <__gethex+0x3e2>
 801e336:	f04f 0a01 	mov.w	sl, #1
 801e33a:	e7d0      	b.n	801e2de <__gethex+0x322>
 801e33c:	2701      	movs	r7, #1
 801e33e:	e7e2      	b.n	801e306 <__gethex+0x34a>
 801e340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e342:	f1c3 0301 	rsb	r3, r3, #1
 801e346:	9315      	str	r3, [sp, #84]	; 0x54
 801e348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d0f0      	beq.n	801e330 <__gethex+0x374>
 801e34e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e352:	f104 0314 	add.w	r3, r4, #20
 801e356:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e35a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e35e:	f04f 0c00 	mov.w	ip, #0
 801e362:	4618      	mov	r0, r3
 801e364:	f853 2b04 	ldr.w	r2, [r3], #4
 801e368:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e36c:	d01c      	beq.n	801e3a8 <__gethex+0x3ec>
 801e36e:	3201      	adds	r2, #1
 801e370:	6002      	str	r2, [r0, #0]
 801e372:	2f02      	cmp	r7, #2
 801e374:	f104 0314 	add.w	r3, r4, #20
 801e378:	d13d      	bne.n	801e3f6 <__gethex+0x43a>
 801e37a:	f8d8 2000 	ldr.w	r2, [r8]
 801e37e:	3a01      	subs	r2, #1
 801e380:	42b2      	cmp	r2, r6
 801e382:	d10a      	bne.n	801e39a <__gethex+0x3de>
 801e384:	1171      	asrs	r1, r6, #5
 801e386:	2201      	movs	r2, #1
 801e388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e38c:	f006 061f 	and.w	r6, r6, #31
 801e390:	fa02 f606 	lsl.w	r6, r2, r6
 801e394:	421e      	tst	r6, r3
 801e396:	bf18      	it	ne
 801e398:	4617      	movne	r7, r2
 801e39a:	f047 0720 	orr.w	r7, r7, #32
 801e39e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e3a0:	601c      	str	r4, [r3, #0]
 801e3a2:	9b05      	ldr	r3, [sp, #20]
 801e3a4:	601d      	str	r5, [r3, #0]
 801e3a6:	e69b      	b.n	801e0e0 <__gethex+0x124>
 801e3a8:	4299      	cmp	r1, r3
 801e3aa:	f843 cc04 	str.w	ip, [r3, #-4]
 801e3ae:	d8d8      	bhi.n	801e362 <__gethex+0x3a6>
 801e3b0:	68a3      	ldr	r3, [r4, #8]
 801e3b2:	459b      	cmp	fp, r3
 801e3b4:	db17      	blt.n	801e3e6 <__gethex+0x42a>
 801e3b6:	6861      	ldr	r1, [r4, #4]
 801e3b8:	9802      	ldr	r0, [sp, #8]
 801e3ba:	3101      	adds	r1, #1
 801e3bc:	f000 f91c 	bl	801e5f8 <_Balloc>
 801e3c0:	4681      	mov	r9, r0
 801e3c2:	b918      	cbnz	r0, 801e3cc <__gethex+0x410>
 801e3c4:	4b1a      	ldr	r3, [pc, #104]	; (801e430 <__gethex+0x474>)
 801e3c6:	4602      	mov	r2, r0
 801e3c8:	2184      	movs	r1, #132	; 0x84
 801e3ca:	e6ac      	b.n	801e126 <__gethex+0x16a>
 801e3cc:	6922      	ldr	r2, [r4, #16]
 801e3ce:	3202      	adds	r2, #2
 801e3d0:	f104 010c 	add.w	r1, r4, #12
 801e3d4:	0092      	lsls	r2, r2, #2
 801e3d6:	300c      	adds	r0, #12
 801e3d8:	f000 f900 	bl	801e5dc <memcpy>
 801e3dc:	4621      	mov	r1, r4
 801e3de:	9802      	ldr	r0, [sp, #8]
 801e3e0:	f000 f94a 	bl	801e678 <_Bfree>
 801e3e4:	464c      	mov	r4, r9
 801e3e6:	6923      	ldr	r3, [r4, #16]
 801e3e8:	1c5a      	adds	r2, r3, #1
 801e3ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e3ee:	6122      	str	r2, [r4, #16]
 801e3f0:	2201      	movs	r2, #1
 801e3f2:	615a      	str	r2, [r3, #20]
 801e3f4:	e7bd      	b.n	801e372 <__gethex+0x3b6>
 801e3f6:	6922      	ldr	r2, [r4, #16]
 801e3f8:	455a      	cmp	r2, fp
 801e3fa:	dd0b      	ble.n	801e414 <__gethex+0x458>
 801e3fc:	2101      	movs	r1, #1
 801e3fe:	4620      	mov	r0, r4
 801e400:	f7ff fd74 	bl	801deec <rshift>
 801e404:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e408:	3501      	adds	r5, #1
 801e40a:	42ab      	cmp	r3, r5
 801e40c:	f6ff aed5 	blt.w	801e1ba <__gethex+0x1fe>
 801e410:	2701      	movs	r7, #1
 801e412:	e7c2      	b.n	801e39a <__gethex+0x3de>
 801e414:	f016 061f 	ands.w	r6, r6, #31
 801e418:	d0fa      	beq.n	801e410 <__gethex+0x454>
 801e41a:	4453      	add	r3, sl
 801e41c:	f1c6 0620 	rsb	r6, r6, #32
 801e420:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e424:	f000 f9da 	bl	801e7dc <__hi0bits>
 801e428:	42b0      	cmp	r0, r6
 801e42a:	dbe7      	blt.n	801e3fc <__gethex+0x440>
 801e42c:	e7f0      	b.n	801e410 <__gethex+0x454>
 801e42e:	bf00      	nop
 801e430:	08020949 	.word	0x08020949

0801e434 <L_shift>:
 801e434:	f1c2 0208 	rsb	r2, r2, #8
 801e438:	0092      	lsls	r2, r2, #2
 801e43a:	b570      	push	{r4, r5, r6, lr}
 801e43c:	f1c2 0620 	rsb	r6, r2, #32
 801e440:	6843      	ldr	r3, [r0, #4]
 801e442:	6804      	ldr	r4, [r0, #0]
 801e444:	fa03 f506 	lsl.w	r5, r3, r6
 801e448:	432c      	orrs	r4, r5
 801e44a:	40d3      	lsrs	r3, r2
 801e44c:	6004      	str	r4, [r0, #0]
 801e44e:	f840 3f04 	str.w	r3, [r0, #4]!
 801e452:	4288      	cmp	r0, r1
 801e454:	d3f4      	bcc.n	801e440 <L_shift+0xc>
 801e456:	bd70      	pop	{r4, r5, r6, pc}

0801e458 <__match>:
 801e458:	b530      	push	{r4, r5, lr}
 801e45a:	6803      	ldr	r3, [r0, #0]
 801e45c:	3301      	adds	r3, #1
 801e45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e462:	b914      	cbnz	r4, 801e46a <__match+0x12>
 801e464:	6003      	str	r3, [r0, #0]
 801e466:	2001      	movs	r0, #1
 801e468:	bd30      	pop	{r4, r5, pc}
 801e46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e46e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e472:	2d19      	cmp	r5, #25
 801e474:	bf98      	it	ls
 801e476:	3220      	addls	r2, #32
 801e478:	42a2      	cmp	r2, r4
 801e47a:	d0f0      	beq.n	801e45e <__match+0x6>
 801e47c:	2000      	movs	r0, #0
 801e47e:	e7f3      	b.n	801e468 <__match+0x10>

0801e480 <__hexnan>:
 801e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e484:	680b      	ldr	r3, [r1, #0]
 801e486:	115e      	asrs	r6, r3, #5
 801e488:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e48c:	f013 031f 	ands.w	r3, r3, #31
 801e490:	b087      	sub	sp, #28
 801e492:	bf18      	it	ne
 801e494:	3604      	addne	r6, #4
 801e496:	2500      	movs	r5, #0
 801e498:	1f37      	subs	r7, r6, #4
 801e49a:	4690      	mov	r8, r2
 801e49c:	6802      	ldr	r2, [r0, #0]
 801e49e:	9301      	str	r3, [sp, #4]
 801e4a0:	4682      	mov	sl, r0
 801e4a2:	f846 5c04 	str.w	r5, [r6, #-4]
 801e4a6:	46b9      	mov	r9, r7
 801e4a8:	463c      	mov	r4, r7
 801e4aa:	9502      	str	r5, [sp, #8]
 801e4ac:	46ab      	mov	fp, r5
 801e4ae:	7851      	ldrb	r1, [r2, #1]
 801e4b0:	1c53      	adds	r3, r2, #1
 801e4b2:	9303      	str	r3, [sp, #12]
 801e4b4:	b341      	cbz	r1, 801e508 <__hexnan+0x88>
 801e4b6:	4608      	mov	r0, r1
 801e4b8:	9205      	str	r2, [sp, #20]
 801e4ba:	9104      	str	r1, [sp, #16]
 801e4bc:	f7ff fd68 	bl	801df90 <__hexdig_fun>
 801e4c0:	2800      	cmp	r0, #0
 801e4c2:	d14f      	bne.n	801e564 <__hexnan+0xe4>
 801e4c4:	9904      	ldr	r1, [sp, #16]
 801e4c6:	9a05      	ldr	r2, [sp, #20]
 801e4c8:	2920      	cmp	r1, #32
 801e4ca:	d818      	bhi.n	801e4fe <__hexnan+0x7e>
 801e4cc:	9b02      	ldr	r3, [sp, #8]
 801e4ce:	459b      	cmp	fp, r3
 801e4d0:	dd13      	ble.n	801e4fa <__hexnan+0x7a>
 801e4d2:	454c      	cmp	r4, r9
 801e4d4:	d206      	bcs.n	801e4e4 <__hexnan+0x64>
 801e4d6:	2d07      	cmp	r5, #7
 801e4d8:	dc04      	bgt.n	801e4e4 <__hexnan+0x64>
 801e4da:	462a      	mov	r2, r5
 801e4dc:	4649      	mov	r1, r9
 801e4de:	4620      	mov	r0, r4
 801e4e0:	f7ff ffa8 	bl	801e434 <L_shift>
 801e4e4:	4544      	cmp	r4, r8
 801e4e6:	d950      	bls.n	801e58a <__hexnan+0x10a>
 801e4e8:	2300      	movs	r3, #0
 801e4ea:	f1a4 0904 	sub.w	r9, r4, #4
 801e4ee:	f844 3c04 	str.w	r3, [r4, #-4]
 801e4f2:	f8cd b008 	str.w	fp, [sp, #8]
 801e4f6:	464c      	mov	r4, r9
 801e4f8:	461d      	mov	r5, r3
 801e4fa:	9a03      	ldr	r2, [sp, #12]
 801e4fc:	e7d7      	b.n	801e4ae <__hexnan+0x2e>
 801e4fe:	2929      	cmp	r1, #41	; 0x29
 801e500:	d156      	bne.n	801e5b0 <__hexnan+0x130>
 801e502:	3202      	adds	r2, #2
 801e504:	f8ca 2000 	str.w	r2, [sl]
 801e508:	f1bb 0f00 	cmp.w	fp, #0
 801e50c:	d050      	beq.n	801e5b0 <__hexnan+0x130>
 801e50e:	454c      	cmp	r4, r9
 801e510:	d206      	bcs.n	801e520 <__hexnan+0xa0>
 801e512:	2d07      	cmp	r5, #7
 801e514:	dc04      	bgt.n	801e520 <__hexnan+0xa0>
 801e516:	462a      	mov	r2, r5
 801e518:	4649      	mov	r1, r9
 801e51a:	4620      	mov	r0, r4
 801e51c:	f7ff ff8a 	bl	801e434 <L_shift>
 801e520:	4544      	cmp	r4, r8
 801e522:	d934      	bls.n	801e58e <__hexnan+0x10e>
 801e524:	f1a8 0204 	sub.w	r2, r8, #4
 801e528:	4623      	mov	r3, r4
 801e52a:	f853 1b04 	ldr.w	r1, [r3], #4
 801e52e:	f842 1f04 	str.w	r1, [r2, #4]!
 801e532:	429f      	cmp	r7, r3
 801e534:	d2f9      	bcs.n	801e52a <__hexnan+0xaa>
 801e536:	1b3b      	subs	r3, r7, r4
 801e538:	f023 0303 	bic.w	r3, r3, #3
 801e53c:	3304      	adds	r3, #4
 801e53e:	3401      	adds	r4, #1
 801e540:	3e03      	subs	r6, #3
 801e542:	42b4      	cmp	r4, r6
 801e544:	bf88      	it	hi
 801e546:	2304      	movhi	r3, #4
 801e548:	4443      	add	r3, r8
 801e54a:	2200      	movs	r2, #0
 801e54c:	f843 2b04 	str.w	r2, [r3], #4
 801e550:	429f      	cmp	r7, r3
 801e552:	d2fb      	bcs.n	801e54c <__hexnan+0xcc>
 801e554:	683b      	ldr	r3, [r7, #0]
 801e556:	b91b      	cbnz	r3, 801e560 <__hexnan+0xe0>
 801e558:	4547      	cmp	r7, r8
 801e55a:	d127      	bne.n	801e5ac <__hexnan+0x12c>
 801e55c:	2301      	movs	r3, #1
 801e55e:	603b      	str	r3, [r7, #0]
 801e560:	2005      	movs	r0, #5
 801e562:	e026      	b.n	801e5b2 <__hexnan+0x132>
 801e564:	3501      	adds	r5, #1
 801e566:	2d08      	cmp	r5, #8
 801e568:	f10b 0b01 	add.w	fp, fp, #1
 801e56c:	dd06      	ble.n	801e57c <__hexnan+0xfc>
 801e56e:	4544      	cmp	r4, r8
 801e570:	d9c3      	bls.n	801e4fa <__hexnan+0x7a>
 801e572:	2300      	movs	r3, #0
 801e574:	f844 3c04 	str.w	r3, [r4, #-4]
 801e578:	2501      	movs	r5, #1
 801e57a:	3c04      	subs	r4, #4
 801e57c:	6822      	ldr	r2, [r4, #0]
 801e57e:	f000 000f 	and.w	r0, r0, #15
 801e582:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e586:	6022      	str	r2, [r4, #0]
 801e588:	e7b7      	b.n	801e4fa <__hexnan+0x7a>
 801e58a:	2508      	movs	r5, #8
 801e58c:	e7b5      	b.n	801e4fa <__hexnan+0x7a>
 801e58e:	9b01      	ldr	r3, [sp, #4]
 801e590:	2b00      	cmp	r3, #0
 801e592:	d0df      	beq.n	801e554 <__hexnan+0xd4>
 801e594:	f04f 32ff 	mov.w	r2, #4294967295
 801e598:	f1c3 0320 	rsb	r3, r3, #32
 801e59c:	fa22 f303 	lsr.w	r3, r2, r3
 801e5a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e5a4:	401a      	ands	r2, r3
 801e5a6:	f846 2c04 	str.w	r2, [r6, #-4]
 801e5aa:	e7d3      	b.n	801e554 <__hexnan+0xd4>
 801e5ac:	3f04      	subs	r7, #4
 801e5ae:	e7d1      	b.n	801e554 <__hexnan+0xd4>
 801e5b0:	2004      	movs	r0, #4
 801e5b2:	b007      	add	sp, #28
 801e5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5b8 <__ascii_mbtowc>:
 801e5b8:	b082      	sub	sp, #8
 801e5ba:	b901      	cbnz	r1, 801e5be <__ascii_mbtowc+0x6>
 801e5bc:	a901      	add	r1, sp, #4
 801e5be:	b142      	cbz	r2, 801e5d2 <__ascii_mbtowc+0x1a>
 801e5c0:	b14b      	cbz	r3, 801e5d6 <__ascii_mbtowc+0x1e>
 801e5c2:	7813      	ldrb	r3, [r2, #0]
 801e5c4:	600b      	str	r3, [r1, #0]
 801e5c6:	7812      	ldrb	r2, [r2, #0]
 801e5c8:	1e10      	subs	r0, r2, #0
 801e5ca:	bf18      	it	ne
 801e5cc:	2001      	movne	r0, #1
 801e5ce:	b002      	add	sp, #8
 801e5d0:	4770      	bx	lr
 801e5d2:	4610      	mov	r0, r2
 801e5d4:	e7fb      	b.n	801e5ce <__ascii_mbtowc+0x16>
 801e5d6:	f06f 0001 	mvn.w	r0, #1
 801e5da:	e7f8      	b.n	801e5ce <__ascii_mbtowc+0x16>

0801e5dc <memcpy>:
 801e5dc:	440a      	add	r2, r1
 801e5de:	4291      	cmp	r1, r2
 801e5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 801e5e4:	d100      	bne.n	801e5e8 <memcpy+0xc>
 801e5e6:	4770      	bx	lr
 801e5e8:	b510      	push	{r4, lr}
 801e5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e5ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e5f2:	4291      	cmp	r1, r2
 801e5f4:	d1f9      	bne.n	801e5ea <memcpy+0xe>
 801e5f6:	bd10      	pop	{r4, pc}

0801e5f8 <_Balloc>:
 801e5f8:	b570      	push	{r4, r5, r6, lr}
 801e5fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e5fc:	4604      	mov	r4, r0
 801e5fe:	460d      	mov	r5, r1
 801e600:	b976      	cbnz	r6, 801e620 <_Balloc+0x28>
 801e602:	2010      	movs	r0, #16
 801e604:	f000 fdbc 	bl	801f180 <malloc>
 801e608:	4602      	mov	r2, r0
 801e60a:	6260      	str	r0, [r4, #36]	; 0x24
 801e60c:	b920      	cbnz	r0, 801e618 <_Balloc+0x20>
 801e60e:	4b18      	ldr	r3, [pc, #96]	; (801e670 <_Balloc+0x78>)
 801e610:	4818      	ldr	r0, [pc, #96]	; (801e674 <_Balloc+0x7c>)
 801e612:	2166      	movs	r1, #102	; 0x66
 801e614:	f000 fd84 	bl	801f120 <__assert_func>
 801e618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e61c:	6006      	str	r6, [r0, #0]
 801e61e:	60c6      	str	r6, [r0, #12]
 801e620:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e622:	68f3      	ldr	r3, [r6, #12]
 801e624:	b183      	cbz	r3, 801e648 <_Balloc+0x50>
 801e626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e628:	68db      	ldr	r3, [r3, #12]
 801e62a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e62e:	b9b8      	cbnz	r0, 801e660 <_Balloc+0x68>
 801e630:	2101      	movs	r1, #1
 801e632:	fa01 f605 	lsl.w	r6, r1, r5
 801e636:	1d72      	adds	r2, r6, #5
 801e638:	0092      	lsls	r2, r2, #2
 801e63a:	4620      	mov	r0, r4
 801e63c:	f000 fc90 	bl	801ef60 <_calloc_r>
 801e640:	b160      	cbz	r0, 801e65c <_Balloc+0x64>
 801e642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e646:	e00e      	b.n	801e666 <_Balloc+0x6e>
 801e648:	2221      	movs	r2, #33	; 0x21
 801e64a:	2104      	movs	r1, #4
 801e64c:	4620      	mov	r0, r4
 801e64e:	f000 fc87 	bl	801ef60 <_calloc_r>
 801e652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e654:	60f0      	str	r0, [r6, #12]
 801e656:	68db      	ldr	r3, [r3, #12]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d1e4      	bne.n	801e626 <_Balloc+0x2e>
 801e65c:	2000      	movs	r0, #0
 801e65e:	bd70      	pop	{r4, r5, r6, pc}
 801e660:	6802      	ldr	r2, [r0, #0]
 801e662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e666:	2300      	movs	r3, #0
 801e668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e66c:	e7f7      	b.n	801e65e <_Balloc+0x66>
 801e66e:	bf00      	nop
 801e670:	080209d4 	.word	0x080209d4
 801e674:	080209eb 	.word	0x080209eb

0801e678 <_Bfree>:
 801e678:	b570      	push	{r4, r5, r6, lr}
 801e67a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e67c:	4605      	mov	r5, r0
 801e67e:	460c      	mov	r4, r1
 801e680:	b976      	cbnz	r6, 801e6a0 <_Bfree+0x28>
 801e682:	2010      	movs	r0, #16
 801e684:	f000 fd7c 	bl	801f180 <malloc>
 801e688:	4602      	mov	r2, r0
 801e68a:	6268      	str	r0, [r5, #36]	; 0x24
 801e68c:	b920      	cbnz	r0, 801e698 <_Bfree+0x20>
 801e68e:	4b09      	ldr	r3, [pc, #36]	; (801e6b4 <_Bfree+0x3c>)
 801e690:	4809      	ldr	r0, [pc, #36]	; (801e6b8 <_Bfree+0x40>)
 801e692:	218a      	movs	r1, #138	; 0x8a
 801e694:	f000 fd44 	bl	801f120 <__assert_func>
 801e698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e69c:	6006      	str	r6, [r0, #0]
 801e69e:	60c6      	str	r6, [r0, #12]
 801e6a0:	b13c      	cbz	r4, 801e6b2 <_Bfree+0x3a>
 801e6a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e6a4:	6862      	ldr	r2, [r4, #4]
 801e6a6:	68db      	ldr	r3, [r3, #12]
 801e6a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e6ac:	6021      	str	r1, [r4, #0]
 801e6ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e6b2:	bd70      	pop	{r4, r5, r6, pc}
 801e6b4:	080209d4 	.word	0x080209d4
 801e6b8:	080209eb 	.word	0x080209eb

0801e6bc <__multadd>:
 801e6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6c0:	690d      	ldr	r5, [r1, #16]
 801e6c2:	4607      	mov	r7, r0
 801e6c4:	460c      	mov	r4, r1
 801e6c6:	461e      	mov	r6, r3
 801e6c8:	f101 0c14 	add.w	ip, r1, #20
 801e6cc:	2000      	movs	r0, #0
 801e6ce:	f8dc 3000 	ldr.w	r3, [ip]
 801e6d2:	b299      	uxth	r1, r3
 801e6d4:	fb02 6101 	mla	r1, r2, r1, r6
 801e6d8:	0c1e      	lsrs	r6, r3, #16
 801e6da:	0c0b      	lsrs	r3, r1, #16
 801e6dc:	fb02 3306 	mla	r3, r2, r6, r3
 801e6e0:	b289      	uxth	r1, r1
 801e6e2:	3001      	adds	r0, #1
 801e6e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e6e8:	4285      	cmp	r5, r0
 801e6ea:	f84c 1b04 	str.w	r1, [ip], #4
 801e6ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e6f2:	dcec      	bgt.n	801e6ce <__multadd+0x12>
 801e6f4:	b30e      	cbz	r6, 801e73a <__multadd+0x7e>
 801e6f6:	68a3      	ldr	r3, [r4, #8]
 801e6f8:	42ab      	cmp	r3, r5
 801e6fa:	dc19      	bgt.n	801e730 <__multadd+0x74>
 801e6fc:	6861      	ldr	r1, [r4, #4]
 801e6fe:	4638      	mov	r0, r7
 801e700:	3101      	adds	r1, #1
 801e702:	f7ff ff79 	bl	801e5f8 <_Balloc>
 801e706:	4680      	mov	r8, r0
 801e708:	b928      	cbnz	r0, 801e716 <__multadd+0x5a>
 801e70a:	4602      	mov	r2, r0
 801e70c:	4b0c      	ldr	r3, [pc, #48]	; (801e740 <__multadd+0x84>)
 801e70e:	480d      	ldr	r0, [pc, #52]	; (801e744 <__multadd+0x88>)
 801e710:	21b5      	movs	r1, #181	; 0xb5
 801e712:	f000 fd05 	bl	801f120 <__assert_func>
 801e716:	6922      	ldr	r2, [r4, #16]
 801e718:	3202      	adds	r2, #2
 801e71a:	f104 010c 	add.w	r1, r4, #12
 801e71e:	0092      	lsls	r2, r2, #2
 801e720:	300c      	adds	r0, #12
 801e722:	f7ff ff5b 	bl	801e5dc <memcpy>
 801e726:	4621      	mov	r1, r4
 801e728:	4638      	mov	r0, r7
 801e72a:	f7ff ffa5 	bl	801e678 <_Bfree>
 801e72e:	4644      	mov	r4, r8
 801e730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e734:	3501      	adds	r5, #1
 801e736:	615e      	str	r6, [r3, #20]
 801e738:	6125      	str	r5, [r4, #16]
 801e73a:	4620      	mov	r0, r4
 801e73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e740:	08020949 	.word	0x08020949
 801e744:	080209eb 	.word	0x080209eb

0801e748 <__s2b>:
 801e748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e74c:	460c      	mov	r4, r1
 801e74e:	4615      	mov	r5, r2
 801e750:	461f      	mov	r7, r3
 801e752:	2209      	movs	r2, #9
 801e754:	3308      	adds	r3, #8
 801e756:	4606      	mov	r6, r0
 801e758:	fb93 f3f2 	sdiv	r3, r3, r2
 801e75c:	2100      	movs	r1, #0
 801e75e:	2201      	movs	r2, #1
 801e760:	429a      	cmp	r2, r3
 801e762:	db09      	blt.n	801e778 <__s2b+0x30>
 801e764:	4630      	mov	r0, r6
 801e766:	f7ff ff47 	bl	801e5f8 <_Balloc>
 801e76a:	b940      	cbnz	r0, 801e77e <__s2b+0x36>
 801e76c:	4602      	mov	r2, r0
 801e76e:	4b19      	ldr	r3, [pc, #100]	; (801e7d4 <__s2b+0x8c>)
 801e770:	4819      	ldr	r0, [pc, #100]	; (801e7d8 <__s2b+0x90>)
 801e772:	21ce      	movs	r1, #206	; 0xce
 801e774:	f000 fcd4 	bl	801f120 <__assert_func>
 801e778:	0052      	lsls	r2, r2, #1
 801e77a:	3101      	adds	r1, #1
 801e77c:	e7f0      	b.n	801e760 <__s2b+0x18>
 801e77e:	9b08      	ldr	r3, [sp, #32]
 801e780:	6143      	str	r3, [r0, #20]
 801e782:	2d09      	cmp	r5, #9
 801e784:	f04f 0301 	mov.w	r3, #1
 801e788:	6103      	str	r3, [r0, #16]
 801e78a:	dd16      	ble.n	801e7ba <__s2b+0x72>
 801e78c:	f104 0909 	add.w	r9, r4, #9
 801e790:	46c8      	mov	r8, r9
 801e792:	442c      	add	r4, r5
 801e794:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e798:	4601      	mov	r1, r0
 801e79a:	3b30      	subs	r3, #48	; 0x30
 801e79c:	220a      	movs	r2, #10
 801e79e:	4630      	mov	r0, r6
 801e7a0:	f7ff ff8c 	bl	801e6bc <__multadd>
 801e7a4:	45a0      	cmp	r8, r4
 801e7a6:	d1f5      	bne.n	801e794 <__s2b+0x4c>
 801e7a8:	f1a5 0408 	sub.w	r4, r5, #8
 801e7ac:	444c      	add	r4, r9
 801e7ae:	1b2d      	subs	r5, r5, r4
 801e7b0:	1963      	adds	r3, r4, r5
 801e7b2:	42bb      	cmp	r3, r7
 801e7b4:	db04      	blt.n	801e7c0 <__s2b+0x78>
 801e7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7ba:	340a      	adds	r4, #10
 801e7bc:	2509      	movs	r5, #9
 801e7be:	e7f6      	b.n	801e7ae <__s2b+0x66>
 801e7c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e7c4:	4601      	mov	r1, r0
 801e7c6:	3b30      	subs	r3, #48	; 0x30
 801e7c8:	220a      	movs	r2, #10
 801e7ca:	4630      	mov	r0, r6
 801e7cc:	f7ff ff76 	bl	801e6bc <__multadd>
 801e7d0:	e7ee      	b.n	801e7b0 <__s2b+0x68>
 801e7d2:	bf00      	nop
 801e7d4:	08020949 	.word	0x08020949
 801e7d8:	080209eb 	.word	0x080209eb

0801e7dc <__hi0bits>:
 801e7dc:	0c02      	lsrs	r2, r0, #16
 801e7de:	0412      	lsls	r2, r2, #16
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	b9ca      	cbnz	r2, 801e818 <__hi0bits+0x3c>
 801e7e4:	0403      	lsls	r3, r0, #16
 801e7e6:	2010      	movs	r0, #16
 801e7e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801e7ec:	bf04      	itt	eq
 801e7ee:	021b      	lsleq	r3, r3, #8
 801e7f0:	3008      	addeq	r0, #8
 801e7f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801e7f6:	bf04      	itt	eq
 801e7f8:	011b      	lsleq	r3, r3, #4
 801e7fa:	3004      	addeq	r0, #4
 801e7fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801e800:	bf04      	itt	eq
 801e802:	009b      	lsleq	r3, r3, #2
 801e804:	3002      	addeq	r0, #2
 801e806:	2b00      	cmp	r3, #0
 801e808:	db05      	blt.n	801e816 <__hi0bits+0x3a>
 801e80a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801e80e:	f100 0001 	add.w	r0, r0, #1
 801e812:	bf08      	it	eq
 801e814:	2020      	moveq	r0, #32
 801e816:	4770      	bx	lr
 801e818:	2000      	movs	r0, #0
 801e81a:	e7e5      	b.n	801e7e8 <__hi0bits+0xc>

0801e81c <__lo0bits>:
 801e81c:	6803      	ldr	r3, [r0, #0]
 801e81e:	4602      	mov	r2, r0
 801e820:	f013 0007 	ands.w	r0, r3, #7
 801e824:	d00b      	beq.n	801e83e <__lo0bits+0x22>
 801e826:	07d9      	lsls	r1, r3, #31
 801e828:	d421      	bmi.n	801e86e <__lo0bits+0x52>
 801e82a:	0798      	lsls	r0, r3, #30
 801e82c:	bf49      	itett	mi
 801e82e:	085b      	lsrmi	r3, r3, #1
 801e830:	089b      	lsrpl	r3, r3, #2
 801e832:	2001      	movmi	r0, #1
 801e834:	6013      	strmi	r3, [r2, #0]
 801e836:	bf5c      	itt	pl
 801e838:	6013      	strpl	r3, [r2, #0]
 801e83a:	2002      	movpl	r0, #2
 801e83c:	4770      	bx	lr
 801e83e:	b299      	uxth	r1, r3
 801e840:	b909      	cbnz	r1, 801e846 <__lo0bits+0x2a>
 801e842:	0c1b      	lsrs	r3, r3, #16
 801e844:	2010      	movs	r0, #16
 801e846:	b2d9      	uxtb	r1, r3
 801e848:	b909      	cbnz	r1, 801e84e <__lo0bits+0x32>
 801e84a:	3008      	adds	r0, #8
 801e84c:	0a1b      	lsrs	r3, r3, #8
 801e84e:	0719      	lsls	r1, r3, #28
 801e850:	bf04      	itt	eq
 801e852:	091b      	lsreq	r3, r3, #4
 801e854:	3004      	addeq	r0, #4
 801e856:	0799      	lsls	r1, r3, #30
 801e858:	bf04      	itt	eq
 801e85a:	089b      	lsreq	r3, r3, #2
 801e85c:	3002      	addeq	r0, #2
 801e85e:	07d9      	lsls	r1, r3, #31
 801e860:	d403      	bmi.n	801e86a <__lo0bits+0x4e>
 801e862:	085b      	lsrs	r3, r3, #1
 801e864:	f100 0001 	add.w	r0, r0, #1
 801e868:	d003      	beq.n	801e872 <__lo0bits+0x56>
 801e86a:	6013      	str	r3, [r2, #0]
 801e86c:	4770      	bx	lr
 801e86e:	2000      	movs	r0, #0
 801e870:	4770      	bx	lr
 801e872:	2020      	movs	r0, #32
 801e874:	4770      	bx	lr
	...

0801e878 <__i2b>:
 801e878:	b510      	push	{r4, lr}
 801e87a:	460c      	mov	r4, r1
 801e87c:	2101      	movs	r1, #1
 801e87e:	f7ff febb 	bl	801e5f8 <_Balloc>
 801e882:	4602      	mov	r2, r0
 801e884:	b928      	cbnz	r0, 801e892 <__i2b+0x1a>
 801e886:	4b05      	ldr	r3, [pc, #20]	; (801e89c <__i2b+0x24>)
 801e888:	4805      	ldr	r0, [pc, #20]	; (801e8a0 <__i2b+0x28>)
 801e88a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e88e:	f000 fc47 	bl	801f120 <__assert_func>
 801e892:	2301      	movs	r3, #1
 801e894:	6144      	str	r4, [r0, #20]
 801e896:	6103      	str	r3, [r0, #16]
 801e898:	bd10      	pop	{r4, pc}
 801e89a:	bf00      	nop
 801e89c:	08020949 	.word	0x08020949
 801e8a0:	080209eb 	.word	0x080209eb

0801e8a4 <__multiply>:
 801e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a8:	4691      	mov	r9, r2
 801e8aa:	690a      	ldr	r2, [r1, #16]
 801e8ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e8b0:	429a      	cmp	r2, r3
 801e8b2:	bfb8      	it	lt
 801e8b4:	460b      	movlt	r3, r1
 801e8b6:	460c      	mov	r4, r1
 801e8b8:	bfbc      	itt	lt
 801e8ba:	464c      	movlt	r4, r9
 801e8bc:	4699      	movlt	r9, r3
 801e8be:	6927      	ldr	r7, [r4, #16]
 801e8c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e8c4:	68a3      	ldr	r3, [r4, #8]
 801e8c6:	6861      	ldr	r1, [r4, #4]
 801e8c8:	eb07 060a 	add.w	r6, r7, sl
 801e8cc:	42b3      	cmp	r3, r6
 801e8ce:	b085      	sub	sp, #20
 801e8d0:	bfb8      	it	lt
 801e8d2:	3101      	addlt	r1, #1
 801e8d4:	f7ff fe90 	bl	801e5f8 <_Balloc>
 801e8d8:	b930      	cbnz	r0, 801e8e8 <__multiply+0x44>
 801e8da:	4602      	mov	r2, r0
 801e8dc:	4b43      	ldr	r3, [pc, #268]	; (801e9ec <__multiply+0x148>)
 801e8de:	4844      	ldr	r0, [pc, #272]	; (801e9f0 <__multiply+0x14c>)
 801e8e0:	f240 115d 	movw	r1, #349	; 0x15d
 801e8e4:	f000 fc1c 	bl	801f120 <__assert_func>
 801e8e8:	f100 0514 	add.w	r5, r0, #20
 801e8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e8f0:	462b      	mov	r3, r5
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	4543      	cmp	r3, r8
 801e8f6:	d321      	bcc.n	801e93c <__multiply+0x98>
 801e8f8:	f104 0314 	add.w	r3, r4, #20
 801e8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e900:	f109 0314 	add.w	r3, r9, #20
 801e904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e908:	9202      	str	r2, [sp, #8]
 801e90a:	1b3a      	subs	r2, r7, r4
 801e90c:	3a15      	subs	r2, #21
 801e90e:	f022 0203 	bic.w	r2, r2, #3
 801e912:	3204      	adds	r2, #4
 801e914:	f104 0115 	add.w	r1, r4, #21
 801e918:	428f      	cmp	r7, r1
 801e91a:	bf38      	it	cc
 801e91c:	2204      	movcc	r2, #4
 801e91e:	9201      	str	r2, [sp, #4]
 801e920:	9a02      	ldr	r2, [sp, #8]
 801e922:	9303      	str	r3, [sp, #12]
 801e924:	429a      	cmp	r2, r3
 801e926:	d80c      	bhi.n	801e942 <__multiply+0x9e>
 801e928:	2e00      	cmp	r6, #0
 801e92a:	dd03      	ble.n	801e934 <__multiply+0x90>
 801e92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e930:	2b00      	cmp	r3, #0
 801e932:	d059      	beq.n	801e9e8 <__multiply+0x144>
 801e934:	6106      	str	r6, [r0, #16]
 801e936:	b005      	add	sp, #20
 801e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e93c:	f843 2b04 	str.w	r2, [r3], #4
 801e940:	e7d8      	b.n	801e8f4 <__multiply+0x50>
 801e942:	f8b3 a000 	ldrh.w	sl, [r3]
 801e946:	f1ba 0f00 	cmp.w	sl, #0
 801e94a:	d023      	beq.n	801e994 <__multiply+0xf0>
 801e94c:	f104 0e14 	add.w	lr, r4, #20
 801e950:	46a9      	mov	r9, r5
 801e952:	f04f 0c00 	mov.w	ip, #0
 801e956:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e95a:	f8d9 1000 	ldr.w	r1, [r9]
 801e95e:	fa1f fb82 	uxth.w	fp, r2
 801e962:	b289      	uxth	r1, r1
 801e964:	fb0a 110b 	mla	r1, sl, fp, r1
 801e968:	4461      	add	r1, ip
 801e96a:	f8d9 c000 	ldr.w	ip, [r9]
 801e96e:	0c12      	lsrs	r2, r2, #16
 801e970:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e974:	fb0a c202 	mla	r2, sl, r2, ip
 801e978:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e97c:	b289      	uxth	r1, r1
 801e97e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e982:	4577      	cmp	r7, lr
 801e984:	f849 1b04 	str.w	r1, [r9], #4
 801e988:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e98c:	d8e3      	bhi.n	801e956 <__multiply+0xb2>
 801e98e:	9a01      	ldr	r2, [sp, #4]
 801e990:	f845 c002 	str.w	ip, [r5, r2]
 801e994:	9a03      	ldr	r2, [sp, #12]
 801e996:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e99a:	3304      	adds	r3, #4
 801e99c:	f1b9 0f00 	cmp.w	r9, #0
 801e9a0:	d020      	beq.n	801e9e4 <__multiply+0x140>
 801e9a2:	6829      	ldr	r1, [r5, #0]
 801e9a4:	f104 0c14 	add.w	ip, r4, #20
 801e9a8:	46ae      	mov	lr, r5
 801e9aa:	f04f 0a00 	mov.w	sl, #0
 801e9ae:	f8bc b000 	ldrh.w	fp, [ip]
 801e9b2:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e9b6:	fb09 220b 	mla	r2, r9, fp, r2
 801e9ba:	4492      	add	sl, r2
 801e9bc:	b289      	uxth	r1, r1
 801e9be:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e9c2:	f84e 1b04 	str.w	r1, [lr], #4
 801e9c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e9ca:	f8be 1000 	ldrh.w	r1, [lr]
 801e9ce:	0c12      	lsrs	r2, r2, #16
 801e9d0:	fb09 1102 	mla	r1, r9, r2, r1
 801e9d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e9d8:	4567      	cmp	r7, ip
 801e9da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e9de:	d8e6      	bhi.n	801e9ae <__multiply+0x10a>
 801e9e0:	9a01      	ldr	r2, [sp, #4]
 801e9e2:	50a9      	str	r1, [r5, r2]
 801e9e4:	3504      	adds	r5, #4
 801e9e6:	e79b      	b.n	801e920 <__multiply+0x7c>
 801e9e8:	3e01      	subs	r6, #1
 801e9ea:	e79d      	b.n	801e928 <__multiply+0x84>
 801e9ec:	08020949 	.word	0x08020949
 801e9f0:	080209eb 	.word	0x080209eb

0801e9f4 <__pow5mult>:
 801e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9f8:	4615      	mov	r5, r2
 801e9fa:	f012 0203 	ands.w	r2, r2, #3
 801e9fe:	4606      	mov	r6, r0
 801ea00:	460f      	mov	r7, r1
 801ea02:	d007      	beq.n	801ea14 <__pow5mult+0x20>
 801ea04:	4c25      	ldr	r4, [pc, #148]	; (801ea9c <__pow5mult+0xa8>)
 801ea06:	3a01      	subs	r2, #1
 801ea08:	2300      	movs	r3, #0
 801ea0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ea0e:	f7ff fe55 	bl	801e6bc <__multadd>
 801ea12:	4607      	mov	r7, r0
 801ea14:	10ad      	asrs	r5, r5, #2
 801ea16:	d03d      	beq.n	801ea94 <__pow5mult+0xa0>
 801ea18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ea1a:	b97c      	cbnz	r4, 801ea3c <__pow5mult+0x48>
 801ea1c:	2010      	movs	r0, #16
 801ea1e:	f000 fbaf 	bl	801f180 <malloc>
 801ea22:	4602      	mov	r2, r0
 801ea24:	6270      	str	r0, [r6, #36]	; 0x24
 801ea26:	b928      	cbnz	r0, 801ea34 <__pow5mult+0x40>
 801ea28:	4b1d      	ldr	r3, [pc, #116]	; (801eaa0 <__pow5mult+0xac>)
 801ea2a:	481e      	ldr	r0, [pc, #120]	; (801eaa4 <__pow5mult+0xb0>)
 801ea2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ea30:	f000 fb76 	bl	801f120 <__assert_func>
 801ea34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ea38:	6004      	str	r4, [r0, #0]
 801ea3a:	60c4      	str	r4, [r0, #12]
 801ea3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ea40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ea44:	b94c      	cbnz	r4, 801ea5a <__pow5mult+0x66>
 801ea46:	f240 2171 	movw	r1, #625	; 0x271
 801ea4a:	4630      	mov	r0, r6
 801ea4c:	f7ff ff14 	bl	801e878 <__i2b>
 801ea50:	2300      	movs	r3, #0
 801ea52:	f8c8 0008 	str.w	r0, [r8, #8]
 801ea56:	4604      	mov	r4, r0
 801ea58:	6003      	str	r3, [r0, #0]
 801ea5a:	f04f 0900 	mov.w	r9, #0
 801ea5e:	07eb      	lsls	r3, r5, #31
 801ea60:	d50a      	bpl.n	801ea78 <__pow5mult+0x84>
 801ea62:	4639      	mov	r1, r7
 801ea64:	4622      	mov	r2, r4
 801ea66:	4630      	mov	r0, r6
 801ea68:	f7ff ff1c 	bl	801e8a4 <__multiply>
 801ea6c:	4639      	mov	r1, r7
 801ea6e:	4680      	mov	r8, r0
 801ea70:	4630      	mov	r0, r6
 801ea72:	f7ff fe01 	bl	801e678 <_Bfree>
 801ea76:	4647      	mov	r7, r8
 801ea78:	106d      	asrs	r5, r5, #1
 801ea7a:	d00b      	beq.n	801ea94 <__pow5mult+0xa0>
 801ea7c:	6820      	ldr	r0, [r4, #0]
 801ea7e:	b938      	cbnz	r0, 801ea90 <__pow5mult+0x9c>
 801ea80:	4622      	mov	r2, r4
 801ea82:	4621      	mov	r1, r4
 801ea84:	4630      	mov	r0, r6
 801ea86:	f7ff ff0d 	bl	801e8a4 <__multiply>
 801ea8a:	6020      	str	r0, [r4, #0]
 801ea8c:	f8c0 9000 	str.w	r9, [r0]
 801ea90:	4604      	mov	r4, r0
 801ea92:	e7e4      	b.n	801ea5e <__pow5mult+0x6a>
 801ea94:	4638      	mov	r0, r7
 801ea96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea9a:	bf00      	nop
 801ea9c:	08020b38 	.word	0x08020b38
 801eaa0:	080209d4 	.word	0x080209d4
 801eaa4:	080209eb 	.word	0x080209eb

0801eaa8 <__lshift>:
 801eaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaac:	460c      	mov	r4, r1
 801eaae:	6849      	ldr	r1, [r1, #4]
 801eab0:	6923      	ldr	r3, [r4, #16]
 801eab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801eab6:	68a3      	ldr	r3, [r4, #8]
 801eab8:	4607      	mov	r7, r0
 801eaba:	4691      	mov	r9, r2
 801eabc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801eac0:	f108 0601 	add.w	r6, r8, #1
 801eac4:	42b3      	cmp	r3, r6
 801eac6:	db0b      	blt.n	801eae0 <__lshift+0x38>
 801eac8:	4638      	mov	r0, r7
 801eaca:	f7ff fd95 	bl	801e5f8 <_Balloc>
 801eace:	4605      	mov	r5, r0
 801ead0:	b948      	cbnz	r0, 801eae6 <__lshift+0x3e>
 801ead2:	4602      	mov	r2, r0
 801ead4:	4b2a      	ldr	r3, [pc, #168]	; (801eb80 <__lshift+0xd8>)
 801ead6:	482b      	ldr	r0, [pc, #172]	; (801eb84 <__lshift+0xdc>)
 801ead8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801eadc:	f000 fb20 	bl	801f120 <__assert_func>
 801eae0:	3101      	adds	r1, #1
 801eae2:	005b      	lsls	r3, r3, #1
 801eae4:	e7ee      	b.n	801eac4 <__lshift+0x1c>
 801eae6:	2300      	movs	r3, #0
 801eae8:	f100 0114 	add.w	r1, r0, #20
 801eaec:	f100 0210 	add.w	r2, r0, #16
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	4553      	cmp	r3, sl
 801eaf4:	db37      	blt.n	801eb66 <__lshift+0xbe>
 801eaf6:	6920      	ldr	r0, [r4, #16]
 801eaf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eafc:	f104 0314 	add.w	r3, r4, #20
 801eb00:	f019 091f 	ands.w	r9, r9, #31
 801eb04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eb08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801eb0c:	d02f      	beq.n	801eb6e <__lshift+0xc6>
 801eb0e:	f1c9 0e20 	rsb	lr, r9, #32
 801eb12:	468a      	mov	sl, r1
 801eb14:	f04f 0c00 	mov.w	ip, #0
 801eb18:	681a      	ldr	r2, [r3, #0]
 801eb1a:	fa02 f209 	lsl.w	r2, r2, r9
 801eb1e:	ea42 020c 	orr.w	r2, r2, ip
 801eb22:	f84a 2b04 	str.w	r2, [sl], #4
 801eb26:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb2a:	4298      	cmp	r0, r3
 801eb2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801eb30:	d8f2      	bhi.n	801eb18 <__lshift+0x70>
 801eb32:	1b03      	subs	r3, r0, r4
 801eb34:	3b15      	subs	r3, #21
 801eb36:	f023 0303 	bic.w	r3, r3, #3
 801eb3a:	3304      	adds	r3, #4
 801eb3c:	f104 0215 	add.w	r2, r4, #21
 801eb40:	4290      	cmp	r0, r2
 801eb42:	bf38      	it	cc
 801eb44:	2304      	movcc	r3, #4
 801eb46:	f841 c003 	str.w	ip, [r1, r3]
 801eb4a:	f1bc 0f00 	cmp.w	ip, #0
 801eb4e:	d001      	beq.n	801eb54 <__lshift+0xac>
 801eb50:	f108 0602 	add.w	r6, r8, #2
 801eb54:	3e01      	subs	r6, #1
 801eb56:	4638      	mov	r0, r7
 801eb58:	612e      	str	r6, [r5, #16]
 801eb5a:	4621      	mov	r1, r4
 801eb5c:	f7ff fd8c 	bl	801e678 <_Bfree>
 801eb60:	4628      	mov	r0, r5
 801eb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb66:	f842 0f04 	str.w	r0, [r2, #4]!
 801eb6a:	3301      	adds	r3, #1
 801eb6c:	e7c1      	b.n	801eaf2 <__lshift+0x4a>
 801eb6e:	3904      	subs	r1, #4
 801eb70:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb74:	f841 2f04 	str.w	r2, [r1, #4]!
 801eb78:	4298      	cmp	r0, r3
 801eb7a:	d8f9      	bhi.n	801eb70 <__lshift+0xc8>
 801eb7c:	e7ea      	b.n	801eb54 <__lshift+0xac>
 801eb7e:	bf00      	nop
 801eb80:	08020949 	.word	0x08020949
 801eb84:	080209eb 	.word	0x080209eb

0801eb88 <__mcmp>:
 801eb88:	690a      	ldr	r2, [r1, #16]
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	6900      	ldr	r0, [r0, #16]
 801eb8e:	1a80      	subs	r0, r0, r2
 801eb90:	b530      	push	{r4, r5, lr}
 801eb92:	d10d      	bne.n	801ebb0 <__mcmp+0x28>
 801eb94:	3314      	adds	r3, #20
 801eb96:	3114      	adds	r1, #20
 801eb98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801eb9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801eba0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801eba4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801eba8:	4295      	cmp	r5, r2
 801ebaa:	d002      	beq.n	801ebb2 <__mcmp+0x2a>
 801ebac:	d304      	bcc.n	801ebb8 <__mcmp+0x30>
 801ebae:	2001      	movs	r0, #1
 801ebb0:	bd30      	pop	{r4, r5, pc}
 801ebb2:	42a3      	cmp	r3, r4
 801ebb4:	d3f4      	bcc.n	801eba0 <__mcmp+0x18>
 801ebb6:	e7fb      	b.n	801ebb0 <__mcmp+0x28>
 801ebb8:	f04f 30ff 	mov.w	r0, #4294967295
 801ebbc:	e7f8      	b.n	801ebb0 <__mcmp+0x28>
	...

0801ebc0 <__mdiff>:
 801ebc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc4:	460d      	mov	r5, r1
 801ebc6:	4607      	mov	r7, r0
 801ebc8:	4611      	mov	r1, r2
 801ebca:	4628      	mov	r0, r5
 801ebcc:	4614      	mov	r4, r2
 801ebce:	f7ff ffdb 	bl	801eb88 <__mcmp>
 801ebd2:	1e06      	subs	r6, r0, #0
 801ebd4:	d111      	bne.n	801ebfa <__mdiff+0x3a>
 801ebd6:	4631      	mov	r1, r6
 801ebd8:	4638      	mov	r0, r7
 801ebda:	f7ff fd0d 	bl	801e5f8 <_Balloc>
 801ebde:	4602      	mov	r2, r0
 801ebe0:	b928      	cbnz	r0, 801ebee <__mdiff+0x2e>
 801ebe2:	4b39      	ldr	r3, [pc, #228]	; (801ecc8 <__mdiff+0x108>)
 801ebe4:	f240 2132 	movw	r1, #562	; 0x232
 801ebe8:	4838      	ldr	r0, [pc, #224]	; (801eccc <__mdiff+0x10c>)
 801ebea:	f000 fa99 	bl	801f120 <__assert_func>
 801ebee:	2301      	movs	r3, #1
 801ebf0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801ebf4:	4610      	mov	r0, r2
 801ebf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebfa:	bfa4      	itt	ge
 801ebfc:	4623      	movge	r3, r4
 801ebfe:	462c      	movge	r4, r5
 801ec00:	4638      	mov	r0, r7
 801ec02:	6861      	ldr	r1, [r4, #4]
 801ec04:	bfa6      	itte	ge
 801ec06:	461d      	movge	r5, r3
 801ec08:	2600      	movge	r6, #0
 801ec0a:	2601      	movlt	r6, #1
 801ec0c:	f7ff fcf4 	bl	801e5f8 <_Balloc>
 801ec10:	4602      	mov	r2, r0
 801ec12:	b918      	cbnz	r0, 801ec1c <__mdiff+0x5c>
 801ec14:	4b2c      	ldr	r3, [pc, #176]	; (801ecc8 <__mdiff+0x108>)
 801ec16:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ec1a:	e7e5      	b.n	801ebe8 <__mdiff+0x28>
 801ec1c:	6927      	ldr	r7, [r4, #16]
 801ec1e:	60c6      	str	r6, [r0, #12]
 801ec20:	692e      	ldr	r6, [r5, #16]
 801ec22:	f104 0014 	add.w	r0, r4, #20
 801ec26:	f105 0914 	add.w	r9, r5, #20
 801ec2a:	f102 0e14 	add.w	lr, r2, #20
 801ec2e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801ec32:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ec36:	3410      	adds	r4, #16
 801ec38:	46f2      	mov	sl, lr
 801ec3a:	2100      	movs	r1, #0
 801ec3c:	f859 3b04 	ldr.w	r3, [r9], #4
 801ec40:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801ec44:	fa1f f883 	uxth.w	r8, r3
 801ec48:	fa11 f18b 	uxtah	r1, r1, fp
 801ec4c:	0c1b      	lsrs	r3, r3, #16
 801ec4e:	eba1 0808 	sub.w	r8, r1, r8
 801ec52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ec56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ec5a:	fa1f f888 	uxth.w	r8, r8
 801ec5e:	1419      	asrs	r1, r3, #16
 801ec60:	454e      	cmp	r6, r9
 801ec62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ec66:	f84a 3b04 	str.w	r3, [sl], #4
 801ec6a:	d8e7      	bhi.n	801ec3c <__mdiff+0x7c>
 801ec6c:	1b73      	subs	r3, r6, r5
 801ec6e:	3b15      	subs	r3, #21
 801ec70:	f023 0303 	bic.w	r3, r3, #3
 801ec74:	3304      	adds	r3, #4
 801ec76:	3515      	adds	r5, #21
 801ec78:	42ae      	cmp	r6, r5
 801ec7a:	bf38      	it	cc
 801ec7c:	2304      	movcc	r3, #4
 801ec7e:	4418      	add	r0, r3
 801ec80:	4473      	add	r3, lr
 801ec82:	469e      	mov	lr, r3
 801ec84:	4606      	mov	r6, r0
 801ec86:	4566      	cmp	r6, ip
 801ec88:	d30e      	bcc.n	801eca8 <__mdiff+0xe8>
 801ec8a:	f10c 0103 	add.w	r1, ip, #3
 801ec8e:	1a09      	subs	r1, r1, r0
 801ec90:	f021 0103 	bic.w	r1, r1, #3
 801ec94:	3803      	subs	r0, #3
 801ec96:	4584      	cmp	ip, r0
 801ec98:	bf38      	it	cc
 801ec9a:	2100      	movcc	r1, #0
 801ec9c:	4419      	add	r1, r3
 801ec9e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801eca2:	b17b      	cbz	r3, 801ecc4 <__mdiff+0x104>
 801eca4:	6117      	str	r7, [r2, #16]
 801eca6:	e7a5      	b.n	801ebf4 <__mdiff+0x34>
 801eca8:	f856 8b04 	ldr.w	r8, [r6], #4
 801ecac:	fa11 f488 	uxtah	r4, r1, r8
 801ecb0:	1425      	asrs	r5, r4, #16
 801ecb2:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801ecb6:	b2a4      	uxth	r4, r4
 801ecb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801ecbc:	f84e 4b04 	str.w	r4, [lr], #4
 801ecc0:	1429      	asrs	r1, r5, #16
 801ecc2:	e7e0      	b.n	801ec86 <__mdiff+0xc6>
 801ecc4:	3f01      	subs	r7, #1
 801ecc6:	e7ea      	b.n	801ec9e <__mdiff+0xde>
 801ecc8:	08020949 	.word	0x08020949
 801eccc:	080209eb 	.word	0x080209eb

0801ecd0 <__ulp>:
 801ecd0:	4b11      	ldr	r3, [pc, #68]	; (801ed18 <__ulp+0x48>)
 801ecd2:	400b      	ands	r3, r1
 801ecd4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	dd02      	ble.n	801ece2 <__ulp+0x12>
 801ecdc:	2000      	movs	r0, #0
 801ecde:	4619      	mov	r1, r3
 801ece0:	4770      	bx	lr
 801ece2:	425b      	negs	r3, r3
 801ece4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801ece8:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ecec:	f04f 0000 	mov.w	r0, #0
 801ecf0:	f04f 0100 	mov.w	r1, #0
 801ecf4:	da04      	bge.n	801ed00 <__ulp+0x30>
 801ecf6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801ecfa:	fa43 f102 	asr.w	r1, r3, r2
 801ecfe:	4770      	bx	lr
 801ed00:	f1a2 0314 	sub.w	r3, r2, #20
 801ed04:	2b1e      	cmp	r3, #30
 801ed06:	bfda      	itte	le
 801ed08:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801ed0c:	fa22 f303 	lsrle.w	r3, r2, r3
 801ed10:	2301      	movgt	r3, #1
 801ed12:	4618      	mov	r0, r3
 801ed14:	4770      	bx	lr
 801ed16:	bf00      	nop
 801ed18:	7ff00000 	.word	0x7ff00000

0801ed1c <__b2d>:
 801ed1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed20:	6907      	ldr	r7, [r0, #16]
 801ed22:	f100 0914 	add.w	r9, r0, #20
 801ed26:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801ed2a:	f1a7 0804 	sub.w	r8, r7, #4
 801ed2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801ed32:	4630      	mov	r0, r6
 801ed34:	f7ff fd52 	bl	801e7dc <__hi0bits>
 801ed38:	f1c0 0320 	rsb	r3, r0, #32
 801ed3c:	280a      	cmp	r0, #10
 801ed3e:	600b      	str	r3, [r1, #0]
 801ed40:	491f      	ldr	r1, [pc, #124]	; (801edc0 <__b2d+0xa4>)
 801ed42:	dc17      	bgt.n	801ed74 <__b2d+0x58>
 801ed44:	f1c0 0c0b 	rsb	ip, r0, #11
 801ed48:	45c1      	cmp	r9, r8
 801ed4a:	fa26 f30c 	lsr.w	r3, r6, ip
 801ed4e:	bf38      	it	cc
 801ed50:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801ed54:	ea43 0501 	orr.w	r5, r3, r1
 801ed58:	bf28      	it	cs
 801ed5a:	2200      	movcs	r2, #0
 801ed5c:	f100 0315 	add.w	r3, r0, #21
 801ed60:	fa06 f303 	lsl.w	r3, r6, r3
 801ed64:	fa22 f20c 	lsr.w	r2, r2, ip
 801ed68:	ea43 0402 	orr.w	r4, r3, r2
 801ed6c:	4620      	mov	r0, r4
 801ed6e:	4629      	mov	r1, r5
 801ed70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed74:	45c1      	cmp	r9, r8
 801ed76:	bf3a      	itte	cc
 801ed78:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801ed7c:	f1a7 0808 	subcc.w	r8, r7, #8
 801ed80:	2200      	movcs	r2, #0
 801ed82:	f1b0 030b 	subs.w	r3, r0, #11
 801ed86:	d016      	beq.n	801edb6 <__b2d+0x9a>
 801ed88:	f1c3 0720 	rsb	r7, r3, #32
 801ed8c:	fa22 f107 	lsr.w	r1, r2, r7
 801ed90:	45c8      	cmp	r8, r9
 801ed92:	fa06 f603 	lsl.w	r6, r6, r3
 801ed96:	ea46 0601 	orr.w	r6, r6, r1
 801ed9a:	bf8c      	ite	hi
 801ed9c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801eda0:	2100      	movls	r1, #0
 801eda2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801eda6:	fa02 f003 	lsl.w	r0, r2, r3
 801edaa:	40f9      	lsrs	r1, r7
 801edac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801edb0:	ea40 0401 	orr.w	r4, r0, r1
 801edb4:	e7da      	b.n	801ed6c <__b2d+0x50>
 801edb6:	ea46 0501 	orr.w	r5, r6, r1
 801edba:	4614      	mov	r4, r2
 801edbc:	e7d6      	b.n	801ed6c <__b2d+0x50>
 801edbe:	bf00      	nop
 801edc0:	3ff00000 	.word	0x3ff00000

0801edc4 <__d2b>:
 801edc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801edc8:	2101      	movs	r1, #1
 801edca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801edce:	4690      	mov	r8, r2
 801edd0:	461d      	mov	r5, r3
 801edd2:	f7ff fc11 	bl	801e5f8 <_Balloc>
 801edd6:	4604      	mov	r4, r0
 801edd8:	b930      	cbnz	r0, 801ede8 <__d2b+0x24>
 801edda:	4602      	mov	r2, r0
 801eddc:	4b25      	ldr	r3, [pc, #148]	; (801ee74 <__d2b+0xb0>)
 801edde:	4826      	ldr	r0, [pc, #152]	; (801ee78 <__d2b+0xb4>)
 801ede0:	f240 310a 	movw	r1, #778	; 0x30a
 801ede4:	f000 f99c 	bl	801f120 <__assert_func>
 801ede8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801edec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801edf0:	bb2d      	cbnz	r5, 801ee3e <__d2b+0x7a>
 801edf2:	9301      	str	r3, [sp, #4]
 801edf4:	f1b8 0300 	subs.w	r3, r8, #0
 801edf8:	d026      	beq.n	801ee48 <__d2b+0x84>
 801edfa:	4668      	mov	r0, sp
 801edfc:	9300      	str	r3, [sp, #0]
 801edfe:	f7ff fd0d 	bl	801e81c <__lo0bits>
 801ee02:	9900      	ldr	r1, [sp, #0]
 801ee04:	b1f0      	cbz	r0, 801ee44 <__d2b+0x80>
 801ee06:	9a01      	ldr	r2, [sp, #4]
 801ee08:	f1c0 0320 	rsb	r3, r0, #32
 801ee0c:	fa02 f303 	lsl.w	r3, r2, r3
 801ee10:	430b      	orrs	r3, r1
 801ee12:	40c2      	lsrs	r2, r0
 801ee14:	6163      	str	r3, [r4, #20]
 801ee16:	9201      	str	r2, [sp, #4]
 801ee18:	9b01      	ldr	r3, [sp, #4]
 801ee1a:	61a3      	str	r3, [r4, #24]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	bf14      	ite	ne
 801ee20:	2102      	movne	r1, #2
 801ee22:	2101      	moveq	r1, #1
 801ee24:	6121      	str	r1, [r4, #16]
 801ee26:	b1c5      	cbz	r5, 801ee5a <__d2b+0x96>
 801ee28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ee2c:	4405      	add	r5, r0
 801ee2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ee32:	603d      	str	r5, [r7, #0]
 801ee34:	6030      	str	r0, [r6, #0]
 801ee36:	4620      	mov	r0, r4
 801ee38:	b002      	add	sp, #8
 801ee3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ee42:	e7d6      	b.n	801edf2 <__d2b+0x2e>
 801ee44:	6161      	str	r1, [r4, #20]
 801ee46:	e7e7      	b.n	801ee18 <__d2b+0x54>
 801ee48:	a801      	add	r0, sp, #4
 801ee4a:	f7ff fce7 	bl	801e81c <__lo0bits>
 801ee4e:	9b01      	ldr	r3, [sp, #4]
 801ee50:	6163      	str	r3, [r4, #20]
 801ee52:	2101      	movs	r1, #1
 801ee54:	6121      	str	r1, [r4, #16]
 801ee56:	3020      	adds	r0, #32
 801ee58:	e7e5      	b.n	801ee26 <__d2b+0x62>
 801ee5a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801ee5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ee62:	6038      	str	r0, [r7, #0]
 801ee64:	6918      	ldr	r0, [r3, #16]
 801ee66:	f7ff fcb9 	bl	801e7dc <__hi0bits>
 801ee6a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801ee6e:	6031      	str	r1, [r6, #0]
 801ee70:	e7e1      	b.n	801ee36 <__d2b+0x72>
 801ee72:	bf00      	nop
 801ee74:	08020949 	.word	0x08020949
 801ee78:	080209eb 	.word	0x080209eb

0801ee7c <__ratio>:
 801ee7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee80:	4688      	mov	r8, r1
 801ee82:	4669      	mov	r1, sp
 801ee84:	4681      	mov	r9, r0
 801ee86:	f7ff ff49 	bl	801ed1c <__b2d>
 801ee8a:	460f      	mov	r7, r1
 801ee8c:	4604      	mov	r4, r0
 801ee8e:	460d      	mov	r5, r1
 801ee90:	4640      	mov	r0, r8
 801ee92:	a901      	add	r1, sp, #4
 801ee94:	f7ff ff42 	bl	801ed1c <__b2d>
 801ee98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ee9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801eea0:	eba3 0c02 	sub.w	ip, r3, r2
 801eea4:	e9dd 3200 	ldrd	r3, r2, [sp]
 801eea8:	1a9b      	subs	r3, r3, r2
 801eeaa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	bfd5      	itete	le
 801eeb2:	460a      	movle	r2, r1
 801eeb4:	462a      	movgt	r2, r5
 801eeb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801eeba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801eebe:	468b      	mov	fp, r1
 801eec0:	bfd8      	it	le
 801eec2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801eec6:	465b      	mov	r3, fp
 801eec8:	4602      	mov	r2, r0
 801eeca:	4639      	mov	r1, r7
 801eecc:	4620      	mov	r0, r4
 801eece:	f7e1 fc95 	bl	80007fc <__aeabi_ddiv>
 801eed2:	b003      	add	sp, #12
 801eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eed8 <__copybits>:
 801eed8:	3901      	subs	r1, #1
 801eeda:	b570      	push	{r4, r5, r6, lr}
 801eedc:	1149      	asrs	r1, r1, #5
 801eede:	6914      	ldr	r4, [r2, #16]
 801eee0:	3101      	adds	r1, #1
 801eee2:	f102 0314 	add.w	r3, r2, #20
 801eee6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801eeea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eeee:	1f05      	subs	r5, r0, #4
 801eef0:	42a3      	cmp	r3, r4
 801eef2:	d30c      	bcc.n	801ef0e <__copybits+0x36>
 801eef4:	1aa3      	subs	r3, r4, r2
 801eef6:	3b11      	subs	r3, #17
 801eef8:	f023 0303 	bic.w	r3, r3, #3
 801eefc:	3211      	adds	r2, #17
 801eefe:	42a2      	cmp	r2, r4
 801ef00:	bf88      	it	hi
 801ef02:	2300      	movhi	r3, #0
 801ef04:	4418      	add	r0, r3
 801ef06:	2300      	movs	r3, #0
 801ef08:	4288      	cmp	r0, r1
 801ef0a:	d305      	bcc.n	801ef18 <__copybits+0x40>
 801ef0c:	bd70      	pop	{r4, r5, r6, pc}
 801ef0e:	f853 6b04 	ldr.w	r6, [r3], #4
 801ef12:	f845 6f04 	str.w	r6, [r5, #4]!
 801ef16:	e7eb      	b.n	801eef0 <__copybits+0x18>
 801ef18:	f840 3b04 	str.w	r3, [r0], #4
 801ef1c:	e7f4      	b.n	801ef08 <__copybits+0x30>

0801ef1e <__any_on>:
 801ef1e:	f100 0214 	add.w	r2, r0, #20
 801ef22:	6900      	ldr	r0, [r0, #16]
 801ef24:	114b      	asrs	r3, r1, #5
 801ef26:	4298      	cmp	r0, r3
 801ef28:	b510      	push	{r4, lr}
 801ef2a:	db11      	blt.n	801ef50 <__any_on+0x32>
 801ef2c:	dd0a      	ble.n	801ef44 <__any_on+0x26>
 801ef2e:	f011 011f 	ands.w	r1, r1, #31
 801ef32:	d007      	beq.n	801ef44 <__any_on+0x26>
 801ef34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ef38:	fa24 f001 	lsr.w	r0, r4, r1
 801ef3c:	fa00 f101 	lsl.w	r1, r0, r1
 801ef40:	428c      	cmp	r4, r1
 801ef42:	d10b      	bne.n	801ef5c <__any_on+0x3e>
 801ef44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ef48:	4293      	cmp	r3, r2
 801ef4a:	d803      	bhi.n	801ef54 <__any_on+0x36>
 801ef4c:	2000      	movs	r0, #0
 801ef4e:	bd10      	pop	{r4, pc}
 801ef50:	4603      	mov	r3, r0
 801ef52:	e7f7      	b.n	801ef44 <__any_on+0x26>
 801ef54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ef58:	2900      	cmp	r1, #0
 801ef5a:	d0f5      	beq.n	801ef48 <__any_on+0x2a>
 801ef5c:	2001      	movs	r0, #1
 801ef5e:	e7f6      	b.n	801ef4e <__any_on+0x30>

0801ef60 <_calloc_r>:
 801ef60:	b570      	push	{r4, r5, r6, lr}
 801ef62:	fba1 5402 	umull	r5, r4, r1, r2
 801ef66:	b934      	cbnz	r4, 801ef76 <_calloc_r+0x16>
 801ef68:	4629      	mov	r1, r5
 801ef6a:	f000 f82d 	bl	801efc8 <_malloc_r>
 801ef6e:	4606      	mov	r6, r0
 801ef70:	b928      	cbnz	r0, 801ef7e <_calloc_r+0x1e>
 801ef72:	4630      	mov	r0, r6
 801ef74:	bd70      	pop	{r4, r5, r6, pc}
 801ef76:	220c      	movs	r2, #12
 801ef78:	6002      	str	r2, [r0, #0]
 801ef7a:	2600      	movs	r6, #0
 801ef7c:	e7f9      	b.n	801ef72 <_calloc_r+0x12>
 801ef7e:	462a      	mov	r2, r5
 801ef80:	4621      	mov	r1, r4
 801ef82:	f7fe f8fd 	bl	801d180 <memset>
 801ef86:	e7f4      	b.n	801ef72 <_calloc_r+0x12>

0801ef88 <sbrk_aligned>:
 801ef88:	b570      	push	{r4, r5, r6, lr}
 801ef8a:	4e0e      	ldr	r6, [pc, #56]	; (801efc4 <sbrk_aligned+0x3c>)
 801ef8c:	460c      	mov	r4, r1
 801ef8e:	6831      	ldr	r1, [r6, #0]
 801ef90:	4605      	mov	r5, r0
 801ef92:	b911      	cbnz	r1, 801ef9a <sbrk_aligned+0x12>
 801ef94:	f000 f892 	bl	801f0bc <_sbrk_r>
 801ef98:	6030      	str	r0, [r6, #0]
 801ef9a:	4621      	mov	r1, r4
 801ef9c:	4628      	mov	r0, r5
 801ef9e:	f000 f88d 	bl	801f0bc <_sbrk_r>
 801efa2:	1c43      	adds	r3, r0, #1
 801efa4:	d00a      	beq.n	801efbc <sbrk_aligned+0x34>
 801efa6:	1cc4      	adds	r4, r0, #3
 801efa8:	f024 0403 	bic.w	r4, r4, #3
 801efac:	42a0      	cmp	r0, r4
 801efae:	d007      	beq.n	801efc0 <sbrk_aligned+0x38>
 801efb0:	1a21      	subs	r1, r4, r0
 801efb2:	4628      	mov	r0, r5
 801efb4:	f000 f882 	bl	801f0bc <_sbrk_r>
 801efb8:	3001      	adds	r0, #1
 801efba:	d101      	bne.n	801efc0 <sbrk_aligned+0x38>
 801efbc:	f04f 34ff 	mov.w	r4, #4294967295
 801efc0:	4620      	mov	r0, r4
 801efc2:	bd70      	pop	{r4, r5, r6, pc}
 801efc4:	20002564 	.word	0x20002564

0801efc8 <_malloc_r>:
 801efc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efcc:	1ccd      	adds	r5, r1, #3
 801efce:	f025 0503 	bic.w	r5, r5, #3
 801efd2:	3508      	adds	r5, #8
 801efd4:	2d0c      	cmp	r5, #12
 801efd6:	bf38      	it	cc
 801efd8:	250c      	movcc	r5, #12
 801efda:	2d00      	cmp	r5, #0
 801efdc:	4607      	mov	r7, r0
 801efde:	db01      	blt.n	801efe4 <_malloc_r+0x1c>
 801efe0:	42a9      	cmp	r1, r5
 801efe2:	d905      	bls.n	801eff0 <_malloc_r+0x28>
 801efe4:	230c      	movs	r3, #12
 801efe6:	603b      	str	r3, [r7, #0]
 801efe8:	2600      	movs	r6, #0
 801efea:	4630      	mov	r0, r6
 801efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eff0:	4e2e      	ldr	r6, [pc, #184]	; (801f0ac <_malloc_r+0xe4>)
 801eff2:	f000 f8cd 	bl	801f190 <__malloc_lock>
 801eff6:	6833      	ldr	r3, [r6, #0]
 801eff8:	461c      	mov	r4, r3
 801effa:	bb34      	cbnz	r4, 801f04a <_malloc_r+0x82>
 801effc:	4629      	mov	r1, r5
 801effe:	4638      	mov	r0, r7
 801f000:	f7ff ffc2 	bl	801ef88 <sbrk_aligned>
 801f004:	1c43      	adds	r3, r0, #1
 801f006:	4604      	mov	r4, r0
 801f008:	d14d      	bne.n	801f0a6 <_malloc_r+0xde>
 801f00a:	6834      	ldr	r4, [r6, #0]
 801f00c:	4626      	mov	r6, r4
 801f00e:	2e00      	cmp	r6, #0
 801f010:	d140      	bne.n	801f094 <_malloc_r+0xcc>
 801f012:	6823      	ldr	r3, [r4, #0]
 801f014:	4631      	mov	r1, r6
 801f016:	4638      	mov	r0, r7
 801f018:	eb04 0803 	add.w	r8, r4, r3
 801f01c:	f000 f84e 	bl	801f0bc <_sbrk_r>
 801f020:	4580      	cmp	r8, r0
 801f022:	d13a      	bne.n	801f09a <_malloc_r+0xd2>
 801f024:	6821      	ldr	r1, [r4, #0]
 801f026:	3503      	adds	r5, #3
 801f028:	1a6d      	subs	r5, r5, r1
 801f02a:	f025 0503 	bic.w	r5, r5, #3
 801f02e:	3508      	adds	r5, #8
 801f030:	2d0c      	cmp	r5, #12
 801f032:	bf38      	it	cc
 801f034:	250c      	movcc	r5, #12
 801f036:	4629      	mov	r1, r5
 801f038:	4638      	mov	r0, r7
 801f03a:	f7ff ffa5 	bl	801ef88 <sbrk_aligned>
 801f03e:	3001      	adds	r0, #1
 801f040:	d02b      	beq.n	801f09a <_malloc_r+0xd2>
 801f042:	6823      	ldr	r3, [r4, #0]
 801f044:	442b      	add	r3, r5
 801f046:	6023      	str	r3, [r4, #0]
 801f048:	e00e      	b.n	801f068 <_malloc_r+0xa0>
 801f04a:	6822      	ldr	r2, [r4, #0]
 801f04c:	1b52      	subs	r2, r2, r5
 801f04e:	d41e      	bmi.n	801f08e <_malloc_r+0xc6>
 801f050:	2a0b      	cmp	r2, #11
 801f052:	d916      	bls.n	801f082 <_malloc_r+0xba>
 801f054:	1961      	adds	r1, r4, r5
 801f056:	42a3      	cmp	r3, r4
 801f058:	6025      	str	r5, [r4, #0]
 801f05a:	bf18      	it	ne
 801f05c:	6059      	strne	r1, [r3, #4]
 801f05e:	6863      	ldr	r3, [r4, #4]
 801f060:	bf08      	it	eq
 801f062:	6031      	streq	r1, [r6, #0]
 801f064:	5162      	str	r2, [r4, r5]
 801f066:	604b      	str	r3, [r1, #4]
 801f068:	4638      	mov	r0, r7
 801f06a:	f104 060b 	add.w	r6, r4, #11
 801f06e:	f000 f895 	bl	801f19c <__malloc_unlock>
 801f072:	f026 0607 	bic.w	r6, r6, #7
 801f076:	1d23      	adds	r3, r4, #4
 801f078:	1af2      	subs	r2, r6, r3
 801f07a:	d0b6      	beq.n	801efea <_malloc_r+0x22>
 801f07c:	1b9b      	subs	r3, r3, r6
 801f07e:	50a3      	str	r3, [r4, r2]
 801f080:	e7b3      	b.n	801efea <_malloc_r+0x22>
 801f082:	6862      	ldr	r2, [r4, #4]
 801f084:	42a3      	cmp	r3, r4
 801f086:	bf0c      	ite	eq
 801f088:	6032      	streq	r2, [r6, #0]
 801f08a:	605a      	strne	r2, [r3, #4]
 801f08c:	e7ec      	b.n	801f068 <_malloc_r+0xa0>
 801f08e:	4623      	mov	r3, r4
 801f090:	6864      	ldr	r4, [r4, #4]
 801f092:	e7b2      	b.n	801effa <_malloc_r+0x32>
 801f094:	4634      	mov	r4, r6
 801f096:	6876      	ldr	r6, [r6, #4]
 801f098:	e7b9      	b.n	801f00e <_malloc_r+0x46>
 801f09a:	230c      	movs	r3, #12
 801f09c:	603b      	str	r3, [r7, #0]
 801f09e:	4638      	mov	r0, r7
 801f0a0:	f000 f87c 	bl	801f19c <__malloc_unlock>
 801f0a4:	e7a1      	b.n	801efea <_malloc_r+0x22>
 801f0a6:	6025      	str	r5, [r4, #0]
 801f0a8:	e7de      	b.n	801f068 <_malloc_r+0xa0>
 801f0aa:	bf00      	nop
 801f0ac:	20002560 	.word	0x20002560

0801f0b0 <nan>:
 801f0b0:	4901      	ldr	r1, [pc, #4]	; (801f0b8 <nan+0x8>)
 801f0b2:	2000      	movs	r0, #0
 801f0b4:	4770      	bx	lr
 801f0b6:	bf00      	nop
 801f0b8:	7ff80000 	.word	0x7ff80000

0801f0bc <_sbrk_r>:
 801f0bc:	b538      	push	{r3, r4, r5, lr}
 801f0be:	4d06      	ldr	r5, [pc, #24]	; (801f0d8 <_sbrk_r+0x1c>)
 801f0c0:	2300      	movs	r3, #0
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	4608      	mov	r0, r1
 801f0c6:	602b      	str	r3, [r5, #0]
 801f0c8:	f7e3 f93a 	bl	8002340 <_sbrk>
 801f0cc:	1c43      	adds	r3, r0, #1
 801f0ce:	d102      	bne.n	801f0d6 <_sbrk_r+0x1a>
 801f0d0:	682b      	ldr	r3, [r5, #0]
 801f0d2:	b103      	cbz	r3, 801f0d6 <_sbrk_r+0x1a>
 801f0d4:	6023      	str	r3, [r4, #0]
 801f0d6:	bd38      	pop	{r3, r4, r5, pc}
 801f0d8:	20002568 	.word	0x20002568

0801f0dc <strncmp>:
 801f0dc:	b510      	push	{r4, lr}
 801f0de:	4603      	mov	r3, r0
 801f0e0:	b172      	cbz	r2, 801f100 <strncmp+0x24>
 801f0e2:	3901      	subs	r1, #1
 801f0e4:	1884      	adds	r4, r0, r2
 801f0e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f0ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f0ee:	4290      	cmp	r0, r2
 801f0f0:	d101      	bne.n	801f0f6 <strncmp+0x1a>
 801f0f2:	42a3      	cmp	r3, r4
 801f0f4:	d101      	bne.n	801f0fa <strncmp+0x1e>
 801f0f6:	1a80      	subs	r0, r0, r2
 801f0f8:	bd10      	pop	{r4, pc}
 801f0fa:	2800      	cmp	r0, #0
 801f0fc:	d1f3      	bne.n	801f0e6 <strncmp+0xa>
 801f0fe:	e7fa      	b.n	801f0f6 <strncmp+0x1a>
 801f100:	4610      	mov	r0, r2
 801f102:	e7f9      	b.n	801f0f8 <strncmp+0x1c>

0801f104 <__ascii_wctomb>:
 801f104:	4603      	mov	r3, r0
 801f106:	4608      	mov	r0, r1
 801f108:	b141      	cbz	r1, 801f11c <__ascii_wctomb+0x18>
 801f10a:	2aff      	cmp	r2, #255	; 0xff
 801f10c:	d904      	bls.n	801f118 <__ascii_wctomb+0x14>
 801f10e:	228a      	movs	r2, #138	; 0x8a
 801f110:	601a      	str	r2, [r3, #0]
 801f112:	f04f 30ff 	mov.w	r0, #4294967295
 801f116:	4770      	bx	lr
 801f118:	700a      	strb	r2, [r1, #0]
 801f11a:	2001      	movs	r0, #1
 801f11c:	4770      	bx	lr
	...

0801f120 <__assert_func>:
 801f120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f122:	4614      	mov	r4, r2
 801f124:	461a      	mov	r2, r3
 801f126:	4b09      	ldr	r3, [pc, #36]	; (801f14c <__assert_func+0x2c>)
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	4605      	mov	r5, r0
 801f12c:	68d8      	ldr	r0, [r3, #12]
 801f12e:	b14c      	cbz	r4, 801f144 <__assert_func+0x24>
 801f130:	4b07      	ldr	r3, [pc, #28]	; (801f150 <__assert_func+0x30>)
 801f132:	9100      	str	r1, [sp, #0]
 801f134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f138:	4906      	ldr	r1, [pc, #24]	; (801f154 <__assert_func+0x34>)
 801f13a:	462b      	mov	r3, r5
 801f13c:	f000 f80e 	bl	801f15c <fiprintf>
 801f140:	f000 fc28 	bl	801f994 <abort>
 801f144:	4b04      	ldr	r3, [pc, #16]	; (801f158 <__assert_func+0x38>)
 801f146:	461c      	mov	r4, r3
 801f148:	e7f3      	b.n	801f132 <__assert_func+0x12>
 801f14a:	bf00      	nop
 801f14c:	2000014c 	.word	0x2000014c
 801f150:	08020b44 	.word	0x08020b44
 801f154:	08020b51 	.word	0x08020b51
 801f158:	08020b7f 	.word	0x08020b7f

0801f15c <fiprintf>:
 801f15c:	b40e      	push	{r1, r2, r3}
 801f15e:	b503      	push	{r0, r1, lr}
 801f160:	4601      	mov	r1, r0
 801f162:	ab03      	add	r3, sp, #12
 801f164:	4805      	ldr	r0, [pc, #20]	; (801f17c <fiprintf+0x20>)
 801f166:	f853 2b04 	ldr.w	r2, [r3], #4
 801f16a:	6800      	ldr	r0, [r0, #0]
 801f16c:	9301      	str	r3, [sp, #4]
 801f16e:	f000 f88d 	bl	801f28c <_vfiprintf_r>
 801f172:	b002      	add	sp, #8
 801f174:	f85d eb04 	ldr.w	lr, [sp], #4
 801f178:	b003      	add	sp, #12
 801f17a:	4770      	bx	lr
 801f17c:	2000014c 	.word	0x2000014c

0801f180 <malloc>:
 801f180:	4b02      	ldr	r3, [pc, #8]	; (801f18c <malloc+0xc>)
 801f182:	4601      	mov	r1, r0
 801f184:	6818      	ldr	r0, [r3, #0]
 801f186:	f7ff bf1f 	b.w	801efc8 <_malloc_r>
 801f18a:	bf00      	nop
 801f18c:	2000014c 	.word	0x2000014c

0801f190 <__malloc_lock>:
 801f190:	4801      	ldr	r0, [pc, #4]	; (801f198 <__malloc_lock+0x8>)
 801f192:	f000 bdbb 	b.w	801fd0c <__retarget_lock_acquire_recursive>
 801f196:	bf00      	nop
 801f198:	2000256c 	.word	0x2000256c

0801f19c <__malloc_unlock>:
 801f19c:	4801      	ldr	r0, [pc, #4]	; (801f1a4 <__malloc_unlock+0x8>)
 801f19e:	f000 bdb6 	b.w	801fd0e <__retarget_lock_release_recursive>
 801f1a2:	bf00      	nop
 801f1a4:	2000256c 	.word	0x2000256c

0801f1a8 <_free_r>:
 801f1a8:	b538      	push	{r3, r4, r5, lr}
 801f1aa:	4605      	mov	r5, r0
 801f1ac:	2900      	cmp	r1, #0
 801f1ae:	d041      	beq.n	801f234 <_free_r+0x8c>
 801f1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f1b4:	1f0c      	subs	r4, r1, #4
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	bfb8      	it	lt
 801f1ba:	18e4      	addlt	r4, r4, r3
 801f1bc:	f7ff ffe8 	bl	801f190 <__malloc_lock>
 801f1c0:	4a1d      	ldr	r2, [pc, #116]	; (801f238 <_free_r+0x90>)
 801f1c2:	6813      	ldr	r3, [r2, #0]
 801f1c4:	b933      	cbnz	r3, 801f1d4 <_free_r+0x2c>
 801f1c6:	6063      	str	r3, [r4, #4]
 801f1c8:	6014      	str	r4, [r2, #0]
 801f1ca:	4628      	mov	r0, r5
 801f1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f1d0:	f7ff bfe4 	b.w	801f19c <__malloc_unlock>
 801f1d4:	42a3      	cmp	r3, r4
 801f1d6:	d908      	bls.n	801f1ea <_free_r+0x42>
 801f1d8:	6820      	ldr	r0, [r4, #0]
 801f1da:	1821      	adds	r1, r4, r0
 801f1dc:	428b      	cmp	r3, r1
 801f1de:	bf01      	itttt	eq
 801f1e0:	6819      	ldreq	r1, [r3, #0]
 801f1e2:	685b      	ldreq	r3, [r3, #4]
 801f1e4:	1809      	addeq	r1, r1, r0
 801f1e6:	6021      	streq	r1, [r4, #0]
 801f1e8:	e7ed      	b.n	801f1c6 <_free_r+0x1e>
 801f1ea:	461a      	mov	r2, r3
 801f1ec:	685b      	ldr	r3, [r3, #4]
 801f1ee:	b10b      	cbz	r3, 801f1f4 <_free_r+0x4c>
 801f1f0:	42a3      	cmp	r3, r4
 801f1f2:	d9fa      	bls.n	801f1ea <_free_r+0x42>
 801f1f4:	6811      	ldr	r1, [r2, #0]
 801f1f6:	1850      	adds	r0, r2, r1
 801f1f8:	42a0      	cmp	r0, r4
 801f1fa:	d10b      	bne.n	801f214 <_free_r+0x6c>
 801f1fc:	6820      	ldr	r0, [r4, #0]
 801f1fe:	4401      	add	r1, r0
 801f200:	1850      	adds	r0, r2, r1
 801f202:	4283      	cmp	r3, r0
 801f204:	6011      	str	r1, [r2, #0]
 801f206:	d1e0      	bne.n	801f1ca <_free_r+0x22>
 801f208:	6818      	ldr	r0, [r3, #0]
 801f20a:	685b      	ldr	r3, [r3, #4]
 801f20c:	6053      	str	r3, [r2, #4]
 801f20e:	4401      	add	r1, r0
 801f210:	6011      	str	r1, [r2, #0]
 801f212:	e7da      	b.n	801f1ca <_free_r+0x22>
 801f214:	d902      	bls.n	801f21c <_free_r+0x74>
 801f216:	230c      	movs	r3, #12
 801f218:	602b      	str	r3, [r5, #0]
 801f21a:	e7d6      	b.n	801f1ca <_free_r+0x22>
 801f21c:	6820      	ldr	r0, [r4, #0]
 801f21e:	1821      	adds	r1, r4, r0
 801f220:	428b      	cmp	r3, r1
 801f222:	bf04      	itt	eq
 801f224:	6819      	ldreq	r1, [r3, #0]
 801f226:	685b      	ldreq	r3, [r3, #4]
 801f228:	6063      	str	r3, [r4, #4]
 801f22a:	bf04      	itt	eq
 801f22c:	1809      	addeq	r1, r1, r0
 801f22e:	6021      	streq	r1, [r4, #0]
 801f230:	6054      	str	r4, [r2, #4]
 801f232:	e7ca      	b.n	801f1ca <_free_r+0x22>
 801f234:	bd38      	pop	{r3, r4, r5, pc}
 801f236:	bf00      	nop
 801f238:	20002560 	.word	0x20002560

0801f23c <__sfputc_r>:
 801f23c:	6893      	ldr	r3, [r2, #8]
 801f23e:	3b01      	subs	r3, #1
 801f240:	2b00      	cmp	r3, #0
 801f242:	b410      	push	{r4}
 801f244:	6093      	str	r3, [r2, #8]
 801f246:	da07      	bge.n	801f258 <__sfputc_r+0x1c>
 801f248:	6994      	ldr	r4, [r2, #24]
 801f24a:	42a3      	cmp	r3, r4
 801f24c:	db01      	blt.n	801f252 <__sfputc_r+0x16>
 801f24e:	290a      	cmp	r1, #10
 801f250:	d102      	bne.n	801f258 <__sfputc_r+0x1c>
 801f252:	bc10      	pop	{r4}
 801f254:	f000 bade 	b.w	801f814 <__swbuf_r>
 801f258:	6813      	ldr	r3, [r2, #0]
 801f25a:	1c58      	adds	r0, r3, #1
 801f25c:	6010      	str	r0, [r2, #0]
 801f25e:	7019      	strb	r1, [r3, #0]
 801f260:	4608      	mov	r0, r1
 801f262:	bc10      	pop	{r4}
 801f264:	4770      	bx	lr

0801f266 <__sfputs_r>:
 801f266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f268:	4606      	mov	r6, r0
 801f26a:	460f      	mov	r7, r1
 801f26c:	4614      	mov	r4, r2
 801f26e:	18d5      	adds	r5, r2, r3
 801f270:	42ac      	cmp	r4, r5
 801f272:	d101      	bne.n	801f278 <__sfputs_r+0x12>
 801f274:	2000      	movs	r0, #0
 801f276:	e007      	b.n	801f288 <__sfputs_r+0x22>
 801f278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f27c:	463a      	mov	r2, r7
 801f27e:	4630      	mov	r0, r6
 801f280:	f7ff ffdc 	bl	801f23c <__sfputc_r>
 801f284:	1c43      	adds	r3, r0, #1
 801f286:	d1f3      	bne.n	801f270 <__sfputs_r+0xa>
 801f288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f28c <_vfiprintf_r>:
 801f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f290:	460d      	mov	r5, r1
 801f292:	b09d      	sub	sp, #116	; 0x74
 801f294:	4614      	mov	r4, r2
 801f296:	4698      	mov	r8, r3
 801f298:	4606      	mov	r6, r0
 801f29a:	b118      	cbz	r0, 801f2a4 <_vfiprintf_r+0x18>
 801f29c:	6983      	ldr	r3, [r0, #24]
 801f29e:	b90b      	cbnz	r3, 801f2a4 <_vfiprintf_r+0x18>
 801f2a0:	f000 fc96 	bl	801fbd0 <__sinit>
 801f2a4:	4b89      	ldr	r3, [pc, #548]	; (801f4cc <_vfiprintf_r+0x240>)
 801f2a6:	429d      	cmp	r5, r3
 801f2a8:	d11b      	bne.n	801f2e2 <_vfiprintf_r+0x56>
 801f2aa:	6875      	ldr	r5, [r6, #4]
 801f2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f2ae:	07d9      	lsls	r1, r3, #31
 801f2b0:	d405      	bmi.n	801f2be <_vfiprintf_r+0x32>
 801f2b2:	89ab      	ldrh	r3, [r5, #12]
 801f2b4:	059a      	lsls	r2, r3, #22
 801f2b6:	d402      	bmi.n	801f2be <_vfiprintf_r+0x32>
 801f2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f2ba:	f000 fd27 	bl	801fd0c <__retarget_lock_acquire_recursive>
 801f2be:	89ab      	ldrh	r3, [r5, #12]
 801f2c0:	071b      	lsls	r3, r3, #28
 801f2c2:	d501      	bpl.n	801f2c8 <_vfiprintf_r+0x3c>
 801f2c4:	692b      	ldr	r3, [r5, #16]
 801f2c6:	b9eb      	cbnz	r3, 801f304 <_vfiprintf_r+0x78>
 801f2c8:	4629      	mov	r1, r5
 801f2ca:	4630      	mov	r0, r6
 801f2cc:	f000 faf4 	bl	801f8b8 <__swsetup_r>
 801f2d0:	b1c0      	cbz	r0, 801f304 <_vfiprintf_r+0x78>
 801f2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f2d4:	07dc      	lsls	r4, r3, #31
 801f2d6:	d50e      	bpl.n	801f2f6 <_vfiprintf_r+0x6a>
 801f2d8:	f04f 30ff 	mov.w	r0, #4294967295
 801f2dc:	b01d      	add	sp, #116	; 0x74
 801f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2e2:	4b7b      	ldr	r3, [pc, #492]	; (801f4d0 <_vfiprintf_r+0x244>)
 801f2e4:	429d      	cmp	r5, r3
 801f2e6:	d101      	bne.n	801f2ec <_vfiprintf_r+0x60>
 801f2e8:	68b5      	ldr	r5, [r6, #8]
 801f2ea:	e7df      	b.n	801f2ac <_vfiprintf_r+0x20>
 801f2ec:	4b79      	ldr	r3, [pc, #484]	; (801f4d4 <_vfiprintf_r+0x248>)
 801f2ee:	429d      	cmp	r5, r3
 801f2f0:	bf08      	it	eq
 801f2f2:	68f5      	ldreq	r5, [r6, #12]
 801f2f4:	e7da      	b.n	801f2ac <_vfiprintf_r+0x20>
 801f2f6:	89ab      	ldrh	r3, [r5, #12]
 801f2f8:	0598      	lsls	r0, r3, #22
 801f2fa:	d4ed      	bmi.n	801f2d8 <_vfiprintf_r+0x4c>
 801f2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f2fe:	f000 fd06 	bl	801fd0e <__retarget_lock_release_recursive>
 801f302:	e7e9      	b.n	801f2d8 <_vfiprintf_r+0x4c>
 801f304:	2300      	movs	r3, #0
 801f306:	9309      	str	r3, [sp, #36]	; 0x24
 801f308:	2320      	movs	r3, #32
 801f30a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f30e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f312:	2330      	movs	r3, #48	; 0x30
 801f314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f4d8 <_vfiprintf_r+0x24c>
 801f318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f31c:	f04f 0901 	mov.w	r9, #1
 801f320:	4623      	mov	r3, r4
 801f322:	469a      	mov	sl, r3
 801f324:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f328:	b10a      	cbz	r2, 801f32e <_vfiprintf_r+0xa2>
 801f32a:	2a25      	cmp	r2, #37	; 0x25
 801f32c:	d1f9      	bne.n	801f322 <_vfiprintf_r+0x96>
 801f32e:	ebba 0b04 	subs.w	fp, sl, r4
 801f332:	d00b      	beq.n	801f34c <_vfiprintf_r+0xc0>
 801f334:	465b      	mov	r3, fp
 801f336:	4622      	mov	r2, r4
 801f338:	4629      	mov	r1, r5
 801f33a:	4630      	mov	r0, r6
 801f33c:	f7ff ff93 	bl	801f266 <__sfputs_r>
 801f340:	3001      	adds	r0, #1
 801f342:	f000 80aa 	beq.w	801f49a <_vfiprintf_r+0x20e>
 801f346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f348:	445a      	add	r2, fp
 801f34a:	9209      	str	r2, [sp, #36]	; 0x24
 801f34c:	f89a 3000 	ldrb.w	r3, [sl]
 801f350:	2b00      	cmp	r3, #0
 801f352:	f000 80a2 	beq.w	801f49a <_vfiprintf_r+0x20e>
 801f356:	2300      	movs	r3, #0
 801f358:	f04f 32ff 	mov.w	r2, #4294967295
 801f35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f360:	f10a 0a01 	add.w	sl, sl, #1
 801f364:	9304      	str	r3, [sp, #16]
 801f366:	9307      	str	r3, [sp, #28]
 801f368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f36c:	931a      	str	r3, [sp, #104]	; 0x68
 801f36e:	4654      	mov	r4, sl
 801f370:	2205      	movs	r2, #5
 801f372:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f376:	4858      	ldr	r0, [pc, #352]	; (801f4d8 <_vfiprintf_r+0x24c>)
 801f378:	f7e0 ff0a 	bl	8000190 <memchr>
 801f37c:	9a04      	ldr	r2, [sp, #16]
 801f37e:	b9d8      	cbnz	r0, 801f3b8 <_vfiprintf_r+0x12c>
 801f380:	06d1      	lsls	r1, r2, #27
 801f382:	bf44      	itt	mi
 801f384:	2320      	movmi	r3, #32
 801f386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f38a:	0713      	lsls	r3, r2, #28
 801f38c:	bf44      	itt	mi
 801f38e:	232b      	movmi	r3, #43	; 0x2b
 801f390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f394:	f89a 3000 	ldrb.w	r3, [sl]
 801f398:	2b2a      	cmp	r3, #42	; 0x2a
 801f39a:	d015      	beq.n	801f3c8 <_vfiprintf_r+0x13c>
 801f39c:	9a07      	ldr	r2, [sp, #28]
 801f39e:	4654      	mov	r4, sl
 801f3a0:	2000      	movs	r0, #0
 801f3a2:	f04f 0c0a 	mov.w	ip, #10
 801f3a6:	4621      	mov	r1, r4
 801f3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f3ac:	3b30      	subs	r3, #48	; 0x30
 801f3ae:	2b09      	cmp	r3, #9
 801f3b0:	d94e      	bls.n	801f450 <_vfiprintf_r+0x1c4>
 801f3b2:	b1b0      	cbz	r0, 801f3e2 <_vfiprintf_r+0x156>
 801f3b4:	9207      	str	r2, [sp, #28]
 801f3b6:	e014      	b.n	801f3e2 <_vfiprintf_r+0x156>
 801f3b8:	eba0 0308 	sub.w	r3, r0, r8
 801f3bc:	fa09 f303 	lsl.w	r3, r9, r3
 801f3c0:	4313      	orrs	r3, r2
 801f3c2:	9304      	str	r3, [sp, #16]
 801f3c4:	46a2      	mov	sl, r4
 801f3c6:	e7d2      	b.n	801f36e <_vfiprintf_r+0xe2>
 801f3c8:	9b03      	ldr	r3, [sp, #12]
 801f3ca:	1d19      	adds	r1, r3, #4
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	9103      	str	r1, [sp, #12]
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	bfbb      	ittet	lt
 801f3d4:	425b      	neglt	r3, r3
 801f3d6:	f042 0202 	orrlt.w	r2, r2, #2
 801f3da:	9307      	strge	r3, [sp, #28]
 801f3dc:	9307      	strlt	r3, [sp, #28]
 801f3de:	bfb8      	it	lt
 801f3e0:	9204      	strlt	r2, [sp, #16]
 801f3e2:	7823      	ldrb	r3, [r4, #0]
 801f3e4:	2b2e      	cmp	r3, #46	; 0x2e
 801f3e6:	d10c      	bne.n	801f402 <_vfiprintf_r+0x176>
 801f3e8:	7863      	ldrb	r3, [r4, #1]
 801f3ea:	2b2a      	cmp	r3, #42	; 0x2a
 801f3ec:	d135      	bne.n	801f45a <_vfiprintf_r+0x1ce>
 801f3ee:	9b03      	ldr	r3, [sp, #12]
 801f3f0:	1d1a      	adds	r2, r3, #4
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	9203      	str	r2, [sp, #12]
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	bfb8      	it	lt
 801f3fa:	f04f 33ff 	movlt.w	r3, #4294967295
 801f3fe:	3402      	adds	r4, #2
 801f400:	9305      	str	r3, [sp, #20]
 801f402:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801f4dc <_vfiprintf_r+0x250>
 801f406:	7821      	ldrb	r1, [r4, #0]
 801f408:	2203      	movs	r2, #3
 801f40a:	4650      	mov	r0, sl
 801f40c:	f7e0 fec0 	bl	8000190 <memchr>
 801f410:	b140      	cbz	r0, 801f424 <_vfiprintf_r+0x198>
 801f412:	2340      	movs	r3, #64	; 0x40
 801f414:	eba0 000a 	sub.w	r0, r0, sl
 801f418:	fa03 f000 	lsl.w	r0, r3, r0
 801f41c:	9b04      	ldr	r3, [sp, #16]
 801f41e:	4303      	orrs	r3, r0
 801f420:	3401      	adds	r4, #1
 801f422:	9304      	str	r3, [sp, #16]
 801f424:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f428:	482d      	ldr	r0, [pc, #180]	; (801f4e0 <_vfiprintf_r+0x254>)
 801f42a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f42e:	2206      	movs	r2, #6
 801f430:	f7e0 feae 	bl	8000190 <memchr>
 801f434:	2800      	cmp	r0, #0
 801f436:	d03f      	beq.n	801f4b8 <_vfiprintf_r+0x22c>
 801f438:	4b2a      	ldr	r3, [pc, #168]	; (801f4e4 <_vfiprintf_r+0x258>)
 801f43a:	bb1b      	cbnz	r3, 801f484 <_vfiprintf_r+0x1f8>
 801f43c:	9b03      	ldr	r3, [sp, #12]
 801f43e:	3307      	adds	r3, #7
 801f440:	f023 0307 	bic.w	r3, r3, #7
 801f444:	3308      	adds	r3, #8
 801f446:	9303      	str	r3, [sp, #12]
 801f448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f44a:	443b      	add	r3, r7
 801f44c:	9309      	str	r3, [sp, #36]	; 0x24
 801f44e:	e767      	b.n	801f320 <_vfiprintf_r+0x94>
 801f450:	fb0c 3202 	mla	r2, ip, r2, r3
 801f454:	460c      	mov	r4, r1
 801f456:	2001      	movs	r0, #1
 801f458:	e7a5      	b.n	801f3a6 <_vfiprintf_r+0x11a>
 801f45a:	2300      	movs	r3, #0
 801f45c:	3401      	adds	r4, #1
 801f45e:	9305      	str	r3, [sp, #20]
 801f460:	4619      	mov	r1, r3
 801f462:	f04f 0c0a 	mov.w	ip, #10
 801f466:	4620      	mov	r0, r4
 801f468:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f46c:	3a30      	subs	r2, #48	; 0x30
 801f46e:	2a09      	cmp	r2, #9
 801f470:	d903      	bls.n	801f47a <_vfiprintf_r+0x1ee>
 801f472:	2b00      	cmp	r3, #0
 801f474:	d0c5      	beq.n	801f402 <_vfiprintf_r+0x176>
 801f476:	9105      	str	r1, [sp, #20]
 801f478:	e7c3      	b.n	801f402 <_vfiprintf_r+0x176>
 801f47a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f47e:	4604      	mov	r4, r0
 801f480:	2301      	movs	r3, #1
 801f482:	e7f0      	b.n	801f466 <_vfiprintf_r+0x1da>
 801f484:	ab03      	add	r3, sp, #12
 801f486:	9300      	str	r3, [sp, #0]
 801f488:	462a      	mov	r2, r5
 801f48a:	4b17      	ldr	r3, [pc, #92]	; (801f4e8 <_vfiprintf_r+0x25c>)
 801f48c:	a904      	add	r1, sp, #16
 801f48e:	4630      	mov	r0, r6
 801f490:	f3af 8000 	nop.w
 801f494:	4607      	mov	r7, r0
 801f496:	1c78      	adds	r0, r7, #1
 801f498:	d1d6      	bne.n	801f448 <_vfiprintf_r+0x1bc>
 801f49a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f49c:	07d9      	lsls	r1, r3, #31
 801f49e:	d405      	bmi.n	801f4ac <_vfiprintf_r+0x220>
 801f4a0:	89ab      	ldrh	r3, [r5, #12]
 801f4a2:	059a      	lsls	r2, r3, #22
 801f4a4:	d402      	bmi.n	801f4ac <_vfiprintf_r+0x220>
 801f4a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4a8:	f000 fc31 	bl	801fd0e <__retarget_lock_release_recursive>
 801f4ac:	89ab      	ldrh	r3, [r5, #12]
 801f4ae:	065b      	lsls	r3, r3, #25
 801f4b0:	f53f af12 	bmi.w	801f2d8 <_vfiprintf_r+0x4c>
 801f4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4b6:	e711      	b.n	801f2dc <_vfiprintf_r+0x50>
 801f4b8:	ab03      	add	r3, sp, #12
 801f4ba:	9300      	str	r3, [sp, #0]
 801f4bc:	462a      	mov	r2, r5
 801f4be:	4b0a      	ldr	r3, [pc, #40]	; (801f4e8 <_vfiprintf_r+0x25c>)
 801f4c0:	a904      	add	r1, sp, #16
 801f4c2:	4630      	mov	r0, r6
 801f4c4:	f000 f880 	bl	801f5c8 <_printf_i>
 801f4c8:	e7e4      	b.n	801f494 <_vfiprintf_r+0x208>
 801f4ca:	bf00      	nop
 801f4cc:	08020bd4 	.word	0x08020bd4
 801f4d0:	08020bf4 	.word	0x08020bf4
 801f4d4:	08020bb4 	.word	0x08020bb4
 801f4d8:	08020b80 	.word	0x08020b80
 801f4dc:	08020b86 	.word	0x08020b86
 801f4e0:	08020b8a 	.word	0x08020b8a
 801f4e4:	00000000 	.word	0x00000000
 801f4e8:	0801f267 	.word	0x0801f267

0801f4ec <_printf_common>:
 801f4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f4f0:	4616      	mov	r6, r2
 801f4f2:	4699      	mov	r9, r3
 801f4f4:	688a      	ldr	r2, [r1, #8]
 801f4f6:	690b      	ldr	r3, [r1, #16]
 801f4f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f4fc:	4293      	cmp	r3, r2
 801f4fe:	bfb8      	it	lt
 801f500:	4613      	movlt	r3, r2
 801f502:	6033      	str	r3, [r6, #0]
 801f504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f508:	4607      	mov	r7, r0
 801f50a:	460c      	mov	r4, r1
 801f50c:	b10a      	cbz	r2, 801f512 <_printf_common+0x26>
 801f50e:	3301      	adds	r3, #1
 801f510:	6033      	str	r3, [r6, #0]
 801f512:	6823      	ldr	r3, [r4, #0]
 801f514:	0699      	lsls	r1, r3, #26
 801f516:	bf42      	ittt	mi
 801f518:	6833      	ldrmi	r3, [r6, #0]
 801f51a:	3302      	addmi	r3, #2
 801f51c:	6033      	strmi	r3, [r6, #0]
 801f51e:	6825      	ldr	r5, [r4, #0]
 801f520:	f015 0506 	ands.w	r5, r5, #6
 801f524:	d106      	bne.n	801f534 <_printf_common+0x48>
 801f526:	f104 0a19 	add.w	sl, r4, #25
 801f52a:	68e3      	ldr	r3, [r4, #12]
 801f52c:	6832      	ldr	r2, [r6, #0]
 801f52e:	1a9b      	subs	r3, r3, r2
 801f530:	42ab      	cmp	r3, r5
 801f532:	dc26      	bgt.n	801f582 <_printf_common+0x96>
 801f534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f538:	1e13      	subs	r3, r2, #0
 801f53a:	6822      	ldr	r2, [r4, #0]
 801f53c:	bf18      	it	ne
 801f53e:	2301      	movne	r3, #1
 801f540:	0692      	lsls	r2, r2, #26
 801f542:	d42b      	bmi.n	801f59c <_printf_common+0xb0>
 801f544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f548:	4649      	mov	r1, r9
 801f54a:	4638      	mov	r0, r7
 801f54c:	47c0      	blx	r8
 801f54e:	3001      	adds	r0, #1
 801f550:	d01e      	beq.n	801f590 <_printf_common+0xa4>
 801f552:	6823      	ldr	r3, [r4, #0]
 801f554:	68e5      	ldr	r5, [r4, #12]
 801f556:	6832      	ldr	r2, [r6, #0]
 801f558:	f003 0306 	and.w	r3, r3, #6
 801f55c:	2b04      	cmp	r3, #4
 801f55e:	bf08      	it	eq
 801f560:	1aad      	subeq	r5, r5, r2
 801f562:	68a3      	ldr	r3, [r4, #8]
 801f564:	6922      	ldr	r2, [r4, #16]
 801f566:	bf0c      	ite	eq
 801f568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f56c:	2500      	movne	r5, #0
 801f56e:	4293      	cmp	r3, r2
 801f570:	bfc4      	itt	gt
 801f572:	1a9b      	subgt	r3, r3, r2
 801f574:	18ed      	addgt	r5, r5, r3
 801f576:	2600      	movs	r6, #0
 801f578:	341a      	adds	r4, #26
 801f57a:	42b5      	cmp	r5, r6
 801f57c:	d11a      	bne.n	801f5b4 <_printf_common+0xc8>
 801f57e:	2000      	movs	r0, #0
 801f580:	e008      	b.n	801f594 <_printf_common+0xa8>
 801f582:	2301      	movs	r3, #1
 801f584:	4652      	mov	r2, sl
 801f586:	4649      	mov	r1, r9
 801f588:	4638      	mov	r0, r7
 801f58a:	47c0      	blx	r8
 801f58c:	3001      	adds	r0, #1
 801f58e:	d103      	bne.n	801f598 <_printf_common+0xac>
 801f590:	f04f 30ff 	mov.w	r0, #4294967295
 801f594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f598:	3501      	adds	r5, #1
 801f59a:	e7c6      	b.n	801f52a <_printf_common+0x3e>
 801f59c:	18e1      	adds	r1, r4, r3
 801f59e:	1c5a      	adds	r2, r3, #1
 801f5a0:	2030      	movs	r0, #48	; 0x30
 801f5a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f5a6:	4422      	add	r2, r4
 801f5a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f5ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f5b0:	3302      	adds	r3, #2
 801f5b2:	e7c7      	b.n	801f544 <_printf_common+0x58>
 801f5b4:	2301      	movs	r3, #1
 801f5b6:	4622      	mov	r2, r4
 801f5b8:	4649      	mov	r1, r9
 801f5ba:	4638      	mov	r0, r7
 801f5bc:	47c0      	blx	r8
 801f5be:	3001      	adds	r0, #1
 801f5c0:	d0e6      	beq.n	801f590 <_printf_common+0xa4>
 801f5c2:	3601      	adds	r6, #1
 801f5c4:	e7d9      	b.n	801f57a <_printf_common+0x8e>
	...

0801f5c8 <_printf_i>:
 801f5c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f5cc:	7e0f      	ldrb	r7, [r1, #24]
 801f5ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f5d0:	2f78      	cmp	r7, #120	; 0x78
 801f5d2:	4691      	mov	r9, r2
 801f5d4:	4680      	mov	r8, r0
 801f5d6:	460c      	mov	r4, r1
 801f5d8:	469a      	mov	sl, r3
 801f5da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f5de:	d807      	bhi.n	801f5f0 <_printf_i+0x28>
 801f5e0:	2f62      	cmp	r7, #98	; 0x62
 801f5e2:	d80a      	bhi.n	801f5fa <_printf_i+0x32>
 801f5e4:	2f00      	cmp	r7, #0
 801f5e6:	f000 80d8 	beq.w	801f79a <_printf_i+0x1d2>
 801f5ea:	2f58      	cmp	r7, #88	; 0x58
 801f5ec:	f000 80a3 	beq.w	801f736 <_printf_i+0x16e>
 801f5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f5f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f5f8:	e03a      	b.n	801f670 <_printf_i+0xa8>
 801f5fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f5fe:	2b15      	cmp	r3, #21
 801f600:	d8f6      	bhi.n	801f5f0 <_printf_i+0x28>
 801f602:	a101      	add	r1, pc, #4	; (adr r1, 801f608 <_printf_i+0x40>)
 801f604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f608:	0801f661 	.word	0x0801f661
 801f60c:	0801f675 	.word	0x0801f675
 801f610:	0801f5f1 	.word	0x0801f5f1
 801f614:	0801f5f1 	.word	0x0801f5f1
 801f618:	0801f5f1 	.word	0x0801f5f1
 801f61c:	0801f5f1 	.word	0x0801f5f1
 801f620:	0801f675 	.word	0x0801f675
 801f624:	0801f5f1 	.word	0x0801f5f1
 801f628:	0801f5f1 	.word	0x0801f5f1
 801f62c:	0801f5f1 	.word	0x0801f5f1
 801f630:	0801f5f1 	.word	0x0801f5f1
 801f634:	0801f781 	.word	0x0801f781
 801f638:	0801f6a5 	.word	0x0801f6a5
 801f63c:	0801f763 	.word	0x0801f763
 801f640:	0801f5f1 	.word	0x0801f5f1
 801f644:	0801f5f1 	.word	0x0801f5f1
 801f648:	0801f7a3 	.word	0x0801f7a3
 801f64c:	0801f5f1 	.word	0x0801f5f1
 801f650:	0801f6a5 	.word	0x0801f6a5
 801f654:	0801f5f1 	.word	0x0801f5f1
 801f658:	0801f5f1 	.word	0x0801f5f1
 801f65c:	0801f76b 	.word	0x0801f76b
 801f660:	682b      	ldr	r3, [r5, #0]
 801f662:	1d1a      	adds	r2, r3, #4
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	602a      	str	r2, [r5, #0]
 801f668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f66c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f670:	2301      	movs	r3, #1
 801f672:	e0a3      	b.n	801f7bc <_printf_i+0x1f4>
 801f674:	6820      	ldr	r0, [r4, #0]
 801f676:	6829      	ldr	r1, [r5, #0]
 801f678:	0606      	lsls	r6, r0, #24
 801f67a:	f101 0304 	add.w	r3, r1, #4
 801f67e:	d50a      	bpl.n	801f696 <_printf_i+0xce>
 801f680:	680e      	ldr	r6, [r1, #0]
 801f682:	602b      	str	r3, [r5, #0]
 801f684:	2e00      	cmp	r6, #0
 801f686:	da03      	bge.n	801f690 <_printf_i+0xc8>
 801f688:	232d      	movs	r3, #45	; 0x2d
 801f68a:	4276      	negs	r6, r6
 801f68c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f690:	485e      	ldr	r0, [pc, #376]	; (801f80c <_printf_i+0x244>)
 801f692:	230a      	movs	r3, #10
 801f694:	e019      	b.n	801f6ca <_printf_i+0x102>
 801f696:	680e      	ldr	r6, [r1, #0]
 801f698:	602b      	str	r3, [r5, #0]
 801f69a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f69e:	bf18      	it	ne
 801f6a0:	b236      	sxthne	r6, r6
 801f6a2:	e7ef      	b.n	801f684 <_printf_i+0xbc>
 801f6a4:	682b      	ldr	r3, [r5, #0]
 801f6a6:	6820      	ldr	r0, [r4, #0]
 801f6a8:	1d19      	adds	r1, r3, #4
 801f6aa:	6029      	str	r1, [r5, #0]
 801f6ac:	0601      	lsls	r1, r0, #24
 801f6ae:	d501      	bpl.n	801f6b4 <_printf_i+0xec>
 801f6b0:	681e      	ldr	r6, [r3, #0]
 801f6b2:	e002      	b.n	801f6ba <_printf_i+0xf2>
 801f6b4:	0646      	lsls	r6, r0, #25
 801f6b6:	d5fb      	bpl.n	801f6b0 <_printf_i+0xe8>
 801f6b8:	881e      	ldrh	r6, [r3, #0]
 801f6ba:	4854      	ldr	r0, [pc, #336]	; (801f80c <_printf_i+0x244>)
 801f6bc:	2f6f      	cmp	r7, #111	; 0x6f
 801f6be:	bf0c      	ite	eq
 801f6c0:	2308      	moveq	r3, #8
 801f6c2:	230a      	movne	r3, #10
 801f6c4:	2100      	movs	r1, #0
 801f6c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f6ca:	6865      	ldr	r5, [r4, #4]
 801f6cc:	60a5      	str	r5, [r4, #8]
 801f6ce:	2d00      	cmp	r5, #0
 801f6d0:	bfa2      	ittt	ge
 801f6d2:	6821      	ldrge	r1, [r4, #0]
 801f6d4:	f021 0104 	bicge.w	r1, r1, #4
 801f6d8:	6021      	strge	r1, [r4, #0]
 801f6da:	b90e      	cbnz	r6, 801f6e0 <_printf_i+0x118>
 801f6dc:	2d00      	cmp	r5, #0
 801f6de:	d04d      	beq.n	801f77c <_printf_i+0x1b4>
 801f6e0:	4615      	mov	r5, r2
 801f6e2:	fbb6 f1f3 	udiv	r1, r6, r3
 801f6e6:	fb03 6711 	mls	r7, r3, r1, r6
 801f6ea:	5dc7      	ldrb	r7, [r0, r7]
 801f6ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f6f0:	4637      	mov	r7, r6
 801f6f2:	42bb      	cmp	r3, r7
 801f6f4:	460e      	mov	r6, r1
 801f6f6:	d9f4      	bls.n	801f6e2 <_printf_i+0x11a>
 801f6f8:	2b08      	cmp	r3, #8
 801f6fa:	d10b      	bne.n	801f714 <_printf_i+0x14c>
 801f6fc:	6823      	ldr	r3, [r4, #0]
 801f6fe:	07de      	lsls	r6, r3, #31
 801f700:	d508      	bpl.n	801f714 <_printf_i+0x14c>
 801f702:	6923      	ldr	r3, [r4, #16]
 801f704:	6861      	ldr	r1, [r4, #4]
 801f706:	4299      	cmp	r1, r3
 801f708:	bfde      	ittt	le
 801f70a:	2330      	movle	r3, #48	; 0x30
 801f70c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f710:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f714:	1b52      	subs	r2, r2, r5
 801f716:	6122      	str	r2, [r4, #16]
 801f718:	f8cd a000 	str.w	sl, [sp]
 801f71c:	464b      	mov	r3, r9
 801f71e:	aa03      	add	r2, sp, #12
 801f720:	4621      	mov	r1, r4
 801f722:	4640      	mov	r0, r8
 801f724:	f7ff fee2 	bl	801f4ec <_printf_common>
 801f728:	3001      	adds	r0, #1
 801f72a:	d14c      	bne.n	801f7c6 <_printf_i+0x1fe>
 801f72c:	f04f 30ff 	mov.w	r0, #4294967295
 801f730:	b004      	add	sp, #16
 801f732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f736:	4835      	ldr	r0, [pc, #212]	; (801f80c <_printf_i+0x244>)
 801f738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f73c:	6829      	ldr	r1, [r5, #0]
 801f73e:	6823      	ldr	r3, [r4, #0]
 801f740:	f851 6b04 	ldr.w	r6, [r1], #4
 801f744:	6029      	str	r1, [r5, #0]
 801f746:	061d      	lsls	r5, r3, #24
 801f748:	d514      	bpl.n	801f774 <_printf_i+0x1ac>
 801f74a:	07df      	lsls	r7, r3, #31
 801f74c:	bf44      	itt	mi
 801f74e:	f043 0320 	orrmi.w	r3, r3, #32
 801f752:	6023      	strmi	r3, [r4, #0]
 801f754:	b91e      	cbnz	r6, 801f75e <_printf_i+0x196>
 801f756:	6823      	ldr	r3, [r4, #0]
 801f758:	f023 0320 	bic.w	r3, r3, #32
 801f75c:	6023      	str	r3, [r4, #0]
 801f75e:	2310      	movs	r3, #16
 801f760:	e7b0      	b.n	801f6c4 <_printf_i+0xfc>
 801f762:	6823      	ldr	r3, [r4, #0]
 801f764:	f043 0320 	orr.w	r3, r3, #32
 801f768:	6023      	str	r3, [r4, #0]
 801f76a:	2378      	movs	r3, #120	; 0x78
 801f76c:	4828      	ldr	r0, [pc, #160]	; (801f810 <_printf_i+0x248>)
 801f76e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f772:	e7e3      	b.n	801f73c <_printf_i+0x174>
 801f774:	0659      	lsls	r1, r3, #25
 801f776:	bf48      	it	mi
 801f778:	b2b6      	uxthmi	r6, r6
 801f77a:	e7e6      	b.n	801f74a <_printf_i+0x182>
 801f77c:	4615      	mov	r5, r2
 801f77e:	e7bb      	b.n	801f6f8 <_printf_i+0x130>
 801f780:	682b      	ldr	r3, [r5, #0]
 801f782:	6826      	ldr	r6, [r4, #0]
 801f784:	6961      	ldr	r1, [r4, #20]
 801f786:	1d18      	adds	r0, r3, #4
 801f788:	6028      	str	r0, [r5, #0]
 801f78a:	0635      	lsls	r5, r6, #24
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	d501      	bpl.n	801f794 <_printf_i+0x1cc>
 801f790:	6019      	str	r1, [r3, #0]
 801f792:	e002      	b.n	801f79a <_printf_i+0x1d2>
 801f794:	0670      	lsls	r0, r6, #25
 801f796:	d5fb      	bpl.n	801f790 <_printf_i+0x1c8>
 801f798:	8019      	strh	r1, [r3, #0]
 801f79a:	2300      	movs	r3, #0
 801f79c:	6123      	str	r3, [r4, #16]
 801f79e:	4615      	mov	r5, r2
 801f7a0:	e7ba      	b.n	801f718 <_printf_i+0x150>
 801f7a2:	682b      	ldr	r3, [r5, #0]
 801f7a4:	1d1a      	adds	r2, r3, #4
 801f7a6:	602a      	str	r2, [r5, #0]
 801f7a8:	681d      	ldr	r5, [r3, #0]
 801f7aa:	6862      	ldr	r2, [r4, #4]
 801f7ac:	2100      	movs	r1, #0
 801f7ae:	4628      	mov	r0, r5
 801f7b0:	f7e0 fcee 	bl	8000190 <memchr>
 801f7b4:	b108      	cbz	r0, 801f7ba <_printf_i+0x1f2>
 801f7b6:	1b40      	subs	r0, r0, r5
 801f7b8:	6060      	str	r0, [r4, #4]
 801f7ba:	6863      	ldr	r3, [r4, #4]
 801f7bc:	6123      	str	r3, [r4, #16]
 801f7be:	2300      	movs	r3, #0
 801f7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7c4:	e7a8      	b.n	801f718 <_printf_i+0x150>
 801f7c6:	6923      	ldr	r3, [r4, #16]
 801f7c8:	462a      	mov	r2, r5
 801f7ca:	4649      	mov	r1, r9
 801f7cc:	4640      	mov	r0, r8
 801f7ce:	47d0      	blx	sl
 801f7d0:	3001      	adds	r0, #1
 801f7d2:	d0ab      	beq.n	801f72c <_printf_i+0x164>
 801f7d4:	6823      	ldr	r3, [r4, #0]
 801f7d6:	079b      	lsls	r3, r3, #30
 801f7d8:	d413      	bmi.n	801f802 <_printf_i+0x23a>
 801f7da:	68e0      	ldr	r0, [r4, #12]
 801f7dc:	9b03      	ldr	r3, [sp, #12]
 801f7de:	4298      	cmp	r0, r3
 801f7e0:	bfb8      	it	lt
 801f7e2:	4618      	movlt	r0, r3
 801f7e4:	e7a4      	b.n	801f730 <_printf_i+0x168>
 801f7e6:	2301      	movs	r3, #1
 801f7e8:	4632      	mov	r2, r6
 801f7ea:	4649      	mov	r1, r9
 801f7ec:	4640      	mov	r0, r8
 801f7ee:	47d0      	blx	sl
 801f7f0:	3001      	adds	r0, #1
 801f7f2:	d09b      	beq.n	801f72c <_printf_i+0x164>
 801f7f4:	3501      	adds	r5, #1
 801f7f6:	68e3      	ldr	r3, [r4, #12]
 801f7f8:	9903      	ldr	r1, [sp, #12]
 801f7fa:	1a5b      	subs	r3, r3, r1
 801f7fc:	42ab      	cmp	r3, r5
 801f7fe:	dcf2      	bgt.n	801f7e6 <_printf_i+0x21e>
 801f800:	e7eb      	b.n	801f7da <_printf_i+0x212>
 801f802:	2500      	movs	r5, #0
 801f804:	f104 0619 	add.w	r6, r4, #25
 801f808:	e7f5      	b.n	801f7f6 <_printf_i+0x22e>
 801f80a:	bf00      	nop
 801f80c:	08020b91 	.word	0x08020b91
 801f810:	08020ba2 	.word	0x08020ba2

0801f814 <__swbuf_r>:
 801f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f816:	460e      	mov	r6, r1
 801f818:	4614      	mov	r4, r2
 801f81a:	4605      	mov	r5, r0
 801f81c:	b118      	cbz	r0, 801f826 <__swbuf_r+0x12>
 801f81e:	6983      	ldr	r3, [r0, #24]
 801f820:	b90b      	cbnz	r3, 801f826 <__swbuf_r+0x12>
 801f822:	f000 f9d5 	bl	801fbd0 <__sinit>
 801f826:	4b21      	ldr	r3, [pc, #132]	; (801f8ac <__swbuf_r+0x98>)
 801f828:	429c      	cmp	r4, r3
 801f82a:	d12b      	bne.n	801f884 <__swbuf_r+0x70>
 801f82c:	686c      	ldr	r4, [r5, #4]
 801f82e:	69a3      	ldr	r3, [r4, #24]
 801f830:	60a3      	str	r3, [r4, #8]
 801f832:	89a3      	ldrh	r3, [r4, #12]
 801f834:	071a      	lsls	r2, r3, #28
 801f836:	d52f      	bpl.n	801f898 <__swbuf_r+0x84>
 801f838:	6923      	ldr	r3, [r4, #16]
 801f83a:	b36b      	cbz	r3, 801f898 <__swbuf_r+0x84>
 801f83c:	6923      	ldr	r3, [r4, #16]
 801f83e:	6820      	ldr	r0, [r4, #0]
 801f840:	1ac0      	subs	r0, r0, r3
 801f842:	6963      	ldr	r3, [r4, #20]
 801f844:	b2f6      	uxtb	r6, r6
 801f846:	4283      	cmp	r3, r0
 801f848:	4637      	mov	r7, r6
 801f84a:	dc04      	bgt.n	801f856 <__swbuf_r+0x42>
 801f84c:	4621      	mov	r1, r4
 801f84e:	4628      	mov	r0, r5
 801f850:	f000 f92a 	bl	801faa8 <_fflush_r>
 801f854:	bb30      	cbnz	r0, 801f8a4 <__swbuf_r+0x90>
 801f856:	68a3      	ldr	r3, [r4, #8]
 801f858:	3b01      	subs	r3, #1
 801f85a:	60a3      	str	r3, [r4, #8]
 801f85c:	6823      	ldr	r3, [r4, #0]
 801f85e:	1c5a      	adds	r2, r3, #1
 801f860:	6022      	str	r2, [r4, #0]
 801f862:	701e      	strb	r6, [r3, #0]
 801f864:	6963      	ldr	r3, [r4, #20]
 801f866:	3001      	adds	r0, #1
 801f868:	4283      	cmp	r3, r0
 801f86a:	d004      	beq.n	801f876 <__swbuf_r+0x62>
 801f86c:	89a3      	ldrh	r3, [r4, #12]
 801f86e:	07db      	lsls	r3, r3, #31
 801f870:	d506      	bpl.n	801f880 <__swbuf_r+0x6c>
 801f872:	2e0a      	cmp	r6, #10
 801f874:	d104      	bne.n	801f880 <__swbuf_r+0x6c>
 801f876:	4621      	mov	r1, r4
 801f878:	4628      	mov	r0, r5
 801f87a:	f000 f915 	bl	801faa8 <_fflush_r>
 801f87e:	b988      	cbnz	r0, 801f8a4 <__swbuf_r+0x90>
 801f880:	4638      	mov	r0, r7
 801f882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f884:	4b0a      	ldr	r3, [pc, #40]	; (801f8b0 <__swbuf_r+0x9c>)
 801f886:	429c      	cmp	r4, r3
 801f888:	d101      	bne.n	801f88e <__swbuf_r+0x7a>
 801f88a:	68ac      	ldr	r4, [r5, #8]
 801f88c:	e7cf      	b.n	801f82e <__swbuf_r+0x1a>
 801f88e:	4b09      	ldr	r3, [pc, #36]	; (801f8b4 <__swbuf_r+0xa0>)
 801f890:	429c      	cmp	r4, r3
 801f892:	bf08      	it	eq
 801f894:	68ec      	ldreq	r4, [r5, #12]
 801f896:	e7ca      	b.n	801f82e <__swbuf_r+0x1a>
 801f898:	4621      	mov	r1, r4
 801f89a:	4628      	mov	r0, r5
 801f89c:	f000 f80c 	bl	801f8b8 <__swsetup_r>
 801f8a0:	2800      	cmp	r0, #0
 801f8a2:	d0cb      	beq.n	801f83c <__swbuf_r+0x28>
 801f8a4:	f04f 37ff 	mov.w	r7, #4294967295
 801f8a8:	e7ea      	b.n	801f880 <__swbuf_r+0x6c>
 801f8aa:	bf00      	nop
 801f8ac:	08020bd4 	.word	0x08020bd4
 801f8b0:	08020bf4 	.word	0x08020bf4
 801f8b4:	08020bb4 	.word	0x08020bb4

0801f8b8 <__swsetup_r>:
 801f8b8:	4b32      	ldr	r3, [pc, #200]	; (801f984 <__swsetup_r+0xcc>)
 801f8ba:	b570      	push	{r4, r5, r6, lr}
 801f8bc:	681d      	ldr	r5, [r3, #0]
 801f8be:	4606      	mov	r6, r0
 801f8c0:	460c      	mov	r4, r1
 801f8c2:	b125      	cbz	r5, 801f8ce <__swsetup_r+0x16>
 801f8c4:	69ab      	ldr	r3, [r5, #24]
 801f8c6:	b913      	cbnz	r3, 801f8ce <__swsetup_r+0x16>
 801f8c8:	4628      	mov	r0, r5
 801f8ca:	f000 f981 	bl	801fbd0 <__sinit>
 801f8ce:	4b2e      	ldr	r3, [pc, #184]	; (801f988 <__swsetup_r+0xd0>)
 801f8d0:	429c      	cmp	r4, r3
 801f8d2:	d10f      	bne.n	801f8f4 <__swsetup_r+0x3c>
 801f8d4:	686c      	ldr	r4, [r5, #4]
 801f8d6:	89a3      	ldrh	r3, [r4, #12]
 801f8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f8dc:	0719      	lsls	r1, r3, #28
 801f8de:	d42c      	bmi.n	801f93a <__swsetup_r+0x82>
 801f8e0:	06dd      	lsls	r5, r3, #27
 801f8e2:	d411      	bmi.n	801f908 <__swsetup_r+0x50>
 801f8e4:	2309      	movs	r3, #9
 801f8e6:	6033      	str	r3, [r6, #0]
 801f8e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f8ec:	81a3      	strh	r3, [r4, #12]
 801f8ee:	f04f 30ff 	mov.w	r0, #4294967295
 801f8f2:	e03e      	b.n	801f972 <__swsetup_r+0xba>
 801f8f4:	4b25      	ldr	r3, [pc, #148]	; (801f98c <__swsetup_r+0xd4>)
 801f8f6:	429c      	cmp	r4, r3
 801f8f8:	d101      	bne.n	801f8fe <__swsetup_r+0x46>
 801f8fa:	68ac      	ldr	r4, [r5, #8]
 801f8fc:	e7eb      	b.n	801f8d6 <__swsetup_r+0x1e>
 801f8fe:	4b24      	ldr	r3, [pc, #144]	; (801f990 <__swsetup_r+0xd8>)
 801f900:	429c      	cmp	r4, r3
 801f902:	bf08      	it	eq
 801f904:	68ec      	ldreq	r4, [r5, #12]
 801f906:	e7e6      	b.n	801f8d6 <__swsetup_r+0x1e>
 801f908:	0758      	lsls	r0, r3, #29
 801f90a:	d512      	bpl.n	801f932 <__swsetup_r+0x7a>
 801f90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f90e:	b141      	cbz	r1, 801f922 <__swsetup_r+0x6a>
 801f910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f914:	4299      	cmp	r1, r3
 801f916:	d002      	beq.n	801f91e <__swsetup_r+0x66>
 801f918:	4630      	mov	r0, r6
 801f91a:	f7ff fc45 	bl	801f1a8 <_free_r>
 801f91e:	2300      	movs	r3, #0
 801f920:	6363      	str	r3, [r4, #52]	; 0x34
 801f922:	89a3      	ldrh	r3, [r4, #12]
 801f924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f928:	81a3      	strh	r3, [r4, #12]
 801f92a:	2300      	movs	r3, #0
 801f92c:	6063      	str	r3, [r4, #4]
 801f92e:	6923      	ldr	r3, [r4, #16]
 801f930:	6023      	str	r3, [r4, #0]
 801f932:	89a3      	ldrh	r3, [r4, #12]
 801f934:	f043 0308 	orr.w	r3, r3, #8
 801f938:	81a3      	strh	r3, [r4, #12]
 801f93a:	6923      	ldr	r3, [r4, #16]
 801f93c:	b94b      	cbnz	r3, 801f952 <__swsetup_r+0x9a>
 801f93e:	89a3      	ldrh	r3, [r4, #12]
 801f940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f948:	d003      	beq.n	801f952 <__swsetup_r+0x9a>
 801f94a:	4621      	mov	r1, r4
 801f94c:	4630      	mov	r0, r6
 801f94e:	f000 fa05 	bl	801fd5c <__smakebuf_r>
 801f952:	89a0      	ldrh	r0, [r4, #12]
 801f954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f958:	f010 0301 	ands.w	r3, r0, #1
 801f95c:	d00a      	beq.n	801f974 <__swsetup_r+0xbc>
 801f95e:	2300      	movs	r3, #0
 801f960:	60a3      	str	r3, [r4, #8]
 801f962:	6963      	ldr	r3, [r4, #20]
 801f964:	425b      	negs	r3, r3
 801f966:	61a3      	str	r3, [r4, #24]
 801f968:	6923      	ldr	r3, [r4, #16]
 801f96a:	b943      	cbnz	r3, 801f97e <__swsetup_r+0xc6>
 801f96c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f970:	d1ba      	bne.n	801f8e8 <__swsetup_r+0x30>
 801f972:	bd70      	pop	{r4, r5, r6, pc}
 801f974:	0781      	lsls	r1, r0, #30
 801f976:	bf58      	it	pl
 801f978:	6963      	ldrpl	r3, [r4, #20]
 801f97a:	60a3      	str	r3, [r4, #8]
 801f97c:	e7f4      	b.n	801f968 <__swsetup_r+0xb0>
 801f97e:	2000      	movs	r0, #0
 801f980:	e7f7      	b.n	801f972 <__swsetup_r+0xba>
 801f982:	bf00      	nop
 801f984:	2000014c 	.word	0x2000014c
 801f988:	08020bd4 	.word	0x08020bd4
 801f98c:	08020bf4 	.word	0x08020bf4
 801f990:	08020bb4 	.word	0x08020bb4

0801f994 <abort>:
 801f994:	b508      	push	{r3, lr}
 801f996:	2006      	movs	r0, #6
 801f998:	f000 fa48 	bl	801fe2c <raise>
 801f99c:	2001      	movs	r0, #1
 801f99e:	f7e2 fc5b 	bl	8002258 <_exit>
	...

0801f9a4 <__sflush_r>:
 801f9a4:	898a      	ldrh	r2, [r1, #12]
 801f9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9a8:	4605      	mov	r5, r0
 801f9aa:	0710      	lsls	r0, r2, #28
 801f9ac:	460c      	mov	r4, r1
 801f9ae:	d457      	bmi.n	801fa60 <__sflush_r+0xbc>
 801f9b0:	684b      	ldr	r3, [r1, #4]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	dc04      	bgt.n	801f9c0 <__sflush_r+0x1c>
 801f9b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	dc01      	bgt.n	801f9c0 <__sflush_r+0x1c>
 801f9bc:	2000      	movs	r0, #0
 801f9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f9c2:	2e00      	cmp	r6, #0
 801f9c4:	d0fa      	beq.n	801f9bc <__sflush_r+0x18>
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f9cc:	682f      	ldr	r7, [r5, #0]
 801f9ce:	602b      	str	r3, [r5, #0]
 801f9d0:	d032      	beq.n	801fa38 <__sflush_r+0x94>
 801f9d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f9d4:	89a3      	ldrh	r3, [r4, #12]
 801f9d6:	075a      	lsls	r2, r3, #29
 801f9d8:	d505      	bpl.n	801f9e6 <__sflush_r+0x42>
 801f9da:	6863      	ldr	r3, [r4, #4]
 801f9dc:	1ac0      	subs	r0, r0, r3
 801f9de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f9e0:	b10b      	cbz	r3, 801f9e6 <__sflush_r+0x42>
 801f9e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f9e4:	1ac0      	subs	r0, r0, r3
 801f9e6:	2300      	movs	r3, #0
 801f9e8:	4602      	mov	r2, r0
 801f9ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f9ec:	6a21      	ldr	r1, [r4, #32]
 801f9ee:	4628      	mov	r0, r5
 801f9f0:	47b0      	blx	r6
 801f9f2:	1c43      	adds	r3, r0, #1
 801f9f4:	89a3      	ldrh	r3, [r4, #12]
 801f9f6:	d106      	bne.n	801fa06 <__sflush_r+0x62>
 801f9f8:	6829      	ldr	r1, [r5, #0]
 801f9fa:	291d      	cmp	r1, #29
 801f9fc:	d82c      	bhi.n	801fa58 <__sflush_r+0xb4>
 801f9fe:	4a29      	ldr	r2, [pc, #164]	; (801faa4 <__sflush_r+0x100>)
 801fa00:	40ca      	lsrs	r2, r1
 801fa02:	07d6      	lsls	r6, r2, #31
 801fa04:	d528      	bpl.n	801fa58 <__sflush_r+0xb4>
 801fa06:	2200      	movs	r2, #0
 801fa08:	6062      	str	r2, [r4, #4]
 801fa0a:	04d9      	lsls	r1, r3, #19
 801fa0c:	6922      	ldr	r2, [r4, #16]
 801fa0e:	6022      	str	r2, [r4, #0]
 801fa10:	d504      	bpl.n	801fa1c <__sflush_r+0x78>
 801fa12:	1c42      	adds	r2, r0, #1
 801fa14:	d101      	bne.n	801fa1a <__sflush_r+0x76>
 801fa16:	682b      	ldr	r3, [r5, #0]
 801fa18:	b903      	cbnz	r3, 801fa1c <__sflush_r+0x78>
 801fa1a:	6560      	str	r0, [r4, #84]	; 0x54
 801fa1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa1e:	602f      	str	r7, [r5, #0]
 801fa20:	2900      	cmp	r1, #0
 801fa22:	d0cb      	beq.n	801f9bc <__sflush_r+0x18>
 801fa24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fa28:	4299      	cmp	r1, r3
 801fa2a:	d002      	beq.n	801fa32 <__sflush_r+0x8e>
 801fa2c:	4628      	mov	r0, r5
 801fa2e:	f7ff fbbb 	bl	801f1a8 <_free_r>
 801fa32:	2000      	movs	r0, #0
 801fa34:	6360      	str	r0, [r4, #52]	; 0x34
 801fa36:	e7c2      	b.n	801f9be <__sflush_r+0x1a>
 801fa38:	6a21      	ldr	r1, [r4, #32]
 801fa3a:	2301      	movs	r3, #1
 801fa3c:	4628      	mov	r0, r5
 801fa3e:	47b0      	blx	r6
 801fa40:	1c41      	adds	r1, r0, #1
 801fa42:	d1c7      	bne.n	801f9d4 <__sflush_r+0x30>
 801fa44:	682b      	ldr	r3, [r5, #0]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d0c4      	beq.n	801f9d4 <__sflush_r+0x30>
 801fa4a:	2b1d      	cmp	r3, #29
 801fa4c:	d001      	beq.n	801fa52 <__sflush_r+0xae>
 801fa4e:	2b16      	cmp	r3, #22
 801fa50:	d101      	bne.n	801fa56 <__sflush_r+0xb2>
 801fa52:	602f      	str	r7, [r5, #0]
 801fa54:	e7b2      	b.n	801f9bc <__sflush_r+0x18>
 801fa56:	89a3      	ldrh	r3, [r4, #12]
 801fa58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa5c:	81a3      	strh	r3, [r4, #12]
 801fa5e:	e7ae      	b.n	801f9be <__sflush_r+0x1a>
 801fa60:	690f      	ldr	r7, [r1, #16]
 801fa62:	2f00      	cmp	r7, #0
 801fa64:	d0aa      	beq.n	801f9bc <__sflush_r+0x18>
 801fa66:	0793      	lsls	r3, r2, #30
 801fa68:	680e      	ldr	r6, [r1, #0]
 801fa6a:	bf08      	it	eq
 801fa6c:	694b      	ldreq	r3, [r1, #20]
 801fa6e:	600f      	str	r7, [r1, #0]
 801fa70:	bf18      	it	ne
 801fa72:	2300      	movne	r3, #0
 801fa74:	1bf6      	subs	r6, r6, r7
 801fa76:	608b      	str	r3, [r1, #8]
 801fa78:	2e00      	cmp	r6, #0
 801fa7a:	dd9f      	ble.n	801f9bc <__sflush_r+0x18>
 801fa7c:	6a21      	ldr	r1, [r4, #32]
 801fa7e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801fa82:	4633      	mov	r3, r6
 801fa84:	463a      	mov	r2, r7
 801fa86:	4628      	mov	r0, r5
 801fa88:	47e0      	blx	ip
 801fa8a:	2800      	cmp	r0, #0
 801fa8c:	dc06      	bgt.n	801fa9c <__sflush_r+0xf8>
 801fa8e:	89a3      	ldrh	r3, [r4, #12]
 801fa90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa94:	81a3      	strh	r3, [r4, #12]
 801fa96:	f04f 30ff 	mov.w	r0, #4294967295
 801fa9a:	e790      	b.n	801f9be <__sflush_r+0x1a>
 801fa9c:	4407      	add	r7, r0
 801fa9e:	1a36      	subs	r6, r6, r0
 801faa0:	e7ea      	b.n	801fa78 <__sflush_r+0xd4>
 801faa2:	bf00      	nop
 801faa4:	20400001 	.word	0x20400001

0801faa8 <_fflush_r>:
 801faa8:	b538      	push	{r3, r4, r5, lr}
 801faaa:	690b      	ldr	r3, [r1, #16]
 801faac:	4605      	mov	r5, r0
 801faae:	460c      	mov	r4, r1
 801fab0:	b913      	cbnz	r3, 801fab8 <_fflush_r+0x10>
 801fab2:	2500      	movs	r5, #0
 801fab4:	4628      	mov	r0, r5
 801fab6:	bd38      	pop	{r3, r4, r5, pc}
 801fab8:	b118      	cbz	r0, 801fac2 <_fflush_r+0x1a>
 801faba:	6983      	ldr	r3, [r0, #24]
 801fabc:	b90b      	cbnz	r3, 801fac2 <_fflush_r+0x1a>
 801fabe:	f000 f887 	bl	801fbd0 <__sinit>
 801fac2:	4b14      	ldr	r3, [pc, #80]	; (801fb14 <_fflush_r+0x6c>)
 801fac4:	429c      	cmp	r4, r3
 801fac6:	d11b      	bne.n	801fb00 <_fflush_r+0x58>
 801fac8:	686c      	ldr	r4, [r5, #4]
 801faca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801face:	2b00      	cmp	r3, #0
 801fad0:	d0ef      	beq.n	801fab2 <_fflush_r+0xa>
 801fad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fad4:	07d0      	lsls	r0, r2, #31
 801fad6:	d404      	bmi.n	801fae2 <_fflush_r+0x3a>
 801fad8:	0599      	lsls	r1, r3, #22
 801fada:	d402      	bmi.n	801fae2 <_fflush_r+0x3a>
 801fadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fade:	f000 f915 	bl	801fd0c <__retarget_lock_acquire_recursive>
 801fae2:	4628      	mov	r0, r5
 801fae4:	4621      	mov	r1, r4
 801fae6:	f7ff ff5d 	bl	801f9a4 <__sflush_r>
 801faea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801faec:	07da      	lsls	r2, r3, #31
 801faee:	4605      	mov	r5, r0
 801faf0:	d4e0      	bmi.n	801fab4 <_fflush_r+0xc>
 801faf2:	89a3      	ldrh	r3, [r4, #12]
 801faf4:	059b      	lsls	r3, r3, #22
 801faf6:	d4dd      	bmi.n	801fab4 <_fflush_r+0xc>
 801faf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fafa:	f000 f908 	bl	801fd0e <__retarget_lock_release_recursive>
 801fafe:	e7d9      	b.n	801fab4 <_fflush_r+0xc>
 801fb00:	4b05      	ldr	r3, [pc, #20]	; (801fb18 <_fflush_r+0x70>)
 801fb02:	429c      	cmp	r4, r3
 801fb04:	d101      	bne.n	801fb0a <_fflush_r+0x62>
 801fb06:	68ac      	ldr	r4, [r5, #8]
 801fb08:	e7df      	b.n	801faca <_fflush_r+0x22>
 801fb0a:	4b04      	ldr	r3, [pc, #16]	; (801fb1c <_fflush_r+0x74>)
 801fb0c:	429c      	cmp	r4, r3
 801fb0e:	bf08      	it	eq
 801fb10:	68ec      	ldreq	r4, [r5, #12]
 801fb12:	e7da      	b.n	801faca <_fflush_r+0x22>
 801fb14:	08020bd4 	.word	0x08020bd4
 801fb18:	08020bf4 	.word	0x08020bf4
 801fb1c:	08020bb4 	.word	0x08020bb4

0801fb20 <std>:
 801fb20:	2300      	movs	r3, #0
 801fb22:	b510      	push	{r4, lr}
 801fb24:	4604      	mov	r4, r0
 801fb26:	e9c0 3300 	strd	r3, r3, [r0]
 801fb2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fb2e:	6083      	str	r3, [r0, #8]
 801fb30:	8181      	strh	r1, [r0, #12]
 801fb32:	6643      	str	r3, [r0, #100]	; 0x64
 801fb34:	81c2      	strh	r2, [r0, #14]
 801fb36:	6183      	str	r3, [r0, #24]
 801fb38:	4619      	mov	r1, r3
 801fb3a:	2208      	movs	r2, #8
 801fb3c:	305c      	adds	r0, #92	; 0x5c
 801fb3e:	f7fd fb1f 	bl	801d180 <memset>
 801fb42:	4b05      	ldr	r3, [pc, #20]	; (801fb58 <std+0x38>)
 801fb44:	6263      	str	r3, [r4, #36]	; 0x24
 801fb46:	4b05      	ldr	r3, [pc, #20]	; (801fb5c <std+0x3c>)
 801fb48:	62a3      	str	r3, [r4, #40]	; 0x28
 801fb4a:	4b05      	ldr	r3, [pc, #20]	; (801fb60 <std+0x40>)
 801fb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fb4e:	4b05      	ldr	r3, [pc, #20]	; (801fb64 <std+0x44>)
 801fb50:	6224      	str	r4, [r4, #32]
 801fb52:	6323      	str	r3, [r4, #48]	; 0x30
 801fb54:	bd10      	pop	{r4, pc}
 801fb56:	bf00      	nop
 801fb58:	0801fe65 	.word	0x0801fe65
 801fb5c:	0801fe87 	.word	0x0801fe87
 801fb60:	0801febf 	.word	0x0801febf
 801fb64:	0801fee3 	.word	0x0801fee3

0801fb68 <_cleanup_r>:
 801fb68:	4901      	ldr	r1, [pc, #4]	; (801fb70 <_cleanup_r+0x8>)
 801fb6a:	f000 b8af 	b.w	801fccc <_fwalk_reent>
 801fb6e:	bf00      	nop
 801fb70:	0801faa9 	.word	0x0801faa9

0801fb74 <__sfmoreglue>:
 801fb74:	b570      	push	{r4, r5, r6, lr}
 801fb76:	2268      	movs	r2, #104	; 0x68
 801fb78:	1e4d      	subs	r5, r1, #1
 801fb7a:	4355      	muls	r5, r2
 801fb7c:	460e      	mov	r6, r1
 801fb7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fb82:	f7ff fa21 	bl	801efc8 <_malloc_r>
 801fb86:	4604      	mov	r4, r0
 801fb88:	b140      	cbz	r0, 801fb9c <__sfmoreglue+0x28>
 801fb8a:	2100      	movs	r1, #0
 801fb8c:	e9c0 1600 	strd	r1, r6, [r0]
 801fb90:	300c      	adds	r0, #12
 801fb92:	60a0      	str	r0, [r4, #8]
 801fb94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fb98:	f7fd faf2 	bl	801d180 <memset>
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	bd70      	pop	{r4, r5, r6, pc}

0801fba0 <__sfp_lock_acquire>:
 801fba0:	4801      	ldr	r0, [pc, #4]	; (801fba8 <__sfp_lock_acquire+0x8>)
 801fba2:	f000 b8b3 	b.w	801fd0c <__retarget_lock_acquire_recursive>
 801fba6:	bf00      	nop
 801fba8:	2000256d 	.word	0x2000256d

0801fbac <__sfp_lock_release>:
 801fbac:	4801      	ldr	r0, [pc, #4]	; (801fbb4 <__sfp_lock_release+0x8>)
 801fbae:	f000 b8ae 	b.w	801fd0e <__retarget_lock_release_recursive>
 801fbb2:	bf00      	nop
 801fbb4:	2000256d 	.word	0x2000256d

0801fbb8 <__sinit_lock_acquire>:
 801fbb8:	4801      	ldr	r0, [pc, #4]	; (801fbc0 <__sinit_lock_acquire+0x8>)
 801fbba:	f000 b8a7 	b.w	801fd0c <__retarget_lock_acquire_recursive>
 801fbbe:	bf00      	nop
 801fbc0:	2000256e 	.word	0x2000256e

0801fbc4 <__sinit_lock_release>:
 801fbc4:	4801      	ldr	r0, [pc, #4]	; (801fbcc <__sinit_lock_release+0x8>)
 801fbc6:	f000 b8a2 	b.w	801fd0e <__retarget_lock_release_recursive>
 801fbca:	bf00      	nop
 801fbcc:	2000256e 	.word	0x2000256e

0801fbd0 <__sinit>:
 801fbd0:	b510      	push	{r4, lr}
 801fbd2:	4604      	mov	r4, r0
 801fbd4:	f7ff fff0 	bl	801fbb8 <__sinit_lock_acquire>
 801fbd8:	69a3      	ldr	r3, [r4, #24]
 801fbda:	b11b      	cbz	r3, 801fbe4 <__sinit+0x14>
 801fbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbe0:	f7ff bff0 	b.w	801fbc4 <__sinit_lock_release>
 801fbe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fbe8:	6523      	str	r3, [r4, #80]	; 0x50
 801fbea:	4b13      	ldr	r3, [pc, #76]	; (801fc38 <__sinit+0x68>)
 801fbec:	4a13      	ldr	r2, [pc, #76]	; (801fc3c <__sinit+0x6c>)
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	62a2      	str	r2, [r4, #40]	; 0x28
 801fbf2:	42a3      	cmp	r3, r4
 801fbf4:	bf04      	itt	eq
 801fbf6:	2301      	moveq	r3, #1
 801fbf8:	61a3      	streq	r3, [r4, #24]
 801fbfa:	4620      	mov	r0, r4
 801fbfc:	f000 f820 	bl	801fc40 <__sfp>
 801fc00:	6060      	str	r0, [r4, #4]
 801fc02:	4620      	mov	r0, r4
 801fc04:	f000 f81c 	bl	801fc40 <__sfp>
 801fc08:	60a0      	str	r0, [r4, #8]
 801fc0a:	4620      	mov	r0, r4
 801fc0c:	f000 f818 	bl	801fc40 <__sfp>
 801fc10:	2200      	movs	r2, #0
 801fc12:	60e0      	str	r0, [r4, #12]
 801fc14:	2104      	movs	r1, #4
 801fc16:	6860      	ldr	r0, [r4, #4]
 801fc18:	f7ff ff82 	bl	801fb20 <std>
 801fc1c:	68a0      	ldr	r0, [r4, #8]
 801fc1e:	2201      	movs	r2, #1
 801fc20:	2109      	movs	r1, #9
 801fc22:	f7ff ff7d 	bl	801fb20 <std>
 801fc26:	68e0      	ldr	r0, [r4, #12]
 801fc28:	2202      	movs	r2, #2
 801fc2a:	2112      	movs	r1, #18
 801fc2c:	f7ff ff78 	bl	801fb20 <std>
 801fc30:	2301      	movs	r3, #1
 801fc32:	61a3      	str	r3, [r4, #24]
 801fc34:	e7d2      	b.n	801fbdc <__sinit+0xc>
 801fc36:	bf00      	nop
 801fc38:	080207e8 	.word	0x080207e8
 801fc3c:	0801fb69 	.word	0x0801fb69

0801fc40 <__sfp>:
 801fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc42:	4607      	mov	r7, r0
 801fc44:	f7ff ffac 	bl	801fba0 <__sfp_lock_acquire>
 801fc48:	4b1e      	ldr	r3, [pc, #120]	; (801fcc4 <__sfp+0x84>)
 801fc4a:	681e      	ldr	r6, [r3, #0]
 801fc4c:	69b3      	ldr	r3, [r6, #24]
 801fc4e:	b913      	cbnz	r3, 801fc56 <__sfp+0x16>
 801fc50:	4630      	mov	r0, r6
 801fc52:	f7ff ffbd 	bl	801fbd0 <__sinit>
 801fc56:	3648      	adds	r6, #72	; 0x48
 801fc58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fc5c:	3b01      	subs	r3, #1
 801fc5e:	d503      	bpl.n	801fc68 <__sfp+0x28>
 801fc60:	6833      	ldr	r3, [r6, #0]
 801fc62:	b30b      	cbz	r3, 801fca8 <__sfp+0x68>
 801fc64:	6836      	ldr	r6, [r6, #0]
 801fc66:	e7f7      	b.n	801fc58 <__sfp+0x18>
 801fc68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fc6c:	b9d5      	cbnz	r5, 801fca4 <__sfp+0x64>
 801fc6e:	4b16      	ldr	r3, [pc, #88]	; (801fcc8 <__sfp+0x88>)
 801fc70:	60e3      	str	r3, [r4, #12]
 801fc72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fc76:	6665      	str	r5, [r4, #100]	; 0x64
 801fc78:	f000 f847 	bl	801fd0a <__retarget_lock_init_recursive>
 801fc7c:	f7ff ff96 	bl	801fbac <__sfp_lock_release>
 801fc80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fc84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fc88:	6025      	str	r5, [r4, #0]
 801fc8a:	61a5      	str	r5, [r4, #24]
 801fc8c:	2208      	movs	r2, #8
 801fc8e:	4629      	mov	r1, r5
 801fc90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fc94:	f7fd fa74 	bl	801d180 <memset>
 801fc98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fc9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fca0:	4620      	mov	r0, r4
 801fca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fca4:	3468      	adds	r4, #104	; 0x68
 801fca6:	e7d9      	b.n	801fc5c <__sfp+0x1c>
 801fca8:	2104      	movs	r1, #4
 801fcaa:	4638      	mov	r0, r7
 801fcac:	f7ff ff62 	bl	801fb74 <__sfmoreglue>
 801fcb0:	4604      	mov	r4, r0
 801fcb2:	6030      	str	r0, [r6, #0]
 801fcb4:	2800      	cmp	r0, #0
 801fcb6:	d1d5      	bne.n	801fc64 <__sfp+0x24>
 801fcb8:	f7ff ff78 	bl	801fbac <__sfp_lock_release>
 801fcbc:	230c      	movs	r3, #12
 801fcbe:	603b      	str	r3, [r7, #0]
 801fcc0:	e7ee      	b.n	801fca0 <__sfp+0x60>
 801fcc2:	bf00      	nop
 801fcc4:	080207e8 	.word	0x080207e8
 801fcc8:	ffff0001 	.word	0xffff0001

0801fccc <_fwalk_reent>:
 801fccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fcd0:	4606      	mov	r6, r0
 801fcd2:	4688      	mov	r8, r1
 801fcd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fcd8:	2700      	movs	r7, #0
 801fcda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fcde:	f1b9 0901 	subs.w	r9, r9, #1
 801fce2:	d505      	bpl.n	801fcf0 <_fwalk_reent+0x24>
 801fce4:	6824      	ldr	r4, [r4, #0]
 801fce6:	2c00      	cmp	r4, #0
 801fce8:	d1f7      	bne.n	801fcda <_fwalk_reent+0xe>
 801fcea:	4638      	mov	r0, r7
 801fcec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fcf0:	89ab      	ldrh	r3, [r5, #12]
 801fcf2:	2b01      	cmp	r3, #1
 801fcf4:	d907      	bls.n	801fd06 <_fwalk_reent+0x3a>
 801fcf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fcfa:	3301      	adds	r3, #1
 801fcfc:	d003      	beq.n	801fd06 <_fwalk_reent+0x3a>
 801fcfe:	4629      	mov	r1, r5
 801fd00:	4630      	mov	r0, r6
 801fd02:	47c0      	blx	r8
 801fd04:	4307      	orrs	r7, r0
 801fd06:	3568      	adds	r5, #104	; 0x68
 801fd08:	e7e9      	b.n	801fcde <_fwalk_reent+0x12>

0801fd0a <__retarget_lock_init_recursive>:
 801fd0a:	4770      	bx	lr

0801fd0c <__retarget_lock_acquire_recursive>:
 801fd0c:	4770      	bx	lr

0801fd0e <__retarget_lock_release_recursive>:
 801fd0e:	4770      	bx	lr

0801fd10 <__swhatbuf_r>:
 801fd10:	b570      	push	{r4, r5, r6, lr}
 801fd12:	460e      	mov	r6, r1
 801fd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd18:	2900      	cmp	r1, #0
 801fd1a:	b096      	sub	sp, #88	; 0x58
 801fd1c:	4614      	mov	r4, r2
 801fd1e:	461d      	mov	r5, r3
 801fd20:	da08      	bge.n	801fd34 <__swhatbuf_r+0x24>
 801fd22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801fd26:	2200      	movs	r2, #0
 801fd28:	602a      	str	r2, [r5, #0]
 801fd2a:	061a      	lsls	r2, r3, #24
 801fd2c:	d410      	bmi.n	801fd50 <__swhatbuf_r+0x40>
 801fd2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd32:	e00e      	b.n	801fd52 <__swhatbuf_r+0x42>
 801fd34:	466a      	mov	r2, sp
 801fd36:	f000 f8fb 	bl	801ff30 <_fstat_r>
 801fd3a:	2800      	cmp	r0, #0
 801fd3c:	dbf1      	blt.n	801fd22 <__swhatbuf_r+0x12>
 801fd3e:	9a01      	ldr	r2, [sp, #4]
 801fd40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fd44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fd48:	425a      	negs	r2, r3
 801fd4a:	415a      	adcs	r2, r3
 801fd4c:	602a      	str	r2, [r5, #0]
 801fd4e:	e7ee      	b.n	801fd2e <__swhatbuf_r+0x1e>
 801fd50:	2340      	movs	r3, #64	; 0x40
 801fd52:	2000      	movs	r0, #0
 801fd54:	6023      	str	r3, [r4, #0]
 801fd56:	b016      	add	sp, #88	; 0x58
 801fd58:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fd5c <__smakebuf_r>:
 801fd5c:	898b      	ldrh	r3, [r1, #12]
 801fd5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fd60:	079d      	lsls	r5, r3, #30
 801fd62:	4606      	mov	r6, r0
 801fd64:	460c      	mov	r4, r1
 801fd66:	d507      	bpl.n	801fd78 <__smakebuf_r+0x1c>
 801fd68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fd6c:	6023      	str	r3, [r4, #0]
 801fd6e:	6123      	str	r3, [r4, #16]
 801fd70:	2301      	movs	r3, #1
 801fd72:	6163      	str	r3, [r4, #20]
 801fd74:	b002      	add	sp, #8
 801fd76:	bd70      	pop	{r4, r5, r6, pc}
 801fd78:	ab01      	add	r3, sp, #4
 801fd7a:	466a      	mov	r2, sp
 801fd7c:	f7ff ffc8 	bl	801fd10 <__swhatbuf_r>
 801fd80:	9900      	ldr	r1, [sp, #0]
 801fd82:	4605      	mov	r5, r0
 801fd84:	4630      	mov	r0, r6
 801fd86:	f7ff f91f 	bl	801efc8 <_malloc_r>
 801fd8a:	b948      	cbnz	r0, 801fda0 <__smakebuf_r+0x44>
 801fd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd90:	059a      	lsls	r2, r3, #22
 801fd92:	d4ef      	bmi.n	801fd74 <__smakebuf_r+0x18>
 801fd94:	f023 0303 	bic.w	r3, r3, #3
 801fd98:	f043 0302 	orr.w	r3, r3, #2
 801fd9c:	81a3      	strh	r3, [r4, #12]
 801fd9e:	e7e3      	b.n	801fd68 <__smakebuf_r+0xc>
 801fda0:	4b0d      	ldr	r3, [pc, #52]	; (801fdd8 <__smakebuf_r+0x7c>)
 801fda2:	62b3      	str	r3, [r6, #40]	; 0x28
 801fda4:	89a3      	ldrh	r3, [r4, #12]
 801fda6:	6020      	str	r0, [r4, #0]
 801fda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdac:	81a3      	strh	r3, [r4, #12]
 801fdae:	9b00      	ldr	r3, [sp, #0]
 801fdb0:	6163      	str	r3, [r4, #20]
 801fdb2:	9b01      	ldr	r3, [sp, #4]
 801fdb4:	6120      	str	r0, [r4, #16]
 801fdb6:	b15b      	cbz	r3, 801fdd0 <__smakebuf_r+0x74>
 801fdb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdbc:	4630      	mov	r0, r6
 801fdbe:	f000 f8c9 	bl	801ff54 <_isatty_r>
 801fdc2:	b128      	cbz	r0, 801fdd0 <__smakebuf_r+0x74>
 801fdc4:	89a3      	ldrh	r3, [r4, #12]
 801fdc6:	f023 0303 	bic.w	r3, r3, #3
 801fdca:	f043 0301 	orr.w	r3, r3, #1
 801fdce:	81a3      	strh	r3, [r4, #12]
 801fdd0:	89a0      	ldrh	r0, [r4, #12]
 801fdd2:	4305      	orrs	r5, r0
 801fdd4:	81a5      	strh	r5, [r4, #12]
 801fdd6:	e7cd      	b.n	801fd74 <__smakebuf_r+0x18>
 801fdd8:	0801fb69 	.word	0x0801fb69

0801fddc <_raise_r>:
 801fddc:	291f      	cmp	r1, #31
 801fdde:	b538      	push	{r3, r4, r5, lr}
 801fde0:	4604      	mov	r4, r0
 801fde2:	460d      	mov	r5, r1
 801fde4:	d904      	bls.n	801fdf0 <_raise_r+0x14>
 801fde6:	2316      	movs	r3, #22
 801fde8:	6003      	str	r3, [r0, #0]
 801fdea:	f04f 30ff 	mov.w	r0, #4294967295
 801fdee:	bd38      	pop	{r3, r4, r5, pc}
 801fdf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fdf2:	b112      	cbz	r2, 801fdfa <_raise_r+0x1e>
 801fdf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fdf8:	b94b      	cbnz	r3, 801fe0e <_raise_r+0x32>
 801fdfa:	4620      	mov	r0, r4
 801fdfc:	f000 f830 	bl	801fe60 <_getpid_r>
 801fe00:	462a      	mov	r2, r5
 801fe02:	4601      	mov	r1, r0
 801fe04:	4620      	mov	r0, r4
 801fe06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe0a:	f000 b817 	b.w	801fe3c <_kill_r>
 801fe0e:	2b01      	cmp	r3, #1
 801fe10:	d00a      	beq.n	801fe28 <_raise_r+0x4c>
 801fe12:	1c59      	adds	r1, r3, #1
 801fe14:	d103      	bne.n	801fe1e <_raise_r+0x42>
 801fe16:	2316      	movs	r3, #22
 801fe18:	6003      	str	r3, [r0, #0]
 801fe1a:	2001      	movs	r0, #1
 801fe1c:	e7e7      	b.n	801fdee <_raise_r+0x12>
 801fe1e:	2400      	movs	r4, #0
 801fe20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fe24:	4628      	mov	r0, r5
 801fe26:	4798      	blx	r3
 801fe28:	2000      	movs	r0, #0
 801fe2a:	e7e0      	b.n	801fdee <_raise_r+0x12>

0801fe2c <raise>:
 801fe2c:	4b02      	ldr	r3, [pc, #8]	; (801fe38 <raise+0xc>)
 801fe2e:	4601      	mov	r1, r0
 801fe30:	6818      	ldr	r0, [r3, #0]
 801fe32:	f7ff bfd3 	b.w	801fddc <_raise_r>
 801fe36:	bf00      	nop
 801fe38:	2000014c 	.word	0x2000014c

0801fe3c <_kill_r>:
 801fe3c:	b538      	push	{r3, r4, r5, lr}
 801fe3e:	4d07      	ldr	r5, [pc, #28]	; (801fe5c <_kill_r+0x20>)
 801fe40:	2300      	movs	r3, #0
 801fe42:	4604      	mov	r4, r0
 801fe44:	4608      	mov	r0, r1
 801fe46:	4611      	mov	r1, r2
 801fe48:	602b      	str	r3, [r5, #0]
 801fe4a:	f7e2 f9f5 	bl	8002238 <_kill>
 801fe4e:	1c43      	adds	r3, r0, #1
 801fe50:	d102      	bne.n	801fe58 <_kill_r+0x1c>
 801fe52:	682b      	ldr	r3, [r5, #0]
 801fe54:	b103      	cbz	r3, 801fe58 <_kill_r+0x1c>
 801fe56:	6023      	str	r3, [r4, #0]
 801fe58:	bd38      	pop	{r3, r4, r5, pc}
 801fe5a:	bf00      	nop
 801fe5c:	20002568 	.word	0x20002568

0801fe60 <_getpid_r>:
 801fe60:	f7e2 b9e3 	b.w	800222a <_getpid>

0801fe64 <__sread>:
 801fe64:	b510      	push	{r4, lr}
 801fe66:	460c      	mov	r4, r1
 801fe68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe6c:	f000 f894 	bl	801ff98 <_read_r>
 801fe70:	2800      	cmp	r0, #0
 801fe72:	bfab      	itete	ge
 801fe74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fe76:	89a3      	ldrhlt	r3, [r4, #12]
 801fe78:	181b      	addge	r3, r3, r0
 801fe7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fe7e:	bfac      	ite	ge
 801fe80:	6563      	strge	r3, [r4, #84]	; 0x54
 801fe82:	81a3      	strhlt	r3, [r4, #12]
 801fe84:	bd10      	pop	{r4, pc}

0801fe86 <__swrite>:
 801fe86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe8a:	461f      	mov	r7, r3
 801fe8c:	898b      	ldrh	r3, [r1, #12]
 801fe8e:	05db      	lsls	r3, r3, #23
 801fe90:	4605      	mov	r5, r0
 801fe92:	460c      	mov	r4, r1
 801fe94:	4616      	mov	r6, r2
 801fe96:	d505      	bpl.n	801fea4 <__swrite+0x1e>
 801fe98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe9c:	2302      	movs	r3, #2
 801fe9e:	2200      	movs	r2, #0
 801fea0:	f000 f868 	bl	801ff74 <_lseek_r>
 801fea4:	89a3      	ldrh	r3, [r4, #12]
 801fea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801feaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801feae:	81a3      	strh	r3, [r4, #12]
 801feb0:	4632      	mov	r2, r6
 801feb2:	463b      	mov	r3, r7
 801feb4:	4628      	mov	r0, r5
 801feb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801feba:	f000 b817 	b.w	801feec <_write_r>

0801febe <__sseek>:
 801febe:	b510      	push	{r4, lr}
 801fec0:	460c      	mov	r4, r1
 801fec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fec6:	f000 f855 	bl	801ff74 <_lseek_r>
 801feca:	1c43      	adds	r3, r0, #1
 801fecc:	89a3      	ldrh	r3, [r4, #12]
 801fece:	bf15      	itete	ne
 801fed0:	6560      	strne	r0, [r4, #84]	; 0x54
 801fed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801feda:	81a3      	strheq	r3, [r4, #12]
 801fedc:	bf18      	it	ne
 801fede:	81a3      	strhne	r3, [r4, #12]
 801fee0:	bd10      	pop	{r4, pc}

0801fee2 <__sclose>:
 801fee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fee6:	f000 b813 	b.w	801ff10 <_close_r>
	...

0801feec <_write_r>:
 801feec:	b538      	push	{r3, r4, r5, lr}
 801feee:	4d07      	ldr	r5, [pc, #28]	; (801ff0c <_write_r+0x20>)
 801fef0:	4604      	mov	r4, r0
 801fef2:	4608      	mov	r0, r1
 801fef4:	4611      	mov	r1, r2
 801fef6:	2200      	movs	r2, #0
 801fef8:	602a      	str	r2, [r5, #0]
 801fefa:	461a      	mov	r2, r3
 801fefc:	f7e2 f9d3 	bl	80022a6 <_write>
 801ff00:	1c43      	adds	r3, r0, #1
 801ff02:	d102      	bne.n	801ff0a <_write_r+0x1e>
 801ff04:	682b      	ldr	r3, [r5, #0]
 801ff06:	b103      	cbz	r3, 801ff0a <_write_r+0x1e>
 801ff08:	6023      	str	r3, [r4, #0]
 801ff0a:	bd38      	pop	{r3, r4, r5, pc}
 801ff0c:	20002568 	.word	0x20002568

0801ff10 <_close_r>:
 801ff10:	b538      	push	{r3, r4, r5, lr}
 801ff12:	4d06      	ldr	r5, [pc, #24]	; (801ff2c <_close_r+0x1c>)
 801ff14:	2300      	movs	r3, #0
 801ff16:	4604      	mov	r4, r0
 801ff18:	4608      	mov	r0, r1
 801ff1a:	602b      	str	r3, [r5, #0]
 801ff1c:	f7e2 f9df 	bl	80022de <_close>
 801ff20:	1c43      	adds	r3, r0, #1
 801ff22:	d102      	bne.n	801ff2a <_close_r+0x1a>
 801ff24:	682b      	ldr	r3, [r5, #0]
 801ff26:	b103      	cbz	r3, 801ff2a <_close_r+0x1a>
 801ff28:	6023      	str	r3, [r4, #0]
 801ff2a:	bd38      	pop	{r3, r4, r5, pc}
 801ff2c:	20002568 	.word	0x20002568

0801ff30 <_fstat_r>:
 801ff30:	b538      	push	{r3, r4, r5, lr}
 801ff32:	4d07      	ldr	r5, [pc, #28]	; (801ff50 <_fstat_r+0x20>)
 801ff34:	2300      	movs	r3, #0
 801ff36:	4604      	mov	r4, r0
 801ff38:	4608      	mov	r0, r1
 801ff3a:	4611      	mov	r1, r2
 801ff3c:	602b      	str	r3, [r5, #0]
 801ff3e:	f7e2 f9d9 	bl	80022f4 <_fstat>
 801ff42:	1c43      	adds	r3, r0, #1
 801ff44:	d102      	bne.n	801ff4c <_fstat_r+0x1c>
 801ff46:	682b      	ldr	r3, [r5, #0]
 801ff48:	b103      	cbz	r3, 801ff4c <_fstat_r+0x1c>
 801ff4a:	6023      	str	r3, [r4, #0]
 801ff4c:	bd38      	pop	{r3, r4, r5, pc}
 801ff4e:	bf00      	nop
 801ff50:	20002568 	.word	0x20002568

0801ff54 <_isatty_r>:
 801ff54:	b538      	push	{r3, r4, r5, lr}
 801ff56:	4d06      	ldr	r5, [pc, #24]	; (801ff70 <_isatty_r+0x1c>)
 801ff58:	2300      	movs	r3, #0
 801ff5a:	4604      	mov	r4, r0
 801ff5c:	4608      	mov	r0, r1
 801ff5e:	602b      	str	r3, [r5, #0]
 801ff60:	f7e2 f9d7 	bl	8002312 <_isatty>
 801ff64:	1c43      	adds	r3, r0, #1
 801ff66:	d102      	bne.n	801ff6e <_isatty_r+0x1a>
 801ff68:	682b      	ldr	r3, [r5, #0]
 801ff6a:	b103      	cbz	r3, 801ff6e <_isatty_r+0x1a>
 801ff6c:	6023      	str	r3, [r4, #0]
 801ff6e:	bd38      	pop	{r3, r4, r5, pc}
 801ff70:	20002568 	.word	0x20002568

0801ff74 <_lseek_r>:
 801ff74:	b538      	push	{r3, r4, r5, lr}
 801ff76:	4d07      	ldr	r5, [pc, #28]	; (801ff94 <_lseek_r+0x20>)
 801ff78:	4604      	mov	r4, r0
 801ff7a:	4608      	mov	r0, r1
 801ff7c:	4611      	mov	r1, r2
 801ff7e:	2200      	movs	r2, #0
 801ff80:	602a      	str	r2, [r5, #0]
 801ff82:	461a      	mov	r2, r3
 801ff84:	f7e2 f9cf 	bl	8002326 <_lseek>
 801ff88:	1c43      	adds	r3, r0, #1
 801ff8a:	d102      	bne.n	801ff92 <_lseek_r+0x1e>
 801ff8c:	682b      	ldr	r3, [r5, #0]
 801ff8e:	b103      	cbz	r3, 801ff92 <_lseek_r+0x1e>
 801ff90:	6023      	str	r3, [r4, #0]
 801ff92:	bd38      	pop	{r3, r4, r5, pc}
 801ff94:	20002568 	.word	0x20002568

0801ff98 <_read_r>:
 801ff98:	b538      	push	{r3, r4, r5, lr}
 801ff9a:	4d07      	ldr	r5, [pc, #28]	; (801ffb8 <_read_r+0x20>)
 801ff9c:	4604      	mov	r4, r0
 801ff9e:	4608      	mov	r0, r1
 801ffa0:	4611      	mov	r1, r2
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	602a      	str	r2, [r5, #0]
 801ffa6:	461a      	mov	r2, r3
 801ffa8:	f7e2 f960 	bl	800226c <_read>
 801ffac:	1c43      	adds	r3, r0, #1
 801ffae:	d102      	bne.n	801ffb6 <_read_r+0x1e>
 801ffb0:	682b      	ldr	r3, [r5, #0]
 801ffb2:	b103      	cbz	r3, 801ffb6 <_read_r+0x1e>
 801ffb4:	6023      	str	r3, [r4, #0]
 801ffb6:	bd38      	pop	{r3, r4, r5, pc}
 801ffb8:	20002568 	.word	0x20002568
 801ffbc:	00000000 	.word	0x00000000

0801ffc0 <floor>:
 801ffc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffc4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ffc8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ffcc:	2e13      	cmp	r6, #19
 801ffce:	4602      	mov	r2, r0
 801ffd0:	460b      	mov	r3, r1
 801ffd2:	4607      	mov	r7, r0
 801ffd4:	460c      	mov	r4, r1
 801ffd6:	4605      	mov	r5, r0
 801ffd8:	dc33      	bgt.n	8020042 <floor+0x82>
 801ffda:	2e00      	cmp	r6, #0
 801ffdc:	da14      	bge.n	8020008 <floor+0x48>
 801ffde:	a334      	add	r3, pc, #208	; (adr r3, 80200b0 <floor+0xf0>)
 801ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffe4:	f7e0 f92a 	bl	800023c <__adddf3>
 801ffe8:	2200      	movs	r2, #0
 801ffea:	2300      	movs	r3, #0
 801ffec:	f7e0 fd6c 	bl	8000ac8 <__aeabi_dcmpgt>
 801fff0:	b138      	cbz	r0, 8020002 <floor+0x42>
 801fff2:	2c00      	cmp	r4, #0
 801fff4:	da58      	bge.n	80200a8 <floor+0xe8>
 801fff6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801fffa:	431d      	orrs	r5, r3
 801fffc:	d001      	beq.n	8020002 <floor+0x42>
 801fffe:	4c2e      	ldr	r4, [pc, #184]	; (80200b8 <floor+0xf8>)
 8020000:	2500      	movs	r5, #0
 8020002:	4623      	mov	r3, r4
 8020004:	462f      	mov	r7, r5
 8020006:	e025      	b.n	8020054 <floor+0x94>
 8020008:	4a2c      	ldr	r2, [pc, #176]	; (80200bc <floor+0xfc>)
 802000a:	fa42 f806 	asr.w	r8, r2, r6
 802000e:	ea01 0208 	and.w	r2, r1, r8
 8020012:	4302      	orrs	r2, r0
 8020014:	d01e      	beq.n	8020054 <floor+0x94>
 8020016:	a326      	add	r3, pc, #152	; (adr r3, 80200b0 <floor+0xf0>)
 8020018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802001c:	f7e0 f90e 	bl	800023c <__adddf3>
 8020020:	2200      	movs	r2, #0
 8020022:	2300      	movs	r3, #0
 8020024:	f7e0 fd50 	bl	8000ac8 <__aeabi_dcmpgt>
 8020028:	2800      	cmp	r0, #0
 802002a:	d0ea      	beq.n	8020002 <floor+0x42>
 802002c:	2c00      	cmp	r4, #0
 802002e:	bfbe      	ittt	lt
 8020030:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020034:	fa43 f606 	asrlt.w	r6, r3, r6
 8020038:	19a4      	addlt	r4, r4, r6
 802003a:	ea24 0408 	bic.w	r4, r4, r8
 802003e:	2500      	movs	r5, #0
 8020040:	e7df      	b.n	8020002 <floor+0x42>
 8020042:	2e33      	cmp	r6, #51	; 0x33
 8020044:	dd0a      	ble.n	802005c <floor+0x9c>
 8020046:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802004a:	d103      	bne.n	8020054 <floor+0x94>
 802004c:	f7e0 f8f6 	bl	800023c <__adddf3>
 8020050:	4607      	mov	r7, r0
 8020052:	460b      	mov	r3, r1
 8020054:	4638      	mov	r0, r7
 8020056:	4619      	mov	r1, r3
 8020058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802005c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8020060:	f04f 32ff 	mov.w	r2, #4294967295
 8020064:	fa22 f808 	lsr.w	r8, r2, r8
 8020068:	ea18 0f00 	tst.w	r8, r0
 802006c:	d0f2      	beq.n	8020054 <floor+0x94>
 802006e:	a310      	add	r3, pc, #64	; (adr r3, 80200b0 <floor+0xf0>)
 8020070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020074:	f7e0 f8e2 	bl	800023c <__adddf3>
 8020078:	2200      	movs	r2, #0
 802007a:	2300      	movs	r3, #0
 802007c:	f7e0 fd24 	bl	8000ac8 <__aeabi_dcmpgt>
 8020080:	2800      	cmp	r0, #0
 8020082:	d0be      	beq.n	8020002 <floor+0x42>
 8020084:	2c00      	cmp	r4, #0
 8020086:	da02      	bge.n	802008e <floor+0xce>
 8020088:	2e14      	cmp	r6, #20
 802008a:	d103      	bne.n	8020094 <floor+0xd4>
 802008c:	3401      	adds	r4, #1
 802008e:	ea25 0508 	bic.w	r5, r5, r8
 8020092:	e7b6      	b.n	8020002 <floor+0x42>
 8020094:	2301      	movs	r3, #1
 8020096:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802009a:	fa03 f606 	lsl.w	r6, r3, r6
 802009e:	4435      	add	r5, r6
 80200a0:	42bd      	cmp	r5, r7
 80200a2:	bf38      	it	cc
 80200a4:	18e4      	addcc	r4, r4, r3
 80200a6:	e7f2      	b.n	802008e <floor+0xce>
 80200a8:	2500      	movs	r5, #0
 80200aa:	462c      	mov	r4, r5
 80200ac:	e7a9      	b.n	8020002 <floor+0x42>
 80200ae:	bf00      	nop
 80200b0:	8800759c 	.word	0x8800759c
 80200b4:	7e37e43c 	.word	0x7e37e43c
 80200b8:	bff00000 	.word	0xbff00000
 80200bc:	000fffff 	.word	0x000fffff

080200c0 <_init>:
 80200c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200c2:	bf00      	nop
 80200c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200c6:	bc08      	pop	{r3}
 80200c8:	469e      	mov	lr, r3
 80200ca:	4770      	bx	lr

080200cc <_fini>:
 80200cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200ce:	bf00      	nop
 80200d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200d2:	bc08      	pop	{r3}
 80200d4:	469e      	mov	lr, r3
 80200d6:	4770      	bx	lr
