
ttnmad_noise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aecc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0801b00c  0801b00c  0002b00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801bacc  0801bacc  0002bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801bb8c  0801bb8c  000301b0  2**0
                  CONTENTS
  5 .ARM          00000008  0801bb8c  0801bb8c  0002bb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801bb94  0801bb94  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801bb94  0801bb94  0002bb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801bb98  0801bb98  0002bb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001b0  20000000  0801bb9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002134  200001b0  0801bd4c  000301b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022e4  0801bd4c  000322e4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040486  00000000  00000000  000301da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009a11  00000000  00000000  00070660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003140  00000000  00000000  0007a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d68  00000000  00000000  0007d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027318  00000000  00000000  0007ff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039903  00000000  00000000  000a7238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a6e  00000000  00000000  000e0b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a95a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ce60  00000000  00000000  001a95fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b0 	.word	0x200001b0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801aff4 	.word	0x0801aff4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b4 	.word	0x200001b4
 800017c:	0801aff4 	.word	0x0801aff4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_f2iz>:
 8000924:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000928:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800092c:	d30f      	bcc.n	800094e <__aeabi_f2iz+0x2a>
 800092e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000932:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000936:	d90d      	bls.n	8000954 <__aeabi_f2iz+0x30>
 8000938:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800093c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000940:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000944:	fa23 f002 	lsr.w	r0, r3, r2
 8000948:	bf18      	it	ne
 800094a:	4240      	negne	r0, r0
 800094c:	4770      	bx	lr
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	4770      	bx	lr
 8000954:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000958:	d101      	bne.n	800095e <__aeabi_f2iz+0x3a>
 800095a:	0242      	lsls	r2, r0, #9
 800095c:	d105      	bne.n	800096a <__aeabi_f2iz+0x46>
 800095e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000962:	bf08      	it	eq
 8000964:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000968:	4770      	bx	lr
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	4770      	bx	lr

08000970 <__aeabi_uldivmod>:
 8000970:	b953      	cbnz	r3, 8000988 <__aeabi_uldivmod+0x18>
 8000972:	b94a      	cbnz	r2, 8000988 <__aeabi_uldivmod+0x18>
 8000974:	2900      	cmp	r1, #0
 8000976:	bf08      	it	eq
 8000978:	2800      	cmpeq	r0, #0
 800097a:	bf1c      	itt	ne
 800097c:	f04f 31ff 	movne.w	r1, #4294967295
 8000980:	f04f 30ff 	movne.w	r0, #4294967295
 8000984:	f000 b974 	b.w	8000c70 <__aeabi_idiv0>
 8000988:	f1ad 0c08 	sub.w	ip, sp, #8
 800098c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000990:	f000 f806 	bl	80009a0 <__udivmoddi4>
 8000994:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800099c:	b004      	add	sp, #16
 800099e:	4770      	bx	lr

080009a0 <__udivmoddi4>:
 80009a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a4:	9e08      	ldr	r6, [sp, #32]
 80009a6:	460d      	mov	r5, r1
 80009a8:	4604      	mov	r4, r0
 80009aa:	4688      	mov	r8, r1
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d14d      	bne.n	8000a4c <__udivmoddi4+0xac>
 80009b0:	428a      	cmp	r2, r1
 80009b2:	4694      	mov	ip, r2
 80009b4:	d968      	bls.n	8000a88 <__udivmoddi4+0xe8>
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	b152      	cbz	r2, 80009d2 <__udivmoddi4+0x32>
 80009bc:	fa01 f302 	lsl.w	r3, r1, r2
 80009c0:	f1c2 0120 	rsb	r1, r2, #32
 80009c4:	fa20 f101 	lsr.w	r1, r0, r1
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	ea41 0803 	orr.w	r8, r1, r3
 80009d0:	4094      	lsls	r4, r2
 80009d2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80009d6:	0c21      	lsrs	r1, r4, #16
 80009d8:	fbb8 fef5 	udiv	lr, r8, r5
 80009dc:	fa1f f78c 	uxth.w	r7, ip
 80009e0:	fb05 831e 	mls	r3, r5, lr, r8
 80009e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009e8:	fb0e f107 	mul.w	r1, lr, r7
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d90b      	bls.n	8000a08 <__udivmoddi4+0x68>
 80009f0:	eb1c 0303 	adds.w	r3, ip, r3
 80009f4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80009f8:	f080 811e 	bcs.w	8000c38 <__udivmoddi4+0x298>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	f240 811b 	bls.w	8000c38 <__udivmoddi4+0x298>
 8000a02:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000a10:	fb05 3310 	mls	r3, r5, r0, r3
 8000a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a18:	fb00 f707 	mul.w	r7, r0, r7
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x96>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a28:	f080 8108 	bcs.w	8000c3c <__udivmoddi4+0x29c>
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	f240 8105 	bls.w	8000c3c <__udivmoddi4+0x29c>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	1be4      	subs	r4, r4, r7
 8000a38:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	b11e      	cbz	r6, 8000a48 <__udivmoddi4+0xa8>
 8000a40:	40d4      	lsrs	r4, r2
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c6 4300 	strd	r4, r3, [r6]
 8000a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0xc2>
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	f000 80ee 	beq.w	8000c32 <__udivmoddi4+0x292>
 8000a56:	2100      	movs	r1, #0
 8000a58:	e9c6 0500 	strd	r0, r5, [r6]
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a62:	fab3 f183 	clz	r1, r3
 8000a66:	2900      	cmp	r1, #0
 8000a68:	d14a      	bne.n	8000b00 <__udivmoddi4+0x160>
 8000a6a:	42ab      	cmp	r3, r5
 8000a6c:	d302      	bcc.n	8000a74 <__udivmoddi4+0xd4>
 8000a6e:	4282      	cmp	r2, r0
 8000a70:	f200 80f9 	bhi.w	8000c66 <__udivmoddi4+0x2c6>
 8000a74:	1a84      	subs	r4, r0, r2
 8000a76:	eb65 0303 	sbc.w	r3, r5, r3
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d0e2      	beq.n	8000a48 <__udivmoddi4+0xa8>
 8000a82:	e9c6 4800 	strd	r4, r8, [r6]
 8000a86:	e7df      	b.n	8000a48 <__udivmoddi4+0xa8>
 8000a88:	b902      	cbnz	r2, 8000a8c <__udivmoddi4+0xec>
 8000a8a:	deff      	udf	#255	; 0xff
 8000a8c:	fab2 f282 	clz	r2, r2
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	f040 8091 	bne.w	8000bb8 <__udivmoddi4+0x218>
 8000a96:	eba1 050c 	sub.w	r5, r1, ip
 8000a9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9e:	fa1f fe8c 	uxth.w	lr, ip
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000aa8:	fb07 5013 	mls	r0, r7, r3, r5
 8000aac:	0c25      	lsrs	r5, r4, #16
 8000aae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ab2:	fb0e f003 	mul.w	r0, lr, r3
 8000ab6:	42a8      	cmp	r0, r5
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x12c>
 8000aba:	eb1c 0505 	adds.w	r5, ip, r5
 8000abe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac2:	d202      	bcs.n	8000aca <__udivmoddi4+0x12a>
 8000ac4:	42a8      	cmp	r0, r5
 8000ac6:	f200 80cb 	bhi.w	8000c60 <__udivmoddi4+0x2c0>
 8000aca:	4643      	mov	r3, r8
 8000acc:	1a2d      	subs	r5, r5, r0
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ad4:	fb07 5510 	mls	r5, r7, r0, r5
 8000ad8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000adc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x156>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000aec:	d202      	bcs.n	8000af4 <__udivmoddi4+0x154>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	f200 80bb 	bhi.w	8000c6a <__udivmoddi4+0x2ca>
 8000af4:	4628      	mov	r0, r5
 8000af6:	eba4 040e 	sub.w	r4, r4, lr
 8000afa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000afe:	e79e      	b.n	8000a3e <__udivmoddi4+0x9e>
 8000b00:	f1c1 0720 	rsb	r7, r1, #32
 8000b04:	408b      	lsls	r3, r1
 8000b06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b12:	fa05 f301 	lsl.w	r3, r5, r1
 8000b16:	431c      	orrs	r4, r3
 8000b18:	40fd      	lsrs	r5, r7
 8000b1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b1e:	fa00 f301 	lsl.w	r3, r0, r1
 8000b22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b26:	0c20      	lsrs	r0, r4, #16
 8000b28:	fa1f fe8c 	uxth.w	lr, ip
 8000b2c:	fb09 5518 	mls	r5, r9, r8, r5
 8000b30:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000b34:	fb08 f00e 	mul.w	r0, r8, lr
 8000b38:	42a8      	cmp	r0, r5
 8000b3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b3e:	d90b      	bls.n	8000b58 <__udivmoddi4+0x1b8>
 8000b40:	eb1c 0505 	adds.w	r5, ip, r5
 8000b44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b48:	f080 8088 	bcs.w	8000c5c <__udivmoddi4+0x2bc>
 8000b4c:	42a8      	cmp	r0, r5
 8000b4e:	f240 8085 	bls.w	8000c5c <__udivmoddi4+0x2bc>
 8000b52:	f1a8 0802 	sub.w	r8, r8, #2
 8000b56:	4465      	add	r5, ip
 8000b58:	1a2d      	subs	r5, r5, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000b60:	fb09 5510 	mls	r5, r9, r0, r5
 8000b64:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000b68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b6c:	45ae      	cmp	lr, r5
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x1e2>
 8000b70:	eb1c 0505 	adds.w	r5, ip, r5
 8000b74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b78:	d26c      	bcs.n	8000c54 <__udivmoddi4+0x2b4>
 8000b7a:	45ae      	cmp	lr, r5
 8000b7c:	d96a      	bls.n	8000c54 <__udivmoddi4+0x2b4>
 8000b7e:	3802      	subs	r0, #2
 8000b80:	4465      	add	r5, ip
 8000b82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b86:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8a:	eba5 050e 	sub.w	r5, r5, lr
 8000b8e:	42a5      	cmp	r5, r4
 8000b90:	46c8      	mov	r8, r9
 8000b92:	46a6      	mov	lr, r4
 8000b94:	d356      	bcc.n	8000c44 <__udivmoddi4+0x2a4>
 8000b96:	d053      	beq.n	8000c40 <__udivmoddi4+0x2a0>
 8000b98:	b15e      	cbz	r6, 8000bb2 <__udivmoddi4+0x212>
 8000b9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000b9e:	eb65 050e 	sbc.w	r5, r5, lr
 8000ba2:	fa05 f707 	lsl.w	r7, r5, r7
 8000ba6:	fa22 f301 	lsr.w	r3, r2, r1
 8000baa:	40cd      	lsrs	r5, r1
 8000bac:	431f      	orrs	r7, r3
 8000bae:	e9c6 7500 	strd	r7, r5, [r6]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	f1c2 0320 	rsb	r3, r2, #32
 8000bbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	fa25 f303 	lsr.w	r3, r5, r3
 8000bc8:	4095      	lsls	r5, r2
 8000bca:	430d      	orrs	r5, r1
 8000bcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd0:	fa1f fe8c 	uxth.w	lr, ip
 8000bd4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000bd8:	fb07 3011 	mls	r0, r7, r1, r3
 8000bdc:	0c2b      	lsrs	r3, r5, #16
 8000bde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000be2:	fb01 f00e 	mul.w	r0, r1, lr
 8000be6:	4298      	cmp	r0, r3
 8000be8:	fa04 f402 	lsl.w	r4, r4, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x260>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000bf6:	d22f      	bcs.n	8000c58 <__udivmoddi4+0x2b8>
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	d92d      	bls.n	8000c58 <__udivmoddi4+0x2b8>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	b2ad      	uxth	r5, r5
 8000c04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c08:	fb07 3310 	mls	r3, r7, r0, r3
 8000c0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c10:	fb00 f30e 	mul.w	r3, r0, lr
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x28a>
 8000c18:	eb1c 0505 	adds.w	r5, ip, r5
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c20:	d216      	bcs.n	8000c50 <__udivmoddi4+0x2b0>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d914      	bls.n	8000c50 <__udivmoddi4+0x2b0>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4465      	add	r5, ip
 8000c2a:	1aed      	subs	r5, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e738      	b.n	8000aa4 <__udivmoddi4+0x104>
 8000c32:	4631      	mov	r1, r6
 8000c34:	4630      	mov	r0, r6
 8000c36:	e707      	b.n	8000a48 <__udivmoddi4+0xa8>
 8000c38:	4686      	mov	lr, r0
 8000c3a:	e6e5      	b.n	8000a08 <__udivmoddi4+0x68>
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	e6fa      	b.n	8000a36 <__udivmoddi4+0x96>
 8000c40:	454b      	cmp	r3, r9
 8000c42:	d2a9      	bcs.n	8000b98 <__udivmoddi4+0x1f8>
 8000c44:	ebb9 0802 	subs.w	r8, r9, r2
 8000c48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	e7a3      	b.n	8000b98 <__udivmoddi4+0x1f8>
 8000c50:	4640      	mov	r0, r8
 8000c52:	e7ea      	b.n	8000c2a <__udivmoddi4+0x28a>
 8000c54:	4620      	mov	r0, r4
 8000c56:	e794      	b.n	8000b82 <__udivmoddi4+0x1e2>
 8000c58:	4641      	mov	r1, r8
 8000c5a:	e7d1      	b.n	8000c00 <__udivmoddi4+0x260>
 8000c5c:	46d0      	mov	r8, sl
 8000c5e:	e77b      	b.n	8000b58 <__udivmoddi4+0x1b8>
 8000c60:	3b02      	subs	r3, #2
 8000c62:	4465      	add	r5, ip
 8000c64:	e732      	b.n	8000acc <__udivmoddi4+0x12c>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e709      	b.n	8000a7e <__udivmoddi4+0xde>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	e742      	b.n	8000af6 <__udivmoddi4+0x156>

08000c70 <__aeabi_idiv0>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cba:	4013      	ands	r3, r2
 8000cbc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <MX_ADC_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cd8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_ADC_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d36:	2207      	movs	r2, #7
 8000d38:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d4a:	f001 fe5f 	bl	8002a0c <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000d54:	f000 fc14 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001cc 	.word	0x200001cc
 8000d60:	40012400 	.word	0x40012400

08000d64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <HAL_ADC_MspInit+0x24>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d103      	bne.n	8000d7e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d7a:	f7ff ff7b 	bl	8000c74 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40012400 	.word	0x40012400

08000d8c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_ADC_MspDeInit+0x24>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d103      	bne.n	8000da6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000d9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000da2:	f7ff ff7f 	bl	8000ca4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40012400 	.word	0x40012400

08000db4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <SYS_InitMeasurement+0x14>)
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <SYS_InitMeasurement+0x18>)
 8000dbc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200001cc 	.word	0x200001cc
 8000dcc:	40012400 	.word	0x40012400

08000dd0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000dde:	f000 f869 	bl	8000eb4 <SYS_GetBatteryLevel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000de6:	482d      	ldr	r0, [pc, #180]	; (8000e9c <SYS_GetTemperatureLevel+0xcc>)
 8000de8:	f000 f898 	bl	8000f1c <ADC_ReadChannels>
 8000dec:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <SYS_GetTemperatureLevel+0xd0>)
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d026      	beq.n	8000e48 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <SYS_GetTemperatureLevel+0xd0>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d01c      	beq.n	8000e40 <SYS_GetTemperatureLevel+0x70>
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <SYS_GetTemperatureLevel+0xd8>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2264      	movs	r2, #100	; 0x64
 8000e22:	fb03 f202 	mul.w	r2, r3, r2
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <SYS_GetTemperatureLevel+0xd0>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	1acb      	subs	r3, r1, r3
 8000e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	331e      	adds	r3, #30
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	e001      	b.n	8000e44 <SYS_GetTemperatureLevel+0x74>
 8000e40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e44:	803b      	strh	r3, [r7, #0]
 8000e46:	e01d      	b.n	8000e84 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	fb03 f202 	mul.w	r2, r3, r2
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <SYS_GetTemperatureLevel+0xdc>)
 8000e52:	fba3 1302 	umull	r1, r3, r3, r2
 8000e56:	1ad2      	subs	r2, r2, r3
 8000e58:	0852      	lsrs	r2, r2, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	0adb      	lsrs	r3, r3, #11
 8000e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000e6a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <SYS_GetTemperatureLevel+0xe0>)
 8000e70:	fb82 1203 	smull	r1, r2, r2, r3
 8000e74:	1292      	asrs	r2, r2, #10
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	331e      	adds	r3, #30
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000e84:	883b      	ldrh	r3, [r7, #0]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	b0001000 	.word	0xb0001000
 8000ea0:	1fff75c8 	.word	0x1fff75c8
 8000ea4:	1fff75a8 	.word	0x1fff75a8
 8000ea8:	09ee009f 	.word	0x09ee009f
 8000eac:	00100101 	.word	0x00100101
 8000eb0:	68db8bad 	.word	0x68db8bad

08000eb4 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000ec2:	4813      	ldr	r0, [pc, #76]	; (8000f10 <SYS_GetBatteryLevel+0x5c>)
 8000ec4:	f000 f82a 	bl	8000f1c <ADC_ReadChannels>
 8000ec8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	e016      	b.n	8000f04 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <SYS_GetBatteryLevel+0x60>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00b      	beq.n	8000efa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <SYS_GetBatteryLevel+0x60>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000eec:	fb03 f202 	mul.w	r2, r3, r2
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	e004      	b.n	8000f04 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <SYS_GetBatteryLevel+0x64>)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	b4002000 	.word	0xb4002000
 8000f14:	1fff75aa 	.word	0x1fff75aa
 8000f18:	004c08d8 	.word	0x004c08d8

08000f1c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000f34:	f7ff fec8 	bl	8000cc8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f3a:	f002 fb96 	bl	800366a <HAL_ADCEx_Calibration_Start>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000f44:	f000 fb1c 	bl	8001580 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f5c:	f002 f8a2 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000f66:	f000 fb0b 	bl	8001580 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f6c:	f001 ff7e 	bl	8002e6c <HAL_ADC_Start>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000f76:	f000 fb03 	bl	8001580 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f80:	f001 ffec 	bl	8002f5c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f86:	f001 ffb7 	bl	8002ef8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f8c:	f002 f87d 	bl	800308a <HAL_ADC_GetValue>
 8000f90:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f94:	f001 feee 	bl	8002d74 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000f98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001cc 	.word	0x200001cc

08000fa8 <LL_AHB1_GRP1_EnableClock>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fdc:	2004      	movs	r0, #4
 8000fde:	f7ff ffe3 	bl	8000fa8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ffe0 	bl	8000fa8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2102      	movs	r1, #2
 8000fec:	200b      	movs	r0, #11
 8000fee:	f002 fce2 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ff2:	200b      	movs	r0, #11
 8000ff4:	f002 fcf9 	bl	80039ea <HAL_NVIC_EnableIRQ>

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001008:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800100c:	d101      	bne.n	8001012 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001012:	2300      	movs	r3, #0
#endif
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	58004000 	.word	0x58004000

08001020 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001038:	4b56      	ldr	r3, [pc, #344]	; (8001194 <FLASH_IF_Write+0x174>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0299      	lsls	r1, r3, #10
 800103e:	4b56      	ldr	r3, [pc, #344]	; (8001198 <FLASH_IF_Write+0x178>)
 8001040:	400b      	ands	r3, r1
 8001042:	fbb2 f1f3 	udiv	r1, r2, r3
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	0adb      	lsrs	r3, r3, #11
 800104e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800105a:	3b01      	subs	r3, #1
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <FLASH_IF_Write+0x174>)
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	0291      	lsls	r1, r2, #10
 8001062:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <FLASH_IF_Write+0x178>)
 8001064:	400a      	ands	r2, r1
 8001066:	fbb3 f1f2 	udiv	r1, r3, r2
 800106a:	fb01 f202 	mul.w	r2, r1, r2
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	0adb      	lsrs	r3, r3, #11
 8001072:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <FLASH_IF_Write+0x7a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <FLASH_IF_Write+0x7a>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800109a:	f06f 0304 	mvn.w	r3, #4
 800109e:	e074      	b.n	800118a <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <FLASH_IF_Write+0x17c>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da02      	bge.n	80010ae <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80010a8:	f06f 0303 	mvn.w	r3, #3
 80010ac:	e06d      	b.n	800118a <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d005      	beq.n	80010c2 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010bc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e05b      	b.n	8001180 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f8f8 	bl	80012c2 <FLASH_IF_IsEmpty>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d037      	beq.n	8001148 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80010de:	f06f 0304 	mvn.w	r3, #4
 80010e2:	e052      	b.n	800118a <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f0:	4619      	mov	r1, r3
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f017 ff7a 	bl	8018fec <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	6a39      	ldr	r1, [r7, #32]
 8001104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001106:	b292      	uxth	r2, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f017 ff6f 	bl	8018fec <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800110e:	2200      	movs	r2, #0
 8001110:	2101      	movs	r1, #1
 8001112:	69f8      	ldr	r0, [r7, #28]
 8001114:	f000 f865 	bl	80011e2 <FLASH_IF_EraseByPages>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800111e:	f06f 0301 	mvn.w	r3, #1
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001124:	e030      	b.n	8001188 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800112c:	02db      	lsls	r3, r3, #11
 800112e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f88a 	bl	800124e <FLASH_IF_Write_Buffer>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d010      	beq.n	8001162 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001140:	f06f 0302 	mvn.w	r3, #2
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001146:	e01f      	b.n	8001188 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001150:	f000 f87d 	bl	800124e <FLASH_IF_Write_Buffer>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800115a:	f06f 0302 	mvn.w	r3, #2
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001160:	e012      	b.n	8001188 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	4413      	add	r3, r2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 800116a:	6a3a      	ldr	r2, [r7, #32]
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	4413      	add	r3, r2
 8001170:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	d99f      	bls.n	80010c8 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800118a:	4618      	mov	r0, r3
 800118c:	3730      	adds	r7, #48	; 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	1fff75e0 	.word	0x1fff75e0
 8001198:	03fffc00 	.word	0x03fffc00
 800119c:	58004000 	.word	0x58004000

080011a0 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80011ac:	e00b      	b.n	80011c6 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80011ae:	bf00      	nop
 80011b0:	f7ff ff24 	bl	8000ffc <LL_FLASH_IsActiveFlag_OperationSuspended>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1fa      	bne.n	80011b0 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80011ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	2001      	movs	r0, #1
 80011c2:	f003 f819 	bl	80041f8 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d0:	4299      	cmp	r1, r3
 80011d2:	bf08      	it	eq
 80011d4:	4290      	cmpeq	r0, r2
 80011d6:	d1ea      	bne.n	80011ae <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80011d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b08a      	sub	sp, #40	; 0x28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	460b      	mov	r3, r1
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4618      	mov	r0, r3
 8001208:	f003 f994 	bl	8004534 <HAL_FLASHEx_Erase_IT>
 800120c:	4603      	mov	r3, r0
 800120e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001212:	e00a      	b.n	800122a <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001214:	f107 0214 	add.w	r2, r7, #20
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f930 	bl	8004484 <HAL_FLASHEx_Erase>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800122a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122e:	2b00      	cmp	r3, #0
 8001230:	d008      	beq.n	8001244 <FLASH_IF_EraseByPages+0x62>
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001236:	2b02      	cmp	r3, #2
 8001238:	d101      	bne.n	800123e <FLASH_IF_EraseByPages+0x5c>
 800123a:	2301      	movs	r3, #1
 800123c:	e003      	b.n	8001246 <FLASH_IF_EraseByPages+0x64>
 800123e:	f06f 0301 	mvn.w	r3, #1
 8001242:	e000      	b.n	8001246 <FLASH_IF_EraseByPages+0x64>
 8001244:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b08a      	sub	sp, #40	; 0x28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e020      	b.n	80012aa <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2208      	movs	r2, #8
 800126e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001270:	4618      	mov	r0, r3
 8001272:	f017 febb 	bl	8018fec <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800127a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127e:	bf08      	it	eq
 8001280:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001284:	d005      	beq.n	8001292 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001286:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff88 	bl	80011a0 <FLASH_IF_Write64>
 8001290:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3308      	adds	r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3308      	adds	r3, #8
 800129c:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d108      	bne.n	80012b6 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3d9      	bcc.n	8001268 <FLASH_IF_Write_Buffer+0x1a>
 80012b4:	e000      	b.n	80012b8 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80012b6:	bf00      	nop
    }
  }

  return status;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012cc:	e00a      	b.n	80012e4 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d001      	beq.n	80012de <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 80012da:	2301      	movs	r3, #1
 80012dc:	e039      	b.n	8001352 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ef      	bne.n	80012ce <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	e010      	b.n	800131a <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f103 0208 	add.w	r2, r3, #8
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	bf08      	it	eq
 800130a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800130e:	d001      	beq.n	8001314 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001310:	2301      	movs	r3, #1
 8001312:	e01e      	b.n	8001352 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3301      	adds	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3e9      	bcc.n	80012f8 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001332:	e00a      	b.n	800134a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2bff      	cmp	r3, #255	; 0xff
 800133e:	d001      	beq.n	8001344 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001340:	2301      	movs	r3, #1
 8001342:	e006      	b.n	8001352 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3b01      	subs	r3, #1
 8001348:	603b      	str	r3, [r7, #0]
  while (size != 0)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f1      	bne.n	8001334 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001350:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <LL_AHB2_GRP1_EnableClock>:
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001380:	68fb      	ldr	r3, [r7, #12]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	2002      	movs	r0, #2
 80013a2:	f7ff ffdb 	bl	800135c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff ffd8 	bl	800135c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ac:	2080      	movs	r0, #128	; 0x80
 80013ae:	f7ff ffd5 	bl	800135c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	2004      	movs	r0, #4
 80013b4:	f7ff ffd2 	bl	800135c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	482c      	ldr	r0, [pc, #176]	; (8001470 <MX_GPIO_Init+0xe4>)
 80013c0:	f003 fbaa 	bl	8004b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ca:	482a      	ldr	r0, [pc, #168]	; (8001474 <MX_GPIO_Init+0xe8>)
 80013cc:	f003 fba4 	bl	8004b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80013d0:	23fd      	movs	r3, #253	; 0xfd
 80013d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	2303      	movs	r3, #3
 80013d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4823      	ldr	r0, [pc, #140]	; (8001470 <MX_GPIO_Init+0xe4>)
 80013e2:	f003 f96b 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin;
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_CTRL1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_GPIO_Init+0xe4>)
 80013fe:	f003 f95d 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001402:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001406:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001408:	2303      	movs	r3, #3
 800140a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f003 f950 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800141c:	2308      	movs	r3, #8
 800141e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <MX_GPIO_Init+0xec>)
 800142e:	f003 f945 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FREQ_HIGH_Pin;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(FREQ_HIGH_GPIO_Port, &GPIO_InitStruct);
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <MX_GPIO_Init+0xe4>)
 8001446:	f003 f939 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_CTRL2_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_CTRL2_GPIO_Port, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_GPIO_Init+0xe8>)
 8001462:	f003 f92b 	bl	80046bc <HAL_GPIO_Init>

}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	48000400 	.word	0x48000400
 8001474:	48000800 	.word	0x48000800
 8001478:	48001c00 	.word	0x48001c00

0800147c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148c:	f023 0218 	bic.w	r2, r3, #24
 8001490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4313      	orrs	r3, r2
 8001498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f001 f8c1 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 f80d 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f7ff ff6b 	bl	800138c <MX_GPIO_Init>
  MX_RTC_Init();
 80014b6:	f000 f891 	bl	80015dc <MX_RTC_Init>
  MX_DMA_Init();
 80014ba:	f7ff fd8d 	bl	8000fd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014be:	f000 fe6f 	bl	80021a0 <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 80014c2:	f008 f8a5 	bl	8009610 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80014c6:	f008 f8ab 	bl	8009620 <MX_LoRaWAN_Process>
 80014ca:	e7fc      	b.n	80014c6 <main+0x20>

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09a      	sub	sp, #104	; 0x68
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2248      	movs	r2, #72	; 0x48
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f019 f872 	bl	801a5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f2:	f003 fb29 	bl	8004b48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ffc0 	bl	800147c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <SystemClock_Config+0xb0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <SystemClock_Config+0xb0>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <SystemClock_Config+0xb0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001518:	2324      	movs	r3, #36	; 0x24
 800151a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800151c:	2381      	movs	r3, #129	; 0x81
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001524:	2300      	movs	r3, #0
 8001526:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001528:	23b0      	movs	r3, #176	; 0xb0
 800152a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fe53 	bl	80051e0 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001540:	f000 f81e 	bl	8001580 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001544:	234f      	movs	r3, #79	; 0x4f
 8001546:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f9d8 	bl	8005918 <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800156e:	f000 f807 	bl	8001580 <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3768      	adds	r7, #104	; 0x68
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	58000400 	.word	0x58000400

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>

0800158a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_APB1_GRP1_EnableClock>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4313      	orrs	r3, r2
 80015c0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	222c      	movs	r2, #44	; 0x2c
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f018 ffeb 	bl	801a5c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_RTC_Init+0x9c>)
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <MX_RTC_Init+0xa0>)
 80015f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <MX_RTC_Init+0x9c>)
 80015f6:	221f      	movs	r2, #31
 80015f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_RTC_Init+0x9c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_RTC_Init+0x9c>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_RTC_Init+0x9c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_RTC_Init+0x9c>)
 800160e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001612:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_RTC_Init+0x9c>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_RTC_Init+0x9c>)
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <MX_RTC_Init+0x9c>)
 8001624:	f004 fe34 	bl	8006290 <HAL_RTC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800162e:	f7ff ffa7 	bl	8001580 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001632:	4811      	ldr	r0, [pc, #68]	; (8001678 <MX_RTC_Init+0x9c>)
 8001634:	f005 f922 	bl	800687c <HAL_RTCEx_SetSSRU_IT>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800163e:	f7ff ff9f 	bl	8001580 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800164e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001652:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_RTC_Init+0x9c>)
 8001662:	f004 fe8f 	bl	8006384 <HAL_RTC_SetAlarm_IT>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800166c:	f7ff ff88 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	; 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000230 	.word	0x20000230
 800167c:	40002800 	.word	0x40002800

08001680 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b090      	sub	sp, #64	; 0x40
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2238      	movs	r2, #56	; 0x38
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f018 ff97 	bl	801a5c4 <memset>
  if(rtcHandle->Instance==RTC)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <HAL_RTC_MspInit+0x74>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d125      	bne.n	80016ec <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 fcd3 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016bc:	f7ff ff60 	bl	8001580 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016c0:	f7ff ff63 	bl	800158a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016c8:	f7ff ff6f 	bl	80015aa <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2002      	movs	r0, #2
 80016d2:	f002 f970 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f002 f987 	bl	80039ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	202a      	movs	r0, #42	; 0x2a
 80016e2:	f002 f968 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016e6:	202a      	movs	r0, #42	; 0x2a
 80016e8:	f002 f97f 	bl	80039ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3740      	adds	r7, #64	; 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40002800 	.word	0x40002800

080016f8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80016fe:	2201      	movs	r2, #1
 8001700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	58000400 	.word	0x58000400

08001710 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800172c:	f000 ffa0 	bl	8002670 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001730:	f7ff ffe2 	bl	80016f8 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001734:	2001      	movs	r0, #1
 8001736:	f003 fa99 	bl	8004c6c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001742:	f000 ffa3 	bl	800268c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001746:	f000 fec9 	bl	80024dc <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001752:	f000 ff8d 	bl	8002670 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001756:	2101      	movs	r1, #1
 8001758:	2000      	movs	r0, #0
 800175a:	f003 fa03 	bl	8004b64 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001766:	f000 ff91 	bl	800268c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177e:	e7fe      	b.n	800177e <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <HardFault_Handler+0x4>

08001786 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <BusFault_Handler+0x4>

08001792 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <UsageFault_Handler+0x4>

08001798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80017ce:	f005 f891 	bl	80068f4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000230 	.word	0x20000230

080017dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Channel1_IRQHandler+0x10>)
 80017e2:	f002 fb99 	bl	8003f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000030c 	.word	0x2000030c

080017f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <USART2_IRQHandler+0x10>)
 80017f6:	f005 fedd 	bl	80075b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000027c 	.word	0x2000027c

08001804 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <RTC_Alarm_IRQHandler+0x10>)
 800180a:	f004 ff23 	bl	8006654 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000230 	.word	0x20000230

08001818 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <SUBGHZ_Radio_IRQHandler+0x10>)
 800181e:	f005 fbd1 	bl	8006fc4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000268 	.word	0x20000268

0800182c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800183a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_SUBGHZ_Init+0x20>)
 8001862:	2208      	movs	r2, #8
 8001864:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_SUBGHZ_Init+0x20>)
 8001868:	f005 f930 	bl	8006acc <HAL_SUBGHZ_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001872:	f7ff fe85 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000268 	.word	0x20000268

08001880 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff ffcf 	bl	800182c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f002 f88f 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f002 f8a6 	bl	80039ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80018b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <LL_FLASH_GetUDN+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	1fff7580 	.word	0x1fff7580

080018e0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <LL_FLASH_GetDeviceID+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	1fff7584 	.word	0x1fff7584

080018f8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <LL_FLASH_GetSTCompanyID+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0a1b      	lsrs	r3, r3, #8
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	1fff7584 	.word	0x1fff7584

08001910 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ffc6 	bl	80018a6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800191a:	f018 f8f9 	bl	8019b10 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <SystemApp_Init+0x48>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001924:	f000 f970 	bl	8001c08 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001928:	f018 fb82 	bl	801a030 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <SystemApp_Init+0x4c>)
 800192e:	f018 fc2d 	bl	801a18c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <SystemApp_Init+0x50>)
 8001934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001938:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800193a:	2002      	movs	r0, #2
 800193c:	f018 fc34 	bl	801a1a8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001940:	f7ff fa38 	bl	8000db4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001944:	f000 f99c 	bl	8001c80 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001948:	f017 faaa 	bl	8018ea0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800194c:	2101      	movs	r1, #1
 800194e:	2001      	movs	r0, #1
 8001950:	f017 fae6 	bl	8018f20 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000274 	.word	0x20000274
 800195c:	08001b29 	.word	0x08001b29
 8001960:	58004000 	.word	0x58004000

08001964 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001968:	f017 fb0a 	bl	8018f80 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800197a:	f7ff fa9b 	bl	8000eb4 <SYS_GetBatteryLevel>
 800197e:	4603      	mov	r3, r0
 8001980:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001988:	4293      	cmp	r3, r2
 800198a:	d902      	bls.n	8001992 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 800198c:	23fe      	movs	r3, #254	; 0xfe
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	e014      	b.n	80019bc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001998:	d202      	bcs.n	80019a0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	e00d      	b.n	80019bc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80019a6:	461a      	mov	r2, r3
 80019a8:	4613      	mov	r3, r2
 80019aa:	01db      	lsls	r3, r3, #7
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <GetBatteryLevel+0x58>)
 80019b4:	fba3 2302 	umull	r2, r3, r3, r2
 80019b8:	09db      	lsrs	r3, r3, #7
 80019ba:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019bc:	79fb      	ldrb	r3, [r7, #7]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	1b4e81b5 	.word	0x1b4e81b5

080019cc <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f91f 	bl	8001c1c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe ff9f 	bl	8000924 <__aeabi_f2iz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80019ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80019f6:	b590      	push	{r4, r7, lr}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a02:	f7ff ff63 	bl	80018cc <LL_FLASH_GetUDN>
 8001a06:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0e:	d138      	bne.n	8001a82 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a10:	f000 fe4a 	bl	80026a8 <HAL_GetUIDw0>
 8001a14:	4604      	mov	r4, r0
 8001a16:	f000 fe5b 	bl	80026d0 <HAL_GetUIDw2>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4423      	add	r3, r4
 8001a1e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a20:	f000 fe4c 	bl	80026bc <HAL_GetUIDw1>
 8001a24:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	0e1a      	lsrs	r2, r3, #24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	0c1a      	lsrs	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3306      	adds	r3, #6
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	0a1a      	lsrs	r2, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3305      	adds	r3, #5
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0e1a      	lsrs	r2, r3, #24
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	0c1a      	lsrs	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3302      	adds	r3, #2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	0a1a      	lsrs	r2, r3, #8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001a80:	e031      	b.n	8001ae6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3307      	adds	r3, #7
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	0a1a      	lsrs	r2, r3, #8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3306      	adds	r3, #6
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	0c1a      	lsrs	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3305      	adds	r3, #5
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	0e1a      	lsrs	r2, r3, #24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ab0:	f7ff ff16 	bl	80018e0 <LL_FLASH_GetDeviceID>
 8001ab4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3303      	adds	r3, #3
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ac0:	f7ff ff1a 	bl	80018f8 <LL_FLASH_GetSTCompanyID>
 8001ac4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0a1a      	lsrs	r2, r3, #8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}

08001aee <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001af8:	f7ff fee8 	bl	80018cc <LL_FLASH_GetUDN>
 8001afc:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d10b      	bne.n	8001b1e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b06:	f000 fdcf 	bl	80026a8 <HAL_GetUIDw0>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	f000 fdd6 	bl	80026bc <HAL_GetUIDw1>
 8001b10:	4603      	mov	r3, r0
 8001b12:	405c      	eors	r4, r3
 8001b14:	f000 fddc 	bl	80026d0 <HAL_GetUIDw2>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4063      	eors	r3, r4
 8001b1c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b1e:	687b      	ldr	r3, [r7, #4]

}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}

08001b28 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f017 fb32 	bl	80191a0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <TimestampNow+0x3c>)
 8001b46:	2110      	movs	r1, #16
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f81d 	bl	8001b88 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fb16 	bl	8000180 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0801b00c 	.word	0x0801b00c

08001b68 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f017 f9a6 	bl	8018ec0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f017 f99e 	bl	8018ec0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b88:	b40c      	push	{r2, r3}
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f017 fccf 	bl	8019544 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bb0:	b002      	add	sp, #8
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_GetTick+0x24>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001bda:	f000 f91d 	bl	8001e18 <TIMER_IF_GetTimerValue>
 8001bde:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000274 	.word	0x20000274

08001bf0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f993 	bl	8001f26 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c0c:	f000 fd6a 	bl	80026e4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c10:	f000 fd6e 	bl	80026f0 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001c14:	f000 fd72 	bl	80026fc <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <EnvSensors_Read+0x50>)
 8001c26:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <EnvSensors_Read+0x54>)
 8001c2a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <EnvSensors_Read+0x58>)
 8001c2e:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001c30:	f7ff f8ce 	bl	8000dd0 <SYS_GetTemperatureLevel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	121b      	asrs	r3, r3, #8
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fe1e 	bl	800087c <__aeabi_i2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <EnvSensors_Read+0x5c>)
 8001c5a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <EnvSensors_Read+0x60>)
 8001c60:	611a      	str	r2, [r3, #16]

  return 0;
 8001c62:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	42480000 	.word	0x42480000
 8001c70:	41900000 	.word	0x41900000
 8001c74:	447a0000 	.word	0x447a0000
 8001c78:	003e090d 	.word	0x003e090d
 8001c7c:	000503ab 	.word	0x000503ab

08001c80 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
#else
  int32_t ret = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8001c8a:	687b      	ldr	r3, [r7, #4]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <TIMER_IF_Init+0x5c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f083 0301 	eor.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01b      	beq.n	8001d08 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <TIMER_IF_Init+0x60>)
 8001cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001cd8:	f7ff fc80 	bl	80015dc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001cdc:	f000 f856 	bl	8001d8c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <TIMER_IF_Init+0x60>)
 8001ce6:	f004 fc59 	bl	800659c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <TIMER_IF_Init+0x60>)
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001cf2:	4809      	ldr	r0, [pc, #36]	; (8001d18 <TIMER_IF_Init+0x60>)
 8001cf4:	f004 fd90 	bl	8006818 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f9d3 	bl	80020a4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001cfe:	f000 f85f 	bl	8001dc0 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <TIMER_IF_Init+0x5c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000275 	.word	0x20000275
 8001d18:	20000230 	.word	0x20000230

08001d1c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	222c      	movs	r2, #44	; 0x2c
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f018 fc46 	bl	801a5c4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001d38:	f000 f828 	bl	8001d8c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <TIMER_IF_StartTimer+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d54:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d58:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	2201      	movs	r2, #1
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <TIMER_IF_StartTimer+0x6c>)
 8001d6a:	f004 fb0b 	bl	8006384 <HAL_RTC_SetAlarm_IT>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001d74:	f7ff fc04 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001d78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3738      	adds	r7, #56	; 0x38
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000278 	.word	0x20000278
 8001d88:	20000230 	.word	0x20000230

08001d8c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <TIMER_IF_StopTimer+0x2c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <TIMER_IF_StopTimer+0x30>)
 8001da2:	f004 fbfb 	bl	800659c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <TIMER_IF_StopTimer+0x30>)
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001dae:	79fb      	ldrb	r3, [r7, #7]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40002800 	.word	0x40002800
 8001dbc:	20000230 	.word	0x20000230

08001dc0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001dc4:	f000 f98e 	bl	80020e4 <GetTimerTicks>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <TIMER_IF_SetTimerContext+0x18>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001dce:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <TIMER_IF_SetTimerContext+0x18>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000278 	.word	0x20000278

08001ddc <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <TIMER_IF_GetTimerContext+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000278 	.word	0x20000278

08001df0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001dfa:	f000 f973 	bl	80020e4 <GetTimerTicks>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000278 	.word	0x20000278

08001e18 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <TIMER_IF_GetTimerValue+0x24>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001e2a:	f000 f95b 	bl	80020e4 <GetTimerTicks>
 8001e2e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000275 	.word	0x20000275

08001e40 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001e4e:	687b      	ldr	r3, [r7, #4]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001e5a:	b5b0      	push	{r4, r5, r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e62:	2100      	movs	r1, #0
 8001e64:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	2000      	movs	r0, #0
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	0d95      	lsrs	r5, r2, #22
 8001e70:	0294      	lsls	r4, r2, #10
 8001e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe fd77 	bl	8000970 <__aeabi_uldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4613      	mov	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bdb0      	pop	{r4, r5, r7, pc}

08001e94 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001e94:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	4605      	mov	r5, r0
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f04f 0a00 	mov.w	sl, #0
 8001eb2:	f04f 0b00 	mov.w	fp, #0
 8001eb6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001eba:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001ebe:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001ec2:	4650      	mov	r0, sl
 8001ec4:	4659      	mov	r1, fp
 8001ec6:	1b02      	subs	r2, r0, r4
 8001ec8:	eb61 0305 	sbc.w	r3, r1, r5
 8001ecc:	f04f 0000 	mov.w	r0, #0
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	0099      	lsls	r1, r3, #2
 8001ed6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001eda:	0090      	lsls	r0, r2, #2
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	eb12 0804 	adds.w	r8, r2, r4
 8001ee4:	eb43 0905 	adc.w	r9, r3, r5
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ef4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ef8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001efc:	4690      	mov	r8, r2
 8001efe:	4699      	mov	r9, r3
 8001f00:	4640      	mov	r0, r8
 8001f02:	4649      	mov	r1, r9
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	0a82      	lsrs	r2, r0, #10
 8001f0e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f12:	0a8b      	lsrs	r3, r1, #10
 8001f14:	4613      	mov	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f18:	68fb      	ldr	r3, [r7, #12]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f24:	4770      	bx	lr

08001f26 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff93 	bl	8001e5a <TIMER_IF_Convert_ms2Tick>
 8001f34:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001f36:	f000 f8d5 	bl	80020e4 <GetTimerTicks>
 8001f3a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f3c:	e000      	b.n	8001f40 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001f3e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f40:	f000 f8d0 	bl	80020e4 <GetTimerTicks>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f6      	bhi.n	8001f3e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f62:	f017 ff23 	bl	8019dac <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f76:	f000 f8a5 	bl	80020c4 <TIMER_IF_BkUp_Read_MSBticks>
 8001f7a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f88f 	bl	80020a4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001f8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001f9c:	f000 f8a2 	bl	80020e4 <GetTimerTicks>
 8001fa0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001fa2:	f000 f88f 	bl	80020c4 <TIMER_IF_BkUp_Read_MSBticks>
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	2200      	movs	r2, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	60fa      	str	r2, [r7, #12]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	000b      	movs	r3, r1
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	4605      	mov	r5, r0
 8001fc6:	eb12 0804 	adds.w	r8, r2, r4
 8001fca:	eb43 0905 	adc.w	r9, r3, r5
 8001fce:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001fd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	0a82      	lsrs	r2, r0, #10
 8001fe0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001fe4:	0a8b      	lsrs	r3, r1, #10
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2200      	movs	r2, #0
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001ff8:	f04f 0b00 	mov.w	fp, #0
 8001ffc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff46 	bl	8001e94 <TIMER_IF_Convert_Tick2ms>
 8002008:	4603      	mov	r3, r0
 800200a:	b29a      	uxth	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002012:	4618      	mov	r0, r3
 8002014:	3730      	adds	r7, #48	; 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800201c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	2100      	movs	r1, #0
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800202a:	f004 fc87 	bl	800693c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000230 	.word	0x20000230

0800203c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	2101      	movs	r1, #1
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800204a:	f004 fc77 	bl	800693c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000230 	.word	0x20000230

0800205c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002066:	2100      	movs	r1, #0
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800206a:	f004 fc7f 	bl	800696c <HAL_RTCEx_BKUPRead>
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000230 	.word	0x20000230

08002080 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800208a:	2101      	movs	r1, #1
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800208e:	f004 fc6d 	bl	800696c <HAL_RTCEx_BKUPRead>
 8002092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000230 	.word	0x20000230

080020a4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	2102      	movs	r1, #2
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80020b2:	f004 fc43 	bl	800693c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000230 	.word	0x20000230

080020c4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80020ca:	2102      	movs	r1, #2
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80020ce:	f004 fc4d 	bl	800696c <HAL_RTCEx_BKUPRead>
 80020d2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80020d4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000230 	.word	0x20000230

080020e4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <GetTimerTicks+0x34>)
 80020ec:	f7ff fdd9 	bl	8001ca2 <LL_RTC_TIME_GetSubSecond>
 80020f0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020f2:	e003      	b.n	80020fc <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <GetTimerTicks+0x34>)
 80020f6:	f7ff fdd4 	bl	8001ca2 <LL_RTC_TIME_GetSubSecond>
 80020fa:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020fc:	4806      	ldr	r0, [pc, #24]	; (8002118 <GetTimerTicks+0x34>)
 80020fe:	f7ff fdd0 	bl	8001ca2 <LL_RTC_TIME_GetSubSecond>
 8002102:	4602      	mov	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4293      	cmp	r3, r2
 8002108:	d1f4      	bne.n	80020f4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40002800 	.word	0x40002800

0800211c <LL_AHB2_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800212a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002140:	68fb      	ldr	r3, [r7, #12]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <LL_APB1_GRP1_EnableClock>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <LL_APB1_GRP1_DisableClock>:
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	43db      	mvns	r3, r3
 800218e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002192:	4013      	ands	r3, r2
 8002194:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021a6:	4a23      	ldr	r2, [pc, #140]	; (8002234 <MX_USART2_UART_Init+0x94>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e8:	4811      	ldr	r0, [pc, #68]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021ea:	f005 f8aa 	bl	8007342 <HAL_UART_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021f4:	f7ff f9c4 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f8:	2100      	movs	r1, #0
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <MX_USART2_UART_Init+0x90>)
 80021fc:	f007 f91e 	bl	800943c <HAL_UARTEx_SetTxFifoThreshold>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002206:	f7ff f9bb 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220a:	2100      	movs	r1, #0
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <MX_USART2_UART_Init+0x90>)
 800220e:	f007 f953 	bl	80094b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002218:	f7ff f9b2 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_USART2_UART_Init+0x90>)
 800221e:	f007 f8d5 	bl	80093cc <HAL_UARTEx_DisableFifoMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002228:	f7ff f9aa 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000027c 	.word	0x2000027c
 8002234:	40004400 	.word	0x40004400

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b096      	sub	sp, #88	; 0x58
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2238      	movs	r2, #56	; 0x38
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f018 f9b3 	bl	801a5c4 <memset>
  if(uartHandle->Instance==USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2f      	ldr	r2, [pc, #188]	; (8002320 <HAL_UART_MspInit+0xe8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d156      	bne.n	8002316 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002268:	2302      	movs	r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_UART_MspInit+0xec>)
 800226e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fef1 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002280:	f7ff f97e 	bl	8001580 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002284:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002288:	f7ff ff60 	bl	800214c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	2001      	movs	r0, #1
 800228e:	f7ff ff45 	bl	800211c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002292:	230c      	movs	r3, #12
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a2:	2307      	movs	r3, #7
 80022a4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b0:	f002 fa04 	bl	80046bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_UART_MspInit+0xf4>)
 80022b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022bc:	2214      	movs	r2, #20
 80022be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022c2:	2210      	movs	r2, #16
 80022c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022ea:	480f      	ldr	r0, [pc, #60]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022ec:	f001 fb9a 	bl	8003a24 <HAL_DMA_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80022f6:	f7ff f943 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_UART_MspInit+0xf0>)
 80022fe:	679a      	str	r2, [r3, #120]	; 0x78
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_UART_MspInit+0xf0>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2102      	movs	r1, #2
 800230a:	2025      	movs	r0, #37	; 0x25
 800230c:	f001 fb53 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002310:	2025      	movs	r0, #37	; 0x25
 8002312:	f001 fb6a 	bl	80039ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002316:	bf00      	nop
 8002318:	3758      	adds	r7, #88	; 0x58
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004400 	.word	0x40004400
 8002324:	000c0004 	.word	0x000c0004
 8002328:	2000030c 	.word	0x2000030c
 800232c:	40020008 	.word	0x40020008

08002330 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_UART_MspDeInit+0x3c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d110      	bne.n	8002364 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002342:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002346:	f7ff ff19 	bl	800217c <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800234a:	210c      	movs	r1, #12
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f002 fb14 	bl	800497c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fc0b 	bl	8003b74 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800235e:	2025      	movs	r0, #37	; 0x25
 8002360:	f001 fb51 	bl	8003a06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40004400 	.word	0x40004400

08002370 <LL_APB1_GRP1_ForceReset>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4313      	orrs	r3, r2
 8002386:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <LL_APB1_GRP1_ReleaseReset>:
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a8:	4013      	ands	r3, r2
 80023aa:	638b      	str	r3, [r1, #56]	; 0x38
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <LL_EXTI_EnableIT_0_31+0x24>)
 80023c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80023c6:	4905      	ldr	r1, [pc, #20]	; (80023dc <LL_EXTI_EnableIT_0_31+0x24>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	58000800 	.word	0x58000800

080023e0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <vcom_Init+0x28>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80023ee:	f7fe fdf3 	bl	8000fd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80023f2:	f7ff fed5 	bl	80021a0 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80023f6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80023fa:	f7ff ffdd 	bl	80023b8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80023fe:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000370 	.word	0x20000370

0800240c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002410:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002414:	f7ff ffac 	bl	8002370 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002418:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800241c:	f7ff ffb9 	bl	8002392 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <vcom_DeInit+0x28>)
 8002422:	f7ff ff85 	bl	8002330 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002426:	200f      	movs	r0, #15
 8002428:	f001 faed 	bl	8003a06 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800242c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800242e:	4618      	mov	r0, r3
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000027c 	.word	0x2000027c

08002438 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	461a      	mov	r2, r3
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4804      	ldr	r0, [pc, #16]	; (800245c <vcom_Trace_DMA+0x24>)
 800244c:	f005 f820 	bl	8007490 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002450:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000027c 	.word	0x2000027c

08002460 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <vcom_ReceiveInit+0x70>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800246e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002472:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	e893 0006 	ldmia.w	r3, {r1, r2}
 800247c:	4815      	ldr	r0, [pc, #84]	; (80024d4 <vcom_ReceiveInit+0x74>)
 800247e:	f006 ff18 	bl	80092b2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002482:	bf00      	nop
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <vcom_ReceiveInit+0x74>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002492:	d0f7      	beq.n	8002484 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002494:	bf00      	nop
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <vcom_ReceiveInit+0x74>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d1f7      	bne.n	8002496 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <vcom_ReceiveInit+0x74>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <vcom_ReceiveInit+0x74>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024b4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <vcom_ReceiveInit+0x74>)
 80024b8:	f006 ff56 	bl	8009368 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80024bc:	2201      	movs	r2, #1
 80024be:	4906      	ldr	r1, [pc, #24]	; (80024d8 <vcom_ReceiveInit+0x78>)
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <vcom_ReceiveInit+0x74>)
 80024c2:	f004 ff8f 	bl	80073e4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80024c6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000374 	.word	0x20000374
 80024d4:	2000027c 	.word	0x2000027c
 80024d8:	2000036c 	.word	0x2000036c

080024dc <vcom_Resume>:

void vcom_Resume(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e0:	4808      	ldr	r0, [pc, #32]	; (8002504 <vcom_Resume+0x28>)
 80024e2:	f004 ff2e 	bl	8007342 <HAL_UART_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80024ec:	f7ff f848 	bl	8001580 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <vcom_Resume+0x2c>)
 80024f2:	f001 fa97 	bl	8003a24 <HAL_DMA_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <vcom_Resume+0x24>
  {
    Error_Handler();
 80024fc:	f7ff f840 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000027c 	.word	0x2000027c
 8002508:	2000030c 	.word	0x2000030c

0800250c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a05      	ldr	r2, [pc, #20]	; (8002530 <HAL_UART_TxCpltCallback+0x24>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d103      	bne.n	8002526 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_UART_TxCpltCallback+0x28>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2000      	movs	r0, #0
 8002524:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40004400 	.word	0x40004400
 8002534:	20000370 	.word	0x20000370

08002538 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_UART_RxCpltCallback+0x44>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d113      	bne.n	8002572 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_UART_RxCpltCallback+0x48>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_UART_RxCpltCallback+0x30>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_UART_RxCpltCallback+0x48>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	2101      	movs	r1, #1
 8002564:	4807      	ldr	r0, [pc, #28]	; (8002584 <HAL_UART_RxCpltCallback+0x4c>)
 8002566:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002568:	2201      	movs	r2, #1
 800256a:	4906      	ldr	r1, [pc, #24]	; (8002584 <HAL_UART_RxCpltCallback+0x4c>)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f004 ff39 	bl	80073e4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40004400 	.word	0x40004400
 8002580:	20000374 	.word	0x20000374
 8002584:	2000036c 	.word	0x2000036c

08002588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800258a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800258c:	f7ff fb83 	bl	8001c96 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002592:	490d      	ldr	r1, [pc, #52]	; (80025c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <LoopForever+0xe>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025a8:	4c0a      	ldr	r4, [pc, #40]	; (80025d4 <LoopForever+0x16>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025b6:	f017 ffe1 	bl	801a57c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ba:	f7fe ff74 	bl	80014a6 <main>

080025be <LoopForever>:

LoopForever:
    b LoopForever
 80025be:	e7fe      	b.n	80025be <LoopForever>
  ldr   r0, =_estack
 80025c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80025cc:	0801bb9c 	.word	0x0801bb9c
  ldr r2, =_sbss
 80025d0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80025d4:	200022e4 	.word	0x200022e4

080025d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>
	...

080025dc <LL_DBGMCU_DisableDBGSleepMode>:
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6053      	str	r3, [r2, #4]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	e0042000 	.word	0xe0042000

080025f8 <LL_DBGMCU_DisableDBGStopMode>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002602:	f023 0302 	bic.w	r3, r3, #2
 8002606:	6053      	str	r3, [r2, #4]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e0042000 	.word	0xe0042000

08002614 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	6053      	str	r3, [r2, #4]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	e0042000 	.word	0xe0042000

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263a:	2003      	movs	r0, #3
 800263c:	f001 f9b0 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002640:	f003 fb2e 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 8002644:	4603      	mov	r3, r0
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_Init+0x3c>)
 8002648:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264a:	200f      	movs	r0, #15
 800264c:	f7ff fab2 	bl	8001bb4 <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	71fb      	strb	r3, [r7, #7]
 800265a:	e001      	b.n	8002660 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800265c:	f7ff f887 	bl	800176e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002660:	79fb      	ldrb	r3, [r7, #7]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000000 	.word	0x20000000

08002670 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_SuspendTick+0x18>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_SuspendTick+0x18>)
 800267a:	f023 0302 	bic.w	r3, r3, #2
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_ResumeTick+0x18>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_ResumeTick+0x18>)
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HAL_GetUIDw0+0x10>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	1fff7590 	.word	0x1fff7590

080026bc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_GetUIDw1+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	1fff7594 	.word	0x1fff7594

080026d0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_GetUIDw2+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	1fff7598 	.word	0x1fff7598

080026e4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80026e8:	f7ff ff78 	bl	80025dc <LL_DBGMCU_DisableDBGSleepMode>
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80026f4:	f7ff ff80 	bl	80025f8 <LL_DBGMCU_DisableDBGStopMode>
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002700:	f7ff ff88 	bl	8002614 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2107      	movs	r1, #7
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	401a      	ands	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	431a      	orrs	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2107      	movs	r1, #7
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	210f      	movs	r1, #15
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	f003 010f 	and.w	r1, r3, #15
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	43db      	mvns	r3, r3
 8002878:	401a      	ands	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0219      	lsls	r1, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	400b      	ands	r3, r1
 8002882:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028aa:	f023 0317 	bic.w	r3, r3, #23
 80028ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028d0:	f023 0317 	bic.w	r3, r3, #23
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6093      	str	r3, [r2, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f6:	d101      	bne.n	80028fc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002918:	f023 0317 	bic.w	r3, r3, #23
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800293e:	f023 0317 	bic.w	r3, r3, #23
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_ADC_IsEnabled+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_IsEnabled+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d101      	bne.n	8002990 <LL_ADC_IsDisableOngoing+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <LL_ADC_IsDisableOngoing+0x1a>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ac:	f023 0317 	bic.w	r3, r3, #23
 80029b0:	f043 0204 	orr.w	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029d2:	f023 0317 	bic.w	r3, r3, #23
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d101      	bne.n	8002a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e19e      	b.n	8002d6c <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fe f991 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff44 	bl	80028e2 <LL_ADC_IsInternalRegulatorEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d115      	bne.n	8002a8c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff18 	bl	800289a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a6a:	4b99      	ldr	r3, [pc, #612]	; (8002cd0 <HAL_ADC_Init+0x2c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	4a98      	ldr	r2, [pc, #608]	; (8002cd4 <HAL_ADC_Init+0x2c8>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	3301      	adds	r3, #1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a7e:	e002      	b.n	8002a86 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f9      	bne.n	8002a80 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff26 	bl	80028e2 <LL_ADC_IsInternalRegulatorEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10d      	bne.n	8002ab8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f043 0210 	orr.w	r2, r3, #16
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff93 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002ac2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 8144 	bne.w	8002d5a <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 8140 	bne.w	8002d5a <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff30 	bl	8002954 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 80a7 	bne.w	8002c4a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7e1b      	ldrb	r3, [r3, #24]
 8002b04:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b06:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7e5b      	ldrb	r3, [r3, #25]
 8002b0c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e9b      	ldrb	r3, [r3, #26]
 8002b14:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b16:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b1c:	2a00      	cmp	r2, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_ADC_Init+0x11a>
 8002b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b24:	e000      	b.n	8002b28 <HAL_ADC_Init+0x11c>
 8002b26:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b28:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b2e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da04      	bge.n	8002b42 <HAL_ADC_Init+0x136>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b40:	e001      	b.n	8002b46 <HAL_ADC_Init+0x13a>
 8002b42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002b46:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b4e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b50:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d114      	bne.n	8002b8c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7e9b      	ldrb	r3, [r3, #26]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	e00b      	b.n	8002b8c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002bb2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d111      	bne.n	8002c02 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002bf0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002bf6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b33      	ldr	r3, [pc, #204]	; (8002cd8 <HAL_ADC_Init+0x2cc>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002c1e:	d014      	beq.n	8002c4a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d00f      	beq.n	8002c4a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c32:	d00a      	beq.n	8002c4a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_ADC_Init+0x2d0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c44:	4925      	ldr	r1, [pc, #148]	; (8002cdc <HAL_ADC_Init+0x2d0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	461a      	mov	r2, r3
 8002c54:	2100      	movs	r1, #0
 8002c56:	f7ff fd76 	bl	8002746 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	461a      	mov	r2, r3
 8002c64:	491e      	ldr	r1, [pc, #120]	; (8002ce0 <HAL_ADC_Init+0x2d4>)
 8002c66:	f7ff fd6e 	bl	8002746 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f062 020f 	orn	r2, r2, #15
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
 8002c82:	e042      	b.n	8002d0a <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c8c:	d13d      	bne.n	8002d0a <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e00c      	b.n	8002cae <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d006      	beq.n	8002cb6 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	3301      	adds	r3, #1
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d9ef      	bls.n	8002c94 <HAL_ADC_Init+0x288>
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8002cb6:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d112      	bne.n	8002ce4 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f062 020f 	orn	r2, r2, #15
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cce:	e01c      	b.n	8002d0a <HAL_ADC_Init+0x2fe>
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	053e2d63 	.word	0x053e2d63
 8002cd8:	1ffffc02 	.word	0x1ffffc02
 8002cdc:	40012708 	.word	0x40012708
 8002ce0:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f003 031c 	and.w	r3, r3, #28
 8002cf6:	f06f 020f 	mvn.w	r2, #15
 8002cfa:	fa02 f103 	lsl.w	r1, r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fd36 	bl	8002782 <LL_ADC_GetSamplingTimeCommonChannels>
 8002d16:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d36:	e018      	b.n	8002d6a <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f023 0312 	bic.w	r3, r3, #18
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d58:	e007      	b.n	8002d6a <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002d6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06a      	b.n	8002e5c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f043 0202 	orr.w	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fabe 	bl	8003314 <ADC_ConversionStop>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fb82 	bl	80034ac <ADC_Disable>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fd7f 	bl	80028c0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002dd0:	f023 0303 	bic.w	r3, r3, #3
 8002dd4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f240 329f 	movw	r2, #927	; 0x39f
 8002dde:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68d9      	ldr	r1, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_ADC_DeInit+0xf0>)
 8002dec:	400b      	ands	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002dfe:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0207 	bic.w	r2, r2, #7
 8002e0e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8002e1e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_ADC_DeInit+0xf4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_ADC_DeInit+0xf4>)
 8002e34:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002e38:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd ffa6 	bl	8000d8c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	833e0200 	.word	0x833e0200
 8002e68:	40012708 	.word	0x40012708

08002e6c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fdb5 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d132      	bne.n	8002eea <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Start+0x26>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e02e      	b.n	8002ef0 <HAL_ADC_Start+0x84>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa80 	bl	80033a0 <ADC_Enable>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	221c      	movs	r2, #28
 8002eca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fd5f 	bl	800299c <LL_ADC_REG_StartConversion>
 8002ede:	e006      	b.n	8002eee <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ee8:	e001      	b.n	8002eee <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_Stop+0x16>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e022      	b.n	8002f54 <HAL_ADC_Stop+0x5c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f9fc 	bl	8003314 <ADC_ConversionStop>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d111      	bne.n	8002f4a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fac0 	bl	80034ac <ADC_Disable>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d102      	bne.n	8002f74 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e010      	b.n	8002f96 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e077      	b.n	8003082 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002f92:	2304      	movs	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f96:	f7fe fe17 	bl	8001bc8 <HAL_GetTick>
 8002f9a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002f9c:	e021      	b.n	8002fe2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fa6:	f7fe fe0f 	bl	8001bc8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <HAL_ADC_PollForConversion+0x60>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d112      	bne.n	8002fe2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e04f      	b.n	8003082 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0d6      	beq.n	8002f9e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fbd6 	bl	80027b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d031      	beq.n	8003070 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7e9b      	ldrb	r3, [r3, #26]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d12d      	bne.n	8003070 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b08      	cmp	r3, #8
 8003020:	d126      	bne.n	8003070 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fcde 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d112      	bne.n	8003058 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 020c 	bic.w	r2, r2, #12
 8003040:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	; 0x58
 8003056:	e00b      	b.n	8003070 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7e1b      	ldrb	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	220c      	movs	r2, #12
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x28>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e110      	b.n	80032ee <HAL_ADC_ConfigChannel+0x24a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fc85 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 80f7 	bne.w	80032d4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f000 80b1 	beq.w	8003252 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f8:	d004      	beq.n	8003104 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030fe:	4a7e      	ldr	r2, [pc, #504]	; (80032f8 <HAL_ADC_ConfigChannel+0x254>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d108      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7ff fb82 	bl	8002818 <LL_ADC_REG_SetSequencerChAdd>
 8003114:	e041      	b.n	800319a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	210f      	movs	r1, #15
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_ADC_ConfigChannel+0xa0>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	e011      	b.n	8003168 <HAL_ADC_ConfigChannel+0xc4>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e003      	b.n	8003168 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	6849      	ldr	r1, [r1, #4]
 800316c:	f001 011f 	and.w	r1, r1, #31
 8003170:	408b      	lsls	r3, r1
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	429a      	cmp	r2, r3
 8003186:	d808      	bhi.n	800319a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	f7ff fb1e 	bl	80027d6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f7ff fb5b 	bl	8002862 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f280 8097 	bge.w	80032e4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031b6:	4851      	ldr	r0, [pc, #324]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 80031b8:	f7ff fab8 	bl	800272c <LL_ADC_GetCommonPathInternalCh>
 80031bc:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a4f      	ldr	r2, [pc, #316]	; (8003300 <HAL_ADC_ConfigChannel+0x25c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d120      	bne.n	800320a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11b      	bne.n	800320a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d8:	4619      	mov	r1, r3
 80031da:	4848      	ldr	r0, [pc, #288]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 80031dc:	f7ff fa94 	bl	8002708 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e0:	4b48      	ldr	r3, [pc, #288]	; (8003304 <HAL_ADC_ConfigChannel+0x260>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	4a48      	ldr	r2, [pc, #288]	; (8003308 <HAL_ADC_ConfigChannel+0x264>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031fa:	e002      	b.n	8003202 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f9      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003208:	e06c      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3f      	ldr	r2, [pc, #252]	; (800330c <HAL_ADC_ConfigChannel+0x268>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10c      	bne.n	800322e <HAL_ADC_ConfigChannel+0x18a>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003224:	4619      	mov	r1, r3
 8003226:	4835      	ldr	r0, [pc, #212]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 8003228:	f7ff fa6e 	bl	8002708 <LL_ADC_SetCommonPathInternalCh>
 800322c:	e05a      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a37      	ldr	r2, [pc, #220]	; (8003310 <HAL_ADC_ConfigChannel+0x26c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d155      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d150      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003248:	4619      	mov	r1, r3
 800324a:	482c      	ldr	r0, [pc, #176]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 800324c:	f7ff fa5c 	bl	8002708 <LL_ADC_SetCommonPathInternalCh>
 8003250:	e048      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325a:	d004      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <HAL_ADC_ConfigChannel+0x254>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d107      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7ff fae3 	bl	800283c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	da32      	bge.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800327e:	481f      	ldr	r0, [pc, #124]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 8003280:	f7ff fa54 	bl	800272c <LL_ADC_GetCommonPathInternalCh>
 8003284:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_ADC_ConfigChannel+0x25c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d107      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003296:	4619      	mov	r1, r3
 8003298:	4818      	ldr	r0, [pc, #96]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 800329a:	f7ff fa35 	bl	8002708 <LL_ADC_SetCommonPathInternalCh>
 800329e:	e021      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_ADC_ConfigChannel+0x268>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d107      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b0:	4619      	mov	r1, r3
 80032b2:	4812      	ldr	r0, [pc, #72]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 80032b4:	f7ff fa28 	bl	8002708 <LL_ADC_SetCommonPathInternalCh>
 80032b8:	e014      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a14      	ldr	r2, [pc, #80]	; (8003310 <HAL_ADC_ConfigChannel+0x26c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d10f      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80032ca:	4619      	mov	r1, r3
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 80032ce:	f7ff fa1b 	bl	8002708 <LL_ADC_SetCommonPathInternalCh>
 80032d2:	e007      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80032ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	80000004 	.word	0x80000004
 80032fc:	40012708 	.word	0x40012708
 8003300:	b0001000 	.word	0xb0001000
 8003304:	20000000 	.word	0x20000000
 8003308:	053e2d63 	.word	0x053e2d63
 800330c:	b8004000 	.word	0xb8004000
 8003310:	b4002000 	.word	0xb4002000

08003314 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fb61 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d033      	beq.n	8003394 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fb21 	bl	8002978 <LL_ADC_IsDisableOngoing>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fb3e 	bl	80029c2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003346:	f7fe fc3f 	bl	8001bc8 <HAL_GetTick>
 800334a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800334c:	e01b      	b.n	8003386 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800334e:	f7fe fc3b 	bl	8001bc8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d914      	bls.n	8003386 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1dc      	bne.n	800334e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff facf 	bl	8002954 <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d169      	bne.n	8003490 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <ADC_Enable+0xfc>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e055      	b.n	8003492 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fa8c 	bl	8002908 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033f0:	482b      	ldr	r0, [pc, #172]	; (80034a0 <ADC_Enable+0x100>)
 80033f2:	f7ff f99b 	bl	800272c <LL_ADC_GetCommonPathInternalCh>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00f      	beq.n	8003420 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003400:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <ADC_Enable+0x104>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <ADC_Enable+0x108>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	3301      	adds	r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003412:	e002      	b.n	800341a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f9      	bne.n	8003414 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7e5b      	ldrb	r3, [r3, #25]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d033      	beq.n	8003490 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003428:	f7fe fbce 	bl	8001bc8 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342e:	e028      	b.n	8003482 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fa8d 	bl	8002954 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fa5f 	bl	8002908 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800344a:	f7fe fbbd 	bl	8001bc8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d914      	bls.n	8003482 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d00d      	beq.n	8003482 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d1cf      	bne.n	8003430 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	80000017 	.word	0x80000017
 80034a0:	40012708 	.word	0x40012708
 80034a4:	20000000 	.word	0x20000000
 80034a8:	053e2d63 	.word	0x053e2d63

080034ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fa5d 	bl	8002978 <LL_ADC_IsDisableOngoing>
 80034be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fa45 	bl	8002954 <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d047      	beq.n	8003560 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d144      	bne.n	8003560 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0305 	and.w	r3, r3, #5
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10c      	bne.n	80034fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fa20 	bl	800292e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2203      	movs	r2, #3
 80034f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034f6:	f7fe fb67 	bl	8001bc8 <HAL_GetTick>
 80034fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034fc:	e029      	b.n	8003552 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e023      	b.n	8003562 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800351a:	f7fe fb55 	bl	8001bc8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d914      	bls.n	8003552 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f043 0210 	orr.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1dc      	bne.n	800351a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <LL_ADC_SetCalibrationFactor>:
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800357a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <LL_ADC_GetCalibrationFactor>:
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_Enable>:
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035be:	f023 0317 	bic.w	r3, r3, #23
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_Disable>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035e4:	f023 0317 	bic.w	r3, r3, #23
 80035e8:	f043 0202 	orr.w	r2, r3, #2
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <LL_ADC_IsEnabled>:
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <LL_ADC_IsEnabled+0x18>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <LL_ADC_IsEnabled+0x1a>
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <LL_ADC_StartCalibration>:
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800362e:	f023 0317 	bic.w	r3, r3, #23
 8003632:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <LL_ADC_IsCalibrationOnGoing>:
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003658:	d101      	bne.n	800365e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr

0800366a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b088      	sub	sp, #32
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_ADCEx_Calibration_Start+0x1e>
 8003684:	2302      	movs	r3, #2
 8003686:	e0b9      	b.n	80037fc <HAL_ADCEx_Calibration_Start+0x192>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff0b 	bl	80034ac <ADC_Disable>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ffab 	bl	80035fa <LL_ADC_IsEnabled>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 809d 	bne.w	80037e6 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036b4:	f043 0202 	orr.w	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	f248 0303 	movw	r3, #32771	; 0x8003
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036d8:	f023 0303 	bic.w	r3, r3, #3
 80036dc:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e02e      	b.n	8003742 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff98 	bl	800361e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036ee:	e014      	b.n	800371a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80036fc:	d30d      	bcc.n	800371a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	f023 0312 	bic.w	r3, r3, #18
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e070      	b.n	80037fc <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff90 	bl	8003644 <LL_ADC_IsCalibrationOnGoing>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e2      	bne.n	80036f0 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff2f 	bl	8003592 <LL_ADC_GetCalibrationFactor>
 8003734:	4602      	mov	r2, r0
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2b07      	cmp	r3, #7
 8003746:	d9cd      	bls.n	80036e4 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff29 	bl	80035ae <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff01 	bl	800356a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff31 	bl	80035d4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003772:	f7fe fa29 	bl	8001bc8 <HAL_GetTick>
 8003776:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003778:	e01c      	b.n	80037b4 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800377a:	f7fe fa25 	bl	8001bc8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d915      	bls.n	80037b4 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff34 	bl	80035fa <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f043 0210 	orr.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e023      	b.n	80037fc <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff1e 	bl	80035fa <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1da      	bne.n	800377a <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68d9      	ldr	r1, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f023 0303 	bic.w	r3, r3, #3
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	659a      	str	r2, [r3, #88]	; 0x58
 80037e4:	e005      	b.n	80037f2 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800382c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4906      	ldr	r1, [pc, #24]	; (800389c <__NVIC_EnableIRQ+0x34>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	e000e100 	.word	0xe000e100

080038a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	db12      	blt.n	80038d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	490a      	ldr	r1, [pc, #40]	; (80038e4 <__NVIC_DisableIRQ+0x44>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2001      	movs	r0, #1
 80038c2:	fa00 f202 	lsl.w	r2, r0, r2
 80038c6:	3320      	adds	r3, #32
 80038c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038cc:	f3bf 8f4f 	dsb	sy
}
 80038d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038d2:	f3bf 8f6f 	isb	sy
}
 80038d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	; (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	; (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff2b 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039c4:	f7ff ff42 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7ff ffb4 	bl	800393c <NVIC_EncodePriority>
 80039d4:	4602      	mov	r2, r0
 80039d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff83 	bl	80038e8 <__NVIC_SetPriority>
}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff35 	bl	8003868 <__NVIC_EnableIRQ>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff43 	bl	80038a0 <__NVIC_DisableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e08e      	b.n	8003b54 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_DMA_Init+0x138>)
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d80f      	bhi.n	8003a62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b45      	ldr	r3, [pc, #276]	; (8003b60 <HAL_DMA_Init+0x13c>)
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a45      	ldr	r2, [pc, #276]	; (8003b64 <HAL_DMA_Init+0x140>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	009a      	lsls	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <HAL_DMA_Init+0x144>)
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a60:	e00e      	b.n	8003a80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <HAL_DMA_Init+0x148>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a3d      	ldr	r2, [pc, #244]	; (8003b64 <HAL_DMA_Init+0x140>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	009a      	lsls	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a3c      	ldr	r2, [pc, #240]	; (8003b70 <HAL_DMA_Init+0x14c>)
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fb24 	bl	8004120 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae0:	d102      	bne.n	8003ae8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003af4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003afe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <HAL_DMA_Init+0x106>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d80c      	bhi.n	8003b2a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fb4d 	bl	80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	e008      	b.n	8003b3c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40020407 	.word	0x40020407
 8003b60:	bffdfff8 	.word	0xbffdfff8
 8003b64:	cccccccd 	.word	0xcccccccd
 8003b68:	40020000 	.word	0x40020000
 8003b6c:	bffdfbf8 	.word	0xbffdfbf8
 8003b70:	40020400 	.word	0x40020400

08003b74 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07b      	b.n	8003c7e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <HAL_DMA_DeInit+0x114>)
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d80f      	bhi.n	8003bc2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <HAL_DMA_DeInit+0x118>)
 8003baa:	4413      	add	r3, r2
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_DMA_DeInit+0x11c>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	009a      	lsls	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a35      	ldr	r2, [pc, #212]	; (8003c94 <HAL_DMA_DeInit+0x120>)
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8003bc0:	e00e      	b.n	8003be0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <HAL_DMA_DeInit+0x124>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_DMA_DeInit+0x11c>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	009a      	lsls	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <HAL_DMA_DeInit+0x128>)
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	f003 021c 	and.w	r2, r3, #28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fa8f 	bl	8004120 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c12:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00f      	beq.n	8003c3c <HAL_DMA_DeInit+0xc8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d80b      	bhi.n	8003c3c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fac3 	bl	80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40020407 	.word	0x40020407
 8003c8c:	bffdfff8 	.word	0xbffdfff8
 8003c90:	cccccccd 	.word	0xcccccccd
 8003c94:	40020000 	.word	0x40020000
 8003c98:	bffdfbf8 	.word	0xbffdfbf8
 8003c9c:	40020400 	.word	0x40020400

08003ca0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA_Start_IT+0x20>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e069      	b.n	8003d94 <HAL_DMA_Start_IT+0xf4>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d155      	bne.n	8003d80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f9d3 	bl	80040a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 020e 	orr.w	r2, r2, #14
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00f      	b.n	8003d38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 020a 	orr.w	r2, r2, #10
 8003d36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e008      	b.n	8003d92 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e04f      	b.n	8003e4e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d008      	beq.n	8003dcc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e040      	b.n	8003e4e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 020e 	bic.w	r2, r2, #14
 8003dda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f003 021c 	and.w	r2, r3, #28
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d005      	beq.n	8003e7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2204      	movs	r2, #4
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e047      	b.n	8003f0c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 020e 	bic.w	r2, r2, #14
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f003 021c 	and.w	r2, r3, #28
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ec8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
    }
  }
  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f003 031c 	and.w	r3, r3, #28
 8003f38:	2204      	movs	r2, #4
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d027      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x7c>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d022      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 021c 	and.w	r2, r3, #28
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2104      	movs	r1, #4
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8081 	beq.w	800408c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003f92:	e07b      	b.n	800408c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	f003 031c 	and.w	r3, r3, #28
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d03d      	beq.n	8004024 <HAL_DMA_IRQHandler+0x10c>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d038      	beq.n	8004024 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 020a 	bic.w	r2, r2, #10
 8003fce:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <HAL_DMA_IRQHandler+0x180>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d909      	bls.n	8003ff8 <HAL_DMA_IRQHandler+0xe0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	f003 031c 	and.w	r3, r3, #28
 8003fec:	4a2b      	ldr	r2, [pc, #172]	; (800409c <HAL_DMA_IRQHandler+0x184>)
 8003fee:	2102      	movs	r1, #2
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	6053      	str	r3, [r2, #4]
 8003ff6:	e008      	b.n	800400a <HAL_DMA_IRQHandler+0xf2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 031c 	and.w	r3, r3, #28
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <HAL_DMA_IRQHandler+0x188>)
 8004002:	2102      	movs	r1, #2
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d038      	beq.n	800408c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004022:	e033      	b.n	800408c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f003 031c 	and.w	r3, r3, #28
 800402c:	2208      	movs	r2, #8
 800402e:	409a      	lsls	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02a      	beq.n	800408e <HAL_DMA_IRQHandler+0x176>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d025      	beq.n	800408e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 020e 	bic.w	r2, r2, #14
 8004050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	f003 021c 	and.w	r2, r3, #28
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2101      	movs	r1, #1
 8004060:	fa01 f202 	lsl.w	r2, r1, r2
 8004064:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800408c:	bf00      	nop
 800408e:	bf00      	nop
}
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40020080 	.word	0x40020080
 800409c:	40020400 	.word	0x40020400
 80040a0:	40020000 	.word	0x40020000

080040a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f003 021c 	and.w	r2, r3, #28
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f202 	lsl.w	r2, r1, r2
 80040e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d108      	bne.n	8004104 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004102:	e007      	b.n	8004114 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
	...

08004120 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004130:	429a      	cmp	r2, r3
 8004132:	d813      	bhi.n	800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004140:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	3b08      	subs	r3, #8
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	091b      	lsrs	r3, r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e011      	b.n	8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	009a      	lsls	r2, r3, #2
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004166:	4413      	add	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3b08      	subs	r3, #8
 8004174:	4a0b      	ldr	r2, [pc, #44]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	3307      	adds	r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004184:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40020407 	.word	0x40020407
 80041a4:	cccccccd 	.word	0xcccccccd
 80041a8:	4002081c 	.word	0x4002081c
 80041ac:	40020880 	.word	0x40020880

080041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b01      	subs	r3, #1
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2201      	movs	r2, #1
 80041e0:	409a      	lsls	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	1000823f 	.word	0x1000823f
 80041f4:	40020940 	.word	0x40020940

080041f8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_FLASH_Program+0x80>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_FLASH_Program+0x1a>
 800420e:	2302      	movs	r3, #2
 8004210:	e02d      	b.n	800426e <HAL_FLASH_Program+0x76>
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_FLASH_Program+0x80>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_FLASH_Program+0x80>)
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800421e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004222:	f000 f869 	bl	80042f8 <FLASH_WaitForLastOperation>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11a      	bne.n	8004266 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f000 f8be 	bl	80043bc <FLASH_Program_DoubleWord>
 8004240:	e004      	b.n	800424c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	68b8      	ldr	r0, [r7, #8]
 8004248:	f000 f8de 	bl	8004408 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800424c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004250:	f000 f852 	bl	80042f8 <FLASH_WaitForLastOperation>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_FLASH_Program+0x84>)
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43db      	mvns	r3, r3
 8004260:	4906      	ldr	r1, [pc, #24]	; (800427c <HAL_FLASH_Program+0x84>)
 8004262:	4013      	ands	r3, r2
 8004264:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004266:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_FLASH_Program+0x80>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000378 	.word	0x20000378
 800427c:	58004000 	.word	0x58004000

08004280 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_FLASH_Unlock+0x38>)
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da0b      	bge.n	80042aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_FLASH_Unlock+0x38>)
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_FLASH_Unlock+0x3c>)
 8004296:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_FLASH_Unlock+0x38>)
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_FLASH_Unlock+0x40>)
 800429c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_FLASH_Unlock+0x38>)
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da01      	bge.n	80042aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042aa:	79fb      	ldrb	r3, [r7, #7]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	58004000 	.word	0x58004000
 80042bc:	45670123 	.word	0x45670123
 80042c0:	cdef89ab 	.word	0xcdef89ab

080042c4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_FLASH_Lock+0x30>)
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <HAL_FLASH_Lock+0x30>)
 80042d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042d8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_FLASH_Lock+0x30>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db01      	blt.n	80042e6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80042e6:	79fb      	ldrb	r3, [r7, #7]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	58004000 	.word	0x58004000

080042f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7fd fc62 	bl	8001bc8 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004306:	e009      	b.n	800431c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004308:	f7fd fc5e 	bl	8001bc8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d801      	bhi.n	800431c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e047      	b.n	80043ac <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d0ee      	beq.n	8004308 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 800433c:	2201      	movs	r2, #1
 800433e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004346:	4013      	ands	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <FLASH_WaitForLastOperation+0x6c>
 8004354:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800435e:	4915      	ldr	r1, [pc, #84]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	618b      	str	r3, [r1, #24]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <FLASH_WaitForLastOperation+0x80>
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004376:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <FLASH_WaitForLastOperation+0xc0>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e011      	b.n	80043ac <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004388:	f7fd fc1e 	bl	8001bc8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	d801      	bhi.n	800439c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e007      	b.n	80043ac <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <FLASH_WaitForLastOperation+0xbc>)
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a8:	d0ee      	beq.n	8004388 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	58004000 	.word	0x58004000
 80043b8:	20000378 	.word	0x20000378

080043bc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <FLASH_Program_DoubleWord+0x48>)
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <FLASH_Program_DoubleWord+0x48>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80043da:	f3bf 8f6f 	isb	sy
}
 80043de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80043e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	000a      	movs	r2, r1
 80043ee:	2300      	movs	r3, #0
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	3104      	adds	r1, #4
 80043f4:	4613      	mov	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	58004000 	.word	0x58004000

08004408 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <FLASH_Program_Fast+0x78>)
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	4a17      	ldr	r2, [pc, #92]	; (8004480 <FLASH_Program_Fast+0x78>)
 8004424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004428:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442a:	f3ef 8310 	mrs	r3, PRIMASK
 800442e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004430:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004434:	b672      	cpsid	i
}
 8004436:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3304      	adds	r3, #4
 8004444:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	3304      	adds	r3, #4
 800444a:	617b      	str	r3, [r7, #20]
    row_index--;
 800444c:	7ffb      	ldrb	r3, [r7, #31]
 800444e:	3b01      	subs	r3, #1
 8004450:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ef      	bne.n	8004438 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004458:	bf00      	nop
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <FLASH_Program_Fast+0x78>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d0f8      	beq.n	800445a <FLASH_Program_Fast+0x52>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f383 8810 	msr	PRIMASK, r3
}
 8004472:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004474:	bf00      	nop
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	58004000 	.word	0x58004000

08004484 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_FLASHEx_Erase+0xac>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_FLASHEx_Erase+0x16>
 8004496:	2302      	movs	r3, #2
 8004498:	e046      	b.n	8004528 <HAL_FLASHEx_Erase+0xa4>
 800449a:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_FLASHEx_Erase+0xac>)
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_FLASHEx_Erase+0xac>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044aa:	f7ff ff25 	bl	80042f8 <FLASH_WaitForLastOperation>
 80044ae:	4603      	mov	r3, r0
 80044b0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d133      	bne.n	8004520 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d108      	bne.n	80044d2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80044c0:	f000 f880 	bl	80045c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044c8:	f7ff ff16 	bl	80042f8 <FLASH_WaitForLastOperation>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e024      	b.n	800451c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e012      	b.n	8004508 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f000 f87e 	bl	80045e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044ec:	f7ff ff04 	bl	80042f8 <FLASH_WaitForLastOperation>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	601a      	str	r2, [r3, #0]
          break;
 8004500:	e00a      	b.n	8004518 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4413      	add	r3, r2
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	429a      	cmp	r2, r3
 8004516:	d3e4      	bcc.n	80044e2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004518:	f000 f8c0 	bl	800469c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800451c:	f000 f87a 	bl	8004614 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_FLASHEx_Erase+0xac>)
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]

  return status;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000378 	.word	0x20000378

08004534 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800453c:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_FLASHEx_Erase_IT+0x14>
 8004544:	2302      	movs	r3, #2
 8004546:	e034      	b.n	80045b2 <HAL_FLASHEx_Erase_IT+0x7e>
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a18      	ldr	r2, [pc, #96]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 800455a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800455c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004560:	f7ff feca 	bl	80042f8 <FLASH_WaitForLastOperation>
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e01c      	b.n	80045b0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4a11      	ldr	r2, [pc, #68]	; (80045c0 <HAL_FLASHEx_Erase_IT+0x8c>)
 800457c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004580:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d105      	bne.n	8004596 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 800458c:	2200      	movs	r2, #0
 800458e:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004590:	f000 f818 	bl	80045c4 <FLASH_MassErase>
 8004594:	e00c      	b.n	80045b0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a08      	ldr	r2, [pc, #32]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 800459c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a06      	ldr	r2, [pc, #24]	; (80045bc <HAL_FLASHEx_Erase_IT+0x88>)
 80045a4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f81a 	bl	80045e4 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000378 	.word	0x20000378
 80045c0:	58004000 	.word	0x58004000

080045c4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <FLASH_MassErase+0x1c>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <FLASH_MassErase+0x1c>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	6153      	str	r3, [r2, #20]
#endif
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	58004000 	.word	0x58004000

080045e4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <FLASH_PageErase+0x2c>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4313      	orrs	r3, r2
 80045fa:	4a05      	ldr	r2, [pc, #20]	; (8004610 <FLASH_PageErase+0x2c>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6153      	str	r3, [r2, #20]
#endif
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	58004000 	.word	0x58004000

08004614 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004618:	4b1f      	ldr	r3, [pc, #124]	; (8004698 <FLASH_FlushCaches+0x84>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004620:	2b01      	cmp	r3, #1
 8004622:	d117      	bne.n	8004654 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <FLASH_FlushCaches+0x84>)
 800462a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800462e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004636:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <FLASH_FlushCaches+0x84>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004646:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <FLASH_FlushCaches+0x84>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a12      	ldr	r2, [pc, #72]	; (8004698 <FLASH_FlushCaches+0x84>)
 800464e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004652:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b01      	cmp	r3, #1
 800465e:	d117      	bne.n	8004690 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800466a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <FLASH_FlushCaches+0x84>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <FLASH_FlushCaches+0x84>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <FLASH_FlushCaches+0x84>)
 800467e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004682:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <FLASH_FlushCaches+0x84>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a03      	ldr	r2, [pc, #12]	; (8004698 <FLASH_FlushCaches+0x84>)
 800468a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800468e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	58004000 	.word	0x58004000

0800469c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <FLASH_AcknowledgePageErase+0x1c>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <FLASH_AcknowledgePageErase+0x1c>)
 80046a6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80046aa:	f023 0302 	bic.w	r3, r3, #2
 80046ae:	6153      	str	r3, [r2, #20]
#endif
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	58004000 	.word	0x58004000

080046bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ca:	e140      	b.n	800494e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8132 	beq.w	8004948 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d005      	beq.n	80046fc <HAL_GPIO_Init+0x40>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d130      	bne.n	800475e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004732:	2201      	movs	r2, #1
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0201 	and.w	r2, r3, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d017      	beq.n	800479a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d123      	bne.n	80047ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	08da      	lsrs	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3208      	adds	r2, #8
 80047ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	08da      	lsrs	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3208      	adds	r2, #8
 80047e8:	6939      	ldr	r1, [r7, #16]
 80047ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2203      	movs	r2, #3
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 808c 	beq.w	8004948 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004830:	4a4e      	ldr	r2, [pc, #312]	; (800496c <HAL_GPIO_Init+0x2b0>)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	3302      	adds	r3, #2
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	2207      	movs	r2, #7
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800485a:	d00d      	beq.n	8004878 <HAL_GPIO_Init+0x1bc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a44      	ldr	r2, [pc, #272]	; (8004970 <HAL_GPIO_Init+0x2b4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <HAL_GPIO_Init+0x1b8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a43      	ldr	r2, [pc, #268]	; (8004974 <HAL_GPIO_Init+0x2b8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_GPIO_Init+0x1b4>
 800486c:	2302      	movs	r3, #2
 800486e:	e004      	b.n	800487a <HAL_GPIO_Init+0x1be>
 8004870:	2307      	movs	r3, #7
 8004872:	e002      	b.n	800487a <HAL_GPIO_Init+0x1be>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_GPIO_Init+0x1be>
 8004878:	2300      	movs	r3, #0
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	f002 0203 	and.w	r2, r2, #3
 8004880:	0092      	lsls	r2, r2, #2
 8004882:	4093      	lsls	r3, r2
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800488a:	4938      	ldr	r1, [pc, #224]	; (800496c <HAL_GPIO_Init+0x2b0>)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	3302      	adds	r3, #2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048bc:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048c2:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4013      	ands	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048e6:	4a24      	ldr	r2, [pc, #144]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 80048ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004912:	4a19      	ldr	r2, [pc, #100]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	43db      	mvns	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004940:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <HAL_GPIO_Init+0x2bc>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3301      	adds	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	f47f aeb7 	bne.w	80046cc <HAL_GPIO_Init+0x10>
  }
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	48000400 	.word	0x48000400
 8004974:	48000800 	.word	0x48000800
 8004978:	58000800 	.word	0x58000800

0800497c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800498a:	e0af      	b.n	8004aec <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800498c:	2201      	movs	r2, #1
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a2 	beq.w	8004ae6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049a2:	4a59      	ldr	r2, [pc, #356]	; (8004b08 <HAL_GPIO_DeInit+0x18c>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	2207      	movs	r2, #7
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049ca:	d00d      	beq.n	80049e8 <HAL_GPIO_DeInit+0x6c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a4f      	ldr	r2, [pc, #316]	; (8004b0c <HAL_GPIO_DeInit+0x190>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <HAL_GPIO_DeInit+0x68>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <HAL_GPIO_DeInit+0x194>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_GPIO_DeInit+0x64>
 80049dc:	2302      	movs	r3, #2
 80049de:	e004      	b.n	80049ea <HAL_GPIO_DeInit+0x6e>
 80049e0:	2307      	movs	r3, #7
 80049e2:	e002      	b.n	80049ea <HAL_GPIO_DeInit+0x6e>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_GPIO_DeInit+0x6e>
 80049e8:	2300      	movs	r3, #0
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	f002 0203 	and.w	r2, r2, #3
 80049f0:	0092      	lsls	r2, r2, #2
 80049f2:	4093      	lsls	r3, r2
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d136      	bne.n	8004a68 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80049fa:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 80049fc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	4943      	ldr	r1, [pc, #268]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a0c:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	493f      	ldr	r1, [pc, #252]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	493b      	ldr	r1, [pc, #236]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a2c:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	4937      	ldr	r1, [pc, #220]	; (8004b14 <HAL_GPIO_DeInit+0x198>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	2207      	movs	r2, #7
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a4a:	4a2f      	ldr	r2, [pc, #188]	; (8004b08 <HAL_GPIO_DeInit+0x18c>)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	3302      	adds	r3, #2
 8004a52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	482b      	ldr	r0, [pc, #172]	; (8004b08 <HAL_GPIO_DeInit+0x18c>)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	400a      	ands	r2, r1
 8004a62:	3302      	adds	r3, #2
 8004a64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2103      	movs	r1, #3
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	08da      	lsrs	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3208      	adds	r2, #8
 8004a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	220f      	movs	r2, #15
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	08d2      	lsrs	r2, r2, #3
 8004a9c:	4019      	ands	r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3208      	adds	r2, #8
 8004aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2103      	movs	r1, #3
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	401a      	ands	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2103      	movs	r1, #3
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f47f af49 	bne.w	800498c <HAL_GPIO_DeInit+0x10>
  }
}
 8004afa:	bf00      	nop
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	48000400 	.word	0x48000400
 8004b10:	48000800 	.word	0x48000800
 8004b14:	58000800 	.word	0x58000800

08004b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
 8004b24:	4613      	mov	r3, r2
 8004b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b28:	787b      	ldrb	r3, [r7, #1]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b34:	e002      	b.n	8004b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a03      	ldr	r2, [pc, #12]	; (8004b60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	58000400 	.word	0x58000400

08004b64 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b82:	d10d      	bne.n	8004ba0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004b84:	f000 f83c 	bl	8004c00 <HAL_PWREx_DisableLowPowerRunMode>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004b8e:	e015      	b.n	8004bbc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004b9c:	f000 f822 	bl	8004be4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004ba6:	f023 0304 	bic.w	r3, r3, #4
 8004baa:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004bb2:	bf30      	wfi
 8004bb4:	e002      	b.n	8004bbc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004bb6:	bf40      	sev
    __WFE();
 8004bb8:	bf20      	wfe
    __WFE();
 8004bba:	bf20      	wfe
  }
}
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	58000400 	.word	0x58000400
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <HAL_PWREx_GetVoltageRange+0x14>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	58000400 	.word	0x58000400

08004be4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf2:	6013      	str	r3, [r2, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	58000400 	.word	0x58000400

08004c00 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c10:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2232      	movs	r2, #50	; 0x32
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004c26:	e002      	b.n	8004c2e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	d102      	bne.n	8004c42 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f2      	bne.n	8004c28 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4e:	d101      	bne.n	8004c54 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e000      	b.n	8004c56 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	58000400 	.word	0x58000400
 8004c64:	20000000 	.word	0x20000000
 8004c68:	431bde83 	.word	0x431bde83

08004c6c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	4a0e      	ldr	r2, [pc, #56]	; (8004cb8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c98:	bf30      	wfi
 8004c9a:	e002      	b.n	8004ca2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c9c:	bf40      	sev
    __WFE();
 8004c9e:	bf20      	wfe
    __WFE();
 8004ca0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4a05      	ldr	r2, [pc, #20]	; (8004cbc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	6113      	str	r3, [r2, #16]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	58000400 	.word	0x58000400
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd0:	d101      	bne.n	8004cd6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	58000400 	.word	0x58000400

08004ce4 <LL_RCC_HSE_EnableTcxo>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cf6:	6013      	str	r3, [r2, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_HSE_DisableTcxo>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d101      	bne.n	8004d34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <LL_RCC_HSE_Enable>:
{
 8004d3e:	b480      	push	{r7}
 8004d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
}
 8004d52:	bf00      	nop
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <LL_RCC_HSE_Disable>:
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <LL_RCC_HSE_IsReady>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d88:	d101      	bne.n	8004d8e <LL_RCC_HSE_IsReady+0x18>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <LL_RCC_HSE_IsReady+0x1a>
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <LL_RCC_HSI_Enable>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004daa:	6013      	str	r3, [r2, #0]
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <LL_RCC_HSI_Disable>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <LL_RCC_HSI_IsReady>:
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	d101      	bne.n	8004de8 <LL_RCC_HSI_IsReady+0x18>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <LL_RCC_HSI_IsReady+0x1a>
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <LL_RCC_LSE_IsReady>:
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d101      	bne.n	8004e32 <LL_RCC_LSE_IsReady+0x18>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <LL_RCC_LSE_IsReady+0x1a>
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <LL_RCC_LSI_Enable>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <LL_RCC_LSI_Disable>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <LL_RCC_LSI_IsReady>:
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d101      	bne.n	8004e94 <LL_RCC_LSI_IsReady+0x18>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <LL_RCC_LSI_IsReady+0x1a>
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <LL_RCC_MSI_Enable>:
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	6013      	str	r3, [r2, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_MSI_Disable>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_MSI_IsReady>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d101      	bne.n	8004eec <LL_RCC_MSI_IsReady+0x16>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <LL_RCC_MSI_IsReady+0x18>
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d101      	bne.n	8004f0c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <LL_RCC_MSI_GetRange>:
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <LL_RCC_SetSysClkSource>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <LL_RCC_GetSysClkSource>:
{
 8004f92:	b480      	push	{r7}
 8004f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <LL_RCC_SetAHBPrescaler>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	608b      	str	r3, [r1, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <LL_RCC_SetAHB3Prescaler>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fde:	f023 020f 	bic.w	r2, r3, #15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <LL_RCC_SetAPB1Prescaler>:
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800500c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <LL_RCC_SetAPB2Prescaler>:
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4313      	orrs	r3, r2
 800503a:	608b      	str	r3, [r1, #8]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <LL_RCC_GetAHBPrescaler>:
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <LL_RCC_GetAHB3Prescaler>:
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005064:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800506e:	4618      	mov	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <LL_RCC_GetAPB1Prescaler>:
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <LL_RCC_GetAPB2Prescaler>:
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d0:	6013      	str	r3, [r2, #0]
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ec:	d101      	bne.n	80050f2 <LL_RCC_PLL_IsReady+0x18>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <LL_RCC_PLL_IsReady+0x1a>
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005156:	b480      	push	{r7}
 8005158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d101      	bne.n	800516e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d101      	bne.n	8005192 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ae:	d101      	bne.n	80051b4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80051be:	b480      	push	{r7}
 80051c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051d0:	d101      	bne.n	80051d6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e38b      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f2:	f7ff fece 	bl	8004f92 <LL_RCC_GetSysClkSource>
 80051f6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f8:	f7ff ffa2 	bl	8005140 <LL_RCC_PLL_GetMainSource>
 80051fc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80c9 	beq.w	800539e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x3e>
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d17b      	bne.n	8005310 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d178      	bne.n	8005310 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800521e:	f7ff fe5a 	bl	8004ed6 <LL_RCC_MSI_IsReady>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_RCC_OscConfig+0x54>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e36a      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_RCC_OscConfig+0x72>
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005250:	e006      	b.n	8005260 <HAL_RCC_OscConfig+0x80>
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005260:	4293      	cmp	r3, r2
 8005262:	d222      	bcs.n	80052aa <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fd51 	bl	8005d10 <RCC_SetFlashLatencyFromMSIRange>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e348      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005282:	f043 0308 	orr.w	r3, r3, #8
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fe4e 	bl	8004f44 <LL_RCC_MSI_SetCalibTrimming>
 80052a8:	e021      	b.n	80052ee <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fe35 	bl	8004f44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd16 	bl	8005d10 <RCC_SetFlashLatencyFromMSIRange>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e30d      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052ee:	f000 fcd7 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4aa1      	ldr	r2, [pc, #644]	; (800557c <HAL_RCC_OscConfig+0x39c>)
 80052f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052f8:	4ba1      	ldr	r3, [pc, #644]	; (8005580 <HAL_RCC_OscConfig+0x3a0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fc fc59 	bl	8001bb4 <HAL_InitTick>
 8005302:	4603      	mov	r3, r0
 8005304:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d047      	beq.n	800539c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	e2fc      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02c      	beq.n	8005372 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005318:	f7ff fdc1 	bl	8004e9e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800531c:	f7fc fc54 	bl	8001bc8 <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005324:	f7fc fc50 	bl	8001bc8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e2e9      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005336:	f7ff fdce 	bl	8004ed6 <LL_RCC_MSI_IsReady>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f1      	beq.n	8005324 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534a:	f043 0308 	orr.w	r3, r3, #8
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fdea 	bl	8004f44 <LL_RCC_MSI_SetCalibTrimming>
 8005370:	e015      	b.n	800539e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005372:	f7ff fda2 	bl	8004eba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005376:	f7fc fc27 	bl	8001bc8 <HAL_GetTick>
 800537a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800537e:	f7fc fc23 	bl	8001bc8 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e2bc      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005390:	f7ff fda1 	bl	8004ed6 <LL_RCC_MSI_IsReady>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f1      	bne.n	800537e <HAL_RCC_OscConfig+0x19e>
 800539a:	e000      	b.n	800539e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800539c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d05f      	beq.n	800546a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_OscConfig+0x1dc>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d10d      	bne.n	80053d2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d10a      	bne.n	80053d2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053bc:	f7ff fcdb 	bl	8004d76 <LL_RCC_HSE_IsReady>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d050      	beq.n	8005468 <HAL_RCC_OscConfig+0x288>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d14c      	bne.n	8005468 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e29b      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d102      	bne.n	80053f8 <HAL_RCC_OscConfig+0x218>
 80053f2:	f7ff fca4 	bl	8004d3e <LL_RCC_HSE_Enable>
 80053f6:	e00d      	b.n	8005414 <HAL_RCC_OscConfig+0x234>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005400:	d104      	bne.n	800540c <HAL_RCC_OscConfig+0x22c>
 8005402:	f7ff fc6f 	bl	8004ce4 <LL_RCC_HSE_EnableTcxo>
 8005406:	f7ff fc9a 	bl	8004d3e <LL_RCC_HSE_Enable>
 800540a:	e003      	b.n	8005414 <HAL_RCC_OscConfig+0x234>
 800540c:	f7ff fca5 	bl	8004d5a <LL_RCC_HSE_Disable>
 8005410:	f7ff fc76 	bl	8004d00 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d012      	beq.n	8005442 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fc fbd4 	bl	8001bc8 <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005424:	f7fc fbd0 	bl	8001bc8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	; 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e269      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005436:	f7ff fc9e 	bl	8004d76 <LL_RCC_HSE_IsReady>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f1      	beq.n	8005424 <HAL_RCC_OscConfig+0x244>
 8005440:	e013      	b.n	800546a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fc fbc1 	bl	8001bc8 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800544a:	f7fc fbbd 	bl	8001bc8 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b64      	cmp	r3, #100	; 0x64
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e256      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800545c:	f7ff fc8b 	bl	8004d76 <LL_RCC_HSE_IsReady>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f1      	bne.n	800544a <HAL_RCC_OscConfig+0x26a>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d04b      	beq.n	800550e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d005      	beq.n	8005488 <HAL_RCC_OscConfig+0x2a8>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d113      	bne.n	80054aa <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d110      	bne.n	80054aa <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005488:	f7ff fca2 	bl	8004dd0 <LL_RCC_HSI_IsReady>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x2be>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e235      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fca5 	bl	8004df2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a8:	e031      	b.n	800550e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d019      	beq.n	80054e6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b2:	f7ff fc71 	bl	8004d98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b6:	f7fc fb87 	bl	8001bc8 <HAL_GetTick>
 80054ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054be:	f7fc fb83 	bl	8001bc8 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e21c      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80054d0:	f7ff fc7e 	bl	8004dd0 <LL_RCC_HSI_IsReady>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f1      	beq.n	80054be <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fc87 	bl	8004df2 <LL_RCC_HSI_SetCalibTrimming>
 80054e4:	e013      	b.n	800550e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e6:	f7ff fc65 	bl	8004db4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fc fb6d 	bl	8001bc8 <HAL_GetTick>
 80054ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f2:	f7fc fb69 	bl	8001bc8 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e202      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005504:	f7ff fc64 	bl	8004dd0 <LL_RCC_HSI_IsReady>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f1      	bne.n	80054f2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d06f      	beq.n	80055fa <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d057      	beq.n	80055d2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	429a      	cmp	r2, r3
 8005538:	d036      	beq.n	80055a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e1db      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d018      	beq.n	800558e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800555c:	f7ff fc7e 	bl	8004e5c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005560:	f7fc fb32 	bl	8001bc8 <HAL_GetTick>
 8005564:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005566:	e00d      	b.n	8005584 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005568:	f7fc fb2e 	bl	8001bc8 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b11      	cmp	r3, #17
 8005574:	d906      	bls.n	8005584 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e1c7      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
 800557a:	bf00      	nop
 800557c:	20000000 	.word	0x20000000
 8005580:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8005584:	f7ff fc7a 	bl	8004e7c <LL_RCC_LSI_IsReady>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1ec      	bne.n	8005568 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005596:	f023 0210 	bic.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a8:	f7ff fc48 	bl	8004e3c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fc fb0c 	bl	8001bc8 <HAL_GetTick>
 80055b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b4:	f7fc fb08 	bl	8001bc8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b11      	cmp	r3, #17
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e1a1      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80055c6:	f7ff fc59 	bl	8004e7c <LL_RCC_LSI_IsReady>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f1      	beq.n	80055b4 <HAL_RCC_OscConfig+0x3d4>
 80055d0:	e013      	b.n	80055fa <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d2:	f7ff fc43 	bl	8004e5c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d6:	f7fc faf7 	bl	8001bc8 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055de:	f7fc faf3 	bl	8001bc8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b11      	cmp	r3, #17
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e18c      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80055f0:	f7ff fc44 	bl	8004e7c <LL_RCC_LSI_IsReady>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f1      	bne.n	80055de <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80d8 	beq.w	80057b8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005608:	f7ff fb5a 	bl	8004cc0 <LL_PWR_IsEnabledBkUpAccess>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d113      	bne.n	800563a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005612:	f7ff fa99 	bl	8004b48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005616:	f7fc fad7 	bl	8001bc8 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561e:	f7fc fad3 	bl	8001bc8 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e16c      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005630:	f7ff fb46 	bl	8004cc0 <LL_PWR_IsEnabledBkUpAccess>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f1      	beq.n	800561e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d07b      	beq.n	800573a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b85      	cmp	r3, #133	; 0x85
 8005648:	d003      	beq.n	8005652 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b05      	cmp	r3, #5
 8005650:	d109      	bne.n	8005666 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800565e:	f043 0304 	orr.w	r3, r3, #4
 8005662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fc faaf 	bl	8001bc8 <HAL_GetTick>
 800566a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fc faa1 	bl	8001bc8 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e138      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005698:	f7ff fbbf 	bl	8004e1a <LL_RCC_LSE_IsReady>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ef      	beq.n	8005682 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b81      	cmp	r3, #129	; 0x81
 80056a8:	d003      	beq.n	80056b2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b85      	cmp	r3, #133	; 0x85
 80056b0:	d121      	bne.n	80056f6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fc fa89 	bl	8001bc8 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fc fa7b 	bl	8001bc8 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e112      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ec      	beq.n	80056ce <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80056f4:	e060      	b.n	80057b8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fc fa67 	bl	8001bc8 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800570c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005710:	e00a      	b.n	8005728 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005712:	f7fc fa59 	bl	8001bc8 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005720:	4293      	cmp	r3, r2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e0f0      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ec      	bne.n	8005712 <HAL_RCC_OscConfig+0x532>
 8005738:	e03e      	b.n	80057b8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fc fa45 	bl	8001bc8 <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800574c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005754:	e00a      	b.n	800576c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fc fa37 	bl	8001bc8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e0ce      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ec      	bne.n	8005756 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc fa24 	bl	8001bc8 <HAL_GetTick>
 8005780:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005796:	e00a      	b.n	80057ae <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fc fa16 	bl	8001bc8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e0ad      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80057ae:	f7ff fb34 	bl	8004e1a <LL_RCC_LSE_IsReady>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ef      	bne.n	8005798 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a3 	beq.w	8005908 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d076      	beq.n	80058b6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d14b      	bne.n	8005868 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	f7ff fc75 	bl	80050be <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fc f9f8 	bl	8001bc8 <HAL_GetTick>
 80057d8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fc f9f4 	bl	8001bc8 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b0a      	cmp	r3, #10
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e08d      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80057ee:	f7ff fc74 	bl	80050da <LL_RCC_PLL_IsReady>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f1      	bne.n	80057dc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	4b45      	ldr	r3, [pc, #276]	; (8005914 <HAL_RCC_OscConfig+0x734>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800580a:	4311      	orrs	r1, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005810:	0212      	lsls	r2, r2, #8
 8005812:	4311      	orrs	r1, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005818:	4311      	orrs	r1, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005824:	430a      	orrs	r2, r1
 8005826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800582a:	4313      	orrs	r3, r2
 800582c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582e:	f7ff fc38 	bl	80050a2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005840:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005842:	f7fc f9c1 	bl	8001bc8 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fc f9bd 	bl	8001bc8 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b0a      	cmp	r3, #10
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e056      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800585c:	f7ff fc3d 	bl	80050da <LL_RCC_PLL_IsReady>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f1      	beq.n	800584a <HAL_RCC_OscConfig+0x66a>
 8005866:	e04f      	b.n	8005908 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005868:	f7ff fc29 	bl	80050be <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005886:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fc f99a 	bl	8001bc8 <HAL_GetTick>
 8005894:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fc f996 	bl	8001bc8 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b0a      	cmp	r3, #10
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e02f      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80058aa:	f7ff fc16 	bl	80050da <LL_RCC_PLL_IsReady>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f1      	bne.n	8005898 <HAL_RCC_OscConfig+0x6b8>
 80058b4:	e028      	b.n	8005908 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e023      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 0203 	and.w	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d115      	bne.n	8005904 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d10e      	bne.n	8005904 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d106      	bne.n	8005904 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	11c1808c 	.word	0x11c1808c

08005918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e10f      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b89      	ldr	r3, [pc, #548]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d91b      	bls.n	8005972 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b86      	ldr	r3, [pc, #536]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 0207 	bic.w	r2, r3, #7
 8005942:	4984      	ldr	r1, [pc, #528]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fc f93d 	bl	8001bc8 <HAL_GetTick>
 800594e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005950:	e008      	b.n	8005964 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005952:	f7fc f939 	bl	8001bc8 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0f3      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005964:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d1ef      	bne.n	8005952 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fb10 	bl	8004fa8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005988:	f7fc f91e 	bl	8001bc8 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005990:	f7fc f91a 	bl	8001bc8 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0d4      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059a2:	f7ff fbd8 	bl	8005156 <LL_RCC_IsActiveFlag_HPRE>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f1      	beq.n	8005990 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fb06 	bl	8004fce <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c2:	f7fc f901 	bl	8001bc8 <HAL_GetTick>
 80059c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059ca:	f7fc f8fd 	bl	8001bc8 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e0b7      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059dc:	f7ff fbcc 	bl	8005178 <LL_RCC_IsActiveFlag_SHDHPRE>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f1      	beq.n	80059ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff faff 	bl	8004ffa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fc:	f7fc f8e4 	bl	8001bc8 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a04:	f7fc f8e0 	bl	8001bc8 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e09a      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a16:	f7ff fbc1 	bl	800519c <LL_RCC_IsActiveFlag_PPRE1>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f1      	beq.n	8005a04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d017      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff faf4 	bl	8005020 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a38:	f7fc f8c6 	bl	8001bc8 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a40:	f7fc f8c2 	bl	8001bc8 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e07c      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a52:	f7ff fbb4 	bl	80051be <LL_RCC_IsActiveFlag_PPRE2>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f1      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d043      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a70:	f7ff f981 	bl	8004d76 <LL_RCC_HSE_IsReady>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11e      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e066      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a86:	f7ff fb28 	bl	80050da <LL_RCC_PLL_IsReady>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d113      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e05b      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005a9c:	f7ff fa1b 	bl	8004ed6 <LL_RCC_MSI_IsReady>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e050      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005aaa:	f7ff f991 	bl	8004dd0 <LL_RCC_HSI_IsReady>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e049      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff fa55 	bl	8004f6c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac2:	f7fc f881 	bl	8001bc8 <HAL_GetTick>
 8005ac6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aca:	f7fc f87d 	bl	8001bc8 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e035      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae0:	f7ff fa57 	bl	8004f92 <LL_RCC_GetSysClkSource>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1ec      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af0:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d21b      	bcs.n	8005b36 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afe:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 0207 	bic.w	r2, r3, #7
 8005b06:	4913      	ldr	r1, [pc, #76]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0e:	f7fc f85b 	bl	8001bc8 <HAL_GetTick>
 8005b12:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b16:	f7fc f857 	bl	8001bc8 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e011      	b.n	8005b4c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <HAL_RCC_ClockConfig+0x23c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d1ef      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b36:	f000 f8b3 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4a06      	ldr	r2, [pc, #24]	; (8005b58 <HAL_RCC_ClockConfig+0x240>)
 8005b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <HAL_RCC_ClockConfig+0x244>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fc f835 	bl	8001bb4 <HAL_InitTick>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	58004000 	.word	0x58004000
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	20000004 	.word	0x20000004

08005b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6e:	f7ff fa10 	bl	8004f92 <LL_RCC_GetSysClkSource>
 8005b72:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b74:	f7ff fae4 	bl	8005140 <LL_RCC_PLL_GetMainSource>
 8005b78:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x2c>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d139      	bne.n	8005bfa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d136      	bne.n	8005bfa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005b8c:	f7ff f9b3 	bl	8004ef6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d115      	bne.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x62>
 8005b96:	f7ff f9ae 	bl	8004ef6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d106      	bne.n	8005bae <HAL_RCC_GetSysClockFreq+0x4e>
 8005ba0:	f7ff f9b9 	bl	8004f16 <LL_RCC_MSI_GetRange>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	e005      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0x5a>
 8005bae:	f7ff f9bd 	bl	8004f2c <LL_RCC_MSI_GetRangeAfterStandby>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	4a36      	ldr	r2, [pc, #216]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x134>)
 8005bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc0:	e014      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x8c>
 8005bc2:	f7ff f998 	bl	8004ef6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_GetSysClockFreq+0x7a>
 8005bcc:	f7ff f9a3 	bl	8004f16 <LL_RCC_MSI_GetRange>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	e005      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x86>
 8005bda:	f7ff f9a7 	bl	8004f2c <LL_RCC_MSI_GetRangeAfterStandby>
 8005bde:	4603      	mov	r3, r0
 8005be0:	091b      	lsrs	r3, r3, #4
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	4a2b      	ldr	r2, [pc, #172]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x134>)
 8005be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bf8:	e012      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e00c      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d109      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c0c:	f7ff f886 	bl	8004d1c <LL_RCC_HSE_IsEnabledDiv2>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d102      	bne.n	8005c1c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c16:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e001      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c1e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c20:	f7ff f9b7 	bl	8004f92 <LL_RCC_GetSysClkSource>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	d12f      	bne.n	8005c8a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005c2a:	f7ff fa89 	bl	8005140 <LL_RCC_PLL_GetMainSource>
 8005c2e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0xde>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d003      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0xe4>
 8005c3c:	e00d      	b.n	8005c5a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c3e:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c40:	60fb      	str	r3, [r7, #12]
        break;
 8005c42:	e00d      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c44:	f7ff f86a 	bl	8004d1c <LL_RCC_HSE_IsEnabledDiv2>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d102      	bne.n	8005c54 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c50:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005c52:	e005      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c56:	60fb      	str	r3, [r7, #12]
        break;
 8005c58:	e002      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	60fb      	str	r3, [r7, #12]
        break;
 8005c5e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c60:	f7ff fa4c 	bl	80050fc <LL_RCC_PLL_GetN>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	fb03 f402 	mul.w	r4, r3, r2
 8005c6c:	f7ff fa5d 	bl	800512a <LL_RCC_PLL_GetDivider>
 8005c70:	4603      	mov	r3, r0
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	3301      	adds	r3, #1
 8005c76:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c7a:	f7ff fa4b 	bl	8005114 <LL_RCC_PLL_GetR>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	0f5b      	lsrs	r3, r3, #29
 8005c82:	3301      	adds	r3, #1
 8005c84:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c88:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005c8a:	697b      	ldr	r3, [r7, #20]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd90      	pop	{r4, r7, pc}
 8005c94:	0801b550 	.word	0x0801b550
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	01e84800 	.word	0x01e84800

08005ca0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca0:	b598      	push	{r3, r4, r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ca4:	f7ff ff5c 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	f7ff f9cc 	bl	8005046 <LL_RCC_GetAHBPrescaler>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	4a03      	ldr	r2, [pc, #12]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd98      	pop	{r3, r4, r7, pc}
 8005cc4:	0801b4f0 	.word	0x0801b4f0

08005cc8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b598      	push	{r3, r4, r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ccc:	f7ff ffe8 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	f7ff f9d0 	bl	8005076 <LL_RCC_GetAPB1Prescaler>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	4a03      	ldr	r2, [pc, #12]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd98      	pop	{r3, r4, r7, pc}
 8005ce8:	0801b530 	.word	0x0801b530

08005cec <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cec:	b598      	push	{r3, r4, r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005cf0:	f7ff ffd6 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	f7ff f9c9 	bl	800508c <LL_RCC_GetAPB2Prescaler>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	0adb      	lsrs	r3, r3, #11
 8005cfe:	4a03      	ldr	r2, [pc, #12]	; (8005d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd98      	pop	{r3, r4, r7, pc}
 8005d0c:	0801b530 	.word	0x0801b530

08005d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d26:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005d28:	f7ff f998 	bl	800505c <LL_RCC_GetAHB3Prescaler>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	091b      	lsrs	r3, r3, #4
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	0c9c      	lsrs	r4, r3, #18
 8005d4c:	f7fe ff3e 	bl	8004bcc <HAL_PWREx_GetVoltageRange>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4619      	mov	r1, r3
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 f80b 	bl	8005d70 <RCC_SetFlashLatency>
 8005d5a:	4603      	mov	r3, r0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}
 8005d64:	0801b550 	.word	0x0801b550
 8005d68:	0801b4f0 	.word	0x0801b4f0
 8005d6c:	431bde83 	.word	0x431bde83

08005d70 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08e      	sub	sp, #56	; 0x38
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005d7a:	4a3a      	ldr	r2, [pc, #232]	; (8005e64 <RCC_SetFlashLatency+0xf4>)
 8005d7c:	f107 0320 	add.w	r3, r7, #32
 8005d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d84:	6018      	str	r0, [r3, #0]
 8005d86:	3304      	adds	r3, #4
 8005d88:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005d8a:	4a37      	ldr	r2, [pc, #220]	; (8005e68 <RCC_SetFlashLatency+0xf8>)
 8005d8c:	f107 0318 	add.w	r3, r7, #24
 8005d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d94:	6018      	str	r0, [r3, #0]
 8005d96:	3304      	adds	r3, #4
 8005d98:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005d9a:	4a34      	ldr	r2, [pc, #208]	; (8005e6c <RCC_SetFlashLatency+0xfc>)
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005da2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005da6:	2300      	movs	r3, #0
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db0:	d11b      	bne.n	8005dea <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005db2:	2300      	movs	r3, #0
 8005db4:	633b      	str	r3, [r7, #48]	; 0x30
 8005db6:	e014      	b.n	8005de2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	3338      	adds	r3, #56	; 0x38
 8005dbe:	443b      	add	r3, r7
 8005dc0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d807      	bhi.n	8005ddc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	3338      	adds	r3, #56	; 0x38
 8005dd2:	443b      	add	r3, r7
 8005dd4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dda:	e021      	b.n	8005e20 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	3301      	adds	r3, #1
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d9e7      	bls.n	8005db8 <RCC_SetFlashLatency+0x48>
 8005de8:	e01a      	b.n	8005e20 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dee:	e014      	b.n	8005e1a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	3338      	adds	r3, #56	; 0x38
 8005df6:	443b      	add	r3, r7
 8005df8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d807      	bhi.n	8005e14 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	3338      	adds	r3, #56	; 0x38
 8005e0a:	443b      	add	r3, r7
 8005e0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e12:	e005      	b.n	8005e20 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	3301      	adds	r3, #1
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d9e7      	bls.n	8005df0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <RCC_SetFlashLatency+0x100>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 0207 	bic.w	r2, r3, #7
 8005e28:	4911      	ldr	r1, [pc, #68]	; (8005e70 <RCC_SetFlashLatency+0x100>)
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e30:	f7fb feca 	bl	8001bc8 <HAL_GetTick>
 8005e34:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e36:	e008      	b.n	8005e4a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e38:	f7fb fec6 	bl	8001bc8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e007      	b.n	8005e5a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <RCC_SetFlashLatency+0x100>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1ef      	bne.n	8005e38 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3738      	adds	r7, #56	; 0x38
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	0801b018 	.word	0x0801b018
 8005e68:	0801b020 	.word	0x0801b020
 8005e6c:	0801b028 	.word	0x0801b028
 8005e70:	58004000 	.word	0x58004000

08005e74 <LL_RCC_LSE_IsReady>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d101      	bne.n	8005e8c <LL_RCC_LSE_IsReady+0x18>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <LL_RCC_LSE_IsReady+0x1a>
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <LL_RCC_SetUSARTClockSource>:
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	401a      	ands	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <LL_RCC_SetI2SClockSource>:
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr

08005ef0 <LL_RCC_SetLPUARTClockSource>:
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_SetI2CClockSource>:
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f32:	43db      	mvns	r3, r3
 8005f34:	401a      	ands	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <LL_RCC_SetLPTIMClockSource>:
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <LL_RCC_SetRNGClockSource>:
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <LL_RCC_SetADCClockSource>:
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <LL_RCC_SetRTCClockSource>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <LL_RCC_GetRTCClockSource>:
{
 8006002:	b480      	push	{r7}
 8006004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006012:	4618      	mov	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <LL_RCC_ForceBackupDomainReset>:
{
 800601a:	b480      	push	{r7}
 800601c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800602a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <LL_RCC_ReleaseBackupDomainReset>:
{
 800603a:	b480      	push	{r7}
 800603c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800603e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006052:	bf00      	nop
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
	...

0800605c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006068:	2300      	movs	r3, #0
 800606a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800606c:	2300      	movs	r3, #0
 800606e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d058      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800607c:	f7fe fd64 	bl	8004b48 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006080:	f7fb fda2 	bl	8001bc8 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006086:	e009      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006088:	f7fb fd9e 	bl	8001bc8 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d902      	bls.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	74fb      	strb	r3, [r7, #19]
        break;
 800609a:	e006      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800609c:	4b7b      	ldr	r3, [pc, #492]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d1ee      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d13c      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80060b0:	f7ff ffa7 	bl	8006002 <LL_RCC_GetRTCClockSource>
 80060b4:	4602      	mov	r2, r0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d00f      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060cc:	f7ff ffa5 	bl	800601a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060d0:	f7ff ffb3 	bl	800603a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d014      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fb fd6e 	bl	8001bc8 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80060ee:	e00b      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f0:	f7fb fd6a 	bl	8001bc8 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d902      	bls.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	74fb      	strb	r3, [r7, #19]
            break;
 8006106:	e004      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006108:	f7ff feb4 	bl	8005e74 <LL_RCC_LSE_IsReady>
 800610c:	4603      	mov	r3, r0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d1ee      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff ff5b 	bl	8005fd8 <LL_RCC_SetRTCClockSource>
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	74bb      	strb	r3, [r7, #18]
 8006128:	e001      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	7cfb      	ldrb	r3, [r7, #19]
 800612c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fea9 	bl	8005e96 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fe9e 	bl	8005e96 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fec0 	bl	8005ef0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fee6 	bl	8005f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fedb 	bl	8005f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff fed0 	bl	8005f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff fea9 	bl	8005f1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fe9e 	bl	8005f1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fe93 	bl	8005f1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d011      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fe5e 	bl	8005ec6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	d107      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006222:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fea5 	bl	8005f84 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	2b00      	cmp	r3, #0
 8006240:	d107      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800624c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006250:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d011      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff fea3 	bl	8005fae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006270:	d107      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006282:	7cbb      	ldrb	r3, [r7, #18]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	58000400 	.word	0x58000400

08006290 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d068      	beq.n	8006374 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fb f9e2 	bl	8001680 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062c4:	4b2e      	ldr	r3, [pc, #184]	; (8006380 <HAL_RTC_Init+0xf0>)
 80062c6:	22ca      	movs	r2, #202	; 0xca
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24
 80062ca:	4b2d      	ldr	r3, [pc, #180]	; (8006380 <HAL_RTC_Init+0xf0>)
 80062cc:	2253      	movs	r2, #83	; 0x53
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa0f 	bl	80066f4 <RTC_EnterInitMode>
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d13f      	bne.n	8006360 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <HAL_RTC_Init+0xf0>)
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_RTC_Init+0xf0>)
 80062e6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80062ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ee:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <HAL_RTC_Init+0xf0>)
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	4319      	orrs	r1, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	430b      	orrs	r3, r1
 8006304:	491e      	ldr	r1, [pc, #120]	; (8006380 <HAL_RTC_Init+0xf0>)
 8006306:	4313      	orrs	r3, r2
 8006308:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	491a      	ldr	r1, [pc, #104]	; (8006380 <HAL_RTC_Init+0xf0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800631a:	4b19      	ldr	r3, [pc, #100]	; (8006380 <HAL_RTC_Init+0xf0>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	430b      	orrs	r3, r1
 800632c:	4914      	ldr	r1, [pc, #80]	; (8006380 <HAL_RTC_Init+0xf0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa12 	bl	800675c <RTC_ExitInitMode>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10e      	bne.n	8006360 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006342:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <HAL_RTC_Init+0xf0>)
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a19      	ldr	r1, [r3, #32]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	4319      	orrs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	430b      	orrs	r3, r1
 800635a:	4909      	ldr	r1, [pc, #36]	; (8006380 <HAL_RTC_Init+0xf0>)
 800635c:	4313      	orrs	r3, r2
 800635e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <HAL_RTC_Init+0xf0>)
 8006362:	22ff      	movs	r2, #255	; 0xff
 8006364:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40002800 	.word	0x40002800

08006384 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_RTC_SetAlarm_IT+0x1e>
 800639e:	2302      	movs	r3, #2
 80063a0:	e0f3      	b.n	800658a <HAL_RTC_SetAlarm_IT+0x206>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80063b2:	4b78      	ldr	r3, [pc, #480]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c2:	d06a      	beq.n	800649a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d13a      	bne.n	8006440 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80063ca:	4b72      	ldr	r3, [pc, #456]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 f9f5 	bl	80067d8 <RTC_ByteToBcd2>
 80063ee:	4603      	mov	r3, r0
 80063f0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f9ee 	bl	80067d8 <RTC_ByteToBcd2>
 80063fc:	4603      	mov	r3, r0
 80063fe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006400:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	789b      	ldrb	r3, [r3, #2]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f9e6 	bl	80067d8 <RTC_ByteToBcd2>
 800640c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800640e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006418:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f9d8 	bl	80067d8 <RTC_ByteToBcd2>
 8006428:	4603      	mov	r3, r0
 800642a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800642c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006434:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	e02c      	b.n	800649a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006448:	d00d      	beq.n	8006466 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006452:	d008      	beq.n	8006466 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006454:	4b4f      	ldr	r3, [pc, #316]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006472:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006478:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006480:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006488:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800648a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006490:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800649a:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 800649c:	22ca      	movs	r2, #202	; 0xca
 800649e:	625a      	str	r2, [r3, #36]	; 0x24
 80064a0:	4b3c      	ldr	r3, [pc, #240]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064a2:	2253      	movs	r2, #83	; 0x53
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ae:	d12c      	bne.n	800650a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80064b0:	4b38      	ldr	r3, [pc, #224]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	4a37      	ldr	r2, [pc, #220]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80064ba:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80064bc:	4b35      	ldr	r3, [pc, #212]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064be:	2201      	movs	r2, #1
 80064c0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c8:	d107      	bne.n	80064da <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4930      	ldr	r1, [pc, #192]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	644b      	str	r3, [r1, #68]	; 0x44
 80064d8:	e006      	b.n	80064e8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80064da:	4a2e      	ldr	r2, [pc, #184]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80064e0:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80064e8:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	f043 0201 	orr.w	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006502:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006506:	6193      	str	r3, [r2, #24]
 8006508:	e02b      	b.n	8006562 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800650a:	4b22      	ldr	r3, [pc, #136]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	4a21      	ldr	r2, [pc, #132]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006510:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006514:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006516:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006518:	2202      	movs	r2, #2
 800651a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d107      	bne.n	8006534 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	4919      	ldr	r1, [pc, #100]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 800652e:	4313      	orrs	r3, r2
 8006530:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006532:	e006      	b.n	8006542 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800653a:	4a16      	ldr	r2, [pc, #88]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006542:	4a14      	ldr	r2, [pc, #80]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	f043 0202 	orr.w	r2, r3, #2
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 800655c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006560:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <HAL_RTC_SetAlarm_IT+0x214>)
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <HAL_RTC_SetAlarm_IT+0x214>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <HAL_RTC_SetAlarm_IT+0x210>)
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}
 8006592:	bf00      	nop
 8006594:	40002800 	.word	0x40002800
 8006598:	58000800 	.word	0x58000800

0800659c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_RTC_DeactivateAlarm+0x18>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e048      	b.n	8006646 <HAL_RTC_DeactivateAlarm+0xaa>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065c4:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065c6:	22ca      	movs	r2, #202	; 0xca
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065cc:	2253      	movs	r2, #83	; 0x53
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d6:	d115      	bne.n	8006604 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80065d8:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065e2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80065e4:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e8:	4a19      	ldr	r2, [pc, #100]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	f023 0201 	bic.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065fe:	2201      	movs	r2, #1
 8006600:	65da      	str	r2, [r3, #92]	; 0x5c
 8006602:	e014      	b.n	800662e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006604:	4b12      	ldr	r3, [pc, #72]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	4a11      	ldr	r2, [pc, #68]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 800660a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800660e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006610:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006614:	4a0e      	ldr	r2, [pc, #56]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800661a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	f023 0202 	bic.w	r2, r3, #2
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006628:	4b09      	ldr	r3, [pc, #36]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 800662a:	2202      	movs	r2, #2
 800662c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006630:	22ff      	movs	r2, #255	; 0xff
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr
 8006650:	40002800 	.word	0x40002800

08006654 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800665e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006674:	2201      	movs	r2, #1
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fb fc6e 	bl	8001f5a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006688:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800668a:	2202      	movs	r2, #2
 800668c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f94a 	bl	8006928 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40002800 	.word	0x40002800

080066a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <HAL_RTC_WaitForSynchro+0x48>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <HAL_RTC_WaitForSynchro+0x48>)
 80066b6:	f023 0320 	bic.w	r3, r3, #32
 80066ba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80066bc:	f7fb fa84 	bl	8001bc8 <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80066c2:	e009      	b.n	80066d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066c4:	f7fb fa80 	bl	8001bc8 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066d2:	d901      	bls.n	80066d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e006      	b.n	80066e6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <HAL_RTC_WaitForSynchro+0x48>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0ef      	beq.n	80066c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40002800 	.word	0x40002800

080066f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006700:	4b15      	ldr	r3, [pc, #84]	; (8006758 <RTC_EnterInitMode+0x64>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d120      	bne.n	800674e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800670c:	4b12      	ldr	r3, [pc, #72]	; (8006758 <RTC_EnterInitMode+0x64>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a11      	ldr	r2, [pc, #68]	; (8006758 <RTC_EnterInitMode+0x64>)
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006718:	f7fb fa56 	bl	8001bc8 <HAL_GetTick>
 800671c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800671e:	e00d      	b.n	800673c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006720:	f7fb fa52 	bl	8001bc8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800672e:	d905      	bls.n	800673c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2203      	movs	r2, #3
 8006738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <RTC_EnterInitMode+0x64>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <RTC_EnterInitMode+0x5a>
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d1e8      	bne.n	8006720 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40002800 	.word	0x40002800

0800675c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006768:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <RTC_ExitInitMode+0x78>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4a19      	ldr	r2, [pc, #100]	; (80067d4 <RTC_ExitInitMode+0x78>)
 800676e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006772:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <RTC_ExitInitMode+0x78>)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10c      	bne.n	800679a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff91 	bl	80066a8 <HAL_RTC_WaitForSynchro>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01e      	beq.n	80067ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2203      	movs	r2, #3
 8006790:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
 8006798:	e017      	b.n	80067ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800679a:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <RTC_ExitInitMode+0x78>)
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	4a0d      	ldr	r2, [pc, #52]	; (80067d4 <RTC_ExitInitMode+0x78>)
 80067a0:	f023 0320 	bic.w	r3, r3, #32
 80067a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff ff7e 	bl	80066a8 <HAL_RTC_WaitForSynchro>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2203      	movs	r2, #3
 80067b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <RTC_ExitInitMode+0x78>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <RTC_ExitInitMode+0x78>)
 80067c4:	f043 0320 	orr.w	r3, r3, #32
 80067c8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40002800 	.word	0x40002800

080067d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80067ea:	e005      	b.n	80067f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	3b0a      	subs	r3, #10
 80067f6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	2b09      	cmp	r3, #9
 80067fc:	d8f6      	bhi.n	80067ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	b2da      	uxtb	r2, r3
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	4313      	orrs	r3, r2
 800680a:	b2db      	uxtb	r3, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
	...

08006818 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_RTCEx_EnableBypassShadow+0x16>
 800682a:	2302      	movs	r3, #2
 800682c:	e01f      	b.n	800686e <HAL_RTCEx_EnableBypassShadow+0x56>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800683e:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006840:	22ca      	movs	r2, #202	; 0xca
 8006842:	625a      	str	r2, [r3, #36]	; 0x24
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006846:	2253      	movs	r2, #83	; 0x53
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800684a:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006850:	f043 0320 	orr.w	r3, r3, #32
 8006854:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006858:	22ff      	movs	r2, #255	; 0xff
 800685a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	40002800 	.word	0x40002800

0800687c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_RTCEx_SetSSRU_IT+0x16>
 800688e:	2302      	movs	r3, #2
 8006890:	e027      	b.n	80068e2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068a4:	22ca      	movs	r2, #202	; 0xca
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24
 80068a8:	4b10      	ldr	r3, [pc, #64]	; (80068ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068aa:	2253      	movs	r2, #83	; 0x53
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	4a0e      	ldr	r2, [pc, #56]	; (80068ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80068ba:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80068bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c0:	4a0b      	ldr	r2, [pc, #44]	; (80068f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80068c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ca:	4b08      	ldr	r3, [pc, #32]	; (80068ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr
 80068ec:	40002800 	.word	0x40002800
 80068f0:	58000800 	.word	0x58000800

080068f4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80068fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fb fb2d 	bl	8001f6e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40002800 	.word	0x40002800

08006928 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
	...

0800693c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_RTCEx_BKUPWrite+0x2c>)
 800694a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4413      	add	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	601a      	str	r2, [r3, #0]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	4000b100 	.word	0x4000b100

0800696c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <HAL_RTCEx_BKUPRead+0x28>)
 8006978:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	4000b100 	.word	0x4000b100

08006998 <LL_PWR_SetRadioBusyTrigger>:
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069a8:	4904      	ldr	r1, [pc, #16]	; (80069bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	608b      	str	r3, [r1, #8]
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	58000400 	.word	0x58000400

080069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ca:	4a04      	ldr	r2, [pc, #16]	; (80069dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80069cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr
 80069dc:	58000400 	.word	0x58000400

080069e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80069e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ea:	4a04      	ldr	r2, [pc, #16]	; (80069fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80069ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr
 80069fc:	58000400 	.word	0x58000400

08006a00 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a04:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a0a:	619a      	str	r2, [r3, #24]
}
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	58000400 	.word	0x58000400

08006a18 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d101      	bne.n	8006a2c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	58000400 	.word	0x58000400

08006a3c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d101      	bne.n	8006a50 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	58000400 	.word	0x58000400

08006a60 <LL_RCC_RF_DisableReset>:
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <LL_RCC_IsRFUnderReset>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a94:	d101      	bne.n	8006a9a <LL_RCC_IsRFUnderReset+0x1a>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <LL_RCC_IsRFUnderReset+0x1c>
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <LL_EXTI_EnableIT_32_63+0x24>)
 8006aae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ab2:	4905      	ldr	r1, [pc, #20]	; (8006ac8 <LL_EXTI_EnableIT_32_63+0x24>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	58000800 	.word	0x58000800

08006acc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
    return status;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	e04b      	b.n	8006b7a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	799b      	ldrb	r3, [r3, #6]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fec2 	bl	8001880 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006b02:	f7ff ffad 	bl	8006a60 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b06:	4b1f      	ldr	r3, [pc, #124]	; (8006b84 <HAL_SUBGHZ_Init+0xb8>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	0cdb      	lsrs	r3, r3, #19
 8006b14:	2264      	movs	r2, #100	; 0x64
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
 8006b1a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	609a      	str	r2, [r3, #8]
      break;
 8006b2c:	e007      	b.n	8006b3e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006b34:	f7ff ffa4 	bl	8006a80 <LL_RCC_IsRFUnderReset>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1ee      	bne.n	8006b1c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b3e:	f7ff ff3f 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006b42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b46:	f7ff ffad 	bl	8006aa4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006b4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b4e:	f7ff ff23 	bl	8006998 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006b52:	f7ff ff55 	bl	8006a00 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 faad 	bl	80070c0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	719a      	strb	r2, [r3, #6]

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000000 	.word	0x20000000

08006b88 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	461a      	mov	r2, r3
 8006b94:	460b      	mov	r3, r1
 8006b96:	817b      	strh	r3, [r7, #10]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	799b      	ldrb	r3, [r3, #6]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d14a      	bne.n	8006c3c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	795b      	ldrb	r3, [r3, #5]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e045      	b.n	8006c3e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fb4c 	bl	800725c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006bc4:	f7ff ff0c 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006bc8:	210d      	movs	r1, #13
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa98 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006bd0:	897b      	ldrh	r3, [r7, #10]
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 fa90 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006be0:	897b      	ldrh	r3, [r7, #10]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fa8a 	bl	8007100 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006bec:	2300      	movs	r3, #0
 8006bee:	82bb      	strh	r3, [r7, #20]
 8006bf0:	e00a      	b.n	8006c08 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006bf2:	8abb      	ldrh	r3, [r7, #20]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fa7f 	bl	8007100 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c02:	8abb      	ldrh	r3, [r7, #20]
 8006c04:	3301      	adds	r3, #1
 8006c06:	82bb      	strh	r3, [r7, #20]
 8006c08:	8aba      	ldrh	r2, [r7, #20]
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d3f0      	bcc.n	8006bf2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c10:	f7ff fed6 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fb45 	bl	80072a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
 8006c26:	e001      	b.n	8006c2c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	715a      	strb	r2, [r3, #5]

    return status;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	e000      	b.n	8006c3e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b088      	sub	sp, #32
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	461a      	mov	r2, r3
 8006c52:	460b      	mov	r3, r1
 8006c54:	817b      	strh	r3, [r7, #10]
 8006c56:	4613      	mov	r3, r2
 8006c58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	799b      	ldrb	r3, [r3, #6]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d14a      	bne.n	8006cfe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e045      	b.n	8006d00 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 faee 	bl	800725c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c80:	f7ff feae 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006c84:	211d      	movs	r1, #29
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fa3a 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c8c:	897b      	ldrh	r3, [r7, #10]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	4619      	mov	r1, r3
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fa32 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006c9c:	897b      	ldrh	r3, [r7, #10]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fa2c 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fa28 	bl	8007100 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	82fb      	strh	r3, [r7, #22]
 8006cb4:	e009      	b.n	8006cca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006cb6:	69b9      	ldr	r1, [r7, #24]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fa77 	bl	80071ac <SUBGHZSPI_Receive>
      pData++;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	82fb      	strh	r3, [r7, #22]
 8006cca:	8afa      	ldrh	r2, [r7, #22]
 8006ccc:	893b      	ldrh	r3, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d3f1      	bcc.n	8006cb6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006cd2:	f7ff fe75 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fae4 	bl	80072a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e001      	b.n	8006cee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	715a      	strb	r2, [r3, #5]

    return status;
 8006cfa:	7ffb      	ldrb	r3, [r7, #31]
 8006cfc:	e000      	b.n	8006d00 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	461a      	mov	r2, r3
 8006d14:	460b      	mov	r3, r1
 8006d16:	72fb      	strb	r3, [r7, #11]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	799b      	ldrb	r3, [r3, #6]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d14a      	bne.n	8006dbc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	795b      	ldrb	r3, [r3, #5]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e045      	b.n	8006dbe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 fa8f 	bl	800725c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b84      	cmp	r3, #132	; 0x84
 8006d42:	d002      	beq.n	8006d4a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006d44:	7afb      	ldrb	r3, [r7, #11]
 8006d46:	2b94      	cmp	r3, #148	; 0x94
 8006d48:	d103      	bne.n	8006d52 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	711a      	strb	r2, [r3, #4]
 8006d50:	e002      	b.n	8006d58 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d58:	f7ff fe42 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f9cd 	bl	8007100 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d66:	2300      	movs	r3, #0
 8006d68:	82bb      	strh	r3, [r7, #20]
 8006d6a:	e00a      	b.n	8006d82 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d6c:	8abb      	ldrh	r3, [r7, #20]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f9c2 	bl	8007100 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d7c:	8abb      	ldrh	r3, [r7, #20]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	82bb      	strh	r3, [r7, #20]
 8006d82:	8aba      	ldrh	r2, [r7, #20]
 8006d84:	893b      	ldrh	r3, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d3f0      	bcc.n	8006d6c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d8a:	f7ff fe19 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006d8e:	7afb      	ldrb	r3, [r7, #11]
 8006d90:	2b84      	cmp	r3, #132	; 0x84
 8006d92:	d002      	beq.n	8006d9a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fa85 	bl	80072a4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	75fb      	strb	r3, [r7, #23]
 8006da6:	e001      	b.n	8006dac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	715a      	strb	r2, [r3, #5]

    return status;
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	e000      	b.n	8006dbe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b088      	sub	sp, #32
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	72fb      	strb	r3, [r7, #11]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	799b      	ldrb	r3, [r3, #6]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d13d      	bne.n	8006e64 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	795b      	ldrb	r3, [r3, #5]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e038      	b.n	8006e66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa2e 	bl	800725c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e00:	f7ff fdee 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f979 	bl	8007100 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006e0e:	2100      	movs	r1, #0
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f975 	bl	8007100 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	82fb      	strh	r3, [r7, #22]
 8006e1a:	e009      	b.n	8006e30 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f9c4 	bl	80071ac <SUBGHZSPI_Receive>
      pData++;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006e2a:	8afb      	ldrh	r3, [r7, #22]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	82fb      	strh	r3, [r7, #22]
 8006e30:	8afa      	ldrh	r2, [r7, #22]
 8006e32:	893b      	ldrh	r3, [r7, #8]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d3f1      	bcc.n	8006e1c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e38:	f7ff fdc2 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fa31 	bl	80072a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e001      	b.n	8006e54 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	715a      	strb	r2, [r3, #5]

    return status;
 8006e60:	7ffb      	ldrb	r3, [r7, #31]
 8006e62:	e000      	b.n	8006e66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	72fb      	strb	r3, [r7, #11]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	799b      	ldrb	r3, [r3, #6]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d13e      	bne.n	8006f0a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	795b      	ldrb	r3, [r3, #5]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e039      	b.n	8006f0c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 f9dc 	bl	800725c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ea4:	f7ff fd9c 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006ea8:	210e      	movs	r1, #14
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f928 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f923 	bl	8007100 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	82bb      	strh	r3, [r7, #20]
 8006ebe:	e00a      	b.n	8006ed6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ec0:	8abb      	ldrh	r3, [r7, #20]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 f918 	bl	8007100 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ed0:	8abb      	ldrh	r3, [r7, #20]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	82bb      	strh	r3, [r7, #20]
 8006ed6:	8aba      	ldrh	r2, [r7, #20]
 8006ed8:	893b      	ldrh	r3, [r7, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d3f0      	bcc.n	8006ec0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ede:	f7ff fd6f 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f9de 	bl	80072a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
 8006ef4:	e001      	b.n	8006efa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	715a      	strb	r2, [r3, #5]

    return status;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	e000      	b.n	8006f0c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	460b      	mov	r3, r1
 8006f22:	72fb      	strb	r3, [r7, #11]
 8006f24:	4613      	mov	r3, r2
 8006f26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	799b      	ldrb	r3, [r3, #6]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d141      	bne.n	8006fba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	795b      	ldrb	r3, [r3, #5]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e03c      	b.n	8006fbc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f987 	bl	800725c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f4e:	f7ff fd47 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006f52:	211e      	movs	r1, #30
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f8d3 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f8ce 	bl	8007100 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f64:	2100      	movs	r1, #0
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f8ca 	bl	8007100 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	82fb      	strh	r3, [r7, #22]
 8006f70:	e009      	b.n	8006f86 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f919 	bl	80071ac <SUBGHZSPI_Receive>
      pData++;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f80:	8afb      	ldrh	r3, [r7, #22]
 8006f82:	3301      	adds	r3, #1
 8006f84:	82fb      	strh	r3, [r7, #22]
 8006f86:	8afa      	ldrh	r2, [r7, #22]
 8006f88:	893b      	ldrh	r3, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d3f1      	bcc.n	8006f72 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f8e:	f7ff fd17 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f986 	bl	80072a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e001      	b.n	8006faa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	715a      	strb	r2, [r3, #5]

    return status;
 8006fb6:	7ffb      	ldrb	r3, [r7, #31]
 8006fb8:	e000      	b.n	8006fbc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006fcc:	2300      	movs	r3, #0
 8006fce:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006fd0:	f107 020c 	add.w	r2, r7, #12
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	2112      	movs	r1, #18
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fef4 	bl	8006dc6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006fde:	7b3b      	ldrb	r3, [r7, #12]
 8006fe0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006fe2:	89fb      	ldrh	r3, [r7, #14]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	b21a      	sxth	r2, r3
 8006fe8:	7b7b      	ldrb	r3, [r7, #13]
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b21b      	sxth	r3, r3
 8006ff0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f011 fd83 	bl	8018b08 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007002:	89fb      	ldrh	r3, [r7, #14]
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f011 fd88 	bl	8018b24 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f011 fdd7 	bl	8018bd4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007026:	89fb      	ldrh	r3, [r7, #14]
 8007028:	08db      	lsrs	r3, r3, #3
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f011 fddc 	bl	8018bf0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f011 fde1 	bl	8018c0c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800704a:	89fb      	ldrh	r3, [r7, #14]
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f011 fdae 	bl	8018bb8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800705c:	89fb      	ldrh	r3, [r7, #14]
 800705e:	099b      	lsrs	r3, r3, #6
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f011 fd69 	bl	8018b40 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800706e:	89fb      	ldrh	r3, [r7, #14]
 8007070:	09db      	lsrs	r3, r3, #7
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800707a:	89fb      	ldrh	r3, [r7, #14]
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007086:	2101      	movs	r1, #1
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f011 fd67 	bl	8018b5c <HAL_SUBGHZ_CADStatusCallback>
 800708e:	e003      	b.n	8007098 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007090:	2100      	movs	r1, #0
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f011 fd62 	bl	8018b5c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007098:	89fb      	ldrh	r3, [r7, #14]
 800709a:	0a5b      	lsrs	r3, r3, #9
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f011 fd77 	bl	8018b98 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80070aa:	f107 020c 	add.w	r2, r7, #12
 80070ae:	2302      	movs	r3, #2
 80070b0:	2102      	movs	r1, #2
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe28 	bl	8006d08 <HAL_SUBGHZ_ExecSetCmd>
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <SUBGHZSPI_Init+0x3c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <SUBGHZSPI_Init+0x3c>)
 80070ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80070d4:	4a09      	ldr	r2, [pc, #36]	; (80070fc <SUBGHZSPI_Init+0x3c>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80070dc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <SUBGHZSPI_Init+0x3c>)
 80070e0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80070e4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <SUBGHZSPI_Init+0x3c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a04      	ldr	r2, [pc, #16]	; (80070fc <SUBGHZSPI_Init+0x3c>)
 80070ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f0:	6013      	str	r3, [r2, #0]
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	58010000 	.word	0x58010000

08007100 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007110:	4b23      	ldr	r3, [pc, #140]	; (80071a0 <SUBGHZSPI_Transmit+0xa0>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	0cdb      	lsrs	r3, r3, #19
 800711e:	2264      	movs	r2, #100	; 0x64
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	609a      	str	r2, [r3, #8]
      break;
 8007136:	e008      	b.n	800714a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3b01      	subs	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800713e:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <SUBGHZSPI_Transmit+0xa4>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b02      	cmp	r3, #2
 8007148:	d1ed      	bne.n	8007126 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800714a:	4b17      	ldr	r3, [pc, #92]	; (80071a8 <SUBGHZSPI_Transmit+0xa8>)
 800714c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007154:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <SUBGHZSPI_Transmit+0xa0>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	0cdb      	lsrs	r3, r3, #19
 8007162:	2264      	movs	r2, #100	; 0x64
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	609a      	str	r2, [r3, #8]
      break;
 800717a:	e008      	b.n	800718e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3b01      	subs	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <SUBGHZSPI_Transmit+0xa4>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b01      	cmp	r3, #1
 800718c:	d1ed      	bne.n	800716a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800718e:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <SUBGHZSPI_Transmit+0xa4>)
 8007190:	68db      	ldr	r3, [r3, #12]

  return status;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20000000 	.word	0x20000000
 80071a4:	58010000 	.word	0x58010000
 80071a8:	5801000c 	.word	0x5801000c

080071ac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071ba:	4b25      	ldr	r3, [pc, #148]	; (8007250 <SUBGHZSPI_Receive+0xa4>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	0cdb      	lsrs	r3, r3, #19
 80071c8:	2264      	movs	r2, #100	; 0x64
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d105      	bne.n	80071e2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	609a      	str	r2, [r3, #8]
      break;
 80071e0:	e008      	b.n	80071f4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <SUBGHZSPI_Receive+0xa8>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d1ed      	bne.n	80071d0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80071f4:	4b18      	ldr	r3, [pc, #96]	; (8007258 <SUBGHZSPI_Receive+0xac>)
 80071f6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	22ff      	movs	r2, #255	; 0xff
 80071fc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071fe:	4b14      	ldr	r3, [pc, #80]	; (8007250 <SUBGHZSPI_Receive+0xa4>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	0cdb      	lsrs	r3, r3, #19
 800720c:	2264      	movs	r2, #100	; 0x64
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	609a      	str	r2, [r3, #8]
      break;
 8007224:	e008      	b.n	8007238 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3b01      	subs	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <SUBGHZSPI_Receive+0xa8>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d1ed      	bne.n	8007214 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007238:	4b06      	ldr	r3, [pc, #24]	; (8007254 <SUBGHZSPI_Receive+0xa8>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	701a      	strb	r2, [r3, #0]

  return status;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000000 	.word	0x20000000
 8007254:	58010000 	.word	0x58010000
 8007258:	5801000c 	.word	0x5801000c

0800725c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d111      	bne.n	8007290 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <SUBGHZ_CheckDeviceReady+0x44>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800727c:	f7ff fbb0 	bl	80069e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3b01      	subs	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f9      	bne.n	8007280 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800728c:	f7ff fb98 	bl	80069c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f807 	bl	80072a4 <SUBGHZ_WaitOnBusy>
 8007296:	4603      	mov	r3, r0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000000 	.word	0x20000000

080072a4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80072b0:	4b12      	ldr	r3, [pc, #72]	; (80072fc <SUBGHZ_WaitOnBusy+0x58>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	0d1b      	lsrs	r3, r3, #20
 80072be:	2264      	movs	r2, #100	; 0x64
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80072c6:	f7ff fbb9 	bl	8006a3c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80072ca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	609a      	str	r2, [r3, #8]
      break;
 80072dc:	e009      	b.n	80072f2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80072e4:	f7ff fb98 	bl	8006a18 <LL_PWR_IsActiveFlag_RFBUSYS>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	4013      	ands	r3, r2
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d0e9      	beq.n	80072c6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000000 	.word	0x20000000

08007300 <LL_RCC_GetUSARTClockSource>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	401a      	ands	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	4313      	orrs	r3, r2
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <LL_RCC_GetLPUARTClockSource>:
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800732c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007330:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4013      	ands	r3, r2
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e042      	b.n	80073da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fa ff66 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc4b 	bl	8007c20 <UART_SetConfig>
 800738a:	4603      	mov	r3, r0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e022      	b.n	80073da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 feb3 	bl	8008108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 ff39 	bl	800824a <UART_CheckIdleState>
 80073d8:	4603      	mov	r3, r0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	; 0x28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d142      	bne.n	8007482 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_UART_Receive_IT+0x24>
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e03b      	b.n	8007484 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UART_Receive_IT+0x36>
 8007416:	2302      	movs	r3, #2
 8007418:	e034      	b.n	8007484 <HAL_UART_Receive_IT+0xa0>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a17      	ldr	r2, [pc, #92]	; (800748c <HAL_UART_Receive_IT+0xa8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01f      	beq.n	8007472 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d018      	beq.n	8007472 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	613b      	str	r3, [r7, #16]
   return(result);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	69f9      	ldr	r1, [r7, #28]
 8007464:	6a3a      	ldr	r2, [r7, #32]
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	61bb      	str	r3, [r7, #24]
   return(result);
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	461a      	mov	r2, r3
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fff9 	bl	8008470 <UART_Start_Receive_IT>
 800747e:	4603      	mov	r3, r0
 8007480:	e000      	b.n	8007484 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007482:	2302      	movs	r3, #2
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40008000 	.word	0x40008000

08007490 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d17a      	bne.n	800759e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <HAL_UART_Transmit_DMA+0x24>
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e073      	b.n	80075a0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Transmit_DMA+0x36>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e06c      	b.n	80075a0 <HAL_UART_Transmit_DMA+0x110>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2221      	movs	r2, #33	; 0x21
 80074f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d02c      	beq.n	8007556 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007500:	4a29      	ldr	r2, [pc, #164]	; (80075a8 <HAL_UART_Transmit_DMA+0x118>)
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007508:	4a28      	ldr	r2, [pc, #160]	; (80075ac <HAL_UART_Transmit_DMA+0x11c>)
 800750a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007510:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <HAL_UART_Transmit_DMA+0x120>)
 8007512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007518:	2200      	movs	r2, #0
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	4619      	mov	r1, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3328      	adds	r3, #40	; 0x28
 800752c:	461a      	mov	r2, r3
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	f7fc fbb6 	bl	8003ca0 <HAL_DMA_Start_IT>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2210      	movs	r2, #16
 800753e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e024      	b.n	80075a0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	613b      	str	r3, [r7, #16]
   return(result);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	623a      	str	r2, [r7, #32]
 8007588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	61bb      	str	r3, [r7, #24]
   return(result);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	0800880b 	.word	0x0800880b
 80075ac:	080088a5 	.word	0x080088a5
 80075b0:	080088c1 	.word	0x080088c1

080075b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b0ba      	sub	sp, #232	; 0xe8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075de:	f640 030f 	movw	r3, #2063	; 0x80f
 80075e2:	4013      	ands	r3, r2
 80075e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11b      	bne.n	8007628 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d015      	beq.n	8007628 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b00      	cmp	r3, #0
 8007606:	d105      	bne.n	8007614 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800760c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 82d6 	beq.w	8007bca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
      }
      return;
 8007626:	e2d0      	b.n	8007bca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 811f 	beq.w	8007870 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007632:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007636:	4b8b      	ldr	r3, [pc, #556]	; (8007864 <HAL_UART_IRQHandler+0x2b0>)
 8007638:	4013      	ands	r3, r2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800763e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007642:	4b89      	ldr	r3, [pc, #548]	; (8007868 <HAL_UART_IRQHandler+0x2b4>)
 8007644:	4013      	ands	r3, r2
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8112 	beq.w	8007870 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d011      	beq.n	800767c <HAL_UART_IRQHandler+0xc8>
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007672:	f043 0201 	orr.w	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800767c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d011      	beq.n	80076ac <HAL_UART_IRQHandler+0xf8>
 8007688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2202      	movs	r2, #2
 800769a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076a2:	f043 0204 	orr.w	r2, r3, #4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d011      	beq.n	80076dc <HAL_UART_IRQHandler+0x128>
 80076b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2204      	movs	r2, #4
 80076ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d017      	beq.n	8007718 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d105      	bne.n	8007700 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076f8:	4b5a      	ldr	r3, [pc, #360]	; (8007864 <HAL_UART_IRQHandler+0x2b0>)
 80076fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2208      	movs	r2, #8
 8007706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770e:	f043 0208 	orr.w	r2, r3, #8
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007720:	2b00      	cmp	r3, #0
 8007722:	d012      	beq.n	800774a <HAL_UART_IRQHandler+0x196>
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00c      	beq.n	800774a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007740:	f043 0220 	orr.w	r2, r3, #32
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 823c 	beq.w	8007bce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d013      	beq.n	800778a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d105      	bne.n	800777a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800776e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b40      	cmp	r3, #64	; 0x40
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d04f      	beq.n	800784e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ffc6 	bl	8008740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d141      	bne.n	8007846 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1d9      	bne.n	80077c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d013      	beq.n	800783e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781a:	4a14      	ldr	r2, [pc, #80]	; (800786c <HAL_UART_IRQHandler+0x2b8>)
 800781c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007822:	4618      	mov	r0, r3
 8007824:	f7fc fb18 	bl	8003e58 <HAL_DMA_Abort_IT>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d017      	beq.n	800785e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007838:	4610      	mov	r0, r2
 800783a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	e00f      	b.n	800785e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9d9 	bl	8007bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007844:	e00b      	b.n	800785e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9d5 	bl	8007bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	e007      	b.n	800785e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9d1 	bl	8007bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800785c:	e1b7      	b.n	8007bce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785e:	bf00      	nop
    return;
 8007860:	e1b5      	b.n	8007bce <HAL_UART_IRQHandler+0x61a>
 8007862:	bf00      	nop
 8007864:	10000001 	.word	0x10000001
 8007868:	04000120 	.word	0x04000120
 800786c:	08008941 	.word	0x08008941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007874:	2b01      	cmp	r3, #1
 8007876:	f040 814a 	bne.w	8007b0e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8143 	beq.w	8007b0e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 813c 	beq.w	8007b0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2210      	movs	r2, #16
 800789c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	f040 80b5 	bne.w	8007a18 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80078ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8187 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ce:	429a      	cmp	r2, r3
 80078d0:	f080 817f 	bcs.w	8007bd2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 8086 	bne.w	80079fc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800790c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800791a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800791e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1da      	bne.n	80078f0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800794a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800795e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e1      	bne.n	800793a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800799a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800799c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e3      	bne.n	8007976 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079cc:	f023 0310 	bic.w	r3, r3, #16
 80079d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079de:	65bb      	str	r3, [r7, #88]	; 0x58
 80079e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e4      	bne.n	80079bc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fc f9d0 	bl	8003d9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f8f9 	bl	8007c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a16:	e0dc      	b.n	8007bd2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80ce 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80c9 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a66:	647b      	str	r3, [r7, #68]	; 0x44
 8007a68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e4      	bne.n	8007a44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a90:	f023 0301 	bic.w	r3, r3, #1
 8007a94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e1      	bne.n	8007a7a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0310 	bic.w	r3, r3, #16
 8007ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69b9      	ldr	r1, [r7, #24]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	617b      	str	r3, [r7, #20]
   return(result);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e4      	bne.n	8007aca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f87e 	bl	8007c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b0c:	e063      	b.n	8007bd6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00e      	beq.n	8007b38 <HAL_UART_IRQHandler+0x584>
 8007b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 fba3 	bl	800927c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b36:	e051      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d014      	beq.n	8007b6e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d03a      	beq.n	8007bda <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
    }
    return;
 8007b6c:	e035      	b.n	8007bda <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_UART_IRQHandler+0x5da>
 8007b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fef0 	bl	800896c <UART_EndTransmit_IT>
    return;
 8007b8c:	e026      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_UART_IRQHandler+0x5fa>
 8007b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fb7a 	bl	80092a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bac:	e016      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d010      	beq.n	8007bdc <HAL_UART_IRQHandler+0x628>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da0c      	bge.n	8007bdc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fb63 	bl	800928e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bc8:	e008      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
      return;
 8007bca:	bf00      	nop
 8007bcc:	e006      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
    return;
 8007bce:	bf00      	nop
 8007bd0:	e004      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
      return;
 8007bd2:	bf00      	nop
 8007bd4:	e002      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
      return;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <HAL_UART_IRQHandler+0x628>
    return;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	37e8      	adds	r7, #232	; 0xe8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr

08007c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr
	...

08007c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c24:	b08c      	sub	sp, #48	; 0x30
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b94      	ldr	r3, [pc, #592]	; (8007ea0 <UART_SetConfig+0x280>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a89      	ldr	r2, [pc, #548]	; (8007ea4 <UART_SetConfig+0x284>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d004      	beq.n	8007c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007c96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	f023 010f 	bic.w	r1, r3, #15
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a7a      	ldr	r2, [pc, #488]	; (8007ea8 <UART_SetConfig+0x288>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d127      	bne.n	8007d14 <UART_SetConfig+0xf4>
 8007cc4:	2003      	movs	r0, #3
 8007cc6:	f7ff fb1b 	bl	8007300 <LL_RCC_GetUSARTClockSource>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d81b      	bhi.n	8007d0c <UART_SetConfig+0xec>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0xbc>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007d05 	.word	0x08007d05
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf2:	e080      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfa:	e07c      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d02:	e078      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d0a:	e074      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d12:	e070      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a64      	ldr	r2, [pc, #400]	; (8007eac <UART_SetConfig+0x28c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d138      	bne.n	8007d90 <UART_SetConfig+0x170>
 8007d1e:	200c      	movs	r0, #12
 8007d20:	f7ff faee 	bl	8007300 <LL_RCC_GetUSARTClockSource>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007d2a:	2b0c      	cmp	r3, #12
 8007d2c:	d82c      	bhi.n	8007d88 <UART_SetConfig+0x168>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x114>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d69 	.word	0x08007d69
 8007d38:	08007d89 	.word	0x08007d89
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007d89 	.word	0x08007d89
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d89 	.word	0x08007d89
 8007d50:	08007d89 	.word	0x08007d89
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007d89 	.word	0x08007d89
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e042      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d70:	2302      	movs	r3, #2
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e03e      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e03a      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e036      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e032      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a43      	ldr	r2, [pc, #268]	; (8007ea4 <UART_SetConfig+0x284>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d12a      	bne.n	8007df0 <UART_SetConfig+0x1d0>
 8007d9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d9e:	f7ff fac1 	bl	8007324 <LL_RCC_GetLPUARTClockSource>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da8:	d01a      	beq.n	8007de0 <UART_SetConfig+0x1c0>
 8007daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dae:	d81b      	bhi.n	8007de8 <UART_SetConfig+0x1c8>
 8007db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db4:	d00c      	beq.n	8007dd0 <UART_SetConfig+0x1b0>
 8007db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dba:	d815      	bhi.n	8007de8 <UART_SetConfig+0x1c8>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <UART_SetConfig+0x1a8>
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc4:	d008      	beq.n	8007dd8 <UART_SetConfig+0x1b8>
 8007dc6:	e00f      	b.n	8007de8 <UART_SetConfig+0x1c8>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dce:	e012      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	e00e      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dde:	e00a      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007de0:	2308      	movs	r3, #8
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de6:	e006      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dee:	e002      	b.n	8007df6 <UART_SetConfig+0x1d6>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ea4 <UART_SetConfig+0x284>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	f040 80a4 	bne.w	8007f4a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d823      	bhi.n	8007e52 <UART_SetConfig+0x232>
 8007e0a:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x1f0>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e35 	.word	0x08007e35
 8007e14:	08007e53 	.word	0x08007e53
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e53 	.word	0x08007e53
 8007e20:	08007e43 	.word	0x08007e43
 8007e24:	08007e53 	.word	0x08007e53
 8007e28:	08007e53 	.word	0x08007e53
 8007e2c:	08007e53 	.word	0x08007e53
 8007e30:	08007e4b 	.word	0x08007e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e34:	f7fd ff48 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8007e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e3a:	e010      	b.n	8007e5e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <UART_SetConfig+0x290>)
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e40:	e00d      	b.n	8007e5e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fd fe8d 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8007e46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e48:	e009      	b.n	8007e5e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e50:	e005      	b.n	8007e5e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8137 	beq.w	80080d4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <UART_SetConfig+0x294>)
 8007e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	4413      	add	r3, r2
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d305      	bcc.n	8007e96 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d910      	bls.n	8007eb8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e9c:	e11a      	b.n	80080d4 <UART_SetConfig+0x4b4>
 8007e9e:	bf00      	nop
 8007ea0:	cfff69f3 	.word	0xcfff69f3
 8007ea4:	40008000 	.word	0x40008000
 8007ea8:	40013800 	.word	0x40013800
 8007eac:	40004400 	.word	0x40004400
 8007eb0:	00f42400 	.word	0x00f42400
 8007eb4:	0801b5e0 	.word	0x0801b5e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	2200      	movs	r2, #0
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	60fa      	str	r2, [r7, #12]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	4a8e      	ldr	r2, [pc, #568]	; (8008100 <UART_SetConfig+0x4e0>)
 8007ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eda:	f7f8 fd49 	bl	8000970 <__aeabi_uldivmod>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	020b      	lsls	r3, r1, #8
 8007ef0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ef4:	0202      	lsls	r2, r0, #8
 8007ef6:	6979      	ldr	r1, [r7, #20]
 8007ef8:	6849      	ldr	r1, [r1, #4]
 8007efa:	0849      	lsrs	r1, r1, #1
 8007efc:	2000      	movs	r0, #0
 8007efe:	460c      	mov	r4, r1
 8007f00:	4605      	mov	r5, r0
 8007f02:	eb12 0804 	adds.w	r8, r2, r4
 8007f06:	eb43 0905 	adc.w	r9, r3, r5
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	469a      	mov	sl, r3
 8007f12:	4693      	mov	fp, r2
 8007f14:	4652      	mov	r2, sl
 8007f16:	465b      	mov	r3, fp
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fd28 	bl	8000970 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4613      	mov	r3, r2
 8007f26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f2e:	d308      	bcc.n	8007f42 <UART_SetConfig+0x322>
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f36:	d204      	bcs.n	8007f42 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6a3a      	ldr	r2, [r7, #32]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e0c8      	b.n	80080d4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f48:	e0c4      	b.n	80080d4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f52:	d168      	bne.n	8008026 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007f54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d828      	bhi.n	8007fae <UART_SetConfig+0x38e>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <UART_SetConfig+0x344>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f89 	.word	0x08007f89
 8007f68:	08007f91 	.word	0x08007f91
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	08007faf 	.word	0x08007faf
 8007f74:	08007f9f 	.word	0x08007f9f
 8007f78:	08007faf 	.word	0x08007faf
 8007f7c:	08007faf 	.word	0x08007faf
 8007f80:	08007faf 	.word	0x08007faf
 8007f84:	08007fa7 	.word	0x08007fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f88:	f7fd fe9e 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8007f8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f8e:	e014      	b.n	8007fba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f90:	f7fd feac 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 8007f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f96:	e010      	b.n	8007fba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f98:	4b5a      	ldr	r3, [pc, #360]	; (8008104 <UART_SetConfig+0x4e4>)
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f9c:	e00d      	b.n	8007fba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9e:	f7fd fddf 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8007fa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fa4:	e009      	b.n	8007fba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fac:	e005      	b.n	8007fba <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 8089 	beq.w	80080d4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	4a4e      	ldr	r2, [pc, #312]	; (8008100 <UART_SetConfig+0x4e0>)
 8007fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd4:	005a      	lsls	r2, r3, #1
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	441a      	add	r2, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	2b0f      	cmp	r3, #15
 8007fee:	d916      	bls.n	800801e <UART_SetConfig+0x3fe>
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff6:	d212      	bcs.n	800801e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f023 030f 	bic.w	r3, r3, #15
 8008000:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	b29b      	uxth	r3, r3
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	b29a      	uxth	r2, r3
 800800e:	8bfb      	ldrh	r3, [r7, #30]
 8008010:	4313      	orrs	r3, r2
 8008012:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	8bfa      	ldrh	r2, [r7, #30]
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	e05a      	b.n	80080d4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008024:	e056      	b.n	80080d4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800802a:	2b08      	cmp	r3, #8
 800802c:	d827      	bhi.n	800807e <UART_SetConfig+0x45e>
 800802e:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <UART_SetConfig+0x414>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	08008059 	.word	0x08008059
 8008038:	08008061 	.word	0x08008061
 800803c:	08008069 	.word	0x08008069
 8008040:	0800807f 	.word	0x0800807f
 8008044:	0800806f 	.word	0x0800806f
 8008048:	0800807f 	.word	0x0800807f
 800804c:	0800807f 	.word	0x0800807f
 8008050:	0800807f 	.word	0x0800807f
 8008054:	08008077 	.word	0x08008077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008058:	f7fd fe36 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 800805c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800805e:	e014      	b.n	800808a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008060:	f7fd fe44 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 8008064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008066:	e010      	b.n	800808a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008068:	4b26      	ldr	r3, [pc, #152]	; (8008104 <UART_SetConfig+0x4e4>)
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800806c:	e00d      	b.n	800808a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806e:	f7fd fd77 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8008072:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008074:	e009      	b.n	800808a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800807c:	e005      	b.n	800808a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008088:	bf00      	nop
    }

    if (pclk != 0U)
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d021      	beq.n	80080d4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	4a1a      	ldr	r2, [pc, #104]	; (8008100 <UART_SetConfig+0x4e0>)
 8008096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800809a:	461a      	mov	r2, r3
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	fbb3 f2f2 	udiv	r2, r3, r2
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	441a      	add	r2, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	2b0f      	cmp	r3, #15
 80080ba:	d908      	bls.n	80080ce <UART_SetConfig+0x4ae>
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c2:	d204      	bcs.n	80080ce <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6a3a      	ldr	r2, [r7, #32]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	e002      	b.n	80080d4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2200      	movs	r2, #0
 80080e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2200      	movs	r2, #0
 80080ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3730      	adds	r7, #48	; 0x30
 80080f8:	46bd      	mov	sp, r7
 80080fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080fe:	bf00      	nop
 8008100:	0801b5e0 	.word	0x0801b5e0
 8008104:	00f42400 	.word	0x00f42400

08008108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01a      	beq.n	800821e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008206:	d10a      	bne.n	800821e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	605a      	str	r2, [r3, #4]
  }
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af02      	add	r7, sp, #8
 8008250:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800825a:	f7f9 fcb5 	bl	8001bc8 <HAL_GetTick>
 800825e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b08      	cmp	r3, #8
 800826c:	d10e      	bne.n	800828c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f82f 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e025      	b.n	80082d8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b04      	cmp	r3, #4
 8008298:	d10e      	bne.n	80082b8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f819 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e00f      	b.n	80082d8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b09c      	sub	sp, #112	; 0x70
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	e0a9      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	f000 80a5 	beq.w	8008446 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fc:	f7f9 fc64 	bl	8001bc8 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008308:	429a      	cmp	r2, r3
 800830a:	d302      	bcc.n	8008312 <UART_WaitOnFlagUntilTimeout+0x32>
 800830c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830e:	2b00      	cmp	r3, #0
 8008310:	d140      	bne.n	8008394 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008322:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008326:	667b      	str	r3, [r7, #100]	; 0x64
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008332:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008336:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800833e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e6      	bne.n	8008312 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	663b      	str	r3, [r7, #96]	; 0x60
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3308      	adds	r3, #8
 8008362:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008364:	64ba      	str	r2, [r7, #72]	; 0x48
 8008366:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800836a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e5      	bne.n	8008344 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2220      	movs	r2, #32
 800837c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e069      	b.n	8008468 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d051      	beq.n	8008446 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b0:	d149      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
 80083dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	613b      	str	r3, [r7, #16]
   return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f023 0301 	bic.w	r3, r3, #1
 8008404:	66bb      	str	r3, [r7, #104]	; 0x68
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800840e:	623a      	str	r2, [r7, #32]
 8008410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	69f9      	ldr	r1, [r7, #28]
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	61bb      	str	r3, [r7, #24]
   return(result);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e010      	b.n	8008468 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4013      	ands	r3, r2
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	429a      	cmp	r2, r3
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	429a      	cmp	r2, r3
 8008462:	f43f af46 	beq.w	80082f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3770      	adds	r7, #112	; 0x70
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008470:	b480      	push	{r7}
 8008472:	b0a3      	sub	sp, #140	; 0x8c
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a2:	d10e      	bne.n	80084c2 <UART_Start_Receive_IT+0x52>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d105      	bne.n	80084b8 <UART_Start_Receive_IT+0x48>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084b6:	e02d      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	22ff      	movs	r2, #255	; 0xff
 80084bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084c0:	e028      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10d      	bne.n	80084e6 <UART_Start_Receive_IT+0x76>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d104      	bne.n	80084dc <UART_Start_Receive_IT+0x6c>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084da:	e01b      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	227f      	movs	r2, #127	; 0x7f
 80084e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084e4:	e016      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ee:	d10d      	bne.n	800850c <UART_Start_Receive_IT+0x9c>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <UART_Start_Receive_IT+0x92>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	227f      	movs	r2, #127	; 0x7f
 80084fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008500:	e008      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	223f      	movs	r2, #63	; 0x3f
 8008506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800850a:	e003      	b.n	8008514 <UART_Start_Receive_IT+0xa4>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2222      	movs	r2, #34	; 0x22
 8008520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008548:	673a      	str	r2, [r7, #112]	; 0x70
 800854a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800854e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e3      	bne.n	8008524 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008564:	d153      	bne.n	800860e <UART_Start_Receive_IT+0x19e>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	429a      	cmp	r2, r3
 8008570:	d34d      	bcc.n	800860e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800857a:	d107      	bne.n	800858c <UART_Start_Receive_IT+0x11c>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4a4a      	ldr	r2, [pc, #296]	; (80086b0 <UART_Start_Receive_IT+0x240>)
 8008588:	671a      	str	r2, [r3, #112]	; 0x70
 800858a:	e002      	b.n	8008592 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4a49      	ldr	r2, [pc, #292]	; (80086b4 <UART_Start_Receive_IT+0x244>)
 8008590:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01a      	beq.n	80085d8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e4      	bne.n	80085a2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3308      	adds	r3, #8
 80085f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80085f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80085fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008600:	e841 2300 	strex	r3, r2, [r1]
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e5      	bne.n	80085d8 <UART_Start_Receive_IT+0x168>
 800860c:	e04a      	b.n	80086a4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008616:	d107      	bne.n	8008628 <UART_Start_Receive_IT+0x1b8>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d103      	bne.n	8008628 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a25      	ldr	r2, [pc, #148]	; (80086b8 <UART_Start_Receive_IT+0x248>)
 8008624:	671a      	str	r2, [r3, #112]	; 0x70
 8008626:	e002      	b.n	800862e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4a24      	ldr	r2, [pc, #144]	; (80086bc <UART_Start_Receive_IT+0x24c>)
 800862c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d019      	beq.n	8008672 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008652:	677b      	str	r3, [r7, #116]	; 0x74
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
 800865e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e6      	bne.n	800863e <UART_Start_Receive_IT+0x1ce>
 8008670:	e018      	b.n	80086a4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f043 0320 	orr.w	r3, r3, #32
 8008686:	67bb      	str	r3, [r7, #120]	; 0x78
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	61bb      	str	r3, [r7, #24]
   return(result);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e6      	bne.n	8008672 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	378c      	adds	r7, #140	; 0x8c
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr
 80086b0:	08008f7d 	.word	0x08008f7d
 80086b4:	08008c85 	.word	0x08008c85
 80086b8:	08008b23 	.word	0x08008b23
 80086bc:	080089c3 	.word	0x080089c3

080086c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b08f      	sub	sp, #60	; 0x3c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086dc:	637b      	str	r3, [r7, #52]	; 0x34
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e6      	bne.n	80086c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	60bb      	str	r3, [r7, #8]
   return(result);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008710:	633b      	str	r3, [r7, #48]	; 0x30
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871a:	61ba      	str	r2, [r7, #24]
 800871c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6979      	ldr	r1, [r7, #20]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	613b      	str	r3, [r7, #16]
   return(result);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e5      	bne.n	80086fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008736:	bf00      	nop
 8008738:	373c      	adds	r7, #60	; 0x3c
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b095      	sub	sp, #84	; 0x54
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800875c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	643b      	str	r3, [r7, #64]	; 0x40
 8008768:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800876c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e6      	bne.n	8008748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3308      	adds	r3, #8
 8008780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	61fb      	str	r3, [r7, #28]
   return(result);
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	64bb      	str	r3, [r7, #72]	; 0x48
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800879e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e3      	bne.n	800877a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d118      	bne.n	80087ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0310 	bic.w	r3, r3, #16
 80087ce:	647b      	str	r3, [r7, #68]	; 0x44
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6979      	ldr	r1, [r7, #20]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	613b      	str	r3, [r7, #16]
   return(result);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e6      	bne.n	80087ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008800:	bf00      	nop
 8008802:	3754      	adds	r7, #84	; 0x54
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr

0800880a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b090      	sub	sp, #64	; 0x40
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	d137      	bne.n	8008896 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008828:	2200      	movs	r2, #0
 800882a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800882e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3308      	adds	r3, #8
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	623b      	str	r3, [r7, #32]
   return(result);
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008844:	63bb      	str	r3, [r7, #56]	; 0x38
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3308      	adds	r3, #8
 800884c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800884e:	633a      	str	r2, [r7, #48]	; 0x30
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e5      	bne.n	800882e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
 8008878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	69b9      	ldr	r1, [r7, #24]
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	617b      	str	r3, [r7, #20]
   return(result);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e6      	bne.n	8008862 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008894:	e002      	b.n	800889c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008896:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008898:	f7f9 fe38 	bl	800250c <HAL_UART_TxCpltCallback>
}
 800889c:	bf00      	nop
 800889e:	3740      	adds	r7, #64	; 0x40
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff f996 	bl	8007be4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e8:	2b80      	cmp	r3, #128	; 0x80
 80088ea:	d109      	bne.n	8008900 <UART_DMAError+0x40>
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b21      	cmp	r3, #33	; 0x21
 80088f0:	d106      	bne.n	8008900 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80088fa:	6978      	ldr	r0, [r7, #20]
 80088fc:	f7ff fee0 	bl	80086c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d109      	bne.n	8008922 <UART_DMAError+0x62>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b22      	cmp	r3, #34	; 0x22
 8008912:	d106      	bne.n	8008922 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2200      	movs	r2, #0
 8008918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f7ff ff0f 	bl	8008740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008928:	f043 0210 	orr.w	r2, r3, #16
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f7ff f95f 	bl	8007bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008938:	bf00      	nop
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff f949 	bl	8007bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	60bb      	str	r3, [r7, #8]
   return(result);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6979      	ldr	r1, [r7, #20]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	613b      	str	r3, [r7, #16]
   return(result);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7f9 fda9 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ba:	bf00      	nop
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b096      	sub	sp, #88	; 0x58
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089da:	2b22      	cmp	r3, #34	; 0x22
 80089dc:	f040 8095 	bne.w	8008b0a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089ee:	b2d9      	uxtb	r1, r3
 80089f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fa:	400a      	ands	r2, r1
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d178      	bne.n	8008b1a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a46:	647b      	str	r3, [r7, #68]	; 0x44
 8008a48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e6      	bne.n	8008a28 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d12e      	bne.n	8008b02 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac8:	61fb      	str	r3, [r7, #28]
 8008aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	69b9      	ldr	r1, [r7, #24]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e6      	bne.n	8008aaa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f003 0310 	and.w	r3, r3, #16
 8008ae6:	2b10      	cmp	r3, #16
 8008ae8:	d103      	bne.n	8008af2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2210      	movs	r2, #16
 8008af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff f884 	bl	8007c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b00:	e00b      	b.n	8008b1a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f9 fd18 	bl	8002538 <HAL_UART_RxCpltCallback>
}
 8008b08:	e007      	b.n	8008b1a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f042 0208 	orr.w	r2, r2, #8
 8008b18:	619a      	str	r2, [r3, #24]
}
 8008b1a:	bf00      	nop
 8008b1c:	3758      	adds	r7, #88	; 0x58
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b096      	sub	sp, #88	; 0x58
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3a:	2b22      	cmp	r3, #34	; 0x22
 8008b3c:	f040 8095 	bne.w	8008c6a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b50:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b58:	4013      	ands	r3, r2
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b64:	1c9a      	adds	r2, r3, #2
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d178      	bne.n	8008c7a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e6      	bne.n	8008b88 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	f023 0301 	bic.w	r3, r3, #1
 8008bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e5      	bne.n	8008bba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d12e      	bne.n	8008c62 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f023 0310 	bic.w	r3, r3, #16
 8008c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6979      	ldr	r1, [r7, #20]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	613b      	str	r3, [r7, #16]
   return(result);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f003 0310 	and.w	r3, r3, #16
 8008c46:	2b10      	cmp	r3, #16
 8008c48:	d103      	bne.n	8008c52 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2210      	movs	r2, #16
 8008c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe ffd4 	bl	8007c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c60:	e00b      	b.n	8008c7a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7f9 fc68 	bl	8002538 <HAL_UART_RxCpltCallback>
}
 8008c68:	e007      	b.n	8008c7a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	699a      	ldr	r2, [r3, #24]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0208 	orr.w	r2, r2, #8
 8008c78:	619a      	str	r2, [r3, #24]
}
 8008c7a:	bf00      	nop
 8008c7c:	3758      	adds	r7, #88	; 0x58
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b0a6      	sub	sp, #152	; 0x98
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cba:	2b22      	cmp	r3, #34	; 0x22
 8008cbc:	f040 814f 	bne.w	8008f5e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cc6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cca:	e0f6      	b.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cd6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008cda:	b2d9      	uxtb	r1, r3
 8008cdc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce6:	400a      	ands	r2, r1
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d053      	beq.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d011      	beq.n	8008d4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00b      	beq.n	8008d4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d44:	f043 0201 	orr.w	r2, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d011      	beq.n	8008d7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00b      	beq.n	8008d7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d74:	f043 0204 	orr.w	r2, r3, #4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d011      	beq.n	8008dae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00b      	beq.n	8008dae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da4:	f043 0202 	orr.w	r2, r3, #2
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d006      	beq.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fe ff1c 	bl	8007bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d173      	bne.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008df6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e4      	bne.n	8008dd2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e1e:	f023 0301 	bic.w	r3, r3, #1
 8008e22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e2c:	657a      	str	r2, [r7, #84]	; 0x54
 8008e2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e3      	bne.n	8008e08 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d12e      	bne.n	8008eb4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	f023 0310 	bic.w	r3, r3, #16
 8008e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d103      	bne.n	8008ea4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fe feab 	bl	8007c08 <HAL_UARTEx_RxEventCallback>
 8008eb2:	e002      	b.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7f9 fb3f 	bl	8002538 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f aefe 	bne.w	8008ccc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ed6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d045      	beq.n	8008f6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d23e      	bcs.n	8008f6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f06:	673b      	str	r3, [r7, #112]	; 0x70
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e5      	bne.n	8008ef0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a14      	ldr	r2, [pc, #80]	; (8008f78 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008f28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f043 0320 	orr.w	r3, r3, #32
 8008f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	6979      	ldr	r1, [r7, #20]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	613b      	str	r3, [r7, #16]
   return(result);
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e6      	bne.n	8008f2a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f5c:	e007      	b.n	8008f6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f042 0208 	orr.w	r2, r2, #8
 8008f6c:	619a      	str	r2, [r3, #24]
}
 8008f6e:	bf00      	nop
 8008f70:	3798      	adds	r7, #152	; 0x98
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	080089c3 	.word	0x080089c3

08008f7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b0a8      	sub	sp, #160	; 0xa0
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f8a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb2:	2b22      	cmp	r3, #34	; 0x22
 8008fb4:	f040 8153 	bne.w	800925e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fc2:	e0fa      	b.n	80091ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fd6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008fda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fde:	4013      	ands	r3, r2
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fec:	1c9a      	adds	r2, r3, #2
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800900e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b00      	cmp	r3, #0
 8009018:	d053      	beq.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800901a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d011      	beq.n	800904a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00b      	beq.n	800904a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2201      	movs	r2, #1
 8009038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009040:	f043 0201 	orr.w	r2, r3, #1
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800904a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d011      	beq.n	800907a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00b      	beq.n	800907a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2202      	movs	r2, #2
 8009068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009070:	f043 0204 	orr.w	r2, r3, #4
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800907a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	d011      	beq.n	80090aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2204      	movs	r2, #4
 8009098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a0:	f043 0202 	orr.w	r2, r3, #2
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d006      	beq.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7fe fd9e 	bl	8007bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d175      	bne.n	80091ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e4      	bne.n	80090ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800912c:	65ba      	str	r2, [r7, #88]	; 0x58
 800912e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800913a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e1      	bne.n	8009104 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d12e      	bne.n	80091b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	f023 0310 	bic.w	r3, r3, #16
 8009170:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800917a:	647b      	str	r3, [r7, #68]	; 0x44
 800917c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e6      	bne.n	800915c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f003 0310 	and.w	r3, r3, #16
 8009198:	2b10      	cmp	r3, #16
 800919a:	d103      	bne.n	80091a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2210      	movs	r2, #16
 80091a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7fe fd2b 	bl	8007c08 <HAL_UARTEx_RxEventCallback>
 80091b2:	e002      	b.n	80091ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7f9 f9bf 	bl	8002538 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80091c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091c6:	f003 0320 	and.w	r3, r3, #32
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f47f aefa 	bne.w	8008fc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d045      	beq.n	800926e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d23e      	bcs.n	800926e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3308      	adds	r3, #8
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009206:	677b      	str	r3, [r7, #116]	; 0x74
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009210:	633a      	str	r2, [r7, #48]	; 0x30
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e5      	bne.n	80091f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a14      	ldr	r2, [pc, #80]	; (8009278 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009228:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	60fb      	str	r3, [r7, #12]
   return(result);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f043 0320 	orr.w	r3, r3, #32
 800923e:	673b      	str	r3, [r7, #112]	; 0x70
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	69b9      	ldr	r1, [r7, #24]
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	617b      	str	r3, [r7, #20]
   return(result);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e6      	bne.n	800922a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800925c:	e007      	b.n	800926e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	699a      	ldr	r2, [r3, #24]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0208 	orr.w	r2, r2, #8
 800926c:	619a      	str	r2, [r3, #24]
}
 800926e:	bf00      	nop
 8009270:	37a0      	adds	r7, #160	; 0xa0
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	08008b23 	.word	0x08008b23

0800927c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	bc80      	pop	{r7}
 800928c:	4770      	bx	lr

0800928e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bc80      	pop	{r7}
 80092b0:	4770      	bx	lr

080092b2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b088      	sub	sp, #32
 80092b6:	af02      	add	r7, sp, #8
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	1d3b      	adds	r3, r7, #4
 80092bc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e046      	b.n	8009360 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2224      	movs	r2, #36	; 0x24
 80092de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0201 	bic.w	r2, r2, #1
 80092f0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800930c:	1d3b      	adds	r3, r7, #4
 800930e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f90e 	bl	8009534 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009328:	f7f8 fc4e 	bl	8001bc8 <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800932e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	2200      	movs	r2, #0
 8009338:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7fe ffcf 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	75fb      	strb	r3, [r7, #23]
 800934c:	e003      	b.n	8009356 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b089      	sub	sp, #36	; 0x24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <HAL_UARTEx_EnableStopMode+0x16>
 800937a:	2302      	movs	r3, #2
 800937c:	e021      	b.n	80093c2 <HAL_UARTEx_EnableStopMode+0x5a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	60bb      	str	r3, [r7, #8]
   return(result);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f043 0302 	orr.w	r3, r3, #2
 800939a:	61fb      	str	r3, [r7, #28]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	613b      	str	r3, [r7, #16]
   return(result);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e6      	bne.n	8009386 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3724      	adds	r7, #36	; 0x24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr

080093cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80093de:	2302      	movs	r3, #2
 80093e0:	e027      	b.n	8009432 <HAL_UARTEx_DisableFifoMode+0x66>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2224      	movs	r2, #36	; 0x24
 80093ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0201 	bic.w	r2, r2, #1
 8009408:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009410:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr

0800943c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009450:	2302      	movs	r3, #2
 8009452:	e02d      	b.n	80094b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2224      	movs	r2, #36	; 0x24
 8009460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f871 	bl	8009578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e02d      	b.n	800952c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	; 0x24
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f833 	bl	8009578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	1d3b      	adds	r3, r7, #4
 800953e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f023 0210 	bic.w	r2, r3, #16
 800954c:	893b      	ldrh	r3, [r7, #8]
 800954e:	4619      	mov	r1, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009562:	7abb      	ldrb	r3, [r7, #10]
 8009564:	061a      	lsls	r2, r3, #24
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
}
 800956e:	bf00      	nop
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	bc80      	pop	{r7}
 8009576:	4770      	bx	lr

08009578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009584:	2b00      	cmp	r3, #0
 8009586:	d108      	bne.n	800959a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009598:	e031      	b.n	80095fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800959a:	2308      	movs	r3, #8
 800959c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800959e:	2308      	movs	r3, #8
 80095a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	0e5b      	lsrs	r3, r3, #25
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	f003 0307 	and.w	r3, r3, #7
 80095b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	0f5b      	lsrs	r3, r3, #29
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	7b3a      	ldrb	r2, [r7, #12]
 80095c6:	4910      	ldr	r1, [pc, #64]	; (8009608 <UARTEx_SetNbDataToProcess+0x90>)
 80095c8:	5c8a      	ldrb	r2, [r1, r2]
 80095ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095ce:	7b3a      	ldrb	r2, [r7, #12]
 80095d0:	490e      	ldr	r1, [pc, #56]	; (800960c <UARTEx_SetNbDataToProcess+0x94>)
 80095d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	7b7a      	ldrb	r2, [r7, #13]
 80095e4:	4908      	ldr	r1, [pc, #32]	; (8009608 <UARTEx_SetNbDataToProcess+0x90>)
 80095e6:	5c8a      	ldrb	r2, [r1, r2]
 80095e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095ec:	7b7a      	ldrb	r2, [r7, #13]
 80095ee:	4907      	ldr	r1, [pc, #28]	; (800960c <UARTEx_SetNbDataToProcess+0x94>)
 80095f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr
 8009608:	0801b5f8 	.word	0x0801b5f8
 800960c:	0801b600 	.word	0x0801b600

08009610 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009614:	f7f8 f97c 	bl	8001910 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009618:	f000 f820 	bl	800965c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800961c:	bf00      	nop
 800961e:	bd80      	pop	{r7, pc}

08009620 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	f010 f8e2 	bl	80197f0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800962c:	bf00      	nop
 800962e:	bd80      	pop	{r7, pc}

08009630 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009634:	f3bf 8f4f 	dsb	sy
}
 8009638:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800963a:	4b06      	ldr	r3, [pc, #24]	; (8009654 <__NVIC_SystemReset+0x24>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009642:	4904      	ldr	r1, [pc, #16]	; (8009654 <__NVIC_SystemReset+0x24>)
 8009644:	4b04      	ldr	r3, [pc, #16]	; (8009658 <__NVIC_SystemReset+0x28>)
 8009646:	4313      	orrs	r3, r2
 8009648:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800964a:	f3bf 8f4f 	dsb	sy
}
 800964e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <__NVIC_SystemReset+0x20>
 8009654:	e000ed00 	.word	0xe000ed00
 8009658:	05fa0004 	.word	0x05fa0004

0800965c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009662:	2300      	movs	r3, #0
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	4b21      	ldr	r3, [pc, #132]	; (80096ec <LoRaWAN_Init+0x90>)
 8009668:	2200      	movs	r2, #0
 800966a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800966e:	4820      	ldr	r0, [pc, #128]	; (80096f0 <LoRaWAN_Init+0x94>)
 8009670:	f010 fa5e 	bl	8019b30 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009674:	4a1f      	ldr	r2, [pc, #124]	; (80096f4 <LoRaWAN_Init+0x98>)
 8009676:	2100      	movs	r1, #0
 8009678:	2001      	movs	r0, #1
 800967a:	f010 f9b5 	bl	80199e8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800967e:	4a1e      	ldr	r2, [pc, #120]	; (80096f8 <LoRaWAN_Init+0x9c>)
 8009680:	2100      	movs	r1, #0
 8009682:	2002      	movs	r0, #2
 8009684:	f010 f9b0 	bl	80199e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009688:	4a1c      	ldr	r2, [pc, #112]	; (80096fc <LoRaWAN_Init+0xa0>)
 800968a:	2100      	movs	r1, #0
 800968c:	2004      	movs	r0, #4
 800968e:	f010 f9ab 	bl	80199e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009692:	4a1b      	ldr	r2, [pc, #108]	; (8009700 <LoRaWAN_Init+0xa4>)
 8009694:	2100      	movs	r1, #0
 8009696:	2008      	movs	r0, #8
 8009698:	f010 f9a6 	bl	80199e8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800969c:	f000 f9d0 	bl	8009a40 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80096a0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80096a4:	4817      	ldr	r0, [pc, #92]	; (8009704 <LoRaWAN_Init+0xa8>)
 80096a6:	f001 feb1 	bl	800b40c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 80096aa:	4817      	ldr	r0, [pc, #92]	; (8009708 <LoRaWAN_Init+0xac>)
 80096ac:	f001 fefa 	bl	800b4a4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  APP_LOG(TS_OFF, VLEVEL_M, "LoRaWAN_Init2\r\n");
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 80096b0:	4b16      	ldr	r3, [pc, #88]	; (800970c <LoRaWAN_Init+0xb0>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	4a16      	ldr	r2, [pc, #88]	; (8009710 <LoRaWAN_Init+0xb4>)
 80096b6:	7812      	ldrb	r2, [r2, #0]
 80096b8:	4611      	mov	r1, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f002 f844 	bl	800b748 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 80096c0:	4b14      	ldr	r3, [pc, #80]	; (8009714 <LoRaWAN_Init+0xb8>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <LoRaWAN_Init+0x84>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <LoRaWAN_Init+0xbc>)
 80096ca:	6819      	ldr	r1, [r3, #0]
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4b12      	ldr	r3, [pc, #72]	; (800971c <LoRaWAN_Init+0xc0>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	4812      	ldr	r0, [pc, #72]	; (8009720 <LoRaWAN_Init+0xc4>)
 80096d6:	f010 fa2b 	bl	8019b30 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80096da:	4811      	ldr	r0, [pc, #68]	; (8009720 <LoRaWAN_Init+0xc4>)
 80096dc:	f010 fa5e 	bl	8019b9c <UTIL_TIMER_Start>

    /* USER CODE END LoRaWAN_Init_3 */
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */
  LmHandlerSetDutyCycleEnable(false);
 80096e0:	2000      	movs	r0, #0
 80096e2:	f002 fda3 	bl	800c22c <LmHandlerSetDutyCycleEnable>
  /* USER CODE END LoRaWAN_Init_Last */
}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	08009965 	.word	0x08009965
 80096f0:	200003ac 	.word	0x200003ac
 80096f4:	0800b725 	.word	0x0800b725
 80096f8:	08009739 	.word	0x08009739
 80096fc:	08009989 	.word	0x08009989
 8009700:	08009919 	.word	0x08009919
 8009704:	2000000c 	.word	0x2000000c
 8009708:	20000058 	.word	0x20000058
 800970c:	20000008 	.word	0x20000008
 8009710:	20000009 	.word	0x20000009
 8009714:	20000390 	.word	0x20000390
 8009718:	2000006c 	.word	0x2000006c
 800971c:	080097e5 	.word	0x080097e5
 8009720:	20000394 	.word	0x20000394

08009724 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <SendTxData>:

static void SendTxData(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
	LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800973e:	23ff      	movs	r3, #255	; 0xff
 8009740:	70fb      	strb	r3, [r7, #3]
	int16_t temperature = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	803b      	strh	r3, [r7, #0]
	UTIL_TIMER_Time_t nextTxIn = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	607b      	str	r3, [r7, #4]
	temperature = SYS_GetTemperatureLevel() >> 8; /* degC */
 800974a:	f7f7 fb41 	bl	8000dd0 <SYS_GetTemperatureLevel>
 800974e:	4603      	mov	r3, r0
 8009750:	121b      	asrs	r3, r3, #8
 8009752:	803b      	strh	r3, [r7, #0]
	AppData.Port = LORAWAN_USER_APP_PORT;
 8009754:	4b1d      	ldr	r3, [pc, #116]	; (80097cc <SendTxData+0x94>)
 8009756:	2202      	movs	r2, #2
 8009758:	701a      	strb	r2, [r3, #0]
	AppData.BufferSize = snprintf((char*)AppData.Buffer,LORAWAN_APP_DATA_BUFFER_MAX_SIZE,"%d",temperature);
 800975a:	4b1c      	ldr	r3, [pc, #112]	; (80097cc <SendTxData+0x94>)
 800975c:	6858      	ldr	r0, [r3, #4]
 800975e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009762:	4a1b      	ldr	r2, [pc, #108]	; (80097d0 <SendTxData+0x98>)
 8009764:	21f2      	movs	r1, #242	; 0xf2
 8009766:	f010 ff35 	bl	801a5d4 <sniprintf>
 800976a:	4603      	mov	r3, r0
 800976c:	b2da      	uxtb	r2, r3
 800976e:	4b17      	ldr	r3, [pc, #92]	; (80097cc <SendTxData+0x94>)
 8009770:	705a      	strb	r2, [r3, #1]


	  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8009772:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <SendTxData+0x9c>)
 8009774:	78db      	ldrb	r3, [r3, #3]
 8009776:	2200      	movs	r2, #0
 8009778:	4619      	mov	r1, r3
 800977a:	4814      	ldr	r0, [pc, #80]	; (80097cc <SendTxData+0x94>)
 800977c:	f002 f880 	bl	800b880 <LmHandlerSend>
 8009780:	4603      	mov	r3, r0
 8009782:	70fb      	strb	r3, [r7, #3]
	   if (LORAMAC_HANDLER_SUCCESS == status)
 8009784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d007      	beq.n	800979c <SendTxData+0x64>
	   {
	     APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
	   }
	   else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800978c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009790:	f113 0f06 	cmn.w	r3, #6
 8009794:	d102      	bne.n	800979c <SendTxData+0x64>
	   {
	     nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8009796:	f001 ffcd 	bl	800b734 <LmHandlerGetDutyCycleWaitTime>
 800979a:	6078      	str	r0, [r7, #4]
	     {
	       APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
	     }
	   }

	   if (EventType == TX_ON_TIMER)
 800979c:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <SendTxData+0xa0>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10f      	bne.n	80097c4 <SendTxData+0x8c>
	   {
	     UTIL_TIMER_Stop(&TxTimer);
 80097a4:	480d      	ldr	r0, [pc, #52]	; (80097dc <SendTxData+0xa4>)
 80097a6:	f010 fa67 	bl	8019c78 <UTIL_TIMER_Stop>
	     UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <SendTxData+0xa8>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4293      	cmp	r3, r2
 80097b2:	bf38      	it	cc
 80097b4:	4613      	movcc	r3, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	4808      	ldr	r0, [pc, #32]	; (80097dc <SendTxData+0xa4>)
 80097ba:	f010 facd 	bl	8019d58 <UTIL_TIMER_SetPeriod>
	     UTIL_TIMER_Start(&TxTimer);
 80097be:	4807      	ldr	r0, [pc, #28]	; (80097dc <SendTxData+0xa4>)
 80097c0:	f010 f9ec 	bl	8019b9c <UTIL_TIMER_Start>
	   }

  /* USER CODE END SendTxData_1 */
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000070 	.word	0x20000070
 80097d0:	0801b034 	.word	0x0801b034
 80097d4:	20000058 	.word	0x20000058
 80097d8:	20000390 	.word	0x20000390
 80097dc:	20000394 	.word	0x20000394
 80097e0:	2000006c 	.word	0x2000006c

080097e4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80097ec:	2100      	movs	r1, #0
 80097ee:	2002      	movs	r0, #2
 80097f0:	f010 f91c 	bl	8019a2c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 80097f4:	4803      	ldr	r0, [pc, #12]	; (8009804 <OnTxTimerEvent+0x20>)
 80097f6:	f010 f9d1 	bl	8019b9c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000394 	.word	0x20000394

08009808 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr

0800981a <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams != NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <OnJoinRequest+0x16>
	  {
	    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800982e:	2b00      	cmp	r3, #0
	    {
	      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
	    }
	  }
  /* USER CODE END OnJoinRequest_1 */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	bc80      	pop	{r7}
 8009838:	4770      	bx	lr

0800983a <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	bc80      	pop	{r7}
 800984a:	4770      	bx	lr

0800984c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	bc80      	pop	{r7}
 800985e:	4770      	bx	lr

08009860 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009864:	2100      	movs	r1, #0
 8009866:	2001      	movs	r0, #1
 8009868:	f010 f8e0 	bl	8019a2c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800986c:	bf00      	nop
 800986e:	bd80      	pop	{r7, pc}

08009870 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 8009878:	4a0d      	ldr	r2, [pc, #52]	; (80098b0 <OnTxPeriodicityChanged+0x40>)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800987e:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <OnTxPeriodicityChanged+0x40>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <OnTxPeriodicityChanged+0x40>)
 8009888:	f644 6220 	movw	r2, #20000	; 0x4e20
 800988c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800988e:	4809      	ldr	r0, [pc, #36]	; (80098b4 <OnTxPeriodicityChanged+0x44>)
 8009890:	f010 f9f2 	bl	8019c78 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <OnTxPeriodicityChanged+0x40>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4619      	mov	r1, r3
 800989a:	4806      	ldr	r0, [pc, #24]	; (80098b4 <OnTxPeriodicityChanged+0x44>)
 800989c:	f010 fa5c 	bl	8019d58 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 80098a0:	4804      	ldr	r0, [pc, #16]	; (80098b4 <OnTxPeriodicityChanged+0x44>)
 80098a2:	f010 f97b 	bl	8019b9c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	2000006c 	.word	0x2000006c
 80098b4:	20000394 	.word	0x20000394

080098b8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80098c2:	4a04      	ldr	r2, [pc, #16]	; (80098d4 <OnTxFrameCtrlChanged+0x1c>)
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000058 	.word	0x20000058

080098d8 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80098e2:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <OnPingSlotPeriodicityChanged+0x1c>)
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000058 	.word	0x20000058

080098f8 <OnSystemReset>:

static void OnSystemReset(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80098fc:	f002 fc89 	bl	800c212 <LmHandlerHalt>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <OnSystemReset+0x1c>
 8009906:	f001 ff9f 	bl	800b848 <LmHandlerJoinStatus>
 800990a:	4603      	mov	r3, r0
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 8009910:	f7ff fe8e 	bl	8009630 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 8009914:	bf00      	nop
 8009916:	bd80      	pop	{r7, pc}

08009918 <StopJoin>:

static void StopJoin(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800991c:	480d      	ldr	r0, [pc, #52]	; (8009954 <StopJoin+0x3c>)
 800991e:	f010 f9ab 	bl	8019c78 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8009922:	f002 fc69 	bl	800c1f8 <LmHandlerStop>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10e      	bne.n	800994a <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800992c:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <StopJoin+0x40>)
 800992e:	2201      	movs	r2, #1
 8009930:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 8009932:	480a      	ldr	r0, [pc, #40]	; (800995c <StopJoin+0x44>)
 8009934:	f001 fdb6 	bl	800b4a4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8009938:	4b07      	ldr	r3, [pc, #28]	; (8009958 <StopJoin+0x40>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2101      	movs	r1, #1
 800993e:	4618      	mov	r0, r3
 8009940:	f001 ff02 	bl	800b748 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8009944:	4803      	ldr	r0, [pc, #12]	; (8009954 <StopJoin+0x3c>)
 8009946:	f010 f929 	bl	8019b9c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <StopJoin+0x48>)
 800994c:	f010 f926 	bl	8019b9c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 8009950:	bf00      	nop
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000394 	.word	0x20000394
 8009958:	20000008 	.word	0x20000008
 800995c:	20000058 	.word	0x20000058
 8009960:	200003ac 	.word	0x200003ac

08009964 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800996c:	4b05      	ldr	r3, [pc, #20]	; (8009984 <OnStopJoinTimerEvent+0x20>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d103      	bne.n	800997c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8009974:	2100      	movs	r1, #0
 8009976:	2008      	movs	r0, #8
 8009978:	f010 f858 	bl	8019a2c <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20000008 	.word	0x20000008

08009988 <StoreContext>:

static void StoreContext(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800998e:	23ff      	movs	r3, #255	; 0xff
 8009990:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 8009992:	f002 fc5f 	bl	800c254 <LmHandlerNvmDataStore>
 8009996:	4603      	mov	r3, r0
 8009998:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	4603      	mov	r3, r0
 80099aa:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr
	...

080099b8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80099c2:	f7fa fc5d 	bl	8004280 <HAL_FLASH_Unlock>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d11c      	bne.n	8009a06 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 80099cc:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <OnStoreContextRequest+0x58>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	029a      	lsls	r2, r3, #10
 80099d2:	4b10      	ldr	r3, [pc, #64]	; (8009a14 <OnStoreContextRequest+0x5c>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 80099da:	fbb2 f1f3 	udiv	r1, r2, r3
 80099de:	fb01 f303 	mul.w	r3, r1, r3
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	0adb      	lsrs	r3, r3, #11
 80099e6:	2200      	movs	r2, #0
 80099e8:	2101      	movs	r1, #1
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fbf9 	bl	80011e2 <FLASH_IF_EraseByPages>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d105      	bne.n	8009a02 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 80099f6:	2300      	movs	r3, #0
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4806      	ldr	r0, [pc, #24]	; (8009a18 <OnStoreContextRequest+0x60>)
 80099fe:	f7f7 fb0f 	bl	8001020 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 8009a02:	f7fa fc5f 	bl	80042c4 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	1fff75e0 	.word	0x1fff75e0
 8009a14:	03fffc00 	.word	0x03fffc00
 8009a18:	0803f000 	.word	0x0803f000

08009a1c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	4903      	ldr	r1, [pc, #12]	; (8009a3c <OnRestoreContextRequest+0x20>)
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f00f fadc 	bl	8018fec <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	0803f000 	.word	0x0803f000

08009a40 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8009a44:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009a4a:	4b14      	ldr	r3, [pc, #80]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009a50:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009a56:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f043 0320 	orr.w	r3, r3, #32
 8009a64:	4a0d      	ldr	r2, [pc, #52]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a66:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009a68:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10c      	bne.n	8009a8a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009a70:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <LoraInfo_Init+0x60>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	2100      	movs	r1, #0
 8009a76:	2000      	movs	r0, #0
 8009a78:	f010 fb08 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009a7c:	bf00      	nop
 8009a7e:	f010 faf3 	bl	801a068 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d1fa      	bne.n	8009a7e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009a88:	e7fe      	b.n	8009a88 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009a8a:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <LoraInfo_Init+0x5c>)
 8009a92:	2203      	movs	r2, #3
 8009a94:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009a96:	bf00      	nop
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	200004b8 	.word	0x200004b8
 8009aa0:	0801b038 	.word	0x0801b038

08009aa4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <LoraInfo_GetPtr+0x10>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bc80      	pop	{r7}
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	200004b8 	.word	0x200004b8

08009ab8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009ac2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bc80      	pop	{r7}
 8009acc:	4770      	bx	lr

08009ace <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009adc:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009aee:	2302      	movs	r3, #2
 8009af0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8009af2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr

08009afe <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009b04:	2300      	movs	r3, #0
 8009b06:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8009b08:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bc80      	pop	{r7}
 8009b12:	4770      	bx	lr

08009b14 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8009b1e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bc80      	pop	{r7}
 8009b28:	4770      	bx	lr

08009b2a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	4603      	mov	r3, r0
 8009b32:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8009b3e:	230f      	movs	r3, #15
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	e001      	b.n	8009b48 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8009b44:	2316      	movs	r3, #22
 8009b46:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009b48:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bc80      	pop	{r7}
 8009b52:	4770      	bx	lr

08009b54 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	33f1      	adds	r3, #241	; 0xf1
 8009b60:	2210      	movs	r2, #16
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f00b ff77 	bl	8015a58 <memset1>
    ctx->M_n = 0;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	22f0      	movs	r2, #240	; 0xf0
 8009b76:	2100      	movs	r1, #0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f00b ff6d 	bl	8015a58 <memset1>
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	461a      	mov	r2, r3
 8009b94:	2110      	movs	r1, #16
 8009b96:	6838      	ldr	r0, [r7, #0]
 8009b98:	f000 fe5c 	bl	800a854 <lorawan_aes_set_key>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08c      	sub	sp, #48	; 0x30
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 80a1 	beq.w	8009cfe <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bc2:	f1c3 0310 	rsb	r3, r3, #16
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	bf28      	it	cs
 8009bcc:	4613      	movcs	r3, r2
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f203 1201 	addw	r2, r3, #257	; 0x101
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bdc:	4413      	add	r3, r2
 8009bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be0:	b292      	uxth	r2, r2
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f00b fefc 	bl	80159e2 <memcpy1>
        ctx->M_n += mlen;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	441a      	add	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009c00:	2b0f      	cmp	r3, #15
 8009c02:	f240 808d 	bls.w	8009d20 <AES_CMAC_Update+0x17c>
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	f000 8088 	beq.w	8009d20 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8009c10:	2300      	movs	r3, #0
 8009c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c14:	e015      	b.n	8009c42 <AES_CMAC_Update+0x9e>
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	4413      	add	r3, r2
 8009c1c:	33f1      	adds	r3, #241	; 0xf1
 8009c1e:	781a      	ldrb	r2, [r3, #0]
 8009c20:	68f9      	ldr	r1, [r7, #12]
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	440b      	add	r3, r1
 8009c26:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	4053      	eors	r3, r2
 8009c2e:	b2d9      	uxtb	r1, r3
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	4413      	add	r3, r2
 8009c36:	33f1      	adds	r3, #241	; 0xf1
 8009c38:	460a      	mov	r2, r1
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3e:	3301      	adds	r3, #1
 8009c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	2b0f      	cmp	r3, #15
 8009c46:	dde6      	ble.n	8009c16 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009c4e:	f107 0314 	add.w	r3, r7, #20
 8009c52:	2210      	movs	r2, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	f00b fec4 	bl	80159e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	f107 0114 	add.w	r1, r7, #20
 8009c60:	f107 0314 	add.w	r3, r7, #20
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fed3 	bl	800aa10 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	33f1      	adds	r3, #241	; 0xf1
 8009c6e:	f107 0114 	add.w	r1, r7, #20
 8009c72:	2210      	movs	r2, #16
 8009c74:	4618      	mov	r0, r3
 8009c76:	f00b feb4 	bl	80159e2 <memcpy1>

        data += mlen;
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	4413      	add	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8009c8a:	e038      	b.n	8009cfe <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c90:	e013      	b.n	8009cba <AES_CMAC_Update+0x116>
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	4413      	add	r3, r2
 8009c98:	33f1      	adds	r3, #241	; 0xf1
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	440b      	add	r3, r1
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	4053      	eors	r3, r2
 8009ca6:	b2d9      	uxtb	r1, r3
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cac:	4413      	add	r3, r2
 8009cae:	33f1      	adds	r3, #241	; 0xf1
 8009cb0:	460a      	mov	r2, r1
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	2b0f      	cmp	r3, #15
 8009cbe:	dde8      	ble.n	8009c92 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009cc6:	f107 0314 	add.w	r3, r7, #20
 8009cca:	2210      	movs	r2, #16
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f00b fe88 	bl	80159e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	f107 0114 	add.w	r1, r7, #20
 8009cd8:	f107 0314 	add.w	r3, r7, #20
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fe97 	bl	800aa10 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	33f1      	adds	r3, #241	; 0xf1
 8009ce6:	f107 0114 	add.w	r1, r7, #20
 8009cea:	2210      	movs	r2, #16
 8009cec:	4618      	mov	r0, r3
 8009cee:	f00b fe78 	bl	80159e2 <memcpy1>

        data += 16;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3310      	adds	r3, #16
 8009cf6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3b10      	subs	r3, #16
 8009cfc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b10      	cmp	r3, #16
 8009d02:	d8c3      	bhi.n	8009c8c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	b292      	uxth	r2, r2
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f00b fe66 	bl	80159e2 <memcpy1>
    ctx->M_n = len;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009d1e:	e000      	b.n	8009d22 <AES_CMAC_Update+0x17e>
            return;
 8009d20:	bf00      	nop
}
 8009d22:	3730      	adds	r7, #48	; 0x30
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b092      	sub	sp, #72	; 0x48
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8009d32:	f107 031c 	add.w	r3, r7, #28
 8009d36:	2210      	movs	r2, #16
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f00b fe8c 	bl	8015a58 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	f107 011c 	add.w	r1, r7, #28
 8009d46:	f107 031c 	add.w	r3, r7, #28
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fe60 	bl	800aa10 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8009d50:	7f3b      	ldrb	r3, [r7, #28]
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da30      	bge.n	8009dba <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 8009d58:	2300      	movs	r3, #0
 8009d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d5c:	e01b      	b.n	8009d96 <AES_CMAC_Final+0x6e>
 8009d5e:	f107 021c 	add.w	r2, r7, #28
 8009d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d64:	4413      	add	r3, r2
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	b25a      	sxtb	r2, r3
 8009d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d6e:	3301      	adds	r3, #1
 8009d70:	3348      	adds	r3, #72	; 0x48
 8009d72:	443b      	add	r3, r7
 8009d74:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009d78:	09db      	lsrs	r3, r3, #7
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	b25b      	sxtb	r3, r3
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	b25b      	sxtb	r3, r3
 8009d82:	b2d9      	uxtb	r1, r3
 8009d84:	f107 021c 	add.w	r2, r7, #28
 8009d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8a:	4413      	add	r3, r2
 8009d8c:	460a      	mov	r2, r1
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d92:	3301      	adds	r3, #1
 8009d94:	647b      	str	r3, [r7, #68]	; 0x44
 8009d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d98:	2b0e      	cmp	r3, #14
 8009d9a:	dde0      	ble.n	8009d5e <AES_CMAC_Final+0x36>
 8009d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8009da8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dac:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009db0:	43db      	mvns	r3, r3
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db8:	e027      	b.n	8009e0a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 8009dba:	2300      	movs	r3, #0
 8009dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8009dbe:	e01b      	b.n	8009df8 <AES_CMAC_Final+0xd0>
 8009dc0:	f107 021c 	add.w	r2, r7, #28
 8009dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc6:	4413      	add	r3, r2
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	b25a      	sxtb	r2, r3
 8009dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	3348      	adds	r3, #72	; 0x48
 8009dd4:	443b      	add	r3, r7
 8009dd6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009dda:	09db      	lsrs	r3, r3, #7
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	b25b      	sxtb	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	b2d9      	uxtb	r1, r3
 8009de6:	f107 021c 	add.w	r2, r7, #28
 8009dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dec:	4413      	add	r3, r2
 8009dee:	460a      	mov	r2, r1
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df4:	3301      	adds	r3, #1
 8009df6:	643b      	str	r3, [r7, #64]	; 0x40
 8009df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfa:	2b0e      	cmp	r3, #14
 8009dfc:	dde0      	ble.n	8009dc0 <AES_CMAC_Final+0x98>
 8009dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009e10:	2b10      	cmp	r3, #16
 8009e12:	d11d      	bne.n	8009e50 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8009e14:	2300      	movs	r3, #0
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e18:	e016      	b.n	8009e48 <AES_CMAC_Final+0x120>
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1e:	4413      	add	r3, r2
 8009e20:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009e24:	781a      	ldrb	r2, [r3, #0]
 8009e26:	f107 011c 	add.w	r1, r7, #28
 8009e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2c:	440b      	add	r3, r1
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	4053      	eors	r3, r2
 8009e32:	b2d9      	uxtb	r1, r3
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e38:	4413      	add	r3, r2
 8009e3a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009e3e:	460a      	mov	r2, r1
 8009e40:	701a      	strb	r2, [r3, #0]
 8009e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e44:	3301      	adds	r3, #1
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4a:	2b0f      	cmp	r3, #15
 8009e4c:	dde5      	ble.n	8009e1a <AES_CMAC_Final+0xf2>
 8009e4e:	e096      	b.n	8009f7e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8009e50:	7f3b      	ldrb	r3, [r7, #28]
 8009e52:	b25b      	sxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da30      	bge.n	8009eba <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 8009e58:	2300      	movs	r3, #0
 8009e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e5c:	e01b      	b.n	8009e96 <AES_CMAC_Final+0x16e>
 8009e5e:	f107 021c 	add.w	r2, r7, #28
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	4413      	add	r3, r2
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	b25a      	sxtb	r2, r3
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	3301      	adds	r3, #1
 8009e70:	3348      	adds	r3, #72	; 0x48
 8009e72:	443b      	add	r3, r7
 8009e74:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009e78:	09db      	lsrs	r3, r3, #7
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	b25b      	sxtb	r3, r3
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	b25b      	sxtb	r3, r3
 8009e82:	b2d9      	uxtb	r1, r3
 8009e84:	f107 021c 	add.w	r2, r7, #28
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	4413      	add	r3, r2
 8009e8c:	460a      	mov	r2, r1
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	3301      	adds	r3, #1
 8009e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	2b0e      	cmp	r3, #14
 8009e9a:	dde0      	ble.n	8009e5e <AES_CMAC_Final+0x136>
 8009e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8009ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009eac:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009eb0:	43db      	mvns	r3, r3
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb8:	e027      	b.n	8009f0a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 8009eba:	2300      	movs	r3, #0
 8009ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ebe:	e01b      	b.n	8009ef8 <AES_CMAC_Final+0x1d0>
 8009ec0:	f107 021c 	add.w	r2, r7, #28
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	4413      	add	r3, r2
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	b25a      	sxtb	r2, r3
 8009ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	3348      	adds	r3, #72	; 0x48
 8009ed4:	443b      	add	r3, r7
 8009ed6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009eda:	09db      	lsrs	r3, r3, #7
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	b25b      	sxtb	r3, r3
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b25b      	sxtb	r3, r3
 8009ee4:	b2d9      	uxtb	r1, r3
 8009ee6:	f107 021c 	add.w	r2, r7, #28
 8009eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eec:	4413      	add	r3, r2
 8009eee:	460a      	mov	r2, r1
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	2b0e      	cmp	r3, #14
 8009efc:	dde0      	ble.n	8009ec0 <AES_CMAC_Final+0x198>
 8009efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	4413      	add	r3, r2
 8009f14:	2280      	movs	r2, #128	; 0x80
 8009f16:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009f1a:	e007      	b.n	8009f2c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4413      	add	r3, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d9eb      	bls.n	8009f1c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 8009f44:	2300      	movs	r3, #0
 8009f46:	633b      	str	r3, [r7, #48]	; 0x30
 8009f48:	e016      	b.n	8009f78 <AES_CMAC_Final+0x250>
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	4413      	add	r3, r2
 8009f50:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	f107 011c 	add.w	r1, r7, #28
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	440b      	add	r3, r1
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	4053      	eors	r3, r2
 8009f62:	b2d9      	uxtb	r1, r3
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	4413      	add	r3, r2
 8009f6a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f6e:	460a      	mov	r2, r1
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	3301      	adds	r3, #1
 8009f76:	633b      	str	r3, [r7, #48]	; 0x30
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	dde5      	ble.n	8009f4a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 8009f7e:	2300      	movs	r3, #0
 8009f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f82:	e015      	b.n	8009fb0 <AES_CMAC_Final+0x288>
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f88:	4413      	add	r3, r2
 8009f8a:	33f1      	adds	r3, #241	; 0xf1
 8009f8c:	781a      	ldrb	r2, [r3, #0]
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	440b      	add	r3, r1
 8009f94:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	4053      	eors	r3, r2
 8009f9c:	b2d9      	uxtb	r1, r3
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	4413      	add	r3, r2
 8009fa4:	33f1      	adds	r3, #241	; 0xf1
 8009fa6:	460a      	mov	r2, r1
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fac:	3301      	adds	r3, #1
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	2b0f      	cmp	r3, #15
 8009fb4:	dde6      	ble.n	8009f84 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009fbc:	f107 030c 	add.w	r3, r7, #12
 8009fc0:	2210      	movs	r2, #16
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f00b fd0d 	bl	80159e2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	f107 030c 	add.w	r3, r7, #12
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fd1d 	bl	800aa10 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8009fd6:	f107 031c 	add.w	r3, r7, #28
 8009fda:	2210      	movs	r2, #16
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f00b fd3a 	bl	8015a58 <memset1>
}
 8009fe4:	bf00      	nop
 8009fe6:	3748      	adds	r7, #72	; 0x48
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3301      	adds	r3, #1
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	7852      	ldrb	r2, [r2, #1]
 800a006:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3302      	adds	r3, #2
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	7892      	ldrb	r2, [r2, #2]
 800a010:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3303      	adds	r3, #3
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	78d2      	ldrb	r2, [r2, #3]
 800a01a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	7912      	ldrb	r2, [r2, #4]
 800a024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3305      	adds	r3, #5
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	7952      	ldrb	r2, [r2, #5]
 800a02e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3306      	adds	r3, #6
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	7992      	ldrb	r2, [r2, #6]
 800a038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3307      	adds	r3, #7
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	79d2      	ldrb	r2, [r2, #7]
 800a042:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3308      	adds	r3, #8
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	7a12      	ldrb	r2, [r2, #8]
 800a04c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3309      	adds	r3, #9
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	7a52      	ldrb	r2, [r2, #9]
 800a056:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	330a      	adds	r3, #10
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	7a92      	ldrb	r2, [r2, #10]
 800a060:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	330b      	adds	r3, #11
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	7ad2      	ldrb	r2, [r2, #11]
 800a06a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	330c      	adds	r3, #12
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	7b12      	ldrb	r2, [r2, #12]
 800a074:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	330d      	adds	r3, #13
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	7b52      	ldrb	r2, [r2, #13]
 800a07e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	330e      	adds	r3, #14
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	7b92      	ldrb	r2, [r2, #14]
 800a088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	330f      	adds	r3, #15
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	7bd2      	ldrb	r2, [r2, #15]
 800a092:	701a      	strb	r2, [r3, #0]
#endif
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	bc80      	pop	{r7}
 800a09c:	4770      	bx	lr

0800a09e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a0ac:	e007      	b.n	800a0be <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	1c53      	adds	r3, r2, #1
 800a0b2:	60bb      	str	r3, [r7, #8]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	60f9      	str	r1, [r7, #12]
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	1e5a      	subs	r2, r3, #1
 800a0c2:	71fa      	strb	r2, [r7, #7]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1f2      	bne.n	800a0ae <copy_block_nn+0x10>
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bc80      	pop	{r7}
 800a0d2:	4770      	bx	lr

0800a0d4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	4053      	eors	r3, r2
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	7819      	ldrb	r1, [r3, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	404a      	eors	r2, r1
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3302      	adds	r3, #2
 800a108:	7819      	ldrb	r1, [r3, #0]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	3302      	adds	r3, #2
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3302      	adds	r3, #2
 800a114:	404a      	eors	r2, r1
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3303      	adds	r3, #3
 800a11e:	7819      	ldrb	r1, [r3, #0]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3303      	adds	r3, #3
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3303      	adds	r3, #3
 800a12a:	404a      	eors	r2, r1
 800a12c:	b2d2      	uxtb	r2, r2
 800a12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	7819      	ldrb	r1, [r3, #0]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	781a      	ldrb	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	404a      	eors	r2, r1
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3305      	adds	r3, #5
 800a14a:	7819      	ldrb	r1, [r3, #0]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	3305      	adds	r3, #5
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3305      	adds	r3, #5
 800a156:	404a      	eors	r2, r1
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3306      	adds	r3, #6
 800a160:	7819      	ldrb	r1, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3306      	adds	r3, #6
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3306      	adds	r3, #6
 800a16c:	404a      	eors	r2, r1
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3307      	adds	r3, #7
 800a176:	7819      	ldrb	r1, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	3307      	adds	r3, #7
 800a17c:	781a      	ldrb	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3307      	adds	r3, #7
 800a182:	404a      	eors	r2, r1
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3308      	adds	r3, #8
 800a18c:	7819      	ldrb	r1, [r3, #0]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3308      	adds	r3, #8
 800a198:	404a      	eors	r2, r1
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3309      	adds	r3, #9
 800a1a2:	7819      	ldrb	r1, [r3, #0]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	3309      	adds	r3, #9
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3309      	adds	r3, #9
 800a1ae:	404a      	eors	r2, r1
 800a1b0:	b2d2      	uxtb	r2, r2
 800a1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	330a      	adds	r3, #10
 800a1b8:	7819      	ldrb	r1, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	330a      	adds	r3, #10
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	330a      	adds	r3, #10
 800a1c4:	404a      	eors	r2, r1
 800a1c6:	b2d2      	uxtb	r2, r2
 800a1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	330b      	adds	r3, #11
 800a1ce:	7819      	ldrb	r1, [r3, #0]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	330b      	adds	r3, #11
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	330b      	adds	r3, #11
 800a1da:	404a      	eors	r2, r1
 800a1dc:	b2d2      	uxtb	r2, r2
 800a1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	330c      	adds	r3, #12
 800a1e4:	7819      	ldrb	r1, [r3, #0]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	330c      	adds	r3, #12
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	330c      	adds	r3, #12
 800a1f0:	404a      	eors	r2, r1
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	330d      	adds	r3, #13
 800a1fa:	7819      	ldrb	r1, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	330d      	adds	r3, #13
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	330d      	adds	r3, #13
 800a206:	404a      	eors	r2, r1
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	330e      	adds	r3, #14
 800a210:	7819      	ldrb	r1, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	330e      	adds	r3, #14
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	330e      	adds	r3, #14
 800a21c:	404a      	eors	r2, r1
 800a21e:	b2d2      	uxtb	r2, r2
 800a220:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	330f      	adds	r3, #15
 800a226:	7819      	ldrb	r1, [r3, #0]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	330f      	adds	r3, #15
 800a22c:	781a      	ldrb	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	330f      	adds	r3, #15
 800a232:	404a      	eors	r2, r1
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]
#endif
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr

0800a242 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	4053      	eors	r3, r2
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	3301      	adds	r3, #1
 800a262:	7819      	ldrb	r1, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3301      	adds	r3, #1
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	404a      	eors	r2, r1
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	3302      	adds	r3, #2
 800a278:	7819      	ldrb	r1, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3302      	adds	r3, #2
 800a27e:	781a      	ldrb	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3302      	adds	r3, #2
 800a284:	404a      	eors	r2, r1
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	3303      	adds	r3, #3
 800a28e:	7819      	ldrb	r1, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3303      	adds	r3, #3
 800a294:	781a      	ldrb	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3303      	adds	r3, #3
 800a29a:	404a      	eors	r2, r1
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	7819      	ldrb	r1, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	404a      	eors	r2, r1
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3305      	adds	r3, #5
 800a2ba:	7819      	ldrb	r1, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3305      	adds	r3, #5
 800a2c0:	781a      	ldrb	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3305      	adds	r3, #5
 800a2c6:	404a      	eors	r2, r1
 800a2c8:	b2d2      	uxtb	r2, r2
 800a2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	3306      	adds	r3, #6
 800a2d0:	7819      	ldrb	r1, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3306      	adds	r3, #6
 800a2d6:	781a      	ldrb	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3306      	adds	r3, #6
 800a2dc:	404a      	eors	r2, r1
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	3307      	adds	r3, #7
 800a2e6:	7819      	ldrb	r1, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	781a      	ldrb	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3307      	adds	r3, #7
 800a2f2:	404a      	eors	r2, r1
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	7819      	ldrb	r1, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3308      	adds	r3, #8
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3308      	adds	r3, #8
 800a308:	404a      	eors	r2, r1
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	3309      	adds	r3, #9
 800a312:	7819      	ldrb	r1, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3309      	adds	r3, #9
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3309      	adds	r3, #9
 800a31e:	404a      	eors	r2, r1
 800a320:	b2d2      	uxtb	r2, r2
 800a322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	330a      	adds	r3, #10
 800a328:	7819      	ldrb	r1, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	330a      	adds	r3, #10
 800a32e:	781a      	ldrb	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	330a      	adds	r3, #10
 800a334:	404a      	eors	r2, r1
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	330b      	adds	r3, #11
 800a33e:	7819      	ldrb	r1, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	330b      	adds	r3, #11
 800a344:	781a      	ldrb	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	330b      	adds	r3, #11
 800a34a:	404a      	eors	r2, r1
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	330c      	adds	r3, #12
 800a354:	7819      	ldrb	r1, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	330c      	adds	r3, #12
 800a35a:	781a      	ldrb	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	330c      	adds	r3, #12
 800a360:	404a      	eors	r2, r1
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	330d      	adds	r3, #13
 800a36a:	7819      	ldrb	r1, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	330d      	adds	r3, #13
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	330d      	adds	r3, #13
 800a376:	404a      	eors	r2, r1
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	330e      	adds	r3, #14
 800a380:	7819      	ldrb	r1, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	330e      	adds	r3, #14
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	330e      	adds	r3, #14
 800a38c:	404a      	eors	r2, r1
 800a38e:	b2d2      	uxtb	r2, r2
 800a390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	330f      	adds	r3, #15
 800a396:	7819      	ldrb	r1, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	330f      	adds	r3, #15
 800a39c:	781a      	ldrb	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	330f      	adds	r3, #15
 800a3a2:	404a      	eors	r2, r1
 800a3a4:	b2d2      	uxtb	r2, r2
 800a3a6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff fe88 	bl	800a0d4 <xor_block>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4b48      	ldr	r3, [pc, #288]	; (800a4fc <shift_sub_rows+0x130>)
 800a3dc:	5c9a      	ldrb	r2, [r3, r2]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4a43      	ldr	r2, [pc, #268]	; (800a4fc <shift_sub_rows+0x130>)
 800a3f0:	5c52      	ldrb	r2, [r2, r1]
 800a3f2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3308      	adds	r3, #8
 800a400:	4a3e      	ldr	r2, [pc, #248]	; (800a4fc <shift_sub_rows+0x130>)
 800a402:	5c52      	ldrb	r2, [r2, r1]
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	330c      	adds	r3, #12
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	330c      	adds	r3, #12
 800a412:	4a3a      	ldr	r2, [pc, #232]	; (800a4fc <shift_sub_rows+0x130>)
 800a414:	5c52      	ldrb	r2, [r2, r1]
 800a416:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	73fb      	strb	r3, [r7, #15]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3305      	adds	r3, #5
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	4619      	mov	r1, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a34      	ldr	r2, [pc, #208]	; (800a4fc <shift_sub_rows+0x130>)
 800a42c:	5c52      	ldrb	r2, [r2, r1]
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3309      	adds	r3, #9
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	4619      	mov	r1, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3305      	adds	r3, #5
 800a43c:	4a2f      	ldr	r2, [pc, #188]	; (800a4fc <shift_sub_rows+0x130>)
 800a43e:	5c52      	ldrb	r2, [r2, r1]
 800a440:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	330d      	adds	r3, #13
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	4619      	mov	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3309      	adds	r3, #9
 800a44e:	4a2b      	ldr	r2, [pc, #172]	; (800a4fc <shift_sub_rows+0x130>)
 800a450:	5c52      	ldrb	r2, [r2, r1]
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	7bfa      	ldrb	r2, [r7, #15]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	330d      	adds	r3, #13
 800a45a:	4928      	ldr	r1, [pc, #160]	; (800a4fc <shift_sub_rows+0x130>)
 800a45c:	5c8a      	ldrb	r2, [r1, r2]
 800a45e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	789b      	ldrb	r3, [r3, #2]
 800a464:	73fb      	strb	r3, [r7, #15]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	330a      	adds	r3, #10
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	4619      	mov	r1, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3302      	adds	r3, #2
 800a472:	4a22      	ldr	r2, [pc, #136]	; (800a4fc <shift_sub_rows+0x130>)
 800a474:	5c52      	ldrb	r2, [r2, r1]
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	7bfa      	ldrb	r2, [r7, #15]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	330a      	adds	r3, #10
 800a47e:	491f      	ldr	r1, [pc, #124]	; (800a4fc <shift_sub_rows+0x130>)
 800a480:	5c8a      	ldrb	r2, [r1, r2]
 800a482:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	799b      	ldrb	r3, [r3, #6]
 800a488:	73fb      	strb	r3, [r7, #15]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	330e      	adds	r3, #14
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	4619      	mov	r1, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3306      	adds	r3, #6
 800a496:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <shift_sub_rows+0x130>)
 800a498:	5c52      	ldrb	r2, [r2, r1]
 800a49a:	701a      	strb	r2, [r3, #0]
 800a49c:	7bfa      	ldrb	r2, [r7, #15]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	330e      	adds	r3, #14
 800a4a2:	4916      	ldr	r1, [pc, #88]	; (800a4fc <shift_sub_rows+0x130>)
 800a4a4:	5c8a      	ldrb	r2, [r1, r2]
 800a4a6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7bdb      	ldrb	r3, [r3, #15]
 800a4ac:	73fb      	strb	r3, [r7, #15]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	330b      	adds	r3, #11
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	330f      	adds	r3, #15
 800a4ba:	4a10      	ldr	r2, [pc, #64]	; (800a4fc <shift_sub_rows+0x130>)
 800a4bc:	5c52      	ldrb	r2, [r2, r1]
 800a4be:	701a      	strb	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3307      	adds	r3, #7
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	330b      	adds	r3, #11
 800a4cc:	4a0b      	ldr	r2, [pc, #44]	; (800a4fc <shift_sub_rows+0x130>)
 800a4ce:	5c52      	ldrb	r2, [r2, r1]
 800a4d0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3303      	adds	r3, #3
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	4a07      	ldr	r2, [pc, #28]	; (800a4fc <shift_sub_rows+0x130>)
 800a4e0:	5c52      	ldrb	r2, [r2, r1]
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3303      	adds	r3, #3
 800a4ea:	4904      	ldr	r1, [pc, #16]	; (800a4fc <shift_sub_rows+0x130>)
 800a4ec:	5c8a      	ldrb	r2, [r1, r2]
 800a4ee:	701a      	strb	r2, [r3, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bc80      	pop	{r7}
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	0801b608 	.word	0x0801b608

0800a500 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a508:	f107 0308 	add.w	r3, r7, #8
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fd6c 	bl	8009fec <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a514:	7a3b      	ldrb	r3, [r7, #8]
 800a516:	461a      	mov	r2, r3
 800a518:	4b9a      	ldr	r3, [pc, #616]	; (800a784 <mix_sub_columns+0x284>)
 800a51a:	5c9a      	ldrb	r2, [r3, r2]
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
 800a51e:	4619      	mov	r1, r3
 800a520:	4b99      	ldr	r3, [pc, #612]	; (800a788 <mix_sub_columns+0x288>)
 800a522:	5c5b      	ldrb	r3, [r3, r1]
 800a524:	4053      	eors	r3, r2
 800a526:	b2da      	uxtb	r2, r3
 800a528:	7cbb      	ldrb	r3, [r7, #18]
 800a52a:	4619      	mov	r1, r3
 800a52c:	4b97      	ldr	r3, [pc, #604]	; (800a78c <mix_sub_columns+0x28c>)
 800a52e:	5c5b      	ldrb	r3, [r3, r1]
 800a530:	4053      	eors	r3, r2
 800a532:	b2da      	uxtb	r2, r3
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	4619      	mov	r1, r3
 800a538:	4b94      	ldr	r3, [pc, #592]	; (800a78c <mix_sub_columns+0x28c>)
 800a53a:	5c5b      	ldrb	r3, [r3, r1]
 800a53c:	4053      	eors	r3, r2
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a544:	7a3b      	ldrb	r3, [r7, #8]
 800a546:	461a      	mov	r2, r3
 800a548:	4b90      	ldr	r3, [pc, #576]	; (800a78c <mix_sub_columns+0x28c>)
 800a54a:	5c9a      	ldrb	r2, [r3, r2]
 800a54c:	7b7b      	ldrb	r3, [r7, #13]
 800a54e:	4619      	mov	r1, r3
 800a550:	4b8c      	ldr	r3, [pc, #560]	; (800a784 <mix_sub_columns+0x284>)
 800a552:	5c5b      	ldrb	r3, [r3, r1]
 800a554:	4053      	eors	r3, r2
 800a556:	b2da      	uxtb	r2, r3
 800a558:	7cbb      	ldrb	r3, [r7, #18]
 800a55a:	4619      	mov	r1, r3
 800a55c:	4b8a      	ldr	r3, [pc, #552]	; (800a788 <mix_sub_columns+0x288>)
 800a55e:	5c5b      	ldrb	r3, [r3, r1]
 800a560:	4053      	eors	r3, r2
 800a562:	b2d9      	uxtb	r1, r3
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	461a      	mov	r2, r3
 800a568:	4b88      	ldr	r3, [pc, #544]	; (800a78c <mix_sub_columns+0x28c>)
 800a56a:	5c9a      	ldrb	r2, [r3, r2]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3301      	adds	r3, #1
 800a570:	404a      	eors	r2, r1
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a576:	7a3b      	ldrb	r3, [r7, #8]
 800a578:	461a      	mov	r2, r3
 800a57a:	4b84      	ldr	r3, [pc, #528]	; (800a78c <mix_sub_columns+0x28c>)
 800a57c:	5c9a      	ldrb	r2, [r3, r2]
 800a57e:	7b7b      	ldrb	r3, [r7, #13]
 800a580:	4619      	mov	r1, r3
 800a582:	4b82      	ldr	r3, [pc, #520]	; (800a78c <mix_sub_columns+0x28c>)
 800a584:	5c5b      	ldrb	r3, [r3, r1]
 800a586:	4053      	eors	r3, r2
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	7cbb      	ldrb	r3, [r7, #18]
 800a58c:	4619      	mov	r1, r3
 800a58e:	4b7d      	ldr	r3, [pc, #500]	; (800a784 <mix_sub_columns+0x284>)
 800a590:	5c5b      	ldrb	r3, [r3, r1]
 800a592:	4053      	eors	r3, r2
 800a594:	b2d9      	uxtb	r1, r3
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	461a      	mov	r2, r3
 800a59a:	4b7b      	ldr	r3, [pc, #492]	; (800a788 <mix_sub_columns+0x288>)
 800a59c:	5c9a      	ldrb	r2, [r3, r2]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	404a      	eors	r2, r1
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a5a8:	7a3b      	ldrb	r3, [r7, #8]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4b76      	ldr	r3, [pc, #472]	; (800a788 <mix_sub_columns+0x288>)
 800a5ae:	5c9a      	ldrb	r2, [r3, r2]
 800a5b0:	7b7b      	ldrb	r3, [r7, #13]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4b75      	ldr	r3, [pc, #468]	; (800a78c <mix_sub_columns+0x28c>)
 800a5b6:	5c5b      	ldrb	r3, [r3, r1]
 800a5b8:	4053      	eors	r3, r2
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	7cbb      	ldrb	r3, [r7, #18]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4b72      	ldr	r3, [pc, #456]	; (800a78c <mix_sub_columns+0x28c>)
 800a5c2:	5c5b      	ldrb	r3, [r3, r1]
 800a5c4:	4053      	eors	r3, r2
 800a5c6:	b2d9      	uxtb	r1, r3
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4b6d      	ldr	r3, [pc, #436]	; (800a784 <mix_sub_columns+0x284>)
 800a5ce:	5c9a      	ldrb	r2, [r3, r2]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3303      	adds	r3, #3
 800a5d4:	404a      	eors	r2, r1
 800a5d6:	b2d2      	uxtb	r2, r2
 800a5d8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a5da:	7b3b      	ldrb	r3, [r7, #12]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4b69      	ldr	r3, [pc, #420]	; (800a784 <mix_sub_columns+0x284>)
 800a5e0:	5c9a      	ldrb	r2, [r3, r2]
 800a5e2:	7c7b      	ldrb	r3, [r7, #17]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4b68      	ldr	r3, [pc, #416]	; (800a788 <mix_sub_columns+0x288>)
 800a5e8:	5c5b      	ldrb	r3, [r3, r1]
 800a5ea:	4053      	eors	r3, r2
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	7dbb      	ldrb	r3, [r7, #22]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4b66      	ldr	r3, [pc, #408]	; (800a78c <mix_sub_columns+0x28c>)
 800a5f4:	5c5b      	ldrb	r3, [r3, r1]
 800a5f6:	4053      	eors	r3, r2
 800a5f8:	b2d9      	uxtb	r1, r3
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4b63      	ldr	r3, [pc, #396]	; (800a78c <mix_sub_columns+0x28c>)
 800a600:	5c9a      	ldrb	r2, [r3, r2]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	404a      	eors	r2, r1
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a60c:	7b3b      	ldrb	r3, [r7, #12]
 800a60e:	461a      	mov	r2, r3
 800a610:	4b5e      	ldr	r3, [pc, #376]	; (800a78c <mix_sub_columns+0x28c>)
 800a612:	5c9a      	ldrb	r2, [r3, r2]
 800a614:	7c7b      	ldrb	r3, [r7, #17]
 800a616:	4619      	mov	r1, r3
 800a618:	4b5a      	ldr	r3, [pc, #360]	; (800a784 <mix_sub_columns+0x284>)
 800a61a:	5c5b      	ldrb	r3, [r3, r1]
 800a61c:	4053      	eors	r3, r2
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	7dbb      	ldrb	r3, [r7, #22]
 800a622:	4619      	mov	r1, r3
 800a624:	4b58      	ldr	r3, [pc, #352]	; (800a788 <mix_sub_columns+0x288>)
 800a626:	5c5b      	ldrb	r3, [r3, r1]
 800a628:	4053      	eors	r3, r2
 800a62a:	b2d9      	uxtb	r1, r3
 800a62c:	7afb      	ldrb	r3, [r7, #11]
 800a62e:	461a      	mov	r2, r3
 800a630:	4b56      	ldr	r3, [pc, #344]	; (800a78c <mix_sub_columns+0x28c>)
 800a632:	5c9a      	ldrb	r2, [r3, r2]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3305      	adds	r3, #5
 800a638:	404a      	eors	r2, r1
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800a63e:	7b3b      	ldrb	r3, [r7, #12]
 800a640:	461a      	mov	r2, r3
 800a642:	4b52      	ldr	r3, [pc, #328]	; (800a78c <mix_sub_columns+0x28c>)
 800a644:	5c9a      	ldrb	r2, [r3, r2]
 800a646:	7c7b      	ldrb	r3, [r7, #17]
 800a648:	4619      	mov	r1, r3
 800a64a:	4b50      	ldr	r3, [pc, #320]	; (800a78c <mix_sub_columns+0x28c>)
 800a64c:	5c5b      	ldrb	r3, [r3, r1]
 800a64e:	4053      	eors	r3, r2
 800a650:	b2da      	uxtb	r2, r3
 800a652:	7dbb      	ldrb	r3, [r7, #22]
 800a654:	4619      	mov	r1, r3
 800a656:	4b4b      	ldr	r3, [pc, #300]	; (800a784 <mix_sub_columns+0x284>)
 800a658:	5c5b      	ldrb	r3, [r3, r1]
 800a65a:	4053      	eors	r3, r2
 800a65c:	b2d9      	uxtb	r1, r3
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	461a      	mov	r2, r3
 800a662:	4b49      	ldr	r3, [pc, #292]	; (800a788 <mix_sub_columns+0x288>)
 800a664:	5c9a      	ldrb	r2, [r3, r2]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3306      	adds	r3, #6
 800a66a:	404a      	eors	r2, r1
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800a670:	7b3b      	ldrb	r3, [r7, #12]
 800a672:	461a      	mov	r2, r3
 800a674:	4b44      	ldr	r3, [pc, #272]	; (800a788 <mix_sub_columns+0x288>)
 800a676:	5c9a      	ldrb	r2, [r3, r2]
 800a678:	7c7b      	ldrb	r3, [r7, #17]
 800a67a:	4619      	mov	r1, r3
 800a67c:	4b43      	ldr	r3, [pc, #268]	; (800a78c <mix_sub_columns+0x28c>)
 800a67e:	5c5b      	ldrb	r3, [r3, r1]
 800a680:	4053      	eors	r3, r2
 800a682:	b2da      	uxtb	r2, r3
 800a684:	7dbb      	ldrb	r3, [r7, #22]
 800a686:	4619      	mov	r1, r3
 800a688:	4b40      	ldr	r3, [pc, #256]	; (800a78c <mix_sub_columns+0x28c>)
 800a68a:	5c5b      	ldrb	r3, [r3, r1]
 800a68c:	4053      	eors	r3, r2
 800a68e:	b2d9      	uxtb	r1, r3
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	461a      	mov	r2, r3
 800a694:	4b3b      	ldr	r3, [pc, #236]	; (800a784 <mix_sub_columns+0x284>)
 800a696:	5c9a      	ldrb	r2, [r3, r2]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3307      	adds	r3, #7
 800a69c:	404a      	eors	r2, r1
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800a6a2:	7c3b      	ldrb	r3, [r7, #16]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4b37      	ldr	r3, [pc, #220]	; (800a784 <mix_sub_columns+0x284>)
 800a6a8:	5c9a      	ldrb	r2, [r3, r2]
 800a6aa:	7d7b      	ldrb	r3, [r7, #21]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4b36      	ldr	r3, [pc, #216]	; (800a788 <mix_sub_columns+0x288>)
 800a6b0:	5c5b      	ldrb	r3, [r3, r1]
 800a6b2:	4053      	eors	r3, r2
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	7abb      	ldrb	r3, [r7, #10]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4b34      	ldr	r3, [pc, #208]	; (800a78c <mix_sub_columns+0x28c>)
 800a6bc:	5c5b      	ldrb	r3, [r3, r1]
 800a6be:	4053      	eors	r3, r2
 800a6c0:	b2d9      	uxtb	r1, r3
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4b31      	ldr	r3, [pc, #196]	; (800a78c <mix_sub_columns+0x28c>)
 800a6c8:	5c9a      	ldrb	r2, [r3, r2]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	404a      	eors	r2, r1
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800a6d4:	7c3b      	ldrb	r3, [r7, #16]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4b2c      	ldr	r3, [pc, #176]	; (800a78c <mix_sub_columns+0x28c>)
 800a6da:	5c9a      	ldrb	r2, [r3, r2]
 800a6dc:	7d7b      	ldrb	r3, [r7, #21]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4b28      	ldr	r3, [pc, #160]	; (800a784 <mix_sub_columns+0x284>)
 800a6e2:	5c5b      	ldrb	r3, [r3, r1]
 800a6e4:	4053      	eors	r3, r2
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	7abb      	ldrb	r3, [r7, #10]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4b26      	ldr	r3, [pc, #152]	; (800a788 <mix_sub_columns+0x288>)
 800a6ee:	5c5b      	ldrb	r3, [r3, r1]
 800a6f0:	4053      	eors	r3, r2
 800a6f2:	b2d9      	uxtb	r1, r3
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4b24      	ldr	r3, [pc, #144]	; (800a78c <mix_sub_columns+0x28c>)
 800a6fa:	5c9a      	ldrb	r2, [r3, r2]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3309      	adds	r3, #9
 800a700:	404a      	eors	r2, r1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800a706:	7c3b      	ldrb	r3, [r7, #16]
 800a708:	461a      	mov	r2, r3
 800a70a:	4b20      	ldr	r3, [pc, #128]	; (800a78c <mix_sub_columns+0x28c>)
 800a70c:	5c9a      	ldrb	r2, [r3, r2]
 800a70e:	7d7b      	ldrb	r3, [r7, #21]
 800a710:	4619      	mov	r1, r3
 800a712:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <mix_sub_columns+0x28c>)
 800a714:	5c5b      	ldrb	r3, [r3, r1]
 800a716:	4053      	eors	r3, r2
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	7abb      	ldrb	r3, [r7, #10]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4b19      	ldr	r3, [pc, #100]	; (800a784 <mix_sub_columns+0x284>)
 800a720:	5c5b      	ldrb	r3, [r3, r1]
 800a722:	4053      	eors	r3, r2
 800a724:	b2d9      	uxtb	r1, r3
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	461a      	mov	r2, r3
 800a72a:	4b17      	ldr	r3, [pc, #92]	; (800a788 <mix_sub_columns+0x288>)
 800a72c:	5c9a      	ldrb	r2, [r3, r2]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	330a      	adds	r3, #10
 800a732:	404a      	eors	r2, r1
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800a738:	7c3b      	ldrb	r3, [r7, #16]
 800a73a:	461a      	mov	r2, r3
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <mix_sub_columns+0x288>)
 800a73e:	5c9a      	ldrb	r2, [r3, r2]
 800a740:	7d7b      	ldrb	r3, [r7, #21]
 800a742:	4619      	mov	r1, r3
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <mix_sub_columns+0x28c>)
 800a746:	5c5b      	ldrb	r3, [r3, r1]
 800a748:	4053      	eors	r3, r2
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	7abb      	ldrb	r3, [r7, #10]
 800a74e:	4619      	mov	r1, r3
 800a750:	4b0e      	ldr	r3, [pc, #56]	; (800a78c <mix_sub_columns+0x28c>)
 800a752:	5c5b      	ldrb	r3, [r3, r1]
 800a754:	4053      	eors	r3, r2
 800a756:	b2d9      	uxtb	r1, r3
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	461a      	mov	r2, r3
 800a75c:	4b09      	ldr	r3, [pc, #36]	; (800a784 <mix_sub_columns+0x284>)
 800a75e:	5c9a      	ldrb	r2, [r3, r2]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	330b      	adds	r3, #11
 800a764:	404a      	eors	r2, r1
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800a76a:	7d3b      	ldrb	r3, [r7, #20]
 800a76c:	461a      	mov	r2, r3
 800a76e:	4b05      	ldr	r3, [pc, #20]	; (800a784 <mix_sub_columns+0x284>)
 800a770:	5c9a      	ldrb	r2, [r3, r2]
 800a772:	7a7b      	ldrb	r3, [r7, #9]
 800a774:	4619      	mov	r1, r3
 800a776:	4b04      	ldr	r3, [pc, #16]	; (800a788 <mix_sub_columns+0x288>)
 800a778:	5c5b      	ldrb	r3, [r3, r1]
 800a77a:	4053      	eors	r3, r2
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	4619      	mov	r1, r3
 800a782:	e005      	b.n	800a790 <mix_sub_columns+0x290>
 800a784:	0801b708 	.word	0x0801b708
 800a788:	0801b808 	.word	0x0801b808
 800a78c:	0801b608 	.word	0x0801b608
 800a790:	4b2d      	ldr	r3, [pc, #180]	; (800a848 <mix_sub_columns+0x348>)
 800a792:	5c5b      	ldrb	r3, [r3, r1]
 800a794:	4053      	eors	r3, r2
 800a796:	b2d9      	uxtb	r1, r3
 800a798:	7cfb      	ldrb	r3, [r7, #19]
 800a79a:	461a      	mov	r2, r3
 800a79c:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <mix_sub_columns+0x348>)
 800a79e:	5c9a      	ldrb	r2, [r3, r2]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	404a      	eors	r2, r1
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800a7aa:	7d3b      	ldrb	r3, [r7, #20]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4b26      	ldr	r3, [pc, #152]	; (800a848 <mix_sub_columns+0x348>)
 800a7b0:	5c9a      	ldrb	r2, [r3, r2]
 800a7b2:	7a7b      	ldrb	r3, [r7, #9]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4b25      	ldr	r3, [pc, #148]	; (800a84c <mix_sub_columns+0x34c>)
 800a7b8:	5c5b      	ldrb	r3, [r3, r1]
 800a7ba:	4053      	eors	r3, r2
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4b23      	ldr	r3, [pc, #140]	; (800a850 <mix_sub_columns+0x350>)
 800a7c4:	5c5b      	ldrb	r3, [r3, r1]
 800a7c6:	4053      	eors	r3, r2
 800a7c8:	b2d9      	uxtb	r1, r3
 800a7ca:	7cfb      	ldrb	r3, [r7, #19]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <mix_sub_columns+0x348>)
 800a7d0:	5c9a      	ldrb	r2, [r3, r2]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	330d      	adds	r3, #13
 800a7d6:	404a      	eors	r2, r1
 800a7d8:	b2d2      	uxtb	r2, r2
 800a7da:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800a7dc:	7d3b      	ldrb	r3, [r7, #20]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	4b19      	ldr	r3, [pc, #100]	; (800a848 <mix_sub_columns+0x348>)
 800a7e2:	5c9a      	ldrb	r2, [r3, r2]
 800a7e4:	7a7b      	ldrb	r3, [r7, #9]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4b17      	ldr	r3, [pc, #92]	; (800a848 <mix_sub_columns+0x348>)
 800a7ea:	5c5b      	ldrb	r3, [r3, r1]
 800a7ec:	4053      	eors	r3, r2
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4b15      	ldr	r3, [pc, #84]	; (800a84c <mix_sub_columns+0x34c>)
 800a7f6:	5c5b      	ldrb	r3, [r3, r1]
 800a7f8:	4053      	eors	r3, r2
 800a7fa:	b2d9      	uxtb	r1, r3
 800a7fc:	7cfb      	ldrb	r3, [r7, #19]
 800a7fe:	461a      	mov	r2, r3
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <mix_sub_columns+0x350>)
 800a802:	5c9a      	ldrb	r2, [r3, r2]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	330e      	adds	r3, #14
 800a808:	404a      	eors	r2, r1
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800a80e:	7d3b      	ldrb	r3, [r7, #20]
 800a810:	461a      	mov	r2, r3
 800a812:	4b0f      	ldr	r3, [pc, #60]	; (800a850 <mix_sub_columns+0x350>)
 800a814:	5c9a      	ldrb	r2, [r3, r2]
 800a816:	7a7b      	ldrb	r3, [r7, #9]
 800a818:	4619      	mov	r1, r3
 800a81a:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <mix_sub_columns+0x348>)
 800a81c:	5c5b      	ldrb	r3, [r3, r1]
 800a81e:	4053      	eors	r3, r2
 800a820:	b2da      	uxtb	r2, r3
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	4619      	mov	r1, r3
 800a826:	4b08      	ldr	r3, [pc, #32]	; (800a848 <mix_sub_columns+0x348>)
 800a828:	5c5b      	ldrb	r3, [r3, r1]
 800a82a:	4053      	eors	r3, r2
 800a82c:	b2d9      	uxtb	r1, r3
 800a82e:	7cfb      	ldrb	r3, [r7, #19]
 800a830:	461a      	mov	r2, r3
 800a832:	4b06      	ldr	r3, [pc, #24]	; (800a84c <mix_sub_columns+0x34c>)
 800a834:	5c9a      	ldrb	r2, [r3, r2]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	330f      	adds	r3, #15
 800a83a:	404a      	eors	r2, r1
 800a83c:	b2d2      	uxtb	r2, r2
 800a83e:	701a      	strb	r2, [r3, #0]
  }
 800a840:	bf00      	nop
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	0801b608 	.word	0x0801b608
 800a84c:	0801b708 	.word	0x0801b708
 800a850:	0801b808 	.word	0x0801b808

0800a854 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	460b      	mov	r3, r1
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	3b10      	subs	r3, #16
 800a866:	2b10      	cmp	r3, #16
 800a868:	bf8c      	ite	hi
 800a86a:	2201      	movhi	r2, #1
 800a86c:	2200      	movls	r2, #0
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	2a00      	cmp	r2, #0
 800a872:	d10d      	bne.n	800a890 <lorawan_aes_set_key+0x3c>
 800a874:	2201      	movs	r2, #1
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a87e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a882:	2b00      	cmp	r3, #0
 800a884:	bf14      	ite	ne
 800a886:	2301      	movne	r3, #1
 800a888:	2300      	moveq	r3, #0
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d105      	bne.n	800a89c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800a898:	23ff      	movs	r3, #255	; 0xff
 800a89a:	e0b2      	b.n	800aa02 <lorawan_aes_set_key+0x1ae>
        break;
 800a89c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7afa      	ldrb	r2, [r7, #11]
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fbfa 	bl	800a09e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	331c      	adds	r3, #28
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800a8b4:	7c7b      	ldrb	r3, [r7, #17]
 800a8b6:	091b      	lsrs	r3, r3, #4
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a8c4:	7afb      	ldrb	r3, [r7, #11]
 800a8c6:	75fb      	strb	r3, [r7, #23]
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	75bb      	strb	r3, [r7, #22]
 800a8cc:	e093      	b.n	800a9f6 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	5cd3      	ldrb	r3, [r2, r3]
 800a8d6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	3b03      	subs	r3, #3
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	5cd3      	ldrb	r3, [r2, r3]
 800a8e0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	3b02      	subs	r3, #2
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	5cd3      	ldrb	r3, [r2, r3]
 800a8ea:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	5cd3      	ldrb	r3, [r2, r3]
 800a8f4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	7afa      	ldrb	r2, [r7, #11]
 800a8fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8fe:	fb01 f202 	mul.w	r2, r1, r2
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d127      	bne.n	800a95a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800a90a:	7d7b      	ldrb	r3, [r7, #21]
 800a90c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800a90e:	7d3b      	ldrb	r3, [r7, #20]
 800a910:	4a3e      	ldr	r2, [pc, #248]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a912:	5cd2      	ldrb	r2, [r2, r3]
 800a914:	7dbb      	ldrb	r3, [r7, #22]
 800a916:	4053      	eors	r3, r2
 800a918:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800a91a:	7cfb      	ldrb	r3, [r7, #19]
 800a91c:	4a3b      	ldr	r2, [pc, #236]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a91e:	5cd3      	ldrb	r3, [r2, r3]
 800a920:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800a922:	7cbb      	ldrb	r3, [r7, #18]
 800a924:	4a39      	ldr	r2, [pc, #228]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a926:	5cd3      	ldrb	r3, [r2, r3]
 800a928:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800a92a:	7c3b      	ldrb	r3, [r7, #16]
 800a92c:	4a37      	ldr	r2, [pc, #220]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a92e:	5cd3      	ldrb	r3, [r2, r3]
 800a930:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800a932:	7dbb      	ldrb	r3, [r7, #22]
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	b25a      	sxtb	r2, r3
 800a938:	7dbb      	ldrb	r3, [r7, #22]
 800a93a:	09db      	lsrs	r3, r3, #7
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	4619      	mov	r1, r3
 800a940:	0049      	lsls	r1, r1, #1
 800a942:	440b      	add	r3, r1
 800a944:	4619      	mov	r1, r3
 800a946:	00c8      	lsls	r0, r1, #3
 800a948:	4619      	mov	r1, r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	440b      	add	r3, r1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	b25b      	sxtb	r3, r3
 800a952:	4053      	eors	r3, r2
 800a954:	b25b      	sxtb	r3, r3
 800a956:	75bb      	strb	r3, [r7, #22]
 800a958:	e01c      	b.n	800a994 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800a95a:	7afb      	ldrb	r3, [r7, #11]
 800a95c:	2b18      	cmp	r3, #24
 800a95e:	d919      	bls.n	800a994 <lorawan_aes_set_key+0x140>
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	7afa      	ldrb	r2, [r7, #11]
 800a964:	fbb3 f1f2 	udiv	r1, r3, r2
 800a968:	fb01 f202 	mul.w	r2, r1, r2
 800a96c:	1a9b      	subs	r3, r3, r2
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b10      	cmp	r3, #16
 800a972:	d10f      	bne.n	800a994 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800a974:	7d7b      	ldrb	r3, [r7, #21]
 800a976:	4a25      	ldr	r2, [pc, #148]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a978:	5cd3      	ldrb	r3, [r2, r3]
 800a97a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800a97c:	7d3b      	ldrb	r3, [r7, #20]
 800a97e:	4a23      	ldr	r2, [pc, #140]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a980:	5cd3      	ldrb	r3, [r2, r3]
 800a982:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800a984:	7cfb      	ldrb	r3, [r7, #19]
 800a986:	4a21      	ldr	r2, [pc, #132]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a988:	5cd3      	ldrb	r3, [r2, r3]
 800a98a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800a98c:	7cbb      	ldrb	r3, [r7, #18]
 800a98e:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a990:	5cd3      	ldrb	r3, [r2, r3]
 800a992:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800a994:	7dfa      	ldrb	r2, [r7, #23]
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800a99c:	7c3b      	ldrb	r3, [r7, #16]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	5cd1      	ldrb	r1, [r2, r3]
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	7d7a      	ldrb	r2, [r7, #21]
 800a9a6:	404a      	eors	r2, r1
 800a9a8:	b2d1      	uxtb	r1, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800a9ae:	7c3b      	ldrb	r3, [r7, #16]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	5cd1      	ldrb	r1, [r2, r3]
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	7d3a      	ldrb	r2, [r7, #20]
 800a9bc:	404a      	eors	r2, r1
 800a9be:	b2d1      	uxtb	r1, r2
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800a9c4:	7c3b      	ldrb	r3, [r7, #16]
 800a9c6:	3302      	adds	r3, #2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	5cd1      	ldrb	r1, [r2, r3]
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	7cfa      	ldrb	r2, [r7, #19]
 800a9d2:	404a      	eors	r2, r1
 800a9d4:	b2d1      	uxtb	r1, r2
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800a9da:	7c3b      	ldrb	r3, [r7, #16]
 800a9dc:	3303      	adds	r3, #3
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	5cd1      	ldrb	r1, [r2, r3]
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	3303      	adds	r3, #3
 800a9e6:	7cba      	ldrb	r2, [r7, #18]
 800a9e8:	404a      	eors	r2, r1
 800a9ea:	b2d1      	uxtb	r1, r2
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	75fb      	strb	r3, [r7, #23]
 800a9f6:	7dfa      	ldrb	r2, [r7, #23]
 800a9f8:	7c7b      	ldrb	r3, [r7, #17]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	f4ff af67 	bcc.w	800a8ce <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0801b608 	.word	0x0801b608

0800aa10 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08a      	sub	sp, #40	; 0x28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d038      	beq.n	800aa98 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	f107 0314 	add.w	r3, r7, #20
 800aa2c:	68f9      	ldr	r1, [r7, #12]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff fc07 	bl	800a242 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800aa34:	2301      	movs	r3, #1
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa3a:	e014      	b.n	800aa66 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800aa3c:	f107 0314 	add.w	r3, r7, #20
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fd5d 	bl	800a500 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa4c:	0112      	lsls	r2, r2, #4
 800aa4e:	441a      	add	r2, r3
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	4611      	mov	r1, r2
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fcab 	bl	800a3b2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa60:	3301      	adds	r3, #1
 800aa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800aa6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d3e3      	bcc.n	800aa3c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7ff fca7 	bl	800a3cc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa84:	0112      	lsls	r2, r2, #4
 800aa86:	441a      	add	r2, r3
 800aa88:	f107 0314 	add.w	r3, r7, #20
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68b8      	ldr	r0, [r7, #8]
 800aa90:	f7ff fbd7 	bl	800a242 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	e000      	b.n	800aa9a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800aa98:	23ff      	movs	r3, #255	; 0xff
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3728      	adds	r7, #40	; 0x28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa6:	b09d      	sub	sp, #116	; 0x74
 800aaa8:	af10      	add	r7, sp, #64	; 0x40
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800aab0:	2306      	movs	r3, #6
 800aab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800aab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800aaba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aabe:	4611      	mov	r1, r2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 f9a7 	bl	800ae14 <SecureElementGetKeyByID>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800aacc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f040 80b0 	bne.w	800ac36 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800aad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800aade:	4b58      	ldr	r3, [pc, #352]	; (800ac40 <PrintKey+0x19c>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	2100      	movs	r1, #0
 800aae4:	2002      	movs	r0, #2
 800aae6:	f00f fad1 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800aaea:	e056      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800aaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d106      	bne.n	800ab02 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800aaf4:	4b53      	ldr	r3, [pc, #332]	; (800ac44 <PrintKey+0x1a0>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2002      	movs	r0, #2
 800aafc:	f00f fac6 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab00:	e04b      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800ab02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d106      	bne.n	800ab18 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ab0a:	4b4f      	ldr	r3, [pc, #316]	; (800ac48 <PrintKey+0x1a4>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2002      	movs	r0, #2
 800ab12:	f00f fabb 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab16:	e040      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ab18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d106      	bne.n	800ab2e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ab20:	4b4a      	ldr	r3, [pc, #296]	; (800ac4c <PrintKey+0x1a8>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	2100      	movs	r1, #0
 800ab26:	2002      	movs	r0, #2
 800ab28:	f00f fab0 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab2c:	e035      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ab2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d106      	bne.n	800ab44 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ab36:	4b46      	ldr	r3, [pc, #280]	; (800ac50 <PrintKey+0x1ac>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	2002      	movs	r0, #2
 800ab3e:	f00f faa5 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab42:	e02a      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ab44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab48:	2b7f      	cmp	r3, #127	; 0x7f
 800ab4a:	d106      	bne.n	800ab5a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ab4c:	4b41      	ldr	r3, [pc, #260]	; (800ac54 <PrintKey+0x1b0>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	2002      	movs	r0, #2
 800ab54:	f00f fa9a 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab58:	e01f      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ab5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab5e:	2b80      	cmp	r3, #128	; 0x80
 800ab60:	d106      	bne.n	800ab70 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ab62:	4b3d      	ldr	r3, [pc, #244]	; (800ac58 <PrintKey+0x1b4>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	2100      	movs	r1, #0
 800ab68:	2002      	movs	r0, #2
 800ab6a:	f00f fa8f 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab6e:	e014      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ab70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab74:	2b81      	cmp	r3, #129	; 0x81
 800ab76:	d106      	bne.n	800ab86 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ab78:	4b38      	ldr	r3, [pc, #224]	; (800ac5c <PrintKey+0x1b8>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f00f fa84 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 800ab84:	e009      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ab86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab8a:	2b82      	cmp	r3, #130	; 0x82
 800ab8c:	d105      	bne.n	800ab9a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ab8e:	4b34      	ldr	r3, [pc, #208]	; (800ac60 <PrintKey+0x1bc>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	2100      	movs	r1, #0
 800ab94:	2002      	movs	r0, #2
 800ab96:	f00f fa79 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	789b      	ldrb	r3, [r3, #2]
 800aba4:	461c      	mov	r4, r3
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	78db      	ldrb	r3, [r3, #3]
 800abaa:	461d      	mov	r5, r3
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	791b      	ldrb	r3, [r3, #4]
 800abb0:	461e      	mov	r6, r3
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	795b      	ldrb	r3, [r3, #5]
 800abb6:	623b      	str	r3, [r7, #32]
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	799b      	ldrb	r3, [r3, #6]
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	79db      	ldrb	r3, [r3, #7]
 800abc2:	61bb      	str	r3, [r7, #24]
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	7a1b      	ldrb	r3, [r3, #8]
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	7a5b      	ldrb	r3, [r3, #9]
 800abce:	613b      	str	r3, [r7, #16]
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	7a9b      	ldrb	r3, [r3, #10]
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	7adb      	ldrb	r3, [r3, #11]
 800abda:	60bb      	str	r3, [r7, #8]
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	7b1b      	ldrb	r3, [r3, #12]
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	7b5b      	ldrb	r3, [r3, #13]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	7b9b      	ldrb	r3, [r3, #14]
 800abec:	4619      	mov	r1, r3
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	7bdb      	ldrb	r3, [r3, #15]
 800abf2:	461a      	mov	r2, r3
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	7c1b      	ldrb	r3, [r3, #16]
 800abf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abfa:	920e      	str	r2, [sp, #56]	; 0x38
 800abfc:	910d      	str	r1, [sp, #52]	; 0x34
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	920c      	str	r2, [sp, #48]	; 0x30
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	920b      	str	r2, [sp, #44]	; 0x2c
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	920a      	str	r2, [sp, #40]	; 0x28
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	9208      	str	r2, [sp, #32]
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	9207      	str	r2, [sp, #28]
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	9206      	str	r2, [sp, #24]
 800ac1a:	69fa      	ldr	r2, [r7, #28]
 800ac1c:	9205      	str	r2, [sp, #20]
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	9304      	str	r3, [sp, #16]
 800ac22:	9603      	str	r6, [sp, #12]
 800ac24:	9502      	str	r5, [sp, #8]
 800ac26:	9401      	str	r4, [sp, #4]
 800ac28:	9000      	str	r0, [sp, #0]
 800ac2a:	4b0e      	ldr	r3, [pc, #56]	; (800ac64 <PrintKey+0x1c0>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	2002      	movs	r0, #2
 800ac32:	f00f fa2b 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800ac36:	bf00      	nop
 800ac38:	3734      	adds	r7, #52	; 0x34
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	0801b088 	.word	0x0801b088
 800ac44:	0801b0a0 	.word	0x0801b0a0
 800ac48:	0801b0b8 	.word	0x0801b0b8
 800ac4c:	0801b0d0 	.word	0x0801b0d0
 800ac50:	0801b0e8 	.word	0x0801b0e8
 800ac54:	0801b100 	.word	0x0801b100
 800ac58:	0801b118 	.word	0x0801b118
 800ac5c:	0801b130 	.word	0x0801b130
 800ac60:	0801b148 	.word	0x0801b148
 800ac64:	0801b160 	.word	0x0801b160

0800ac68 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	6039      	str	r1, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
 800ac78:	e01a      	b.n	800acb0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ac7a:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <GetKeyByID+0x5c>)
 800ac7c:	6819      	ldr	r1, [r3, #0]
 800ac7e:	7bfa      	ldrb	r2, [r7, #15]
 800ac80:	4613      	mov	r3, r2
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	4413      	add	r3, r2
 800ac86:	440b      	add	r3, r1
 800ac88:	3310      	adds	r3, #16
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	79fa      	ldrb	r2, [r7, #7]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d10b      	bne.n	800acaa <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ac92:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <GetKeyByID+0x5c>)
 800ac94:	6819      	ldr	r1, [r3, #0]
 800ac96:	7bfa      	ldrb	r2, [r7, #15]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	4413      	add	r3, r2
 800ac9e:	3310      	adds	r3, #16
 800aca0:	18ca      	adds	r2, r1, r3
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800aca6:	2300      	movs	r3, #0
 800aca8:	e006      	b.n	800acb8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	3301      	adds	r3, #1
 800acae:	73fb      	strb	r3, [r7, #15]
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	2b09      	cmp	r3, #9
 800acb4:	d9e1      	bls.n	800ac7a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800acb6:	2303      	movs	r3, #3
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bc80      	pop	{r7}
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	200004c8 	.word	0x200004c8

0800acc8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b0d1      	sub	sp, #324	; 0x144
 800accc:	af00      	add	r7, sp, #0
 800acce:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800acd2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800acd6:	6020      	str	r0, [r4, #0]
 800acd8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800acdc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ace0:	6001      	str	r1, [r0, #0]
 800ace2:	4619      	mov	r1, r3
 800ace4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ace8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800acec:	801a      	strh	r2, [r3, #0]
 800acee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800acf2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800acf6:	460a      	mov	r2, r1
 800acf8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800acfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800acfe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <ComputeCmac+0x48>
 800ad08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ad10:	2302      	movs	r3, #2
 800ad12:	e05c      	b.n	800adce <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ad14:	f107 0314 	add.w	r3, r7, #20
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe ff1b 	bl	8009b54 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ad1e:	f107 0210 	add.w	r2, r7, #16
 800ad22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad26:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff ff9a 	bl	800ac68 <GetKeyByID>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ad3a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d143      	bne.n	800adca <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ad42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe ff16 	bl	8009b86 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ad5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d009      	beq.n	800ad7c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ad68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ad70:	f107 0014 	add.w	r0, r7, #20
 800ad74:	2210      	movs	r2, #16
 800ad76:	6819      	ldr	r1, [r3, #0]
 800ad78:	f7fe ff14 	bl	8009ba4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ad7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad80:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ad84:	881a      	ldrh	r2, [r3, #0]
 800ad86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ad8e:	f107 0014 	add.w	r0, r7, #20
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	f7fe ff06 	bl	8009ba4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ad98:	f107 0214 	add.w	r2, r7, #20
 800ad9c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ada0:	4611      	mov	r1, r2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe ffc0 	bl	8009d28 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ada8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800adac:	061a      	lsls	r2, r3, #24
 800adae:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	431a      	orrs	r2, r3
 800adb6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800adbe:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800adc2:	431a      	orrs	r2, r3
 800adc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800adc8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800adca:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800adce:	4618      	mov	r0, r3
 800add0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800add4:	46bd      	mov	sp, r7
 800add6:	bd90      	pop	{r4, r7, pc}

0800add8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ade8:	2302      	movs	r3, #2
 800adea:	e00a      	b.n	800ae02 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800adec:	4a07      	ldr	r2, [pc, #28]	; (800ae0c <SecureElementInit+0x34>)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800adf2:	4b06      	ldr	r3, [pc, #24]	; (800ae0c <SecureElementInit+0x34>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	22c0      	movs	r2, #192	; 0xc0
 800adf8:	4905      	ldr	r1, [pc, #20]	; (800ae10 <SecureElementInit+0x38>)
 800adfa:	4618      	mov	r0, r3
 800adfc:	f00a fdf1 	bl	80159e2 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	200004c8 	.word	0x200004c8
 800ae10:	0801bacc 	.word	0x0801bacc

0800ae14 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6039      	str	r1, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
 800ae24:	e01a      	b.n	800ae5c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ae26:	4b12      	ldr	r3, [pc, #72]	; (800ae70 <SecureElementGetKeyByID+0x5c>)
 800ae28:	6819      	ldr	r1, [r3, #0]
 800ae2a:	7bfa      	ldrb	r2, [r7, #15]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	4413      	add	r3, r2
 800ae32:	440b      	add	r3, r1
 800ae34:	3310      	adds	r3, #16
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	79fa      	ldrb	r2, [r7, #7]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d10b      	bne.n	800ae56 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <SecureElementGetKeyByID+0x5c>)
 800ae40:	6819      	ldr	r1, [r3, #0]
 800ae42:	7bfa      	ldrb	r2, [r7, #15]
 800ae44:	4613      	mov	r3, r2
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	3310      	adds	r3, #16
 800ae4c:	18ca      	adds	r2, r1, r3
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e006      	b.n	800ae64 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d9e1      	bls.n	800ae26 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ae62:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bc80      	pop	{r7}
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	200004c8 	.word	0x200004c8

0800ae74 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae76:	b08b      	sub	sp, #44	; 0x2c
 800ae78:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ae7a:	4b3f      	ldr	r3, [pc, #252]	; (800af78 <SecureElementPrintKeys+0x104>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	2002      	movs	r0, #2
 800ae82:	f00f f903 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ae86:	2000      	movs	r0, #0
 800ae88:	f7ff fe0c 	bl	800aaa4 <PrintKey>
    PrintKey(NWK_KEY);
 800ae8c:	2001      	movs	r0, #1
 800ae8e:	f7ff fe09 	bl	800aaa4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ae92:	4b3a      	ldr	r3, [pc, #232]	; (800af7c <SecureElementPrintKeys+0x108>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	2002      	movs	r0, #2
 800ae9a:	f00f f8f7 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ae9e:	2003      	movs	r0, #3
 800aea0:	f7ff fe00 	bl	800aaa4 <PrintKey>
    PrintKey(NWK_S_KEY);
 800aea4:	2002      	movs	r0, #2
 800aea6:	f7ff fdfd 	bl	800aaa4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800aeaa:	4b35      	ldr	r3, [pc, #212]	; (800af80 <SecureElementPrintKeys+0x10c>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	2100      	movs	r1, #0
 800aeb0:	2002      	movs	r0, #2
 800aeb2:	f00f f8eb 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aeb6:	4b33      	ldr	r3, [pc, #204]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b31      	ldr	r3, [pc, #196]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	4619      	mov	r1, r3
 800aec6:	4b2f      	ldr	r3, [pc, #188]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	789b      	ldrb	r3, [r3, #2]
 800aecc:	4618      	mov	r0, r3
 800aece:	4b2d      	ldr	r3, [pc, #180]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	78db      	ldrb	r3, [r3, #3]
 800aed4:	461c      	mov	r4, r3
 800aed6:	4b2b      	ldr	r3, [pc, #172]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	791b      	ldrb	r3, [r3, #4]
 800aedc:	461d      	mov	r5, r3
 800aede:	4b29      	ldr	r3, [pc, #164]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	795b      	ldrb	r3, [r3, #5]
 800aee4:	461e      	mov	r6, r3
 800aee6:	4b27      	ldr	r3, [pc, #156]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	799b      	ldrb	r3, [r3, #6]
 800aeec:	607b      	str	r3, [r7, #4]
 800aeee:	4b25      	ldr	r3, [pc, #148]	; (800af84 <SecureElementPrintKeys+0x110>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	79db      	ldrb	r3, [r3, #7]
 800aef4:	9307      	str	r3, [sp, #28]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	9306      	str	r3, [sp, #24]
 800aefa:	9605      	str	r6, [sp, #20]
 800aefc:	9504      	str	r5, [sp, #16]
 800aefe:	9403      	str	r4, [sp, #12]
 800af00:	9002      	str	r0, [sp, #8]
 800af02:	9101      	str	r1, [sp, #4]
 800af04:	9200      	str	r2, [sp, #0]
 800af06:	4b20      	ldr	r3, [pc, #128]	; (800af88 <SecureElementPrintKeys+0x114>)
 800af08:	2200      	movs	r2, #0
 800af0a:	2100      	movs	r1, #0
 800af0c:	2002      	movs	r0, #2
 800af0e:	f00f f8bd 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af12:	4b1c      	ldr	r3, [pc, #112]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	7a1b      	ldrb	r3, [r3, #8]
 800af18:	461a      	mov	r2, r3
 800af1a:	4b1a      	ldr	r3, [pc, #104]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	7a5b      	ldrb	r3, [r3, #9]
 800af20:	4619      	mov	r1, r3
 800af22:	4b18      	ldr	r3, [pc, #96]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	7a9b      	ldrb	r3, [r3, #10]
 800af28:	4618      	mov	r0, r3
 800af2a:	4b16      	ldr	r3, [pc, #88]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	7adb      	ldrb	r3, [r3, #11]
 800af30:	461c      	mov	r4, r3
 800af32:	4b14      	ldr	r3, [pc, #80]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	7b1b      	ldrb	r3, [r3, #12]
 800af38:	461d      	mov	r5, r3
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	7b5b      	ldrb	r3, [r3, #13]
 800af40:	461e      	mov	r6, r3
 800af42:	4b10      	ldr	r3, [pc, #64]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	7b9b      	ldrb	r3, [r3, #14]
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <SecureElementPrintKeys+0x110>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	7bdb      	ldrb	r3, [r3, #15]
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	9306      	str	r3, [sp, #24]
 800af56:	9605      	str	r6, [sp, #20]
 800af58:	9504      	str	r5, [sp, #16]
 800af5a:	9403      	str	r4, [sp, #12]
 800af5c:	9002      	str	r0, [sp, #8]
 800af5e:	9101      	str	r1, [sp, #4]
 800af60:	9200      	str	r2, [sp, #0]
 800af62:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <SecureElementPrintKeys+0x118>)
 800af64:	2200      	movs	r2, #0
 800af66:	2100      	movs	r1, #0
 800af68:	2002      	movs	r0, #2
 800af6a:	f00f f88f 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af78:	0801b1b4 	.word	0x0801b1b4
 800af7c:	0801b1cc 	.word	0x0801b1cc
 800af80:	0801b1e4 	.word	0x0801b1e4
 800af84:	200004c8 	.word	0x200004c8
 800af88:	0801b1fc 	.word	0x0801b1fc
 800af8c:	0801b23c 	.word	0x0801b23c

0800af90 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800af94:	2004      	movs	r0, #4
 800af96:	f7ff fd85 	bl	800aaa4 <PrintKey>
    PrintKey(MC_KE_KEY);
 800af9a:	207f      	movs	r0, #127	; 0x7f
 800af9c:	f7ff fd82 	bl	800aaa4 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800afa0:	2002      	movs	r0, #2
 800afa2:	f7ff fd7f 	bl	800aaa4 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800afa6:	2003      	movs	r0, #3
 800afa8:	f7ff fd7c 	bl	800aaa4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	6039      	str	r1, [r7, #0]
 800afbe:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800afc6:	2302      	movs	r3, #2
 800afc8:	e04c      	b.n	800b064 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800afca:	2300      	movs	r3, #0
 800afcc:	77fb      	strb	r3, [r7, #31]
 800afce:	e045      	b.n	800b05c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800afd0:	4b26      	ldr	r3, [pc, #152]	; (800b06c <SecureElementSetKey+0xb8>)
 800afd2:	6819      	ldr	r1, [r3, #0]
 800afd4:	7ffa      	ldrb	r2, [r7, #31]
 800afd6:	4613      	mov	r3, r2
 800afd8:	011b      	lsls	r3, r3, #4
 800afda:	4413      	add	r3, r2
 800afdc:	440b      	add	r3, r1
 800afde:	3310      	adds	r3, #16
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	79fa      	ldrb	r2, [r7, #7]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d136      	bne.n	800b056 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	2b80      	cmp	r3, #128	; 0x80
 800afec:	d123      	bne.n	800b036 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800afee:	2306      	movs	r3, #6
 800aff0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
 800aff6:	f107 0310 	add.w	r3, r7, #16
 800affa:	2200      	movs	r2, #0
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	605a      	str	r2, [r3, #4]
 800b000:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b002:	f107 030c 	add.w	r3, r7, #12
 800b006:	227f      	movs	r2, #127	; 0x7f
 800b008:	2110      	movs	r1, #16
 800b00a:	6838      	ldr	r0, [r7, #0]
 800b00c:	f000 f87d 	bl	800b10a <SecureElementAesEncrypt>
 800b010:	4603      	mov	r3, r0
 800b012:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b014:	4b15      	ldr	r3, [pc, #84]	; (800b06c <SecureElementSetKey+0xb8>)
 800b016:	6819      	ldr	r1, [r3, #0]
 800b018:	7ffa      	ldrb	r2, [r7, #31]
 800b01a:	4613      	mov	r3, r2
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	4413      	add	r3, r2
 800b020:	3310      	adds	r3, #16
 800b022:	440b      	add	r3, r1
 800b024:	3301      	adds	r3, #1
 800b026:	f107 010c 	add.w	r1, r7, #12
 800b02a:	2210      	movs	r2, #16
 800b02c:	4618      	mov	r0, r3
 800b02e:	f00a fcd8 	bl	80159e2 <memcpy1>
                return retval;
 800b032:	7fbb      	ldrb	r3, [r7, #30]
 800b034:	e016      	b.n	800b064 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b036:	4b0d      	ldr	r3, [pc, #52]	; (800b06c <SecureElementSetKey+0xb8>)
 800b038:	6819      	ldr	r1, [r3, #0]
 800b03a:	7ffa      	ldrb	r2, [r7, #31]
 800b03c:	4613      	mov	r3, r2
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	4413      	add	r3, r2
 800b042:	3310      	adds	r3, #16
 800b044:	440b      	add	r3, r1
 800b046:	3301      	adds	r3, #1
 800b048:	2210      	movs	r2, #16
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f00a fcc8 	bl	80159e2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b052:	2300      	movs	r3, #0
 800b054:	e006      	b.n	800b064 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b056:	7ffb      	ldrb	r3, [r7, #31]
 800b058:	3301      	adds	r3, #1
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	7ffb      	ldrb	r3, [r7, #31]
 800b05e:	2b09      	cmp	r3, #9
 800b060:	d9b6      	bls.n	800afd0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b062:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b064:	4618      	mov	r0, r3
 800b066:	3720      	adds	r7, #32
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	200004c8 	.word	0x200004c8

0800b070 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af02      	add	r7, sp, #8
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	460b      	mov	r3, r1
 800b080:	80fb      	strh	r3, [r7, #6]
 800b082:	4613      	mov	r3, r2
 800b084:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b086:	797b      	ldrb	r3, [r7, #5]
 800b088:	2b7e      	cmp	r3, #126	; 0x7e
 800b08a:	d901      	bls.n	800b090 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e009      	b.n	800b0a4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b090:	7979      	ldrb	r1, [r7, #5]
 800b092:	88fa      	ldrh	r2, [r7, #6]
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	460b      	mov	r3, r1
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff fe13 	bl	800acc8 <ComputeCmac>
 800b0a2:	4603      	mov	r3, r0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	607a      	str	r2, [r7, #4]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	817b      	strh	r3, [r7, #10]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e01b      	b.n	800b102 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b0ca:	2306      	movs	r3, #6
 800b0cc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b0d2:	7a79      	ldrb	r1, [r7, #9]
 800b0d4:	897a      	ldrh	r2, [r7, #10]
 800b0d6:	f107 0310 	add.w	r3, r7, #16
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	68f9      	ldr	r1, [r7, #12]
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	f7ff fdf1 	bl	800acc8 <ComputeCmac>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800b0f0:	7dfb      	ldrb	r3, [r7, #23]
 800b0f2:	e006      	b.n	800b102 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d001      	beq.n	800b100 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b0c2      	sub	sp, #264	; 0x108
 800b10e:	af00      	add	r7, sp, #0
 800b110:	60f8      	str	r0, [r7, #12]
 800b112:	4608      	mov	r0, r1
 800b114:	4611      	mov	r1, r2
 800b116:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800b11a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	4603      	mov	r3, r0
 800b122:	817b      	strh	r3, [r7, #10]
 800b124:	460b      	mov	r3, r1
 800b126:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d006      	beq.n	800b13c <SecureElementAesEncrypt+0x32>
 800b12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b13c:	2302      	movs	r3, #2
 800b13e:	e046      	b.n	800b1ce <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b140:	897b      	ldrh	r3, [r7, #10]
 800b142:	f003 030f 	and.w	r3, r3, #15
 800b146:	b29b      	uxth	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b14c:	2305      	movs	r3, #5
 800b14e:	e03e      	b.n	800b1ce <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b150:	f107 0314 	add.w	r3, r7, #20
 800b154:	22f0      	movs	r2, #240	; 0xf0
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f00a fc7d 	bl	8015a58 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b15e:	f107 0210 	add.w	r2, r7, #16
 800b162:	7a7b      	ldrb	r3, [r7, #9]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff fd7e 	bl	800ac68 <GetKeyByID>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b172:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800b176:	2b00      	cmp	r3, #0
 800b178:	d127      	bne.n	800b1ca <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	3301      	adds	r3, #1
 800b17e:	f107 0214 	add.w	r2, r7, #20
 800b182:	2110      	movs	r1, #16
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff fb65 	bl	800a854 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800b190:	e018      	b.n	800b1c4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800b192:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	18d0      	adds	r0, r2, r3
 800b19a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b19e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800b1a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800b1a6:	6812      	ldr	r2, [r2, #0]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f107 0214 	add.w	r2, r7, #20
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	f7ff fc2e 	bl	800aa10 <lorawan_aes_encrypt>
            block = block + 16;
 800b1b4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b1b8:	3310      	adds	r3, #16
 800b1ba:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800b1be:	897b      	ldrh	r3, [r7, #10]
 800b1c0:	3b10      	subs	r3, #16
 800b1c2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800b1c4:	897b      	ldrh	r3, [r7, #10]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e3      	bne.n	800b192 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b1ca:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e02e      	b.n	800b250 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b1f2:	2306      	movs	r3, #6
 800b1f4:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b1f6:	78bb      	ldrb	r3, [r7, #2]
 800b1f8:	2b7f      	cmp	r3, #127	; 0x7f
 800b1fa:	d104      	bne.n	800b206 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d001      	beq.n	800b206 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b202:	2303      	movs	r3, #3
 800b204:	e024      	b.n	800b250 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800b206:	2300      	movs	r3, #0
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	f107 0310 	add.w	r3, r7, #16
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	605a      	str	r2, [r3, #4]
 800b214:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b216:	f107 030c 	add.w	r3, r7, #12
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	2110      	movs	r1, #16
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7ff ff73 	bl	800b10a <SecureElementAesEncrypt>
 800b224:	4603      	mov	r3, r0
 800b226:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b228:	7ffb      	ldrb	r3, [r7, #31]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b22e:	7ffb      	ldrb	r3, [r7, #31]
 800b230:	e00e      	b.n	800b250 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800b232:	f107 020c 	add.w	r2, r7, #12
 800b236:	78bb      	ldrb	r3, [r7, #2]
 800b238:	4611      	mov	r1, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff feba 	bl	800afb4 <SecureElementSetKey>
 800b240:	4603      	mov	r3, r0
 800b242:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b244:	7ffb      	ldrb	r3, [r7, #31]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b24a:	7ffb      	ldrb	r3, [r7, #31]
 800b24c:	e000      	b.n	800b250 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b24e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b250:	4618      	mov	r0, r3
 800b252:	3720      	adds	r7, #32
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607b      	str	r3, [r7, #4]
 800b262:	4603      	mov	r3, r0
 800b264:	73fb      	strb	r3, [r7, #15]
 800b266:	4613      	mov	r3, r2
 800b268:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <SecureElementProcessJoinAccept+0x24>
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <SecureElementProcessJoinAccept+0x24>
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b27c:	2302      	movs	r3, #2
 800b27e:	e064      	b.n	800b34a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b280:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b284:	2b21      	cmp	r3, #33	; 0x21
 800b286:	d901      	bls.n	800b28c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b288:	2305      	movs	r3, #5
 800b28a:	e05e      	b.n	800b34a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b28c:	2301      	movs	r3, #1
 800b28e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b290:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b294:	b29b      	uxth	r3, r3
 800b296:	461a      	mov	r2, r3
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b29c:	f00a fba1 	bl	80159e2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	1c58      	adds	r0, r3, #1
 800b2a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	b299      	uxth	r1, r3
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	7dfa      	ldrb	r2, [r7, #23]
 800b2b4:	f7ff ff29 	bl	800b10a <SecureElementAesEncrypt>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b2be:	2307      	movs	r3, #7
 800b2c0:	e043      	b.n	800b34a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	330b      	adds	r3, #11
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	09db      	lsrs	r3, r3, #7
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b2d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2d8:	3b04      	subs	r3, #4
 800b2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2dc:	4413      	add	r3, r2
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b2e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2e6:	3b03      	subs	r3, #3
 800b2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ea:	4413      	add	r3, r2
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	021b      	lsls	r3, r3, #8
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b2f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2fa:	3b02      	subs	r3, #2
 800b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fe:	4413      	add	r3, r2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	041b      	lsls	r3, r3, #16
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b30a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b30e:	3b01      	subs	r3, #1
 800b310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b312:	4413      	add	r3, r2
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	061b      	lsls	r3, r3, #24
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10e      	bne.n	800b344 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	3b04      	subs	r3, #4
 800b32e:	b299      	uxth	r1, r3
 800b330:	2301      	movs	r3, #1
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b336:	f7ff feb9 	bl	800b0ac <SecureElementVerifyAesCmac>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b340:	2301      	movs	r3, #1
 800b342:	e002      	b.n	800b34a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b344:	2304      	movs	r3, #4
 800b346:	e000      	b.n	800b34a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b362:	2302      	movs	r3, #2
 800b364:	e006      	b.n	800b374 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <SecureElementRandomNumber+0x28>)
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	4798      	blx	r3
 800b36c:	4602      	mov	r2, r0
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	0801b950 	.word	0x0801b950

0800b380 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b38e:	2302      	movs	r3, #2
 800b390:	e007      	b.n	800b3a2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800b392:	4b06      	ldr	r3, [pc, #24]	; (800b3ac <SecureElementSetDevEui+0x2c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2208      	movs	r2, #8
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f00a fb21 	bl	80159e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	200004c8 	.word	0x200004c8

0800b3b0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <SecureElementGetDevEui+0x10>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bc80      	pop	{r7}
 800b3be:	4770      	bx	lr
 800b3c0:	200004c8 	.word	0x200004c8

0800b3c4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e008      	b.n	800b3e8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <SecureElementSetJoinEui+0x2c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	2208      	movs	r2, #8
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f00a fafe 	bl	80159e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	200004c8 	.word	0x200004c8

0800b3f4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800b3f8:	4b03      	ldr	r3, [pc, #12]	; (800b408 <SecureElementGetJoinEui+0x14>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	46bd      	mov	sp, r7
 800b402:	bc80      	pop	{r7}
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	200004c8 	.word	0x200004c8

0800b40c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800b416:	4a1a      	ldr	r2, [pc, #104]	; (800b480 <LmHandlerInit+0x74>)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b41c:	4b19      	ldr	r3, [pc, #100]	; (800b484 <LmHandlerInit+0x78>)
 800b41e:	4a1a      	ldr	r2, [pc, #104]	; (800b488 <LmHandlerInit+0x7c>)
 800b420:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b422:	4b18      	ldr	r3, [pc, #96]	; (800b484 <LmHandlerInit+0x78>)
 800b424:	4a19      	ldr	r2, [pc, #100]	; (800b48c <LmHandlerInit+0x80>)
 800b426:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b428:	4b16      	ldr	r3, [pc, #88]	; (800b484 <LmHandlerInit+0x78>)
 800b42a:	4a19      	ldr	r2, [pc, #100]	; (800b490 <LmHandlerInit+0x84>)
 800b42c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b42e:	4b15      	ldr	r3, [pc, #84]	; (800b484 <LmHandlerInit+0x78>)
 800b430:	4a18      	ldr	r2, [pc, #96]	; (800b494 <LmHandlerInit+0x88>)
 800b432:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b434:	4b12      	ldr	r3, [pc, #72]	; (800b480 <LmHandlerInit+0x74>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a17      	ldr	r2, [pc, #92]	; (800b498 <LmHandlerInit+0x8c>)
 800b43c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b43e:	4b10      	ldr	r3, [pc, #64]	; (800b480 <LmHandlerInit+0x74>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4a14      	ldr	r2, [pc, #80]	; (800b498 <LmHandlerInit+0x8c>)
 800b446:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b448:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <LmHandlerInit+0x74>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	4a12      	ldr	r2, [pc, #72]	; (800b498 <LmHandlerInit+0x8c>)
 800b450:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b452:	4b11      	ldr	r3, [pc, #68]	; (800b498 <LmHandlerInit+0x8c>)
 800b454:	4a11      	ldr	r2, [pc, #68]	; (800b49c <LmHandlerInit+0x90>)
 800b456:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b458:	4b09      	ldr	r3, [pc, #36]	; (800b480 <LmHandlerInit+0x74>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	4a0e      	ldr	r2, [pc, #56]	; (800b498 <LmHandlerInit+0x8c>)
 800b460:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800b462:	490f      	ldr	r1, [pc, #60]	; (800b4a0 <LmHandlerInit+0x94>)
 800b464:	2000      	movs	r0, #0
 800b466:	f000 fd8f 	bl	800bf88 <LmHandlerPackageRegister>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800b470:	f04f 33ff 	mov.w	r3, #4294967295
 800b474:	e000      	b.n	800b478 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200004f4 	.word	0x200004f4
 800b484:	200004f8 	.word	0x200004f8
 800b488:	0800bc55 	.word	0x0800bc55
 800b48c:	0800bcbd 	.word	0x0800bcbd
 800b490:	0800bd99 	.word	0x0800bd99
 800b494:	0800beb5 	.word	0x0800beb5
 800b498:	20000508 	.word	0x20000508
 800b49c:	0800c305 	.word	0x0800c305
 800b4a0:	20000090 	.word	0x20000090

0800b4a4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b094      	sub	sp, #80	; 0x50
 800b4a8:	af04      	add	r7, sp, #16
 800b4aa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800b4ac:	2214      	movs	r2, #20
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	488f      	ldr	r0, [pc, #572]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b4b2:	f00d fd9b 	bl	8018fec <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800b4b6:	f7fe faf5 	bl	8009aa4 <LoraInfo_GetPtr>
 800b4ba:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800b4bc:	4b8c      	ldr	r3, [pc, #560]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	4093      	lsls	r3, r2
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d106      	bne.n	800b4e0 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800b4d2:	4b88      	ldr	r3, [pc, #544]	; (800b6f4 <LmHandlerConfigure+0x250>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f00e fdd7 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800b4de:	e7fe      	b.n	800b4de <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800b4e0:	4b83      	ldr	r3, [pc, #524]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	4984      	ldr	r1, [pc, #528]	; (800b6f8 <LmHandlerConfigure+0x254>)
 800b4e8:	4884      	ldr	r0, [pc, #528]	; (800b6fc <LmHandlerConfigure+0x258>)
 800b4ea:	f004 fbf1 	bl	800fcd0 <LoRaMacInitialization>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f8:	e0f5      	b.n	800b6e6 <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800b4fa:	2326      	movs	r3, #38	; 0x26
 800b4fc:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b4fe:	f107 0318 	add.w	r3, r7, #24
 800b502:	4618      	mov	r0, r3
 800b504:	f005 f908 	bl	8010718 <LoRaMacMibSetRequestConfirm>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d103      	bne.n	800b516 <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800b50e:	4b7c      	ldr	r3, [pc, #496]	; (800b700 <LmHandlerConfigure+0x25c>)
 800b510:	2201      	movs	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	e02a      	b.n	800b56c <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800b516:	2327      	movs	r3, #39	; 0x27
 800b518:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800b51a:	4b7a      	ldr	r3, [pc, #488]	; (800b704 <LmHandlerConfigure+0x260>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00c      	beq.n	800b53e <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b524:	f107 0318 	add.w	r3, r7, #24
 800b528:	4618      	mov	r0, r3
 800b52a:	f004 ff6f 	bl	801040c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800b52e:	4b75      	ldr	r3, [pc, #468]	; (800b704 <LmHandlerConfigure+0x260>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	69fa      	ldr	r2, [r7, #28]
 800b536:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800b53a:	4610      	mov	r0, r2
 800b53c:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800b53e:	2326      	movs	r3, #38	; 0x26
 800b540:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b542:	f107 0318 	add.w	r3, r7, #24
 800b546:	4618      	mov	r0, r3
 800b548:	f005 f8e6 	bl	8010718 <LoRaMacMibSetRequestConfirm>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10c      	bne.n	800b56c <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b552:	2301      	movs	r3, #1
 800b554:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b556:	f107 0318 	add.w	r3, r7, #24
 800b55a:	4618      	mov	r0, r3
 800b55c:	f004 ff56 	bl	801040c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800b560:	7f3b      	ldrb	r3, [r7, #28]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800b566:	4b66      	ldr	r3, [pc, #408]	; (800b700 <LmHandlerConfigure+0x25c>)
 800b568:	2201      	movs	r2, #1
 800b56a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800b56c:	4b64      	ldr	r3, [pc, #400]	; (800b700 <LmHandlerConfigure+0x25c>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d02a      	beq.n	800b5ca <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800b574:	4b63      	ldr	r3, [pc, #396]	; (800b704 <LmHandlerConfigure+0x260>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d004      	beq.n	800b588 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800b57e:	4b61      	ldr	r3, [pc, #388]	; (800b704 <LmHandlerConfigure+0x260>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	2000      	movs	r0, #0
 800b586:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800b588:	2306      	movs	r3, #6
 800b58a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b58c:	f107 0318 	add.w	r3, r7, #24
 800b590:	4618      	mov	r0, r3
 800b592:	f004 ff3b 	bl	801040c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	4a5b      	ldr	r2, [pc, #364]	; (800b708 <LmHandlerConfigure+0x264>)
 800b59a:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800b59c:	2326      	movs	r3, #38	; 0x26
 800b59e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b5a0:	f107 0318 	add.w	r3, r7, #24
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f004 ff31 	bl	801040c <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b5b0:	4b4f      	ldr	r3, [pc, #316]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b5b2:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800b5ba:	4b4d      	ldr	r3, [pc, #308]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b5bc:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800b5c4:	4b4a      	ldr	r3, [pc, #296]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b5c6:	709a      	strb	r2, [r3, #2]
 800b5c8:	e019      	b.n	800b5fe <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800b5ca:	2305      	movs	r3, #5
 800b5cc:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800b5d2:	f107 0318 	add.w	r3, r7, #24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f005 f89e 	bl	8010718 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800b5dc:	4b49      	ldr	r3, [pc, #292]	; (800b704 <LmHandlerConfigure+0x260>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	4798      	blx	r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4a48      	ldr	r2, [pc, #288]	; (800b708 <LmHandlerConfigure+0x264>)
 800b5e8:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800b5ea:	2306      	movs	r3, #6
 800b5ec:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800b5ee:	4b46      	ldr	r3, [pc, #280]	; (800b708 <LmHandlerConfigure+0x264>)
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800b5f4:	f107 0318 	add.w	r3, r7, #24
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f005 f88d 	bl	8010718 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800b5fe:	2302      	movs	r3, #2
 800b600:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b602:	f107 0318 	add.w	r3, r7, #24
 800b606:	4618      	mov	r0, r3
 800b608:	f004 ff00 	bl	801040c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2208      	movs	r2, #8
 800b610:	4619      	mov	r1, r3
 800b612:	483d      	ldr	r0, [pc, #244]	; (800b708 <LmHandlerConfigure+0x264>)
 800b614:	f00a f9e5 	bl	80159e2 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800b618:	2303      	movs	r3, #3
 800b61a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b61c:	f107 0318 	add.w	r3, r7, #24
 800b620:	4618      	mov	r0, r3
 800b622:	f004 fef3 	bl	801040c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	2208      	movs	r2, #8
 800b62a:	4619      	mov	r1, r3
 800b62c:	4837      	ldr	r0, [pc, #220]	; (800b70c <LmHandlerConfigure+0x268>)
 800b62e:	f00a f9d8 	bl	80159e2 <memcpy1>

    SecureElementPrintKeys();
 800b632:	f7ff fc1f 	bl	800ae74 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b636:	4b36      	ldr	r3, [pc, #216]	; (800b710 <LmHandlerConfigure+0x26c>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	4b35      	ldr	r3, [pc, #212]	; (800b714 <LmHandlerConfigure+0x270>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	4b35      	ldr	r3, [pc, #212]	; (800b718 <LmHandlerConfigure+0x274>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	4618      	mov	r0, r3
 800b648:	4b34      	ldr	r3, [pc, #208]	; (800b71c <LmHandlerConfigure+0x278>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	9303      	str	r3, [sp, #12]
 800b64e:	9002      	str	r0, [sp, #8]
 800b650:	9101      	str	r1, [sp, #4]
 800b652:	9200      	str	r2, [sp, #0]
 800b654:	4b32      	ldr	r3, [pc, #200]	; (800b720 <LmHandlerConfigure+0x27c>)
 800b656:	2200      	movs	r2, #0
 800b658:	2100      	movs	r1, #0
 800b65a:	2002      	movs	r0, #2
 800b65c:	f00e fd16 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b660:	230f      	movs	r3, #15
 800b662:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b664:	2301      	movs	r3, #1
 800b666:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b668:	f107 0318 	add.w	r3, r7, #24
 800b66c:	4618      	mov	r0, r3
 800b66e:	f005 f853 	bl	8010718 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b672:	2310      	movs	r3, #16
 800b674:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b676:	2300      	movs	r3, #0
 800b678:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b67a:	f107 0318 	add.w	r3, r7, #24
 800b67e:	4618      	mov	r0, r3
 800b680:	f005 f84a 	bl	8010718 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800b684:	2304      	movs	r3, #4
 800b686:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b688:	4b19      	ldr	r3, [pc, #100]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b68a:	789b      	ldrb	r3, [r3, #2]
 800b68c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b68e:	f107 0318 	add.w	r3, r7, #24
 800b692:	4618      	mov	r0, r3
 800b694:	f005 f840 	bl	8010718 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800b698:	2337      	movs	r3, #55	; 0x37
 800b69a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800b69c:	4b14      	ldr	r3, [pc, #80]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b6a2:	f107 0318 	add.w	r3, r7, #24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f005 f836 	bl	8010718 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b6ac:	230f      	movs	r3, #15
 800b6ae:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b6b0:	4b0f      	ldr	r3, [pc, #60]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f107 0210 	add.w	r2, r7, #16
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f007 fe7e 	bl	80133bc <RegionGetPhyParam>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bf14      	ite	ne
 800b6ca:	2301      	movne	r3, #1
 800b6cc:	2300      	moveq	r3, #0
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b6d2:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800b6d4:	2014      	movs	r0, #20
 800b6d6:	f000 faa5 	bl	800bc24 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <LmHandlerConfigure+0x24c>)
 800b6dc:	799b      	ldrb	r3, [r3, #6]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f005 fdaa 	bl	8011238 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3740      	adds	r7, #64	; 0x40
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	200004e0 	.word	0x200004e0
 800b6f4:	0801b27c 	.word	0x0801b27c
 800b6f8:	20000508 	.word	0x20000508
 800b6fc:	200004f8 	.word	0x200004f8
 800b700:	20000612 	.word	0x20000612
 800b704:	200004f4 	.word	0x200004f4
 800b708:	20000078 	.word	0x20000078
 800b70c:	20000080 	.word	0x20000080
 800b710:	2000008f 	.word	0x2000008f
 800b714:	2000008e 	.word	0x2000008e
 800b718:	2000008d 	.word	0x2000008d
 800b71c:	2000008c 	.word	0x2000008c
 800b720:	0801b2c8 	.word	0x0801b2c8

0800b724 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800b728:	f002 faa4 	bl	800dc74 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800b72c:	f000 fd30 	bl	800c190 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800b730:	bf00      	nop
 800b732:	bd80      	pop	{r7, pc}

0800b734 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800b734:	b480      	push	{r7}
 800b736:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800b738:	4b02      	ldr	r3, [pc, #8]	; (800b744 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800b73a:	681b      	ldr	r3, [r3, #0]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr
 800b744:	2000051c 	.word	0x2000051c

0800b748 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b090      	sub	sp, #64	; 0x40
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	460a      	mov	r2, r1
 800b752:	71fb      	strb	r3, [r7, #7]
 800b754:	4613      	mov	r3, r2
 800b756:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800b758:	2301      	movs	r3, #1
 800b75a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b75e:	4b35      	ldr	r3, [pc, #212]	; (800b834 <LmHandlerJoin+0xec>)
 800b760:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d110      	bne.n	800b792 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b770:	2302      	movs	r3, #2
 800b772:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b776:	4b30      	ldr	r3, [pc, #192]	; (800b838 <LmHandlerJoin+0xf0>)
 800b778:	2202      	movs	r2, #2
 800b77a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800b77c:	4a2e      	ldr	r2, [pc, #184]	; (800b838 <LmHandlerJoin+0xf0>)
 800b77e:	79bb      	ldrb	r3, [r7, #6]
 800b780:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800b782:	f004 fd59 	bl	8010238 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800b786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b78a:	4618      	mov	r0, r3
 800b78c:	f005 fb1e 	bl	8010dcc <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800b790:	e04b      	b.n	800b82a <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b792:	2301      	movs	r3, #1
 800b794:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b798:	4b27      	ldr	r3, [pc, #156]	; (800b838 <LmHandlerJoin+0xf0>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b79e:	4b25      	ldr	r3, [pc, #148]	; (800b834 <LmHandlerJoin+0xec>)
 800b7a0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800b7a4:	4b24      	ldr	r3, [pc, #144]	; (800b838 <LmHandlerJoin+0xf0>)
 800b7a6:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b7a8:	4b23      	ldr	r3, [pc, #140]	; (800b838 <LmHandlerJoin+0xf0>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800b7ae:	4a22      	ldr	r2, [pc, #136]	; (800b838 <LmHandlerJoin+0xf0>)
 800b7b0:	79bb      	ldrb	r3, [r7, #6]
 800b7b2:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800b7b4:	4b21      	ldr	r3, [pc, #132]	; (800b83c <LmHandlerJoin+0xf4>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f083 0301 	eor.w	r3, r3, #1
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01e      	beq.n	800b800 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800b7c2:	231e      	movs	r3, #30
 800b7c4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800b7c6:	4b1b      	ldr	r3, [pc, #108]	; (800b834 <LmHandlerJoin+0xec>)
 800b7c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b7cc:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b7ce:	f107 0308 	add.w	r3, r7, #8
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f004 ffa0 	bl	8010718 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800b7d8:	231f      	movs	r3, #31
 800b7da:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800b7dc:	4b15      	ldr	r3, [pc, #84]	; (800b834 <LmHandlerJoin+0xec>)
 800b7de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b7e2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b7e4:	f107 0308 	add.w	r3, r7, #8
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f004 ff95 	bl	8010718 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b7ee:	2328      	movs	r3, #40	; 0x28
 800b7f0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b7f2:	4b13      	ldr	r3, [pc, #76]	; (800b840 <LmHandlerJoin+0xf8>)
 800b7f4:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800b7f6:	f107 0308 	add.w	r3, r7, #8
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f004 ff8c 	bl	8010718 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800b800:	f004 fd1a 	bl	8010238 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b804:	2301      	movs	r3, #1
 800b806:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b808:	2301      	movs	r3, #1
 800b80a:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b80c:	f107 0308 	add.w	r3, r7, #8
 800b810:	4618      	mov	r0, r3
 800b812:	f004 ff81 	bl	8010718 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b816:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <LmHandlerJoin+0xfc>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	4806      	ldr	r0, [pc, #24]	; (800b838 <LmHandlerJoin+0xf0>)
 800b81e:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800b820:	4b04      	ldr	r3, [pc, #16]	; (800b834 <LmHandlerJoin+0xec>)
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 f92b 	bl	800ba80 <LmHandlerRequestClass>
}
 800b82a:	bf00      	nop
 800b82c:	3740      	adds	r7, #64	; 0x40
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200004e0 	.word	0x200004e0
 800b838:	2000009c 	.word	0x2000009c
 800b83c:	20000612 	.word	0x20000612
 800b840:	01000300 	.word	0x01000300
 800b844:	200004f4 	.word	0x200004f4

0800b848 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08a      	sub	sp, #40	; 0x28
 800b84c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b84e:	2301      	movs	r3, #1
 800b850:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b852:	463b      	mov	r3, r7
 800b854:	4618      	mov	r0, r3
 800b856:	f004 fdd9 	bl	801040c <LoRaMacMibGetRequestConfirm>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800b860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b864:	2b00      	cmp	r3, #0
 800b866:	d106      	bne.n	800b876 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b868:	793b      	ldrb	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800b86e:	2300      	movs	r3, #0
 800b870:	e002      	b.n	800b878 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800b872:	2301      	movs	r3, #1
 800b874:	e000      	b.n	800b878 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800b876:	2300      	movs	r3, #0
    }
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3728      	adds	r7, #40	; 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b08a      	sub	sp, #40	; 0x28
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
 800b88c:	4613      	mov	r3, r2
 800b88e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b890:	23ff      	movs	r3, #255	; 0xff
 800b892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800b896:	f001 ff7b 	bl	800d790 <LoRaMacIsBusy>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b8a0:	f06f 0301 	mvn.w	r3, #1
 800b8a4:	e0b6      	b.n	800ba14 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b8a6:	f7ff ffcf 	bl	800b848 <LmHandlerJoinStatus>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d00a      	beq.n	800b8c6 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b8b0:	4b5a      	ldr	r3, [pc, #360]	; (800ba1c <LmHandlerSend+0x19c>)
 800b8b2:	799b      	ldrb	r3, [r3, #6]
 800b8b4:	4a59      	ldr	r2, [pc, #356]	; (800ba1c <LmHandlerSend+0x19c>)
 800b8b6:	79d2      	ldrb	r2, [r2, #7]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff ff44 	bl	800b748 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b8c0:	f06f 0302 	mvn.w	r3, #2
 800b8c4:	e0a6      	b.n	800ba14 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800b8c6:	4b56      	ldr	r3, [pc, #344]	; (800ba20 <LmHandlerSend+0x1a0>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	4798      	blx	r3
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00d      	beq.n	800b8f0 <LmHandlerSend+0x70>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	4b51      	ldr	r3, [pc, #324]	; (800ba20 <LmHandlerSend+0x1a0>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d006      	beq.n	800b8f0 <LmHandlerSend+0x70>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800b8ea:	f06f 0303 	mvn.w	r3, #3
 800b8ee:	e091      	b.n	800ba14 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800b8f0:	4a4c      	ldr	r2, [pc, #304]	; (800ba24 <LmHandlerSend+0x1a4>)
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800b8f6:	78fb      	ldrb	r3, [r7, #3]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bf14      	ite	ne
 800b8fc:	2301      	movne	r3, #1
 800b8fe:	2300      	moveq	r3, #0
 800b900:	b2db      	uxtb	r3, r3
 800b902:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b904:	4b48      	ldr	r3, [pc, #288]	; (800ba28 <LmHandlerSend+0x1a8>)
 800b906:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b90a:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	785b      	ldrb	r3, [r3, #1]
 800b910:	f107 020c 	add.w	r2, r7, #12
 800b914:	4611      	mov	r1, r2
 800b916:	4618      	mov	r0, r3
 800b918:	f004 fcf0 	bl	80102fc <LoRaMacQueryTxPossible>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800b922:	2300      	movs	r3, #0
 800b924:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800b92e:	23f9      	movs	r3, #249	; 0xf9
 800b930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b934:	e009      	b.n	800b94a <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	785b      	ldrb	r3, [r3, #1]
 800b940:	b29b      	uxth	r3, r3
 800b942:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800b94a:	4b36      	ldr	r3, [pc, #216]	; (800ba24 <LmHandlerSend+0x1a4>)
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	3310      	adds	r3, #16
 800b950:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b954:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800b958:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <LmHandlerSend+0x1a8>)
 800b95a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800b95e:	4b31      	ldr	r3, [pc, #196]	; (800ba24 <LmHandlerSend+0x1a4>)
 800b960:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800b962:	78ba      	ldrb	r2, [r7, #2]
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	4611      	mov	r1, r2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f005 fb6e 	bl	801104c <LoRaMacMcpsRequest>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	4a2c      	ldr	r2, [pc, #176]	; (800ba2c <LmHandlerSend+0x1ac>)
 800b97a:	6013      	str	r3, [r2, #0]

    switch (status)
 800b97c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b980:	2b11      	cmp	r3, #17
 800b982:	d840      	bhi.n	800ba06 <LmHandlerSend+0x186>
 800b984:	a201      	add	r2, pc, #4	; (adr r2, 800b98c <LmHandlerSend+0x10c>)
 800b986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98a:	bf00      	nop
 800b98c:	0800b9d5 	.word	0x0800b9d5
 800b990:	0800b9e7 	.word	0x0800b9e7
 800b994:	0800ba07 	.word	0x0800ba07
 800b998:	0800ba07 	.word	0x0800ba07
 800b99c:	0800ba07 	.word	0x0800ba07
 800b9a0:	0800ba07 	.word	0x0800ba07
 800b9a4:	0800ba07 	.word	0x0800ba07
 800b9a8:	0800b9ef 	.word	0x0800b9ef
 800b9ac:	0800ba07 	.word	0x0800ba07
 800b9b0:	0800ba07 	.word	0x0800ba07
 800b9b4:	0800ba07 	.word	0x0800ba07
 800b9b8:	0800b9ff 	.word	0x0800b9ff
 800b9bc:	0800ba07 	.word	0x0800ba07
 800b9c0:	0800ba07 	.word	0x0800ba07
 800b9c4:	0800b9e7 	.word	0x0800b9e7
 800b9c8:	0800b9e7 	.word	0x0800b9e7
 800b9cc:	0800b9e7 	.word	0x0800b9e7
 800b9d0:	0800b9f7 	.word	0x0800b9f7
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800b9d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9d8:	f113 0f07 	cmn.w	r3, #7
 800b9dc:	d017      	beq.n	800ba0e <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800b9e4:	e013      	b.n	800ba0e <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800b9e6:	23fe      	movs	r3, #254	; 0xfe
 800b9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b9ec:	e010      	b.n	800ba10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b9ee:	23fd      	movs	r3, #253	; 0xfd
 800b9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b9f4:	e00c      	b.n	800ba10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800b9f6:	23fb      	movs	r3, #251	; 0xfb
 800b9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b9fc:	e008      	b.n	800ba10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800b9fe:	23fa      	movs	r3, #250	; 0xfa
 800ba00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ba04:	e004      	b.n	800ba10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ba06:	23ff      	movs	r3, #255	; 0xff
 800ba08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ba0c:	e000      	b.n	800ba10 <LmHandlerSend+0x190>
            break;
 800ba0e:	bf00      	nop
    }

    return lmhStatus;
 800ba10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3728      	adds	r7, #40	; 0x28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2000009c 	.word	0x2000009c
 800ba20:	200004cc 	.word	0x200004cc
 800ba24:	200000a4 	.word	0x200000a4
 800ba28:	200004e0 	.word	0x200004e0
 800ba2c:	2000051c 	.word	0x2000051c

0800ba30 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ba36:	230a      	movs	r3, #10
 800ba38:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ba3a:	463b      	mov	r3, r7
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f005 f9c5 	bl	8010dcc <LoRaMacMlmeRequest>
 800ba42:	4603      	mov	r3, r0
 800ba44:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	4a06      	ldr	r2, [pc, #24]	; (800ba64 <LmHandlerDeviceTimeReq+0x34>)
 800ba4a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e001      	b.n	800ba5a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ba56:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	2000051c 	.word	0x2000051c

0800ba68 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ba72:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bc80      	pop	{r7}
 800ba7e:	4770      	bx	lr

0800ba80 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08c      	sub	sp, #48	; 0x30
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800ba90:	f001 fe7e 	bl	800d790 <LoRaMacIsBusy>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ba9a:	f06f 0301 	mvn.w	r3, #1
 800ba9e:	e073      	b.n	800bb88 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800baa0:	f7ff fed2 	bl	800b848 <LmHandlerJoinStatus>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d002      	beq.n	800bab0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800baaa:	f06f 0302 	mvn.w	r3, #2
 800baae:	e06b      	b.n	800bb88 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bab0:	2300      	movs	r3, #0
 800bab2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bab4:	f107 0308 	add.w	r3, r7, #8
 800bab8:	4618      	mov	r0, r3
 800baba:	f004 fca7 	bl	801040c <LoRaMacMibGetRequestConfirm>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800bac4:	f04f 33ff 	mov.w	r3, #4294967295
 800bac8:	e05e      	b.n	800bb88 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800baca:	7b3b      	ldrb	r3, [r7, #12]
 800bacc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800bad0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d04d      	beq.n	800bb76 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d028      	beq.n	800bb32 <LmHandlerRequestClass+0xb2>
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	dc4a      	bgt.n	800bb7a <LmHandlerRequestClass+0xfa>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <LmHandlerRequestClass+0x6e>
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d01e      	beq.n	800bb2a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800baec:	e045      	b.n	800bb7a <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800baee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d043      	beq.n	800bb7e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bafa:	f107 0308 	add.w	r3, r7, #8
 800bafe:	4618      	mov	r0, r3
 800bb00:	f004 fe0a 	bl	8010718 <LoRaMacMibSetRequestConfirm>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10b      	bne.n	800bb22 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800bb0a:	4b21      	ldr	r3, [pc, #132]	; (800bb90 <LmHandlerRequestClass+0x110>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d034      	beq.n	800bb7e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800bb14:	4b1e      	ldr	r3, [pc, #120]	; (800bb90 <LmHandlerRequestClass+0x110>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1a:	79fa      	ldrb	r2, [r7, #7]
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	4798      	blx	r3
            break;
 800bb20:	e02d      	b.n	800bb7e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bb22:	23ff      	movs	r3, #255	; 0xff
 800bb24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bb28:	e029      	b.n	800bb7e <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800bb2a:	23ff      	movs	r3, #255	; 0xff
 800bb2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bb30:	e028      	b.n	800bb84 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800bb32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800bb3a:	23ff      	movs	r3, #255	; 0xff
 800bb3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bb40:	e01f      	b.n	800bb82 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800bb42:	79fb      	ldrb	r3, [r7, #7]
 800bb44:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bb46:	f107 0308 	add.w	r3, r7, #8
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f004 fde4 	bl	8010718 <LoRaMacMibSetRequestConfirm>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800bb56:	4b0e      	ldr	r3, [pc, #56]	; (800bb90 <LmHandlerRequestClass+0x110>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d010      	beq.n	800bb82 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800bb60:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <LmHandlerRequestClass+0x110>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb66:	79fa      	ldrb	r2, [r7, #7]
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4798      	blx	r3
            break;
 800bb6c:	e009      	b.n	800bb82 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bb6e:	23ff      	movs	r3, #255	; 0xff
 800bb70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bb74:	e005      	b.n	800bb82 <LmHandlerRequestClass+0x102>
        }
    }
 800bb76:	bf00      	nop
 800bb78:	e004      	b.n	800bb84 <LmHandlerRequestClass+0x104>
            break;
 800bb7a:	bf00      	nop
 800bb7c:	e002      	b.n	800bb84 <LmHandlerRequestClass+0x104>
            break;
 800bb7e:	bf00      	nop
 800bb80:	e000      	b.n	800bb84 <LmHandlerRequestClass+0x104>
            break;
 800bb82:	bf00      	nop
    return errorStatus;
 800bb84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3730      	adds	r7, #48	; 0x30
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	200004f4 	.word	0x200004f4

0800bb94 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b08c      	sub	sp, #48	; 0x30
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d102      	bne.n	800bba8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800bba2:	f04f 33ff 	mov.w	r3, #4294967295
 800bba6:	e010      	b.n	800bbca <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800bbac:	f107 030c 	add.w	r3, r7, #12
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f004 fc2b 	bl	801040c <LoRaMacMibGetRequestConfirm>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc0:	e003      	b.n	800bbca <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800bbc2:	7c3a      	ldrb	r2, [r7, #16]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3730      	adds	r7, #48	; 0x30
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08c      	sub	sp, #48	; 0x30
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d102      	bne.n	800bbe8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800bbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe6:	e016      	b.n	800bc16 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800bbe8:	231f      	movs	r3, #31
 800bbea:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800bbec:	f107 030c 	add.w	r3, r7, #12
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f004 fc0b 	bl	801040c <LoRaMacMibGetRequestConfirm>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800bc00:	e009      	b.n	800bc16 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800bc02:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f993 2000 	ldrsb.w	r2, [r3]
 800bc10:	4b03      	ldr	r3, [pc, #12]	; (800bc20 <LmHandlerGetTxDatarate+0x4c>)
 800bc12:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	200004e0 	.word	0x200004e0

0800bc24 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08c      	sub	sp, #48	; 0x30
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800bc2c:	2322      	movs	r3, #34	; 0x22
 800bc2e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bc34:	f107 030c 	add.w	r3, r7, #12
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f004 fd6d 	bl	8010718 <LoRaMacMibSetRequestConfirm>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800bc44:	f04f 33ff 	mov.w	r3, #4294967295
 800bc48:	e000      	b.n	800bc4c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	; 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800bc5c:	4b15      	ldr	r3, [pc, #84]	; (800bcb4 <McpsConfirm+0x60>)
 800bc5e:	2201      	movs	r2, #1
 800bc60:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	785a      	ldrb	r2, [r3, #1]
 800bc66:	4b13      	ldr	r3, [pc, #76]	; (800bcb4 <McpsConfirm+0x60>)
 800bc68:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	789b      	ldrb	r3, [r3, #2]
 800bc6e:	b25a      	sxtb	r2, r3
 800bc70:	4b10      	ldr	r3, [pc, #64]	; (800bcb4 <McpsConfirm+0x60>)
 800bc72:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	4a0e      	ldr	r2, [pc, #56]	; (800bcb4 <McpsConfirm+0x60>)
 800bc7a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800bc82:	4b0c      	ldr	r3, [pc, #48]	; (800bcb4 <McpsConfirm+0x60>)
 800bc84:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <McpsConfirm+0x60>)
 800bc8e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	791b      	ldrb	r3, [r3, #4]
 800bc94:	461a      	mov	r2, r3
 800bc96:	4b07      	ldr	r3, [pc, #28]	; (800bcb4 <McpsConfirm+0x60>)
 800bc98:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <McpsConfirm+0x64>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	4804      	ldr	r0, [pc, #16]	; (800bcb4 <McpsConfirm+0x60>)
 800bca2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800bca4:	6879      	ldr	r1, [r7, #4]
 800bca6:	2000      	movs	r0, #0
 800bca8:	f000 f9de 	bl	800c068 <LmHandlerPackagesNotify>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	200000a4 	.word	0x200000a4
 800bcb8:	200004f4 	.word	0x200004f4

0800bcbc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800bcca:	4b31      	ldr	r3, [pc, #196]	; (800bd90 <McpsIndication+0xd4>)
 800bccc:	2201      	movs	r2, #1
 800bcce:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	785a      	ldrb	r2, [r3, #1]
 800bcd4:	4b2e      	ldr	r3, [pc, #184]	; (800bd90 <McpsIndication+0xd4>)
 800bcd6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800bcd8:	4b2d      	ldr	r3, [pc, #180]	; (800bd90 <McpsIndication+0xd4>)
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d153      	bne.n	800bd88 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	791b      	ldrb	r3, [r3, #4]
 800bce4:	b25a      	sxtb	r2, r3
 800bce6:	4b2a      	ldr	r3, [pc, #168]	; (800bd90 <McpsIndication+0xd4>)
 800bce8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcf0:	b25a      	sxtb	r2, r3
 800bcf2:	4b27      	ldr	r3, [pc, #156]	; (800bd90 <McpsIndication+0xd4>)
 800bcf4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bcfc:	4b24      	ldr	r3, [pc, #144]	; (800bd90 <McpsIndication+0xd4>)
 800bcfe:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	78da      	ldrb	r2, [r3, #3]
 800bd04:	4b22      	ldr	r3, [pc, #136]	; (800bd90 <McpsIndication+0xd4>)
 800bd06:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	4a20      	ldr	r2, [pc, #128]	; (800bd90 <McpsIndication+0xd4>)
 800bd0e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	78db      	ldrb	r3, [r3, #3]
 800bd14:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7b1b      	ldrb	r3, [r3, #12]
 800bd1a:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800bd22:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <McpsIndication+0xd8>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	f107 0218 	add.w	r2, r7, #24
 800bd2c:	4918      	ldr	r1, [pc, #96]	; (800bd90 <McpsIndication+0xd4>)
 800bd2e:	4610      	mov	r0, r2
 800bd30:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800bd32:	4b18      	ldr	r3, [pc, #96]	; (800bd94 <McpsIndication+0xd8>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <McpsIndication+0x90>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	7e1b      	ldrb	r3, [r3, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d003      	beq.n	800bd4c <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800bd44:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <McpsIndication+0xd8>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4a:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	2001      	movs	r0, #1
 800bd50:	f000 f98a 	bl	800c068 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800bd54:	f107 0317 	add.w	r3, r7, #23
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff ff1b 	bl	800bb94 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	795b      	ldrb	r3, [r3, #5]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d111      	bne.n	800bd8a <McpsIndication+0xce>
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10e      	bne.n	800bd8a <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	733b      	strb	r3, [r7, #12]
 800bd70:	2300      	movs	r3, #0
 800bd72:	737b      	strb	r3, [r7, #13]
 800bd74:	2300      	movs	r3, #0
 800bd76:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800bd78:	f107 030c 	add.w	r3, r7, #12
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	2100      	movs	r1, #0
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fd7d 	bl	800b880 <LmHandlerSend>
 800bd86:	e000      	b.n	800bd8a <McpsIndication+0xce>
        return;
 800bd88:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800bd8a:	3720      	adds	r7, #32
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	200000c0 	.word	0x200000c0
 800bd94:	200004f4 	.word	0x200004f4

0800bd98 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08c      	sub	sp, #48	; 0x30
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800bda0:	4b3d      	ldr	r3, [pc, #244]	; (800be98 <MlmeConfirm+0x100>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	785a      	ldrb	r2, [r3, #1]
 800bdaa:	4b3b      	ldr	r3, [pc, #236]	; (800be98 <MlmeConfirm+0x100>)
 800bdac:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800bdae:	4b3b      	ldr	r3, [pc, #236]	; (800be9c <MlmeConfirm+0x104>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb4:	4838      	ldr	r0, [pc, #224]	; (800be98 <MlmeConfirm+0x100>)
 800bdb6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	2002      	movs	r0, #2
 800bdbc:	f000 f954 	bl	800c068 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	2b0c      	cmp	r3, #12
 800bdc8:	d85e      	bhi.n	800be88 <MlmeConfirm+0xf0>
 800bdca:	a201      	add	r2, pc, #4	; (adr r2, 800bdd0 <MlmeConfirm+0x38>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800be05 	.word	0x0800be05
 800bdd4:	0800be89 	.word	0x0800be89
 800bdd8:	0800be89 	.word	0x0800be89
 800bddc:	0800be57 	.word	0x0800be57
 800bde0:	0800be89 	.word	0x0800be89
 800bde4:	0800be89 	.word	0x0800be89
 800bde8:	0800be89 	.word	0x0800be89
 800bdec:	0800be89 	.word	0x0800be89
 800bdf0:	0800be89 	.word	0x0800be89
 800bdf4:	0800be89 	.word	0x0800be89
 800bdf8:	0800be89 	.word	0x0800be89
 800bdfc:	0800be6f 	.word	0x0800be6f
 800be00:	0800be89 	.word	0x0800be89
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800be04:	2306      	movs	r3, #6
 800be06:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800be08:	f107 030c 	add.w	r3, r7, #12
 800be0c:	4618      	mov	r0, r3
 800be0e:	f004 fafd 	bl	801040c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	4a22      	ldr	r2, [pc, #136]	; (800bea0 <MlmeConfirm+0x108>)
 800be16:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800be18:	4822      	ldr	r0, [pc, #136]	; (800bea4 <MlmeConfirm+0x10c>)
 800be1a:	f7ff fedb 	bl	800bbd4 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d108      	bne.n	800be38 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <MlmeConfirm+0x110>)
 800be28:	2200      	movs	r2, #0
 800be2a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800be2c:	4b1f      	ldr	r3, [pc, #124]	; (800beac <MlmeConfirm+0x114>)
 800be2e:	785b      	ldrb	r3, [r3, #1]
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff fe25 	bl	800ba80 <LmHandlerRequestClass>
 800be36:	e002      	b.n	800be3e <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800be38:	4b1b      	ldr	r3, [pc, #108]	; (800bea8 <MlmeConfirm+0x110>)
 800be3a:	22ff      	movs	r2, #255	; 0xff
 800be3c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800be3e:	4b17      	ldr	r3, [pc, #92]	; (800be9c <MlmeConfirm+0x104>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	4818      	ldr	r0, [pc, #96]	; (800bea8 <MlmeConfirm+0x110>)
 800be46:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d11d      	bne.n	800be8c <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800be50:	f7ff f89e 	bl	800af90 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800be54:	e01a      	b.n	800be8c <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800be56:	4b16      	ldr	r3, [pc, #88]	; (800beb0 <MlmeConfirm+0x118>)
 800be58:	2201      	movs	r2, #1
 800be5a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7a1a      	ldrb	r2, [r3, #8]
 800be60:	4b13      	ldr	r3, [pc, #76]	; (800beb0 <MlmeConfirm+0x118>)
 800be62:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	7a5a      	ldrb	r2, [r3, #9]
 800be68:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <MlmeConfirm+0x118>)
 800be6a:	74da      	strb	r2, [r3, #19]
        }
        break;
 800be6c:	e00f      	b.n	800be8e <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	785b      	ldrb	r3, [r3, #1]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d105      	bne.n	800be82 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800be76:	4b0d      	ldr	r3, [pc, #52]	; (800beac <MlmeConfirm+0x114>)
 800be78:	7b1b      	ldrb	r3, [r3, #12]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff fdf4 	bl	800ba68 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800be80:	e005      	b.n	800be8e <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800be82:	f7ff fdd5 	bl	800ba30 <LmHandlerDeviceTimeReq>
        break;
 800be86:	e002      	b.n	800be8e <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800be88:	bf00      	nop
 800be8a:	e000      	b.n	800be8e <MlmeConfirm+0xf6>
        break;
 800be8c:	bf00      	nop
    }
}
 800be8e:	bf00      	nop
 800be90:	3730      	adds	r7, #48	; 0x30
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	200000a4 	.word	0x200000a4
 800be9c:	200004f4 	.word	0x200004f4
 800bea0:	20000078 	.word	0x20000078
 800bea4:	200000a0 	.word	0x200000a0
 800bea8:	2000009c 	.word	0x2000009c
 800beac:	200004e0 	.word	0x200004e0
 800beb0:	200000c0 	.word	0x200000c0

0800beb4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800bebe:	4b2f      	ldr	r3, [pc, #188]	; (800bf7c <MlmeIndication+0xc8>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	785a      	ldrb	r2, [r3, #1]
 800bec8:	4b2c      	ldr	r3, [pc, #176]	; (800bf7c <MlmeIndication+0xc8>)
 800beca:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	789b      	ldrb	r3, [r3, #2]
 800bed0:	b25a      	sxtb	r2, r3
 800bed2:	4b2a      	ldr	r3, [pc, #168]	; (800bf7c <MlmeIndication+0xc8>)
 800bed4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bedc:	b25a      	sxtb	r2, r3
 800bede:	4b27      	ldr	r3, [pc, #156]	; (800bf7c <MlmeIndication+0xc8>)
 800bee0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bee8:	4b24      	ldr	r3, [pc, #144]	; (800bf7c <MlmeIndication+0xc8>)
 800beea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	78da      	ldrb	r2, [r3, #3]
 800bef0:	4b22      	ldr	r3, [pc, #136]	; (800bf7c <MlmeIndication+0xc8>)
 800bef2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	4a20      	ldr	r2, [pc, #128]	; (800bf7c <MlmeIndication+0xc8>)
 800befa:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b0b      	cmp	r3, #11
 800bf02:	d009      	beq.n	800bf18 <MlmeIndication+0x64>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b0f      	cmp	r3, #15
 800bf0a:	d005      	beq.n	800bf18 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800bf0c:	4b1c      	ldr	r3, [pc, #112]	; (800bf80 <MlmeIndication+0xcc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf12:	491a      	ldr	r1, [pc, #104]	; (800bf7c <MlmeIndication+0xc8>)
 800bf14:	2000      	movs	r0, #0
 800bf16:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	2003      	movs	r0, #3
 800bf1c:	f000 f8a4 	bl	800c068 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b0f      	cmp	r3, #15
 800bf26:	d01e      	beq.n	800bf66 <MlmeIndication+0xb2>
 800bf28:	2b0f      	cmp	r3, #15
 800bf2a:	dc1e      	bgt.n	800bf6a <MlmeIndication+0xb6>
 800bf2c:	2b07      	cmp	r3, #7
 800bf2e:	d002      	beq.n	800bf36 <MlmeIndication+0x82>
 800bf30:	2b0b      	cmp	r3, #11
 800bf32:	d01c      	beq.n	800bf6e <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800bf34:	e019      	b.n	800bf6a <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800bf36:	2300      	movs	r3, #0
 800bf38:	723b      	strb	r3, [r7, #8]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	727b      	strb	r3, [r7, #9]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800bf42:	4b10      	ldr	r3, [pc, #64]	; (800bf84 <MlmeIndication+0xd0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	4798      	blx	r3
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f083 0301 	eor.w	r3, r3, #1
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00d      	beq.n	800bf72 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800bf56:	f107 0308 	add.w	r3, r7, #8
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff fc8e 	bl	800b880 <LmHandlerSend>
        break;
 800bf64:	e005      	b.n	800bf72 <MlmeIndication+0xbe>
        break;
 800bf66:	bf00      	nop
 800bf68:	e004      	b.n	800bf74 <MlmeIndication+0xc0>
        break;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <MlmeIndication+0xc0>
        break;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <MlmeIndication+0xc0>
        break;
 800bf72:	bf00      	nop
    }
}
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	200000c0 	.word	0x200000c0
 800bf80:	200004f4 	.word	0x200004f4
 800bf84:	200004cc 	.word	0x200004cc

0800bf88 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800bf94:	2300      	movs	r3, #0
 800bf96:	60fb      	str	r3, [r7, #12]
    switch( id )
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d103      	bne.n	800bfa6 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800bf9e:	f000 f9cb 	bl	800c338 <LmhpCompliancePackageFactory>
 800bfa2:	60f8      	str	r0, [r7, #12]
            break;
 800bfa4:	e000      	b.n	800bfa8 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800bfa6:	bf00      	nop
        }
    }
    if( package != NULL )
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d02b      	beq.n	800c006 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	4918      	ldr	r1, [pc, #96]	; (800c014 <LmHandlerPackageRegister+0x8c>)
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	4a16      	ldr	r2, [pc, #88]	; (800c014 <LmHandlerPackageRegister+0x8c>)
 800bfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc0:	4a15      	ldr	r2, [pc, #84]	; (800c018 <LmHandlerPackageRegister+0x90>)
 800bfc2:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	4a13      	ldr	r2, [pc, #76]	; (800c014 <LmHandlerPackageRegister+0x8c>)
 800bfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfcc:	4a13      	ldr	r2, [pc, #76]	; (800c01c <LmHandlerPackageRegister+0x94>)
 800bfce:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	4a10      	ldr	r2, [pc, #64]	; (800c014 <LmHandlerPackageRegister+0x8c>)
 800bfd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd8:	4a11      	ldr	r2, [pc, #68]	; (800c020 <LmHandlerPackageRegister+0x98>)
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800bfdc:	4b11      	ldr	r3, [pc, #68]	; (800c024 <LmHandlerPackageRegister+0x9c>)
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	490c      	ldr	r1, [pc, #48]	; (800c014 <LmHandlerPackageRegister+0x8c>)
 800bfe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bfe8:	6992      	ldr	r2, [r2, #24]
 800bfea:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	4a09      	ldr	r2, [pc, #36]	; (800c014 <LmHandlerPackageRegister+0x8c>)
 800bff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	4a0c      	ldr	r2, [pc, #48]	; (800c028 <LmHandlerPackageRegister+0xa0>)
 800bff8:	6851      	ldr	r1, [r2, #4]
 800bffa:	4a0b      	ldr	r2, [pc, #44]	; (800c028 <LmHandlerPackageRegister+0xa0>)
 800bffc:	7852      	ldrb	r2, [r2, #1]
 800bffe:	6838      	ldr	r0, [r7, #0]
 800c000:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c002:	2300      	movs	r3, #0
 800c004:	e001      	b.n	800c00a <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	200004cc 	.word	0x200004cc
 800c018:	0800b749 	.word	0x0800b749
 800c01c:	0800b881 	.word	0x0800b881
 800c020:	0800ba31 	.word	0x0800ba31
 800c024:	200004f4 	.word	0x200004f4
 800c028:	200000d4 	.word	0x200000d4

0800c02c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c036:	79fb      	ldrb	r3, [r7, #7]
 800c038:	2b04      	cmp	r3, #4
 800c03a:	d80e      	bhi.n	800c05a <LmHandlerPackageIsInitialized+0x2e>
 800c03c:	79fb      	ldrb	r3, [r7, #7]
 800c03e:	4a09      	ldr	r2, [pc, #36]	; (800c064 <LmHandlerPackageIsInitialized+0x38>)
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d007      	beq.n	800c05a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	4a05      	ldr	r2, [pc, #20]	; (800c064 <LmHandlerPackageIsInitialized+0x38>)
 800c04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	4798      	blx	r3
 800c056:	4603      	mov	r3, r0
 800c058:	e000      	b.n	800c05c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c05a:	2300      	movs	r3, #0
    }
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	200004cc 	.word	0x200004cc

0800c068 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	6039      	str	r1, [r7, #0]
 800c072:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c074:	2300      	movs	r3, #0
 800c076:	73fb      	strb	r3, [r7, #15]
 800c078:	e07e      	b.n	800c178 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800c07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c07e:	4a43      	ldr	r2, [pc, #268]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d066      	beq.n	800c156 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800c088:	79fb      	ldrb	r3, [r7, #7]
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d865      	bhi.n	800c15a <LmHandlerPackagesNotify+0xf2>
 800c08e:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <LmHandlerPackagesNotify+0x2c>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0a5 	.word	0x0800c0a5
 800c098:	0800c0c7 	.word	0x0800c0c7
 800c09c:	0800c113 	.word	0x0800c113
 800c0a0:	0800c135 	.word	0x0800c135
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a8:	4a38      	ldr	r2, [pc, #224]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d054      	beq.n	800c15e <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800c0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0b8:	4a34      	ldr	r2, [pc, #208]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	6838      	ldr	r0, [r7, #0]
 800c0c2:	4798      	blx	r3
                    }
                    break;
 800c0c4:	e04b      	b.n	800c15e <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0ca:	4a30      	ldr	r2, [pc, #192]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d0:	69db      	ldr	r3, [r3, #28]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d045      	beq.n	800c162 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800c0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0da:	4a2c      	ldr	r2, [pc, #176]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d00a      	beq.n	800c100 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800c0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d137      	bne.n	800c162 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800c0f2:	4b26      	ldr	r3, [pc, #152]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	4798      	blx	r3
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d030      	beq.n	800c162 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800c100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c104:	4a21      	ldr	r2, [pc, #132]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	6838      	ldr	r0, [r7, #0]
 800c10e:	4798      	blx	r3
                    }
                    break;
 800c110:	e027      	b.n	800c162 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c116:	4a1d      	ldr	r2, [pc, #116]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c11c:	6a1b      	ldr	r3, [r3, #32]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d021      	beq.n	800c166 <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800c122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c126:	4a19      	ldr	r2, [pc, #100]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	6838      	ldr	r0, [r7, #0]
 800c130:	4798      	blx	r3
                    }
                    break;
 800c132:	e018      	b.n	800c166 <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c138:	4a14      	ldr	r2, [pc, #80]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	2b00      	cmp	r3, #0
 800c142:	d012      	beq.n	800c16a <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c148:	4a10      	ldr	r2, [pc, #64]	; (800c18c <LmHandlerPackagesNotify+0x124>)
 800c14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	6838      	ldr	r0, [r7, #0]
 800c152:	4798      	blx	r3
                    }
                    break;
 800c154:	e009      	b.n	800c16a <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800c156:	bf00      	nop
 800c158:	e008      	b.n	800c16c <LmHandlerPackagesNotify+0x104>
                    break;
 800c15a:	bf00      	nop
 800c15c:	e006      	b.n	800c16c <LmHandlerPackagesNotify+0x104>
                    break;
 800c15e:	bf00      	nop
 800c160:	e004      	b.n	800c16c <LmHandlerPackagesNotify+0x104>
                    break;
 800c162:	bf00      	nop
 800c164:	e002      	b.n	800c16c <LmHandlerPackagesNotify+0x104>
                    break;
 800c166:	bf00      	nop
 800c168:	e000      	b.n	800c16c <LmHandlerPackagesNotify+0x104>
                    break;
 800c16a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c170:	b2db      	uxtb	r3, r3
 800c172:	3301      	adds	r3, #1
 800c174:	b2db      	uxtb	r3, r3
 800c176:	73fb      	strb	r3, [r7, #15]
 800c178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	f77f af7c 	ble.w	800c07a <LmHandlerPackagesNotify+0x12>
    }
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	200004cc 	.word	0x200004cc

0800c190 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c196:	2300      	movs	r3, #0
 800c198:	71fb      	strb	r3, [r7, #7]
 800c19a:	e022      	b.n	800c1e2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c19c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1a0:	4a14      	ldr	r2, [pc, #80]	; (800c1f4 <LmHandlerPackagesProcess+0x64>)
 800c1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d015      	beq.n	800c1d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1ae:	4a11      	ldr	r2, [pc, #68]	; (800c1f4 <LmHandlerPackagesProcess+0x64>)
 800c1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1b4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00d      	beq.n	800c1d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff ff35 	bl	800c02c <LmHandlerPackageIsInitialized>
 800c1c2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800c1c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1cc:	4a09      	ldr	r2, [pc, #36]	; (800c1f4 <LmHandlerPackagesProcess+0x64>)
 800c1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c1d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	3301      	adds	r3, #1
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	71fb      	strb	r3, [r7, #7]
 800c1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	ddd8      	ble.n	800c19c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	200004cc 	.word	0x200004cc

0800c1f8 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800c1fc:	f005 f83a 	bl	8011274 <LoRaMacDeInitialization>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c206:	2300      	movs	r3, #0
 800c208:	e001      	b.n	800c20e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c20a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c20e:	4618      	mov	r0, r3
 800c210:	bd80      	pop	{r7, pc}

0800c212 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800c216:	f004 f839 	bl	801028c <LoRaMacHalt>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c220:	2300      	movs	r3, #0
 800c222:	e001      	b.n	800c228 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c224:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c228:	4618      	mov	r0, r3
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <LmHandlerSetDutyCycleEnable>:
    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable(bool dutyCycleEnable)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 800c236:	4a06      	ldr	r2, [pc, #24]	; (800c250 <LmHandlerSetDutyCycleEnable+0x24>)
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	7193      	strb	r3, [r2, #6]
    LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	4618      	mov	r0, r3
 800c240:	f004 fffa 	bl	8011238 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200004e0 	.word	0x200004e0

0800c254 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08e      	sub	sp, #56	; 0x38
 800c258:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c25a:	2300      	movs	r3, #0
 800c25c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800c264:	f7ff ffd5 	bl	800c212 <LmHandlerHalt>
 800c268:	4603      	mov	r3, r0
 800c26a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800c26e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c272:	2b00      	cmp	r3, #0
 800c274:	d12f      	bne.n	800c2d6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800c276:	f000 f84f 	bl	800c318 <NvmDataMgmtStoreBegin>
 800c27a:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	f113 0f02 	cmn.w	r3, #2
 800c282:	d103      	bne.n	800c28c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800c284:	23f8      	movs	r3, #248	; 0xf8
 800c286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c28a:	e01c      	b.n	800c2c6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d104      	bne.n	800c29c <LmHandlerNvmDataStore+0x48>
 800c292:	4b1b      	ldr	r3, [pc, #108]	; (800c300 <LmHandlerNvmDataStore+0xac>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d103      	bne.n	800c2a4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c29c:	23ff      	movs	r3, #255	; 0xff
 800c29e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c2a2:	e010      	b.n	800c2c6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800c2a4:	2326      	movs	r3, #38	; 0x26
 800c2a6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800c2a8:	1d3b      	adds	r3, r7, #4
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f004 f8ae 	bl	801040c <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800c2b4:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800c2b8:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800c2ba:	4b11      	ldr	r3, [pc, #68]	; (800c300 <LmHandlerNvmDataStore+0xac>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2c4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800c2c6:	f000 f82f 	bl	800c328 <NvmDataMgmtStoreEnd>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c2d0:	23ff      	movs	r3, #255	; 0xff
 800c2d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800c2d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d109      	bne.n	800c2f2 <LmHandlerNvmDataStore+0x9e>
 800c2de:	4b08      	ldr	r3, [pc, #32]	; (800c300 <LmHandlerNvmDataStore+0xac>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800c2e8:	4b05      	ldr	r3, [pc, #20]	; (800c300 <LmHandlerNvmDataStore+0xac>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	4798      	blx	r3
    }

    return lmhStatus;
 800c2f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3738      	adds	r7, #56	; 0x38
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	200004f4 	.word	0x200004f4

0800c304 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c30e:	bf00      	nop
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	bc80      	pop	{r7}
 800c316:	4770      	bx	lr

0800c318 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800c31c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c320:	4618      	mov	r0, r3
 800c322:	46bd      	mov	sp, r7
 800c324:	bc80      	pop	{r7}
 800c326:	4770      	bx	lr

0800c328 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800c32c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c330:	4618      	mov	r0, r3
 800c332:	46bd      	mov	sp, r7
 800c334:	bc80      	pop	{r7}
 800c336:	4770      	bx	lr

0800c338 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c338:	b480      	push	{r7}
 800c33a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c33c:	4b02      	ldr	r3, [pc, #8]	; (800c348 <LmhpCompliancePackageFactory+0x10>)
}
 800c33e:	4618      	mov	r0, r3
 800c340:	46bd      	mov	sp, r7
 800c342:	bc80      	pop	{r7}
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	200000dc 	.word	0x200000dc

0800c34c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	4613      	mov	r3, r2
 800c358:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00f      	beq.n	800c380 <LmhpComplianceInit+0x34>
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00c      	beq.n	800c380 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800c366:	4a0c      	ldr	r2, [pc, #48]	; (800c398 <LmhpComplianceInit+0x4c>)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c36c:	4a0b      	ldr	r2, [pc, #44]	; (800c39c <LmhpComplianceInit+0x50>)
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c372:	4a0a      	ldr	r2, [pc, #40]	; (800c39c <LmhpComplianceInit+0x50>)
 800c374:	79fb      	ldrb	r3, [r7, #7]
 800c376:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c378:	4b08      	ldr	r3, [pc, #32]	; (800c39c <LmhpComplianceInit+0x50>)
 800c37a:	2201      	movs	r2, #1
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	e006      	b.n	800c38e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c380:	4b05      	ldr	r3, [pc, #20]	; (800c398 <LmhpComplianceInit+0x4c>)
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <LmhpComplianceInit+0x50>)
 800c388:	2200      	movs	r2, #0
 800c38a:	701a      	strb	r2, [r3, #0]
    }
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	bc80      	pop	{r7}
 800c396:	4770      	bx	lr
 800c398:	20000640 	.word	0x20000640
 800c39c:	2000062c 	.word	0x2000062c

0800c3a0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c3a4:	4b02      	ldr	r3, [pc, #8]	; (800c3b0 <LmhpComplianceIsInitialized+0x10>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bc80      	pop	{r7}
 800c3ae:	4770      	bx	lr
 800c3b0:	2000062c 	.word	0x2000062c

0800c3b4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c3b8:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <LmhpComplianceIsRunning+0x24>)
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	f083 0301 	eor.w	r3, r3, #1
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e001      	b.n	800c3ce <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c3ca:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <LmhpComplianceIsRunning+0x24>)
 800c3cc:	785b      	ldrb	r3, [r3, #1]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bc80      	pop	{r7}
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	2000062c 	.word	0x2000062c

0800c3dc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800c3e4:	4b0f      	ldr	r3, [pc, #60]	; (800c424 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f083 0301 	eor.w	r3, r3, #1
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d112      	bne.n	800c418 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c3f4:	785b      	ldrb	r3, [r3, #1]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00f      	beq.n	800c41a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d10b      	bne.n	800c41a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c40a:	4b06      	ldr	r3, [pc, #24]	; (800c424 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c40c:	899b      	ldrh	r3, [r3, #12]
 800c40e:	3301      	adds	r3, #1
 800c410:	b29a      	uxth	r2, r3
 800c412:	4b04      	ldr	r3, [pc, #16]	; (800c424 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c414:	819a      	strh	r2, [r3, #12]
 800c416:	e000      	b.n	800c41a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c418:	bf00      	nop
    }
}
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bc80      	pop	{r7}
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	2000062c 	.word	0x2000062c

0800c428 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c430:	4b12      	ldr	r3, [pc, #72]	; (800c47c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	f083 0301 	eor.w	r3, r3, #1
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d116      	bne.n	800c46c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c43e:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c440:	785b      	ldrb	r3, [r3, #1]
 800c442:	f083 0301 	eor.w	r3, r3, #1
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d111      	bne.n	800c470 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b04      	cmp	r3, #4
 800c452:	d10e      	bne.n	800c472 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c454:	4b09      	ldr	r3, [pc, #36]	; (800c47c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c456:	2201      	movs	r2, #1
 800c458:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	7a1a      	ldrb	r2, [r3, #8]
 800c45e:	4b07      	ldr	r3, [pc, #28]	; (800c47c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c460:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	7a5a      	ldrb	r2, [r3, #9]
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c468:	741a      	strb	r2, [r3, #16]
 800c46a:	e002      	b.n	800c472 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c46c:	bf00      	nop
 800c46e:	e000      	b.n	800c472 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c470:	bf00      	nop
    }
}
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	bc80      	pop	{r7}
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	2000062c 	.word	0x2000062c

0800c480 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c486:	4b33      	ldr	r3, [pc, #204]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f083 0301 	eor.w	r3, r3, #1
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c494:	f04f 33ff 	mov.w	r3, #4294967295
 800c498:	e057      	b.n	800c54a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800c49a:	4b2e      	ldr	r3, [pc, #184]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	f083 0301 	eor.w	r3, r3, #1
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e04e      	b.n	800c54a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c4ac:	4b29      	ldr	r3, [pc, #164]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4ae:	7b9b      	ldrb	r3, [r3, #14]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d019      	beq.n	800c4e8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c4b4:	4b27      	ldr	r3, [pc, #156]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c4ba:	4b26      	ldr	r3, [pc, #152]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4bc:	2203      	movs	r2, #3
 800c4be:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c4c0:	4b24      	ldr	r3, [pc, #144]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	2205      	movs	r2, #5
 800c4c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c4c8:	4b22      	ldr	r3, [pc, #136]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	4a21      	ldr	r2, [pc, #132]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4d0:	7bd2      	ldrb	r2, [r2, #15]
 800c4d2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c4d4:	4b1f      	ldr	r3, [pc, #124]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	3302      	adds	r3, #2
 800c4da:	4a1e      	ldr	r2, [pc, #120]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4dc:	7c12      	ldrb	r2, [r2, #16]
 800c4de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c4e0:	4b1c      	ldr	r3, [pc, #112]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	709a      	strb	r2, [r3, #2]
 800c4e6:	e01c      	b.n	800c522 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c4e8:	4b1a      	ldr	r3, [pc, #104]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4ea:	789b      	ldrb	r3, [r3, #2]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d005      	beq.n	800c4fc <LmhpComplianceTxProcess+0x7c>
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	d116      	bne.n	800c522 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800c4f4:	4b17      	ldr	r3, [pc, #92]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	709a      	strb	r2, [r3, #2]
            break;
 800c4fa:	e012      	b.n	800c522 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800c4fc:	4b15      	ldr	r3, [pc, #84]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c4fe:	2202      	movs	r2, #2
 800c500:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c502:	4b14      	ldr	r3, [pc, #80]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c504:	899b      	ldrh	r3, [r3, #12]
 800c506:	0a1b      	lsrs	r3, r3, #8
 800c508:	b29a      	uxth	r2, r3
 800c50a:	4b12      	ldr	r3, [pc, #72]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	b2d2      	uxtb	r2, r2
 800c510:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c512:	4b10      	ldr	r3, [pc, #64]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c514:	899a      	ldrh	r2, [r3, #12]
 800c516:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	3301      	adds	r3, #1
 800c51c:	b2d2      	uxtb	r2, r2
 800c51e:	701a      	strb	r2, [r3, #0]
            break;
 800c520:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c522:	23e0      	movs	r3, #224	; 0xe0
 800c524:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c528:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c52a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c52c:	4b09      	ldr	r3, [pc, #36]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c52e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c530:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800c532:	4809      	ldr	r0, [pc, #36]	; (800c558 <LmhpComplianceTxProcess+0xd8>)
 800c534:	f00d fb32 	bl	8019b9c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <LmhpComplianceTxProcess+0xdc>)
 800c53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53c:	4a05      	ldr	r2, [pc, #20]	; (800c554 <LmhpComplianceTxProcess+0xd4>)
 800c53e:	78d2      	ldrb	r2, [r2, #3]
 800c540:	4611      	mov	r1, r2
 800c542:	4638      	mov	r0, r7
 800c544:	2201      	movs	r2, #1
 800c546:	4798      	blx	r3
 800c548:	4603      	mov	r3, r0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	2000062c 	.word	0x2000062c
 800c558:	20000614 	.word	0x20000614
 800c55c:	200000dc 	.word	0x200000dc

0800c560 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b0a2      	sub	sp, #136	; 0x88
 800c564:	af02      	add	r7, sp, #8
 800c566:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c568:	4ba3      	ldr	r3, [pc, #652]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	f083 0301 	eor.w	r3, r3, #1
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	f040 81c2 	bne.w	800c8fc <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7b5b      	ldrb	r3, [r3, #13]
 800c57c:	f083 0301 	eor.w	r3, r3, #1
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b00      	cmp	r3, #0
 800c584:	f040 81bc 	bne.w	800c900 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c588:	4b9b      	ldr	r3, [pc, #620]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00c      	beq.n	800c5aa <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	7b9b      	ldrb	r3, [r3, #14]
 800c594:	f083 0301 	eor.w	r3, r3, #1
 800c598:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c59e:	4b96      	ldr	r3, [pc, #600]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c5a0:	899b      	ldrh	r3, [r3, #12]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	4b94      	ldr	r3, [pc, #592]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c5a8:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	78db      	ldrb	r3, [r3, #3]
 800c5ae:	2be0      	cmp	r3, #224	; 0xe0
 800c5b0:	f040 81a8 	bne.w	800c904 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c5b4:	4b90      	ldr	r3, [pc, #576]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c5b6:	785b      	ldrb	r3, [r3, #1]
 800c5b8:	f083 0301 	eor.w	r3, r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d060      	beq.n	800c684 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7b1b      	ldrb	r3, [r3, #12]
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	f040 81a1 	bne.w	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	f040 819b 	bne.w	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	f040 8194 	bne.w	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	3302      	adds	r3, #2
 800c5ec:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	f040 818d 	bne.w	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	3303      	adds	r3, #3
 800c5fa:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	f040 8186 	bne.w	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800c602:	4b7d      	ldr	r3, [pc, #500]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c604:	2200      	movs	r2, #0
 800c606:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800c608:	4b7b      	ldr	r3, [pc, #492]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c60a:	22e0      	movs	r2, #224	; 0xe0
 800c60c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800c60e:	4b7a      	ldr	r3, [pc, #488]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c610:	2202      	movs	r2, #2
 800c612:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800c614:	4b78      	ldr	r3, [pc, #480]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c616:	2200      	movs	r2, #0
 800c618:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800c61a:	4b77      	ldr	r3, [pc, #476]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800c620:	4b75      	ldr	r3, [pc, #468]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c622:	2200      	movs	r2, #0
 800c624:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800c626:	4b74      	ldr	r3, [pc, #464]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c628:	2200      	movs	r2, #0
 800c62a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800c62c:	4b72      	ldr	r3, [pc, #456]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c62e:	2201      	movs	r2, #1
 800c630:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800c632:	4b71      	ldr	r3, [pc, #452]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c634:	2201      	movs	r2, #1
 800c636:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800c638:	2304      	movs	r3, #4
 800c63a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800c63c:	2301      	movs	r3, #1
 800c63e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	4618      	mov	r0, r3
 800c646:	f004 f867 	bl	8010718 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800c64a:	2000      	movs	r0, #0
 800c64c:	f004 fdf4 	bl	8011238 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800c650:	4b6a      	ldr	r3, [pc, #424]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800c65a:	4b68      	ldr	r3, [pc, #416]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800c662:	2300      	movs	r3, #0
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	4b66      	ldr	r3, [pc, #408]	; (800c800 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c668:	2200      	movs	r2, #0
 800c66a:	f04f 31ff 	mov.w	r1, #4294967295
 800c66e:	4865      	ldr	r0, [pc, #404]	; (800c804 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c670:	f00d fa5e 	bl	8019b30 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800c674:	f241 3188 	movw	r1, #5000	; 0x1388
 800c678:	4862      	ldr	r0, [pc, #392]	; (800c804 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c67a:	f00d fb6d 	bl	8019d58 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800c67e:	f7ff feff 	bl	800c480 <LmhpComplianceTxProcess>
 800c682:	e144      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	781a      	ldrb	r2, [r3, #0]
 800c68a:	4b5b      	ldr	r3, [pc, #364]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c68c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800c68e:	4b5a      	ldr	r3, [pc, #360]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c690:	789b      	ldrb	r3, [r3, #2]
 800c692:	2b0a      	cmp	r3, #10
 800c694:	f200 8138 	bhi.w	800c908 <LmhpComplianceOnMcpsIndication+0x3a8>
 800c698:	a201      	add	r2, pc, #4	; (adr r2, 800c6a0 <LmhpComplianceOnMcpsIndication+0x140>)
 800c69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69e:	bf00      	nop
 800c6a0:	0800c6cd 	.word	0x0800c6cd
 800c6a4:	0800c717 	.word	0x0800c717
 800c6a8:	0800c71f 	.word	0x0800c71f
 800c6ac:	0800c72d 	.word	0x0800c72d
 800c6b0:	0800c73b 	.word	0x0800c73b
 800c6b4:	0800c793 	.word	0x0800c793
 800c6b8:	0800c7a5 	.word	0x0800c7a5
 800c6bc:	0800c80d 	.word	0x0800c80d
 800c6c0:	0800c8b5 	.word	0x0800c8b5
 800c6c4:	0800c8c7 	.word	0x0800c8c7
 800c6c8:	0800c8e1 	.word	0x0800c8e1
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800c6cc:	484d      	ldr	r0, [pc, #308]	; (800c804 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c6ce:	f00d fad3 	bl	8019c78 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c6d2:	4b49      	ldr	r3, [pc, #292]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c6d8:	4b47      	ldr	r3, [pc, #284]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800c6de:	2304      	movs	r3, #4
 800c6e0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c6e2:	4b46      	ldr	r3, [pc, #280]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c6ea:	f107 0308 	add.w	r3, r7, #8
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f004 f812 	bl	8010718 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c6f4:	4b41      	ldr	r3, [pc, #260]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	785b      	ldrb	r3, [r3, #1]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f004 fd9c 	bl	8011238 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c700:	4b3e      	ldr	r3, [pc, #248]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 8100 	beq.w	800c90c <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c70c:	4b3b      	ldr	r3, [pc, #236]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	4798      	blx	r3
                }
            }
            break;
 800c714:	e0fa      	b.n	800c90c <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800c716:	4b38      	ldr	r3, [pc, #224]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c718:	2202      	movs	r2, #2
 800c71a:	719a      	strb	r2, [r3, #6]
            break;
 800c71c:	e0f7      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800c71e:	4b36      	ldr	r3, [pc, #216]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c720:	2201      	movs	r2, #1
 800c722:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c724:	4b34      	ldr	r3, [pc, #208]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c726:	2201      	movs	r2, #1
 800c728:	709a      	strb	r2, [r3, #2]
            break;
 800c72a:	e0f0      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800c72c:	4b32      	ldr	r3, [pc, #200]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c72e:	2200      	movs	r2, #0
 800c730:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c732:	4b31      	ldr	r3, [pc, #196]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c734:	2201      	movs	r2, #1
 800c736:	709a      	strb	r2, [r3, #2]
            break;
 800c738:	e0e9      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	7b1a      	ldrb	r2, [r3, #12]
 800c73e:	4b2e      	ldr	r3, [pc, #184]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c740:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800c742:	4b2d      	ldr	r3, [pc, #180]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	2204      	movs	r2, #4
 800c748:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c74a:	2301      	movs	r3, #1
 800c74c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c750:	e012      	b.n	800c778 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	689a      	ldr	r2, [r3, #8]
 800c756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c75a:	4413      	add	r3, r2
 800c75c:	781a      	ldrb	r2, [r3, #0]
 800c75e:	4b26      	ldr	r3, [pc, #152]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c760:	6899      	ldr	r1, [r3, #8]
 800c762:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c766:	440b      	add	r3, r1
 800c768:	3201      	adds	r2, #1
 800c76a:	b2d2      	uxtb	r2, r2
 800c76c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c76e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c772:	3301      	adds	r3, #1
 800c774:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c778:	4b1f      	ldr	r3, [pc, #124]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c77a:	795a      	ldrb	r2, [r3, #5]
 800c77c:	4b1e      	ldr	r3, [pc, #120]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c77e:	799b      	ldrb	r3, [r3, #6]
 800c780:	4293      	cmp	r3, r2
 800c782:	bf28      	it	cs
 800c784:	4613      	movcs	r3, r2
 800c786:	b2db      	uxtb	r3, r3
 800c788:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d3e0      	bcc.n	800c752 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800c790:	e0bd      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800c792:	2304      	movs	r3, #4
 800c794:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800c798:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c79c:	4618      	mov	r0, r3
 800c79e:	f004 fb15 	bl	8010dcc <LoRaMacMlmeRequest>
            }
            break;
 800c7a2:	e0b4      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800c7a4:	4817      	ldr	r0, [pc, #92]	; (800c804 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c7a6:	f00d fa67 	bl	8019c78 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c7aa:	4b13      	ldr	r3, [pc, #76]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c7b0:	4b11      	ldr	r3, [pc, #68]	; (800c7f8 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800c7b6:	2304      	movs	r3, #4
 800c7b8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c7ba:	4b10      	ldr	r3, [pc, #64]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f003 ffa6 	bl	8010718 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	785b      	ldrb	r3, [r3, #1]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f004 fd30 	bl	8011238 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c7d8:	4b08      	ldr	r3, [pc, #32]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c7e2:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	2002      	movs	r0, #2
 800c7f2:	4798      	blx	r3
            }
            break;
 800c7f4:	e08b      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
 800c7f6:	bf00      	nop
 800c7f8:	2000062c 	.word	0x2000062c
 800c7fc:	20000640 	.word	0x20000640
 800c800:	0800c925 	.word	0x0800c925
 800c804:	20000614 	.word	0x20000614
 800c808:	200000dc 	.word	0x200000dc
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7b1b      	ldrb	r3, [r3, #12]
 800c810:	2b03      	cmp	r3, #3
 800c812:	d113      	bne.n	800c83c <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800c814:	2305      	movs	r3, #5
 800c816:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	3301      	adds	r3, #1
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	b21a      	sxth	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	3302      	adds	r3, #2
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b21b      	sxth	r3, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	b21b      	sxth	r3, r3
 800c834:	b29b      	uxth	r3, r3
 800c836:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800c83a:	e032      	b.n	800c8a2 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7b1b      	ldrb	r3, [r3, #12]
 800c840:	2b07      	cmp	r3, #7
 800c842:	d12e      	bne.n	800c8a2 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800c844:	2306      	movs	r3, #6
 800c846:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	3301      	adds	r3, #1
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	b21a      	sxth	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	3302      	adds	r3, #2
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	b21b      	sxth	r3, r3
 800c860:	4313      	orrs	r3, r2
 800c862:	b21b      	sxth	r3, r3
 800c864:	b29b      	uxth	r3, r3
 800c866:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	3303      	adds	r3, #3
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	041a      	lsls	r2, r3, #16
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	3304      	adds	r3, #4
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	021b      	lsls	r3, r3, #8
 800c87e:	4313      	orrs	r3, r2
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6892      	ldr	r2, [r2, #8]
 800c884:	3205      	adds	r2, #5
 800c886:	7812      	ldrb	r2, [r2, #0]
 800c888:	4313      	orrs	r3, r2
 800c88a:	461a      	mov	r2, r3
 800c88c:	2364      	movs	r3, #100	; 0x64
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	3306      	adds	r3, #6
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	b25b      	sxtb	r3, r3
 800c89e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800c8a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f004 fa90 	bl	8010dcc <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800c8ac:	4b19      	ldr	r3, [pc, #100]	; (800c914 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	709a      	strb	r2, [r3, #2]
            }
            break;
 800c8b2:	e02c      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800c8b4:	230a      	movs	r3, #10
 800c8b6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800c8ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f004 fa84 	bl	8010dcc <LoRaMacMlmeRequest>
            }
            break;
 800c8c4:	e023      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c8d4:	f107 0308 	add.w	r3, r7, #8
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f003 ff1d 	bl	8010718 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800c8de:	e016      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800c8e0:	230d      	movs	r3, #13
 800c8e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	785b      	ldrb	r3, [r3, #1]
 800c8ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800c8f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f004 fa69 	bl	8010dcc <LoRaMacMlmeRequest>
            }
            break;
 800c8fa:	e008      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800c8fc:	bf00      	nop
 800c8fe:	e006      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800c900:	bf00      	nop
 800c902:	e004      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800c904:	bf00      	nop
 800c906:	e002      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800c908:	bf00      	nop
 800c90a:	e000      	b.n	800c90e <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800c90c:	bf00      	nop
        }
    }
}
 800c90e:	3780      	adds	r7, #128	; 0x80
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	2000062c 	.word	0x2000062c

0800c918 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800c918:	b480      	push	{r7}
 800c91a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800c91c:	bf00      	nop
 800c91e:	46bd      	mov	sp, r7
 800c920:	bc80      	pop	{r7}
 800c922:	4770      	bx	lr

0800c924 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800c92c:	f7ff fda8 	bl	800c480 <LmhpComplianceTxProcess>
}
 800c930:	bf00      	nop
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800c93e:	f00d fab5 	bl	8019eac <UTIL_TIMER_GetCurrentTime>
 800c942:	4603      	mov	r3, r0
 800c944:	4a16      	ldr	r2, [pc, #88]	; (800c9a0 <OnRadioTxDone+0x68>)
 800c946:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800c948:	4c16      	ldr	r4, [pc, #88]	; (800c9a4 <OnRadioTxDone+0x6c>)
 800c94a:	463b      	mov	r3, r7
 800c94c:	4618      	mov	r0, r3
 800c94e:	f00c fc27 	bl	80191a0 <SysTimeGet>
 800c952:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800c956:	463a      	mov	r2, r7
 800c958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c95c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800c960:	4a11      	ldr	r2, [pc, #68]	; (800c9a8 <OnRadioTxDone+0x70>)
 800c962:	7813      	ldrb	r3, [r2, #0]
 800c964:	f043 0310 	orr.w	r3, r3, #16
 800c968:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c96a:	4b0e      	ldr	r3, [pc, #56]	; (800c9a4 <OnRadioTxDone+0x6c>)
 800c96c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00a      	beq.n	800c98a <OnRadioTxDone+0x52>
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <OnRadioTxDone+0x6c>)
 800c976:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c980:	4b08      	ldr	r3, [pc, #32]	; (800c9a4 <OnRadioTxDone+0x6c>)
 800c982:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800c98a:	4b08      	ldr	r3, [pc, #32]	; (800c9ac <OnRadioTxDone+0x74>)
 800c98c:	2201      	movs	r2, #1
 800c98e:	2100      	movs	r1, #0
 800c990:	2002      	movs	r0, #2
 800c992:	f00d fb7b 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
}
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd90      	pop	{r4, r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	200019a4 	.word	0x200019a4
 800c9a4:	20000644 	.word	0x20000644
 800c9a8:	200019a0 	.word	0x200019a0
 800c9ac:	0801b2f4 	.word	0x0801b2f4

0800c9b0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	461a      	mov	r2, r3
 800c9be:	4603      	mov	r3, r0
 800c9c0:	817b      	strh	r3, [r7, #10]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	813b      	strh	r3, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800c9ca:	f00d fa6f 	bl	8019eac <UTIL_TIMER_GetCurrentTime>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4a16      	ldr	r2, [pc, #88]	; (800ca2c <OnRadioRxDone+0x7c>)
 800c9d2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800c9d4:	4a15      	ldr	r2, [pc, #84]	; (800ca2c <OnRadioRxDone+0x7c>)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800c9da:	4a14      	ldr	r2, [pc, #80]	; (800ca2c <OnRadioRxDone+0x7c>)
 800c9dc:	897b      	ldrh	r3, [r7, #10]
 800c9de:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800c9e0:	4a12      	ldr	r2, [pc, #72]	; (800ca2c <OnRadioRxDone+0x7c>)
 800c9e2:	893b      	ldrh	r3, [r7, #8]
 800c9e4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800c9e6:	4a11      	ldr	r2, [pc, #68]	; (800ca2c <OnRadioRxDone+0x7c>)
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800c9ec:	4a10      	ldr	r2, [pc, #64]	; (800ca30 <OnRadioRxDone+0x80>)
 800c9ee:	7813      	ldrb	r3, [r2, #0]
 800c9f0:	f043 0308 	orr.w	r3, r3, #8
 800c9f4:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <OnRadioRxDone+0x84>)
 800c9f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <OnRadioRxDone+0x66>
 800ca00:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <OnRadioRxDone+0x84>)
 800ca02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d004      	beq.n	800ca16 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <OnRadioRxDone+0x84>)
 800ca0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ca16:	4b08      	ldr	r3, [pc, #32]	; (800ca38 <OnRadioRxDone+0x88>)
 800ca18:	2201      	movs	r2, #1
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	2002      	movs	r0, #2
 800ca1e:	f00d fb35 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
}
 800ca22:	bf00      	nop
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200019a8 	.word	0x200019a8
 800ca30:	200019a0 	.word	0x200019a0
 800ca34:	20000644 	.word	0x20000644
 800ca38:	0801b304 	.word	0x0801b304

0800ca3c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ca40:	4a0e      	ldr	r2, [pc, #56]	; (800ca7c <OnRadioTxTimeout+0x40>)
 800ca42:	7813      	ldrb	r3, [r2, #0]
 800ca44:	f043 0304 	orr.w	r3, r3, #4
 800ca48:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <OnRadioTxTimeout+0x44>)
 800ca4c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00a      	beq.n	800ca6a <OnRadioTxTimeout+0x2e>
 800ca54:	4b0a      	ldr	r3, [pc, #40]	; (800ca80 <OnRadioTxTimeout+0x44>)
 800ca56:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ca60:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <OnRadioTxTimeout+0x44>)
 800ca62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ca6a:	4b06      	ldr	r3, [pc, #24]	; (800ca84 <OnRadioTxTimeout+0x48>)
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	2100      	movs	r1, #0
 800ca70:	2002      	movs	r0, #2
 800ca72:	f00d fb0b 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
}
 800ca76:	bf00      	nop
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	200019a0 	.word	0x200019a0
 800ca80:	20000644 	.word	0x20000644
 800ca84:	0801b314 	.word	0x0801b314

0800ca88 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ca8c:	4a0b      	ldr	r2, [pc, #44]	; (800cabc <OnRadioRxError+0x34>)
 800ca8e:	7813      	ldrb	r3, [r2, #0]
 800ca90:	f043 0302 	orr.w	r3, r3, #2
 800ca94:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ca96:	4b0a      	ldr	r3, [pc, #40]	; (800cac0 <OnRadioRxError+0x38>)
 800ca98:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00a      	beq.n	800cab6 <OnRadioRxError+0x2e>
 800caa0:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <OnRadioRxError+0x38>)
 800caa2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d004      	beq.n	800cab6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800caac:	4b04      	ldr	r3, [pc, #16]	; (800cac0 <OnRadioRxError+0x38>)
 800caae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	4798      	blx	r3
    }
}
 800cab6:	bf00      	nop
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	200019a0 	.word	0x200019a0
 800cac0:	20000644 	.word	0x20000644

0800cac4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800cac8:	4a0e      	ldr	r2, [pc, #56]	; (800cb04 <OnRadioRxTimeout+0x40>)
 800caca:	7813      	ldrb	r3, [r2, #0]
 800cacc:	f043 0301 	orr.w	r3, r3, #1
 800cad0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cad2:	4b0d      	ldr	r3, [pc, #52]	; (800cb08 <OnRadioRxTimeout+0x44>)
 800cad4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <OnRadioRxTimeout+0x2e>
 800cadc:	4b0a      	ldr	r3, [pc, #40]	; (800cb08 <OnRadioRxTimeout+0x44>)
 800cade:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d004      	beq.n	800caf2 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cae8:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <OnRadioRxTimeout+0x44>)
 800caea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800caf2:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <OnRadioRxTimeout+0x48>)
 800caf4:	2201      	movs	r2, #1
 800caf6:	2100      	movs	r1, #0
 800caf8:	2002      	movs	r0, #2
 800cafa:	f00d fac7 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
}
 800cafe:	bf00      	nop
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	200019a0 	.word	0x200019a0
 800cb08:	20000644 	.word	0x20000644
 800cb0c:	0801b324 	.word	0x0801b324

0800cb10 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cb14:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <UpdateRxSlotIdleState+0x28>)
 800cb16:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d004      	beq.n	800cb28 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800cb1e:	4b07      	ldr	r3, [pc, #28]	; (800cb3c <UpdateRxSlotIdleState+0x2c>)
 800cb20:	2206      	movs	r2, #6
 800cb22:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800cb26:	e003      	b.n	800cb30 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cb28:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <UpdateRxSlotIdleState+0x2c>)
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800cb30:	bf00      	nop
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bc80      	pop	{r7}
 800cb36:	4770      	bx	lr
 800cb38:	20000b50 	.word	0x20000b50
 800cb3c:	20000644 	.word	0x20000644

0800cb40 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b08e      	sub	sp, #56	; 0x38
 800cb44:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cb46:	4b44      	ldr	r3, [pc, #272]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cb48:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d002      	beq.n	800cb56 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800cb50:	4b42      	ldr	r3, [pc, #264]	; (800cc5c <ProcessRadioTxDone+0x11c>)
 800cb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb54:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800cb56:	4b42      	ldr	r3, [pc, #264]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cb58:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4841      	ldr	r0, [pc, #260]	; (800cc64 <ProcessRadioTxDone+0x124>)
 800cb60:	f00d f8fa 	bl	8019d58 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800cb64:	483f      	ldr	r0, [pc, #252]	; (800cc64 <ProcessRadioTxDone+0x124>)
 800cb66:	f00d f819 	bl	8019b9c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800cb6a:	4b3d      	ldr	r3, [pc, #244]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cb6c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800cb70:	4619      	mov	r1, r3
 800cb72:	483d      	ldr	r0, [pc, #244]	; (800cc68 <ProcessRadioTxDone+0x128>)
 800cb74:	f00d f8f0 	bl	8019d58 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800cb78:	483b      	ldr	r0, [pc, #236]	; (800cc68 <ProcessRadioTxDone+0x128>)
 800cb7a:	f00d f80f 	bl	8019b9c <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800cb7e:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cb80:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d004      	beq.n	800cb92 <ProcessRadioTxDone+0x52>
 800cb88:	4b35      	ldr	r3, [pc, #212]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cb8a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d019      	beq.n	800cbc6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800cb92:	2316      	movs	r3, #22
 800cb94:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cb98:	4b2f      	ldr	r3, [pc, #188]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cb9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb9e:	f107 0220 	add.w	r2, r7, #32
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f006 fc09 	bl	80133bc <RegionGetPhyParam>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800cbae:	4b2c      	ldr	r3, [pc, #176]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cbb0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	482c      	ldr	r0, [pc, #176]	; (800cc6c <ProcessRadioTxDone+0x12c>)
 800cbbc:	f00d f8cc 	bl	8019d58 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800cbc0:	482a      	ldr	r0, [pc, #168]	; (800cc6c <ProcessRadioTxDone+0x12c>)
 800cbc2:	f00c ffeb 	bl	8019b9c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800cbc6:	4b2a      	ldr	r3, [pc, #168]	; (800cc70 <ProcessRadioTxDone+0x130>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a23      	ldr	r2, [pc, #140]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cbcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800cbce:	4b24      	ldr	r3, [pc, #144]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cbd0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800cbd4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800cbd6:	4b26      	ldr	r3, [pc, #152]	; (800cc70 <ProcessRadioTxDone+0x130>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cbdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f00c fb15 	bl	8019210 <SysTimeGetMcuTime>
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	4b1b      	ldr	r3, [pc, #108]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cbea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800cbee:	9200      	str	r2, [sp, #0]
 800cbf0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800cbf4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cbf8:	ca06      	ldmia	r2, {r1, r2}
 800cbfa:	f00c fa6a 	bl	80190d2 <SysTimeSub>
 800cbfe:	f107 0314 	add.w	r3, r7, #20
 800cc02:	463a      	mov	r2, r7
 800cc04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc08:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800cc0c:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cc0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800cc12:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800cc14:	2301      	movs	r3, #1
 800cc16:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cc18:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cc1a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800cc22:	2300      	movs	r3, #0
 800cc24:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800cc26:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <ProcessRadioTxDone+0x118>)
 800cc28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc2c:	f107 0208 	add.w	r2, r7, #8
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f006 fbda 	bl	80133ec <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800cc38:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cc3a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800cc3e:	f083 0301 	eor.w	r3, r3, #1
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cc48:	4b05      	ldr	r3, [pc, #20]	; (800cc60 <ProcessRadioTxDone+0x120>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800cc50:	bf00      	nop
 800cc52:	3730      	adds	r7, #48	; 0x30
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20000b50 	.word	0x20000b50
 800cc5c:	0801b950 	.word	0x0801b950
 800cc60:	20000644 	.word	0x20000644
 800cc64:	200009c4 	.word	0x200009c4
 800cc68:	200009dc 	.word	0x200009dc
 800cc6c:	20000a3c 	.word	0x20000a3c
 800cc70:	200019a4 	.word	0x200019a4

0800cc74 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800cc78:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <PrepareRxDoneAbort+0x48>)
 800cc7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cc7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc82:	4a0e      	ldr	r2, [pc, #56]	; (800ccbc <PrepareRxDoneAbort+0x48>)
 800cc84:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800cc88:	4b0c      	ldr	r3, [pc, #48]	; (800ccbc <PrepareRxDoneAbort+0x48>)
 800cc8a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800cc92:	2000      	movs	r0, #0
 800cc94:	f001 f8f2 	bl	800de7c <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800cc98:	4a08      	ldr	r2, [pc, #32]	; (800ccbc <PrepareRxDoneAbort+0x48>)
 800cc9a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800cc9e:	f043 0302 	orr.w	r3, r3, #2
 800cca2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800cca6:	4a05      	ldr	r2, [pc, #20]	; (800ccbc <PrepareRxDoneAbort+0x48>)
 800cca8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ccac:	f043 0320 	orr.w	r3, r3, #32
 800ccb0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800ccb4:	f7ff ff2c 	bl	800cb10 <UpdateRxSlotIdleState>
}
 800ccb8:	bf00      	nop
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	20000644 	.word	0x20000644

0800ccc0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ccc0:	b5b0      	push	{r4, r5, r7, lr}
 800ccc2:	b0a6      	sub	sp, #152	; 0x98
 800ccc4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ccc6:	2313      	movs	r3, #19
 800ccc8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800cccc:	4bb9      	ldr	r3, [pc, #740]	; (800cfb4 <ProcessRadioRxDone+0x2f4>)
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800ccd2:	4bb8      	ldr	r3, [pc, #736]	; (800cfb4 <ProcessRadioRxDone+0x2f4>)
 800ccd4:	891b      	ldrh	r3, [r3, #8]
 800ccd6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800ccda:	4bb6      	ldr	r3, [pc, #728]	; (800cfb4 <ProcessRadioRxDone+0x2f4>)
 800ccdc:	895b      	ldrh	r3, [r3, #10]
 800ccde:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800cce2:	4bb4      	ldr	r3, [pc, #720]	; (800cfb4 <ProcessRadioRxDone+0x2f4>)
 800cce4:	7b1b      	ldrb	r3, [r3, #12]
 800cce6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ccf4:	4bb0      	ldr	r3, [pc, #704]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800ccf6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ccfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800cd0a:	4bac      	ldr	r3, [pc, #688]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800cd12:	4aaa      	ldr	r2, [pc, #680]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd14:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cd18:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800cd1c:	4aa7      	ldr	r2, [pc, #668]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cd22:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800cd26:	4ba5      	ldr	r3, [pc, #660]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd28:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800cd2c:	4ba3      	ldr	r3, [pc, #652]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd2e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800cd32:	4ba2      	ldr	r3, [pc, #648]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800cd3a:	4ba0      	ldr	r3, [pc, #640]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800cd42:	4b9e      	ldr	r3, [pc, #632]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800cd4a:	4b9c      	ldr	r3, [pc, #624]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800cd52:	4b9a      	ldr	r3, [pc, #616]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800cd5a:	4b98      	ldr	r3, [pc, #608]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800cd62:	4b96      	ldr	r3, [pc, #600]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800cd6a:	4b94      	ldr	r3, [pc, #592]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800cd72:	4b92      	ldr	r3, [pc, #584]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800cd7a:	4b90      	ldr	r3, [pc, #576]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800cd82:	4b8e      	ldr	r3, [pc, #568]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800cd8a:	4b8d      	ldr	r3, [pc, #564]	; (800cfc0 <ProcessRadioRxDone+0x300>)
 800cd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8e:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800cd90:	488c      	ldr	r0, [pc, #560]	; (800cfc4 <ProcessRadioRxDone+0x304>)
 800cd92:	f00c ff71 	bl	8019c78 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800cd96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cd9e:	f004 fbaa 	bl	80114f6 <LoRaMacClassBRxBeacon>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00a      	beq.n	800cdbe <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800cda8:	4a84      	ldr	r2, [pc, #528]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cdaa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cdae:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800cdb2:	4a82      	ldr	r2, [pc, #520]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cdb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cdb8:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800cdbc:	e3c7      	b.n	800d54e <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800cdbe:	4b7e      	ldr	r3, [pc, #504]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cdc0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d11e      	bne.n	800ce06 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800cdc8:	f004 fba8 	bl	801151c <LoRaMacClassBIsPingExpected>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	f004 fb59 	bl	801148a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800cdd8:	2000      	movs	r0, #0
 800cdda:	f004 fb7a 	bl	80114d2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800cdde:	4b77      	ldr	r3, [pc, #476]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cde0:	2204      	movs	r2, #4
 800cde2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800cde6:	e00e      	b.n	800ce06 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800cde8:	f004 fb9f 	bl	801152a <LoRaMacClassBIsMulticastExpected>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d009      	beq.n	800ce06 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	f004 fb53 	bl	801149e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	f004 fb73 	bl	80114e4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800cdfe:	4b6f      	ldr	r3, [pc, #444]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800ce00:	2205      	movs	r2, #5
 800ce02:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ce06:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800ce10:	461a      	mov	r2, r3
 800ce12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce14:	4413      	add	r3, r2
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800ce1c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ce20:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	2b06      	cmp	r3, #6
 800ce2a:	f200 836a 	bhi.w	800d502 <ProcessRadioRxDone+0x842>
 800ce2e:	a201      	add	r2, pc, #4	; (adr r2, 800ce34 <ProcessRadioRxDone+0x174>)
 800ce30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce34:	0800ce51 	.word	0x0800ce51
 800ce38:	0800d503 	.word	0x0800d503
 800ce3c:	0800cfd1 	.word	0x0800cfd1
 800ce40:	0800d503 	.word	0x0800d503
 800ce44:	0800cfc9 	.word	0x0800cfc9
 800ce48:	0800d503 	.word	0x0800d503
 800ce4c:	0800d4a9 	.word	0x0800d4a9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ce50:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ce54:	2b10      	cmp	r3, #16
 800ce56:	d806      	bhi.n	800ce66 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce58:	4b58      	ldr	r3, [pc, #352]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ce60:	f7ff ff08 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800ce64:	e373      	b.n	800d54e <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800ce66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce68:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800ce6a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ce72:	4b51      	ldr	r3, [pc, #324]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800ce74:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d006      	beq.n	800ce8a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce7c:	4b4f      	ldr	r3, [pc, #316]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ce84:	f7ff fef6 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800ce88:	e361      	b.n	800d54e <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ce8a:	f7fe fab3 	bl	800b3f4 <SecureElementGetJoinEui>
 800ce8e:	4601      	mov	r1, r0
 800ce90:	f107 0308 	add.w	r3, r7, #8
 800ce94:	461a      	mov	r2, r3
 800ce96:	20ff      	movs	r0, #255	; 0xff
 800ce98:	f005 fd14 	bl	80128c4 <LoRaMacCryptoHandleJoinAccept>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800cea2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d172      	bne.n	800cf90 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ceaa:	7c7b      	ldrb	r3, [r7, #17]
 800ceac:	461a      	mov	r2, r3
 800ceae:	4b42      	ldr	r3, [pc, #264]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800ceb0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ceb4:	4b40      	ldr	r3, [pc, #256]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800ceb6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ceba:	7cbb      	ldrb	r3, [r7, #18]
 800cebc:	021b      	lsls	r3, r3, #8
 800cebe:	4313      	orrs	r3, r2
 800cec0:	4a3d      	ldr	r2, [pc, #244]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cec2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800cec6:	4b3c      	ldr	r3, [pc, #240]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cec8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cecc:	7cfb      	ldrb	r3, [r7, #19]
 800cece:	041b      	lsls	r3, r3, #16
 800ced0:	4313      	orrs	r3, r2
 800ced2:	4a39      	ldr	r2, [pc, #228]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800ced4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	4a37      	ldr	r2, [pc, #220]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cedc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cee0:	7e3b      	ldrb	r3, [r7, #24]
 800cee2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	461a      	mov	r2, r3
 800ceea:	4b33      	ldr	r3, [pc, #204]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800ceec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cef0:	7e3b      	ldrb	r3, [r7, #24]
 800cef2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	461a      	mov	r2, r3
 800cefa:	4b2f      	ldr	r3, [pc, #188]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cefc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cf00:	7e3b      	ldrb	r3, [r7, #24]
 800cf02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4b2b      	ldr	r3, [pc, #172]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800cf10:	7e7b      	ldrb	r3, [r7, #25]
 800cf12:	461a      	mov	r2, r3
 800cf14:	4b28      	ldr	r3, [pc, #160]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf16:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cf18:	4b27      	ldr	r3, [pc, #156]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d102      	bne.n	800cf26 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cf20:	4b25      	ldr	r3, [pc, #148]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf22:	2201      	movs	r2, #1
 800cf24:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cf26:	4b24      	ldr	r3, [pc, #144]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf2e:	fb02 f303 	mul.w	r3, r2, r3
 800cf32:	4a21      	ldr	r2, [pc, #132]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf34:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cf36:	4b20      	ldr	r3, [pc, #128]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf3a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800cf3e:	4a1e      	ldr	r2, [pc, #120]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf40:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800cf42:	4b1d      	ldr	r3, [pc, #116]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800cf4a:	f107 0308 	add.w	r3, r7, #8
 800cf4e:	3312      	adds	r3, #18
 800cf50:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800cf52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	3b11      	subs	r3, #17
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800cf60:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf66:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f006 fa77 	bl	8013460 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cf72:	4b11      	ldr	r3, [pc, #68]	; (800cfb8 <ProcessRadioRxDone+0x2f8>)
 800cf74:	2202      	movs	r2, #2
 800cf76:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	f004 ff9a 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00e      	beq.n	800cfa4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800cf86:	2101      	movs	r1, #1
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f004 ff07 	bl	8011d9c <LoRaMacConfirmQueueSetStatus>
 800cf8e:	e009      	b.n	800cfa4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cf90:	2001      	movs	r0, #1
 800cf92:	f004 ff8f 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	2007      	movs	r0, #7
 800cfa0:	f004 fefc 	bl	8011d9c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800cfa4:	4a05      	ldr	r2, [pc, #20]	; (800cfbc <ProcessRadioRxDone+0x2fc>)
 800cfa6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800cfaa:	f043 0308 	orr.w	r3, r3, #8
 800cfae:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800cfb2:	e2ad      	b.n	800d510 <ProcessRadioRxDone+0x850>
 800cfb4:	200019a8 	.word	0x200019a8
 800cfb8:	20000b50 	.word	0x20000b50
 800cfbc:	20000644 	.word	0x20000644
 800cfc0:	0801b950 	.word	0x0801b950
 800cfc4:	200009dc 	.word	0x200009dc
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800cfc8:	4bb0      	ldr	r3, [pc, #704]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cfd0:	4baf      	ldr	r3, [pc, #700]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800cfd2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800cfd6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800cfda:	4bac      	ldr	r3, [pc, #688]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800cfdc:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800cfe0:	b25b      	sxtb	r3, r3
 800cfe2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800cfe6:	230d      	movs	r3, #13
 800cfe8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800cfec:	4ba8      	ldr	r3, [pc, #672]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800cfee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cff6:	230e      	movs	r3, #14
 800cff8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cffc:	4ba4      	ldr	r3, [pc, #656]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800cffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d002:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d006:	4611      	mov	r1, r2
 800d008:	4618      	mov	r0, r3
 800d00a:	f006 f9d7 	bl	80133bc <RegionGetPhyParam>
 800d00e:	4603      	mov	r3, r0
 800d010:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d012:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d016:	3b0d      	subs	r3, #13
 800d018:	b29b      	uxth	r3, r3
 800d01a:	b21b      	sxth	r3, r3
 800d01c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d020:	b21a      	sxth	r2, r3
 800d022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d024:	b21b      	sxth	r3, r3
 800d026:	429a      	cmp	r2, r3
 800d028:	dc03      	bgt.n	800d032 <ProcessRadioRxDone+0x372>
 800d02a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d02e:	2b0b      	cmp	r3, #11
 800d030:	d806      	bhi.n	800d040 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d032:	4b96      	ldr	r3, [pc, #600]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d034:	2201      	movs	r2, #1
 800d036:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d03a:	f7ff fe1b 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800d03e:	e286      	b.n	800d54e <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800d040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d042:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800d044:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d04e:	4b91      	ldr	r3, [pc, #580]	; (800d294 <ProcessRadioRxDone+0x5d4>)
 800d050:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d052:	23ff      	movs	r3, #255	; 0xff
 800d054:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d05c:	4618      	mov	r0, r3
 800d05e:	f005 ff30 	bl	8012ec2 <LoRaMacParserData>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d068:	4b88      	ldr	r3, [pc, #544]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d070:	f7ff fe00 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800d074:	e26b      	b.n	800d54e <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	4a84      	ldr	r2, [pc, #528]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d07a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d07e:	1cba      	adds	r2, r7, #2
 800d080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d084:	4611      	mov	r1, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f002 fc9e 	bl	800f9c8 <DetermineFrameType>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d006      	beq.n	800d0a0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d092:	4b7e      	ldr	r3, [pc, #504]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d094:	2201      	movs	r2, #1
 800d096:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d09a:	f7ff fdeb 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800d09e:	e256      	b.n	800d54e <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d0b0:	e049      	b.n	800d146 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d0b2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d0b6:	4a76      	ldr	r2, [pc, #472]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d0b8:	212c      	movs	r1, #44	; 0x2c
 800d0ba:	fb01 f303 	mul.w	r3, r1, r3
 800d0be:	4413      	add	r3, r2
 800d0c0:	33dc      	adds	r3, #220	; 0xdc
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d138      	bne.n	800d13c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d0ca:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d0ce:	4a70      	ldr	r2, [pc, #448]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d0d0:	212c      	movs	r1, #44	; 0x2c
 800d0d2:	fb01 f303 	mul.w	r3, r1, r3
 800d0d6:	4413      	add	r3, r2
 800d0d8:	33da      	adds	r3, #218	; 0xda
 800d0da:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d02d      	beq.n	800d13c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d0e6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d0ea:	4a69      	ldr	r2, [pc, #420]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d0ec:	212c      	movs	r1, #44	; 0x2c
 800d0ee:	fb01 f303 	mul.w	r3, r1, r3
 800d0f2:	4413      	add	r3, r2
 800d0f4:	33db      	adds	r3, #219	; 0xdb
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d0fc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d100:	4a63      	ldr	r2, [pc, #396]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d102:	212c      	movs	r1, #44	; 0x2c
 800d104:	fb01 f303 	mul.w	r3, r1, r3
 800d108:	4413      	add	r3, r2
 800d10a:	33f8      	adds	r3, #248	; 0xf8
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d112:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d116:	4a5e      	ldr	r2, [pc, #376]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d118:	212c      	movs	r1, #44	; 0x2c
 800d11a:	fb01 f303 	mul.w	r3, r1, r3
 800d11e:	4413      	add	r3, r2
 800d120:	33dc      	adds	r3, #220	; 0xdc
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d128:	4b59      	ldr	r3, [pc, #356]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d12a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d10e      	bne.n	800d150 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d132:	4b56      	ldr	r3, [pc, #344]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d134:	2203      	movs	r2, #3
 800d136:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800d13a:	e009      	b.n	800d150 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d13c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d140:	3301      	adds	r3, #1
 800d142:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d146:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0b1      	beq.n	800d0b2 <ProcessRadioRxDone+0x3f2>
 800d14e:	e000      	b.n	800d152 <ProcessRadioRxDone+0x492>
                    break;
 800d150:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d152:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d156:	2b01      	cmp	r3, #1
 800d158:	d117      	bne.n	800d18a <ProcessRadioRxDone+0x4ca>
 800d15a:	78bb      	ldrb	r3, [r7, #2]
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	d10d      	bne.n	800d17c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d160:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800d16e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d176:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d006      	beq.n	800d18a <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d17c:	4b43      	ldr	r3, [pc, #268]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d184:	f7ff fd76 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800d188:	e1e1      	b.n	800d54e <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d18a:	2315      	movs	r3, #21
 800d18c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d190:	4b3f      	ldr	r3, [pc, #252]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d196:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f006 f90d 	bl	80133bc <RegionGetPhyParam>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d1a6:	78b9      	ldrb	r1, [r7, #2]
 800d1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	4d38      	ldr	r5, [pc, #224]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d1ae:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d1b2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800d1b6:	1d3a      	adds	r2, r7, #4
 800d1b8:	9202      	str	r2, [sp, #8]
 800d1ba:	1cfa      	adds	r2, r7, #3
 800d1bc:	9201      	str	r2, [sp, #4]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	f000 fe8f 	bl	800dee8 <GetFCntDown>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d1d0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d035      	beq.n	800d244 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d1d8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d1dc:	2b07      	cmp	r3, #7
 800d1de:	d119      	bne.n	800d214 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d1e0:	4b2a      	ldr	r3, [pc, #168]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d1e2:	2208      	movs	r2, #8
 800d1e4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800d1e8:	4b29      	ldr	r3, [pc, #164]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d1ea:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d11d      	bne.n	800d22e <ProcessRadioRxDone+0x56e>
 800d1f2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d1f6:	f023 031f 	bic.w	r3, r3, #31
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2ba0      	cmp	r3, #160	; 0xa0
 800d1fe:	d116      	bne.n	800d22e <ProcessRadioRxDone+0x56e>
 800d200:	4b23      	ldr	r3, [pc, #140]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d206:	429a      	cmp	r2, r3
 800d208:	d111      	bne.n	800d22e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800d20a:	4b21      	ldr	r3, [pc, #132]	; (800d290 <ProcessRadioRxDone+0x5d0>)
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800d212:	e00c      	b.n	800d22e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800d214:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d218:	2b08      	cmp	r3, #8
 800d21a:	d104      	bne.n	800d226 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800d21c:	4b1b      	ldr	r3, [pc, #108]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d21e:	220a      	movs	r2, #10
 800d220:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d224:	e003      	b.n	800d22e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d226:	4b19      	ldr	r3, [pc, #100]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a16      	ldr	r2, [pc, #88]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d232:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a14      	ldr	r2, [pc, #80]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d23a:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800d23e:	f7ff fd19 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800d242:	e184      	b.n	800d54e <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d244:	78fa      	ldrb	r2, [r7, #3]
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800d24c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	460b      	mov	r3, r1
 800d254:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d258:	f005 fc80 	bl	8012b5c <LoRaMacCryptoUnsecureMessage>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d262:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d266:	2b00      	cmp	r3, #0
 800d268:	d016      	beq.n	800d298 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d26a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d104      	bne.n	800d27c <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d272:	4b06      	ldr	r3, [pc, #24]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d274:	220b      	movs	r2, #11
 800d276:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d27a:	e003      	b.n	800d284 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d27c:	4b03      	ldr	r3, [pc, #12]	; (800d28c <ProcessRadioRxDone+0x5cc>)
 800d27e:	220c      	movs	r2, #12
 800d280:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800d284:	f7ff fcf6 	bl	800cc74 <PrepareRxDoneAbort>
                return;
 800d288:	e161      	b.n	800d54e <ProcessRadioRxDone+0x88e>
 800d28a:	bf00      	nop
 800d28c:	20000644 	.word	0x20000644
 800d290:	20000b50 	.word	0x20000b50
 800d294:	2000087c 	.word	0x2000087c
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d298:	4bae      	ldr	r3, [pc, #696]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800d2a0:	4aac      	ldr	r2, [pc, #688]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d2a6:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800d2aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d2ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4ba7      	ldr	r3, [pc, #668]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2b8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800d2bc:	4ba5      	ldr	r3, [pc, #660]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800d2c4:	4ba3      	ldr	r3, [pc, #652]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4aa1      	ldr	r2, [pc, #644]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2d0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a9f      	ldr	r2, [pc, #636]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2d8:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d2dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d2e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bf14      	ite	ne
 800d2ea:	2301      	movne	r3, #1
 800d2ec:	2300      	moveq	r3, #0
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	4b98      	ldr	r3, [pc, #608]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2f2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d2f6:	4b97      	ldr	r3, [pc, #604]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d2fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d302:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bf14      	ite	ne
 800d30c:	2301      	movne	r3, #1
 800d30e:	2300      	moveq	r3, #0
 800d310:	b2da      	uxtb	r2, r3
 800d312:	4b90      	ldr	r3, [pc, #576]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d314:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d318:	4b8e      	ldr	r3, [pc, #568]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d31a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d004      	beq.n	800d32c <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d322:	4b8c      	ldr	r3, [pc, #560]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d324:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d102      	bne.n	800d332 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d32c:	4b8a      	ldr	r3, [pc, #552]	; (800d558 <ProcessRadioRxDone+0x898>)
 800d32e:	2200      	movs	r2, #0
 800d330:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d332:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d336:	2b01      	cmp	r3, #1
 800d338:	d104      	bne.n	800d344 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d33a:	4b86      	ldr	r3, [pc, #536]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d33c:	2202      	movs	r2, #2
 800d33e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d342:	e01f      	b.n	800d384 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d344:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d348:	f023 031f 	bic.w	r3, r3, #31
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	2ba0      	cmp	r3, #160	; 0xa0
 800d350:	d110      	bne.n	800d374 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d352:	4b81      	ldr	r3, [pc, #516]	; (800d558 <ProcessRadioRxDone+0x898>)
 800d354:	2201      	movs	r2, #1
 800d356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d35a:	4b7f      	ldr	r3, [pc, #508]	; (800d558 <ProcessRadioRxDone+0x898>)
 800d35c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800d360:	2b00      	cmp	r3, #0
 800d362:	d102      	bne.n	800d36a <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d366:	4a7c      	ldr	r2, [pc, #496]	; (800d558 <ProcessRadioRxDone+0x898>)
 800d368:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d36a:	4b7a      	ldr	r3, [pc, #488]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d36c:	2201      	movs	r2, #1
 800d36e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d372:	e007      	b.n	800d384 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d374:	4b78      	ldr	r3, [pc, #480]	; (800d558 <ProcessRadioRxDone+0x898>)
 800d376:	2200      	movs	r2, #0
 800d378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d37c:	4b75      	ldr	r3, [pc, #468]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d384:	4b73      	ldr	r3, [pc, #460]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d386:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d38a:	4a72      	ldr	r2, [pc, #456]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d38c:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800d390:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800d394:	4618      	mov	r0, r3
 800d396:	f001 fee9 	bl	800f16c <RemoveMacCommands>

            switch( fType )
 800d39a:	78bb      	ldrb	r3, [r7, #2]
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	d874      	bhi.n	800d48a <ProcessRadioRxDone+0x7ca>
 800d3a0:	a201      	add	r2, pc, #4	; (adr r2, 800d3a8 <ProcessRadioRxDone+0x6e8>)
 800d3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a6:	bf00      	nop
 800d3a8:	0800d3b9 	.word	0x0800d3b9
 800d3ac:	0800d409 	.word	0x0800d409
 800d3b0:	0800d43f 	.word	0x0800d43f
 800d3b4:	0800d465 	.word	0x0800d465
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d3b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	461c      	mov	r4, r3
 800d3c4:	4b63      	ldr	r3, [pc, #396]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d3c6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d3ca:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d3ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3d2:	f102 0010 	add.w	r0, r2, #16
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4622      	mov	r2, r4
 800d3dc:	2100      	movs	r1, #0
 800d3de:	f000 fee5 	bl	800e1ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d3e2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d3e6:	4b5b      	ldr	r3, [pc, #364]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d3e8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ee:	4a59      	ldr	r2, [pc, #356]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d3f0:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d3f4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d3f8:	4b56      	ldr	r3, [pc, #344]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d3fa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d3fe:	4b55      	ldr	r3, [pc, #340]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d406:	e047      	b.n	800d498 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d408:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d40c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d410:	b2db      	uxtb	r3, r3
 800d412:	461c      	mov	r4, r3
 800d414:	4b4f      	ldr	r3, [pc, #316]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d416:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d41a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d41e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d422:	f102 0010 	add.w	r0, r2, #16
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	460b      	mov	r3, r1
 800d42a:	4622      	mov	r2, r4
 800d42c:	2100      	movs	r1, #0
 800d42e:	f000 febd 	bl	800e1ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d432:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d436:	4b47      	ldr	r3, [pc, #284]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d438:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d43c:	e02c      	b.n	800d498 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d43e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d440:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d444:	4b43      	ldr	r3, [pc, #268]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d446:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d44a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	460b      	mov	r3, r1
 800d452:	2100      	movs	r1, #0
 800d454:	f000 feaa 	bl	800e1ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d458:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d45c:	4b3d      	ldr	r3, [pc, #244]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d45e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d462:	e019      	b.n	800d498 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d464:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d468:	4b3a      	ldr	r3, [pc, #232]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d46a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d46e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d470:	4a38      	ldr	r2, [pc, #224]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d472:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d476:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d47a:	4b36      	ldr	r3, [pc, #216]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d47c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d480:	4b34      	ldr	r3, [pc, #208]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d488:	e006      	b.n	800d498 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d48a:	4b32      	ldr	r3, [pc, #200]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800d492:	f7ff fbef 	bl	800cc74 <PrepareRxDoneAbort>
                    break;
 800d496:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d498:	4a2e      	ldr	r2, [pc, #184]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d49a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d49e:	f043 0302 	orr.w	r3, r3, #2
 800d4a2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800d4a6:	e033      	b.n	800d510 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d4a8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d4ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d4ae:	18d1      	adds	r1, r2, r3
 800d4b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d4ba:	1ad3      	subs	r3, r2, r3
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4826      	ldr	r0, [pc, #152]	; (800d55c <ProcessRadioRxDone+0x89c>)
 800d4c2:	f008 fa8e 	bl	80159e2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d4c6:	4b23      	ldr	r3, [pc, #140]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d4c8:	2203      	movs	r2, #3
 800d4ca:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d4ce:	4b21      	ldr	r3, [pc, #132]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d4d6:	4b1f      	ldr	r3, [pc, #124]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d4d8:	4a20      	ldr	r2, [pc, #128]	; (800d55c <ProcessRadioRxDone+0x89c>)
 800d4da:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d4de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	4b19      	ldr	r3, [pc, #100]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d4ee:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d4f2:	4a18      	ldr	r2, [pc, #96]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d4f4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d4f8:	f043 0302 	orr.w	r3, r3, #2
 800d4fc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800d500:	e006      	b.n	800d510 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d502:	4b14      	ldr	r3, [pc, #80]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d504:	2201      	movs	r2, #1
 800d506:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800d50a:	f7ff fbb3 	bl	800cc74 <PrepareRxDoneAbort>
            break;
 800d50e:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d510:	4b10      	ldr	r3, [pc, #64]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d512:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d516:	2b00      	cmp	r3, #0
 800d518:	d008      	beq.n	800d52c <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d51a:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d51c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00b      	beq.n	800d53c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d524:	2000      	movs	r0, #0
 800d526:	f000 fca9 	bl	800de7c <OnAckTimeoutTimerEvent>
 800d52a:	e007      	b.n	800d53c <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d52c:	4b0a      	ldr	r3, [pc, #40]	; (800d558 <ProcessRadioRxDone+0x898>)
 800d52e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d532:	2b02      	cmp	r3, #2
 800d534:	d102      	bne.n	800d53c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d536:	2000      	movs	r0, #0
 800d538:	f000 fca0 	bl	800de7c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d53c:	4a05      	ldr	r2, [pc, #20]	; (800d554 <ProcessRadioRxDone+0x894>)
 800d53e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d542:	f043 0320 	orr.w	r3, r3, #32
 800d546:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800d54a:	f7ff fae1 	bl	800cb10 <UpdateRxSlotIdleState>
}
 800d54e:	3788      	adds	r7, #136	; 0x88
 800d550:	46bd      	mov	sp, r7
 800d552:	bdb0      	pop	{r4, r5, r7, pc}
 800d554:	20000644 	.word	0x20000644
 800d558:	20000b50 	.word	0x20000b50
 800d55c:	2000087c 	.word	0x2000087c

0800d560 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d564:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <ProcessRadioTxTimeout+0x4c>)
 800d566:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d002      	beq.n	800d574 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800d56e:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <ProcessRadioTxTimeout+0x50>)
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800d574:	f7ff facc 	bl	800cb10 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d578:	4b0e      	ldr	r3, [pc, #56]	; (800d5b4 <ProcessRadioTxTimeout+0x54>)
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d580:	2002      	movs	r0, #2
 800d582:	f004 fc63 	bl	8011e4c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d586:	4b0b      	ldr	r3, [pc, #44]	; (800d5b4 <ProcessRadioTxTimeout+0x54>)
 800d588:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d003      	beq.n	800d598 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800d590:	4b08      	ldr	r3, [pc, #32]	; (800d5b4 <ProcessRadioTxTimeout+0x54>)
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d598:	4a06      	ldr	r2, [pc, #24]	; (800d5b4 <ProcessRadioTxTimeout+0x54>)
 800d59a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d59e:	f043 0320 	orr.w	r3, r3, #32
 800d5a2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800d5a6:	bf00      	nop
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20000b50 	.word	0x20000b50
 800d5b0:	0801b950 	.word	0x0801b950
 800d5b4:	20000644 	.word	0x20000644

0800d5b8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	4603      	mov	r3, r0
 800d5c0:	460a      	mov	r2, r1
 800d5c2:	71fb      	strb	r3, [r7, #7]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d5cc:	4b40      	ldr	r3, [pc, #256]	; (800d6d0 <HandleRadioRxErrorTimeout+0x118>)
 800d5ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d002      	beq.n	800d5dc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800d5d6:	4b3f      	ldr	r3, [pc, #252]	; (800d6d4 <HandleRadioRxErrorTimeout+0x11c>)
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d5dc:	f003 ff97 	bl	801150e <LoRaMacClassBIsBeaconExpected>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d007      	beq.n	800d5f6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d5e6:	2002      	movs	r0, #2
 800d5e8:	f003 ff45 	bl	8011476 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f003 ff67 	bl	80114c0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d5f6:	4b36      	ldr	r3, [pc, #216]	; (800d6d0 <HandleRadioRxErrorTimeout+0x118>)
 800d5f8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d119      	bne.n	800d634 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d600:	f003 ff8c 	bl	801151c <LoRaMacClassBIsPingExpected>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d007      	beq.n	800d61a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d60a:	2000      	movs	r0, #0
 800d60c:	f003 ff3d 	bl	801148a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d610:	2000      	movs	r0, #0
 800d612:	f003 ff5e 	bl	80114d2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d616:	2301      	movs	r3, #1
 800d618:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d61a:	f003 ff86 	bl	801152a <LoRaMacClassBIsMulticastExpected>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d007      	beq.n	800d634 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d624:	2000      	movs	r0, #0
 800d626:	f003 ff3a 	bl	801149e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d62a:	2000      	movs	r0, #0
 800d62c:	f003 ff5a 	bl	80114e4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800d630:	2301      	movs	r3, #1
 800d632:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800d634:	7bfb      	ldrb	r3, [r7, #15]
 800d636:	f083 0301 	eor.w	r3, r3, #1
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d040      	beq.n	800d6c2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d640:	4b25      	ldr	r3, [pc, #148]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d642:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800d646:	2b00      	cmp	r3, #0
 800d648:	d122      	bne.n	800d690 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800d64a:	4b23      	ldr	r3, [pc, #140]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d64c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d650:	2b00      	cmp	r3, #0
 800d652:	d003      	beq.n	800d65c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d654:	4a20      	ldr	r2, [pc, #128]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d65c:	79fb      	ldrb	r3, [r7, #7]
 800d65e:	4618      	mov	r0, r3
 800d660:	f004 fbf4 	bl	8011e4c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d664:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <HandleRadioRxErrorTimeout+0x118>)
 800d666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d668:	4618      	mov	r0, r3
 800d66a:	f00c fc31 	bl	8019ed0 <UTIL_TIMER_GetElapsedTime>
 800d66e:	4602      	mov	r2, r0
 800d670:	4b19      	ldr	r3, [pc, #100]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d672:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d676:	429a      	cmp	r2, r3
 800d678:	d323      	bcc.n	800d6c2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d67a:	4818      	ldr	r0, [pc, #96]	; (800d6dc <HandleRadioRxErrorTimeout+0x124>)
 800d67c:	f00c fafc 	bl	8019c78 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d680:	4a15      	ldr	r2, [pc, #84]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d682:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d686:	f043 0320 	orr.w	r3, r3, #32
 800d68a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800d68e:	e018      	b.n	800d6c2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800d690:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d692:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d696:	2b00      	cmp	r3, #0
 800d698:	d003      	beq.n	800d6a2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d69a:	4a0f      	ldr	r2, [pc, #60]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d69c:	79bb      	ldrb	r3, [r7, #6]
 800d69e:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d6a2:	79bb      	ldrb	r3, [r7, #6]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f004 fbd1 	bl	8011e4c <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d6aa:	4b09      	ldr	r3, [pc, #36]	; (800d6d0 <HandleRadioRxErrorTimeout+0x118>)
 800d6ac:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d006      	beq.n	800d6c2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d6b4:	4a08      	ldr	r2, [pc, #32]	; (800d6d8 <HandleRadioRxErrorTimeout+0x120>)
 800d6b6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d6ba:	f043 0320 	orr.w	r3, r3, #32
 800d6be:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800d6c2:	f7ff fa25 	bl	800cb10 <UpdateRxSlotIdleState>
}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20000b50 	.word	0x20000b50
 800d6d4:	0801b950 	.word	0x0801b950
 800d6d8:	20000644 	.word	0x20000644
 800d6dc:	200009dc 	.word	0x200009dc

0800d6e0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d6e4:	2106      	movs	r1, #6
 800d6e6:	2005      	movs	r0, #5
 800d6e8:	f7ff ff66 	bl	800d5b8 <HandleRadioRxErrorTimeout>
}
 800d6ec:	bf00      	nop
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d6f4:	2104      	movs	r1, #4
 800d6f6:	2003      	movs	r0, #3
 800d6f8:	f7ff ff5e 	bl	800d5b8 <HandleRadioRxErrorTimeout>
}
 800d6fc:	bf00      	nop
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d706:	f3ef 8310 	mrs	r3, PRIMASK
 800d70a:	607b      	str	r3, [r7, #4]
  return(result);
 800d70c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800d70e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d710:	b672      	cpsid	i
}
 800d712:	bf00      	nop
    events = LoRaMacRadioEvents;
 800d714:	4b1d      	ldr	r3, [pc, #116]	; (800d78c <LoRaMacHandleIrqEvents+0x8c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800d71a:	4b1c      	ldr	r3, [pc, #112]	; (800d78c <LoRaMacHandleIrqEvents+0x8c>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	601a      	str	r2, [r3, #0]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	f383 8810 	msr	PRIMASK, r3
}
 800d72a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d027      	beq.n	800d782 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800d732:	783b      	ldrb	r3, [r7, #0]
 800d734:	f003 0310 	and.w	r3, r3, #16
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800d73e:	f7ff f9ff 	bl	800cb40 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800d742:	783b      	ldrb	r3, [r7, #0]
 800d744:	f003 0308 	and.w	r3, r3, #8
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800d74e:	f7ff fab7 	bl	800ccc0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800d752:	783b      	ldrb	r3, [r7, #0]
 800d754:	f003 0304 	and.w	r3, r3, #4
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800d75e:	f7ff feff 	bl	800d560 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800d762:	783b      	ldrb	r3, [r7, #0]
 800d764:	f003 0302 	and.w	r3, r3, #2
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800d76e:	f7ff ffb7 	bl	800d6e0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800d772:	783b      	ldrb	r3, [r7, #0]
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800d77e:	f7ff ffb7 	bl	800d6f0 <ProcessRadioRxTimeout>
        }
    }
}
 800d782:	bf00      	nop
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	200019a0 	.word	0x200019a0

0800d790 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800d790:	b480      	push	{r7}
 800d792:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d794:	4b08      	ldr	r3, [pc, #32]	; (800d7b8 <LoRaMacIsBusy+0x28>)
 800d796:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d106      	bne.n	800d7ac <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d79e:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <LoRaMacIsBusy+0x28>)
 800d7a0:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d101      	bne.n	800d7ac <LoRaMacIsBusy+0x1c>
    {
        return false;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	e000      	b.n	800d7ae <LoRaMacIsBusy+0x1e>
    }
    return true;
 800d7ac:	2301      	movs	r3, #1
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bc80      	pop	{r7}
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	20000644 	.word	0x20000644

0800d7bc <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800d7c6:	4a04      	ldr	r2, [pc, #16]	; (800d7d8 <LoRaMacEnableRequests+0x1c>)
 800d7c8:	79fb      	ldrb	r3, [r7, #7]
 800d7ca:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800d7ce:	bf00      	nop
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bc80      	pop	{r7}
 800d7d6:	4770      	bx	lr
 800d7d8:	20000644 	.word	0x20000644

0800d7dc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800d7e2:	4b2c      	ldr	r3, [pc, #176]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d7e4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d7e8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800d7ea:	4b2a      	ldr	r3, [pc, #168]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d7ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d14a      	bne.n	800d88a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d7f4:	4b27      	ldr	r3, [pc, #156]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d7f6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d006      	beq.n	800d812 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d804:	4a23      	ldr	r2, [pc, #140]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d806:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d80a:	f36f 0300 	bfc	r3, #0, #1
 800d80e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d812:	4b20      	ldr	r3, [pc, #128]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d814:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d818:	f003 0304 	and.w	r3, r3, #4
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d006      	beq.n	800d830 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d822:	4a1c      	ldr	r2, [pc, #112]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d824:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d828:	f36f 0382 	bfc	r3, #2, #1
 800d82c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d830:	2001      	movs	r0, #1
 800d832:	f7ff ffc3 	bl	800d7bc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800d836:	793b      	ldrb	r3, [r7, #4]
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d005      	beq.n	800d84e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d842:	4b14      	ldr	r3, [pc, #80]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d844:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4813      	ldr	r0, [pc, #76]	; (800d898 <LoRaMacHandleRequestEvents+0xbc>)
 800d84c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800d84e:	793b      	ldrb	r3, [r7, #4]
 800d850:	f003 0304 	and.w	r3, r3, #4
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00e      	beq.n	800d878 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d85a:	4810      	ldr	r0, [pc, #64]	; (800d89c <LoRaMacHandleRequestEvents+0xc0>)
 800d85c:	f004 fb44 	bl	8011ee8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d860:	f004 fb8e 	bl	8011f80 <LoRaMacConfirmQueueGetCnt>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d006      	beq.n	800d878 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d86a:	4a0a      	ldr	r2, [pc, #40]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d86c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d870:	f043 0304 	orr.w	r3, r3, #4
 800d874:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800d878:	f003 fe75 	bl	8011566 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d87c:	4a05      	ldr	r2, [pc, #20]	; (800d894 <LoRaMacHandleRequestEvents+0xb8>)
 800d87e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d882:	f36f 1345 	bfc	r3, #5, #1
 800d886:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20000644 	.word	0x20000644
 800d898:	20000a7c 	.word	0x20000a7c
 800d89c:	20000a90 	.word	0x20000a90

0800d8a0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d8a6:	4b07      	ldr	r3, [pc, #28]	; (800d8c4 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800d8a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d105      	bne.n	800d8bc <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800d8b4:	1dfb      	adds	r3, r7, #7
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f004 f8fc 	bl	8011ab4 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	20000644 	.word	0x20000644

0800d8c8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800d8cc:	4b16      	ldr	r3, [pc, #88]	; (800d928 <LoRaMacHandleIndicationEvents+0x60>)
 800d8ce:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d8d2:	f003 0308 	and.w	r3, r3, #8
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00d      	beq.n	800d8f8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800d8dc:	4a12      	ldr	r2, [pc, #72]	; (800d928 <LoRaMacHandleIndicationEvents+0x60>)
 800d8de:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d8e2:	f36f 03c3 	bfc	r3, #3, #1
 800d8e6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800d8ea:	4b0f      	ldr	r3, [pc, #60]	; (800d928 <LoRaMacHandleIndicationEvents+0x60>)
 800d8ec:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	490e      	ldr	r1, [pc, #56]	; (800d92c <LoRaMacHandleIndicationEvents+0x64>)
 800d8f4:	480e      	ldr	r0, [pc, #56]	; (800d930 <LoRaMacHandleIndicationEvents+0x68>)
 800d8f6:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d8f8:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <LoRaMacHandleIndicationEvents+0x60>)
 800d8fa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d8fe:	f003 0302 	and.w	r3, r3, #2
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00d      	beq.n	800d924 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800d908:	4a07      	ldr	r2, [pc, #28]	; (800d928 <LoRaMacHandleIndicationEvents+0x60>)
 800d90a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d90e:	f36f 0341 	bfc	r3, #1, #1
 800d912:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800d916:	4b04      	ldr	r3, [pc, #16]	; (800d928 <LoRaMacHandleIndicationEvents+0x60>)
 800d918:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	4903      	ldr	r1, [pc, #12]	; (800d92c <LoRaMacHandleIndicationEvents+0x64>)
 800d920:	4804      	ldr	r0, [pc, #16]	; (800d934 <LoRaMacHandleIndicationEvents+0x6c>)
 800d922:	4798      	blx	r3
    }
}
 800d924:	bf00      	nop
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20000644 	.word	0x20000644
 800d92c:	20000ac4 	.word	0x20000ac4
 800d930:	20000aa4 	.word	0x20000aa4
 800d934:	20000a60 	.word	0x20000a60

0800d938 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d93e:	4b32      	ldr	r3, [pc, #200]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d940:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d058      	beq.n	800da00 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800d94e:	2300      	movs	r3, #0
 800d950:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800d952:	2300      	movs	r3, #0
 800d954:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d956:	4b2c      	ldr	r3, [pc, #176]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d958:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d004      	beq.n	800d96a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800d960:	4b29      	ldr	r3, [pc, #164]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d962:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d966:	2b03      	cmp	r3, #3
 800d968:	d104      	bne.n	800d974 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d96a:	f002 f87b 	bl	800fa64 <CheckRetransUnconfirmedUplink>
 800d96e:	4603      	mov	r3, r0
 800d970:	71fb      	strb	r3, [r7, #7]
 800d972:	e020      	b.n	800d9b6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d974:	4b24      	ldr	r3, [pc, #144]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d976:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d11b      	bne.n	800d9b6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800d97e:	4b22      	ldr	r3, [pc, #136]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d980:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800d984:	2b00      	cmp	r3, #0
 800d986:	d014      	beq.n	800d9b2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d988:	f002 f898 	bl	800fabc <CheckRetransConfirmedUplink>
 800d98c:	4603      	mov	r3, r0
 800d98e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d990:	4b1e      	ldr	r3, [pc, #120]	; (800da0c <LoRaMacHandleMcpsRequest+0xd4>)
 800d992:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10d      	bne.n	800d9b6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	f083 0301 	eor.w	r3, r3, #1
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800d9a6:	f002 f905 	bl	800fbb4 <AckTimeoutRetriesProcess>
 800d9aa:	e004      	b.n	800d9b6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800d9ac:	f002 f940 	bl	800fc30 <AckTimeoutRetriesFinalize>
 800d9b0:	e001      	b.n	800d9b6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800d9b6:	79fb      	ldrb	r3, [r7, #7]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00d      	beq.n	800d9d8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800d9bc:	4814      	ldr	r0, [pc, #80]	; (800da10 <LoRaMacHandleMcpsRequest+0xd8>)
 800d9be:	f00c f95b 	bl	8019c78 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d9c2:	4b11      	ldr	r3, [pc, #68]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d9c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d9c8:	f023 0320 	bic.w	r3, r3, #32
 800d9cc:	4a0e      	ldr	r2, [pc, #56]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d9ce:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800d9d2:	f002 f895 	bl	800fb00 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800d9d6:	e013      	b.n	800da00 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800d9d8:	79bb      	ldrb	r3, [r7, #6]
 800d9da:	f083 0301 	eor.w	r3, r3, #1
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00d      	beq.n	800da00 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d9e4:	4a08      	ldr	r2, [pc, #32]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d9e6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d9ea:	f36f 1345 	bfc	r3, #5, #1
 800d9ee:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800d9f2:	4b05      	ldr	r3, [pc, #20]	; (800da08 <LoRaMacHandleMcpsRequest+0xd0>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	f000 f994 	bl	800dd28 <OnTxDelayedTimerEvent>
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	20000644 	.word	0x20000644
 800da0c:	20000b50 	.word	0x20000b50
 800da10:	200009ac 	.word	0x200009ac

0800da14 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800da18:	4b1b      	ldr	r3, [pc, #108]	; (800da88 <LoRaMacHandleMlmeRequest+0x74>)
 800da1a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800da1e:	f003 0304 	and.w	r3, r3, #4
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b00      	cmp	r3, #0
 800da26:	d02c      	beq.n	800da82 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800da28:	2001      	movs	r0, #1
 800da2a:	f004 fa43 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d012      	beq.n	800da5a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800da34:	2001      	movs	r0, #1
 800da36:	f004 f9df 	bl	8011df8 <LoRaMacConfirmQueueGetStatus>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d103      	bne.n	800da48 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800da40:	4b11      	ldr	r3, [pc, #68]	; (800da88 <LoRaMacHandleMlmeRequest+0x74>)
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <LoRaMacHandleMlmeRequest+0x74>)
 800da4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da4e:	f023 0302 	bic.w	r3, r3, #2
 800da52:	4a0d      	ldr	r2, [pc, #52]	; (800da88 <LoRaMacHandleMlmeRequest+0x74>)
 800da54:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800da58:	e013      	b.n	800da82 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800da5a:	2005      	movs	r0, #5
 800da5c:	f004 fa2a 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d105      	bne.n	800da72 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800da66:	2006      	movs	r0, #6
 800da68:	f004 fa24 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800da6c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d007      	beq.n	800da82 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800da72:	4b05      	ldr	r3, [pc, #20]	; (800da88 <LoRaMacHandleMlmeRequest+0x74>)
 800da74:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da78:	f023 0302 	bic.w	r3, r3, #2
 800da7c:	4a02      	ldr	r2, [pc, #8]	; (800da88 <LoRaMacHandleMlmeRequest+0x74>)
 800da7e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800da82:	bf00      	nop
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20000644 	.word	0x20000644

0800da8c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800da90:	200c      	movs	r0, #12
 800da92:	f004 fa0f 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d019      	beq.n	800dad0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800da9c:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800da9e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d111      	bne.n	800dad0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800daac:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800daae:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800dab2:	f003 0304 	and.w	r3, r3, #4
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d009      	beq.n	800dad0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dabc:	4b06      	ldr	r3, [pc, #24]	; (800dad8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dabe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dac2:	f023 0302 	bic.w	r3, r3, #2
 800dac6:	4a04      	ldr	r2, [pc, #16]	; (800dad8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dac8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800dacc:	2301      	movs	r3, #1
 800dace:	e000      	b.n	800dad2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20000644 	.word	0x20000644

0800dadc <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800dae0:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <LoRaMacCheckForRxAbort+0x3c>)
 800dae2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00f      	beq.n	800db0e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800daee:	4b0a      	ldr	r3, [pc, #40]	; (800db18 <LoRaMacCheckForRxAbort+0x3c>)
 800daf0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800daf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daf8:	4a07      	ldr	r2, [pc, #28]	; (800db18 <LoRaMacCheckForRxAbort+0x3c>)
 800dafa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dafe:	4b06      	ldr	r3, [pc, #24]	; (800db18 <LoRaMacCheckForRxAbort+0x3c>)
 800db00:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db04:	f023 0302 	bic.w	r3, r3, #2
 800db08:	4a03      	ldr	r2, [pc, #12]	; (800db18 <LoRaMacCheckForRxAbort+0x3c>)
 800db0a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800db0e:	bf00      	nop
 800db10:	46bd      	mov	sp, r7
 800db12:	bc80      	pop	{r7}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	20000644 	.word	0x20000644

0800db1c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800db28:	2300      	movs	r3, #0
 800db2a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800db2c:	4b50      	ldr	r3, [pc, #320]	; (800dc70 <LoRaMacHandleNvm+0x154>)
 800db2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db32:	2b00      	cmp	r3, #0
 800db34:	f040 8098 	bne.w	800dc68 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2124      	movs	r1, #36	; 0x24
 800db3c:	4618      	mov	r0, r3
 800db3e:	f007 ffa5 	bl	8015a8c <Crc32>
 800db42:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d006      	beq.n	800db5c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800db54:	89fb      	ldrh	r3, [r7, #14]
 800db56:	f043 0301 	orr.w	r3, r3, #1
 800db5a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	3328      	adds	r3, #40	; 0x28
 800db60:	2114      	movs	r1, #20
 800db62:	4618      	mov	r0, r3
 800db64:	f007 ff92 	bl	8015a8c <Crc32>
 800db68:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	429a      	cmp	r2, r3
 800db72:	d006      	beq.n	800db82 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800db7a:	89fb      	ldrh	r3, [r7, #14]
 800db7c:	f043 0302 	orr.w	r3, r3, #2
 800db80:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3340      	adds	r3, #64	; 0x40
 800db86:	21dc      	movs	r1, #220	; 0xdc
 800db88:	4618      	mov	r0, r3
 800db8a:	f007 ff7f 	bl	8015a8c <Crc32>
 800db8e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800db96:	68ba      	ldr	r2, [r7, #8]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d007      	beq.n	800dbac <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800dba4:	89fb      	ldrh	r3, [r7, #14]
 800dba6:	f043 0304 	orr.w	r3, r3, #4
 800dbaa:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800dbb2:	21bc      	movs	r1, #188	; 0xbc
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f007 ff69 	bl	8015a8c <Crc32>
 800dbba:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d007      	beq.n	800dbd8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800dbd0:	89fb      	ldrh	r3, [r7, #14]
 800dbd2:	f043 0308 	orr.w	r3, r3, #8
 800dbd6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800dbde:	2190      	movs	r1, #144	; 0x90
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f007 ff53 	bl	8015a8c <Crc32>
 800dbe6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d007      	beq.n	800dc04 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800dbfc:	89fb      	ldrh	r3, [r7, #14]
 800dbfe:	f043 0310 	orr.w	r3, r3, #16
 800dc02:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800dc0a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f007 ff3c 	bl	8015a8c <Crc32>
 800dc14:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d007      	beq.n	800dc32 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800dc2a:	89fb      	ldrh	r3, [r7, #14]
 800dc2c:	f043 0320 	orr.w	r3, r3, #32
 800dc30:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800dc38:	2114      	movs	r1, #20
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f007 ff26 	bl	8015a8c <Crc32>
 800dc40:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d007      	beq.n	800dc5e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800dc56:	89fb      	ldrh	r3, [r7, #14]
 800dc58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc5c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800dc5e:	89fb      	ldrh	r3, [r7, #14]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f001 ff89 	bl	800fb78 <CallNvmDataChangeCallback>
 800dc66:	e000      	b.n	800dc6a <LoRaMacHandleNvm+0x14e>
        return;
 800dc68:	bf00      	nop
}
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20000644 	.word	0x20000644

0800dc74 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800dc7e:	f7ff fd3f 	bl	800d700 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800dc82:	f003 fcd4 	bl	801162e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800dc86:	4b26      	ldr	r3, [pc, #152]	; (800dd20 <LoRaMacProcess+0xac>)
 800dc88:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800dc8c:	f003 0320 	and.w	r3, r3, #32
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d025      	beq.n	800dce2 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800dc96:	2000      	movs	r0, #0
 800dc98:	f7ff fd90 	bl	800d7bc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800dc9c:	f7ff ff1e 	bl	800dadc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800dca0:	f001 fffa 	bl	800fc98 <IsRequestPending>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d006      	beq.n	800dcb8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800dcaa:	f7ff feef 	bl	800da8c <LoRaMacCheckForBeaconAcquisition>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800dcbe:	f7ff fea9 	bl	800da14 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800dcc2:	f7ff fe39 	bl	800d938 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800dcc6:	f7ff fd89 	bl	800d7dc <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800dcca:	f7ff fde9 	bl	800d8a0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dcce:	2001      	movs	r0, #1
 800dcd0:	f7ff fd74 	bl	800d7bc <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800dcd4:	4a12      	ldr	r2, [pc, #72]	; (800dd20 <LoRaMacProcess+0xac>)
 800dcd6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800dcda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcde:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 800dce2:	f7ff fdf1 	bl	800d8c8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800dce6:	4b0e      	ldr	r3, [pc, #56]	; (800dd20 <LoRaMacProcess+0xac>)
 800dce8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d101      	bne.n	800dcf4 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800dcf0:	f001 fb7e 	bl	800f3f0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800dcf4:	4b0a      	ldr	r3, [pc, #40]	; (800dd20 <LoRaMacProcess+0xac>)
 800dcf6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800dcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d009      	beq.n	800dd18 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800dd04:	4a06      	ldr	r2, [pc, #24]	; (800dd20 <LoRaMacProcess+0xac>)
 800dd06:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800dd0a:	f36f 1386 	bfc	r3, #6, #1
 800dd0e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800dd12:	4804      	ldr	r0, [pc, #16]	; (800dd24 <LoRaMacProcess+0xb0>)
 800dd14:	f7ff ff02 	bl	800db1c <LoRaMacHandleNvm>
    }
}
 800dd18:	bf00      	nop
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	20000644 	.word	0x20000644
 800dd24:	20000b50 	.word	0x20000b50

0800dd28 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800dd30:	4817      	ldr	r0, [pc, #92]	; (800dd90 <OnTxDelayedTimerEvent+0x68>)
 800dd32:	f00b ffa1 	bl	8019c78 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800dd36:	4b17      	ldr	r3, [pc, #92]	; (800dd94 <OnTxDelayedTimerEvent+0x6c>)
 800dd38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dd3c:	f023 0320 	bic.w	r3, r3, #32
 800dd40:	4a14      	ldr	r2, [pc, #80]	; (800dd94 <OnTxDelayedTimerEvent+0x6c>)
 800dd42:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800dd46:	2001      	movs	r0, #1
 800dd48:	f001 f8e6 	bl	800ef18 <ScheduleTx>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d018      	beq.n	800dd84 <OnTxDelayedTimerEvent+0x5c>
 800dd52:	2b0b      	cmp	r3, #11
 800dd54:	d016      	beq.n	800dd84 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dd56:	4b10      	ldr	r3, [pc, #64]	; (800dd98 <OnTxDelayedTimerEvent+0x70>)
 800dd58:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	4b0d      	ldr	r3, [pc, #52]	; (800dd94 <OnTxDelayedTimerEvent+0x6c>)
 800dd60:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800dd64:	4b0b      	ldr	r3, [pc, #44]	; (800dd94 <OnTxDelayedTimerEvent+0x6c>)
 800dd66:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800dd6a:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <OnTxDelayedTimerEvent+0x6c>)
 800dd6c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800dd70:	4b08      	ldr	r3, [pc, #32]	; (800dd94 <OnTxDelayedTimerEvent+0x6c>)
 800dd72:	2209      	movs	r2, #9
 800dd74:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800dd78:	2009      	movs	r0, #9
 800dd7a:	f004 f867 	bl	8011e4c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800dd7e:	f001 febf 	bl	800fb00 <StopRetransmission>
            break;
 800dd82:	e000      	b.n	800dd86 <OnTxDelayedTimerEvent+0x5e>
            break;
 800dd84:	bf00      	nop
        }
    }
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	200009ac 	.word	0x200009ac
 800dd94:	20000644 	.word	0x20000644
 800dd98:	20000b50 	.word	0x20000b50

0800dd9c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800dda4:	4b14      	ldr	r3, [pc, #80]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800dda6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ddaa:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800ddac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <OnRxWindow1TimerEvent+0x60>)
 800ddb2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ddb6:	b25a      	sxtb	r2, r3
 800ddb8:	4b0f      	ldr	r3, [pc, #60]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800ddba:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ddbe:	4b0f      	ldr	r3, [pc, #60]	; (800ddfc <OnRxWindow1TimerEvent+0x60>)
 800ddc0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800ddc6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ddca:	4b0c      	ldr	r3, [pc, #48]	; (800ddfc <OnRxWindow1TimerEvent+0x60>)
 800ddcc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ddd0:	4b09      	ldr	r3, [pc, #36]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800ddd2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ddd6:	4b08      	ldr	r3, [pc, #32]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ddde:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <OnRxWindow1TimerEvent+0x5c>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800dde6:	4906      	ldr	r1, [pc, #24]	; (800de00 <OnRxWindow1TimerEvent+0x64>)
 800dde8:	4806      	ldr	r0, [pc, #24]	; (800de04 <OnRxWindow1TimerEvent+0x68>)
 800ddea:	f001 facd 	bl	800f388 <RxWindowSetup>
}
 800ddee:	bf00      	nop
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000644 	.word	0x20000644
 800ddfc:	20000b50 	.word	0x20000b50
 800de00:	200009fc 	.word	0x200009fc
 800de04:	200009c4 	.word	0x200009c4

0800de08 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800de10:	4b16      	ldr	r3, [pc, #88]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de12:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800de16:	2b00      	cmp	r3, #0
 800de18:	d023      	beq.n	800de62 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800de1a:	4b14      	ldr	r3, [pc, #80]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de1c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800de20:	4b12      	ldr	r3, [pc, #72]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de22:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800de26:	4b12      	ldr	r3, [pc, #72]	; (800de70 <OnRxWindow2TimerEvent+0x68>)
 800de28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2a:	4a10      	ldr	r2, [pc, #64]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de2c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de30:	4b0f      	ldr	r3, [pc, #60]	; (800de70 <OnRxWindow2TimerEvent+0x68>)
 800de32:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800de36:	4b0d      	ldr	r3, [pc, #52]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de38:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800de3c:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <OnRxWindow2TimerEvent+0x68>)
 800de3e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800de42:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de44:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800de48:	4b08      	ldr	r3, [pc, #32]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800de50:	4b06      	ldr	r3, [pc, #24]	; (800de6c <OnRxWindow2TimerEvent+0x64>)
 800de52:	2201      	movs	r2, #1
 800de54:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800de58:	4906      	ldr	r1, [pc, #24]	; (800de74 <OnRxWindow2TimerEvent+0x6c>)
 800de5a:	4807      	ldr	r0, [pc, #28]	; (800de78 <OnRxWindow2TimerEvent+0x70>)
 800de5c:	f001 fa94 	bl	800f388 <RxWindowSetup>
 800de60:	e000      	b.n	800de64 <OnRxWindow2TimerEvent+0x5c>
        return;
 800de62:	bf00      	nop
}
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	20000644 	.word	0x20000644
 800de70:	20000b50 	.word	0x20000b50
 800de74:	20000a10 	.word	0x20000a10
 800de78:	200009dc 	.word	0x200009dc

0800de7c <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800de84:	4815      	ldr	r0, [pc, #84]	; (800dedc <OnAckTimeoutTimerEvent+0x60>)
 800de86:	f00b fef7 	bl	8019c78 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800de8a:	4b15      	ldr	r3, [pc, #84]	; (800dee0 <OnAckTimeoutTimerEvent+0x64>)
 800de8c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800de90:	2b00      	cmp	r3, #0
 800de92:	d003      	beq.n	800de9c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800de94:	4b12      	ldr	r3, [pc, #72]	; (800dee0 <OnAckTimeoutTimerEvent+0x64>)
 800de96:	2201      	movs	r2, #1
 800de98:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800de9c:	4b11      	ldr	r3, [pc, #68]	; (800dee4 <OnAckTimeoutTimerEvent+0x68>)
 800de9e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d106      	bne.n	800deb4 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800dea6:	4a0e      	ldr	r2, [pc, #56]	; (800dee0 <OnAckTimeoutTimerEvent+0x64>)
 800dea8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800deac:	f043 0320 	orr.w	r3, r3, #32
 800deb0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800deb4:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <OnAckTimeoutTimerEvent+0x64>)
 800deb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00a      	beq.n	800ded4 <OnAckTimeoutTimerEvent+0x58>
 800debe:	4b08      	ldr	r3, [pc, #32]	; (800dee0 <OnAckTimeoutTimerEvent+0x64>)
 800dec0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d004      	beq.n	800ded4 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800deca:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <OnAckTimeoutTimerEvent+0x64>)
 800decc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	4798      	blx	r3
    }
}
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20000a3c 	.word	0x20000a3c
 800dee0:	20000644 	.word	0x20000644
 800dee4:	20000b50 	.word	0x20000b50

0800dee8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	60ba      	str	r2, [r7, #8]
 800def0:	607b      	str	r3, [r7, #4]
 800def2:	4603      	mov	r3, r0
 800def4:	73fb      	strb	r3, [r7, #15]
 800def6:	460b      	mov	r3, r1
 800def8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <GetFCntDown+0x24>
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d002      	beq.n	800df0c <GetFCntDown+0x24>
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d101      	bne.n	800df10 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800df0c:	230a      	movs	r3, #10
 800df0e:	e029      	b.n	800df64 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d016      	beq.n	800df44 <GetFCntDown+0x5c>
 800df16:	2b01      	cmp	r3, #1
 800df18:	d118      	bne.n	800df4c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800df1a:	79bb      	ldrb	r3, [r7, #6]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d10d      	bne.n	800df3c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <GetFCntDown+0x44>
 800df26:	7bbb      	ldrb	r3, [r7, #14]
 800df28:	2b03      	cmp	r3, #3
 800df2a:	d103      	bne.n	800df34 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	2202      	movs	r2, #2
 800df30:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800df32:	e00d      	b.n	800df50 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2201      	movs	r2, #1
 800df38:	701a      	strb	r2, [r3, #0]
            break;
 800df3a:	e009      	b.n	800df50 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	2203      	movs	r2, #3
 800df40:	701a      	strb	r2, [r3, #0]
            break;
 800df42:	e005      	b.n	800df50 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	2204      	movs	r2, #4
 800df48:	701a      	strb	r2, [r3, #0]
            break;
 800df4a:	e001      	b.n	800df50 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800df4c:	2305      	movs	r3, #5
 800df4e:	e009      	b.n	800df64 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	7818      	ldrb	r0, [r3, #0]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	89db      	ldrh	r3, [r3, #14]
 800df58:	461a      	mov	r2, r3
 800df5a:	8b39      	ldrh	r1, [r7, #24]
 800df5c:	6a3b      	ldr	r3, [r7, #32]
 800df5e:	f004 fb9f 	bl	80126a0 <LoRaMacCryptoGetFCntDown>
 800df62:	4603      	mov	r3, r0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800df6c:	b5b0      	push	{r4, r5, r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	4603      	mov	r3, r0
 800df74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df76:	2303      	movs	r3, #3
 800df78:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800df7a:	4b61      	ldr	r3, [pc, #388]	; (800e100 <SwitchClass+0x194>)
 800df7c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800df80:	2b02      	cmp	r3, #2
 800df82:	f000 80a5 	beq.w	800e0d0 <SwitchClass+0x164>
 800df86:	2b02      	cmp	r3, #2
 800df88:	f300 80b4 	bgt.w	800e0f4 <SwitchClass+0x188>
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <SwitchClass+0x2c>
 800df90:	2b01      	cmp	r3, #1
 800df92:	f000 808f 	beq.w	800e0b4 <SwitchClass+0x148>
 800df96:	e0ad      	b.n	800e0f4 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800df98:	79fb      	ldrb	r3, [r7, #7]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d107      	bne.n	800dfae <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800df9e:	4b58      	ldr	r3, [pc, #352]	; (800e100 <SwitchClass+0x194>)
 800dfa0:	4a57      	ldr	r2, [pc, #348]	; (800e100 <SwitchClass+0x194>)
 800dfa2:	336c      	adds	r3, #108	; 0x6c
 800dfa4:	3264      	adds	r2, #100	; 0x64
 800dfa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfaa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d10c      	bne.n	800dfce <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f003 fadb 	bl	8011572 <LoRaMacClassBSwitchClass>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d103      	bne.n	800dfce <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800dfc6:	4a4e      	ldr	r2, [pc, #312]	; (800e100 <SwitchClass+0x194>)
 800dfc8:	79fb      	ldrb	r3, [r7, #7]
 800dfca:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	f040 808a 	bne.w	800e0ea <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800dfd6:	4a4a      	ldr	r2, [pc, #296]	; (800e100 <SwitchClass+0x194>)
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800dfde:	4a49      	ldr	r2, [pc, #292]	; (800e104 <SwitchClass+0x198>)
 800dfe0:	4b48      	ldr	r3, [pc, #288]	; (800e104 <SwitchClass+0x198>)
 800dfe2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800dfe6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800dfea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfee:	682b      	ldr	r3, [r5, #0]
 800dff0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dff2:	4b44      	ldr	r3, [pc, #272]	; (800e104 <SwitchClass+0x198>)
 800dff4:	2202      	movs	r2, #2
 800dff6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dffa:	2300      	movs	r3, #0
 800dffc:	73bb      	strb	r3, [r7, #14]
 800dffe:	e049      	b.n	800e094 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800e000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e004:	4a3e      	ldr	r2, [pc, #248]	; (800e100 <SwitchClass+0x194>)
 800e006:	212c      	movs	r1, #44	; 0x2c
 800e008:	fb01 f303 	mul.w	r3, r1, r3
 800e00c:	4413      	add	r3, r2
 800e00e:	33da      	adds	r3, #218	; 0xda
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d038      	beq.n	800e088 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800e016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e01a:	4a39      	ldr	r2, [pc, #228]	; (800e100 <SwitchClass+0x194>)
 800e01c:	212c      	movs	r1, #44	; 0x2c
 800e01e:	fb01 f303 	mul.w	r3, r1, r3
 800e022:	4413      	add	r3, r2
 800e024:	33f0      	adds	r3, #240	; 0xf0
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a35      	ldr	r2, [pc, #212]	; (800e100 <SwitchClass+0x194>)
 800e02a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800e02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e030:	4a33      	ldr	r2, [pc, #204]	; (800e100 <SwitchClass+0x194>)
 800e032:	212c      	movs	r1, #44	; 0x2c
 800e034:	fb01 f303 	mul.w	r3, r1, r3
 800e038:	4413      	add	r3, r2
 800e03a:	33f4      	adds	r3, #244	; 0xf4
 800e03c:	f993 3000 	ldrsb.w	r3, [r3]
 800e040:	b2da      	uxtb	r2, r3
 800e042:	4b2f      	ldr	r3, [pc, #188]	; (800e100 <SwitchClass+0x194>)
 800e044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e048:	4b2e      	ldr	r3, [pc, #184]	; (800e104 <SwitchClass+0x198>)
 800e04a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e04e:	4b2d      	ldr	r3, [pc, #180]	; (800e104 <SwitchClass+0x198>)
 800e050:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e054:	4b2a      	ldr	r3, [pc, #168]	; (800e100 <SwitchClass+0x194>)
 800e056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e058:	4a2a      	ldr	r2, [pc, #168]	; (800e104 <SwitchClass+0x198>)
 800e05a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e05e:	4b28      	ldr	r3, [pc, #160]	; (800e100 <SwitchClass+0x194>)
 800e060:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e064:	4b27      	ldr	r3, [pc, #156]	; (800e104 <SwitchClass+0x198>)
 800e066:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e06a:	4b25      	ldr	r3, [pc, #148]	; (800e100 <SwitchClass+0x194>)
 800e06c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e070:	4b24      	ldr	r3, [pc, #144]	; (800e104 <SwitchClass+0x198>)
 800e072:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e076:	4b23      	ldr	r3, [pc, #140]	; (800e104 <SwitchClass+0x198>)
 800e078:	2203      	movs	r2, #3
 800e07a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e07e:	4b21      	ldr	r3, [pc, #132]	; (800e104 <SwitchClass+0x198>)
 800e080:	2201      	movs	r2, #1
 800e082:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800e086:	e009      	b.n	800e09c <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	3301      	adds	r3, #1
 800e090:	b2db      	uxtb	r3, r3
 800e092:	73bb      	strb	r3, [r7, #14]
 800e094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	ddb1      	ble.n	800e000 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800e09c:	4b19      	ldr	r3, [pc, #100]	; (800e104 <SwitchClass+0x198>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800e0a4:	4b18      	ldr	r3, [pc, #96]	; (800e108 <SwitchClass+0x19c>)
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800e0aa:	f001 f9a1 	bl	800f3f0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e0b2:	e01a      	b.n	800e0ea <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f003 fa5b 	bl	8011572 <LoRaMacClassBSwitchClass>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d113      	bne.n	800e0ee <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e0c6:	4a0e      	ldr	r2, [pc, #56]	; (800e100 <SwitchClass+0x194>)
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800e0ce:	e00e      	b.n	800e0ee <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800e0d0:	79fb      	ldrb	r3, [r7, #7]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10d      	bne.n	800e0f2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e0d6:	4a0a      	ldr	r2, [pc, #40]	; (800e100 <SwitchClass+0x194>)
 800e0d8:	79fb      	ldrb	r3, [r7, #7]
 800e0da:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800e0de:	4b0a      	ldr	r3, [pc, #40]	; (800e108 <SwitchClass+0x19c>)
 800e0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e0e8:	e003      	b.n	800e0f2 <SwitchClass+0x186>
            break;
 800e0ea:	bf00      	nop
 800e0ec:	e002      	b.n	800e0f4 <SwitchClass+0x188>
            break;
 800e0ee:	bf00      	nop
 800e0f0:	e000      	b.n	800e0f4 <SwitchClass+0x188>
            break;
 800e0f2:	bf00      	nop
        }
    }

    return status;
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bdb0      	pop	{r4, r5, r7, pc}
 800e0fe:	bf00      	nop
 800e100:	20000b50 	.word	0x20000b50
 800e104:	20000644 	.word	0x20000644
 800e108:	0801b950 	.word	0x0801b950

0800e10c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	4603      	mov	r3, r0
 800e114:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e116:	4b10      	ldr	r3, [pc, #64]	; (800e158 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e118:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e11c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e122:	230d      	movs	r3, #13
 800e124:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e128:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e130:	230e      	movs	r3, #14
 800e132:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e134:	4b08      	ldr	r3, [pc, #32]	; (800e158 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e13a:	f107 0210 	add.w	r2, r7, #16
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f005 f93b 	bl	80133bc <RegionGetPhyParam>
 800e146:	4603      	mov	r3, r0
 800e148:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	b2db      	uxtb	r3, r3
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20000b50 	.word	0x20000b50

0800e15c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	71fb      	strb	r3, [r7, #7]
 800e166:	460b      	mov	r3, r1
 800e168:	71bb      	strb	r3, [r7, #6]
 800e16a:	4613      	mov	r3, r2
 800e16c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e176:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff ffc6 	bl	800e10c <GetMaxAppPayloadWithoutFOptsLength>
 800e180:	4603      	mov	r3, r0
 800e182:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800e184:	79fb      	ldrb	r3, [r7, #7]
 800e186:	b29a      	uxth	r2, r3
 800e188:	797b      	ldrb	r3, [r7, #5]
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	4413      	add	r3, r2
 800e18e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e190:	89ba      	ldrh	r2, [r7, #12]
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	429a      	cmp	r2, r3
 800e196:	d804      	bhi.n	800e1a2 <ValidatePayloadLength+0x46>
 800e198:	89bb      	ldrh	r3, [r7, #12]
 800e19a:	2bff      	cmp	r3, #255	; 0xff
 800e19c:	d801      	bhi.n	800e1a2 <ValidatePayloadLength+0x46>
    {
        return true;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e000      	b.n	800e1a4 <ValidatePayloadLength+0x48>
    }
    return false;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800e1ac:	b590      	push	{r4, r7, lr}
 800e1ae:	b0a5      	sub	sp, #148	; 0x94
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	70fb      	strb	r3, [r7, #3]
 800e1be:	460b      	mov	r3, r1
 800e1c0:	70bb      	strb	r3, [r7, #2]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800e1d8:	f000 bc6d 	b.w	800eab6 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f003 fc8d 	bl	8011b04 <LoRaMacCommandsGetCmdSize>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	78fb      	ldrb	r3, [r7, #3]
 800e1f0:	441a      	add	r2, r3
 800e1f2:	78bb      	ldrb	r3, [r7, #2]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	f300 8464 	bgt.w	800eac2 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800e1fa:	78fb      	ldrb	r3, [r7, #3]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	70fa      	strb	r2, [r7, #3]
 800e200:	461a      	mov	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4413      	add	r3, r2
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	3b02      	subs	r3, #2
 800e20a:	2b11      	cmp	r3, #17
 800e20c:	f200 845b 	bhi.w	800eac6 <ProcessMacCommands+0x91a>
 800e210:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <ProcessMacCommands+0x6c>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e261 	.word	0x0800e261
 800e21c:	0800e2a3 	.word	0x0800e2a3
 800e220:	0800e3bf 	.word	0x0800e3bf
 800e224:	0800e3fd 	.word	0x0800e3fd
 800e228:	0800e4e9 	.word	0x0800e4e9
 800e22c:	0800e545 	.word	0x0800e545
 800e230:	0800e601 	.word	0x0800e601
 800e234:	0800e657 	.word	0x0800e657
 800e238:	0800e73b 	.word	0x0800e73b
 800e23c:	0800eac7 	.word	0x0800eac7
 800e240:	0800eac7 	.word	0x0800eac7
 800e244:	0800e7e1 	.word	0x0800e7e1
 800e248:	0800eac7 	.word	0x0800eac7
 800e24c:	0800eac7 	.word	0x0800eac7
 800e250:	0800e8f7 	.word	0x0800e8f7
 800e254:	0800e92b 	.word	0x0800e92b
 800e258:	0800e9bb 	.word	0x0800e9bb
 800e25c:	0800ea31 	.word	0x0800ea31
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e260:	2004      	movs	r0, #4
 800e262:	f003 fe27 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 8424 	beq.w	800eab6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e26e:	2104      	movs	r1, #4
 800e270:	2000      	movs	r0, #0
 800e272:	f003 fd93 	bl	8011d9c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e276:	78fb      	ldrb	r3, [r7, #3]
 800e278:	1c5a      	adds	r2, r3, #1
 800e27a:	70fa      	strb	r2, [r7, #3]
 800e27c:	461a      	mov	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4413      	add	r3, r2
 800e282:	781a      	ldrb	r2, [r3, #0]
 800e284:	4bac      	ldr	r3, [pc, #688]	; (800e538 <ProcessMacCommands+0x38c>)
 800e286:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e28a:	78fb      	ldrb	r3, [r7, #3]
 800e28c:	1c5a      	adds	r2, r3, #1
 800e28e:	70fa      	strb	r2, [r7, #3]
 800e290:	461a      	mov	r2, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4413      	add	r3, r2
 800e296:	781a      	ldrb	r2, [r3, #0]
 800e298:	4ba7      	ldr	r3, [pc, #668]	; (800e538 <ProcessMacCommands+0x38c>)
 800e29a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800e29e:	f000 bc0a 	b.w	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800e2ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e2be:	f083 0301 	eor.w	r3, r3, #1
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d078      	beq.n	800e3ba <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e2ce:	78fb      	ldrb	r3, [r7, #3]
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e2d8:	78ba      	ldrb	r2, [r7, #2]
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e2e8:	4b94      	ldr	r3, [pc, #592]	; (800e53c <ProcessMacCommands+0x390>)
 800e2ea:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800e2ee:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e2f2:	4b92      	ldr	r3, [pc, #584]	; (800e53c <ProcessMacCommands+0x390>)
 800e2f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e2f8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e2fc:	4b8f      	ldr	r3, [pc, #572]	; (800e53c <ProcessMacCommands+0x390>)
 800e2fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e302:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e306:	4b8d      	ldr	r3, [pc, #564]	; (800e53c <ProcessMacCommands+0x390>)
 800e308:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e30c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e310:	4b8a      	ldr	r3, [pc, #552]	; (800e53c <ProcessMacCommands+0x390>)
 800e312:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e316:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e31a:	4b88      	ldr	r3, [pc, #544]	; (800e53c <ProcessMacCommands+0x390>)
 800e31c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e320:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e322:	4b86      	ldr	r3, [pc, #536]	; (800e53c <ProcessMacCommands+0x390>)
 800e324:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e328:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800e32c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800e330:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e338:	9301      	str	r3, [sp, #4]
 800e33a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	4623      	mov	r3, r4
 800e342:	f005 f8f8 	bl	8013536 <RegionLinkAdrReq>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e34c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e350:	f003 0307 	and.w	r3, r3, #7
 800e354:	2b07      	cmp	r3, #7
 800e356:	d10e      	bne.n	800e376 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e358:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800e35c:	4b77      	ldr	r3, [pc, #476]	; (800e53c <ProcessMacCommands+0x390>)
 800e35e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e362:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800e366:	4b75      	ldr	r3, [pc, #468]	; (800e53c <ProcessMacCommands+0x390>)
 800e368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e36c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800e370:	4b72      	ldr	r3, [pc, #456]	; (800e53c <ProcessMacCommands+0x390>)
 800e372:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e376:	2300      	movs	r3, #0
 800e378:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e37c:	e00b      	b.n	800e396 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e37e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800e382:	2201      	movs	r2, #1
 800e384:	4619      	mov	r1, r3
 800e386:	2003      	movs	r0, #3
 800e388:	f003 fa6c 	bl	8011864 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e38c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800e390:	3301      	adds	r3, #1
 800e392:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e396:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e39a:	4a69      	ldr	r2, [pc, #420]	; (800e540 <ProcessMacCommands+0x394>)
 800e39c:	fba2 2303 	umull	r2, r3, r2, r3
 800e3a0:	089b      	lsrs	r3, r3, #2
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d3e8      	bcc.n	800e37e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e3ac:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800e3ba:	bf00      	nop
 800e3bc:	e37b      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	1c5a      	adds	r2, r3, #1
 800e3c2:	70fa      	strb	r2, [r7, #3]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 030f 	and.w	r3, r3, #15
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	4b5a      	ldr	r3, [pc, #360]	; (800e53c <ProcessMacCommands+0x390>)
 800e3d4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e3d8:	4b58      	ldr	r3, [pc, #352]	; (800e53c <ProcessMacCommands+0x390>)
 800e3da:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800e3de:	461a      	mov	r2, r3
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	4093      	lsls	r3, r2
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	4b55      	ldr	r3, [pc, #340]	; (800e53c <ProcessMacCommands+0x390>)
 800e3e8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e3ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	2004      	movs	r0, #4
 800e3f6:	f003 fa35 	bl	8011864 <LoRaMacCommandsAddCmd>
                break;
 800e3fa:	e35c      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e3fc:	2307      	movs	r3, #7
 800e3fe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e402:	78fb      	ldrb	r3, [r7, #3]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4413      	add	r3, r2
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	091b      	lsrs	r3, r3, #4
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	b25b      	sxtb	r3, r3
 800e410:	f003 0307 	and.w	r3, r3, #7
 800e414:	b25b      	sxtb	r3, r3
 800e416:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	4413      	add	r3, r2
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	b25b      	sxtb	r3, r3
 800e424:	f003 030f 	and.w	r3, r3, #15
 800e428:	b25b      	sxtb	r3, r3
 800e42a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800e42e:	78fb      	ldrb	r3, [r7, #3]
 800e430:	3301      	adds	r3, #1
 800e432:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e434:	78fb      	ldrb	r3, [r7, #3]
 800e436:	1c5a      	adds	r2, r3, #1
 800e438:	70fa      	strb	r2, [r7, #3]
 800e43a:	461a      	mov	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4413      	add	r3, r2
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	70fa      	strb	r2, [r7, #3]
 800e44a:	461a      	mov	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4413      	add	r3, r2
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	021a      	lsls	r2, r3, #8
 800e454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e456:	4313      	orrs	r3, r2
 800e458:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e45a:	78fb      	ldrb	r3, [r7, #3]
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	70fa      	strb	r2, [r7, #3]
 800e460:	461a      	mov	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4413      	add	r3, r2
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	041a      	lsls	r2, r3, #16
 800e46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e46c:	4313      	orrs	r3, r2
 800e46e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800e470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e472:	2264      	movs	r2, #100	; 0x64
 800e474:	fb02 f303 	mul.w	r3, r2, r3
 800e478:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e47a:	4b30      	ldr	r3, [pc, #192]	; (800e53c <ProcessMacCommands+0x390>)
 800e47c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e480:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f005 f86f 	bl	801356a <RegionRxParamSetupReq>
 800e48c:	4603      	mov	r3, r0
 800e48e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e492:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b07      	cmp	r3, #7
 800e49c:	d117      	bne.n	800e4ce <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e49e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	4b25      	ldr	r3, [pc, #148]	; (800e53c <ProcessMacCommands+0x390>)
 800e4a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e4aa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	4b22      	ldr	r3, [pc, #136]	; (800e53c <ProcessMacCommands+0x390>)
 800e4b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b8:	4a20      	ldr	r2, [pc, #128]	; (800e53c <ProcessMacCommands+0x390>)
 800e4ba:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4be:	4a1f      	ldr	r2, [pc, #124]	; (800e53c <ProcessMacCommands+0x390>)
 800e4c0:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e4c2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	4b1c      	ldr	r3, [pc, #112]	; (800e53c <ProcessMacCommands+0x390>)
 800e4ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800e4ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e4d2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e4d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e4da:	2201      	movs	r2, #1
 800e4dc:	4619      	mov	r1, r3
 800e4de:	2005      	movs	r0, #5
 800e4e0:	f003 f9c0 	bl	8011864 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800e4e4:	bf00      	nop
 800e4e6:	e2e6      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e4e8:	23ff      	movs	r3, #255	; 0xff
 800e4ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e4ee:	4b12      	ldr	r3, [pc, #72]	; (800e538 <ProcessMacCommands+0x38c>)
 800e4f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00d      	beq.n	800e514 <ProcessMacCommands+0x368>
 800e4f8:	4b0f      	ldr	r3, [pc, #60]	; (800e538 <ProcessMacCommands+0x38c>)
 800e4fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e504:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <ProcessMacCommands+0x38c>)
 800e506:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4798      	blx	r3
 800e50e:	4603      	mov	r3, r0
 800e510:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800e514:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800e518:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e51c:	787b      	ldrb	r3, [r7, #1]
 800e51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e528:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e52c:	2202      	movs	r2, #2
 800e52e:	4619      	mov	r1, r3
 800e530:	2006      	movs	r0, #6
 800e532:	f003 f997 	bl	8011864 <LoRaMacCommandsAddCmd>
                break;
 800e536:	e2be      	b.n	800eab6 <ProcessMacCommands+0x90a>
 800e538:	20000644 	.word	0x20000644
 800e53c:	20000b50 	.word	0x20000b50
 800e540:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800e544:	2303      	movs	r3, #3
 800e546:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800e54a:	78fb      	ldrb	r3, [r7, #3]
 800e54c:	1c5a      	adds	r2, r3, #1
 800e54e:	70fa      	strb	r2, [r7, #3]
 800e550:	461a      	mov	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4413      	add	r3, r2
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	b25b      	sxtb	r3, r3
 800e55a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800e55e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e562:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	70fa      	strb	r2, [r7, #3]
 800e56a:	461a      	mov	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4413      	add	r3, r2
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e574:	78fb      	ldrb	r3, [r7, #3]
 800e576:	1c5a      	adds	r2, r3, #1
 800e578:	70fa      	strb	r2, [r7, #3]
 800e57a:	461a      	mov	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	4413      	add	r3, r2
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	021a      	lsls	r2, r3, #8
 800e584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e586:	4313      	orrs	r3, r2
 800e588:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e58a:	78fb      	ldrb	r3, [r7, #3]
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	70fa      	strb	r2, [r7, #3]
 800e590:	461a      	mov	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4413      	add	r3, r2
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	041a      	lsls	r2, r3, #16
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	4313      	orrs	r3, r2
 800e59e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	2264      	movs	r2, #100	; 0x64
 800e5a4:	fb02 f303 	mul.w	r3, r2, r3
 800e5a8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800e5ae:	78fb      	ldrb	r3, [r7, #3]
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	70fa      	strb	r2, [r7, #3]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	b25b      	sxtb	r3, r3
 800e5be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800e5c2:	4b85      	ldr	r3, [pc, #532]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e5c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f004 ffde 	bl	8013590 <RegionNewChannelReq>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e5dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e5e0:	b25b      	sxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	db0a      	blt.n	800e5fc <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 800e5e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e5ea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800e5ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	2007      	movs	r0, #7
 800e5f8:	f003 f934 	bl	8011864 <LoRaMacCommandsAddCmd>
                }
                break;
 800e5fc:	bf00      	nop
 800e5fe:	e25a      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800e600:	78fb      	ldrb	r3, [r7, #3]
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	70fa      	strb	r2, [r7, #3]
 800e606:	461a      	mov	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4413      	add	r3, r2
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	f003 030f 	and.w	r3, r3, #15
 800e612:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800e616:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d104      	bne.n	800e628 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800e61e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e622:	3301      	adds	r3, #1
 800e624:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800e628:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e62c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e630:	fb02 f303 	mul.w	r3, r2, r3
 800e634:	461a      	mov	r2, r3
 800e636:	4b68      	ldr	r3, [pc, #416]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e638:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e63a:	4b67      	ldr	r3, [pc, #412]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e63e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e642:	4a65      	ldr	r2, [pc, #404]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e644:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800e646:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e64a:	2200      	movs	r2, #0
 800e64c:	4619      	mov	r1, r3
 800e64e:	2008      	movs	r0, #8
 800e650:	f003 f908 	bl	8011864 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800e654:	e22f      	b.n	800eab6 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800e656:	78fb      	ldrb	r3, [r7, #3]
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	70fa      	strb	r2, [r7, #3]
 800e65c:	461a      	mov	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4413      	add	r3, r2
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800e668:	2300      	movs	r3, #0
 800e66a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800e66e:	2300      	movs	r3, #0
 800e670:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800e674:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e678:	f003 0320 	and.w	r3, r3, #32
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d002      	beq.n	800e686 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800e680:	2301      	movs	r3, #1
 800e682:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800e686:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e68a:	f003 0310 	and.w	r3, r3, #16
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800e692:	2301      	movs	r3, #1
 800e694:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800e698:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e69c:	f003 030f 	and.w	r3, r3, #15
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800e6a6:	4b4c      	ldr	r3, [pc, #304]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e6a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e6b0:	4611      	mov	r1, r2
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f004 ff7f 	bl	80135b6 <RegionTxParamSetupReq>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6be:	d03a      	beq.n	800e736 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800e6c0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e6c4:	4b44      	ldr	r3, [pc, #272]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e6c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800e6ca:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e6ce:	4b42      	ldr	r3, [pc, #264]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e6d0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800e6d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e6d8:	461a      	mov	r2, r3
 800e6da:	4b40      	ldr	r3, [pc, #256]	; (800e7dc <ProcessMacCommands+0x630>)
 800e6dc:	5c9b      	ldrb	r3, [r3, r2]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7f2 f8c8 	bl	8000874 <__aeabi_ui2f>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	4a3c      	ldr	r2, [pc, #240]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e6e8:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e6f0:	4b39      	ldr	r3, [pc, #228]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e6f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e6f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e6fa:	4b37      	ldr	r3, [pc, #220]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e6fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e700:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e704:	4611      	mov	r1, r2
 800e706:	4618      	mov	r0, r3
 800e708:	f004 fe58 	bl	80133bc <RegionGetPhyParam>
 800e70c:	4603      	mov	r3, r0
 800e70e:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	b25a      	sxtb	r2, r3
 800e714:	4b30      	ldr	r3, [pc, #192]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e716:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e71a:	4293      	cmp	r3, r2
 800e71c:	bfb8      	it	lt
 800e71e:	4613      	movlt	r3, r2
 800e720:	b25a      	sxtb	r2, r3
 800e722:	4b2d      	ldr	r3, [pc, #180]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800e728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e72c:	2200      	movs	r2, #0
 800e72e:	4619      	mov	r1, r3
 800e730:	2009      	movs	r0, #9
 800e732:	f003 f897 	bl	8011864 <LoRaMacCommandsAddCmd>
                }
                break;
 800e736:	bf00      	nop
 800e738:	e1bd      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800e73a:	2303      	movs	r3, #3
 800e73c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800e740:	78fb      	ldrb	r3, [r7, #3]
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	70fa      	strb	r2, [r7, #3]
 800e746:	461a      	mov	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4413      	add	r3, r2
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800e752:	78fb      	ldrb	r3, [r7, #3]
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	70fa      	strb	r2, [r7, #3]
 800e758:	461a      	mov	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4413      	add	r3, r2
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e762:	78fb      	ldrb	r3, [r7, #3]
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	70fa      	strb	r2, [r7, #3]
 800e768:	461a      	mov	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4413      	add	r3, r2
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	021a      	lsls	r2, r3, #8
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	4313      	orrs	r3, r2
 800e776:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e778:	78fb      	ldrb	r3, [r7, #3]
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	70fa      	strb	r2, [r7, #3]
 800e77e:	461a      	mov	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4413      	add	r3, r2
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	041a      	lsls	r2, r3, #16
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	4313      	orrs	r3, r2
 800e78c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	2264      	movs	r2, #100	; 0x64
 800e792:	fb02 f303 	mul.w	r3, r2, r3
 800e796:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800e798:	4b0f      	ldr	r3, [pc, #60]	; (800e7d8 <ProcessMacCommands+0x62c>)
 800e79a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e79e:	f107 0220 	add.w	r2, r7, #32
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f004 ff19 	bl	80135dc <RegionDlChannelReq>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e7b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e7b6:	b25b      	sxtb	r3, r3
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	db0a      	blt.n	800e7d2 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 800e7bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e7c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800e7c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	200a      	movs	r0, #10
 800e7ce:	f003 f849 	bl	8011864 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800e7d2:	bf00      	nop
 800e7d4:	e16f      	b.n	800eab6 <ProcessMacCommands+0x90a>
 800e7d6:	bf00      	nop
 800e7d8:	20000b50 	.word	0x20000b50
 800e7dc:	0801b908 	.word	0x0801b908
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800e7e0:	200a      	movs	r0, #10
 800e7e2:	f003 fb67 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 8164 	beq.w	800eab6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800e7ee:	210a      	movs	r1, #10
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	f003 fad3 	bl	8011d9c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800e7f6:	f107 0318 	add.w	r3, r7, #24
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800e800:	f107 0310 	add.w	r3, r7, #16
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
 800e808:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800e80a:	f107 0308 	add.w	r3, r7, #8
 800e80e:	2200      	movs	r2, #0
 800e810:	601a      	str	r2, [r3, #0]
 800e812:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	1c5a      	adds	r2, r3, #1
 800e818:	70fa      	strb	r2, [r7, #3]
 800e81a:	461a      	mov	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4413      	add	r3, r2
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	70fa      	strb	r2, [r7, #3]
 800e82a:	461a      	mov	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4413      	add	r3, r2
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	021a      	lsls	r2, r3, #8
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	4313      	orrs	r3, r2
 800e838:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	1c5a      	adds	r2, r3, #1
 800e83e:	70fa      	strb	r2, [r7, #3]
 800e840:	461a      	mov	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4413      	add	r3, r2
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	041a      	lsls	r2, r3, #16
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800e850:	78fb      	ldrb	r3, [r7, #3]
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	70fa      	strb	r2, [r7, #3]
 800e856:	461a      	mov	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4413      	add	r3, r2
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	061a      	lsls	r2, r3, #24
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	4313      	orrs	r3, r2
 800e864:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800e866:	78fb      	ldrb	r3, [r7, #3]
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	70fa      	strb	r2, [r7, #3]
 800e86c:	461a      	mov	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4413      	add	r3, r2
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	b21b      	sxth	r3, r3
 800e876:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800e878:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e87c:	461a      	mov	r2, r3
 800e87e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e882:	fb02 f303 	mul.w	r3, r2, r3
 800e886:	121b      	asrs	r3, r3, #8
 800e888:	b21b      	sxth	r3, r3
 800e88a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800e88c:	f107 0310 	add.w	r3, r7, #16
 800e890:	f107 0218 	add.w	r2, r7, #24
 800e894:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e898:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	4b8c      	ldr	r3, [pc, #560]	; (800ead0 <ProcessMacCommands+0x924>)
 800e8a0:	4413      	add	r3, r2
 800e8a2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800e8a4:	f107 0308 	add.w	r3, r7, #8
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f00a fc79 	bl	80191a0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800e8ae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e8b2:	4b88      	ldr	r3, [pc, #544]	; (800ead4 <ProcessMacCommands+0x928>)
 800e8b4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800e8b8:	9200      	str	r2, [sp, #0]
 800e8ba:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800e8be:	f107 0210 	add.w	r2, r7, #16
 800e8c2:	ca06      	ldmia	r2, {r1, r2}
 800e8c4:	f00a fc05 	bl	80190d2 <SysTimeSub>
 800e8c8:	f107 0010 	add.w	r0, r7, #16
 800e8cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8d2:	f107 0208 	add.w	r2, r7, #8
 800e8d6:	ca06      	ldmia	r2, {r1, r2}
 800e8d8:	f00a fbc2 	bl	8019060 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800e8dc:	f107 0310 	add.w	r3, r7, #16
 800e8e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8e4:	f00a fc2e 	bl	8019144 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800e8e8:	f002 fe81 	bl	80115ee <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800e8ec:	4b79      	ldr	r3, [pc, #484]	; (800ead4 <ProcessMacCommands+0x928>)
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800e8f4:	e0df      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800e8f6:	200d      	movs	r0, #13
 800e8f8:	f003 fadc 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f000 80d9 	beq.w	800eab6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800e904:	210d      	movs	r1, #13
 800e906:	2000      	movs	r0, #0
 800e908:	f003 fa48 	bl	8011d9c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800e90c:	4b71      	ldr	r3, [pc, #452]	; (800ead4 <ProcessMacCommands+0x928>)
 800e90e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e912:	2b04      	cmp	r3, #4
 800e914:	f000 80cf 	beq.w	800eab6 <ProcessMacCommands+0x90a>
 800e918:	4b6e      	ldr	r3, [pc, #440]	; (800ead4 <ProcessMacCommands+0x928>)
 800e91a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e91e:	2b05      	cmp	r3, #5
 800e920:	f000 80c9 	beq.w	800eab6 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800e924:	f002 fe44 	bl	80115b0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800e928:	e0c5      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800e92a:	2303      	movs	r3, #3
 800e92c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800e930:	2300      	movs	r3, #0
 800e932:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800e934:	78fb      	ldrb	r3, [r7, #3]
 800e936:	1c5a      	adds	r2, r3, #1
 800e938:	70fa      	strb	r2, [r7, #3]
 800e93a:	461a      	mov	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e944:	78fb      	ldrb	r3, [r7, #3]
 800e946:	1c5a      	adds	r2, r3, #1
 800e948:	70fa      	strb	r2, [r7, #3]
 800e94a:	461a      	mov	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4413      	add	r3, r2
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	021b      	lsls	r3, r3, #8
 800e954:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e956:	4313      	orrs	r3, r2
 800e958:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e95a:	78fb      	ldrb	r3, [r7, #3]
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	70fa      	strb	r2, [r7, #3]
 800e960:	461a      	mov	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4413      	add	r3, r2
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	041b      	lsls	r3, r3, #16
 800e96a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e96c:	4313      	orrs	r3, r2
 800e96e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800e970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e972:	2264      	movs	r2, #100	; 0x64
 800e974:	fb02 f303 	mul.w	r3, r2, r3
 800e978:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	1c5a      	adds	r2, r3, #1
 800e97e:	70fa      	strb	r2, [r7, #3]
 800e980:	461a      	mov	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4413      	add	r3, r2
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	f003 030f 	and.w	r3, r3, #15
 800e98c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800e990:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e994:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e996:	4618      	mov	r0, r3
 800e998:	f002 fe10 	bl	80115bc <LoRaMacClassBPingSlotChannelReq>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800e9a2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e9a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800e9aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	2011      	movs	r0, #17
 800e9b4:	f002 ff56 	bl	8011864 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800e9b8:	e07d      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800e9ba:	200e      	movs	r0, #14
 800e9bc:	f003 fa7a 	bl	8011eb4 <LoRaMacConfirmQueueIsCmdActive>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d077      	beq.n	800eab6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800e9c6:	210e      	movs	r1, #14
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	f003 f9e7 	bl	8011d9c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	1c5a      	adds	r2, r3, #1
 800e9de:	70fa      	strb	r2, [r7, #3]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800e9ec:	78fb      	ldrb	r3, [r7, #3]
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	70fa      	strb	r2, [r7, #3]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	021b      	lsls	r3, r3, #8
 800e9fc:	b21a      	sxth	r2, r3
 800e9fe:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ea02:	4313      	orrs	r3, r2
 800ea04:	b21b      	sxth	r3, r3
 800ea06:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ea0a:	78fb      	ldrb	r3, [r7, #3]
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	70fa      	strb	r2, [r7, #3]
 800ea10:	461a      	mov	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4413      	add	r3, r2
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ea1c:	4b2e      	ldr	r3, [pc, #184]	; (800ead8 <ProcessMacCommands+0x92c>)
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800ea24:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f002 fdd3 	bl	80115d4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ea2e:	e042      	b.n	800eab6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ea36:	78fb      	ldrb	r3, [r7, #3]
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	70fa      	strb	r2, [r7, #3]
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4413      	add	r3, r2
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ea48:	78fb      	ldrb	r3, [r7, #3]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	70fa      	strb	r2, [r7, #3]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4413      	add	r3, r2
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	021b      	lsls	r3, r3, #8
 800ea58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ea62:	78fb      	ldrb	r3, [r7, #3]
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	70fa      	strb	r2, [r7, #3]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	041b      	lsls	r3, r3, #16
 800ea72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ea76:	4313      	orrs	r3, r2
 800ea78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800ea7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea80:	2264      	movs	r2, #100	; 0x64
 800ea82:	fb02 f303 	mul.w	r3, r2, r3
 800ea86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800ea8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ea8e:	f002 fdb4 	bl	80115fa <LoRaMacClassBBeaconFreqReq>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d003      	beq.n	800eaa0 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800ea9e:	e002      	b.n	800eaa6 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800eaa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eaaa:	2201      	movs	r2, #1
 800eaac:	4619      	mov	r1, r3
 800eaae:	2013      	movs	r0, #19
 800eab0:	f002 fed8 	bl	8011864 <LoRaMacCommandsAddCmd>
                }
                break;
 800eab4:	bf00      	nop
    while( macIndex < commandsSize )
 800eab6:	78fa      	ldrb	r2, [r7, #3]
 800eab8:	78bb      	ldrb	r3, [r7, #2]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	f4ff ab8e 	bcc.w	800e1dc <ProcessMacCommands+0x30>
 800eac0:	e002      	b.n	800eac8 <ProcessMacCommands+0x91c>
            return;
 800eac2:	bf00      	nop
 800eac4:	e000      	b.n	800eac8 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800eac6:	bf00      	nop
        }
    }
}
 800eac8:	378c      	adds	r7, #140	; 0x8c
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd90      	pop	{r4, r7, pc}
 800eace:	bf00      	nop
 800ead0:	12d53d80 	.word	0x12d53d80
 800ead4:	20000644 	.word	0x20000644
 800ead8:	200019a8 	.word	0x200019a8

0800eadc <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b08e      	sub	sp, #56	; 0x38
 800eae0:	af02      	add	r7, sp, #8
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	607a      	str	r2, [r7, #4]
 800eae6:	461a      	mov	r2, r3
 800eae8:	460b      	mov	r3, r1
 800eaea:	72fb      	strb	r3, [r7, #11]
 800eaec:	4613      	mov	r3, r2
 800eaee:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800eaf6:	4b65      	ldr	r3, [pc, #404]	; (800ec8c <Send+0x1b0>)
 800eaf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eafc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800eb00:	4b62      	ldr	r3, [pc, #392]	; (800ec8c <Send+0x1b0>)
 800eb02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800eb0a:	4b60      	ldr	r3, [pc, #384]	; (800ec8c <Send+0x1b0>)
 800eb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800eb10:	4b5e      	ldr	r3, [pc, #376]	; (800ec8c <Send+0x1b0>)
 800eb12:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800eb1a:	2307      	movs	r3, #7
 800eb1c:	e0b1      	b.n	800ec82 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800eb1e:	4b5b      	ldr	r3, [pc, #364]	; (800ec8c <Send+0x1b0>)
 800eb20:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800eb28:	4b58      	ldr	r3, [pc, #352]	; (800ec8c <Send+0x1b0>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800eb34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb38:	f36f 0303 	bfc	r3, #0, #4
 800eb3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800eb40:	4b52      	ldr	r3, [pc, #328]	; (800ec8c <Send+0x1b0>)
 800eb42:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800eb46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb4a:	f362 13c7 	bfi	r3, r2, #7, #1
 800eb4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800eb52:	4b4e      	ldr	r3, [pc, #312]	; (800ec8c <Send+0x1b0>)
 800eb54:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d106      	bne.n	800eb6a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800eb5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb60:	f043 0310 	orr.w	r3, r3, #16
 800eb64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800eb68:	e005      	b.n	800eb76 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800eb6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb6e:	f36f 1304 	bfc	r3, #4, #1
 800eb72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800eb76:	4b45      	ldr	r3, [pc, #276]	; (800ec8c <Send+0x1b0>)
 800eb78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d005      	beq.n	800eb8c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800eb80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb84:	f043 0320 	orr.w	r3, r3, #32
 800eb88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800eb8c:	4b3f      	ldr	r3, [pc, #252]	; (800ec8c <Send+0x1b0>)
 800eb8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800eb92:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800eb94:	2301      	movs	r3, #1
 800eb96:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800eb98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb9c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	bf14      	ite	ne
 800eba6:	2301      	movne	r3, #1
 800eba8:	2300      	moveq	r3, #0
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ebae:	4b37      	ldr	r3, [pc, #220]	; (800ec8c <Send+0x1b0>)
 800ebb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ebb4:	4b36      	ldr	r3, [pc, #216]	; (800ec90 <Send+0x1b4>)
 800ebb6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800ebba:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800ebbc:	4b34      	ldr	r3, [pc, #208]	; (800ec90 <Send+0x1b4>)
 800ebbe:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800ebc2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebc4:	4b31      	ldr	r3, [pc, #196]	; (800ec8c <Send+0x1b0>)
 800ebc6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ebca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ebce:	4b2f      	ldr	r3, [pc, #188]	; (800ec8c <Send+0x1b0>)
 800ebd0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ebd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ebd8:	4b2c      	ldr	r3, [pc, #176]	; (800ec8c <Send+0x1b0>)
 800ebda:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ebde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800ebe2:	4b2a      	ldr	r3, [pc, #168]	; (800ec8c <Send+0x1b0>)
 800ebe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800ebec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ebf0:	f107 0014 	add.w	r0, r7, #20
 800ebf4:	4a27      	ldr	r2, [pc, #156]	; (800ec94 <Send+0x1b8>)
 800ebf6:	4928      	ldr	r1, [pc, #160]	; (800ec98 <Send+0x1bc>)
 800ebf8:	f002 fc1a 	bl	8011430 <LoRaMacAdrCalcNext>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	461a      	mov	r2, r3
 800ec00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec04:	f362 1386 	bfi	r3, r2, #6, #1
 800ec08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800ec0c:	7afa      	ldrb	r2, [r7, #11]
 800ec0e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ec12:	893b      	ldrh	r3, [r7, #8]
 800ec14:	9300      	str	r3, [sp, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f000 fc2d 	bl	800f478 <PrepareFrame>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ec24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <Send+0x158>
 800ec2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec30:	2b0a      	cmp	r3, #10
 800ec32:	d107      	bne.n	800ec44 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800ec34:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 f96d 	bl	800ef18 <ScheduleTx>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800ec44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00a      	beq.n	800ec62 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800ec4c:	4a0f      	ldr	r2, [pc, #60]	; (800ec8c <Send+0x1b0>)
 800ec4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ec52:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800ec56:	4a0d      	ldr	r2, [pc, #52]	; (800ec8c <Send+0x1b0>)
 800ec58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ec5c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800ec60:	e00d      	b.n	800ec7e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800ec62:	4b0a      	ldr	r3, [pc, #40]	; (800ec8c <Send+0x1b0>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	4a07      	ldr	r2, [pc, #28]	; (800ec8c <Send+0x1b0>)
 800ec6e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ec70:	f002 fe70 	bl	8011954 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ec7a:	2313      	movs	r3, #19
 800ec7c:	e001      	b.n	800ec82 <Send+0x1a6>
        }
    }
    return status;
 800ec7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3730      	adds	r7, #48	; 0x30
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20000b50 	.word	0x20000b50
 800ec90:	20000644 	.word	0x20000644
 800ec94:	20000b88 	.word	0x20000b88
 800ec98:	20000b89 	.word	0x20000b89

0800ec9c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eca6:	2300      	movs	r3, #0
 800eca8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800ecb2:	79fb      	ldrb	r3, [r7, #7]
 800ecb4:	2bff      	cmp	r3, #255	; 0xff
 800ecb6:	d129      	bne.n	800ed0c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800ecb8:	2000      	movs	r0, #0
 800ecba:	f7ff f957 	bl	800df6c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ecbe:	4b1a      	ldr	r3, [pc, #104]	; (800ed28 <SendReJoinReq+0x8c>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ecc6:	4b18      	ldr	r3, [pc, #96]	; (800ed28 <SendReJoinReq+0x8c>)
 800ecc8:	4a18      	ldr	r2, [pc, #96]	; (800ed2c <SendReJoinReq+0x90>)
 800ecca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ecce:	4b16      	ldr	r3, [pc, #88]	; (800ed28 <SendReJoinReq+0x8c>)
 800ecd0:	22ff      	movs	r2, #255	; 0xff
 800ecd2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ecd6:	7b3b      	ldrb	r3, [r7, #12]
 800ecd8:	f36f 1347 	bfc	r3, #5, #3
 800ecdc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ecde:	7b3a      	ldrb	r2, [r7, #12]
 800ece0:	4b11      	ldr	r3, [pc, #68]	; (800ed28 <SendReJoinReq+0x8c>)
 800ece2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ece6:	f7fc fb85 	bl	800b3f4 <SecureElementGetJoinEui>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2208      	movs	r2, #8
 800ecee:	4619      	mov	r1, r3
 800ecf0:	480f      	ldr	r0, [pc, #60]	; (800ed30 <SendReJoinReq+0x94>)
 800ecf2:	f006 fe76 	bl	80159e2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ecf6:	f7fc fb5b 	bl	800b3b0 <SecureElementGetDevEui>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2208      	movs	r2, #8
 800ecfe:	4619      	mov	r1, r3
 800ed00:	480c      	ldr	r0, [pc, #48]	; (800ed34 <SendReJoinReq+0x98>)
 800ed02:	f006 fe6e 	bl	80159e2 <memcpy1>

            allowDelayedTx = false;
 800ed06:	2300      	movs	r3, #0
 800ed08:	73fb      	strb	r3, [r7, #15]

            break;
 800ed0a:	e002      	b.n	800ed12 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	73bb      	strb	r3, [r7, #14]
            break;
 800ed10:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f000 f8ff 	bl	800ef18 <ScheduleTx>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73bb      	strb	r3, [r7, #14]
    return status;
 800ed1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3710      	adds	r7, #16
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	20000644 	.word	0x20000644
 800ed2c:	20000646 	.word	0x20000646
 800ed30:	20000752 	.word	0x20000752
 800ed34:	2000075a 	.word	0x2000075a

0800ed38 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ed3c:	f002 fbe7 	bl	801150e <LoRaMacClassBIsBeaconExpected>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ed46:	230e      	movs	r3, #14
 800ed48:	e013      	b.n	800ed72 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ed4a:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <CheckForClassBCollision+0x40>)
 800ed4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d10d      	bne.n	800ed70 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ed54:	f002 fbe2 	bl	801151c <LoRaMacClassBIsPingExpected>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ed5e:	230f      	movs	r3, #15
 800ed60:	e007      	b.n	800ed72 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ed62:	f002 fbe2 	bl	801152a <LoRaMacClassBIsMulticastExpected>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ed6c:	230f      	movs	r3, #15
 800ed6e:	e000      	b.n	800ed72 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000b50 	.word	0x20000b50

0800ed7c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800ed7c:	b590      	push	{r4, r7, lr}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ed82:	4b2d      	ldr	r3, [pc, #180]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ed84:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ed88:	4b2b      	ldr	r3, [pc, #172]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ed8a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed8e:	4b2a      	ldr	r3, [pc, #168]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ed90:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800ed94:	4b28      	ldr	r3, [pc, #160]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ed96:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800ed9a:	4b27      	ldr	r3, [pc, #156]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ed9c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800eda0:	b25b      	sxtb	r3, r3
 800eda2:	f004 fc72 	bl	801368a <RegionApplyDrOffset>
 800eda6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eda8:	b259      	sxtb	r1, r3
 800edaa:	4b23      	ldr	r3, [pc, #140]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800edb0:	4b21      	ldr	r3, [pc, #132]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb4:	4821      	ldr	r0, [pc, #132]	; (800ee3c <ComputeRxWindowParameters+0xc0>)
 800edb6:	9000      	str	r0, [sp, #0]
 800edb8:	4620      	mov	r0, r4
 800edba:	f004 fb76 	bl	80134aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800edbe:	4b1e      	ldr	r3, [pc, #120]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edc0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800edc4:	4b1c      	ldr	r3, [pc, #112]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edc6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800edca:	b259      	sxtb	r1, r3
 800edcc:	4b1a      	ldr	r3, [pc, #104]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800edd2:	4b19      	ldr	r3, [pc, #100]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd6:	4c1a      	ldr	r4, [pc, #104]	; (800ee40 <ComputeRxWindowParameters+0xc4>)
 800edd8:	9400      	str	r4, [sp, #0]
 800edda:	f004 fb66 	bl	80134aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800edde:	4b16      	ldr	r3, [pc, #88]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ede0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ede2:	4a18      	ldr	r2, [pc, #96]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800ede4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ede8:	4413      	add	r3, r2
 800edea:	4a16      	ldr	r2, [pc, #88]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800edec:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800edf0:	4b11      	ldr	r3, [pc, #68]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800edf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edf4:	4a13      	ldr	r2, [pc, #76]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800edf6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800edfa:	4413      	add	r3, r2
 800edfc:	4a11      	ldr	r2, [pc, #68]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800edfe:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ee02:	4b0d      	ldr	r3, [pc, #52]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ee04:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d111      	bne.n	800ee30 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ee0c:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ee0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee10:	4a0c      	ldr	r2, [pc, #48]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800ee12:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ee16:	4413      	add	r3, r2
 800ee18:	4a0a      	ldr	r2, [pc, #40]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800ee1a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ee1e:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <ComputeRxWindowParameters+0xbc>)
 800ee20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee22:	4a08      	ldr	r2, [pc, #32]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800ee24:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800ee28:	4413      	add	r3, r2
 800ee2a:	4a06      	ldr	r2, [pc, #24]	; (800ee44 <ComputeRxWindowParameters+0xc8>)
 800ee2c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800ee30:	bf00      	nop
 800ee32:	3704      	adds	r7, #4
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd90      	pop	{r4, r7, pc}
 800ee38:	20000b50 	.word	0x20000b50
 800ee3c:	200009fc 	.word	0x200009fc
 800ee40:	20000a10 	.word	0x20000a10
 800ee44:	20000644 	.word	0x20000644

0800ee48 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ee52:	4b13      	ldr	r3, [pc, #76]	; (800eea0 <VerifyTxFrame+0x58>)
 800ee54:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01b      	beq.n	800ee94 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ee5c:	1d3b      	adds	r3, r7, #4
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f002 fdbe 	bl	80119e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ee6a:	2313      	movs	r3, #19
 800ee6c:	e013      	b.n	800ee96 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <VerifyTxFrame+0x5c>)
 800ee70:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ee74:	4a0a      	ldr	r2, [pc, #40]	; (800eea0 <VerifyTxFrame+0x58>)
 800ee76:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	b2d2      	uxtb	r2, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff f96c 	bl	800e15c <ValidatePayloadLength>
 800ee84:	4603      	mov	r3, r0
 800ee86:	f083 0301 	eor.w	r3, r3, #1
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ee90:	2308      	movs	r3, #8
 800ee92:	e000      	b.n	800ee96 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	20000b50 	.word	0x20000b50
 800eea4:	20000644 	.word	0x20000644

0800eea8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800eeae:	4b18      	ldr	r3, [pc, #96]	; (800ef10 <SerializeTxFrame+0x68>)
 800eeb0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <SerializeTxFrame+0x16>
 800eeb8:	2b04      	cmp	r3, #4
 800eeba:	d011      	beq.n	800eee0 <SerializeTxFrame+0x38>
 800eebc:	e021      	b.n	800ef02 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800eebe:	4815      	ldr	r0, [pc, #84]	; (800ef14 <SerializeTxFrame+0x6c>)
 800eec0:	f004 f8f3 	bl	80130aa <LoRaMacSerializerJoinRequest>
 800eec4:	4603      	mov	r3, r0
 800eec6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800eec8:	79fb      	ldrb	r3, [r7, #7]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800eece:	2311      	movs	r3, #17
 800eed0:	e01a      	b.n	800ef08 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800eed2:	4b0f      	ldr	r3, [pc, #60]	; (800ef10 <SerializeTxFrame+0x68>)
 800eed4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	4b0d      	ldr	r3, [pc, #52]	; (800ef10 <SerializeTxFrame+0x68>)
 800eedc:	801a      	strh	r2, [r3, #0]
            break;
 800eede:	e012      	b.n	800ef06 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800eee0:	480c      	ldr	r0, [pc, #48]	; (800ef14 <SerializeTxFrame+0x6c>)
 800eee2:	f004 f964 	bl	80131ae <LoRaMacSerializerData>
 800eee6:	4603      	mov	r3, r0
 800eee8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800eeea:	79fb      	ldrb	r3, [r7, #7]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d001      	beq.n	800eef4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800eef0:	2311      	movs	r3, #17
 800eef2:	e009      	b.n	800ef08 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800eef4:	4b06      	ldr	r3, [pc, #24]	; (800ef10 <SerializeTxFrame+0x68>)
 800eef6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	4b04      	ldr	r3, [pc, #16]	; (800ef10 <SerializeTxFrame+0x68>)
 800eefe:	801a      	strh	r2, [r3, #0]
            break;
 800ef00:	e001      	b.n	800ef06 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ef02:	2303      	movs	r3, #3
 800ef04:	e000      	b.n	800ef08 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	20000644 	.word	0x20000644
 800ef14:	2000074c 	.word	0x2000074c

0800ef18 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b090      	sub	sp, #64	; 0x40
 800ef1c:	af02      	add	r7, sp, #8
 800ef1e:	4603      	mov	r3, r0
 800ef20:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef22:	2303      	movs	r3, #3
 800ef24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800ef28:	f7ff ff06 	bl	800ed38 <CheckForClassBCollision>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ef32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d002      	beq.n	800ef40 <ScheduleTx+0x28>
    {
        return status;
 800ef3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef3e:	e08f      	b.n	800f060 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800ef40:	f000 f8fa 	bl	800f138 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800ef44:	f7ff ffb0 	bl	800eea8 <SerializeTxFrame>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ef4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d002      	beq.n	800ef5c <ScheduleTx+0x44>
    {
        return status;
 800ef56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef5a:	e081      	b.n	800f060 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800ef5c:	4b42      	ldr	r3, [pc, #264]	; (800f068 <ScheduleTx+0x150>)
 800ef5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef60:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ef62:	4b41      	ldr	r3, [pc, #260]	; (800f068 <ScheduleTx+0x150>)
 800ef64:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ef68:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ef6a:	4b3f      	ldr	r3, [pc, #252]	; (800f068 <ScheduleTx+0x150>)
 800ef6c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800ef70:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ef72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ef76:	4618      	mov	r0, r3
 800ef78:	f00a f94a 	bl	8019210 <SysTimeGetMcuTime>
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	4b3a      	ldr	r3, [pc, #232]	; (800f068 <ScheduleTx+0x150>)
 800ef80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ef84:	9200      	str	r2, [sp, #0]
 800ef86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ef8a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ef8e:	ca06      	ldmia	r2, {r1, r2}
 800ef90:	f00a f89f 	bl	80190d2 <SysTimeSub>
 800ef94:	f107 0320 	add.w	r3, r7, #32
 800ef98:	463a      	mov	r2, r7
 800ef9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef9e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800efa2:	4b31      	ldr	r3, [pc, #196]	; (800f068 <ScheduleTx+0x150>)
 800efa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800efa8:	2300      	movs	r3, #0
 800efaa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800efae:	2301      	movs	r3, #1
 800efb0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800efb2:	4b2e      	ldr	r3, [pc, #184]	; (800f06c <ScheduleTx+0x154>)
 800efb4:	881b      	ldrh	r3, [r3, #0]
 800efb6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800efb8:	4b2b      	ldr	r3, [pc, #172]	; (800f068 <ScheduleTx+0x150>)
 800efba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d104      	bne.n	800efcc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800efc2:	2301      	movs	r3, #1
 800efc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800efc8:	2300      	movs	r3, #0
 800efca:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800efcc:	4b26      	ldr	r3, [pc, #152]	; (800f068 <ScheduleTx+0x150>)
 800efce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800efd2:	f107 0114 	add.w	r1, r7, #20
 800efd6:	4b26      	ldr	r3, [pc, #152]	; (800f070 <ScheduleTx+0x158>)
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	4b26      	ldr	r3, [pc, #152]	; (800f074 <ScheduleTx+0x15c>)
 800efdc:	4a26      	ldr	r2, [pc, #152]	; (800f078 <ScheduleTx+0x160>)
 800efde:	f004 fb2a 	bl	8013636 <RegionNextChannel>
 800efe2:	4603      	mov	r3, r0
 800efe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800efe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efec:	2b00      	cmp	r3, #0
 800efee:	d022      	beq.n	800f036 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800eff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eff4:	2b0b      	cmp	r3, #11
 800eff6:	d11b      	bne.n	800f030 <ScheduleTx+0x118>
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d018      	beq.n	800f030 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800effe:	4b1b      	ldr	r3, [pc, #108]	; (800f06c <ScheduleTx+0x154>)
 800f000:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800f004:	2b00      	cmp	r3, #0
 800f006:	d011      	beq.n	800f02c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f008:	4b18      	ldr	r3, [pc, #96]	; (800f06c <ScheduleTx+0x154>)
 800f00a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f00e:	f043 0320 	orr.w	r3, r3, #32
 800f012:	4a16      	ldr	r2, [pc, #88]	; (800f06c <ScheduleTx+0x154>)
 800f014:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f018:	4b14      	ldr	r3, [pc, #80]	; (800f06c <ScheduleTx+0x154>)
 800f01a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800f01e:	4619      	mov	r1, r3
 800f020:	4816      	ldr	r0, [pc, #88]	; (800f07c <ScheduleTx+0x164>)
 800f022:	f00a fe99 	bl	8019d58 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800f026:	4815      	ldr	r0, [pc, #84]	; (800f07c <ScheduleTx+0x164>)
 800f028:	f00a fdb8 	bl	8019b9c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	e017      	b.n	800f060 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f034:	e014      	b.n	800f060 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800f036:	f7ff fea1 	bl	800ed7c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800f03a:	f7ff ff05 	bl	800ee48 <VerifyTxFrame>
 800f03e:	4603      	mov	r3, r0
 800f040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <ScheduleTx+0x13a>
    {
        return status;
 800f04c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f050:	e006      	b.n	800f060 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800f052:	4b06      	ldr	r3, [pc, #24]	; (800f06c <ScheduleTx+0x154>)
 800f054:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f058:	4618      	mov	r0, r3
 800f05a:	f000 fb29 	bl	800f6b0 <SendFrameOnChannel>
 800f05e:	4603      	mov	r3, r0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3738      	adds	r7, #56	; 0x38
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	20000b50 	.word	0x20000b50
 800f06c:	20000644 	.word	0x20000644
 800f070:	20000b80 	.word	0x20000b80
 800f074:	20000acc 	.word	0x20000acc
 800f078:	20000a59 	.word	0x20000a59
 800f07c:	200009ac 	.word	0x200009ac

0800f080 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	460a      	mov	r2, r1
 800f08a:	71fb      	strb	r3, [r7, #7]
 800f08c:	4613      	mov	r3, r2
 800f08e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f090:	2313      	movs	r3, #19
 800f092:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800f098:	4b25      	ldr	r3, [pc, #148]	; (800f130 <SecureFrame+0xb0>)
 800f09a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d002      	beq.n	800f0a8 <SecureFrame+0x28>
 800f0a2:	2b04      	cmp	r3, #4
 800f0a4:	d011      	beq.n	800f0ca <SecureFrame+0x4a>
 800f0a6:	e03b      	b.n	800f120 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f0a8:	4822      	ldr	r0, [pc, #136]	; (800f134 <SecureFrame+0xb4>)
 800f0aa:	f003 fbc7 	bl	801283c <LoRaMacCryptoPrepareJoinRequest>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d001      	beq.n	800f0bc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0b8:	2311      	movs	r3, #17
 800f0ba:	e034      	b.n	800f126 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f0bc:	4b1c      	ldr	r3, [pc, #112]	; (800f130 <SecureFrame+0xb0>)
 800f0be:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	4b1a      	ldr	r3, [pc, #104]	; (800f130 <SecureFrame+0xb0>)
 800f0c6:	801a      	strh	r2, [r3, #0]
            break;
 800f0c8:	e02c      	b.n	800f124 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f0ca:	f107 0308 	add.w	r3, r7, #8
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f003 face 	bl	8012670 <LoRaMacCryptoGetFCntUp>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f0da:	2312      	movs	r3, #18
 800f0dc:	e023      	b.n	800f126 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800f0de:	4b14      	ldr	r3, [pc, #80]	; (800f130 <SecureFrame+0xb0>)
 800f0e0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d104      	bne.n	800f0f2 <SecureFrame+0x72>
 800f0e8:	4b11      	ldr	r3, [pc, #68]	; (800f130 <SecureFrame+0xb0>)
 800f0ea:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d902      	bls.n	800f0f8 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f0f8:	68b8      	ldr	r0, [r7, #8]
 800f0fa:	79ba      	ldrb	r2, [r7, #6]
 800f0fc:	79f9      	ldrb	r1, [r7, #7]
 800f0fe:	4b0d      	ldr	r3, [pc, #52]	; (800f134 <SecureFrame+0xb4>)
 800f100:	f003 fcb4 	bl	8012a6c <LoRaMacCryptoSecureMessage>
 800f104:	4603      	mov	r3, r0
 800f106:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f108:	7bfb      	ldrb	r3, [r7, #15]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f10e:	2311      	movs	r3, #17
 800f110:	e009      	b.n	800f126 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f112:	4b07      	ldr	r3, [pc, #28]	; (800f130 <SecureFrame+0xb0>)
 800f114:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f118:	b29a      	uxth	r2, r3
 800f11a:	4b05      	ldr	r3, [pc, #20]	; (800f130 <SecureFrame+0xb0>)
 800f11c:	801a      	strh	r2, [r3, #0]
            break;
 800f11e:	e001      	b.n	800f124 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f120:	2303      	movs	r3, #3
 800f122:	e000      	b.n	800f126 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20000644 	.word	0x20000644
 800f134:	2000074c 	.word	0x2000074c

0800f138 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800f138:	b480      	push	{r7}
 800f13a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800f13c:	4b09      	ldr	r3, [pc, #36]	; (800f164 <CalculateBackOff+0x2c>)
 800f13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10a      	bne.n	800f15a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800f144:	4b07      	ldr	r3, [pc, #28]	; (800f164 <CalculateBackOff+0x2c>)
 800f146:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800f14a:	3b01      	subs	r3, #1
 800f14c:	4a06      	ldr	r2, [pc, #24]	; (800f168 <CalculateBackOff+0x30>)
 800f14e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800f152:	fb02 f303 	mul.w	r3, r2, r3
 800f156:	4a03      	ldr	r2, [pc, #12]	; (800f164 <CalculateBackOff+0x2c>)
 800f158:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800f15a:	bf00      	nop
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bc80      	pop	{r7}
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	20000b50 	.word	0x20000b50
 800f168:	20000644 	.word	0x20000644

0800f16c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	7139      	strb	r1, [r7, #4]
 800f176:	71fb      	strb	r3, [r7, #7]
 800f178:	4613      	mov	r3, r2
 800f17a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800f17c:	79fb      	ldrb	r3, [r7, #7]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d002      	beq.n	800f188 <RemoveMacCommands+0x1c>
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d10d      	bne.n	800f1a4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800f188:	79bb      	ldrb	r3, [r7, #6]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d108      	bne.n	800f1a0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800f18e:	793b      	ldrb	r3, [r7, #4]
 800f190:	f003 0320 	and.w	r3, r3, #32
 800f194:	b2db      	uxtb	r3, r3
 800f196:	2b00      	cmp	r3, #0
 800f198:	d004      	beq.n	800f1a4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800f19a:	f002 fbff 	bl	801199c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800f19e:	e001      	b.n	800f1a4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800f1a0:	f002 fbfc 	bl	801199c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800f1a4:	bf00      	nop
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <ResetMacParameters>:

static void ResetMacParameters( void )
{
 800f1ac:	b5b0      	push	{r4, r5, r7, lr}
 800f1ae:	b08e      	sub	sp, #56	; 0x38
 800f1b0:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f1b2:	4b68      	ldr	r3, [pc, #416]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f1ba:	4b66      	ldr	r3, [pc, #408]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800f1c0:	4b65      	ldr	r3, [pc, #404]	; (800f358 <ResetMacParameters+0x1ac>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800f1c8:	4b63      	ldr	r3, [pc, #396]	; (800f358 <ResetMacParameters+0x1ac>)
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f1d0:	4b61      	ldr	r3, [pc, #388]	; (800f358 <ResetMacParameters+0x1ac>)
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800f1d8:	4b5f      	ldr	r3, [pc, #380]	; (800f358 <ResetMacParameters+0x1ac>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800f1e0:	4b5c      	ldr	r3, [pc, #368]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f1e8:	4b5a      	ldr	r3, [pc, #360]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f1f0:	4b58      	ldr	r3, [pc, #352]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1f2:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 800f1f6:	4b57      	ldr	r3, [pc, #348]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f1fc:	4b55      	ldr	r3, [pc, #340]	; (800f354 <ResetMacParameters+0x1a8>)
 800f1fe:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800f202:	4b54      	ldr	r3, [pc, #336]	; (800f354 <ResetMacParameters+0x1a8>)
 800f204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f208:	4b52      	ldr	r3, [pc, #328]	; (800f354 <ResetMacParameters+0x1a8>)
 800f20a:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 800f20e:	4b51      	ldr	r3, [pc, #324]	; (800f354 <ResetMacParameters+0x1a8>)
 800f210:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f214:	4b4f      	ldr	r3, [pc, #316]	; (800f354 <ResetMacParameters+0x1a8>)
 800f216:	4a4f      	ldr	r2, [pc, #316]	; (800f354 <ResetMacParameters+0x1a8>)
 800f218:	3364      	adds	r3, #100	; 0x64
 800f21a:	32a8      	adds	r2, #168	; 0xa8
 800f21c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f220:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f224:	4b4b      	ldr	r3, [pc, #300]	; (800f354 <ResetMacParameters+0x1a8>)
 800f226:	4a4b      	ldr	r2, [pc, #300]	; (800f354 <ResetMacParameters+0x1a8>)
 800f228:	336c      	adds	r3, #108	; 0x6c
 800f22a:	32b0      	adds	r2, #176	; 0xb0
 800f22c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f230:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f234:	4b47      	ldr	r3, [pc, #284]	; (800f354 <ResetMacParameters+0x1a8>)
 800f236:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800f23a:	4b46      	ldr	r3, [pc, #280]	; (800f354 <ResetMacParameters+0x1a8>)
 800f23c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f240:	4b44      	ldr	r3, [pc, #272]	; (800f354 <ResetMacParameters+0x1a8>)
 800f242:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 800f246:	4b43      	ldr	r3, [pc, #268]	; (800f354 <ResetMacParameters+0x1a8>)
 800f248:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f24c:	4b41      	ldr	r3, [pc, #260]	; (800f354 <ResetMacParameters+0x1a8>)
 800f24e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f252:	4a40      	ldr	r2, [pc, #256]	; (800f354 <ResetMacParameters+0x1a8>)
 800f254:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f256:	4b3f      	ldr	r3, [pc, #252]	; (800f354 <ResetMacParameters+0x1a8>)
 800f258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f25c:	4a3d      	ldr	r2, [pc, #244]	; (800f354 <ResetMacParameters+0x1a8>)
 800f25e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800f260:	4b3d      	ldr	r3, [pc, #244]	; (800f358 <ResetMacParameters+0x1ac>)
 800f262:	2200      	movs	r2, #0
 800f264:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800f268:	4b3a      	ldr	r3, [pc, #232]	; (800f354 <ResetMacParameters+0x1a8>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f270:	2301      	movs	r3, #1
 800f272:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f274:	4b39      	ldr	r3, [pc, #228]	; (800f35c <ResetMacParameters+0x1b0>)
 800f276:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f278:	4b39      	ldr	r3, [pc, #228]	; (800f360 <ResetMacParameters+0x1b4>)
 800f27a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f27c:	4b35      	ldr	r3, [pc, #212]	; (800f354 <ResetMacParameters+0x1a8>)
 800f27e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f282:	1d3a      	adds	r2, r7, #4
 800f284:	4611      	mov	r1, r2
 800f286:	4618      	mov	r0, r3
 800f288:	f004 f8c1 	bl	801340e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800f28c:	4b32      	ldr	r3, [pc, #200]	; (800f358 <ResetMacParameters+0x1ac>)
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f294:	4b30      	ldr	r3, [pc, #192]	; (800f358 <ResetMacParameters+0x1ac>)
 800f296:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f29a:	4b2f      	ldr	r3, [pc, #188]	; (800f358 <ResetMacParameters+0x1ac>)
 800f29c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f2a0:	4b2c      	ldr	r3, [pc, #176]	; (800f354 <ResetMacParameters+0x1a8>)
 800f2a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2a4:	4a2c      	ldr	r2, [pc, #176]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2a6:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f2aa:	4b2a      	ldr	r3, [pc, #168]	; (800f354 <ResetMacParameters+0x1a8>)
 800f2ac:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f2b0:	4b29      	ldr	r3, [pc, #164]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2b2:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f2b6:	4b27      	ldr	r3, [pc, #156]	; (800f354 <ResetMacParameters+0x1a8>)
 800f2b8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f2bc:	4b26      	ldr	r3, [pc, #152]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2be:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f2c2:	4b25      	ldr	r3, [pc, #148]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f2ca:	4b23      	ldr	r3, [pc, #140]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f2d2:	4a21      	ldr	r2, [pc, #132]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2d4:	4b20      	ldr	r3, [pc, #128]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2d6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800f2da:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800f2de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2e2:	682b      	ldr	r3, [r5, #0]
 800f2e4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f2e6:	4b1c      	ldr	r3, [pc, #112]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f2ee:	4b1a      	ldr	r3, [pc, #104]	; (800f358 <ResetMacParameters+0x1ac>)
 800f2f0:	2202      	movs	r2, #2
 800f2f2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800f2fe:	4b16      	ldr	r3, [pc, #88]	; (800f358 <ResetMacParameters+0x1ac>)
 800f300:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f304:	2b00      	cmp	r3, #0
 800f306:	d009      	beq.n	800f31c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f308:	4b13      	ldr	r3, [pc, #76]	; (800f358 <ResetMacParameters+0x1ac>)
 800f30a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f312:	4b11      	ldr	r3, [pc, #68]	; (800f358 <ResetMacParameters+0x1ac>)
 800f314:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f31c:	4b11      	ldr	r3, [pc, #68]	; (800f364 <ResetMacParameters+0x1b8>)
 800f31e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f320:	4b11      	ldr	r3, [pc, #68]	; (800f368 <ResetMacParameters+0x1bc>)
 800f322:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f324:	4b11      	ldr	r3, [pc, #68]	; (800f36c <ResetMacParameters+0x1c0>)
 800f326:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f328:	4b11      	ldr	r3, [pc, #68]	; (800f370 <ResetMacParameters+0x1c4>)
 800f32a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f32c:	4b11      	ldr	r3, [pc, #68]	; (800f374 <ResetMacParameters+0x1c8>)
 800f32e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f330:	4b11      	ldr	r3, [pc, #68]	; (800f378 <ResetMacParameters+0x1cc>)
 800f332:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f334:	4b11      	ldr	r3, [pc, #68]	; (800f37c <ResetMacParameters+0x1d0>)
 800f336:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f338:	4b11      	ldr	r3, [pc, #68]	; (800f380 <ResetMacParameters+0x1d4>)
 800f33a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f33c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f340:	f107 0310 	add.w	r3, r7, #16
 800f344:	4a0f      	ldr	r2, [pc, #60]	; (800f384 <ResetMacParameters+0x1d8>)
 800f346:	4618      	mov	r0, r3
 800f348:	f002 f88a 	bl	8011460 <LoRaMacClassBInit>
}
 800f34c:	bf00      	nop
 800f34e:	3738      	adds	r7, #56	; 0x38
 800f350:	46bd      	mov	sp, r7
 800f352:	bdb0      	pop	{r4, r5, r7, pc}
 800f354:	20000b50 	.word	0x20000b50
 800f358:	20000644 	.word	0x20000644
 800f35c:	20000d30 	.word	0x20000d30
 800f360:	20000dc4 	.word	0x20000dc4
 800f364:	20000aa4 	.word	0x20000aa4
 800f368:	20000a60 	.word	0x20000a60
 800f36c:	20000a90 	.word	0x20000a90
 800f370:	20000ac9 	.word	0x20000ac9
 800f374:	20000c24 	.word	0x20000c24
 800f378:	20000b90 	.word	0x20000b90
 800f37c:	20000b94 	.word	0x20000b94
 800f380:	20000c28 	.word	0x20000c28
 800f384:	20001260 	.word	0x20001260

0800f388 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f00a fc70 	bl	8019c78 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f398:	4b11      	ldr	r3, [pc, #68]	; (800f3e0 <RxWindowSetup+0x58>)
 800f39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f39e:	4b11      	ldr	r3, [pc, #68]	; (800f3e4 <RxWindowSetup+0x5c>)
 800f3a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3a4:	4a10      	ldr	r2, [pc, #64]	; (800f3e8 <RxWindowSetup+0x60>)
 800f3a6:	6839      	ldr	r1, [r7, #0]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f004 f898 	bl	80134de <RegionRxConfig>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d010      	beq.n	800f3d6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f3b4:	4b0d      	ldr	r3, [pc, #52]	; (800f3ec <RxWindowSetup+0x64>)
 800f3b6:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 800f3ba:	4b0c      	ldr	r3, [pc, #48]	; (800f3ec <RxWindowSetup+0x64>)
 800f3bc:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f3c0:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <RxWindowSetup+0x58>)
 800f3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c4:	4a07      	ldr	r2, [pc, #28]	; (800f3e4 <RxWindowSetup+0x5c>)
 800f3c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	7cda      	ldrb	r2, [r3, #19]
 800f3d0:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <RxWindowSetup+0x64>)
 800f3d2:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800f3d6:	bf00      	nop
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	0801b950 	.word	0x0801b950
 800f3e4:	20000b50 	.word	0x20000b50
 800f3e8:	20000a64 	.word	0x20000a64
 800f3ec:	20000644 	.word	0x20000644

0800f3f0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f3f0:	b590      	push	{r4, r7, lr}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f3f6:	4b1b      	ldr	r3, [pc, #108]	; (800f464 <OpenContinuousRxCWindow+0x74>)
 800f3f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f3fc:	4b19      	ldr	r3, [pc, #100]	; (800f464 <OpenContinuousRxCWindow+0x74>)
 800f3fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f402:	b259      	sxtb	r1, r3
 800f404:	4b17      	ldr	r3, [pc, #92]	; (800f464 <OpenContinuousRxCWindow+0x74>)
 800f406:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f40a:	4b16      	ldr	r3, [pc, #88]	; (800f464 <OpenContinuousRxCWindow+0x74>)
 800f40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f40e:	4c16      	ldr	r4, [pc, #88]	; (800f468 <OpenContinuousRxCWindow+0x78>)
 800f410:	9400      	str	r4, [sp, #0]
 800f412:	f004 f84a 	bl	80134aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f416:	4b15      	ldr	r3, [pc, #84]	; (800f46c <OpenContinuousRxCWindow+0x7c>)
 800f418:	2202      	movs	r2, #2
 800f41a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f41e:	4b13      	ldr	r3, [pc, #76]	; (800f46c <OpenContinuousRxCWindow+0x7c>)
 800f420:	2201      	movs	r2, #1
 800f422:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f426:	4b0f      	ldr	r3, [pc, #60]	; (800f464 <OpenContinuousRxCWindow+0x74>)
 800f428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f42c:	4a10      	ldr	r2, [pc, #64]	; (800f470 <OpenContinuousRxCWindow+0x80>)
 800f42e:	490e      	ldr	r1, [pc, #56]	; (800f468 <OpenContinuousRxCWindow+0x78>)
 800f430:	4618      	mov	r0, r3
 800f432:	f004 f854 	bl	80134de <RegionRxConfig>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00f      	beq.n	800f45c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f43c:	4b0b      	ldr	r3, [pc, #44]	; (800f46c <OpenContinuousRxCWindow+0x7c>)
 800f43e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 800f442:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <OpenContinuousRxCWindow+0x7c>)
 800f444:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 800f448:	4b0a      	ldr	r3, [pc, #40]	; (800f474 <OpenContinuousRxCWindow+0x84>)
 800f44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44c:	2000      	movs	r0, #0
 800f44e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f450:	4b06      	ldr	r3, [pc, #24]	; (800f46c <OpenContinuousRxCWindow+0x7c>)
 800f452:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800f456:	4b05      	ldr	r3, [pc, #20]	; (800f46c <OpenContinuousRxCWindow+0x7c>)
 800f458:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800f45c:	bf00      	nop
 800f45e:	3704      	adds	r7, #4
 800f460:	46bd      	mov	sp, r7
 800f462:	bd90      	pop	{r4, r7, pc}
 800f464:	20000b50 	.word	0x20000b50
 800f468:	20000a24 	.word	0x20000a24
 800f46c:	20000644 	.word	0x20000644
 800f470:	20000a64 	.word	0x20000a64
 800f474:	0801b950 	.word	0x0801b950

0800f478 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	603b      	str	r3, [r7, #0]
 800f484:	4613      	mov	r3, r2
 800f486:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f488:	4b82      	ldr	r3, [pc, #520]	; (800f694 <PrepareFrame+0x21c>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f48e:	4b81      	ldr	r3, [pc, #516]	; (800f694 <PrepareFrame+0x21c>)
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f4ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	4879      	ldr	r0, [pc, #484]	; (800f698 <PrepareFrame+0x220>)
 800f4b4:	f006 fa95 	bl	80159e2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f4b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	4b75      	ldr	r3, [pc, #468]	; (800f694 <PrepareFrame+0x21c>)
 800f4be:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	781a      	ldrb	r2, [r3, #0]
 800f4c6:	4b73      	ldr	r3, [pc, #460]	; (800f694 <PrepareFrame+0x21c>)
 800f4c8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	2b07      	cmp	r3, #7
 800f4d6:	f000 80b9 	beq.w	800f64c <PrepareFrame+0x1d4>
 800f4da:	2b07      	cmp	r3, #7
 800f4dc:	f300 80d0 	bgt.w	800f680 <PrepareFrame+0x208>
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d006      	beq.n	800f4f2 <PrepareFrame+0x7a>
 800f4e4:	2b04      	cmp	r3, #4
 800f4e6:	f040 80cb 	bne.w	800f680 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f4ea:	4b6a      	ldr	r3, [pc, #424]	; (800f694 <PrepareFrame+0x21c>)
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f4f2:	4b68      	ldr	r3, [pc, #416]	; (800f694 <PrepareFrame+0x21c>)
 800f4f4:	2204      	movs	r2, #4
 800f4f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f4fa:	4b66      	ldr	r3, [pc, #408]	; (800f694 <PrepareFrame+0x21c>)
 800f4fc:	4a67      	ldr	r2, [pc, #412]	; (800f69c <PrepareFrame+0x224>)
 800f4fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f502:	4b64      	ldr	r3, [pc, #400]	; (800f694 <PrepareFrame+0x21c>)
 800f504:	22ff      	movs	r2, #255	; 0xff
 800f506:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	781a      	ldrb	r2, [r3, #0]
 800f50e:	4b61      	ldr	r3, [pc, #388]	; (800f694 <PrepareFrame+0x21c>)
 800f510:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f514:	4a5f      	ldr	r2, [pc, #380]	; (800f694 <PrepareFrame+0x21c>)
 800f516:	79fb      	ldrb	r3, [r7, #7]
 800f518:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800f51c:	4b60      	ldr	r3, [pc, #384]	; (800f6a0 <PrepareFrame+0x228>)
 800f51e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f522:	4a5c      	ldr	r2, [pc, #368]	; (800f694 <PrepareFrame+0x21c>)
 800f524:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	781a      	ldrb	r2, [r3, #0]
 800f52c:	4b59      	ldr	r3, [pc, #356]	; (800f694 <PrepareFrame+0x21c>)
 800f52e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800f532:	4b58      	ldr	r3, [pc, #352]	; (800f694 <PrepareFrame+0x21c>)
 800f534:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800f538:	4b56      	ldr	r3, [pc, #344]	; (800f694 <PrepareFrame+0x21c>)
 800f53a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800f53e:	4b55      	ldr	r3, [pc, #340]	; (800f694 <PrepareFrame+0x21c>)
 800f540:	4a55      	ldr	r2, [pc, #340]	; (800f698 <PrepareFrame+0x220>)
 800f542:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f546:	f107 0318 	add.w	r3, r7, #24
 800f54a:	4618      	mov	r0, r3
 800f54c:	f003 f890 	bl	8012670 <LoRaMacCryptoGetFCntUp>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f556:	2312      	movs	r3, #18
 800f558:	e098      	b.n	800f68c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	4b4d      	ldr	r3, [pc, #308]	; (800f694 <PrepareFrame+0x21c>)
 800f560:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800f564:	4b4b      	ldr	r3, [pc, #300]	; (800f694 <PrepareFrame+0x21c>)
 800f566:	2200      	movs	r2, #0
 800f568:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800f56c:	4b49      	ldr	r3, [pc, #292]	; (800f694 <PrepareFrame+0x21c>)
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	4a47      	ldr	r2, [pc, #284]	; (800f694 <PrepareFrame+0x21c>)
 800f578:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f57c:	f107 0314 	add.w	r3, r7, #20
 800f580:	4618      	mov	r0, r3
 800f582:	f002 fa2d 	bl	80119e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d001      	beq.n	800f590 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f58c:	2313      	movs	r3, #19
 800f58e:	e07d      	b.n	800f68c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d076      	beq.n	800f684 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800f596:	4b42      	ldr	r3, [pc, #264]	; (800f6a0 <PrepareFrame+0x228>)
 800f598:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fe fdb5 	bl	800e10c <GetMaxAppPayloadWithoutFOptsLength>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f5a6:	4b3b      	ldr	r3, [pc, #236]	; (800f694 <PrepareFrame+0x21c>)
 800f5a8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d01d      	beq.n	800f5ec <PrepareFrame+0x174>
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	2b0f      	cmp	r3, #15
 800f5b4:	d81a      	bhi.n	800f5ec <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800f5b6:	f107 0314 	add.w	r3, r7, #20
 800f5ba:	4a3a      	ldr	r2, [pc, #232]	; (800f6a4 <PrepareFrame+0x22c>)
 800f5bc:	4619      	mov	r1, r3
 800f5be:	200f      	movs	r0, #15
 800f5c0:	f002 fa24 	bl	8011a0c <LoRaMacCommandsSerializeCmds>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f5ca:	2313      	movs	r3, #19
 800f5cc:	e05e      	b.n	800f68c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	f003 030f 	and.w	r3, r3, #15
 800f5d4:	b2d9      	uxtb	r1, r3
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	7813      	ldrb	r3, [r2, #0]
 800f5da:	f361 0303 	bfi	r3, r1, #0, #4
 800f5de:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	781a      	ldrb	r2, [r3, #0]
 800f5e4:	4b2b      	ldr	r3, [pc, #172]	; (800f694 <PrepareFrame+0x21c>)
 800f5e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800f5ea:	e04b      	b.n	800f684 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f5ec:	4b29      	ldr	r3, [pc, #164]	; (800f694 <PrepareFrame+0x21c>)
 800f5ee:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d010      	beq.n	800f618 <PrepareFrame+0x1a0>
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b0f      	cmp	r3, #15
 800f5fa:	d90d      	bls.n	800f618 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f5fc:	7ffb      	ldrb	r3, [r7, #31]
 800f5fe:	f107 0114 	add.w	r1, r7, #20
 800f602:	4a29      	ldr	r2, [pc, #164]	; (800f6a8 <PrepareFrame+0x230>)
 800f604:	4618      	mov	r0, r3
 800f606:	f002 fa01 	bl	8011a0c <LoRaMacCommandsSerializeCmds>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d001      	beq.n	800f614 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f610:	2313      	movs	r3, #19
 800f612:	e03b      	b.n	800f68c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800f614:	230a      	movs	r3, #10
 800f616:	e039      	b.n	800f68c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f618:	7ffb      	ldrb	r3, [r7, #31]
 800f61a:	f107 0114 	add.w	r1, r7, #20
 800f61e:	4a22      	ldr	r2, [pc, #136]	; (800f6a8 <PrepareFrame+0x230>)
 800f620:	4618      	mov	r0, r3
 800f622:	f002 f9f3 	bl	8011a0c <LoRaMacCommandsSerializeCmds>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f62c:	2313      	movs	r3, #19
 800f62e:	e02d      	b.n	800f68c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800f630:	4b18      	ldr	r3, [pc, #96]	; (800f694 <PrepareFrame+0x21c>)
 800f632:	2200      	movs	r2, #0
 800f634:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800f638:	4b16      	ldr	r3, [pc, #88]	; (800f694 <PrepareFrame+0x21c>)
 800f63a:	4a1b      	ldr	r2, [pc, #108]	; (800f6a8 <PrepareFrame+0x230>)
 800f63c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	b2da      	uxtb	r2, r3
 800f644:	4b13      	ldr	r3, [pc, #76]	; (800f694 <PrepareFrame+0x21c>)
 800f646:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800f64a:	e01b      	b.n	800f684 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d01a      	beq.n	800f688 <PrepareFrame+0x210>
 800f652:	4b10      	ldr	r3, [pc, #64]	; (800f694 <PrepareFrame+0x21c>)
 800f654:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d015      	beq.n	800f688 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800f65c:	4813      	ldr	r0, [pc, #76]	; (800f6ac <PrepareFrame+0x234>)
 800f65e:	4b0d      	ldr	r3, [pc, #52]	; (800f694 <PrepareFrame+0x21c>)
 800f660:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f664:	b29b      	uxth	r3, r3
 800f666:	461a      	mov	r2, r3
 800f668:	6839      	ldr	r1, [r7, #0]
 800f66a:	f006 f9ba 	bl	80159e2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800f66e:	4b09      	ldr	r3, [pc, #36]	; (800f694 <PrepareFrame+0x21c>)
 800f670:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f674:	b29b      	uxth	r3, r3
 800f676:	3301      	adds	r3, #1
 800f678:	b29a      	uxth	r2, r3
 800f67a:	4b06      	ldr	r3, [pc, #24]	; (800f694 <PrepareFrame+0x21c>)
 800f67c:	801a      	strh	r2, [r3, #0]
            }
            break;
 800f67e:	e003      	b.n	800f688 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f680:	2302      	movs	r3, #2
 800f682:	e003      	b.n	800f68c <PrepareFrame+0x214>
            break;
 800f684:	bf00      	nop
 800f686:	e000      	b.n	800f68a <PrepareFrame+0x212>
            break;
 800f688:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3720      	adds	r7, #32
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	20000644 	.word	0x20000644
 800f698:	2000077c 	.word	0x2000077c
 800f69c:	20000646 	.word	0x20000646
 800f6a0:	20000b50 	.word	0x20000b50
 800f6a4:	2000075c 	.word	0x2000075c
 800f6a8:	20000ad0 	.word	0x20000ad0
 800f6ac:	20000647 	.word	0x20000647

0800f6b0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b08a      	sub	sp, #40	; 0x28
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f6c8:	4b47      	ldr	r3, [pc, #284]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f6ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f6ce:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f6d0:	4b45      	ldr	r3, [pc, #276]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f6d2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f6d6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f6d8:	4b43      	ldr	r3, [pc, #268]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f6da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6dc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f6de:	4b42      	ldr	r3, [pc, #264]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6e2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800f6e4:	4b41      	ldr	r3, [pc, #260]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f6e6:	881b      	ldrh	r3, [r3, #0]
 800f6e8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800f6ea:	4b3f      	ldr	r3, [pc, #252]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f6ec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f6f0:	f107 020f 	add.w	r2, r7, #15
 800f6f4:	f107 0110 	add.w	r1, r7, #16
 800f6f8:	4b3d      	ldr	r3, [pc, #244]	; (800f7f0 <SendFrameOnChannel+0x140>)
 800f6fa:	f003 ff05 	bl	8013508 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6fe:	4b3b      	ldr	r3, [pc, #236]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f700:	2201      	movs	r2, #1
 800f702:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f706:	4b38      	ldr	r3, [pc, #224]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f708:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	4b37      	ldr	r3, [pc, #220]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f710:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800f714:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800f718:	4b34      	ldr	r3, [pc, #208]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f71a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800f71e:	79fb      	ldrb	r3, [r7, #7]
 800f720:	4a32      	ldr	r2, [pc, #200]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f722:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f726:	4b31      	ldr	r3, [pc, #196]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f728:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f72c:	4a2f      	ldr	r2, [pc, #188]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f72e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f732:	4b2e      	ldr	r3, [pc, #184]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f734:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f738:	4a2c      	ldr	r2, [pc, #176]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f73a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800f73e:	f001 fefb 	bl	8011538 <LoRaMacClassBIsBeaconModeActive>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00b      	beq.n	800f760 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f748:	4b28      	ldr	r3, [pc, #160]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f74a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f74e:	4618      	mov	r0, r3
 800f750:	f001 ff5d 	bl	801160e <LoRaMacClassBIsUplinkCollision>
 800f754:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d001      	beq.n	800f760 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f75c:	2310      	movs	r3, #16
 800f75e:	e03e      	b.n	800f7de <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f760:	4b21      	ldr	r3, [pc, #132]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f762:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f766:	2b01      	cmp	r3, #1
 800f768:	d101      	bne.n	800f76e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800f76a:	f001 ff5a 	bl	8011622 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800f76e:	f001 fef4 	bl	801155a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800f772:	4b1d      	ldr	r3, [pc, #116]	; (800f7e8 <SendFrameOnChannel+0x138>)
 800f774:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	4a1c      	ldr	r2, [pc, #112]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f77c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800f780:	4611      	mov	r1, r2
 800f782:	4618      	mov	r0, r3
 800f784:	f7ff fc7c 	bl	800f080 <SecureFrame>
 800f788:	4603      	mov	r3, r0
 800f78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800f78e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f792:	2b00      	cmp	r3, #0
 800f794:	d002      	beq.n	800f79c <SendFrameOnChannel+0xec>
    {
        return status;
 800f796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f79a:	e020      	b.n	800f7de <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f79c:	4b13      	ldr	r3, [pc, #76]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f79e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f7a2:	f043 0302 	orr.w	r3, r3, #2
 800f7a6:	4a11      	ldr	r2, [pc, #68]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f7a8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800f7ac:	4b0f      	ldr	r3, [pc, #60]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f7ae:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f7b2:	f083 0301 	eor.w	r3, r3, #1
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d007      	beq.n	800f7cc <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f7be:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f7c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f7cc:	4b09      	ldr	r3, [pc, #36]	; (800f7f4 <SendFrameOnChannel+0x144>)
 800f7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d0:	4a06      	ldr	r2, [pc, #24]	; (800f7ec <SendFrameOnChannel+0x13c>)
 800f7d2:	8812      	ldrh	r2, [r2, #0]
 800f7d4:	b2d2      	uxtb	r2, r2
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	4807      	ldr	r0, [pc, #28]	; (800f7f8 <SendFrameOnChannel+0x148>)
 800f7da:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3728      	adds	r7, #40	; 0x28
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20000b50 	.word	0x20000b50
 800f7ec:	20000644 	.word	0x20000644
 800f7f0:	20000a5c 	.word	0x20000a5c
 800f7f4:	0801b950 	.word	0x0801b950
 800f7f8:	20000646 	.word	0x20000646

0800f7fc <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	4603      	mov	r3, r0
 800f804:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800f806:	4b15      	ldr	r3, [pc, #84]	; (800f85c <SetTxContinuousWave+0x60>)
 800f808:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f80c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f80e:	4b14      	ldr	r3, [pc, #80]	; (800f860 <SetTxContinuousWave+0x64>)
 800f810:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f814:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f816:	4b12      	ldr	r3, [pc, #72]	; (800f860 <SetTxContinuousWave+0x64>)
 800f818:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f81c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f81e:	4b10      	ldr	r3, [pc, #64]	; (800f860 <SetTxContinuousWave+0x64>)
 800f820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f822:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f824:	4b0e      	ldr	r3, [pc, #56]	; (800f860 <SetTxContinuousWave+0x64>)
 800f826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f828:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800f82a:	88fb      	ldrh	r3, [r7, #6]
 800f82c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800f82e:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <SetTxContinuousWave+0x64>)
 800f830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f834:	f107 0208 	add.w	r2, r7, #8
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f003 ff13 	bl	8013666 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f840:	4b06      	ldr	r3, [pc, #24]	; (800f85c <SetTxContinuousWave+0x60>)
 800f842:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f846:	f043 0302 	orr.w	r3, r3, #2
 800f84a:	4a04      	ldr	r2, [pc, #16]	; (800f85c <SetTxContinuousWave+0x60>)
 800f84c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3718      	adds	r7, #24
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	20000644 	.word	0x20000644
 800f860:	20000b50 	.word	0x20000b50

0800f864 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	6039      	str	r1, [r7, #0]
 800f86e:	80fb      	strh	r3, [r7, #6]
 800f870:	4613      	mov	r3, r2
 800f872:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800f874:	4b09      	ldr	r3, [pc, #36]	; (800f89c <SetTxContinuousWave1+0x38>)
 800f876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f878:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800f87c:	88fa      	ldrh	r2, [r7, #6]
 800f87e:	6838      	ldr	r0, [r7, #0]
 800f880:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f882:	4b07      	ldr	r3, [pc, #28]	; (800f8a0 <SetTxContinuousWave1+0x3c>)
 800f884:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f888:	f043 0302 	orr.w	r3, r3, #2
 800f88c:	4a04      	ldr	r2, [pc, #16]	; (800f8a0 <SetTxContinuousWave1+0x3c>)
 800f88e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f892:	2300      	movs	r3, #0
}
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	0801b950 	.word	0x0801b950
 800f8a0:	20000644 	.word	0x20000644

0800f8a4 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800f8ae:	4b3e      	ldr	r3, [pc, #248]	; (800f9a8 <RestoreNvmData+0x104>)
 800f8b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d001      	beq.n	800f8bc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e071      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800f8bc:	2124      	movs	r1, #36	; 0x24
 800f8be:	483b      	ldr	r0, [pc, #236]	; (800f9ac <RestoreNvmData+0x108>)
 800f8c0:	f006 f8e4 	bl	8015a8c <Crc32>
 800f8c4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800f8c6:	4b39      	ldr	r3, [pc, #228]	; (800f9ac <RestoreNvmData+0x108>)
 800f8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d001      	beq.n	800f8d4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f8d0:	2317      	movs	r3, #23
 800f8d2:	e065      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800f8d4:	2114      	movs	r1, #20
 800f8d6:	4836      	ldr	r0, [pc, #216]	; (800f9b0 <RestoreNvmData+0x10c>)
 800f8d8:	f006 f8d8 	bl	8015a8c <Crc32>
 800f8dc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800f8de:	4b33      	ldr	r3, [pc, #204]	; (800f9ac <RestoreNvmData+0x108>)
 800f8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d001      	beq.n	800f8ec <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f8e8:	2317      	movs	r3, #23
 800f8ea:	e059      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800f8ec:	21dc      	movs	r1, #220	; 0xdc
 800f8ee:	4831      	ldr	r0, [pc, #196]	; (800f9b4 <RestoreNvmData+0x110>)
 800f8f0:	f006 f8cc 	bl	8015a8c <Crc32>
 800f8f4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800f8f6:	4b2d      	ldr	r3, [pc, #180]	; (800f9ac <RestoreNvmData+0x108>)
 800f8f8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d001      	beq.n	800f906 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f902:	2317      	movs	r3, #23
 800f904:	e04c      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800f906:	21bc      	movs	r1, #188	; 0xbc
 800f908:	482b      	ldr	r0, [pc, #172]	; (800f9b8 <RestoreNvmData+0x114>)
 800f90a:	f006 f8bf 	bl	8015a8c <Crc32>
 800f90e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800f910:	4b26      	ldr	r3, [pc, #152]	; (800f9ac <RestoreNvmData+0x108>)
 800f912:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d001      	beq.n	800f920 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f91c:	2317      	movs	r3, #23
 800f91e:	e03f      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800f920:	2190      	movs	r1, #144	; 0x90
 800f922:	4826      	ldr	r0, [pc, #152]	; (800f9bc <RestoreNvmData+0x118>)
 800f924:	f006 f8b2 	bl	8015a8c <Crc32>
 800f928:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800f92a:	4b20      	ldr	r3, [pc, #128]	; (800f9ac <RestoreNvmData+0x108>)
 800f92c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	429a      	cmp	r2, r3
 800f934:	d001      	beq.n	800f93a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f936:	2317      	movs	r3, #23
 800f938:	e032      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800f93a:	2114      	movs	r1, #20
 800f93c:	4820      	ldr	r0, [pc, #128]	; (800f9c0 <RestoreNvmData+0x11c>)
 800f93e:	f006 f8a5 	bl	8015a8c <Crc32>
 800f942:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800f944:	4b19      	ldr	r3, [pc, #100]	; (800f9ac <RestoreNvmData+0x108>)
 800f946:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d001      	beq.n	800f954 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f950:	2317      	movs	r3, #23
 800f952:	e025      	b.n	800f9a0 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800f954:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800f958:	4914      	ldr	r1, [pc, #80]	; (800f9ac <RestoreNvmData+0x108>)
 800f95a:	481a      	ldr	r0, [pc, #104]	; (800f9c4 <RestoreNvmData+0x120>)
 800f95c:	f006 f841 	bl	80159e2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800f960:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800f964:	2100      	movs	r1, #0
 800f966:	4811      	ldr	r0, [pc, #68]	; (800f9ac <RestoreNvmData+0x108>)
 800f968:	f006 f876 	bl	8015a58 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f96c:	4b0e      	ldr	r3, [pc, #56]	; (800f9a8 <RestoreNvmData+0x104>)
 800f96e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f972:	4b0d      	ldr	r3, [pc, #52]	; (800f9a8 <RestoreNvmData+0x104>)
 800f974:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f978:	4b12      	ldr	r3, [pc, #72]	; (800f9c4 <RestoreNvmData+0x120>)
 800f97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f97c:	4a0a      	ldr	r2, [pc, #40]	; (800f9a8 <RestoreNvmData+0x104>)
 800f97e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f982:	4b10      	ldr	r3, [pc, #64]	; (800f9c4 <RestoreNvmData+0x120>)
 800f984:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f988:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <RestoreNvmData+0x104>)
 800f98a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f98e:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <RestoreNvmData+0x104>)
 800f990:	2201      	movs	r2, #1
 800f992:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f996:	4b04      	ldr	r3, [pc, #16]	; (800f9a8 <RestoreNvmData+0x104>)
 800f998:	2202      	movs	r2, #2
 800f99a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	20000644 	.word	0x20000644
 800f9ac:	20001278 	.word	0x20001278
 800f9b0:	200012a0 	.word	0x200012a0
 800f9b4:	200012b8 	.word	0x200012b8
 800f9b8:	20001398 	.word	0x20001398
 800f9bc:	20001458 	.word	0x20001458
 800f9c0:	20001988 	.word	0x20001988
 800f9c4:	20000b50 	.word	0x20000b50

0800f9c8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d002      	beq.n	800f9de <DetermineFrameType+0x16>
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d101      	bne.n	800f9e2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	e03b      	b.n	800fa5a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	7b1b      	ldrb	r3, [r3, #12]
 800f9e6:	f003 030f 	and.w	r3, r3, #15
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d008      	beq.n	800fa02 <DetermineFrameType+0x3a>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	701a      	strb	r2, [r3, #0]
 800fa00:	e02a      	b.n	800fa58 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d103      	bne.n	800fa14 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	701a      	strb	r2, [r3, #0]
 800fa12:	e021      	b.n	800fa58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	7b1b      	ldrb	r3, [r3, #12]
 800fa18:	f003 030f 	and.w	r3, r3, #15
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d108      	bne.n	800fa34 <DetermineFrameType+0x6c>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d103      	bne.n	800fa34 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	701a      	strb	r2, [r3, #0]
 800fa32:	e011      	b.n	800fa58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	7b1b      	ldrb	r3, [r3, #12]
 800fa38:	f003 030f 	and.w	r3, r3, #15
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d108      	bne.n	800fa54 <DetermineFrameType+0x8c>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d003      	beq.n	800fa54 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	2203      	movs	r2, #3
 800fa50:	701a      	strb	r2, [r3, #0]
 800fa52:	e001      	b.n	800fa58 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800fa54:	2318      	movs	r3, #24
 800fa56:	e000      	b.n	800fa5a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bc80      	pop	{r7}
 800fa62:	4770      	bx	lr

0800fa64 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 800fa64:	b480      	push	{r7}
 800fa66:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800fa68:	4b12      	ldr	r3, [pc, #72]	; (800fab4 <CheckRetransUnconfirmedUplink+0x50>)
 800fa6a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800fa6e:	4b12      	ldr	r3, [pc, #72]	; (800fab8 <CheckRetransUnconfirmedUplink+0x54>)
 800fa70:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d301      	bcc.n	800fa7c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	e016      	b.n	800faaa <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fa7c:	4b0d      	ldr	r3, [pc, #52]	; (800fab4 <CheckRetransUnconfirmedUplink+0x50>)
 800fa7e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fa82:	f003 0302 	and.w	r3, r3, #2
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00d      	beq.n	800faa8 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800fa8c:	4b0a      	ldr	r3, [pc, #40]	; (800fab8 <CheckRetransUnconfirmedUplink+0x54>)
 800fa8e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d101      	bne.n	800fa9a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800fa96:	2301      	movs	r3, #1
 800fa98:	e007      	b.n	800faaa <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800fa9a:	4b06      	ldr	r3, [pc, #24]	; (800fab4 <CheckRetransUnconfirmedUplink+0x50>)
 800fa9c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d101      	bne.n	800faa8 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e000      	b.n	800faaa <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	46bd      	mov	sp, r7
 800faae:	bc80      	pop	{r7}
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	20000644 	.word	0x20000644
 800fab8:	20000b50 	.word	0x20000b50

0800fabc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800fabc:	b480      	push	{r7}
 800fabe:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800fac0:	4b0e      	ldr	r3, [pc, #56]	; (800fafc <CheckRetransConfirmedUplink+0x40>)
 800fac2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800fac6:	4b0d      	ldr	r3, [pc, #52]	; (800fafc <CheckRetransConfirmedUplink+0x40>)
 800fac8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800facc:	429a      	cmp	r2, r3
 800face:	d301      	bcc.n	800fad4 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800fad0:	2301      	movs	r3, #1
 800fad2:	e00f      	b.n	800faf4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fad4:	4b09      	ldr	r3, [pc, #36]	; (800fafc <CheckRetransConfirmedUplink+0x40>)
 800fad6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fada:	f003 0302 	and.w	r3, r3, #2
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d006      	beq.n	800faf2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fae4:	4b05      	ldr	r3, [pc, #20]	; (800fafc <CheckRetransConfirmedUplink+0x40>)
 800fae6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800faee:	2301      	movs	r3, #1
 800faf0:	e000      	b.n	800faf4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bc80      	pop	{r7}
 800fafa:	4770      	bx	lr
 800fafc:	20000644 	.word	0x20000644

0800fb00 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800fb00:	b480      	push	{r7}
 800fb02:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fb04:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <StopRetransmission+0x70>)
 800fb06:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fb0a:	f003 0302 	and.w	r3, r3, #2
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d009      	beq.n	800fb28 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fb14:	4b16      	ldr	r3, [pc, #88]	; (800fb70 <StopRetransmission+0x70>)
 800fb16:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00e      	beq.n	800fb3c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800fb1e:	4b14      	ldr	r3, [pc, #80]	; (800fb70 <StopRetransmission+0x70>)
 800fb20:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d009      	beq.n	800fb3c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800fb28:	4b12      	ldr	r3, [pc, #72]	; (800fb74 <StopRetransmission+0x74>)
 800fb2a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d004      	beq.n	800fb3c <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800fb32:	4b10      	ldr	r3, [pc, #64]	; (800fb74 <StopRetransmission+0x74>)
 800fb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb36:	3301      	adds	r3, #1
 800fb38:	4a0e      	ldr	r2, [pc, #56]	; (800fb74 <StopRetransmission+0x74>)
 800fb3a:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800fb3c:	4b0c      	ldr	r3, [pc, #48]	; (800fb70 <StopRetransmission+0x70>)
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 800fb44:	4b0a      	ldr	r3, [pc, #40]	; (800fb70 <StopRetransmission+0x70>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800fb4c:	4b08      	ldr	r3, [pc, #32]	; (800fb70 <StopRetransmission+0x70>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fb54:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <StopRetransmission+0x70>)
 800fb56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb5a:	f023 0302 	bic.w	r3, r3, #2
 800fb5e:	4a04      	ldr	r2, [pc, #16]	; (800fb70 <StopRetransmission+0x70>)
 800fb60:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 800fb64:	2301      	movs	r3, #1
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bc80      	pop	{r7}
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	20000644 	.word	0x20000644
 800fb74:	20000b50 	.word	0x20000b50

0800fb78 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	4603      	mov	r3, r0
 800fb80:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <CallNvmDataChangeCallback+0x38>)
 800fb84:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00c      	beq.n	800fba6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800fb8c:	4b08      	ldr	r3, [pc, #32]	; (800fbb0 <CallNvmDataChangeCallback+0x38>)
 800fb8e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fb92:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d006      	beq.n	800fba6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800fb98:	4b05      	ldr	r3, [pc, #20]	; (800fbb0 <CallNvmDataChangeCallback+0x38>)
 800fb9a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	88fa      	ldrh	r2, [r7, #6]
 800fba2:	4610      	mov	r0, r2
 800fba4:	4798      	blx	r3
    }
}
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	20000644 	.word	0x20000644

0800fbb4 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800fbba:	4b1b      	ldr	r3, [pc, #108]	; (800fc28 <AckTimeoutRetriesProcess+0x74>)
 800fbbc:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fbc0:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <AckTimeoutRetriesProcess+0x74>)
 800fbc2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d229      	bcs.n	800fc1e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800fbca:	4b17      	ldr	r3, [pc, #92]	; (800fc28 <AckTimeoutRetriesProcess+0x74>)
 800fbcc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <AckTimeoutRetriesProcess+0x74>)
 800fbd6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800fbda:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <AckTimeoutRetriesProcess+0x74>)
 800fbdc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fbe0:	f003 0301 	and.w	r3, r3, #1
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d019      	beq.n	800fc1e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fbea:	2322      	movs	r3, #34	; 0x22
 800fbec:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <AckTimeoutRetriesProcess+0x78>)
 800fbf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fbf4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbf6:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <AckTimeoutRetriesProcess+0x78>)
 800fbf8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fbfc:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fbfe:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <AckTimeoutRetriesProcess+0x78>)
 800fc00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc04:	f107 0208 	add.w	r2, r7, #8
 800fc08:	4611      	mov	r1, r2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f003 fbd6 	bl	80133bc <RegionGetPhyParam>
 800fc10:	4603      	mov	r3, r0
 800fc12:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	b25a      	sxtb	r2, r3
 800fc18:	4b04      	ldr	r3, [pc, #16]	; (800fc2c <AckTimeoutRetriesProcess+0x78>)
 800fc1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 800fc1e:	bf00      	nop
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20000644 	.word	0x20000644
 800fc2c:	20000b50 	.word	0x20000b50

0800fc30 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800fc36:	4b14      	ldr	r3, [pc, #80]	; (800fc88 <AckTimeoutRetriesFinalize+0x58>)
 800fc38:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800fc3c:	f083 0301 	eor.w	r3, r3, #1
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d015      	beq.n	800fc72 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800fc46:	2302      	movs	r3, #2
 800fc48:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800fc4a:	4b10      	ldr	r3, [pc, #64]	; (800fc8c <AckTimeoutRetriesFinalize+0x5c>)
 800fc4c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800fc4e:	4b10      	ldr	r3, [pc, #64]	; (800fc90 <AckTimeoutRetriesFinalize+0x60>)
 800fc50:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fc52:	4b10      	ldr	r3, [pc, #64]	; (800fc94 <AckTimeoutRetriesFinalize+0x64>)
 800fc54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc58:	1d3a      	adds	r2, r7, #4
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f003 fbd6 	bl	801340e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800fc62:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <AckTimeoutRetriesFinalize+0x58>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800fc6a:	4b07      	ldr	r3, [pc, #28]	; (800fc88 <AckTimeoutRetriesFinalize+0x58>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fc72:	4b05      	ldr	r3, [pc, #20]	; (800fc88 <AckTimeoutRetriesFinalize+0x58>)
 800fc74:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fc78:	4b03      	ldr	r3, [pc, #12]	; (800fc88 <AckTimeoutRetriesFinalize+0x58>)
 800fc7a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800fc7e:	bf00      	nop
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	20000644 	.word	0x20000644
 800fc8c:	20000d30 	.word	0x20000d30
 800fc90:	20000dc4 	.word	0x20000dc4
 800fc94:	20000b50 	.word	0x20000b50

0800fc98 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800fc98:	b480      	push	{r7}
 800fc9a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fc9c:	4b0b      	ldr	r3, [pc, #44]	; (800fccc <IsRequestPending+0x34>)
 800fc9e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fca2:	f003 0304 	and.w	r3, r3, #4
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d107      	bne.n	800fcbc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800fcac:	4b07      	ldr	r3, [pc, #28]	; (800fccc <IsRequestPending+0x34>)
 800fcae:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fcb2:	f003 0301 	and.w	r3, r3, #1
 800fcb6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <IsRequestPending+0x28>
    {
        return 1;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	e000      	b.n	800fcc2 <IsRequestPending+0x2a>
    }
    return 0;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bc80      	pop	{r7}
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	20000644 	.word	0x20000644

0800fcd0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800fcd0:	b590      	push	{r4, r7, lr}
 800fcd2:	b08f      	sub	sp, #60	; 0x3c
 800fcd4:	af02      	add	r7, sp, #8
 800fcd6:	6178      	str	r0, [r7, #20]
 800fcd8:	6139      	str	r1, [r7, #16]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <LoRaMacInitialization+0x1a>
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d101      	bne.n	800fcee <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fcea:	2303      	movs	r3, #3
 800fcec:	e275      	b.n	80101da <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00b      	beq.n	800fd0e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d007      	beq.n	800fd0e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d101      	bne.n	800fd12 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd0e:	2303      	movs	r3, #3
 800fd10:	e263      	b.n	80101da <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f003 fb41 	bl	801339c <RegionIsActive>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	f083 0301 	eor.w	r3, r3, #1
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800fd26:	2309      	movs	r3, #9
 800fd28:	e257      	b.n	80101da <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800fd2a:	6978      	ldr	r0, [r7, #20]
 800fd2c:	f001 ffb8 	bl	8011ca0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800fd30:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fd34:	2100      	movs	r1, #0
 800fd36:	48c7      	ldr	r0, [pc, #796]	; (8010054 <LoRaMacInitialization+0x384>)
 800fd38:	f005 fe8e 	bl	8015a58 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800fd3c:	f240 520c 	movw	r2, #1292	; 0x50c
 800fd40:	2100      	movs	r1, #0
 800fd42:	48c5      	ldr	r0, [pc, #788]	; (8010058 <LoRaMacInitialization+0x388>)
 800fd44:	f005 fe88 	bl	8015a58 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fd48:	4bc3      	ldr	r3, [pc, #780]	; (8010058 <LoRaMacInitialization+0x388>)
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800fd50:	4bc1      	ldr	r3, [pc, #772]	; (8010058 <LoRaMacInitialization+0x388>)
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800fd58:	4abe      	ldr	r2, [pc, #760]	; (8010054 <LoRaMacInitialization+0x384>)
 800fd5a:	7bfb      	ldrb	r3, [r7, #15]
 800fd5c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800fd60:	4bbc      	ldr	r3, [pc, #752]	; (8010054 <LoRaMacInitialization+0x384>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800fd68:	4bba      	ldr	r3, [pc, #744]	; (8010054 <LoRaMacInitialization+0x384>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800fd70:	4bb8      	ldr	r3, [pc, #736]	; (8010054 <LoRaMacInitialization+0x384>)
 800fd72:	4aba      	ldr	r2, [pc, #744]	; (801005c <LoRaMacInitialization+0x38c>)
 800fd74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800fd78:	230f      	movs	r3, #15
 800fd7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd7e:	4bb5      	ldr	r3, [pc, #724]	; (8010054 <LoRaMacInitialization+0x384>)
 800fd80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f003 fb16 	bl	80133bc <RegionGetPhyParam>
 800fd90:	4603      	mov	r3, r0
 800fd92:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	bf14      	ite	ne
 800fd9a:	2301      	movne	r3, #1
 800fd9c:	2300      	moveq	r3, #0
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	4bac      	ldr	r3, [pc, #688]	; (8010054 <LoRaMacInitialization+0x384>)
 800fda2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800fda6:	230a      	movs	r3, #10
 800fda8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fdac:	4ba9      	ldr	r3, [pc, #676]	; (8010054 <LoRaMacInitialization+0x384>)
 800fdae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f003 faff 	bl	80133bc <RegionGetPhyParam>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc4:	b25a      	sxtb	r2, r3
 800fdc6:	4ba3      	ldr	r3, [pc, #652]	; (8010054 <LoRaMacInitialization+0x384>)
 800fdc8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800fdcc:	2306      	movs	r3, #6
 800fdce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fdd2:	4ba0      	ldr	r3, [pc, #640]	; (8010054 <LoRaMacInitialization+0x384>)
 800fdd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdd8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f003 faec 	bl	80133bc <RegionGetPhyParam>
 800fde4:	4603      	mov	r3, r0
 800fde6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	b25a      	sxtb	r2, r3
 800fdec:	4b99      	ldr	r3, [pc, #612]	; (8010054 <LoRaMacInitialization+0x384>)
 800fdee:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800fdf2:	2310      	movs	r3, #16
 800fdf4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fdf8:	4b96      	ldr	r3, [pc, #600]	; (8010054 <LoRaMacInitialization+0x384>)
 800fdfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe02:	4611      	mov	r1, r2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f003 fad9 	bl	80133bc <RegionGetPhyParam>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe10:	4a90      	ldr	r2, [pc, #576]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800fe16:	2311      	movs	r3, #17
 800fe18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe1c:	4b8d      	ldr	r3, [pc, #564]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe26:	4611      	mov	r1, r2
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f003 fac7 	bl	80133bc <RegionGetPhyParam>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe34:	4a87      	ldr	r2, [pc, #540]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800fe3a:	2312      	movs	r3, #18
 800fe3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe40:	4b84      	ldr	r3, [pc, #528]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f003 fab5 	bl	80133bc <RegionGetPhyParam>
 800fe52:	4603      	mov	r3, r0
 800fe54:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe58:	4a7e      	ldr	r2, [pc, #504]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800fe5e:	2313      	movs	r3, #19
 800fe60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe64:	4b7b      	ldr	r3, [pc, #492]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe6e:	4611      	mov	r1, r2
 800fe70:	4618      	mov	r0, r3
 800fe72:	f003 faa3 	bl	80133bc <RegionGetPhyParam>
 800fe76:	4603      	mov	r3, r0
 800fe78:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7c:	4a75      	ldr	r2, [pc, #468]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800fe82:	2314      	movs	r3, #20
 800fe84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe88:	4b72      	ldr	r3, [pc, #456]	; (8010054 <LoRaMacInitialization+0x384>)
 800fe8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe92:	4611      	mov	r1, r2
 800fe94:	4618      	mov	r0, r3
 800fe96:	f003 fa91 	bl	80133bc <RegionGetPhyParam>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	4a6c      	ldr	r2, [pc, #432]	; (8010054 <LoRaMacInitialization+0x384>)
 800fea2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800fea6:	2317      	movs	r3, #23
 800fea8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800feac:	4b69      	ldr	r3, [pc, #420]	; (8010054 <LoRaMacInitialization+0x384>)
 800feae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800feb6:	4611      	mov	r1, r2
 800feb8:	4618      	mov	r0, r3
 800feba:	f003 fa7f 	bl	80133bc <RegionGetPhyParam>
 800febe:	4603      	mov	r3, r0
 800fec0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	b2da      	uxtb	r2, r3
 800fec6:	4b63      	ldr	r3, [pc, #396]	; (8010054 <LoRaMacInitialization+0x384>)
 800fec8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800fecc:	2318      	movs	r3, #24
 800fece:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fed2:	4b60      	ldr	r3, [pc, #384]	; (8010054 <LoRaMacInitialization+0x384>)
 800fed4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fed8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fedc:	4611      	mov	r1, r2
 800fede:	4618      	mov	r0, r3
 800fee0:	f003 fa6c 	bl	80133bc <RegionGetPhyParam>
 800fee4:	4603      	mov	r3, r0
 800fee6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	4a5a      	ldr	r2, [pc, #360]	; (8010054 <LoRaMacInitialization+0x384>)
 800feec:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800fef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef2:	4a58      	ldr	r2, [pc, #352]	; (8010054 <LoRaMacInitialization+0x384>)
 800fef4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800fef8:	2319      	movs	r3, #25
 800fefa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fefe:	4b55      	ldr	r3, [pc, #340]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff08:	4611      	mov	r1, r2
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f003 fa56 	bl	80133bc <RegionGetPhyParam>
 800ff10:	4603      	mov	r3, r0
 800ff12:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ff14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	4b4e      	ldr	r3, [pc, #312]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff1a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff20:	b2da      	uxtb	r2, r3
 800ff22:	4b4c      	ldr	r3, [pc, #304]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff24:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ff28:	231e      	movs	r3, #30
 800ff2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff2e:	4b49      	ldr	r3, [pc, #292]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f003 fa3e 	bl	80133bc <RegionGetPhyParam>
 800ff40:	4603      	mov	r3, r0
 800ff42:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	4b42      	ldr	r3, [pc, #264]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff4a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ff4e:	231f      	movs	r3, #31
 800ff50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff54:	4b3f      	ldr	r3, [pc, #252]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff5e:	4611      	mov	r1, r2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f003 fa2b 	bl	80133bc <RegionGetPhyParam>
 800ff66:	4603      	mov	r3, r0
 800ff68:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6c:	b2da      	uxtb	r2, r3
 800ff6e:	4b39      	ldr	r3, [pc, #228]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ff74:	2320      	movs	r3, #32
 800ff76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff7a:	4b36      	ldr	r3, [pc, #216]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff84:	4611      	mov	r1, r2
 800ff86:	4618      	mov	r0, r3
 800ff88:	f003 fa18 	bl	80133bc <RegionGetPhyParam>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	4a30      	ldr	r2, [pc, #192]	; (8010054 <LoRaMacInitialization+0x384>)
 800ff94:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ff98:	2321      	movs	r3, #33	; 0x21
 800ff9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff9e:	4b2d      	ldr	r3, [pc, #180]	; (8010054 <LoRaMacInitialization+0x384>)
 800ffa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f003 fa06 	bl	80133bc <RegionGetPhyParam>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	4a27      	ldr	r2, [pc, #156]	; (8010054 <LoRaMacInitialization+0x384>)
 800ffb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800ffbc:	230b      	movs	r3, #11
 800ffbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffc2:	4b24      	ldr	r3, [pc, #144]	; (8010054 <LoRaMacInitialization+0x384>)
 800ffc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ffcc:	4611      	mov	r1, r2
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f003 f9f4 	bl	80133bc <RegionGetPhyParam>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	4b1e      	ldr	r3, [pc, #120]	; (8010058 <LoRaMacInitialization+0x388>)
 800ffde:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800ffe2:	230c      	movs	r3, #12
 800ffe4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffe8:	4b1a      	ldr	r3, [pc, #104]	; (8010054 <LoRaMacInitialization+0x384>)
 800ffea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f003 f9e1 	bl	80133bc <RegionGetPhyParam>
 800fffa:	4603      	mov	r3, r0
 800fffc:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800fffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010000:	b29a      	uxth	r2, r3
 8010002:	4b15      	ldr	r3, [pc, #84]	; (8010058 <LoRaMacInitialization+0x388>)
 8010004:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010008:	4b12      	ldr	r3, [pc, #72]	; (8010054 <LoRaMacInitialization+0x384>)
 801000a:	2201      	movs	r2, #1
 801000c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010010:	4b10      	ldr	r3, [pc, #64]	; (8010054 <LoRaMacInitialization+0x384>)
 8010012:	220a      	movs	r2, #10
 8010014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010018:	4b0e      	ldr	r3, [pc, #56]	; (8010054 <LoRaMacInitialization+0x384>)
 801001a:	2206      	movs	r2, #6
 801001c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010020:	4b0c      	ldr	r3, [pc, #48]	; (8010054 <LoRaMacInitialization+0x384>)
 8010022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010026:	4a0b      	ldr	r2, [pc, #44]	; (8010054 <LoRaMacInitialization+0x384>)
 8010028:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801002a:	4b0a      	ldr	r3, [pc, #40]	; (8010054 <LoRaMacInitialization+0x384>)
 801002c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010030:	4b08      	ldr	r3, [pc, #32]	; (8010054 <LoRaMacInitialization+0x384>)
 8010032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010036:	4b07      	ldr	r3, [pc, #28]	; (8010054 <LoRaMacInitialization+0x384>)
 8010038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801003c:	4a05      	ldr	r2, [pc, #20]	; (8010054 <LoRaMacInitialization+0x384>)
 801003e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010040:	4b04      	ldr	r3, [pc, #16]	; (8010054 <LoRaMacInitialization+0x384>)
 8010042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010046:	4a03      	ldr	r2, [pc, #12]	; (8010054 <LoRaMacInitialization+0x384>)
 8010048:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801004a:	4b02      	ldr	r3, [pc, #8]	; (8010054 <LoRaMacInitialization+0x384>)
 801004c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010050:	e006      	b.n	8010060 <LoRaMacInitialization+0x390>
 8010052:	bf00      	nop
 8010054:	20000b50 	.word	0x20000b50
 8010058:	20000644 	.word	0x20000644
 801005c:	01000300 	.word	0x01000300
 8010060:	4a60      	ldr	r2, [pc, #384]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010062:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010064:	4b5f      	ldr	r3, [pc, #380]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801006a:	4a5e      	ldr	r2, [pc, #376]	; (80101e4 <LoRaMacInitialization+0x514>)
 801006c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801006e:	4b5d      	ldr	r3, [pc, #372]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010070:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010074:	4a5b      	ldr	r2, [pc, #364]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010076:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010078:	4b5a      	ldr	r3, [pc, #360]	; (80101e4 <LoRaMacInitialization+0x514>)
 801007a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801007e:	4b59      	ldr	r3, [pc, #356]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010080:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010084:	2300      	movs	r3, #0
 8010086:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801008a:	4b57      	ldr	r3, [pc, #348]	; (80101e8 <LoRaMacInitialization+0x518>)
 801008c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801008e:	4b57      	ldr	r3, [pc, #348]	; (80101ec <LoRaMacInitialization+0x51c>)
 8010090:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010092:	4b54      	ldr	r3, [pc, #336]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010098:	f107 0218 	add.w	r2, r7, #24
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f003 f9b5 	bl	801340e <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80100a4:	4a52      	ldr	r2, [pc, #328]	; (80101f0 <LoRaMacInitialization+0x520>)
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80100ac:	f7ff f87e 	bl	800f1ac <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80100b0:	4b4c      	ldr	r3, [pc, #304]	; (80101e4 <LoRaMacInitialization+0x514>)
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 80100b8:	4a4d      	ldr	r2, [pc, #308]	; (80101f0 <LoRaMacInitialization+0x520>)
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80100c0:	4b4b      	ldr	r3, [pc, #300]	; (80101f0 <LoRaMacInitialization+0x520>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 80100c8:	4b49      	ldr	r3, [pc, #292]	; (80101f0 <LoRaMacInitialization+0x520>)
 80100ca:	2201      	movs	r2, #1
 80100cc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80100d0:	4b44      	ldr	r3, [pc, #272]	; (80101e4 <LoRaMacInitialization+0x514>)
 80100d2:	2200      	movs	r2, #0
 80100d4:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80100d6:	4b43      	ldr	r3, [pc, #268]	; (80101e4 <LoRaMacInitialization+0x514>)
 80100d8:	2200      	movs	r2, #0
 80100da:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80100dc:	2300      	movs	r3, #0
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	4b44      	ldr	r3, [pc, #272]	; (80101f4 <LoRaMacInitialization+0x524>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	f04f 31ff 	mov.w	r1, #4294967295
 80100e8:	4843      	ldr	r0, [pc, #268]	; (80101f8 <LoRaMacInitialization+0x528>)
 80100ea:	f009 fd21 	bl	8019b30 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80100ee:	2300      	movs	r3, #0
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	4b42      	ldr	r3, [pc, #264]	; (80101fc <LoRaMacInitialization+0x52c>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	f04f 31ff 	mov.w	r1, #4294967295
 80100fa:	4841      	ldr	r0, [pc, #260]	; (8010200 <LoRaMacInitialization+0x530>)
 80100fc:	f009 fd18 	bl	8019b30 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010100:	2300      	movs	r3, #0
 8010102:	9300      	str	r3, [sp, #0]
 8010104:	4b3f      	ldr	r3, [pc, #252]	; (8010204 <LoRaMacInitialization+0x534>)
 8010106:	2200      	movs	r2, #0
 8010108:	f04f 31ff 	mov.w	r1, #4294967295
 801010c:	483e      	ldr	r0, [pc, #248]	; (8010208 <LoRaMacInitialization+0x538>)
 801010e:	f009 fd0f 	bl	8019b30 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010112:	2300      	movs	r3, #0
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	4b3d      	ldr	r3, [pc, #244]	; (801020c <LoRaMacInitialization+0x53c>)
 8010118:	2200      	movs	r2, #0
 801011a:	f04f 31ff 	mov.w	r1, #4294967295
 801011e:	483c      	ldr	r0, [pc, #240]	; (8010210 <LoRaMacInitialization+0x540>)
 8010120:	f009 fd06 	bl	8019b30 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010124:	4c2f      	ldr	r4, [pc, #188]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010126:	463b      	mov	r3, r7
 8010128:	4618      	mov	r0, r3
 801012a:	f009 f871 	bl	8019210 <SysTimeGetMcuTime>
 801012e:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8010132:	463a      	mov	r2, r7
 8010134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010138:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801013c:	4b2c      	ldr	r3, [pc, #176]	; (80101f0 <LoRaMacInitialization+0x520>)
 801013e:	4a35      	ldr	r2, [pc, #212]	; (8010214 <LoRaMacInitialization+0x544>)
 8010140:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010144:	4b2a      	ldr	r3, [pc, #168]	; (80101f0 <LoRaMacInitialization+0x520>)
 8010146:	4a34      	ldr	r2, [pc, #208]	; (8010218 <LoRaMacInitialization+0x548>)
 8010148:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801014c:	4b28      	ldr	r3, [pc, #160]	; (80101f0 <LoRaMacInitialization+0x520>)
 801014e:	4a33      	ldr	r2, [pc, #204]	; (801021c <LoRaMacInitialization+0x54c>)
 8010150:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010154:	4b26      	ldr	r3, [pc, #152]	; (80101f0 <LoRaMacInitialization+0x520>)
 8010156:	4a32      	ldr	r2, [pc, #200]	; (8010220 <LoRaMacInitialization+0x550>)
 8010158:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801015c:	4b24      	ldr	r3, [pc, #144]	; (80101f0 <LoRaMacInitialization+0x520>)
 801015e:	4a31      	ldr	r2, [pc, #196]	; (8010224 <LoRaMacInitialization+0x554>)
 8010160:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010164:	4b30      	ldr	r3, [pc, #192]	; (8010228 <LoRaMacInitialization+0x558>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4830      	ldr	r0, [pc, #192]	; (801022c <LoRaMacInitialization+0x55c>)
 801016a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	4619      	mov	r1, r3
 8010172:	482f      	ldr	r0, [pc, #188]	; (8010230 <LoRaMacInitialization+0x560>)
 8010174:	f7fa fe30 	bl	800add8 <SecureElementInit>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801017e:	2311      	movs	r3, #17
 8010180:	e02b      	b.n	80101da <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010182:	4818      	ldr	r0, [pc, #96]	; (80101e4 <LoRaMacInitialization+0x514>)
 8010184:	f002 fa38 	bl	80125f8 <LoRaMacCryptoInit>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801018e:	2311      	movs	r3, #17
 8010190:	e023      	b.n	80101da <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010192:	f001 fb57 	bl	8011844 <LoRaMacCommandsInit>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801019c:	2313      	movs	r3, #19
 801019e:	e01c      	b.n	80101da <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80101a0:	4824      	ldr	r0, [pc, #144]	; (8010234 <LoRaMacInitialization+0x564>)
 80101a2:	f002 faf3 	bl	801278c <LoRaMacCryptoSetMulticastReference>
 80101a6:	4603      	mov	r3, r0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d001      	beq.n	80101b0 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80101ac:	2311      	movs	r3, #17
 80101ae:	e014      	b.n	80101da <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80101b0:	4b1d      	ldr	r3, [pc, #116]	; (8010228 <LoRaMacInitialization+0x558>)
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	4798      	blx	r3
 80101b6:	4603      	mov	r3, r0
 80101b8:	4618      	mov	r0, r3
 80101ba:	f005 fbed 	bl	8015998 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80101be:	4b1a      	ldr	r3, [pc, #104]	; (8010228 <LoRaMacInitialization+0x558>)
 80101c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101c2:	4a08      	ldr	r2, [pc, #32]	; (80101e4 <LoRaMacInitialization+0x514>)
 80101c4:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80101c8:	4610      	mov	r0, r2
 80101ca:	4798      	blx	r3
    Radio.Sleep( );
 80101cc:	4b16      	ldr	r3, [pc, #88]	; (8010228 <LoRaMacInitialization+0x558>)
 80101ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80101d2:	2001      	movs	r0, #1
 80101d4:	f7fd faf2 	bl	800d7bc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3734      	adds	r7, #52	; 0x34
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd90      	pop	{r4, r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20000b50 	.word	0x20000b50
 80101e8:	20000d30 	.word	0x20000d30
 80101ec:	20000dc4 	.word	0x20000dc4
 80101f0:	20000644 	.word	0x20000644
 80101f4:	0800dd29 	.word	0x0800dd29
 80101f8:	200009ac 	.word	0x200009ac
 80101fc:	0800dd9d 	.word	0x0800dd9d
 8010200:	200009c4 	.word	0x200009c4
 8010204:	0800de09 	.word	0x0800de09
 8010208:	200009dc 	.word	0x200009dc
 801020c:	0800de7d 	.word	0x0800de7d
 8010210:	20000a3c 	.word	0x20000a3c
 8010214:	0800c939 	.word	0x0800c939
 8010218:	0800c9b1 	.word	0x0800c9b1
 801021c:	0800ca89 	.word	0x0800ca89
 8010220:	0800ca3d 	.word	0x0800ca3d
 8010224:	0800cac5 	.word	0x0800cac5
 8010228:	0801b950 	.word	0x0801b950
 801022c:	20000990 	.word	0x20000990
 8010230:	20000c70 	.word	0x20000c70
 8010234:	20000c28 	.word	0x20000c28

08010238 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010238:	b480      	push	{r7}
 801023a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801023c:	4b04      	ldr	r3, [pc, #16]	; (8010250 <LoRaMacStart+0x18>)
 801023e:	2200      	movs	r2, #0
 8010240:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	46bd      	mov	sp, r7
 801024a:	bc80      	pop	{r7}
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	20000644 	.word	0x20000644

08010254 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010258:	f7fd fa9a 	bl	800d790 <LoRaMacIsBusy>
 801025c:	4603      	mov	r3, r0
 801025e:	f083 0301 	eor.w	r3, r3, #1
 8010262:	b2db      	uxtb	r3, r3
 8010264:	2b00      	cmp	r3, #0
 8010266:	d005      	beq.n	8010274 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8010268:	4b07      	ldr	r3, [pc, #28]	; (8010288 <LoRaMacStop+0x34>)
 801026a:	2201      	movs	r2, #1
 801026c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	e007      	b.n	8010284 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010274:	4b04      	ldr	r3, [pc, #16]	; (8010288 <LoRaMacStop+0x34>)
 8010276:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801027a:	2b01      	cmp	r3, #1
 801027c:	d101      	bne.n	8010282 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	e000      	b.n	8010284 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8010282:	2301      	movs	r3, #1
}
 8010284:	4618      	mov	r0, r3
 8010286:	bd80      	pop	{r7, pc}
 8010288:	20000644 	.word	0x20000644

0801028c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8010290:	4812      	ldr	r0, [pc, #72]	; (80102dc <LoRaMacHalt+0x50>)
 8010292:	f009 fcf1 	bl	8019c78 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8010296:	4812      	ldr	r0, [pc, #72]	; (80102e0 <LoRaMacHalt+0x54>)
 8010298:	f009 fcee 	bl	8019c78 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801029c:	4811      	ldr	r0, [pc, #68]	; (80102e4 <LoRaMacHalt+0x58>)
 801029e:	f009 fceb 	bl	8019c78 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80102a2:	4811      	ldr	r0, [pc, #68]	; (80102e8 <LoRaMacHalt+0x5c>)
 80102a4:	f009 fce8 	bl	8019c78 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80102a8:	f001 f957 	bl	801155a <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80102ac:	4b0f      	ldr	r3, [pc, #60]	; (80102ec <LoRaMacHalt+0x60>)
 80102ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80102b2:	4b0f      	ldr	r3, [pc, #60]	; (80102f0 <LoRaMacHalt+0x64>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80102ba:	480e      	ldr	r0, [pc, #56]	; (80102f4 <LoRaMacHalt+0x68>)
 80102bc:	f7fd fc2e 	bl	800db1c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80102c0:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80102c4:	490b      	ldr	r1, [pc, #44]	; (80102f4 <LoRaMacHalt+0x68>)
 80102c6:	480c      	ldr	r0, [pc, #48]	; (80102f8 <LoRaMacHalt+0x6c>)
 80102c8:	f005 fb8b 	bl	80159e2 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80102cc:	4b08      	ldr	r3, [pc, #32]	; (80102f0 <LoRaMacHalt+0x64>)
 80102ce:	2201      	movs	r2, #1
 80102d0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	200009ac 	.word	0x200009ac
 80102e0:	200009c4 	.word	0x200009c4
 80102e4:	200009dc 	.word	0x200009dc
 80102e8:	20000a3c 	.word	0x20000a3c
 80102ec:	0801b950 	.word	0x0801b950
 80102f0:	20000644 	.word	0x20000644
 80102f4:	20000b50 	.word	0x20000b50
 80102f8:	20001278 	.word	0x20001278

080102fc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b08a      	sub	sp, #40	; 0x28
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	6039      	str	r1, [r7, #0]
 8010306:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010308:	4b3e      	ldr	r3, [pc, #248]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 801030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801030c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801030e:	4b3d      	ldr	r3, [pc, #244]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 8010310:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8010314:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010316:	4b3b      	ldr	r3, [pc, #236]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 8010318:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 801031c:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d101      	bne.n	801032c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010328:	2303      	movs	r3, #3
 801032a:	e066      	b.n	80103fa <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801032c:	4b35      	ldr	r3, [pc, #212]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 801032e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010332:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8010334:	2300      	movs	r3, #0
 8010336:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010338:	4b32      	ldr	r3, [pc, #200]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 801033a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801033e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010340:	4b30      	ldr	r3, [pc, #192]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 8010342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010344:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010346:	4b30      	ldr	r3, [pc, #192]	; (8010408 <LoRaMacQueryTxPossible+0x10c>)
 8010348:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801034c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801034e:	4b2e      	ldr	r3, [pc, #184]	; (8010408 <LoRaMacQueryTxPossible+0x10c>)
 8010350:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010354:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010356:	4b2b      	ldr	r3, [pc, #172]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 8010358:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801035c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010360:	4b28      	ldr	r3, [pc, #160]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 8010362:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801036a:	4b26      	ldr	r3, [pc, #152]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 801036c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010374:	4b23      	ldr	r3, [pc, #140]	; (8010404 <LoRaMacQueryTxPossible+0x108>)
 8010376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801037a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801037e:	f107 0310 	add.w	r3, r7, #16
 8010382:	f107 020e 	add.w	r2, r7, #14
 8010386:	f107 010f 	add.w	r1, r7, #15
 801038a:	f107 0014 	add.w	r0, r7, #20
 801038e:	f001 f84f 	bl	8011430 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010396:	4618      	mov	r0, r3
 8010398:	f7fd feb8 	bl	800e10c <GetMaxAppPayloadWithoutFOptsLength>
 801039c:	4603      	mov	r3, r0
 801039e:	461a      	mov	r2, r3
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80103a4:	f107 0308 	add.w	r3, r7, #8
 80103a8:	4618      	mov	r0, r3
 80103aa:	f001 fb19 	bl	80119e0 <LoRaMacCommandsGetSizeSerializedCmds>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80103b4:	2313      	movs	r3, #19
 80103b6:	e020      	b.n	80103fa <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	2b0f      	cmp	r3, #15
 80103bc:	d819      	bhi.n	80103f2 <LoRaMacQueryTxPossible+0xf6>
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	785b      	ldrb	r3, [r3, #1]
 80103c2:	461a      	mov	r2, r3
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d313      	bcc.n	80103f2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	785a      	ldrb	r2, [r3, #1]
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	b2da      	uxtb	r2, r3
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	785b      	ldrb	r3, [r3, #1]
 80103de:	4619      	mov	r1, r3
 80103e0:	79fa      	ldrb	r2, [r7, #7]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	4413      	add	r3, r2
 80103e6:	4299      	cmp	r1, r3
 80103e8:	d301      	bcc.n	80103ee <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80103ea:	2300      	movs	r3, #0
 80103ec:	e005      	b.n	80103fa <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80103ee:	2308      	movs	r3, #8
 80103f0:	e003      	b.n	80103fa <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2200      	movs	r2, #0
 80103f6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80103f8:	2308      	movs	r3, #8
    }
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3728      	adds	r7, #40	; 0x28
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	20000b50 	.word	0x20000b50
 8010408:	20000644 	.word	0x20000644

0801040c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801040c:	b590      	push	{r4, r7, lr}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010414:	2300      	movs	r3, #0
 8010416:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801041e:	2303      	movs	r3, #3
 8010420:	e171      	b.n	8010706 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b37      	cmp	r3, #55	; 0x37
 8010428:	f200 8166 	bhi.w	80106f8 <LoRaMacMibGetRequestConfirm+0x2ec>
 801042c:	a201      	add	r2, pc, #4	; (adr r2, 8010434 <LoRaMacMibGetRequestConfirm+0x28>)
 801042e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010432:	bf00      	nop
 8010434:	08010515 	.word	0x08010515
 8010438:	08010521 	.word	0x08010521
 801043c:	0801052d 	.word	0x0801052d
 8010440:	08010539 	.word	0x08010539
 8010444:	08010545 	.word	0x08010545
 8010448:	08010551 	.word	0x08010551
 801044c:	0801055d 	.word	0x0801055d
 8010450:	080106f9 	.word	0x080106f9
 8010454:	080106f9 	.word	0x080106f9
 8010458:	080106f9 	.word	0x080106f9
 801045c:	080106f9 	.word	0x080106f9
 8010460:	080106f9 	.word	0x080106f9
 8010464:	080106f9 	.word	0x080106f9
 8010468:	080106f9 	.word	0x080106f9
 801046c:	080106f9 	.word	0x080106f9
 8010470:	08010569 	.word	0x08010569
 8010474:	08010575 	.word	0x08010575
 8010478:	08010581 	.word	0x08010581
 801047c:	080105a3 	.word	0x080105a3
 8010480:	080105b5 	.word	0x080105b5
 8010484:	080105c7 	.word	0x080105c7
 8010488:	080105d9 	.word	0x080105d9
 801048c:	0801060d 	.word	0x0801060d
 8010490:	080105eb 	.word	0x080105eb
 8010494:	0801062f 	.word	0x0801062f
 8010498:	0801063b 	.word	0x0801063b
 801049c:	08010645 	.word	0x08010645
 80104a0:	0801064f 	.word	0x0801064f
 80104a4:	08010659 	.word	0x08010659
 80104a8:	08010663 	.word	0x08010663
 80104ac:	0801066d 	.word	0x0801066d
 80104b0:	08010679 	.word	0x08010679
 80104b4:	08010691 	.word	0x08010691
 80104b8:	08010685 	.word	0x08010685
 80104bc:	0801069d 	.word	0x0801069d
 80104c0:	080106a7 	.word	0x080106a7
 80104c4:	080106b3 	.word	0x080106b3
 80104c8:	080106cd 	.word	0x080106cd
 80104cc:	080106bd 	.word	0x080106bd
 80104d0:	080106c5 	.word	0x080106c5
 80104d4:	080106f9 	.word	0x080106f9
 80104d8:	080106d9 	.word	0x080106d9
 80104dc:	080106f9 	.word	0x080106f9
 80104e0:	080106f9 	.word	0x080106f9
 80104e4:	080106f9 	.word	0x080106f9
 80104e8:	080106f9 	.word	0x080106f9
 80104ec:	080106f9 	.word	0x080106f9
 80104f0:	080106f9 	.word	0x080106f9
 80104f4:	080106f9 	.word	0x080106f9
 80104f8:	080106f9 	.word	0x080106f9
 80104fc:	080106f9 	.word	0x080106f9
 8010500:	080106f9 	.word	0x080106f9
 8010504:	080106f9 	.word	0x080106f9
 8010508:	080106f9 	.word	0x080106f9
 801050c:	080106f9 	.word	0x080106f9
 8010510:	080106ed 	.word	0x080106ed
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010514:	4b7e      	ldr	r3, [pc, #504]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010516:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	711a      	strb	r2, [r3, #4]
            break;
 801051e:	e0f1      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010520:	4b7b      	ldr	r3, [pc, #492]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010522:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	711a      	strb	r2, [r3, #4]
            break;
 801052a:	e0eb      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801052c:	f7fa ff40 	bl	800b3b0 <SecureElementGetDevEui>
 8010530:	4602      	mov	r2, r0
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	605a      	str	r2, [r3, #4]
            break;
 8010536:	e0e5      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010538:	f7fa ff5c 	bl	800b3f4 <SecureElementGetJoinEui>
 801053c:	4602      	mov	r2, r0
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	605a      	str	r2, [r3, #4]
            break;
 8010542:	e0df      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010544:	4b72      	ldr	r3, [pc, #456]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010546:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	711a      	strb	r2, [r3, #4]
            break;
 801054e:	e0d9      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8010550:	4b6f      	ldr	r3, [pc, #444]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010552:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	605a      	str	r2, [r3, #4]
            break;
 801055a:	e0d3      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 801055c:	4b6c      	ldr	r3, [pc, #432]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801055e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	605a      	str	r2, [r3, #4]
            break;
 8010566:	e0cd      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010568:	4b69      	ldr	r3, [pc, #420]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801056a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	711a      	strb	r2, [r3, #4]
            break;
 8010572:	e0c7      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010574:	4b66      	ldr	r3, [pc, #408]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010576:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	711a      	strb	r2, [r3, #4]
            break;
 801057e:	e0c1      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8010580:	231d      	movs	r3, #29
 8010582:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010584:	4b62      	ldr	r3, [pc, #392]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801058a:	f107 0210 	add.w	r2, r7, #16
 801058e:	4611      	mov	r1, r2
 8010590:	4618      	mov	r0, r3
 8010592:	f002 ff13 	bl	80133bc <RegionGetPhyParam>
 8010596:	4603      	mov	r3, r0
 8010598:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	605a      	str	r2, [r3, #4]
            break;
 80105a0:	e0b0      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4a5a      	ldr	r2, [pc, #360]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80105a6:	3304      	adds	r3, #4
 80105a8:	3264      	adds	r2, #100	; 0x64
 80105aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105ae:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80105b2:	e0a7      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4a56      	ldr	r2, [pc, #344]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80105b8:	3304      	adds	r3, #4
 80105ba:	32a8      	adds	r2, #168	; 0xa8
 80105bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105c0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80105c4:	e09e      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4a51      	ldr	r2, [pc, #324]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80105ca:	3304      	adds	r3, #4
 80105cc:	326c      	adds	r2, #108	; 0x6c
 80105ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105d2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80105d6:	e095      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4a4d      	ldr	r2, [pc, #308]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80105dc:	3304      	adds	r3, #4
 80105de:	32b0      	adds	r2, #176	; 0xb0
 80105e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105e4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80105e8:	e08c      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80105ea:	231b      	movs	r3, #27
 80105ec:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80105ee:	4b48      	ldr	r3, [pc, #288]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80105f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105f4:	f107 0210 	add.w	r2, r7, #16
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f002 fede 	bl	80133bc <RegionGetPhyParam>
 8010600:	4603      	mov	r3, r0
 8010602:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	605a      	str	r2, [r3, #4]
            break;
 801060a:	e07b      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801060c:	231a      	movs	r3, #26
 801060e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010610:	4b3f      	ldr	r3, [pc, #252]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010616:	f107 0210 	add.w	r2, r7, #16
 801061a:	4611      	mov	r1, r2
 801061c:	4618      	mov	r0, r3
 801061e:	f002 fecd 	bl	80133bc <RegionGetPhyParam>
 8010622:	4603      	mov	r3, r0
 8010624:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	605a      	str	r2, [r3, #4]
            break;
 801062c:	e06a      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801062e:	4b38      	ldr	r3, [pc, #224]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010630:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	711a      	strb	r2, [r3, #4]
            break;
 8010638:	e064      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801063a:	4b35      	ldr	r3, [pc, #212]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801063c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	605a      	str	r2, [r3, #4]
            break;
 8010642:	e05f      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010644:	4b32      	ldr	r3, [pc, #200]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	605a      	str	r2, [r3, #4]
            break;
 801064c:	e05a      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801064e:	4b30      	ldr	r3, [pc, #192]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	605a      	str	r2, [r3, #4]
            break;
 8010656:	e055      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010658:	4b2d      	ldr	r3, [pc, #180]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801065a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	605a      	str	r2, [r3, #4]
            break;
 8010660:	e050      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8010662:	4b2b      	ldr	r3, [pc, #172]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	605a      	str	r2, [r3, #4]
            break;
 801066a:	e04b      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801066c:	4b28      	ldr	r3, [pc, #160]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801066e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	711a      	strb	r2, [r3, #4]
            break;
 8010676:	e045      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010678:	4b25      	ldr	r3, [pc, #148]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801067a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	711a      	strb	r2, [r3, #4]
            break;
 8010682:	e03f      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010684:	4b22      	ldr	r3, [pc, #136]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010686:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	711a      	strb	r2, [r3, #4]
            break;
 801068e:	e039      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010690:	4b1f      	ldr	r3, [pc, #124]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 8010692:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	711a      	strb	r2, [r3, #4]
            break;
 801069a:	e033      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801069c:	4b1c      	ldr	r3, [pc, #112]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 801069e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	605a      	str	r2, [r3, #4]
            break;
 80106a4:	e02e      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80106a6:	4b1a      	ldr	r3, [pc, #104]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80106a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	711a      	strb	r2, [r3, #4]
            break;
 80106b0:	e028      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80106b2:	4b17      	ldr	r3, [pc, #92]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80106b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	605a      	str	r2, [r3, #4]
            break;
 80106ba:	e023      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4a14      	ldr	r2, [pc, #80]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80106c0:	605a      	str	r2, [r3, #4]
            break;
 80106c2:	e01f      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4a13      	ldr	r2, [pc, #76]	; (8010714 <LoRaMacMibGetRequestConfirm+0x308>)
 80106c8:	605a      	str	r2, [r3, #4]
            break;
 80106ca:	e01b      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80106cc:	4b10      	ldr	r3, [pc, #64]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80106ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	605a      	str	r2, [r3, #4]
            break;
 80106d6:	e015      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4a0d      	ldr	r2, [pc, #52]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80106dc:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80106e0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80106e2:	687c      	ldr	r4, [r7, #4]
 80106e4:	f002 fff2 	bl	80136cc <RegionGetVersion>
 80106e8:	60a0      	str	r0, [r4, #8]
            break;
 80106ea:	e00b      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80106ec:	4b08      	ldr	r3, [pc, #32]	; (8010710 <LoRaMacMibGetRequestConfirm+0x304>)
 80106ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	605a      	str	r2, [r3, #4]
            break;
 80106f6:	e005      	b.n	8010704 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 ff45 	bl	8011588 <LoRaMacClassBMibGetRequestConfirm>
 80106fe:	4603      	mov	r3, r0
 8010700:	75fb      	strb	r3, [r7, #23]
            break;
 8010702:	bf00      	nop
        }
    }
    return status;
 8010704:	7dfb      	ldrb	r3, [r7, #23]
}
 8010706:	4618      	mov	r0, r3
 8010708:	371c      	adds	r7, #28
 801070a:	46bd      	mov	sp, r7
 801070c:	bd90      	pop	{r4, r7, pc}
 801070e:	bf00      	nop
 8010710:	20000b50 	.word	0x20000b50
 8010714:	20001278 	.word	0x20001278

08010718 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801072a:	2303      	movs	r3, #3
 801072c:	e348      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801072e:	4bb7      	ldr	r3, [pc, #732]	; (8010a0c <LoRaMacMibSetRequestConfirm+0x2f4>)
 8010730:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010734:	f003 0302 	and.w	r3, r3, #2
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801073c:	2301      	movs	r3, #1
 801073e:	e33f      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	2b37      	cmp	r3, #55	; 0x37
 8010746:	f200 8319 	bhi.w	8010d7c <LoRaMacMibSetRequestConfirm+0x664>
 801074a:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <LoRaMacMibSetRequestConfirm+0x38>)
 801074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010750:	08010831 	.word	0x08010831
 8010754:	08010841 	.word	0x08010841
 8010758:	0801085b 	.word	0x0801085b
 801075c:	08010873 	.word	0x08010873
 8010760:	0801088b 	.word	0x0801088b
 8010764:	08010897 	.word	0x08010897
 8010768:	080108a3 	.word	0x080108a3
 801076c:	080108af 	.word	0x080108af
 8010770:	080108d5 	.word	0x080108d5
 8010774:	080108fb 	.word	0x080108fb
 8010778:	08010921 	.word	0x08010921
 801077c:	08010947 	.word	0x08010947
 8010780:	0801096d 	.word	0x0801096d
 8010784:	08010993 	.word	0x08010993
 8010788:	080109b9 	.word	0x080109b9
 801078c:	080109df 	.word	0x080109df
 8010790:	080109ff 	.word	0x080109ff
 8010794:	08010d7d 	.word	0x08010d7d
 8010798:	08010a19 	.word	0x08010a19
 801079c:	08010a89 	.word	0x08010a89
 80107a0:	08010ac9 	.word	0x08010ac9
 80107a4:	08010b2b 	.word	0x08010b2b
 80107a8:	08010b9b 	.word	0x08010b9b
 80107ac:	08010b6b 	.word	0x08010b6b
 80107b0:	08010bcb 	.word	0x08010bcb
 80107b4:	08010bed 	.word	0x08010bed
 80107b8:	08010bf7 	.word	0x08010bf7
 80107bc:	08010c01 	.word	0x08010c01
 80107c0:	08010c0b 	.word	0x08010c0b
 80107c4:	08010c15 	.word	0x08010c15
 80107c8:	08010c1f 	.word	0x08010c1f
 80107cc:	08010c51 	.word	0x08010c51
 80107d0:	08010cbd 	.word	0x08010cbd
 80107d4:	08010c8b 	.word	0x08010c8b
 80107d8:	08010cf9 	.word	0x08010cf9
 80107dc:	08010d0f 	.word	0x08010d0f
 80107e0:	08010d27 	.word	0x08010d27
 80107e4:	08010d31 	.word	0x08010d31
 80107e8:	08010d3d 	.word	0x08010d3d
 80107ec:	08010d7d 	.word	0x08010d7d
 80107f0:	08010d47 	.word	0x08010d47
 80107f4:	08010d7d 	.word	0x08010d7d
 80107f8:	08010d7d 	.word	0x08010d7d
 80107fc:	08010d7d 	.word	0x08010d7d
 8010800:	08010d7d 	.word	0x08010d7d
 8010804:	08010d7d 	.word	0x08010d7d
 8010808:	08010d7d 	.word	0x08010d7d
 801080c:	08010d7d 	.word	0x08010d7d
 8010810:	08010d7d 	.word	0x08010d7d
 8010814:	08010d7d 	.word	0x08010d7d
 8010818:	08010d7d 	.word	0x08010d7d
 801081c:	08010d7d 	.word	0x08010d7d
 8010820:	08010d7d 	.word	0x08010d7d
 8010824:	08010d7d 	.word	0x08010d7d
 8010828:	08010d7d 	.word	0x08010d7d
 801082c:	08010d71 	.word	0x08010d71
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	791b      	ldrb	r3, [r3, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	f7fd fb99 	bl	800df6c <SwitchClass>
 801083a:	4603      	mov	r3, r0
 801083c:	75fb      	strb	r3, [r7, #23]
            break;
 801083e:	e2be      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	791b      	ldrb	r3, [r3, #4]
 8010844:	2b02      	cmp	r3, #2
 8010846:	d005      	beq.n	8010854 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	791a      	ldrb	r2, [r3, #4]
 801084c:	4b70      	ldr	r3, [pc, #448]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801084e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010852:	e2b4      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010854:	2303      	movs	r3, #3
 8010856:	75fb      	strb	r3, [r7, #23]
            break;
 8010858:	e2b1      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	4618      	mov	r0, r3
 8010860:	f7fa fd8e 	bl	800b380 <SecureElementSetDevEui>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	f000 828e 	beq.w	8010d88 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801086c:	2303      	movs	r3, #3
 801086e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010870:	e28a      	b.n	8010d88 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	4618      	mov	r0, r3
 8010878:	f7fa fda4 	bl	800b3c4 <SecureElementSetJoinEui>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	f000 8284 	beq.w	8010d8c <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010884:	2303      	movs	r3, #3
 8010886:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010888:	e280      	b.n	8010d8c <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	791a      	ldrb	r2, [r3, #4]
 801088e:	4b60      	ldr	r3, [pc, #384]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010890:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8010894:	e293      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	4a5d      	ldr	r2, [pc, #372]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801089c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 80108a0:	e28d      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	4a5a      	ldr	r2, [pc, #360]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80108a8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 80108ac:	e287      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00b      	beq.n	80108ce <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	4619      	mov	r1, r3
 80108bc:	2000      	movs	r0, #0
 80108be:	f001 ff8d 	bl	80127dc <LoRaMacCryptoSetKey>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f000 8263 	beq.w	8010d90 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80108ca:	2311      	movs	r3, #17
 80108cc:	e278      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80108ce:	2303      	movs	r3, #3
 80108d0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80108d2:	e25d      	b.n	8010d90 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00b      	beq.n	80108f4 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	4619      	mov	r1, r3
 80108e2:	2001      	movs	r0, #1
 80108e4:	f001 ff7a 	bl	80127dc <LoRaMacCryptoSetKey>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 8252 	beq.w	8010d94 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80108f0:	2311      	movs	r3, #17
 80108f2:	e265      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80108f4:	2303      	movs	r3, #3
 80108f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80108f8:	e24c      	b.n	8010d94 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00b      	beq.n	801091a <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	4619      	mov	r1, r3
 8010908:	2002      	movs	r0, #2
 801090a:	f001 ff67 	bl	80127dc <LoRaMacCryptoSetKey>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	f000 8241 	beq.w	8010d98 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010916:	2311      	movs	r3, #17
 8010918:	e252      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801091a:	2303      	movs	r3, #3
 801091c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801091e:	e23b      	b.n	8010d98 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00b      	beq.n	8010940 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	4619      	mov	r1, r3
 801092e:	2003      	movs	r0, #3
 8010930:	f001 ff54 	bl	80127dc <LoRaMacCryptoSetKey>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	f000 8230 	beq.w	8010d9c <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801093c:	2311      	movs	r3, #17
 801093e:	e23f      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010940:	2303      	movs	r3, #3
 8010942:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010944:	e22a      	b.n	8010d9c <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00b      	beq.n	8010966 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	4619      	mov	r1, r3
 8010954:	207f      	movs	r0, #127	; 0x7f
 8010956:	f001 ff41 	bl	80127dc <LoRaMacCryptoSetKey>
 801095a:	4603      	mov	r3, r0
 801095c:	2b00      	cmp	r3, #0
 801095e:	f000 821f 	beq.w	8010da0 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010962:	2311      	movs	r3, #17
 8010964:	e22c      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010966:	2303      	movs	r3, #3
 8010968:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801096a:	e219      	b.n	8010da0 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00b      	beq.n	801098c <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	4619      	mov	r1, r3
 801097a:	2080      	movs	r0, #128	; 0x80
 801097c:	f001 ff2e 	bl	80127dc <LoRaMacCryptoSetKey>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 820e 	beq.w	8010da4 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010988:	2311      	movs	r3, #17
 801098a:	e219      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801098c:	2303      	movs	r3, #3
 801098e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010990:	e208      	b.n	8010da4 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00b      	beq.n	80109b2 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	4619      	mov	r1, r3
 80109a0:	2081      	movs	r0, #129	; 0x81
 80109a2:	f001 ff1b 	bl	80127dc <LoRaMacCryptoSetKey>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 81fd 	beq.w	8010da8 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80109ae:	2311      	movs	r3, #17
 80109b0:	e206      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109b2:	2303      	movs	r3, #3
 80109b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80109b6:	e1f7      	b.n	8010da8 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00b      	beq.n	80109d8 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	4619      	mov	r1, r3
 80109c6:	2082      	movs	r0, #130	; 0x82
 80109c8:	f001 ff08 	bl	80127dc <LoRaMacCryptoSetKey>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f000 81ec 	beq.w	8010dac <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80109d4:	2311      	movs	r3, #17
 80109d6:	e1f3      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109d8:	2303      	movs	r3, #3
 80109da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80109dc:	e1e6      	b.n	8010dac <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	791a      	ldrb	r2, [r3, #4]
 80109e2:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80109e4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80109e8:	4b0a      	ldr	r3, [pc, #40]	; (8010a14 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80109ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109ec:	4a08      	ldr	r2, [pc, #32]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80109ee:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80109f2:	4610      	mov	r0, r2
 80109f4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80109f6:	4b07      	ldr	r3, [pc, #28]	; (8010a14 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80109f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fa:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80109fc:	e1df      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	791a      	ldrb	r2, [r3, #4]
 8010a02:	4b03      	ldr	r3, [pc, #12]	; (8010a10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8010a08:	e1d9      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
 8010a0a:	bf00      	nop
 8010a0c:	20000644 	.word	0x20000644
 8010a10:	20000b50 	.word	0x20000b50
 8010a14:	0801b950 	.word	0x0801b950
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7a1b      	ldrb	r3, [r3, #8]
 8010a1c:	b25b      	sxtb	r3, r3
 8010a1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a20:	4bb3      	ldr	r3, [pc, #716]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010a22:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010a26:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010a28:	4bb1      	ldr	r3, [pc, #708]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a2e:	f107 0108 	add.w	r1, r7, #8
 8010a32:	2207      	movs	r2, #7
 8010a34:	4618      	mov	r0, r3
 8010a36:	f002 fcfc 	bl	8013432 <RegionVerify>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	f083 0301 	eor.w	r3, r3, #1
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a46:	2303      	movs	r3, #3
 8010a48:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8010a4a:	e1b8      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010a52:	4ba7      	ldr	r3, [pc, #668]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a58:	f107 0108 	add.w	r1, r7, #8
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f002 fce7 	bl	8013432 <RegionVerify>
 8010a64:	4603      	mov	r3, r0
 8010a66:	f083 0301 	eor.w	r3, r3, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d002      	beq.n	8010a76 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a70:	2303      	movs	r3, #3
 8010a72:	75fb      	strb	r3, [r7, #23]
            break;
 8010a74:	e1a3      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010a76:	4b9e      	ldr	r3, [pc, #632]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	3364      	adds	r3, #100	; 0x64
 8010a7c:	3204      	adds	r2, #4
 8010a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a82:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a86:	e19a      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	7a1b      	ldrb	r3, [r3, #8]
 8010a8c:	b25b      	sxtb	r3, r3
 8010a8e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a90:	4b97      	ldr	r3, [pc, #604]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010a92:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010a96:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010a98:	4b95      	ldr	r3, [pc, #596]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a9e:	f107 0108 	add.w	r1, r7, #8
 8010aa2:	2207      	movs	r2, #7
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f002 fcc4 	bl	8013432 <RegionVerify>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d008      	beq.n	8010ac2 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010ab0:	4b8f      	ldr	r3, [pc, #572]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	33a8      	adds	r3, #168	; 0xa8
 8010ab6:	3204      	adds	r2, #4
 8010ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010abc:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010ac0:	e17d      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ac2:	2303      	movs	r3, #3
 8010ac4:	75fb      	strb	r3, [r7, #23]
            break;
 8010ac6:	e17a      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	7a1b      	ldrb	r3, [r3, #8]
 8010acc:	b25b      	sxtb	r3, r3
 8010ace:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ad0:	4b87      	ldr	r3, [pc, #540]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ad2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010ad6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010ad8:	4b85      	ldr	r3, [pc, #532]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ade:	f107 0108 	add.w	r1, r7, #8
 8010ae2:	2207      	movs	r2, #7
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f002 fca4 	bl	8013432 <RegionVerify>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d019      	beq.n	8010b24 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010af0:	4b7f      	ldr	r3, [pc, #508]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	336c      	adds	r3, #108	; 0x6c
 8010af6:	3204      	adds	r2, #4
 8010af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010afc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010b00:	4b7b      	ldr	r3, [pc, #492]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b02:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	f040 8152 	bne.w	8010db0 <LoRaMacMibSetRequestConfirm+0x698>
 8010b0c:	4b78      	ldr	r3, [pc, #480]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f000 814c 	beq.w	8010db0 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8010b18:	4b76      	ldr	r3, [pc, #472]	; (8010cf4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8010b1e:	f7fe fc67 	bl	800f3f0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010b22:	e145      	b.n	8010db0 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b24:	2303      	movs	r3, #3
 8010b26:	75fb      	strb	r3, [r7, #23]
            break;
 8010b28:	e142      	b.n	8010db0 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	7a1b      	ldrb	r3, [r3, #8]
 8010b2e:	b25b      	sxtb	r3, r3
 8010b30:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b32:	4b6f      	ldr	r3, [pc, #444]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b34:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010b38:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010b3a:	4b6d      	ldr	r3, [pc, #436]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b40:	f107 0108 	add.w	r1, r7, #8
 8010b44:	2207      	movs	r2, #7
 8010b46:	4618      	mov	r0, r3
 8010b48:	f002 fc73 	bl	8013432 <RegionVerify>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d008      	beq.n	8010b64 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8010b52:	4b67      	ldr	r3, [pc, #412]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	33b0      	adds	r3, #176	; 0xb0
 8010b58:	3204      	adds	r2, #4
 8010b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b5e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010b62:	e12c      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b64:	2303      	movs	r3, #3
 8010b66:	75fb      	strb	r3, [r7, #23]
            break;
 8010b68:	e129      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8010b70:	2301      	movs	r3, #1
 8010b72:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010b74:	4b5e      	ldr	r3, [pc, #376]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b7a:	f107 020c 	add.w	r2, r7, #12
 8010b7e:	4611      	mov	r1, r2
 8010b80:	4618      	mov	r0, r3
 8010b82:	f002 fc7f 	bl	8013484 <RegionChanMaskSet>
 8010b86:	4603      	mov	r3, r0
 8010b88:	f083 0301 	eor.w	r3, r3, #1
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 8110 	beq.w	8010db4 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b94:	2303      	movs	r3, #3
 8010b96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010b98:	e10c      	b.n	8010db4 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010ba4:	4b52      	ldr	r3, [pc, #328]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010baa:	f107 020c 	add.w	r2, r7, #12
 8010bae:	4611      	mov	r1, r2
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f002 fc67 	bl	8013484 <RegionChanMaskSet>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	f083 0301 	eor.w	r3, r3, #1
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 80fa 	beq.w	8010db8 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bc4:	2303      	movs	r3, #3
 8010bc6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010bc8:	e0f6      	b.n	8010db8 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	791b      	ldrb	r3, [r3, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d009      	beq.n	8010be6 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010bd6:	2b0f      	cmp	r3, #15
 8010bd8:	d805      	bhi.n	8010be6 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	791a      	ldrb	r2, [r3, #4]
 8010bde:	4b44      	ldr	r3, [pc, #272]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010be0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010be4:	e0eb      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010be6:	2303      	movs	r3, #3
 8010be8:	75fb      	strb	r3, [r7, #23]
            break;
 8010bea:	e0e8      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	4a3f      	ldr	r2, [pc, #252]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8010bf4:	e0e3      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	4a3d      	ldr	r2, [pc, #244]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010bfc:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8010bfe:	e0de      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	4a3a      	ldr	r2, [pc, #232]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c06:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8010c08:	e0d9      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	4a38      	ldr	r2, [pc, #224]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c10:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8010c12:	e0d4      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	4a35      	ldr	r2, [pc, #212]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c1a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8010c1c:	e0cf      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010c24:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8010c26:	4b32      	ldr	r3, [pc, #200]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c2c:	f107 0108 	add.w	r1, r7, #8
 8010c30:	2206      	movs	r2, #6
 8010c32:	4618      	mov	r0, r3
 8010c34:	f002 fbfd 	bl	8013432 <RegionVerify>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d005      	beq.n	8010c4a <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8010c3e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010c42:	4b2b      	ldr	r3, [pc, #172]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c44:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010c48:	e0b9      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	75fb      	strb	r3, [r7, #23]
            break;
 8010c4e:	e0b6      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010c56:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010c58:	4b25      	ldr	r3, [pc, #148]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010c5e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010c60:	4b23      	ldr	r3, [pc, #140]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c66:	f107 0108 	add.w	r1, r7, #8
 8010c6a:	2205      	movs	r2, #5
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f002 fbe0 	bl	8013432 <RegionVerify>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d005      	beq.n	8010c84 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010c78:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010c7c:	4b1c      	ldr	r3, [pc, #112]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010c82:	e09c      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c84:	2303      	movs	r3, #3
 8010c86:	75fb      	strb	r3, [r7, #23]
            break;
 8010c88:	e099      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010c90:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8010c92:	4b17      	ldr	r3, [pc, #92]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c98:	f107 0108 	add.w	r1, r7, #8
 8010c9c:	220a      	movs	r2, #10
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f002 fbc7 	bl	8013432 <RegionVerify>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d005      	beq.n	8010cb6 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8010caa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010cae:	4b10      	ldr	r3, [pc, #64]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cb0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010cb4:	e083      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010cb6:	2303      	movs	r3, #3
 8010cb8:	75fb      	strb	r3, [r7, #23]
            break;
 8010cba:	e080      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010cc2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8010cc4:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cca:	f107 0108 	add.w	r1, r7, #8
 8010cce:	2209      	movs	r2, #9
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f002 fbae 	bl	8013432 <RegionVerify>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d005      	beq.n	8010ce8 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8010cdc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010ce0:	4b03      	ldr	r3, [pc, #12]	; (8010cf0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010ce6:	e06a      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	75fb      	strb	r3, [r7, #23]
            break;
 8010cec:	e067      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
 8010cee:	bf00      	nop
 8010cf0:	20000b50 	.word	0x20000b50
 8010cf4:	0801b950 	.word	0x0801b950
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	4a32      	ldr	r2, [pc, #200]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010cfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8010d02:	4b31      	ldr	r3, [pc, #196]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d08:	4a2f      	ldr	r2, [pc, #188]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d0a:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8010d0c:	e057      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	791a      	ldrb	r2, [r3, #4]
 8010d12:	4b2d      	ldr	r3, [pc, #180]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d14:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8010d18:	4b2b      	ldr	r3, [pc, #172]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d1a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010d1e:	4b2a      	ldr	r3, [pc, #168]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8010d24:	e04b      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	4a27      	ldr	r2, [pc, #156]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d2c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8010d2e:	e046      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	4a24      	ldr	r2, [pc, #144]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d36:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8010d3a:	e040      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8010d3c:	f7fe fdb2 	bl	800f8a4 <RestoreNvmData>
 8010d40:	4603      	mov	r3, r0
 8010d42:	75fb      	strb	r3, [r7, #23]
            break;
 8010d44:	e03b      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	799b      	ldrb	r3, [r3, #6]
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d80d      	bhi.n	8010d6a <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8010d4e:	4a1e      	ldr	r2, [pc, #120]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6858      	ldr	r0, [r3, #4]
 8010d5c:	f001 fc78 	bl	8012650 <LoRaMacCryptoSetLrWanVersion>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d02a      	beq.n	8010dbc <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d66:	2311      	movs	r3, #17
 8010d68:	e02a      	b.n	8010dc0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d6e:	e025      	b.n	8010dbc <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	4a14      	ldr	r2, [pc, #80]	; (8010dc8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010d76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8010d7a:	e020      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fc0d 	bl	801159c <LoRaMacMibClassBSetRequestConfirm>
 8010d82:	4603      	mov	r3, r0
 8010d84:	75fb      	strb	r3, [r7, #23]
            break;
 8010d86:	e01a      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010d88:	bf00      	nop
 8010d8a:	e018      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010d8c:	bf00      	nop
 8010d8e:	e016      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010d90:	bf00      	nop
 8010d92:	e014      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010d94:	bf00      	nop
 8010d96:	e012      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010d98:	bf00      	nop
 8010d9a:	e010      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010d9c:	bf00      	nop
 8010d9e:	e00e      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010da0:	bf00      	nop
 8010da2:	e00c      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010da4:	bf00      	nop
 8010da6:	e00a      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010da8:	bf00      	nop
 8010daa:	e008      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010dac:	bf00      	nop
 8010dae:	e006      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010db0:	bf00      	nop
 8010db2:	e004      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010db4:	bf00      	nop
 8010db6:	e002      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010db8:	bf00      	nop
 8010dba:	e000      	b.n	8010dbe <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010dbc:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8010dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3718      	adds	r7, #24
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	20000b50 	.word	0x20000b50

08010dcc <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010dd8:	2300      	movs	r3, #0
 8010dda:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010de2:	2303      	movs	r3, #3
 8010de4:	e127      	b.n	8011036 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8010de6:	f7fc fcd3 	bl	800d790 <LoRaMacIsBusy>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d001      	beq.n	8010df4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010df0:	2301      	movs	r3, #1
 8010df2:	e120      	b.n	8011036 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8010df4:	f001 f8d0 	bl	8011f98 <LoRaMacConfirmQueueIsFull>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d001      	beq.n	8010e02 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e119      	b.n	8011036 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010e02:	f001 f8bd 	bl	8011f80 <LoRaMacConfirmQueueGetCnt>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d104      	bne.n	8010e16 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8010e0c:	2214      	movs	r2, #20
 8010e0e:	2100      	movs	r1, #0
 8010e10:	488b      	ldr	r0, [pc, #556]	; (8011040 <LoRaMacMlmeRequest+0x274>)
 8010e12:	f004 fe21 	bl	8015a58 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e16:	4b8b      	ldr	r3, [pc, #556]	; (8011044 <LoRaMacMlmeRequest+0x278>)
 8010e18:	2201      	movs	r2, #1
 8010e1a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010e1e:	4a89      	ldr	r2, [pc, #548]	; (8011044 <LoRaMacMlmeRequest+0x278>)
 8010e20:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010e24:	f043 0304 	orr.w	r3, r3, #4
 8010e28:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e32:	2301      	movs	r3, #1
 8010e34:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8010e36:	2300      	movs	r3, #0
 8010e38:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	2b0d      	cmp	r3, #13
 8010e42:	f200 80ce 	bhi.w	8010fe2 <LoRaMacMlmeRequest+0x216>
 8010e46:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <LoRaMacMlmeRequest+0x80>)
 8010e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4c:	08010e85 	.word	0x08010e85
 8010e50:	08010fe3 	.word	0x08010fe3
 8010e54:	08010fe3 	.word	0x08010fe3
 8010e58:	08010eef 	.word	0x08010eef
 8010e5c:	08010f0d 	.word	0x08010f0d
 8010e60:	08010f1d 	.word	0x08010f1d
 8010e64:	08010fe3 	.word	0x08010fe3
 8010e68:	08010fe3 	.word	0x08010fe3
 8010e6c:	08010fe3 	.word	0x08010fe3
 8010e70:	08010f39 	.word	0x08010f39
 8010e74:	08010fe3 	.word	0x08010fe3
 8010e78:	08010fb7 	.word	0x08010fb7
 8010e7c:	08010f57 	.word	0x08010f57
 8010e80:	08010f99 	.word	0x08010f99
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8010e84:	4b6f      	ldr	r3, [pc, #444]	; (8011044 <LoRaMacMlmeRequest+0x278>)
 8010e86:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010e8a:	f003 0320 	and.w	r3, r3, #32
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d001      	beq.n	8010e96 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8010e92:	2301      	movs	r3, #1
 8010e94:	e0cf      	b.n	8011036 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8010e96:	f7fe f989 	bl	800f1ac <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8010e9a:	4b6b      	ldr	r3, [pc, #428]	; (8011048 <LoRaMacMlmeRequest+0x27c>)
 8010e9c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	795b      	ldrb	r3, [r3, #5]
 8010ea4:	b25b      	sxtb	r3, r3
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	f002 fbaa 	bl	8013602 <RegionAlternateDr>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	4b65      	ldr	r3, [pc, #404]	; (8011048 <LoRaMacMlmeRequest+0x27c>)
 8010eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8010eb8:	2307      	movs	r3, #7
 8010eba:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8010ebc:	20ff      	movs	r0, #255	; 0xff
 8010ebe:	f7fd feed 	bl	800ec9c <SendReJoinReq>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8010ec6:	7dfb      	ldrb	r3, [r7, #23]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f000 808c 	beq.w	8010fe6 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8010ece:	4b5e      	ldr	r3, [pc, #376]	; (8011048 <LoRaMacMlmeRequest+0x27c>)
 8010ed0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	795b      	ldrb	r3, [r3, #5]
 8010ed8:	b25b      	sxtb	r3, r3
 8010eda:	2201      	movs	r2, #1
 8010edc:	4619      	mov	r1, r3
 8010ede:	f002 fb90 	bl	8013602 <RegionAlternateDr>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	4b58      	ldr	r3, [pc, #352]	; (8011048 <LoRaMacMlmeRequest+0x27c>)
 8010ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8010eec:	e07b      	b.n	8010fe6 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010ef2:	f107 030c 	add.w	r3, r7, #12
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	4619      	mov	r1, r3
 8010efa:	2002      	movs	r0, #2
 8010efc:	f000 fcb2 	bl	8011864 <LoRaMacCommandsAddCmd>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d071      	beq.n	8010fea <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f06:	2313      	movs	r3, #19
 8010f08:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f0a:	e06e      	b.n	8010fea <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	889b      	ldrh	r3, [r3, #4]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7fe fc73 	bl	800f7fc <SetTxContinuousWave>
 8010f16:	4603      	mov	r3, r0
 8010f18:	75fb      	strb	r3, [r7, #23]
            break;
 8010f1a:	e06d      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	8898      	ldrh	r0, [r3, #4]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6899      	ldr	r1, [r3, #8]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	f7fe fc99 	bl	800f864 <SetTxContinuousWave1>
 8010f32:	4603      	mov	r3, r0
 8010f34:	75fb      	strb	r3, [r7, #23]
            break;
 8010f36:	e05f      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010f3c:	f107 030c 	add.w	r3, r7, #12
 8010f40:	2200      	movs	r2, #0
 8010f42:	4619      	mov	r1, r3
 8010f44:	200d      	movs	r0, #13
 8010f46:	f000 fc8d 	bl	8011864 <LoRaMacCommandsAddCmd>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d04e      	beq.n	8010fee <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f50:	2313      	movs	r3, #19
 8010f52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f54:	e04b      	b.n	8010fee <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010f56:	4b3c      	ldr	r3, [pc, #240]	; (8011048 <LoRaMacMlmeRequest+0x27c>)
 8010f58:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d148      	bne.n	8010ff2 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	791b      	ldrb	r3, [r3, #4]
 8010f64:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	791b      	ldrb	r3, [r3, #4]
 8010f6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	4618      	mov	r0, r3
 8010f72:	f000 fae8 	bl	8011546 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8010f76:	7dbb      	ldrb	r3, [r7, #22]
 8010f78:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8010f7e:	f107 030c 	add.w	r3, r7, #12
 8010f82:	2201      	movs	r2, #1
 8010f84:	4619      	mov	r1, r3
 8010f86:	2010      	movs	r0, #16
 8010f88:	f000 fc6c 	bl	8011864 <LoRaMacCommandsAddCmd>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d02f      	beq.n	8010ff2 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f92:	2313      	movs	r3, #19
 8010f94:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8010f96:	e02c      	b.n	8010ff2 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010f9c:	f107 030c 	add.w	r3, r7, #12
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	2012      	movs	r0, #18
 8010fa6:	f000 fc5d 	bl	8011864 <LoRaMacCommandsAddCmd>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d022      	beq.n	8010ff6 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010fb0:	2313      	movs	r3, #19
 8010fb2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010fb4:	e01f      	b.n	8010ff6 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8010fba:	f000 fa7a 	bl	80114b2 <LoRaMacClassBIsAcquisitionInProgress>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	f083 0301 	eor.w	r3, r3, #1
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d008      	beq.n	8010fdc <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8010fca:	2000      	movs	r0, #0
 8010fcc:	f000 fa53 	bl	8011476 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	f000 fa75 	bl	80114c0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8010fda:	e00d      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	75fb      	strb	r3, [r7, #23]
            break;
 8010fe0:	e00a      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8010fe2:	bf00      	nop
 8010fe4:	e008      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
            break;
 8010fe6:	bf00      	nop
 8010fe8:	e006      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
            break;
 8010fea:	bf00      	nop
 8010fec:	e004      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
            break;
 8010fee:	bf00      	nop
 8010ff0:	e002      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
            break;
 8010ff2:	bf00      	nop
 8010ff4:	e000      	b.n	8010ff8 <LoRaMacMlmeRequest+0x22c>
            break;
 8010ff6:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010ff8:	4b12      	ldr	r3, [pc, #72]	; (8011044 <LoRaMacMlmeRequest+0x278>)
 8010ffa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011002:	7dfb      	ldrb	r3, [r7, #23]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d010      	beq.n	801102a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011008:	f000 ffba 	bl	8011f80 <LoRaMacConfirmQueueGetCnt>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d110      	bne.n	8011034 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011012:	4b0c      	ldr	r3, [pc, #48]	; (8011044 <LoRaMacMlmeRequest+0x278>)
 8011014:	2200      	movs	r2, #0
 8011016:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801101a:	4a0a      	ldr	r2, [pc, #40]	; (8011044 <LoRaMacMlmeRequest+0x278>)
 801101c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011020:	f36f 0382 	bfc	r3, #2, #1
 8011024:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8011028:	e004      	b.n	8011034 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801102a:	f107 0310 	add.w	r3, r7, #16
 801102e:	4618      	mov	r0, r3
 8011030:	f000 fe58 	bl	8011ce4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011034:	7dfb      	ldrb	r3, [r7, #23]
}
 8011036:	4618      	mov	r0, r3
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	20000a90 	.word	0x20000a90
 8011044:	20000644 	.word	0x20000644
 8011048:	20000b50 	.word	0x20000b50

0801104c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b08c      	sub	sp, #48	; 0x30
 8011050:	af02      	add	r7, sp, #8
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	460b      	mov	r3, r1
 8011056:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011058:	2302      	movs	r3, #2
 801105a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011064:	2300      	movs	r3, #0
 8011066:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011068:	2300      	movs	r3, #0
 801106a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 801106c:	2300      	movs	r3, #0
 801106e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011076:	2303      	movs	r3, #3
 8011078:	e0d4      	b.n	8011224 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801107a:	f7fc fb89 	bl	800d790 <LoRaMacIsBusy>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011084:	2301      	movs	r3, #1
 8011086:	e0cd      	b.n	8011224 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011088:	2300      	movs	r3, #0
 801108a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801108c:	2214      	movs	r2, #20
 801108e:	2100      	movs	r1, #0
 8011090:	4866      	ldr	r0, [pc, #408]	; (801122c <LoRaMacMcpsRequest+0x1e0>)
 8011092:	f004 fce1 	bl	8015a58 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011096:	4b66      	ldr	r3, [pc, #408]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 8011098:	2201      	movs	r2, #1
 801109a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801109e:	4b64      	ldr	r3, [pc, #400]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 80110a0:	2201      	movs	r2, #1
 80110a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	2b03      	cmp	r3, #3
 80110ac:	d03d      	beq.n	801112a <LoRaMacMcpsRequest+0xde>
 80110ae:	2b03      	cmp	r3, #3
 80110b0:	dc4f      	bgt.n	8011152 <LoRaMacMcpsRequest+0x106>
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d002      	beq.n	80110bc <LoRaMacMcpsRequest+0x70>
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d019      	beq.n	80110ee <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80110ba:	e04a      	b.n	8011152 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80110bc:	2301      	movs	r3, #1
 80110be:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80110c0:	4b5b      	ldr	r3, [pc, #364]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 80110c2:	2201      	movs	r2, #1
 80110c4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80110c8:	7b3b      	ldrb	r3, [r7, #12]
 80110ca:	2202      	movs	r2, #2
 80110cc:	f362 1347 	bfi	r3, r2, #5, #3
 80110d0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	791b      	ldrb	r3, [r3, #4]
 80110d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	899b      	ldrh	r3, [r3, #12]
 80110e4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	7b9b      	ldrb	r3, [r3, #14]
 80110ea:	777b      	strb	r3, [r7, #29]
            break;
 80110ec:	e032      	b.n	8011154 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80110ee:	2301      	movs	r3, #1
 80110f0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7bdb      	ldrb	r3, [r3, #15]
 80110f6:	2b08      	cmp	r3, #8
 80110f8:	bf28      	it	cs
 80110fa:	2308      	movcs	r3, #8
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	4b4c      	ldr	r3, [pc, #304]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 8011100:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011104:	7b3b      	ldrb	r3, [r7, #12]
 8011106:	2204      	movs	r2, #4
 8011108:	f362 1347 	bfi	r3, r2, #5, #3
 801110c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	791b      	ldrb	r3, [r3, #4]
 8011112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	899b      	ldrh	r3, [r3, #12]
 8011120:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	7b9b      	ldrb	r3, [r3, #14]
 8011126:	777b      	strb	r3, [r7, #29]
            break;
 8011128:	e014      	b.n	8011154 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801112a:	2301      	movs	r3, #1
 801112c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801112e:	4b40      	ldr	r3, [pc, #256]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 8011130:	2201      	movs	r2, #1
 8011132:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011136:	7b3b      	ldrb	r3, [r7, #12]
 8011138:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801113c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	891b      	ldrh	r3, [r3, #8]
 8011148:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	7a9b      	ldrb	r3, [r3, #10]
 801114e:	777b      	strb	r3, [r7, #29]
            break;
 8011150:	e000      	b.n	8011154 <LoRaMacMcpsRequest+0x108>
            break;
 8011152:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011154:	2302      	movs	r3, #2
 8011156:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011158:	4b36      	ldr	r3, [pc, #216]	; (8011234 <LoRaMacMcpsRequest+0x1e8>)
 801115a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801115e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011160:	4b34      	ldr	r3, [pc, #208]	; (8011234 <LoRaMacMcpsRequest+0x1e8>)
 8011162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011166:	f107 0214 	add.w	r2, r7, #20
 801116a:	4611      	mov	r1, r2
 801116c:	4618      	mov	r0, r3
 801116e:	f002 f925 	bl	80133bc <RegionGetPhyParam>
 8011172:	4603      	mov	r3, r0
 8011174:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	b25b      	sxtb	r3, r3
 801117a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801117e:	4293      	cmp	r3, r2
 8011180:	bfb8      	it	lt
 8011182:	4613      	movlt	r3, r2
 8011184:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011186:	7f3b      	ldrb	r3, [r7, #28]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d044      	beq.n	8011216 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 801118c:	4b29      	ldr	r3, [pc, #164]	; (8011234 <LoRaMacMcpsRequest+0x1e8>)
 801118e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011192:	f083 0301 	eor.w	r3, r3, #1
 8011196:	b2db      	uxtb	r3, r3
 8011198:	2b00      	cmp	r3, #0
 801119a:	d019      	beq.n	80111d0 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 801119c:	7f7b      	ldrb	r3, [r7, #29]
 801119e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111a0:	4b24      	ldr	r3, [pc, #144]	; (8011234 <LoRaMacMcpsRequest+0x1e8>)
 80111a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111a6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80111a8:	4b22      	ldr	r3, [pc, #136]	; (8011234 <LoRaMacMcpsRequest+0x1e8>)
 80111aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111ae:	f107 0108 	add.w	r1, r7, #8
 80111b2:	2205      	movs	r2, #5
 80111b4:	4618      	mov	r0, r3
 80111b6:	f002 f93c 	bl	8013432 <RegionVerify>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d005      	beq.n	80111cc <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80111c0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80111c4:	4b1b      	ldr	r3, [pc, #108]	; (8011234 <LoRaMacMcpsRequest+0x1e8>)
 80111c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80111ca:	e001      	b.n	80111d0 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80111cc:	2303      	movs	r3, #3
 80111ce:	e029      	b.n	8011224 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80111d0:	8bfa      	ldrh	r2, [r7, #30]
 80111d2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80111d6:	f107 000c 	add.w	r0, r7, #12
 80111da:	78fb      	ldrb	r3, [r7, #3]
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	4613      	mov	r3, r2
 80111e0:	6a3a      	ldr	r2, [r7, #32]
 80111e2:	f7fd fc7b 	bl	800eadc <Send>
 80111e6:	4603      	mov	r3, r0
 80111e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80111ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10c      	bne.n	801120e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	781a      	ldrb	r2, [r3, #0]
 80111f8:	4b0d      	ldr	r3, [pc, #52]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 80111fa:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80111fe:	4a0c      	ldr	r2, [pc, #48]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 8011200:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011204:	f043 0301 	orr.w	r3, r3, #1
 8011208:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 801120c:	e003      	b.n	8011216 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801120e:	4b08      	ldr	r3, [pc, #32]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 8011210:	2200      	movs	r2, #0
 8011212:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011216:	4b06      	ldr	r3, [pc, #24]	; (8011230 <LoRaMacMcpsRequest+0x1e4>)
 8011218:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	611a      	str	r2, [r3, #16]

    return status;
 8011220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011224:	4618      	mov	r0, r3
 8011226:	3728      	adds	r7, #40	; 0x28
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000a7c 	.word	0x20000a7c
 8011230:	20000644 	.word	0x20000644
 8011234:	20000b50 	.word	0x20000b50

08011238 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	4603      	mov	r3, r0
 8011240:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011242:	79fb      	ldrb	r3, [r7, #7]
 8011244:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011246:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801124c:	f107 010c 	add.w	r1, r7, #12
 8011250:	220f      	movs	r2, #15
 8011252:	4618      	mov	r0, r3
 8011254:	f002 f8ed 	bl	8013432 <RegionVerify>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d003      	beq.n	8011266 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801125e:	4a04      	ldr	r2, [pc, #16]	; (8011270 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8011266:	bf00      	nop
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	20000b50 	.word	0x20000b50

08011274 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8011278:	f7fe ffec 	bl	8010254 <LoRaMacStop>
 801127c:	4603      	mov	r3, r0
 801127e:	2b00      	cmp	r3, #0
 8011280:	d114      	bne.n	80112ac <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8011282:	480c      	ldr	r0, [pc, #48]	; (80112b4 <LoRaMacDeInitialization+0x40>)
 8011284:	f008 fcf8 	bl	8019c78 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8011288:	480b      	ldr	r0, [pc, #44]	; (80112b8 <LoRaMacDeInitialization+0x44>)
 801128a:	f008 fcf5 	bl	8019c78 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801128e:	480b      	ldr	r0, [pc, #44]	; (80112bc <LoRaMacDeInitialization+0x48>)
 8011290:	f008 fcf2 	bl	8019c78 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8011294:	480a      	ldr	r0, [pc, #40]	; (80112c0 <LoRaMacDeInitialization+0x4c>)
 8011296:	f008 fcef 	bl	8019c78 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801129a:	f000 f95e 	bl	801155a <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 801129e:	f7fd ff85 	bl	800f1ac <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80112a2:	4b08      	ldr	r3, [pc, #32]	; (80112c4 <LoRaMacDeInitialization+0x50>)
 80112a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a6:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80112a8:	2300      	movs	r3, #0
 80112aa:	e000      	b.n	80112ae <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80112ac:	2301      	movs	r3, #1
    }
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	200009ac 	.word	0x200009ac
 80112b8:	200009c4 	.word	0x200009c4
 80112bc:	200009dc 	.word	0x200009dc
 80112c0:	20000a3c 	.word	0x20000a3c
 80112c4:	0801b950 	.word	0x0801b950

080112c8 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b08c      	sub	sp, #48	; 0x30
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80112d6:	2300      	movs	r3, #0
 80112d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	7c1b      	ldrb	r3, [r3, #16]
 80112e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	7c5b      	ldrb	r3, [r3, #17]
 80112e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	689a      	ldr	r2, [r3, #8]
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	795b      	ldrb	r3, [r3, #5]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 808b 	beq.w	8011414 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80112fe:	2302      	movs	r3, #2
 8011300:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	7c9b      	ldrb	r3, [r3, #18]
 8011308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	7cdb      	ldrb	r3, [r3, #19]
 8011310:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011314:	4611      	mov	r1, r2
 8011316:	4618      	mov	r0, r3
 8011318:	f002 f850 	bl	80133bc <RegionGetPhyParam>
 801131c:	4603      	mov	r3, r0
 801131e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011320:	6a3b      	ldr	r3, [r7, #32]
 8011322:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011326:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801132a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801132e:	4293      	cmp	r3, r2
 8011330:	bfb8      	it	lt
 8011332:	4613      	movlt	r3, r2
 8011334:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011338:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801133c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011340:	429a      	cmp	r2, r3
 8011342:	d106      	bne.n	8011352 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2200      	movs	r2, #0
 8011348:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801134a:	2300      	movs	r3, #0
 801134c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011350:	e060      	b.n	8011414 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	68fa      	ldr	r2, [r7, #12]
 8011358:	8992      	ldrh	r2, [r2, #12]
 801135a:	4293      	cmp	r3, r2
 801135c:	d303      	bcc.n	8011366 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801135e:	2301      	movs	r3, #1
 8011360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011364:	e002      	b.n	801136c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011366:	2300      	movs	r3, #0
 8011368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	689b      	ldr	r3, [r3, #8]
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	8992      	ldrh	r2, [r2, #12]
 8011374:	4611      	mov	r1, r2
 8011376:	68fa      	ldr	r2, [r7, #12]
 8011378:	89d2      	ldrh	r2, [r2, #14]
 801137a:	440a      	add	r2, r1
 801137c:	4293      	cmp	r3, r2
 801137e:	d349      	bcc.n	8011414 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011380:	2308      	movs	r3, #8
 8011382:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	7cdb      	ldrb	r3, [r3, #19]
 801138a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801138e:	4611      	mov	r1, r2
 8011390:	4618      	mov	r0, r3
 8011392:	f002 f813 	bl	80133bc <RegionGetPhyParam>
 8011396:	4603      	mov	r3, r0
 8011398:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801139a:	6a3b      	ldr	r3, [r7, #32]
 801139c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	68fa      	ldr	r2, [r7, #12]
 80113a6:	89d2      	ldrh	r2, [r2, #14]
 80113a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80113ac:	fb01 f202 	mul.w	r2, r1, r2
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d12e      	bne.n	8011414 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80113b6:	2322      	movs	r3, #34	; 0x22
 80113b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80113bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80113c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	7c9b      	ldrb	r3, [r3, #18]
 80113c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	7cdb      	ldrb	r3, [r3, #19]
 80113d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80113d4:	4611      	mov	r1, r2
 80113d6:	4618      	mov	r0, r3
 80113d8:	f001 fff0 	bl	80133bc <RegionGetPhyParam>
 80113dc:	4603      	mov	r3, r0
 80113de:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80113e0:	6a3b      	ldr	r3, [r7, #32]
 80113e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80113e6:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80113ea:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d110      	bne.n	8011414 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80113f2:	2300      	movs	r3, #0
 80113f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	791b      	ldrb	r3, [r3, #4]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d009      	beq.n	8011414 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011400:	2302      	movs	r3, #2
 8011402:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	7cdb      	ldrb	r3, [r3, #19]
 8011408:	f107 0214 	add.w	r2, r7, #20
 801140c:	4611      	mov	r1, r2
 801140e:	4618      	mov	r0, r3
 8011410:	f001 fffd 	bl	801340e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801141a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011422:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011428:	4618      	mov	r0, r3
 801142a:	3730      	adds	r7, #48	; 0x30
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
 801143c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	789b      	ldrb	r3, [r3, #2]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d107      	bne.n	8011456 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	68b9      	ldr	r1, [r7, #8]
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f7ff ff3b 	bl	80112c8 <CalcNextV10X>
 8011452:	4603      	mov	r3, r0
 8011454:	e000      	b.n	8011458 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3710      	adds	r7, #16
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801146c:	bf00      	nop
 801146e:	3714      	adds	r7, #20
 8011470:	46bd      	mov	sp, r7
 8011472:	bc80      	pop	{r7}
 8011474:	4770      	bx	lr

08011476 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011476:	b480      	push	{r7}
 8011478:	b083      	sub	sp, #12
 801147a:	af00      	add	r7, sp, #0
 801147c:	4603      	mov	r3, r0
 801147e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011480:	bf00      	nop
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	bc80      	pop	{r7}
 8011488:	4770      	bx	lr

0801148a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801148a:	b480      	push	{r7}
 801148c:	b083      	sub	sp, #12
 801148e:	af00      	add	r7, sp, #0
 8011490:	4603      	mov	r3, r0
 8011492:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	bc80      	pop	{r7}
 801149c:	4770      	bx	lr

0801149e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801149e:	b480      	push	{r7}
 80114a0:	b083      	sub	sp, #12
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	4603      	mov	r3, r0
 80114a6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bc80      	pop	{r7}
 80114b0:	4770      	bx	lr

080114b2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80114b2:	b480      	push	{r7}
 80114b4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80114b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bc80      	pop	{r7}
 80114be:	4770      	bx	lr

080114c0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80114c8:	bf00      	nop
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bc80      	pop	{r7}
 80114d0:	4770      	bx	lr

080114d2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80114d2:	b480      	push	{r7}
 80114d4:	b083      	sub	sp, #12
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80114da:	bf00      	nop
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	bc80      	pop	{r7}
 80114e2:	4770      	bx	lr

080114e4 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80114ec:	bf00      	nop
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bc80      	pop	{r7}
 80114f4:	4770      	bx	lr

080114f6 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80114f6:	b480      	push	{r7}
 80114f8:	b083      	sub	sp, #12
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
 80114fe:	460b      	mov	r3, r1
 8011500:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011502:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011504:	4618      	mov	r0, r3
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	bc80      	pop	{r7}
 801150c:	4770      	bx	lr

0801150e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801150e:	b480      	push	{r7}
 8011510:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011512:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011514:	4618      	mov	r0, r3
 8011516:	46bd      	mov	sp, r7
 8011518:	bc80      	pop	{r7}
 801151a:	4770      	bx	lr

0801151c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801151c:	b480      	push	{r7}
 801151e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011520:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011522:	4618      	mov	r0, r3
 8011524:	46bd      	mov	sp, r7
 8011526:	bc80      	pop	{r7}
 8011528:	4770      	bx	lr

0801152a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801152a:	b480      	push	{r7}
 801152c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801152e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011530:	4618      	mov	r0, r3
 8011532:	46bd      	mov	sp, r7
 8011534:	bc80      	pop	{r7}
 8011536:	4770      	bx	lr

08011538 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011538:	b480      	push	{r7}
 801153a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801153c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801153e:	4618      	mov	r0, r3
 8011540:	46bd      	mov	sp, r7
 8011542:	bc80      	pop	{r7}
 8011544:	4770      	bx	lr

08011546 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011546:	b480      	push	{r7}
 8011548:	b083      	sub	sp, #12
 801154a:	af00      	add	r7, sp, #0
 801154c:	4603      	mov	r3, r0
 801154e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011550:	bf00      	nop
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	bc80      	pop	{r7}
 8011558:	4770      	bx	lr

0801155a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801155a:	b480      	push	{r7}
 801155c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801155e:	bf00      	nop
 8011560:	46bd      	mov	sp, r7
 8011562:	bc80      	pop	{r7}
 8011564:	4770      	bx	lr

08011566 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011566:	b480      	push	{r7}
 8011568:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801156a:	bf00      	nop
 801156c:	46bd      	mov	sp, r7
 801156e:	bc80      	pop	{r7}
 8011570:	4770      	bx	lr

08011572 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011572:	b480      	push	{r7}
 8011574:	b083      	sub	sp, #12
 8011576:	af00      	add	r7, sp, #0
 8011578:	4603      	mov	r3, r0
 801157a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801157c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801157e:	4618      	mov	r0, r3
 8011580:	370c      	adds	r7, #12
 8011582:	46bd      	mov	sp, r7
 8011584:	bc80      	pop	{r7}
 8011586:	4770      	bx	lr

08011588 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011588:	b480      	push	{r7}
 801158a:	b083      	sub	sp, #12
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011590:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011592:	4618      	mov	r0, r3
 8011594:	370c      	adds	r7, #12
 8011596:	46bd      	mov	sp, r7
 8011598:	bc80      	pop	{r7}
 801159a:	4770      	bx	lr

0801159c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80115a4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bc80      	pop	{r7}
 80115ae:	4770      	bx	lr

080115b0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80115b0:	b480      	push	{r7}
 80115b2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115b4:	bf00      	nop
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bc80      	pop	{r7}
 80115ba:	4770      	bx	lr

080115bc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80115c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bc80      	pop	{r7}
 80115d2:	4770      	bx	lr

080115d4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	603a      	str	r2, [r7, #0]
 80115de:	80fb      	strh	r3, [r7, #6]
 80115e0:	460b      	mov	r3, r1
 80115e2:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115e4:	bf00      	nop
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bc80      	pop	{r7}
 80115ec:	4770      	bx	lr

080115ee <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80115ee:	b480      	push	{r7}
 80115f0:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115f2:	bf00      	nop
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bc80      	pop	{r7}
 80115f8:	4770      	bx	lr

080115fa <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80115fa:	b480      	push	{r7}
 80115fc:	b083      	sub	sp, #12
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8011602:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	bc80      	pop	{r7}
 801160c:	4770      	bx	lr

0801160e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801160e:	b480      	push	{r7}
 8011610:	b083      	sub	sp, #12
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011616:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011618:	4618      	mov	r0, r3
 801161a:	370c      	adds	r7, #12
 801161c:	46bd      	mov	sp, r7
 801161e:	bc80      	pop	{r7}
 8011620:	4770      	bx	lr

08011622 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8011622:	b480      	push	{r7}
 8011624:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011626:	bf00      	nop
 8011628:	46bd      	mov	sp, r7
 801162a:	bc80      	pop	{r7}
 801162c:	4770      	bx	lr

0801162e <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801162e:	b480      	push	{r7}
 8011630:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011632:	bf00      	nop
 8011634:	46bd      	mov	sp, r7
 8011636:	bc80      	pop	{r7}
 8011638:	4770      	bx	lr

0801163a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801163a:	b480      	push	{r7}
 801163c:	b085      	sub	sp, #20
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011646:	2300      	movs	r3, #0
 8011648:	81fb      	strh	r3, [r7, #14]
 801164a:	e00a      	b.n	8011662 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801164c:	89fb      	ldrh	r3, [r7, #14]
 801164e:	68ba      	ldr	r2, [r7, #8]
 8011650:	4413      	add	r3, r2
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <IsSlotFree+0x22>
        {
            return false;
 8011658:	2300      	movs	r3, #0
 801165a:	e006      	b.n	801166a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801165c:	89fb      	ldrh	r3, [r7, #14]
 801165e:	3301      	adds	r3, #1
 8011660:	81fb      	strh	r3, [r7, #14]
 8011662:	89fb      	ldrh	r3, [r7, #14]
 8011664:	2b0f      	cmp	r3, #15
 8011666:	d9f1      	bls.n	801164c <IsSlotFree+0x12>
        }
    }
    return true;
 8011668:	2301      	movs	r3, #1
}
 801166a:	4618      	mov	r0, r3
 801166c:	3714      	adds	r7, #20
 801166e:	46bd      	mov	sp, r7
 8011670:	bc80      	pop	{r7}
 8011672:	4770      	bx	lr

08011674 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801167a:	2300      	movs	r3, #0
 801167c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801167e:	e007      	b.n	8011690 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011680:	79fb      	ldrb	r3, [r7, #7]
 8011682:	3301      	adds	r3, #1
 8011684:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011686:	79fb      	ldrb	r3, [r7, #7]
 8011688:	2b0f      	cmp	r3, #15
 801168a:	d101      	bne.n	8011690 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801168c:	2300      	movs	r3, #0
 801168e:	e012      	b.n	80116b6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011690:	79fb      	ldrb	r3, [r7, #7]
 8011692:	011b      	lsls	r3, r3, #4
 8011694:	3308      	adds	r3, #8
 8011696:	4a0a      	ldr	r2, [pc, #40]	; (80116c0 <MallocNewMacCommandSlot+0x4c>)
 8011698:	4413      	add	r3, r2
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff ffcd 	bl	801163a <IsSlotFree>
 80116a0:	4603      	mov	r3, r0
 80116a2:	f083 0301 	eor.w	r3, r3, #1
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d1e9      	bne.n	8011680 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80116ac:	79fb      	ldrb	r3, [r7, #7]
 80116ae:	011b      	lsls	r3, r3, #4
 80116b0:	3308      	adds	r3, #8
 80116b2:	4a03      	ldr	r2, [pc, #12]	; (80116c0 <MallocNewMacCommandSlot+0x4c>)
 80116b4:	4413      	add	r3, r2
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3708      	adds	r7, #8
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	200019b8 	.word	0x200019b8

080116c4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d101      	bne.n	80116d6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80116d2:	2300      	movs	r3, #0
 80116d4:	e005      	b.n	80116e2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80116d6:	2210      	movs	r2, #16
 80116d8:	2100      	movs	r1, #0
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f004 f9bc 	bl	8015a58 <memset1>

    return true;
 80116e0:	2301      	movs	r3, #1
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3708      	adds	r7, #8
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d101      	bne.n	80116fc <LinkedListInit+0x12>
    {
        return false;
 80116f8:	2300      	movs	r3, #0
 80116fa:	e006      	b.n	801170a <LinkedListInit+0x20>
    }

    list->First = NULL;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	605a      	str	r2, [r3, #4]

    return true;
 8011708:	2301      	movs	r3, #1
}
 801170a:	4618      	mov	r0, r3
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	bc80      	pop	{r7}
 8011712:	4770      	bx	lr

08011714 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <LinkedListAdd+0x16>
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d101      	bne.n	801172e <LinkedListAdd+0x1a>
    {
        return false;
 801172a:	2300      	movs	r3, #0
 801172c:	e015      	b.n	801175a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d102      	bne.n	801173c <LinkedListAdd+0x28>
    {
        list->First = element;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	683a      	ldr	r2, [r7, #0]
 801173a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d003      	beq.n	801174c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	2200      	movs	r2, #0
 8011750:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	683a      	ldr	r2, [r7, #0]
 8011756:	605a      	str	r2, [r3, #4]

    return true;
 8011758:	2301      	movs	r3, #1
}
 801175a:	4618      	mov	r0, r3
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	bc80      	pop	{r7}
 8011762:	4770      	bx	lr

08011764 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <LinkedListGetPrevious+0x16>
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801177a:	2300      	movs	r3, #0
 801177c:	e016      	b.n	80117ac <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	429a      	cmp	r2, r3
 801178a:	d00c      	beq.n	80117a6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801178c:	e002      	b.n	8011794 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d007      	beq.n	80117aa <LinkedListGetPrevious+0x46>
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d1f4      	bne.n	801178e <LinkedListGetPrevious+0x2a>
 80117a4:	e001      	b.n	80117aa <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80117a6:	2300      	movs	r3, #0
 80117a8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80117aa:	68fb      	ldr	r3, [r7, #12]
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3714      	adds	r7, #20
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bc80      	pop	{r7}
 80117b4:	4770      	bx	lr

080117b6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d002      	beq.n	80117cc <LinkedListRemove+0x16>
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d101      	bne.n	80117d0 <LinkedListRemove+0x1a>
    {
        return false;
 80117cc:	2300      	movs	r3, #0
 80117ce:	e020      	b.n	8011812 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7ff ffc6 	bl	8011764 <LinkedListGetPrevious>
 80117d8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	683a      	ldr	r2, [r7, #0]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d103      	bne.n	80117ec <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d102      	bne.n	80117fc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d003      	beq.n	801180a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]

    return true;
 8011810:	2301      	movs	r3, #1
}
 8011812:	4618      	mov	r0, r3
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}

0801181a <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801181a:	b480      	push	{r7}
 801181c:	b083      	sub	sp, #12
 801181e:	af00      	add	r7, sp, #0
 8011820:	4603      	mov	r3, r0
 8011822:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8011824:	79fb      	ldrb	r3, [r7, #7]
 8011826:	2b05      	cmp	r3, #5
 8011828:	d004      	beq.n	8011834 <IsSticky+0x1a>
 801182a:	2b05      	cmp	r3, #5
 801182c:	db04      	blt.n	8011838 <IsSticky+0x1e>
 801182e:	3b08      	subs	r3, #8
 8011830:	2b02      	cmp	r3, #2
 8011832:	d801      	bhi.n	8011838 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8011834:	2301      	movs	r3, #1
 8011836:	e000      	b.n	801183a <IsSticky+0x20>
        default:
            return false;
 8011838:	2300      	movs	r3, #0
    }
}
 801183a:	4618      	mov	r0, r3
 801183c:	370c      	adds	r7, #12
 801183e:	46bd      	mov	sp, r7
 8011840:	bc80      	pop	{r7}
 8011842:	4770      	bx	lr

08011844 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011844:	b580      	push	{r7, lr}
 8011846:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011848:	22fc      	movs	r2, #252	; 0xfc
 801184a:	2100      	movs	r1, #0
 801184c:	4804      	ldr	r0, [pc, #16]	; (8011860 <LoRaMacCommandsInit+0x1c>)
 801184e:	f004 f903 	bl	8015a58 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011852:	4803      	ldr	r0, [pc, #12]	; (8011860 <LoRaMacCommandsInit+0x1c>)
 8011854:	f7ff ff49 	bl	80116ea <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011858:	2300      	movs	r3, #0
}
 801185a:	4618      	mov	r0, r3
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	200019b8 	.word	0x200019b8

08011864 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	4603      	mov	r3, r0
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
 8011870:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d101      	bne.n	801187c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011878:	2301      	movs	r3, #1
 801187a:	e033      	b.n	80118e4 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801187c:	f7ff fefa 	bl	8011674 <MallocNewMacCommandSlot>
 8011880:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d101      	bne.n	801188c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011888:	2302      	movs	r3, #2
 801188a:	e02b      	b.n	80118e4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801188c:	6979      	ldr	r1, [r7, #20]
 801188e:	4817      	ldr	r0, [pc, #92]	; (80118ec <LoRaMacCommandsAddCmd+0x88>)
 8011890:	f7ff ff40 	bl	8011714 <LinkedListAdd>
 8011894:	4603      	mov	r3, r0
 8011896:	f083 0301 	eor.w	r3, r3, #1
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d001      	beq.n	80118a4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80118a0:	2305      	movs	r3, #5
 80118a2:	e01f      	b.n	80118e4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	7bfa      	ldrb	r2, [r7, #15]
 80118a8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	3305      	adds	r3, #5
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	b292      	uxth	r2, r2
 80118b8:	68b9      	ldr	r1, [r7, #8]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f004 f891 	bl	80159e2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ff ffa9 	bl	801181a <IsSticky>
 80118c8:	4603      	mov	r3, r0
 80118ca:	461a      	mov	r2, r3
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80118d0:	4b06      	ldr	r3, [pc, #24]	; (80118ec <LoRaMacCommandsAddCmd+0x88>)
 80118d2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4413      	add	r3, r2
 80118da:	3301      	adds	r3, #1
 80118dc:	4a03      	ldr	r2, [pc, #12]	; (80118ec <LoRaMacCommandsAddCmd+0x88>)
 80118de:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	200019b8 	.word	0x200019b8

080118f0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d101      	bne.n	8011902 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80118fe:	2301      	movs	r3, #1
 8011900:	e021      	b.n	8011946 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8011902:	6879      	ldr	r1, [r7, #4]
 8011904:	4812      	ldr	r0, [pc, #72]	; (8011950 <LoRaMacCommandsRemoveCmd+0x60>)
 8011906:	f7ff ff56 	bl	80117b6 <LinkedListRemove>
 801190a:	4603      	mov	r3, r0
 801190c:	f083 0301 	eor.w	r3, r3, #1
 8011910:	b2db      	uxtb	r3, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011916:	2303      	movs	r3, #3
 8011918:	e015      	b.n	8011946 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801191a:	4b0d      	ldr	r3, [pc, #52]	; (8011950 <LoRaMacCommandsRemoveCmd+0x60>)
 801191c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	1ad3      	subs	r3, r2, r3
 8011926:	3b01      	subs	r3, #1
 8011928:	4a09      	ldr	r2, [pc, #36]	; (8011950 <LoRaMacCommandsRemoveCmd+0x60>)
 801192a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fec8 	bl	80116c4 <FreeMacCommandSlot>
 8011934:	4603      	mov	r3, r0
 8011936:	f083 0301 	eor.w	r3, r3, #1
 801193a:	b2db      	uxtb	r3, r3
 801193c:	2b00      	cmp	r3, #0
 801193e:	d001      	beq.n	8011944 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011940:	2305      	movs	r3, #5
 8011942:	e000      	b.n	8011946 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011944:	2300      	movs	r3, #0
}
 8011946:	4618      	mov	r0, r3
 8011948:	3708      	adds	r7, #8
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	200019b8 	.word	0x200019b8

08011954 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801195a:	4b0f      	ldr	r3, [pc, #60]	; (8011998 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011960:	e012      	b.n	8011988 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	7b1b      	ldrb	r3, [r3, #12]
 8011966:	f083 0301 	eor.w	r3, r3, #1
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b00      	cmp	r3, #0
 801196e:	d008      	beq.n	8011982 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f7ff ffba 	bl	80118f0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	607b      	str	r3, [r7, #4]
 8011980:	e002      	b.n	8011988 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1e9      	bne.n	8011962 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	200019b8 	.word	0x200019b8

0801199c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80119a2:	4b0e      	ldr	r3, [pc, #56]	; (80119dc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80119a8:	e00f      	b.n	80119ca <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	791b      	ldrb	r3, [r3, #4]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7ff ff30 	bl	801181a <IsSticky>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d002      	beq.n	80119c6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7ff ff95 	bl	80118f0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1ec      	bne.n	80119aa <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3708      	adds	r7, #8
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	200019b8 	.word	0x200019b8

080119e0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80119ee:	2301      	movs	r3, #1
 80119f0:	e005      	b.n	80119fe <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80119f2:	4b05      	ldr	r3, [pc, #20]	; (8011a08 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80119f4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bc80      	pop	{r7}
 8011a06:	4770      	bx	lr
 8011a08:	200019b8 	.word	0x200019b8

08011a0c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b088      	sub	sp, #32
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011a18:	4b25      	ldr	r3, [pc, #148]	; (8011ab0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <LoRaMacCommandsSerializeCmds+0x22>
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d126      	bne.n	8011a7c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e039      	b.n	8011aa6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8011a32:	7efb      	ldrb	r3, [r7, #27]
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	1ad2      	subs	r2, r2, r3
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	689b      	ldr	r3, [r3, #8]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d320      	bcc.n	8011a84 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8011a42:	7efb      	ldrb	r3, [r7, #27]
 8011a44:	1c5a      	adds	r2, r3, #1
 8011a46:	76fa      	strb	r2, [r7, #27]
 8011a48:	461a      	mov	r2, r3
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	69fa      	ldr	r2, [r7, #28]
 8011a50:	7912      	ldrb	r2, [r2, #4]
 8011a52:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8011a54:	7efb      	ldrb	r3, [r7, #27]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	18d0      	adds	r0, r2, r3
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	1d59      	adds	r1, r3, #5
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	461a      	mov	r2, r3
 8011a66:	f003 ffbc 	bl	80159e2 <memcpy1>
            itr += curElement->PayloadSize;
 8011a6a:	69fb      	ldr	r3, [r7, #28]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	b2da      	uxtb	r2, r3
 8011a70:	7efb      	ldrb	r3, [r7, #27]
 8011a72:	4413      	add	r3, r2
 8011a74:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d1d7      	bne.n	8011a32 <LoRaMacCommandsSerializeCmds+0x26>
 8011a82:	e009      	b.n	8011a98 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8011a84:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8011a86:	e007      	b.n	8011a98 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8011a8e:	69f8      	ldr	r0, [r7, #28]
 8011a90:	f7ff ff2e 	bl	80118f0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d1f4      	bne.n	8011a88 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8011a9e:	68b8      	ldr	r0, [r7, #8]
 8011aa0:	f7ff ff9e 	bl	80119e0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3720      	adds	r7, #32
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	200019b8 	.word	0x200019b8

08011ab4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e016      	b.n	8011af4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8011ac6:	4b0e      	ldr	r3, [pc, #56]	; (8011b00 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8011ad2:	e00b      	b.n	8011aec <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	7b1b      	ldrb	r3, [r3, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d004      	beq.n	8011ae6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	e006      	b.n	8011af4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1f0      	bne.n	8011ad4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3714      	adds	r7, #20
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bc80      	pop	{r7}
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	200019b8 	.word	0x200019b8

08011b04 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8011b04:	b480      	push	{r7}
 8011b06:	b085      	sub	sp, #20
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	3b02      	subs	r3, #2
 8011b16:	2b11      	cmp	r3, #17
 8011b18:	d850      	bhi.n	8011bbc <LoRaMacCommandsGetCmdSize+0xb8>
 8011b1a:	a201      	add	r2, pc, #4	; (adr r2, 8011b20 <LoRaMacCommandsGetCmdSize+0x1c>)
 8011b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b20:	08011b69 	.word	0x08011b69
 8011b24:	08011b6f 	.word	0x08011b6f
 8011b28:	08011b75 	.word	0x08011b75
 8011b2c:	08011b7b 	.word	0x08011b7b
 8011b30:	08011b81 	.word	0x08011b81
 8011b34:	08011b87 	.word	0x08011b87
 8011b38:	08011b8d 	.word	0x08011b8d
 8011b3c:	08011b93 	.word	0x08011b93
 8011b40:	08011b99 	.word	0x08011b99
 8011b44:	08011bbd 	.word	0x08011bbd
 8011b48:	08011bbd 	.word	0x08011bbd
 8011b4c:	08011b9f 	.word	0x08011b9f
 8011b50:	08011bbd 	.word	0x08011bbd
 8011b54:	08011bbd 	.word	0x08011bbd
 8011b58:	08011ba5 	.word	0x08011ba5
 8011b5c:	08011bab 	.word	0x08011bab
 8011b60:	08011bb1 	.word	0x08011bb1
 8011b64:	08011bb7 	.word	0x08011bb7
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8011b68:	2303      	movs	r3, #3
 8011b6a:	73fb      	strb	r3, [r7, #15]
            break;
 8011b6c:	e027      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8011b6e:	2305      	movs	r3, #5
 8011b70:	73fb      	strb	r3, [r7, #15]
            break;
 8011b72:	e024      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8011b74:	2302      	movs	r3, #2
 8011b76:	73fb      	strb	r3, [r7, #15]
            break;
 8011b78:	e021      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8011b7a:	2305      	movs	r3, #5
 8011b7c:	73fb      	strb	r3, [r7, #15]
            break;
 8011b7e:	e01e      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8011b80:	2301      	movs	r3, #1
 8011b82:	73fb      	strb	r3, [r7, #15]
            break;
 8011b84:	e01b      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8011b86:	2306      	movs	r3, #6
 8011b88:	73fb      	strb	r3, [r7, #15]
            break;
 8011b8a:	e018      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8011b8c:	2302      	movs	r3, #2
 8011b8e:	73fb      	strb	r3, [r7, #15]
            break;
 8011b90:	e015      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8011b92:	2302      	movs	r3, #2
 8011b94:	73fb      	strb	r3, [r7, #15]
            break;
 8011b96:	e012      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8011b98:	2305      	movs	r3, #5
 8011b9a:	73fb      	strb	r3, [r7, #15]
            break;
 8011b9c:	e00f      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8011b9e:	2306      	movs	r3, #6
 8011ba0:	73fb      	strb	r3, [r7, #15]
            break;
 8011ba2:	e00c      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	73fb      	strb	r3, [r7, #15]
            break;
 8011ba8:	e009      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8011baa:	2305      	movs	r3, #5
 8011bac:	73fb      	strb	r3, [r7, #15]
            break;
 8011bae:	e006      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8011bb0:	2304      	movs	r3, #4
 8011bb2:	73fb      	strb	r3, [r7, #15]
            break;
 8011bb4:	e003      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8011bb6:	2304      	movs	r3, #4
 8011bb8:	73fb      	strb	r3, [r7, #15]
            break;
 8011bba:	e000      	b.n	8011bbe <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8011bbc:	bf00      	nop
        }
    }
    return cidSize;
 8011bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3714      	adds	r7, #20
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bc80      	pop	{r7}
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop

08011bcc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4a07      	ldr	r2, [pc, #28]	; (8011bf4 <IncreaseBufferPointer+0x28>)
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d102      	bne.n	8011be2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011bdc:	4b06      	ldr	r3, [pc, #24]	; (8011bf8 <IncreaseBufferPointer+0x2c>)
 8011bde:	607b      	str	r3, [r7, #4]
 8011be0:	e002      	b.n	8011be8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3304      	adds	r3, #4
 8011be6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8011be8:	687b      	ldr	r3, [r7, #4]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	370c      	adds	r7, #12
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bc80      	pop	{r7}
 8011bf2:	4770      	bx	lr
 8011bf4:	20001ad0 	.word	0x20001ad0
 8011bf8:	20001ac0 	.word	0x20001ac0

08011bfc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	4603      	mov	r3, r0
 8011c04:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8011c06:	79fb      	ldrb	r3, [r7, #7]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <IsListEmpty+0x14>
    {
        return true;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e000      	b.n	8011c12 <IsListEmpty+0x16>
    }
    return false;
 8011c10:	2300      	movs	r3, #0
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bc80      	pop	{r7}
 8011c1a:	4770      	bx	lr

08011c1c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	4603      	mov	r3, r0
 8011c24:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8011c26:	79fb      	ldrb	r3, [r7, #7]
 8011c28:	2b04      	cmp	r3, #4
 8011c2a:	d901      	bls.n	8011c30 <IsListFull+0x14>
    {
        return true;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e000      	b.n	8011c32 <IsListFull+0x16>
    }
    return false;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	370c      	adds	r7, #12
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bc80      	pop	{r7}
 8011c3a:	4770      	bx	lr

08011c3c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b086      	sub	sp, #24
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	4603      	mov	r3, r0
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
 8011c48:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011c4e:	4b13      	ldr	r3, [pc, #76]	; (8011c9c <GetElement+0x60>)
 8011c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff ffd1 	bl	8011bfc <IsListEmpty>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <GetElement+0x28>
    {
        return NULL;
 8011c60:	2300      	movs	r3, #0
 8011c62:	e017      	b.n	8011c94 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011c64:	2300      	movs	r3, #0
 8011c66:	74fb      	strb	r3, [r7, #19]
 8011c68:	e00d      	b.n	8011c86 <GetElement+0x4a>
    {
        if( element->Request == request )
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	7bfa      	ldrb	r2, [r7, #15]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d101      	bne.n	8011c78 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	e00d      	b.n	8011c94 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8011c78:	6978      	ldr	r0, [r7, #20]
 8011c7a:	f7ff ffa7 	bl	8011bcc <IncreaseBufferPointer>
 8011c7e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011c80:	7cfb      	ldrb	r3, [r7, #19]
 8011c82:	3301      	adds	r3, #1
 8011c84:	74fb      	strb	r3, [r7, #19]
 8011c86:	4b05      	ldr	r3, [pc, #20]	; (8011c9c <GetElement+0x60>)
 8011c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c8c:	7cfa      	ldrb	r2, [r7, #19]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d3eb      	bcc.n	8011c6a <GetElement+0x2e>
    }

    return NULL;
 8011c92:	2300      	movs	r3, #0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	20001ab4 	.word	0x20001ab4

08011ca0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8011ca8:	4a0c      	ldr	r2, [pc, #48]	; (8011cdc <LoRaMacConfirmQueueInit+0x3c>)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8011cae:	4b0b      	ldr	r3, [pc, #44]	; (8011cdc <LoRaMacConfirmQueueInit+0x3c>)
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011cb6:	4b09      	ldr	r3, [pc, #36]	; (8011cdc <LoRaMacConfirmQueueInit+0x3c>)
 8011cb8:	4a09      	ldr	r2, [pc, #36]	; (8011ce0 <LoRaMacConfirmQueueInit+0x40>)
 8011cba:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011cbc:	4b07      	ldr	r3, [pc, #28]	; (8011cdc <LoRaMacConfirmQueueInit+0x3c>)
 8011cbe:	4a08      	ldr	r2, [pc, #32]	; (8011ce0 <LoRaMacConfirmQueueInit+0x40>)
 8011cc0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8011cc2:	2214      	movs	r2, #20
 8011cc4:	21ff      	movs	r1, #255	; 0xff
 8011cc6:	4806      	ldr	r0, [pc, #24]	; (8011ce0 <LoRaMacConfirmQueueInit+0x40>)
 8011cc8:	f003 fec6 	bl	8015a58 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011ccc:	4b03      	ldr	r3, [pc, #12]	; (8011cdc <LoRaMacConfirmQueueInit+0x3c>)
 8011cce:	2201      	movs	r2, #1
 8011cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8011cd4:	bf00      	nop
 8011cd6:	3708      	adds	r7, #8
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	20001ab4 	.word	0x20001ab4
 8011ce0:	20001ac0 	.word	0x20001ac0

08011ce4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011cec:	4b19      	ldr	r3, [pc, #100]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7ff ff92 	bl	8011c1c <IsListFull>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d001      	beq.n	8011d02 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e023      	b.n	8011d4a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8011d02:	4b14      	ldr	r3, [pc, #80]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	7812      	ldrb	r2, [r2, #0]
 8011d0a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8011d0c:	4b11      	ldr	r3, [pc, #68]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	7852      	ldrb	r2, [r2, #1]
 8011d14:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8011d16:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d18:	689b      	ldr	r3, [r3, #8]
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	78d2      	ldrb	r2, [r2, #3]
 8011d1e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8011d20:	4b0c      	ldr	r3, [pc, #48]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d22:	689b      	ldr	r3, [r3, #8]
 8011d24:	2200      	movs	r2, #0
 8011d26:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8011d28:	4b0a      	ldr	r3, [pc, #40]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	b2da      	uxtb	r2, r3
 8011d32:	4b08      	ldr	r3, [pc, #32]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d34:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8011d38:	4b06      	ldr	r3, [pc, #24]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7ff ff45 	bl	8011bcc <IncreaseBufferPointer>
 8011d42:	4603      	mov	r3, r0
 8011d44:	4a03      	ldr	r2, [pc, #12]	; (8011d54 <LoRaMacConfirmQueueAdd+0x70>)
 8011d46:	6093      	str	r3, [r2, #8]

    return true;
 8011d48:	2301      	movs	r3, #1
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20001ab4 	.word	0x20001ab4

08011d58 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011d5c:	4b0e      	ldr	r3, [pc, #56]	; (8011d98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff ff4a 	bl	8011bfc <IsListEmpty>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e010      	b.n	8011d94 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8011d72:	4b09      	ldr	r3, [pc, #36]	; (8011d98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	4b06      	ldr	r3, [pc, #24]	; (8011d98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011d7e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8011d82:	4b05      	ldr	r3, [pc, #20]	; (8011d98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7ff ff20 	bl	8011bcc <IncreaseBufferPointer>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	4a02      	ldr	r2, [pc, #8]	; (8011d98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011d90:	6053      	str	r3, [r2, #4]

    return true;
 8011d92:	2301      	movs	r3, #1
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	20001ab4 	.word	0x20001ab4

08011d9c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	4603      	mov	r3, r0
 8011da4:	460a      	mov	r2, r1
 8011da6:	71fb      	strb	r3, [r7, #7]
 8011da8:	4613      	mov	r3, r2
 8011daa:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8011dac:	2300      	movs	r3, #0
 8011dae:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011db0:	4b10      	ldr	r3, [pc, #64]	; (8011df4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8011db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7ff ff20 	bl	8011bfc <IsListEmpty>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	f083 0301 	eor.w	r3, r3, #1
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d011      	beq.n	8011dec <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011dc8:	4b0a      	ldr	r3, [pc, #40]	; (8011df4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8011dca:	6859      	ldr	r1, [r3, #4]
 8011dcc:	4b09      	ldr	r3, [pc, #36]	; (8011df4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8011dce:	689a      	ldr	r2, [r3, #8]
 8011dd0:	79bb      	ldrb	r3, [r7, #6]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff ff32 	bl	8011c3c <GetElement>
 8011dd8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d005      	beq.n	8011dec <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	79fa      	ldrb	r2, [r7, #7]
 8011de4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	2201      	movs	r2, #1
 8011dea:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8011dec:	bf00      	nop
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	20001ab4 	.word	0x20001ab4

08011df8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	4603      	mov	r3, r0
 8011e00:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8011e02:	2300      	movs	r3, #0
 8011e04:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011e06:	4b10      	ldr	r3, [pc, #64]	; (8011e48 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff fef5 	bl	8011bfc <IsListEmpty>
 8011e12:	4603      	mov	r3, r0
 8011e14:	f083 0301 	eor.w	r3, r3, #1
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00e      	beq.n	8011e3c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011e1e:	4b0a      	ldr	r3, [pc, #40]	; (8011e48 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011e20:	6859      	ldr	r1, [r3, #4]
 8011e22:	4b09      	ldr	r3, [pc, #36]	; (8011e48 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011e24:	689a      	ldr	r2, [r3, #8]
 8011e26:	79fb      	ldrb	r3, [r7, #7]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff ff07 	bl	8011c3c <GetElement>
 8011e2e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d002      	beq.n	8011e3c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	785b      	ldrb	r3, [r3, #1]
 8011e3a:	e000      	b.n	8011e3e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e3c:	2301      	movs	r3, #1
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	20001ab4 	.word	0x20001ab4

08011e4c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	4603      	mov	r3, r0
 8011e54:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8011e56:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8011e5c:	4a14      	ldr	r2, [pc, #80]	; (8011eb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011e5e:	79fb      	ldrb	r3, [r7, #7]
 8011e60:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011e64:	4b12      	ldr	r3, [pc, #72]	; (8011eb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff fec6 	bl	8011bfc <IsListEmpty>
 8011e70:	4603      	mov	r3, r0
 8011e72:	f083 0301 	eor.w	r3, r3, #1
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d015      	beq.n	8011ea8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	79fa      	ldrb	r2, [r7, #7]
 8011e80:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	78db      	ldrb	r3, [r3, #3]
 8011e86:	f083 0301 	eor.w	r3, r3, #1
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d002      	beq.n	8011e96 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2201      	movs	r2, #1
 8011e94:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f7ff fe98 	bl	8011bcc <IncreaseBufferPointer>
 8011e9c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8011e9e:	4b04      	ldr	r3, [pc, #16]	; (8011eb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011ea0:	689b      	ldr	r3, [r3, #8]
 8011ea2:	68fa      	ldr	r2, [r7, #12]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d1e9      	bne.n	8011e7c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8011ea8:	bf00      	nop
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	20001ab4 	.word	0x20001ab4

08011eb4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011ebe:	4b09      	ldr	r3, [pc, #36]	; (8011ee4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011ec0:	6859      	ldr	r1, [r3, #4]
 8011ec2:	4b08      	ldr	r3, [pc, #32]	; (8011ee4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011ec4:	689a      	ldr	r2, [r3, #8]
 8011ec6:	79fb      	ldrb	r3, [r7, #7]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7ff feb7 	bl	8011c3c <GetElement>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e000      	b.n	8011eda <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8011ed8:	2300      	movs	r3, #0
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3708      	adds	r7, #8
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20001ab4 	.word	0x20001ab4

08011ee8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011ef0:	4b22      	ldr	r3, [pc, #136]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ef6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8011efc:	2300      	movs	r3, #0
 8011efe:	73fb      	strb	r3, [r7, #15]
 8011f00:	e032      	b.n	8011f68 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8011f02:	4b1e      	ldr	r3, [pc, #120]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	781a      	ldrb	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8011f0c:	4b1b      	ldr	r3, [pc, #108]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	785a      	ldrb	r2, [r3, #1]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8011f16:	4b19      	ldr	r3, [pc, #100]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	789b      	ldrb	r3, [r3, #2]
 8011f1c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8011f1e:	7b7b      	ldrb	r3, [r7, #13]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d005      	beq.n	8011f30 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8011f24:	4b15      	ldr	r3, [pc, #84]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	689b      	ldr	r3, [r3, #8]
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	4798      	blx	r3
 8011f2e:	e00b      	b.n	8011f48 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8011f30:	4b12      	ldr	r3, [pc, #72]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8011f38:	4b10      	ldr	r3, [pc, #64]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	785b      	ldrb	r3, [r3, #1]
 8011f3e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8011f40:	4b0e      	ldr	r3, [pc, #56]	; (8011f7c <LoRaMacConfirmQueueHandleCb+0x94>)
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	78db      	ldrb	r3, [r3, #3]
 8011f46:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8011f48:	f7ff ff06 	bl	8011d58 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8011f4c:	7b7b      	ldrb	r3, [r7, #13]
 8011f4e:	f083 0301 	eor.w	r3, r3, #1
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d004      	beq.n	8011f62 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8011f58:	f107 0308 	add.w	r3, r7, #8
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ff fec1 	bl	8011ce4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8011f62:	7bfb      	ldrb	r3, [r7, #15]
 8011f64:	3301      	adds	r3, #1
 8011f66:	73fb      	strb	r3, [r7, #15]
 8011f68:	7bfa      	ldrb	r2, [r7, #15]
 8011f6a:	7bbb      	ldrb	r3, [r7, #14]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d3c8      	bcc.n	8011f02 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8011f70:	bf00      	nop
 8011f72:	bf00      	nop
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	20001ab4 	.word	0x20001ab4

08011f80 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8011f80:	b480      	push	{r7}
 8011f82:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011f84:	4b03      	ldr	r3, [pc, #12]	; (8011f94 <LoRaMacConfirmQueueGetCnt+0x14>)
 8011f86:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bc80      	pop	{r7}
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	20001ab4 	.word	0x20001ab4

08011f98 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011f9c:	4b06      	ldr	r3, [pc, #24]	; (8011fb8 <LoRaMacConfirmQueueIsFull+0x20>)
 8011f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7ff fe3a 	bl	8011c1c <IsListFull>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e000      	b.n	8011fb4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8011fb2:	2300      	movs	r3, #0
    }
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	20001ab4 	.word	0x20001ab4

08011fbc <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b08e      	sub	sp, #56	; 0x38
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	607b      	str	r3, [r7, #4]
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	817b      	strh	r3, [r7, #10]
 8011fca:	4613      	mov	r3, r2
 8011fcc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d101      	bne.n	8011fd8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011fd4:	230a      	movs	r3, #10
 8011fd6:	e086      	b.n	80120e6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	623b      	str	r3, [r7, #32]
 8011fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fea:	2200      	movs	r2, #0
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	605a      	str	r2, [r3, #4]
 8011ff0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	f107 0314 	add.w	r3, r7, #20
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	605a      	str	r2, [r3, #4]
 8012000:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012002:	2301      	movs	r3, #1
 8012004:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012006:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801200a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	b2db      	uxtb	r3, r3
 8012010:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	0a1b      	lsrs	r3, r3, #8
 8012016:	b2db      	uxtb	r3, r3
 8012018:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	0c1b      	lsrs	r3, r3, #16
 801201e:	b2db      	uxtb	r3, r3
 8012020:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	0e1b      	lsrs	r3, r3, #24
 8012026:	b2db      	uxtb	r3, r3
 8012028:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801202a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801202c:	b2db      	uxtb	r3, r3
 801202e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012032:	0a1b      	lsrs	r3, r3, #8
 8012034:	b2db      	uxtb	r3, r3
 8012036:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801203a:	0c1b      	lsrs	r3, r3, #16
 801203c:	b2db      	uxtb	r3, r3
 801203e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012042:	0e1b      	lsrs	r3, r3, #24
 8012044:	b2db      	uxtb	r3, r3
 8012046:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012048:	e048      	b.n	80120dc <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801204a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801204c:	b2db      	uxtb	r3, r3
 801204e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012050:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012052:	3301      	adds	r3, #1
 8012054:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012056:	f107 0320 	add.w	r3, r7, #32
 801205a:	7a7a      	ldrb	r2, [r7, #9]
 801205c:	f107 0010 	add.w	r0, r7, #16
 8012060:	2110      	movs	r1, #16
 8012062:	f7f9 f852 	bl	800b10a <SecureElementAesEncrypt>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d001      	beq.n	8012070 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801206c:	230f      	movs	r3, #15
 801206e:	e03a      	b.n	80120e6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012070:	2300      	movs	r3, #0
 8012072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012076:	e01e      	b.n	80120b6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012078:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801207c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012080:	4413      	add	r3, r2
 8012082:	461a      	mov	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	4413      	add	r3, r2
 8012088:	7819      	ldrb	r1, [r3, #0]
 801208a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801208e:	3338      	adds	r3, #56	; 0x38
 8012090:	443b      	add	r3, r7
 8012092:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012096:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801209a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801209e:	4403      	add	r3, r0
 80120a0:	4618      	mov	r0, r3
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	4403      	add	r3, r0
 80120a6:	404a      	eors	r2, r1
 80120a8:	b2d2      	uxtb	r2, r2
 80120aa:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80120ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80120b0:	3301      	adds	r3, #1
 80120b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80120ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80120be:	2a10      	cmp	r2, #16
 80120c0:	bfa8      	it	ge
 80120c2:	2210      	movge	r2, #16
 80120c4:	b212      	sxth	r2, r2
 80120c6:	4293      	cmp	r3, r2
 80120c8:	dbd6      	blt.n	8012078 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80120ca:	897b      	ldrh	r3, [r7, #10]
 80120cc:	3b10      	subs	r3, #16
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80120d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120d6:	3310      	adds	r3, #16
 80120d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80120dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	dcb2      	bgt.n	801204a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80120e4:	2300      	movs	r3, #0
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3738      	adds	r7, #56	; 0x38
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}

080120ee <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80120ee:	b490      	push	{r4, r7}
 80120f0:	b082      	sub	sp, #8
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	4604      	mov	r4, r0
 80120f6:	4608      	mov	r0, r1
 80120f8:	4611      	mov	r1, r2
 80120fa:	461a      	mov	r2, r3
 80120fc:	4623      	mov	r3, r4
 80120fe:	80fb      	strh	r3, [r7, #6]
 8012100:	4603      	mov	r3, r0
 8012102:	717b      	strb	r3, [r7, #5]
 8012104:	460b      	mov	r3, r1
 8012106:	713b      	strb	r3, [r7, #4]
 8012108:	4613      	mov	r3, r2
 801210a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d101      	bne.n	8012116 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012112:	230a      	movs	r3, #10
 8012114:	e04e      	b.n	80121b4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	2249      	movs	r2, #73	; 0x49
 801211a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	3301      	adds	r3, #1
 8012120:	2200      	movs	r2, #0
 8012122:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	3302      	adds	r3, #2
 8012128:	2200      	movs	r2, #0
 801212a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	3303      	adds	r3, #3
 8012130:	2200      	movs	r2, #0
 8012132:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	3304      	adds	r3, #4
 8012138:	2200      	movs	r2, #0
 801213a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	3305      	adds	r3, #5
 8012140:	78fa      	ldrb	r2, [r7, #3]
 8012142:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	3306      	adds	r3, #6
 8012148:	693a      	ldr	r2, [r7, #16]
 801214a:	b2d2      	uxtb	r2, r2
 801214c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	0a1a      	lsrs	r2, r3, #8
 8012152:	69bb      	ldr	r3, [r7, #24]
 8012154:	3307      	adds	r3, #7
 8012156:	b2d2      	uxtb	r2, r2
 8012158:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	0c1a      	lsrs	r2, r3, #16
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	3308      	adds	r3, #8
 8012162:	b2d2      	uxtb	r2, r2
 8012164:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	0e1a      	lsrs	r2, r3, #24
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	3309      	adds	r3, #9
 801216e:	b2d2      	uxtb	r2, r2
 8012170:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	330a      	adds	r3, #10
 8012176:	697a      	ldr	r2, [r7, #20]
 8012178:	b2d2      	uxtb	r2, r2
 801217a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	0a1a      	lsrs	r2, r3, #8
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	330b      	adds	r3, #11
 8012184:	b2d2      	uxtb	r2, r2
 8012186:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	0c1a      	lsrs	r2, r3, #16
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	330c      	adds	r3, #12
 8012190:	b2d2      	uxtb	r2, r2
 8012192:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	0e1a      	lsrs	r2, r3, #24
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	330d      	adds	r3, #13
 801219c:	b2d2      	uxtb	r2, r2
 801219e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	330e      	adds	r3, #14
 80121a4:	2200      	movs	r2, #0
 80121a6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	330f      	adds	r3, #15
 80121ac:	88fa      	ldrh	r2, [r7, #6]
 80121ae:	b2d2      	uxtb	r2, r2
 80121b0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80121b2:	2300      	movs	r3, #0
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bc90      	pop	{r4, r7}
 80121bc:	4770      	bx	lr

080121be <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80121be:	b590      	push	{r4, r7, lr}
 80121c0:	b08b      	sub	sp, #44	; 0x2c
 80121c2:	af04      	add	r7, sp, #16
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	4608      	mov	r0, r1
 80121c8:	4611      	mov	r1, r2
 80121ca:	461a      	mov	r2, r3
 80121cc:	4603      	mov	r3, r0
 80121ce:	807b      	strh	r3, [r7, #2]
 80121d0:	460b      	mov	r3, r1
 80121d2:	707b      	strb	r3, [r7, #1]
 80121d4:	4613      	mov	r3, r2
 80121d6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d002      	beq.n	80121e4 <ComputeCmacB0+0x26>
 80121de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d101      	bne.n	80121e8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80121e4:	230a      	movs	r3, #10
 80121e6:	e024      	b.n	8012232 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80121e8:	887b      	ldrh	r3, [r7, #2]
 80121ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121ee:	d901      	bls.n	80121f4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80121f0:	230e      	movs	r3, #14
 80121f2:	e01e      	b.n	8012232 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80121f4:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80121f8:	783a      	ldrb	r2, [r7, #0]
 80121fa:	7879      	ldrb	r1, [r7, #1]
 80121fc:	8878      	ldrh	r0, [r7, #2]
 80121fe:	f107 0308 	add.w	r3, r7, #8
 8012202:	9302      	str	r3, [sp, #8]
 8012204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	4623      	mov	r3, r4
 801220e:	f7ff ff6e 	bl	80120ee <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012212:	7879      	ldrb	r1, [r7, #1]
 8012214:	887a      	ldrh	r2, [r7, #2]
 8012216:	f107 0008 	add.w	r0, r7, #8
 801221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	460b      	mov	r3, r1
 8012220:	6879      	ldr	r1, [r7, #4]
 8012222:	f7f8 ff25 	bl	800b070 <SecureElementComputeAesCmac>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801222c:	230f      	movs	r3, #15
 801222e:	e000      	b.n	8012232 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	371c      	adds	r7, #28
 8012236:	46bd      	mov	sp, r7
 8012238:	bd90      	pop	{r4, r7, pc}

0801223a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801223a:	b590      	push	{r4, r7, lr}
 801223c:	b0cd      	sub	sp, #308	; 0x134
 801223e:	af04      	add	r7, sp, #16
 8012240:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8012244:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8012248:	6020      	str	r0, [r4, #0]
 801224a:	460c      	mov	r4, r1
 801224c:	4610      	mov	r0, r2
 801224e:	4619      	mov	r1, r3
 8012250:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012254:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012258:	4622      	mov	r2, r4
 801225a:	801a      	strh	r2, [r3, #0]
 801225c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012260:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012264:	4602      	mov	r2, r0
 8012266:	701a      	strb	r2, [r3, #0]
 8012268:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801226c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012270:	460a      	mov	r2, r1
 8012272:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012274:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d101      	bne.n	8012286 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012282:	230a      	movs	r3, #10
 8012284:	e063      	b.n	801234e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012286:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801228a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801228e:	881b      	ldrh	r3, [r3, #0]
 8012290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012294:	d901      	bls.n	801229a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012296:	230e      	movs	r3, #14
 8012298:	e059      	b.n	801234e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801229a:	f107 030c 	add.w	r3, r7, #12
 801229e:	f44f 7288 	mov.w	r2, #272	; 0x110
 80122a2:	2100      	movs	r1, #0
 80122a4:	4618      	mov	r0, r3
 80122a6:	f003 fbd7 	bl	8015a58 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80122aa:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80122ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80122b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80122b6:	781a      	ldrb	r2, [r3, #0]
 80122b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80122bc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80122c0:	7819      	ldrb	r1, [r3, #0]
 80122c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80122c6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80122ca:	8818      	ldrh	r0, [r3, #0]
 80122cc:	f107 030c 	add.w	r3, r7, #12
 80122d0:	9302      	str	r3, [sp, #8]
 80122d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80122d6:	9301      	str	r3, [sp, #4]
 80122d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80122dc:	9300      	str	r3, [sp, #0]
 80122de:	4623      	mov	r3, r4
 80122e0:	f7ff ff05 	bl	80120ee <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80122e4:	f107 030c 	add.w	r3, r7, #12
 80122e8:	3310      	adds	r3, #16
 80122ea:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80122ee:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80122f2:	8812      	ldrh	r2, [r2, #0]
 80122f4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80122f8:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80122fc:	6809      	ldr	r1, [r1, #0]
 80122fe:	4618      	mov	r0, r3
 8012300:	f003 fb6f 	bl	80159e2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012304:	2306      	movs	r3, #6
 8012306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801230a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801230e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012312:	881b      	ldrh	r3, [r3, #0]
 8012314:	3310      	adds	r3, #16
 8012316:	b299      	uxth	r1, r3
 8012318:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801231c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	f107 000c 	add.w	r0, r7, #12
 8012326:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801232a:	f7f8 febf 	bl	800b0ac <SecureElementVerifyAesCmac>
 801232e:	4603      	mov	r3, r0
 8012330:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012334:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801233c:	2300      	movs	r3, #0
 801233e:	e006      	b.n	801234e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012340:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012344:	2b01      	cmp	r3, #1
 8012346:	d101      	bne.n	801234c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012348:	2301      	movs	r3, #1
 801234a:	e000      	b.n	801234e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801234c:	230f      	movs	r3, #15
}
 801234e:	4618      	mov	r0, r3
 8012350:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012354:	46bd      	mov	sp, r7
 8012356:	bd90      	pop	{r4, r7, pc}

08012358 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012358:	b480      	push	{r7}
 801235a:	b085      	sub	sp, #20
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	6039      	str	r1, [r7, #0]
 8012362:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012364:	2300      	movs	r3, #0
 8012366:	73fb      	strb	r3, [r7, #15]
 8012368:	e011      	b.n	801238e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801236a:	7bfb      	ldrb	r3, [r7, #15]
 801236c:	4a0c      	ldr	r2, [pc, #48]	; (80123a0 <GetKeyAddrItem+0x48>)
 801236e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012372:	79fa      	ldrb	r2, [r7, #7]
 8012374:	429a      	cmp	r2, r3
 8012376:	d107      	bne.n	8012388 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012378:	7bfb      	ldrb	r3, [r7, #15]
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	4a08      	ldr	r2, [pc, #32]	; (80123a0 <GetKeyAddrItem+0x48>)
 801237e:	441a      	add	r2, r3
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012384:	2300      	movs	r3, #0
 8012386:	e006      	b.n	8012396 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	3301      	adds	r3, #1
 801238c:	73fb      	strb	r3, [r7, #15]
 801238e:	7bfb      	ldrb	r3, [r7, #15]
 8012390:	2b01      	cmp	r3, #1
 8012392:	d9ea      	bls.n	801236a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012394:	230c      	movs	r3, #12
}
 8012396:	4618      	mov	r0, r3
 8012398:	3714      	adds	r7, #20
 801239a:	46bd      	mov	sp, r7
 801239c:	bc80      	pop	{r7}
 801239e:	4770      	bx	lr
 80123a0:	20000114 	.word	0x20000114

080123a4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b088      	sub	sp, #32
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60b9      	str	r1, [r7, #8]
 80123ac:	607a      	str	r2, [r7, #4]
 80123ae:	461a      	mov	r2, r3
 80123b0:	4603      	mov	r3, r0
 80123b2:	73fb      	strb	r3, [r7, #15]
 80123b4:	4613      	mov	r3, r2
 80123b6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80123b8:	2300      	movs	r3, #0
 80123ba:	613b      	str	r3, [r7, #16]
 80123bc:	f107 0314 	add.w	r3, r7, #20
 80123c0:	2200      	movs	r2, #0
 80123c2:	601a      	str	r2, [r3, #0]
 80123c4:	605a      	str	r2, [r3, #4]
 80123c6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80123c8:	7bfb      	ldrb	r3, [r7, #15]
 80123ca:	2b02      	cmp	r3, #2
 80123cc:	d002      	beq.n	80123d4 <DeriveSessionKey10x+0x30>
 80123ce:	2b03      	cmp	r3, #3
 80123d0:	d003      	beq.n	80123da <DeriveSessionKey10x+0x36>
 80123d2:	e005      	b.n	80123e0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80123d4:	2301      	movs	r3, #1
 80123d6:	743b      	strb	r3, [r7, #16]
            break;
 80123d8:	e004      	b.n	80123e4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80123da:	2302      	movs	r3, #2
 80123dc:	743b      	strb	r3, [r7, #16]
            break;
 80123de:	e001      	b.n	80123e4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80123e0:	230b      	movs	r3, #11
 80123e2:	e02a      	b.n	801243a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	0a1b      	lsrs	r3, r3, #8
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	0c1b      	lsrs	r3, r3, #16
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	0a1b      	lsrs	r3, r3, #8
 8012404:	b2db      	uxtb	r3, r3
 8012406:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	0c1b      	lsrs	r3, r3, #16
 801240c:	b2db      	uxtb	r3, r3
 801240e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012410:	89bb      	ldrh	r3, [r7, #12]
 8012412:	b2db      	uxtb	r3, r3
 8012414:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012416:	89bb      	ldrh	r3, [r7, #12]
 8012418:	0a1b      	lsrs	r3, r3, #8
 801241a:	b29b      	uxth	r3, r3
 801241c:	b2db      	uxtb	r3, r3
 801241e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012420:	7bfa      	ldrb	r2, [r7, #15]
 8012422:	f107 0310 	add.w	r3, r7, #16
 8012426:	2101      	movs	r1, #1
 8012428:	4618      	mov	r0, r3
 801242a:	f7f8 fed5 	bl	800b1d8 <SecureElementDeriveAndStoreKey>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d001      	beq.n	8012438 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012434:	230f      	movs	r3, #15
 8012436:	e000      	b.n	801243a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012438:	2300      	movs	r3, #0
}
 801243a:	4618      	mov	r0, r3
 801243c:	3720      	adds	r7, #32
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
	...

08012444 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	4603      	mov	r3, r0
 801244c:	6039      	str	r1, [r7, #0]
 801244e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d101      	bne.n	801245a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012456:	230a      	movs	r3, #10
 8012458:	e03b      	b.n	80124d2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801245a:	79fb      	ldrb	r3, [r7, #7]
 801245c:	3b01      	subs	r3, #1
 801245e:	2b03      	cmp	r3, #3
 8012460:	d834      	bhi.n	80124cc <GetLastFcntDown+0x88>
 8012462:	a201      	add	r2, pc, #4	; (adr r2, 8012468 <GetLastFcntDown+0x24>)
 8012464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012468:	08012479 	.word	0x08012479
 801246c:	08012491 	.word	0x08012491
 8012470:	080124a9 	.word	0x080124a9
 8012474:	080124c1 	.word	0x080124c1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012478:	4b18      	ldr	r3, [pc, #96]	; (80124dc <GetLastFcntDown+0x98>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	691a      	ldr	r2, [r3, #16]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012482:	4b16      	ldr	r3, [pc, #88]	; (80124dc <GetLastFcntDown+0x98>)
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	4b15      	ldr	r3, [pc, #84]	; (80124dc <GetLastFcntDown+0x98>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	6912      	ldr	r2, [r2, #16]
 801248c:	621a      	str	r2, [r3, #32]
            break;
 801248e:	e01f      	b.n	80124d0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012490:	4b12      	ldr	r3, [pc, #72]	; (80124dc <GetLastFcntDown+0x98>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	695a      	ldr	r2, [r3, #20]
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801249a:	4b10      	ldr	r3, [pc, #64]	; (80124dc <GetLastFcntDown+0x98>)
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	4b0f      	ldr	r3, [pc, #60]	; (80124dc <GetLastFcntDown+0x98>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	6952      	ldr	r2, [r2, #20]
 80124a4:	621a      	str	r2, [r3, #32]
            break;
 80124a6:	e013      	b.n	80124d0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80124a8:	4b0c      	ldr	r3, [pc, #48]	; (80124dc <GetLastFcntDown+0x98>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	699a      	ldr	r2, [r3, #24]
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80124b2:	4b0a      	ldr	r3, [pc, #40]	; (80124dc <GetLastFcntDown+0x98>)
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	4b09      	ldr	r3, [pc, #36]	; (80124dc <GetLastFcntDown+0x98>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	6992      	ldr	r2, [r2, #24]
 80124bc:	621a      	str	r2, [r3, #32]
            break;
 80124be:	e007      	b.n	80124d0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80124c0:	4b06      	ldr	r3, [pc, #24]	; (80124dc <GetLastFcntDown+0x98>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	69da      	ldr	r2, [r3, #28]
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	601a      	str	r2, [r3, #0]
            break;
 80124ca:	e001      	b.n	80124d0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80124cc:	2305      	movs	r3, #5
 80124ce:	e000      	b.n	80124d2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	370c      	adds	r7, #12
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bc80      	pop	{r7}
 80124da:	4770      	bx	lr
 80124dc:	20001ad8 	.word	0x20001ad8

080124e0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	4603      	mov	r3, r0
 80124e8:	6039      	str	r1, [r7, #0]
 80124ea:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80124ec:	2300      	movs	r3, #0
 80124ee:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80124f0:	f107 020c 	add.w	r2, r7, #12
 80124f4:	79fb      	ldrb	r3, [r7, #7]
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7ff ffa3 	bl	8012444 <GetLastFcntDown>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d001      	beq.n	8012508 <CheckFCntDown+0x28>
    {
        return false;
 8012504:	2300      	movs	r3, #0
 8012506:	e00a      	b.n	801251e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	429a      	cmp	r2, r3
 801250e:	d803      	bhi.n	8012518 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012510:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012516:	d101      	bne.n	801251c <CheckFCntDown+0x3c>
    {
        return true;
 8012518:	2301      	movs	r3, #1
 801251a:	e000      	b.n	801251e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801251c:	2300      	movs	r3, #0
    }
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
	...

08012528 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	4603      	mov	r3, r0
 8012530:	6039      	str	r1, [r7, #0]
 8012532:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012534:	79fb      	ldrb	r3, [r7, #7]
 8012536:	3b01      	subs	r3, #1
 8012538:	2b03      	cmp	r3, #3
 801253a:	d81f      	bhi.n	801257c <UpdateFCntDown+0x54>
 801253c:	a201      	add	r2, pc, #4	; (adr r2, 8012544 <UpdateFCntDown+0x1c>)
 801253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012542:	bf00      	nop
 8012544:	08012555 	.word	0x08012555
 8012548:	0801255f 	.word	0x0801255f
 801254c:	08012569 	.word	0x08012569
 8012550:	08012573 	.word	0x08012573
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012554:	4b0c      	ldr	r3, [pc, #48]	; (8012588 <UpdateFCntDown+0x60>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	683a      	ldr	r2, [r7, #0]
 801255a:	611a      	str	r2, [r3, #16]
            break;
 801255c:	e00f      	b.n	801257e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801255e:	4b0a      	ldr	r3, [pc, #40]	; (8012588 <UpdateFCntDown+0x60>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	615a      	str	r2, [r3, #20]
            break;
 8012566:	e00a      	b.n	801257e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012568:	4b07      	ldr	r3, [pc, #28]	; (8012588 <UpdateFCntDown+0x60>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	683a      	ldr	r2, [r7, #0]
 801256e:	619a      	str	r2, [r3, #24]
            break;
 8012570:	e005      	b.n	801257e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012572:	4b05      	ldr	r3, [pc, #20]	; (8012588 <UpdateFCntDown+0x60>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	683a      	ldr	r2, [r7, #0]
 8012578:	61da      	str	r2, [r3, #28]
            break;
 801257a:	e000      	b.n	801257e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801257c:	bf00      	nop
    }
}
 801257e:	bf00      	nop
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	bc80      	pop	{r7}
 8012586:	4770      	bx	lr
 8012588:	20001ad8 	.word	0x20001ad8

0801258c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012592:	4b18      	ldr	r3, [pc, #96]	; (80125f4 <ResetFCnts+0x68>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2200      	movs	r2, #0
 8012598:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801259a:	4b16      	ldr	r3, [pc, #88]	; (80125f4 <ResetFCnts+0x68>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f04f 32ff 	mov.w	r2, #4294967295
 80125a2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80125a4:	4b13      	ldr	r3, [pc, #76]	; (80125f4 <ResetFCnts+0x68>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f04f 32ff 	mov.w	r2, #4294967295
 80125ac:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80125ae:	4b11      	ldr	r3, [pc, #68]	; (80125f4 <ResetFCnts+0x68>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f04f 32ff 	mov.w	r2, #4294967295
 80125b6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80125b8:	4b0e      	ldr	r3, [pc, #56]	; (80125f4 <ResetFCnts+0x68>)
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	4b0d      	ldr	r3, [pc, #52]	; (80125f4 <ResetFCnts+0x68>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	6992      	ldr	r2, [r2, #24]
 80125c2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80125c4:	2300      	movs	r3, #0
 80125c6:	607b      	str	r3, [r7, #4]
 80125c8:	e00b      	b.n	80125e2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80125ca:	4b0a      	ldr	r3, [pc, #40]	; (80125f4 <ResetFCnts+0x68>)
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	3306      	adds	r3, #6
 80125d2:	009b      	lsls	r3, r3, #2
 80125d4:	4413      	add	r3, r2
 80125d6:	f04f 32ff 	mov.w	r2, #4294967295
 80125da:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	3301      	adds	r3, #1
 80125e0:	607b      	str	r3, [r7, #4]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	ddf0      	ble.n	80125ca <ResetFCnts+0x3e>
    }
}
 80125e8:	bf00      	nop
 80125ea:	bf00      	nop
 80125ec:	370c      	adds	r7, #12
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bc80      	pop	{r7}
 80125f2:	4770      	bx	lr
 80125f4:	20001ad8 	.word	0x20001ad8

080125f8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d101      	bne.n	801260a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012606:	2309      	movs	r3, #9
 8012608:	e01c      	b.n	8012644 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801260a:	4a10      	ldr	r2, [pc, #64]	; (801264c <LoRaMacCryptoInit+0x54>)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012610:	4b0e      	ldr	r3, [pc, #56]	; (801264c <LoRaMacCryptoInit+0x54>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2228      	movs	r2, #40	; 0x28
 8012616:	2100      	movs	r1, #0
 8012618:	4618      	mov	r0, r3
 801261a:	f003 fa1d 	bl	8015a58 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801261e:	4b0b      	ldr	r3, [pc, #44]	; (801264c <LoRaMacCryptoInit+0x54>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2201      	movs	r2, #1
 8012624:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012626:	4b09      	ldr	r3, [pc, #36]	; (801264c <LoRaMacCryptoInit+0x54>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2201      	movs	r2, #1
 801262c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801262e:	4b07      	ldr	r3, [pc, #28]	; (801264c <LoRaMacCryptoInit+0x54>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	2201      	movs	r2, #1
 8012634:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012636:	4b05      	ldr	r3, [pc, #20]	; (801264c <LoRaMacCryptoInit+0x54>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2200      	movs	r2, #0
 801263c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801263e:	f7ff ffa5 	bl	801258c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8012642:	2300      	movs	r3, #0
}
 8012644:	4618      	mov	r0, r3
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	20001ad8 	.word	0x20001ad8

08012650 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012658:	4b04      	ldr	r3, [pc, #16]	; (801266c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8012660:	2300      	movs	r3, #0
}
 8012662:	4618      	mov	r0, r3
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	bc80      	pop	{r7}
 801266a:	4770      	bx	lr
 801266c:	20001ad8 	.word	0x20001ad8

08012670 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d101      	bne.n	8012682 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801267e:	230a      	movs	r3, #10
 8012680:	e006      	b.n	8012690 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012682:	4b06      	ldr	r3, [pc, #24]	; (801269c <LoRaMacCryptoGetFCntUp+0x2c>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801268e:	2300      	movs	r3, #0
}
 8012690:	4618      	mov	r0, r3
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	bc80      	pop	{r7}
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	20001ad8 	.word	0x20001ad8

080126a0 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80126a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80126a4:	b08a      	sub	sp, #40	; 0x28
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	613a      	str	r2, [r7, #16]
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	4603      	mov	r3, r0
 80126ae:	75fb      	strb	r3, [r7, #23]
 80126b0:	460b      	mov	r3, r1
 80126b2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80126b4:	2300      	movs	r3, #0
 80126b6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80126bc:	2313      	movs	r3, #19
 80126be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d101      	bne.n	80126cc <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80126c8:	230a      	movs	r3, #10
 80126ca:	e057      	b.n	801277c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80126cc:	f107 021c 	add.w	r2, r7, #28
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
 80126d2:	4611      	mov	r1, r2
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7ff feb5 	bl	8012444 <GetLastFcntDown>
 80126da:	4603      	mov	r3, r0
 80126dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80126e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d002      	beq.n	80126ee <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80126e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126ec:	e046      	b.n	801277c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126f4:	d103      	bne.n	80126fe <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	693a      	ldr	r2, [r7, #16]
 80126fa:	601a      	str	r2, [r3, #0]
 80126fc:	e01e      	b.n	801273c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	b29b      	uxth	r3, r3
 8012702:	693a      	ldr	r2, [r7, #16]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8012708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270a:	2b00      	cmp	r3, #0
 801270c:	dd05      	ble.n	801271a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801270e:	69fa      	ldr	r2, [r7, #28]
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	441a      	add	r2, r3
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	e010      	b.n	801273c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271c:	2b00      	cmp	r3, #0
 801271e:	d104      	bne.n	801272a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8012720:	69fa      	ldr	r2, [r7, #28]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8012726:	2307      	movs	r3, #7
 8012728:	e028      	b.n	801277c <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	0c1b      	lsrs	r3, r3, #16
 801272e:	041b      	lsls	r3, r3, #16
 8012730:	693a      	ldr	r2, [r7, #16]
 8012732:	4413      	add	r3, r2
 8012734:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801273c:	4b12      	ldr	r3, [pc, #72]	; (8012788 <LoRaMacCryptoGetFCntDown+0xe8>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	789b      	ldrb	r3, [r3, #2]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d119      	bne.n	801277a <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2200      	movs	r2, #0
 801274c:	603b      	str	r3, [r7, #0]
 801274e:	607a      	str	r2, [r7, #4]
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	2200      	movs	r2, #0
 8012754:	469a      	mov	sl, r3
 8012756:	4693      	mov	fp, r2
 8012758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801275c:	4611      	mov	r1, r2
 801275e:	ebb1 040a 	subs.w	r4, r1, sl
 8012762:	eb63 050b 	sbc.w	r5, r3, fp
 8012766:	8abb      	ldrh	r3, [r7, #20]
 8012768:	2200      	movs	r2, #0
 801276a:	4698      	mov	r8, r3
 801276c:	4691      	mov	r9, r2
 801276e:	4544      	cmp	r4, r8
 8012770:	eb75 0309 	sbcs.w	r3, r5, r9
 8012774:	db01      	blt.n	801277a <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012776:	2308      	movs	r3, #8
 8012778:	e000      	b.n	801277c <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801277a:	2300      	movs	r3, #0
}
 801277c:	4618      	mov	r0, r3
 801277e:	3728      	adds	r7, #40	; 0x28
 8012780:	46bd      	mov	sp, r7
 8012782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012786:	bf00      	nop
 8012788:	20001ad8 	.word	0x20001ad8

0801278c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d101      	bne.n	801279e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801279a:	230a      	movs	r3, #10
 801279c:	e017      	b.n	80127ce <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801279e:	2300      	movs	r3, #0
 80127a0:	60fb      	str	r3, [r7, #12]
 80127a2:	e010      	b.n	80127c6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80127a4:	4b0c      	ldr	r3, [pc, #48]	; (80127d8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80127a6:	6819      	ldr	r1, [r3, #0]
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	222c      	movs	r2, #44	; 0x2c
 80127ac:	fb02 f303 	mul.w	r3, r2, r3
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	4413      	add	r3, r2
 80127b4:	68fa      	ldr	r2, [r7, #12]
 80127b6:	3206      	adds	r2, #6
 80127b8:	0092      	lsls	r2, r2, #2
 80127ba:	440a      	add	r2, r1
 80127bc:	3204      	adds	r2, #4
 80127be:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	3301      	adds	r3, #1
 80127c4:	60fb      	str	r3, [r7, #12]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	ddeb      	ble.n	80127a4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80127cc:	2300      	movs	r3, #0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3714      	adds	r7, #20
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bc80      	pop	{r7}
 80127d6:	4770      	bx	lr
 80127d8:	20001ad8 	.word	0x20001ad8

080127dc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	4603      	mov	r3, r0
 80127e4:	6039      	str	r1, [r7, #0]
 80127e6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80127e8:	79fb      	ldrb	r3, [r7, #7]
 80127ea:	6839      	ldr	r1, [r7, #0]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f8 fbe1 	bl	800afb4 <SecureElementSetKey>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80127f8:	230f      	movs	r3, #15
 80127fa:	e018      	b.n	801282e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80127fc:	79fb      	ldrb	r3, [r7, #7]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d114      	bne.n	801282c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8012802:	4b0d      	ldr	r3, [pc, #52]	; (8012838 <LoRaMacCryptoSetKey+0x5c>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	789b      	ldrb	r3, [r3, #2]
 8012808:	79fa      	ldrb	r2, [r7, #7]
 801280a:	4611      	mov	r1, r2
 801280c:	4618      	mov	r0, r3
 801280e:	f000 fa3f 	bl	8012c90 <LoRaMacCryptoDeriveMcRootKey>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d001      	beq.n	801281c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012818:	230f      	movs	r3, #15
 801281a:	e008      	b.n	801282e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801281c:	2004      	movs	r0, #4
 801281e:	f000 fa62 	bl	8012ce6 <LoRaMacCryptoDeriveMcKEKey>
 8012822:	4603      	mov	r3, r0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d001      	beq.n	801282c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012828:	230f      	movs	r3, #15
 801282a:	e000      	b.n	801282e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	20001ad8 	.word	0x20001ad8

0801283c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af02      	add	r7, sp, #8
 8012842:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801284a:	230a      	movs	r3, #10
 801284c:	e033      	b.n	80128b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801284e:	2301      	movs	r3, #1
 8012850:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8012856:	f107 0308 	add.w	r3, r7, #8
 801285a:	4618      	mov	r0, r3
 801285c:	f7f8 fd7a 	bl	800b354 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	4b17      	ldr	r3, [pc, #92]	; (80128c0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	b292      	uxth	r2, r2
 8012868:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801286a:	4b15      	ldr	r3, [pc, #84]	; (80128c0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	889a      	ldrh	r2, [r3, #4]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 fc18 	bl	80130aa <LoRaMacSerializerJoinRequest>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d001      	beq.n	8012884 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012880:	2311      	movs	r3, #17
 8012882:	e018      	b.n	80128b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6819      	ldr	r1, [r3, #0]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3318      	adds	r3, #24
 801288c:	7bfa      	ldrb	r2, [r7, #15]
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	4613      	mov	r3, r2
 8012892:	2213      	movs	r2, #19
 8012894:	2000      	movs	r0, #0
 8012896:	f7f8 fbeb 	bl	800b070 <SecureElementComputeAesCmac>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128a0:	230f      	movs	r3, #15
 80128a2:	e008      	b.n	80128b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f000 fc00 	bl	80130aa <LoRaMacSerializerJoinRequest>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80128b0:	2311      	movs	r3, #17
 80128b2:	e000      	b.n	80128b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	20001ad8 	.word	0x20001ad8

080128c4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80128c4:	b590      	push	{r4, r7, lr}
 80128c6:	b097      	sub	sp, #92	; 0x5c
 80128c8:	af04      	add	r7, sp, #16
 80128ca:	4603      	mov	r3, r0
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <LoRaMacCryptoHandleJoinAccept+0x1a>
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80128de:	230a      	movs	r3, #10
 80128e0:	e0bd      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80128e2:	2313      	movs	r3, #19
 80128e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80128e8:	2300      	movs	r3, #0
 80128ea:	61bb      	str	r3, [r7, #24]
 80128ec:	f107 031c 	add.w	r3, r7, #28
 80128f0:	221d      	movs	r2, #29
 80128f2:	2100      	movs	r1, #0
 80128f4:	4618      	mov	r0, r3
 80128f6:	f007 fe65 	bl	801a5c4 <memset>
    uint8_t versionMinor         = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80128fe:	4b5a      	ldr	r3, [pc, #360]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	889b      	ldrh	r3, [r3, #4]
 8012904:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681c      	ldr	r4, [r3, #0]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	791b      	ldrb	r3, [r3, #4]
 8012910:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8012914:	7bf8      	ldrb	r0, [r7, #15]
 8012916:	f107 0217 	add.w	r2, r7, #23
 801291a:	9202      	str	r2, [sp, #8]
 801291c:	f107 0218 	add.w	r2, r7, #24
 8012920:	9201      	str	r2, [sp, #4]
 8012922:	9300      	str	r3, [sp, #0]
 8012924:	4623      	mov	r3, r4
 8012926:	460a      	mov	r2, r1
 8012928:	68b9      	ldr	r1, [r7, #8]
 801292a:	f7f8 fc95 	bl	800b258 <SecureElementProcessJoinAccept>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d001      	beq.n	8012938 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012934:	230f      	movs	r3, #15
 8012936:	e092      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6818      	ldr	r0, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	791b      	ldrb	r3, [r3, #4]
 8012940:	b29a      	uxth	r2, r3
 8012942:	f107 0318 	add.w	r3, r7, #24
 8012946:	4619      	mov	r1, r3
 8012948:	f003 f84b 	bl	80159e2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f9ed 	bl	8012d2c <LoRaMacParserJoinAccept>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d001      	beq.n	801295c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012958:	2310      	movs	r3, #16
 801295a:	e080      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	799b      	ldrb	r3, [r3, #6]
 8012960:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	79db      	ldrb	r3, [r3, #7]
 8012966:	021b      	lsls	r3, r3, #8
 8012968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801296a:	4313      	orrs	r3, r2
 801296c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	7a1b      	ldrb	r3, [r3, #8]
 8012972:	041b      	lsls	r3, r3, #16
 8012974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012976:	4313      	orrs	r3, r2
 8012978:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801297a:	4b3b      	ldr	r3, [pc, #236]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012982:	429a      	cmp	r2, r3
 8012984:	d010      	beq.n	80129a8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8012986:	4b38      	ldr	r3, [pc, #224]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801298c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801298e:	7dfb      	ldrb	r3, [r7, #23]
 8012990:	2100      	movs	r1, #0
 8012992:	4618      	mov	r0, r3
 8012994:	f000 f97c 	bl	8012c90 <LoRaMacCryptoDeriveMcRootKey>
 8012998:	4603      	mov	r3, r0
 801299a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801299e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d005      	beq.n	80129b2 <LoRaMacCryptoHandleJoinAccept+0xee>
 80129a6:	e001      	b.n	80129ac <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80129a8:	2303      	movs	r3, #3
 80129aa:	e058      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80129ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80129b0:	e055      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80129b2:	2004      	movs	r0, #4
 80129b4:	f000 f997 	bl	8012ce6 <LoRaMacCryptoDeriveMcKEKey>
 80129b8:	4603      	mov	r3, r0
 80129ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80129be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d002      	beq.n	80129cc <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80129c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80129ca:	e048      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	7a5b      	ldrb	r3, [r3, #9]
 80129d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	7a9b      	ldrb	r3, [r3, #10]
 80129d6:	021b      	lsls	r3, r3, #8
 80129d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129da:	4313      	orrs	r3, r2
 80129dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	7adb      	ldrb	r3, [r3, #11]
 80129e2:	041b      	lsls	r3, r3, #16
 80129e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129e6:	4313      	orrs	r3, r2
 80129e8:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80129ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80129ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129f2:	2003      	movs	r0, #3
 80129f4:	f7ff fcd6 	bl	80123a4 <DeriveSessionKey10x>
 80129f8:	4603      	mov	r3, r0
 80129fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80129fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d002      	beq.n	8012a0c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8012a06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a0a:	e028      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8012a0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a14:	2002      	movs	r0, #2
 8012a16:	f7ff fcc5 	bl	80123a4 <DeriveSessionKey10x>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d002      	beq.n	8012a2e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8012a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a2c:	e017      	b.n	8012a5e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8012a2e:	4b0e      	ldr	r3, [pc, #56]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	7dfa      	ldrb	r2, [r7, #23]
 8012a34:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8012a36:	4b0c      	ldr	r3, [pc, #48]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012a3e:	4b0a      	ldr	r3, [pc, #40]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f04f 32ff 	mov.w	r2, #4294967295
 8012a46:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012a48:	4b07      	ldr	r3, [pc, #28]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a50:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012a52:	4b05      	ldr	r3, [pc, #20]	; (8012a68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f04f 32ff 	mov.w	r2, #4294967295
 8012a5a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	374c      	adds	r7, #76	; 0x4c
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd90      	pop	{r4, r7, pc}
 8012a66:	bf00      	nop
 8012a68:	20001ad8 	.word	0x20001ad8

08012a6c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8012a6c:	b590      	push	{r4, r7, lr}
 8012a6e:	b08b      	sub	sp, #44	; 0x2c
 8012a70:	af04      	add	r7, sp, #16
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	607b      	str	r3, [r7, #4]
 8012a76:	460b      	mov	r3, r1
 8012a78:	72fb      	strb	r3, [r7, #11]
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012a7e:	2313      	movs	r3, #19
 8012a80:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012a82:	2303      	movs	r3, #3
 8012a84:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d101      	bne.n	8012a90 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a8c:	230a      	movs	r3, #10
 8012a8e:	e05f      	b.n	8012b50 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8012a90:	4b31      	ldr	r3, [pc, #196]	; (8012b58 <LoRaMacCryptoSecureMessage+0xec>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	68db      	ldr	r3, [r3, #12]
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d201      	bcs.n	8012aa0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012a9c:	2306      	movs	r3, #6
 8012a9e:	e057      	b.n	8012b50 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d101      	bne.n	8012aae <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012aaa:	2302      	movs	r3, #2
 8012aac:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8012aae:	4b2a      	ldr	r3, [pc, #168]	; (8012b58 <LoRaMacCryptoSecureMessage+0xec>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	68fa      	ldr	r2, [r7, #12]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d916      	bls.n	8012ae8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ac4:	b219      	sxth	r1, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	689c      	ldr	r4, [r3, #8]
 8012aca:	7dfa      	ldrb	r2, [r7, #23]
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	9301      	str	r3, [sp, #4]
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	9300      	str	r3, [sp, #0]
 8012ad4:	4623      	mov	r3, r4
 8012ad6:	f7ff fa71 	bl	8011fbc <PayloadEncrypt>
 8012ada:	4603      	mov	r3, r0
 8012adc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012ade:	7dbb      	ldrb	r3, [r7, #22]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d001      	beq.n	8012ae8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8012ae4:	7dbb      	ldrb	r3, [r7, #22]
 8012ae6:	e033      	b.n	8012b50 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f000 fb60 	bl	80131ae <LoRaMacSerializerData>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d001      	beq.n	8012af8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012af4:	2311      	movs	r3, #17
 8012af6:	e02b      	b.n	8012b50 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012af8:	2302      	movs	r3, #2
 8012afa:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6818      	ldr	r0, [r3, #0]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	791b      	ldrb	r3, [r3, #4]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	3b04      	subs	r3, #4
 8012b08:	b299      	uxth	r1, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	689b      	ldr	r3, [r3, #8]
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	322c      	adds	r2, #44	; 0x2c
 8012b12:	7dfc      	ldrb	r4, [r7, #23]
 8012b14:	9203      	str	r2, [sp, #12]
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	9202      	str	r2, [sp, #8]
 8012b1a:	9301      	str	r3, [sp, #4]
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	2300      	movs	r3, #0
 8012b22:	4622      	mov	r2, r4
 8012b24:	f7ff fb4b 	bl	80121be <ComputeCmacB0>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012b2c:	7dbb      	ldrb	r3, [r7, #22]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d001      	beq.n	8012b36 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8012b32:	7dbb      	ldrb	r3, [r7, #22]
 8012b34:	e00c      	b.n	8012b50 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 fb39 	bl	80131ae <LoRaMacSerializerData>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d001      	beq.n	8012b46 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012b42:	2311      	movs	r3, #17
 8012b44:	e004      	b.n	8012b50 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8012b46:	4b04      	ldr	r3, [pc, #16]	; (8012b58 <LoRaMacCryptoSecureMessage+0xec>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	68fa      	ldr	r2, [r7, #12]
 8012b4c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8012b4e:	2300      	movs	r3, #0
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	371c      	adds	r7, #28
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd90      	pop	{r4, r7, pc}
 8012b58:	20001ad8 	.word	0x20001ad8

08012b5c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8012b5c:	b590      	push	{r4, r7, lr}
 8012b5e:	b08b      	sub	sp, #44	; 0x2c
 8012b60:	af04      	add	r7, sp, #16
 8012b62:	60b9      	str	r1, [r7, #8]
 8012b64:	607b      	str	r3, [r7, #4]
 8012b66:	4603      	mov	r3, r0
 8012b68:	73fb      	strb	r3, [r7, #15]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8012b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d101      	bne.n	8012b78 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012b74:	230a      	movs	r3, #10
 8012b76:	e084      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8012b78:	7bbb      	ldrb	r3, [r7, #14]
 8012b7a:	6879      	ldr	r1, [r7, #4]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff fcaf 	bl	80124e0 <CheckFCntDown>
 8012b82:	4603      	mov	r3, r0
 8012b84:	f083 0301 	eor.w	r3, r3, #1
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d001      	beq.n	8012b92 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012b8e:	2306      	movs	r3, #6
 8012b90:	e077      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012b92:	2313      	movs	r3, #19
 8012b94:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012b96:	2303      	movs	r3, #3
 8012b98:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8012b9a:	2302      	movs	r3, #2
 8012b9c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ba0:	f000 f98f 	bl	8012ec2 <LoRaMacParserData>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012baa:	2310      	movs	r3, #16
 8012bac:	e069      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012bae:	f107 0210 	add.w	r2, r7, #16
 8012bb2:	7bfb      	ldrb	r3, [r7, #15]
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff fbce 	bl	8012358 <GetKeyAddrItem>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012bc0:	7d7b      	ldrb	r3, [r7, #21]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d001      	beq.n	8012bca <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8012bc6:	7d7b      	ldrb	r3, [r7, #21]
 8012bc8:	e05b      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	785b      	ldrb	r3, [r3, #1]
 8012bce:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	789b      	ldrb	r3, [r3, #2]
 8012bd4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8012bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd8:	689b      	ldr	r3, [r3, #8]
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d001      	beq.n	8012be4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012be0:	2302      	movs	r3, #2
 8012be2:	e04e      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	7b1b      	ldrb	r3, [r3, #12]
 8012be8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	bf14      	ite	ne
 8012bf2:	2301      	movne	r3, #1
 8012bf4:	2300      	moveq	r3, #0
 8012bf6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012bf8:	4b24      	ldr	r3, [pc, #144]	; (8012c8c <LoRaMacCryptoUnsecureMessage+0x130>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	789b      	ldrb	r3, [r3, #2]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d101      	bne.n	8012c06 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8012c02:	2300      	movs	r3, #0
 8012c04:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8012c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c08:	6818      	ldr	r0, [r3, #0]
 8012c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0c:	791b      	ldrb	r3, [r3, #4]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	3b04      	subs	r3, #4
 8012c12:	b299      	uxth	r1, r3
 8012c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c18:	7dbc      	ldrb	r4, [r7, #22]
 8012c1a:	7d3a      	ldrb	r2, [r7, #20]
 8012c1c:	9303      	str	r3, [sp, #12]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	9302      	str	r3, [sp, #8]
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	2301      	movs	r3, #1
 8012c28:	9300      	str	r3, [sp, #0]
 8012c2a:	4623      	mov	r3, r4
 8012c2c:	f7ff fb05 	bl	801223a <VerifyCmacB0>
 8012c30:	4603      	mov	r3, r0
 8012c32:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012c34:	7d7b      	ldrb	r3, [r7, #21]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d001      	beq.n	8012c3e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8012c3a:	7d7b      	ldrb	r3, [r7, #21]
 8012c3c:	e021      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8012c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d101      	bne.n	8012c4c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012c48:	2302      	movs	r3, #2
 8012c4a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8012c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c56:	b219      	sxth	r1, r3
 8012c58:	7dfa      	ldrb	r2, [r7, #23]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	9301      	str	r3, [sp, #4]
 8012c5e:	2301      	movs	r3, #1
 8012c60:	9300      	str	r3, [sp, #0]
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	f7ff f9aa 	bl	8011fbc <PayloadEncrypt>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012c6c:	7d7b      	ldrb	r3, [r7, #21]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d001      	beq.n	8012c76 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8012c72:	7d7b      	ldrb	r3, [r7, #21]
 8012c74:	e005      	b.n	8012c82 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8012c76:	7bbb      	ldrb	r3, [r7, #14]
 8012c78:	6879      	ldr	r1, [r7, #4]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff fc54 	bl	8012528 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	371c      	adds	r7, #28
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd90      	pop	{r4, r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	20001ad8 	.word	0x20001ad8

08012c90 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b086      	sub	sp, #24
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	4603      	mov	r3, r0
 8012c98:	460a      	mov	r2, r1
 8012c9a:	71fb      	strb	r3, [r7, #7]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8012ca0:	79bb      	ldrb	r3, [r7, #6]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d001      	beq.n	8012caa <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012ca6:	230b      	movs	r3, #11
 8012ca8:	e019      	b.n	8012cde <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8012caa:	2300      	movs	r3, #0
 8012cac:	60bb      	str	r3, [r7, #8]
 8012cae:	f107 030c 	add.w	r3, r7, #12
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	601a      	str	r2, [r3, #0]
 8012cb6:	605a      	str	r2, [r3, #4]
 8012cb8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8012cba:	79fb      	ldrb	r3, [r7, #7]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d101      	bne.n	8012cc4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8012cc0:	2320      	movs	r3, #32
 8012cc2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8012cc4:	79b9      	ldrb	r1, [r7, #6]
 8012cc6:	f107 0308 	add.w	r3, r7, #8
 8012cca:	2204      	movs	r2, #4
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7f8 fa83 	bl	800b1d8 <SecureElementDeriveAndStoreKey>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d001      	beq.n	8012cdc <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012cd8:	230f      	movs	r3, #15
 8012cda:	e000      	b.n	8012cde <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3718      	adds	r7, #24
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b086      	sub	sp, #24
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	4603      	mov	r3, r0
 8012cee:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8012cf0:	79fb      	ldrb	r3, [r7, #7]
 8012cf2:	2b04      	cmp	r3, #4
 8012cf4:	d001      	beq.n	8012cfa <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012cf6:	230b      	movs	r3, #11
 8012cf8:	e014      	b.n	8012d24 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	60bb      	str	r3, [r7, #8]
 8012cfe:	f107 030c 	add.w	r3, r7, #12
 8012d02:	2200      	movs	r2, #0
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	605a      	str	r2, [r3, #4]
 8012d08:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8012d0a:	79f9      	ldrb	r1, [r7, #7]
 8012d0c:	f107 0308 	add.w	r3, r7, #8
 8012d10:	227f      	movs	r2, #127	; 0x7f
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f8 fa60 	bl	800b1d8 <SecureElementDeriveAndStoreKey>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d1e:	230f      	movs	r3, #15
 8012d20:	e000      	b.n	8012d24 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012d22:	2300      	movs	r3, #0
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3718      	adds	r7, #24
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d003      	beq.n	8012d42 <LoRaMacParserJoinAccept+0x16>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d101      	bne.n	8012d46 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012d42:	2302      	movs	r3, #2
 8012d44:	e0b9      	b.n	8012eba <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	89fb      	ldrh	r3, [r7, #14]
 8012d50:	1c59      	adds	r1, r3, #1
 8012d52:	81f9      	strh	r1, [r7, #14]
 8012d54:	4413      	add	r3, r2
 8012d56:	781a      	ldrb	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	1d98      	adds	r0, r3, #6
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	89fb      	ldrh	r3, [r7, #14]
 8012d66:	4413      	add	r3, r2
 8012d68:	2203      	movs	r2, #3
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	f002 fe39 	bl	80159e2 <memcpy1>
    bufItr = bufItr + 3;
 8012d70:	89fb      	ldrh	r3, [r7, #14]
 8012d72:	3303      	adds	r3, #3
 8012d74:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f103 0009 	add.w	r0, r3, #9
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	89fb      	ldrh	r3, [r7, #14]
 8012d82:	4413      	add	r3, r2
 8012d84:	2203      	movs	r2, #3
 8012d86:	4619      	mov	r1, r3
 8012d88:	f002 fe2b 	bl	80159e2 <memcpy1>
    bufItr = bufItr + 3;
 8012d8c:	89fb      	ldrh	r3, [r7, #14]
 8012d8e:	3303      	adds	r3, #3
 8012d90:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	89fb      	ldrh	r3, [r7, #14]
 8012d98:	1c59      	adds	r1, r3, #1
 8012d9a:	81f9      	strh	r1, [r7, #14]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	461a      	mov	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	89fb      	ldrh	r3, [r7, #14]
 8012dac:	1c59      	adds	r1, r3, #1
 8012dae:	81f9      	strh	r1, [r7, #14]
 8012db0:	4413      	add	r3, r2
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	021a      	lsls	r2, r3, #8
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	431a      	orrs	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	89fb      	ldrh	r3, [r7, #14]
 8012dc6:	1c59      	adds	r1, r3, #1
 8012dc8:	81f9      	strh	r1, [r7, #14]
 8012dca:	4413      	add	r3, r2
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	041a      	lsls	r2, r3, #16
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	431a      	orrs	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	89fb      	ldrh	r3, [r7, #14]
 8012de0:	1c59      	adds	r1, r3, #1
 8012de2:	81f9      	strh	r1, [r7, #14]
 8012de4:	4413      	add	r3, r2
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	061a      	lsls	r2, r3, #24
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	431a      	orrs	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	89fb      	ldrh	r3, [r7, #14]
 8012dfa:	1c59      	adds	r1, r3, #1
 8012dfc:	81f9      	strh	r1, [r7, #14]
 8012dfe:	4413      	add	r3, r2
 8012e00:	781a      	ldrb	r2, [r3, #0]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	89fb      	ldrh	r3, [r7, #14]
 8012e0c:	1c59      	adds	r1, r3, #1
 8012e0e:	81f9      	strh	r1, [r7, #14]
 8012e10:	4413      	add	r3, r2
 8012e12:	781a      	ldrb	r2, [r3, #0]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	791b      	ldrb	r3, [r3, #4]
 8012e1c:	1f1a      	subs	r2, r3, #4
 8012e1e:	89fb      	ldrh	r3, [r7, #14]
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	2b10      	cmp	r3, #16
 8012e24:	d10e      	bne.n	8012e44 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f103 0012 	add.w	r0, r3, #18
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	89fb      	ldrh	r3, [r7, #14]
 8012e32:	4413      	add	r3, r2
 8012e34:	2210      	movs	r2, #16
 8012e36:	4619      	mov	r1, r3
 8012e38:	f002 fdd3 	bl	80159e2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8012e3c:	89fb      	ldrh	r3, [r7, #14]
 8012e3e:	3310      	adds	r3, #16
 8012e40:	81fb      	strh	r3, [r7, #14]
 8012e42:	e008      	b.n	8012e56 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	791b      	ldrb	r3, [r3, #4]
 8012e48:	1f1a      	subs	r2, r3, #4
 8012e4a:	89fb      	ldrh	r3, [r7, #14]
 8012e4c:	1ad3      	subs	r3, r2, r3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	dd01      	ble.n	8012e56 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8012e52:	2301      	movs	r3, #1
 8012e54:	e031      	b.n	8012eba <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	89fb      	ldrh	r3, [r7, #14]
 8012e5c:	1c59      	adds	r1, r3, #1
 8012e5e:	81f9      	strh	r1, [r7, #14]
 8012e60:	4413      	add	r3, r2
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	461a      	mov	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	89fb      	ldrh	r3, [r7, #14]
 8012e70:	1c59      	adds	r1, r3, #1
 8012e72:	81f9      	strh	r1, [r7, #14]
 8012e74:	4413      	add	r3, r2
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	021a      	lsls	r2, r3, #8
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e7e:	431a      	orrs	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	89fb      	ldrh	r3, [r7, #14]
 8012e8a:	1c59      	adds	r1, r3, #1
 8012e8c:	81f9      	strh	r1, [r7, #14]
 8012e8e:	4413      	add	r3, r2
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	041a      	lsls	r2, r3, #16
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e98:	431a      	orrs	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	89fb      	ldrh	r3, [r7, #14]
 8012ea4:	1c59      	adds	r1, r3, #1
 8012ea6:	81f9      	strh	r1, [r7, #14]
 8012ea8:	4413      	add	r3, r2
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	061a      	lsls	r2, r3, #24
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb2:	431a      	orrs	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012eb8:	2300      	movs	r3, #0
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b084      	sub	sp, #16
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d003      	beq.n	8012ed8 <LoRaMacParserData+0x16>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d101      	bne.n	8012edc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012ed8:	2302      	movs	r3, #2
 8012eda:	e0e2      	b.n	80130a2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8012edc:	2300      	movs	r3, #0
 8012ede:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	89fb      	ldrh	r3, [r7, #14]
 8012ee6:	1c59      	adds	r1, r3, #1
 8012ee8:	81f9      	strh	r1, [r7, #14]
 8012eea:	4413      	add	r3, r2
 8012eec:	781a      	ldrb	r2, [r3, #0]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	89fb      	ldrh	r3, [r7, #14]
 8012ef8:	1c59      	adds	r1, r3, #1
 8012efa:	81f9      	strh	r1, [r7, #14]
 8012efc:	4413      	add	r3, r2
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	461a      	mov	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	89fb      	ldrh	r3, [r7, #14]
 8012f0c:	1c59      	adds	r1, r3, #1
 8012f0e:	81f9      	strh	r1, [r7, #14]
 8012f10:	4413      	add	r3, r2
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	021a      	lsls	r2, r3, #8
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	431a      	orrs	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	89fb      	ldrh	r3, [r7, #14]
 8012f26:	1c59      	adds	r1, r3, #1
 8012f28:	81f9      	strh	r1, [r7, #14]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	041a      	lsls	r2, r3, #16
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	689b      	ldr	r3, [r3, #8]
 8012f34:	431a      	orrs	r2, r3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	89fb      	ldrh	r3, [r7, #14]
 8012f40:	1c59      	adds	r1, r3, #1
 8012f42:	81f9      	strh	r1, [r7, #14]
 8012f44:	4413      	add	r3, r2
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	061a      	lsls	r2, r3, #24
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	431a      	orrs	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	89fb      	ldrh	r3, [r7, #14]
 8012f5a:	1c59      	adds	r1, r3, #1
 8012f5c:	81f9      	strh	r1, [r7, #14]
 8012f5e:	4413      	add	r3, r2
 8012f60:	781a      	ldrb	r2, [r3, #0]
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	89fb      	ldrh	r3, [r7, #14]
 8012f6c:	1c59      	adds	r1, r3, #1
 8012f6e:	81f9      	strh	r1, [r7, #14]
 8012f70:	4413      	add	r3, r2
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	89fb      	ldrh	r3, [r7, #14]
 8012f80:	1c59      	adds	r1, r3, #1
 8012f82:	81f9      	strh	r1, [r7, #14]
 8012f84:	4413      	add	r3, r2
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	0219      	lsls	r1, r3, #8
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	89db      	ldrh	r3, [r3, #14]
 8012f8e:	b21a      	sxth	r2, r3
 8012f90:	b20b      	sxth	r3, r1
 8012f92:	4313      	orrs	r3, r2
 8012f94:	b21b      	sxth	r3, r3
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f103 0010 	add.w	r0, r3, #16
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	89fb      	ldrh	r3, [r7, #14]
 8012fa8:	18d1      	adds	r1, r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	7b1b      	ldrb	r3, [r3, #12]
 8012fae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	f002 fd13 	bl	80159e2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	7b1b      	ldrb	r3, [r3, #12]
 8012fc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	b29a      	uxth	r2, r3
 8012fc8:	89fb      	ldrh	r3, [r7, #14]
 8012fca:	4413      	add	r3, r2
 8012fcc:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	791b      	ldrb	r3, [r3, #4]
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	89fb      	ldrh	r3, [r7, #14]
 8012fe6:	1ad3      	subs	r3, r2, r3
 8012fe8:	2b04      	cmp	r3, #4
 8012fea:	dd28      	ble.n	801303e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	89fb      	ldrh	r3, [r7, #14]
 8012ff2:	1c59      	adds	r1, r3, #1
 8012ff4:	81f9      	strh	r1, [r7, #14]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	781a      	ldrb	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	791a      	ldrb	r2, [r3, #4]
 8013004:	89fb      	ldrh	r3, [r7, #14]
 8013006:	b2db      	uxtb	r3, r3
 8013008:	1ad3      	subs	r3, r2, r3
 801300a:	b2db      	uxtb	r3, r3
 801300c:	3b04      	subs	r3, #4
 801300e:	b2da      	uxtb	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	89fb      	ldrh	r3, [r7, #14]
 8013020:	18d1      	adds	r1, r2, r3
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013028:	b29b      	uxth	r3, r3
 801302a:	461a      	mov	r2, r3
 801302c:	f002 fcd9 	bl	80159e2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013036:	b29a      	uxth	r2, r3
 8013038:	89fb      	ldrh	r3, [r7, #14]
 801303a:	4413      	add	r3, r2
 801303c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	791b      	ldrb	r3, [r3, #4]
 8013046:	3b04      	subs	r3, #4
 8013048:	4413      	add	r3, r2
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	461a      	mov	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6819      	ldr	r1, [r3, #0]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	791b      	ldrb	r3, [r3, #4]
 801305e:	3b03      	subs	r3, #3
 8013060:	440b      	add	r3, r1
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	021b      	lsls	r3, r3, #8
 8013066:	431a      	orrs	r2, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6819      	ldr	r1, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	791b      	ldrb	r3, [r3, #4]
 8013078:	3b02      	subs	r3, #2
 801307a:	440b      	add	r3, r1
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	041b      	lsls	r3, r3, #16
 8013080:	431a      	orrs	r2, r3
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6819      	ldr	r1, [r3, #0]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	791b      	ldrb	r3, [r3, #4]
 8013092:	3b01      	subs	r3, #1
 8013094:	440b      	add	r3, r1
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	061b      	lsls	r3, r3, #24
 801309a:	431a      	orrs	r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80130a0:	2300      	movs	r3, #0
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3710      	adds	r7, #16
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b084      	sub	sp, #16
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d003      	beq.n	80130c0 <LoRaMacSerializerJoinRequest+0x16>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d101      	bne.n	80130c4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e070      	b.n	80131a6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	791b      	ldrb	r3, [r3, #4]
 80130cc:	2b16      	cmp	r3, #22
 80130ce:	d801      	bhi.n	80130d4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80130d0:	2302      	movs	r3, #2
 80130d2:	e068      	b.n	80131a6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	1c59      	adds	r1, r3, #1
 80130dc:	81f9      	strh	r1, [r7, #14]
 80130de:	4413      	add	r3, r2
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	7952      	ldrb	r2, [r2, #5]
 80130e4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	89fb      	ldrh	r3, [r7, #14]
 80130ec:	18d0      	adds	r0, r2, r3
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	3306      	adds	r3, #6
 80130f2:	2208      	movs	r2, #8
 80130f4:	4619      	mov	r1, r3
 80130f6:	f002 fc8f 	bl	8015a18 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80130fa:	89fb      	ldrh	r3, [r7, #14]
 80130fc:	3308      	adds	r3, #8
 80130fe:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	89fb      	ldrh	r3, [r7, #14]
 8013106:	18d0      	adds	r0, r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	330e      	adds	r3, #14
 801310c:	2208      	movs	r2, #8
 801310e:	4619      	mov	r1, r3
 8013110:	f002 fc82 	bl	8015a18 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013114:	89fb      	ldrh	r3, [r7, #14]
 8013116:	3308      	adds	r3, #8
 8013118:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	8ad9      	ldrh	r1, [r3, #22]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	89fb      	ldrh	r3, [r7, #14]
 8013124:	1c58      	adds	r0, r3, #1
 8013126:	81f8      	strh	r0, [r7, #14]
 8013128:	4413      	add	r3, r2
 801312a:	b2ca      	uxtb	r2, r1
 801312c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	8adb      	ldrh	r3, [r3, #22]
 8013132:	0a1b      	lsrs	r3, r3, #8
 8013134:	b299      	uxth	r1, r3
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	89fb      	ldrh	r3, [r7, #14]
 801313c:	1c58      	adds	r0, r3, #1
 801313e:	81f8      	strh	r0, [r7, #14]
 8013140:	4413      	add	r3, r2
 8013142:	b2ca      	uxtb	r2, r1
 8013144:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6999      	ldr	r1, [r3, #24]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	89fb      	ldrh	r3, [r7, #14]
 8013150:	1c58      	adds	r0, r3, #1
 8013152:	81f8      	strh	r0, [r7, #14]
 8013154:	4413      	add	r3, r2
 8013156:	b2ca      	uxtb	r2, r1
 8013158:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	699b      	ldr	r3, [r3, #24]
 801315e:	0a19      	lsrs	r1, r3, #8
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681a      	ldr	r2, [r3, #0]
 8013164:	89fb      	ldrh	r3, [r7, #14]
 8013166:	1c58      	adds	r0, r3, #1
 8013168:	81f8      	strh	r0, [r7, #14]
 801316a:	4413      	add	r3, r2
 801316c:	b2ca      	uxtb	r2, r1
 801316e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	699b      	ldr	r3, [r3, #24]
 8013174:	0c19      	lsrs	r1, r3, #16
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	89fb      	ldrh	r3, [r7, #14]
 801317c:	1c58      	adds	r0, r3, #1
 801317e:	81f8      	strh	r0, [r7, #14]
 8013180:	4413      	add	r3, r2
 8013182:	b2ca      	uxtb	r2, r1
 8013184:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	699b      	ldr	r3, [r3, #24]
 801318a:	0e19      	lsrs	r1, r3, #24
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	89fb      	ldrh	r3, [r7, #14]
 8013192:	1c58      	adds	r0, r3, #1
 8013194:	81f8      	strh	r0, [r7, #14]
 8013196:	4413      	add	r3, r2
 8013198:	b2ca      	uxtb	r2, r1
 801319a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801319c:	89fb      	ldrh	r3, [r7, #14]
 801319e:	b2da      	uxtb	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3710      	adds	r7, #16
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80131ae:	b580      	push	{r7, lr}
 80131b0:	b084      	sub	sp, #16
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d003      	beq.n	80131c4 <LoRaMacSerializerData+0x16>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d101      	bne.n	80131c8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80131c4:	2301      	movs	r3, #1
 80131c6:	e0e5      	b.n	8013394 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80131c8:	2300      	movs	r3, #0
 80131ca:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80131cc:	2308      	movs	r3, #8
 80131ce:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	7b1b      	ldrb	r3, [r3, #12]
 80131d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	b29a      	uxth	r2, r3
 80131dc:	89bb      	ldrh	r3, [r7, #12]
 80131de:	4413      	add	r3, r2
 80131e0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80131ec:	89bb      	ldrh	r3, [r7, #12]
 80131ee:	3301      	adds	r3, #1
 80131f0:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	89bb      	ldrh	r3, [r7, #12]
 80131fc:	4413      	add	r3, r2
 80131fe:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013200:	89bb      	ldrh	r3, [r7, #12]
 8013202:	3304      	adds	r3, #4
 8013204:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	791b      	ldrb	r3, [r3, #4]
 801320a:	b29b      	uxth	r3, r3
 801320c:	89ba      	ldrh	r2, [r7, #12]
 801320e:	429a      	cmp	r2, r3
 8013210:	d901      	bls.n	8013216 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013212:	2302      	movs	r3, #2
 8013214:	e0be      	b.n	8013394 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	89fb      	ldrh	r3, [r7, #14]
 801321c:	1c59      	adds	r1, r3, #1
 801321e:	81f9      	strh	r1, [r7, #14]
 8013220:	4413      	add	r3, r2
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	7952      	ldrb	r2, [r2, #5]
 8013226:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6899      	ldr	r1, [r3, #8]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	89fb      	ldrh	r3, [r7, #14]
 8013232:	1c58      	adds	r0, r3, #1
 8013234:	81f8      	strh	r0, [r7, #14]
 8013236:	4413      	add	r3, r2
 8013238:	b2ca      	uxtb	r2, r1
 801323a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	0a19      	lsrs	r1, r3, #8
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681a      	ldr	r2, [r3, #0]
 8013246:	89fb      	ldrh	r3, [r7, #14]
 8013248:	1c58      	adds	r0, r3, #1
 801324a:	81f8      	strh	r0, [r7, #14]
 801324c:	4413      	add	r3, r2
 801324e:	b2ca      	uxtb	r2, r1
 8013250:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	0c19      	lsrs	r1, r3, #16
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	89fb      	ldrh	r3, [r7, #14]
 801325e:	1c58      	adds	r0, r3, #1
 8013260:	81f8      	strh	r0, [r7, #14]
 8013262:	4413      	add	r3, r2
 8013264:	b2ca      	uxtb	r2, r1
 8013266:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	689b      	ldr	r3, [r3, #8]
 801326c:	0e19      	lsrs	r1, r3, #24
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	89fb      	ldrh	r3, [r7, #14]
 8013274:	1c58      	adds	r0, r3, #1
 8013276:	81f8      	strh	r0, [r7, #14]
 8013278:	4413      	add	r3, r2
 801327a:	b2ca      	uxtb	r2, r1
 801327c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	89fb      	ldrh	r3, [r7, #14]
 8013284:	1c59      	adds	r1, r3, #1
 8013286:	81f9      	strh	r1, [r7, #14]
 8013288:	4413      	add	r3, r2
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	7b12      	ldrb	r2, [r2, #12]
 801328e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	89d9      	ldrh	r1, [r3, #14]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	89fb      	ldrh	r3, [r7, #14]
 801329a:	1c58      	adds	r0, r3, #1
 801329c:	81f8      	strh	r0, [r7, #14]
 801329e:	4413      	add	r3, r2
 80132a0:	b2ca      	uxtb	r2, r1
 80132a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	89db      	ldrh	r3, [r3, #14]
 80132a8:	0a1b      	lsrs	r3, r3, #8
 80132aa:	b299      	uxth	r1, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	89fb      	ldrh	r3, [r7, #14]
 80132b2:	1c58      	adds	r0, r3, #1
 80132b4:	81f8      	strh	r0, [r7, #14]
 80132b6:	4413      	add	r3, r2
 80132b8:	b2ca      	uxtb	r2, r1
 80132ba:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	89fb      	ldrh	r3, [r7, #14]
 80132c2:	18d0      	adds	r0, r2, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f103 0110 	add.w	r1, r3, #16
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	7b1b      	ldrb	r3, [r3, #12]
 80132ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	461a      	mov	r2, r3
 80132d8:	f002 fb83 	bl	80159e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	7b1b      	ldrb	r3, [r3, #12]
 80132e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	89fb      	ldrh	r3, [r7, #14]
 80132ea:	4413      	add	r3, r2
 80132ec:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d009      	beq.n	801330c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	89fb      	ldrh	r3, [r7, #14]
 80132fe:	1c59      	adds	r1, r3, #1
 8013300:	81f9      	strh	r1, [r7, #14]
 8013302:	4413      	add	r3, r2
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	f892 2020 	ldrb.w	r2, [r2, #32]
 801330a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	89fb      	ldrh	r3, [r7, #14]
 8013312:	18d0      	adds	r0, r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801331e:	b29b      	uxth	r3, r3
 8013320:	461a      	mov	r2, r3
 8013322:	f002 fb5e 	bl	80159e2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801332c:	b29a      	uxth	r2, r3
 801332e:	89fb      	ldrh	r3, [r7, #14]
 8013330:	4413      	add	r3, r2
 8013332:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	89fb      	ldrh	r3, [r7, #14]
 801333e:	1c58      	adds	r0, r3, #1
 8013340:	81f8      	strh	r0, [r7, #14]
 8013342:	4413      	add	r3, r2
 8013344:	b2ca      	uxtb	r2, r1
 8013346:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801334c:	0a19      	lsrs	r1, r3, #8
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	89fb      	ldrh	r3, [r7, #14]
 8013354:	1c58      	adds	r0, r3, #1
 8013356:	81f8      	strh	r0, [r7, #14]
 8013358:	4413      	add	r3, r2
 801335a:	b2ca      	uxtb	r2, r1
 801335c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013362:	0c19      	lsrs	r1, r3, #16
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	89fb      	ldrh	r3, [r7, #14]
 801336a:	1c58      	adds	r0, r3, #1
 801336c:	81f8      	strh	r0, [r7, #14]
 801336e:	4413      	add	r3, r2
 8013370:	b2ca      	uxtb	r2, r1
 8013372:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013378:	0e19      	lsrs	r1, r3, #24
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	89fb      	ldrh	r3, [r7, #14]
 8013380:	1c58      	adds	r0, r3, #1
 8013382:	81f8      	strh	r0, [r7, #14]
 8013384:	4413      	add	r3, r2
 8013386:	b2ca      	uxtb	r2, r1
 8013388:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801338a:	89fb      	ldrh	r3, [r7, #14]
 801338c:	b2da      	uxtb	r2, r3
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013392:	2300      	movs	r3, #0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3710      	adds	r7, #16
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	4603      	mov	r3, r0
 80133a4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80133a6:	79fb      	ldrb	r3, [r7, #7]
 80133a8:	2b05      	cmp	r3, #5
 80133aa:	d101      	bne.n	80133b0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80133ac:	2301      	movs	r3, #1
 80133ae:	e000      	b.n	80133b2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80133b0:	2300      	movs	r3, #0
        }
    }
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bc80      	pop	{r7}
 80133ba:	4770      	bx	lr

080133bc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	4603      	mov	r3, r0
 80133c4:	6039      	str	r1, [r7, #0]
 80133c6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80133c8:	2300      	movs	r3, #0
 80133ca:	60bb      	str	r3, [r7, #8]
    switch( region )
 80133cc:	79fb      	ldrb	r3, [r7, #7]
 80133ce:	2b05      	cmp	r3, #5
 80133d0:	d105      	bne.n	80133de <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80133d2:	6838      	ldr	r0, [r7, #0]
 80133d4:	f001 f994 	bl	8014700 <RegionEU868GetPhyParam>
 80133d8:	4603      	mov	r3, r0
 80133da:	60fb      	str	r3, [r7, #12]
 80133dc:	e001      	b.n	80133e2 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	4618      	mov	r0, r3
 80133e6:	3710      	adds	r7, #16
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	4603      	mov	r3, r0
 80133f4:	6039      	str	r1, [r7, #0]
 80133f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	2b05      	cmp	r3, #5
 80133fc:	d103      	bne.n	8013406 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80133fe:	6838      	ldr	r0, [r7, #0]
 8013400:	f001 faca 	bl	8014998 <RegionEU868SetBandTxDone>
 8013404:	e000      	b.n	8013408 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013406:	bf00      	nop
        }
    }
}
 8013408:	3708      	adds	r7, #8
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801340e:	b580      	push	{r7, lr}
 8013410:	b082      	sub	sp, #8
 8013412:	af00      	add	r7, sp, #0
 8013414:	4603      	mov	r3, r0
 8013416:	6039      	str	r1, [r7, #0]
 8013418:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801341a:	79fb      	ldrb	r3, [r7, #7]
 801341c:	2b05      	cmp	r3, #5
 801341e:	d103      	bne.n	8013428 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013420:	6838      	ldr	r0, [r7, #0]
 8013422:	f001 fae5 	bl	80149f0 <RegionEU868InitDefaults>
 8013426:	e000      	b.n	801342a <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013428:	bf00      	nop
        }
    }
}
 801342a:	bf00      	nop
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}

08013432 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013432:	b580      	push	{r7, lr}
 8013434:	b082      	sub	sp, #8
 8013436:	af00      	add	r7, sp, #0
 8013438:	4603      	mov	r3, r0
 801343a:	6039      	str	r1, [r7, #0]
 801343c:	71fb      	strb	r3, [r7, #7]
 801343e:	4613      	mov	r3, r2
 8013440:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013442:	79fb      	ldrb	r3, [r7, #7]
 8013444:	2b05      	cmp	r3, #5
 8013446:	d106      	bne.n	8013456 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013448:	79bb      	ldrb	r3, [r7, #6]
 801344a:	4619      	mov	r1, r3
 801344c:	6838      	ldr	r0, [r7, #0]
 801344e:	f001 fb6d 	bl	8014b2c <RegionEU868Verify>
 8013452:	4603      	mov	r3, r0
 8013454:	e000      	b.n	8013458 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013456:	2300      	movs	r3, #0
        }
    }
}
 8013458:	4618      	mov	r0, r3
 801345a:	3708      	adds	r7, #8
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}

08013460 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	4603      	mov	r3, r0
 8013468:	6039      	str	r1, [r7, #0]
 801346a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801346c:	79fb      	ldrb	r3, [r7, #7]
 801346e:	2b05      	cmp	r3, #5
 8013470:	d103      	bne.n	801347a <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013472:	6838      	ldr	r0, [r7, #0]
 8013474:	f001 fbd6 	bl	8014c24 <RegionEU868ApplyCFList>
 8013478:	e000      	b.n	801347c <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801347a:	bf00      	nop
        }
    }
}
 801347c:	bf00      	nop
 801347e:	3708      	adds	r7, #8
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b082      	sub	sp, #8
 8013488:	af00      	add	r7, sp, #0
 801348a:	4603      	mov	r3, r0
 801348c:	6039      	str	r1, [r7, #0]
 801348e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013490:	79fb      	ldrb	r3, [r7, #7]
 8013492:	2b05      	cmp	r3, #5
 8013494:	d104      	bne.n	80134a0 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013496:	6838      	ldr	r0, [r7, #0]
 8013498:	f001 fc38 	bl	8014d0c <RegionEU868ChanMaskSet>
 801349c:	4603      	mov	r3, r0
 801349e:	e000      	b.n	80134a2 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80134a0:	2300      	movs	r3, #0
        }
    }
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3708      	adds	r7, #8
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b082      	sub	sp, #8
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	603b      	str	r3, [r7, #0]
 80134b2:	4603      	mov	r3, r0
 80134b4:	71fb      	strb	r3, [r7, #7]
 80134b6:	460b      	mov	r3, r1
 80134b8:	71bb      	strb	r3, [r7, #6]
 80134ba:	4613      	mov	r3, r2
 80134bc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80134be:	79fb      	ldrb	r3, [r7, #7]
 80134c0:	2b05      	cmp	r3, #5
 80134c2:	d107      	bne.n	80134d4 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80134c4:	7979      	ldrb	r1, [r7, #5]
 80134c6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	683a      	ldr	r2, [r7, #0]
 80134ce:	f001 fc47 	bl	8014d60 <RegionEU868ComputeRxWindowParameters>
 80134d2:	e000      	b.n	80134d6 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80134d4:	bf00      	nop
        }
    }
}
 80134d6:	bf00      	nop
 80134d8:	3708      	adds	r7, #8
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80134de:	b580      	push	{r7, lr}
 80134e0:	b084      	sub	sp, #16
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	4603      	mov	r3, r0
 80134e6:	60b9      	str	r1, [r7, #8]
 80134e8:	607a      	str	r2, [r7, #4]
 80134ea:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80134ec:	7bfb      	ldrb	r3, [r7, #15]
 80134ee:	2b05      	cmp	r3, #5
 80134f0:	d105      	bne.n	80134fe <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80134f2:	6879      	ldr	r1, [r7, #4]
 80134f4:	68b8      	ldr	r0, [r7, #8]
 80134f6:	f001 fc8d 	bl	8014e14 <RegionEU868RxConfig>
 80134fa:	4603      	mov	r3, r0
 80134fc:	e000      	b.n	8013500 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80134fe:	2300      	movs	r3, #0
        }
    }
}
 8013500:	4618      	mov	r0, r3
 8013502:	3710      	adds	r7, #16
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	60b9      	str	r1, [r7, #8]
 8013510:	607a      	str	r2, [r7, #4]
 8013512:	603b      	str	r3, [r7, #0]
 8013514:	4603      	mov	r3, r0
 8013516:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013518:	7bfb      	ldrb	r3, [r7, #15]
 801351a:	2b05      	cmp	r3, #5
 801351c:	d106      	bne.n	801352c <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801351e:	683a      	ldr	r2, [r7, #0]
 8013520:	6879      	ldr	r1, [r7, #4]
 8013522:	68b8      	ldr	r0, [r7, #8]
 8013524:	f001 fd46 	bl	8014fb4 <RegionEU868TxConfig>
 8013528:	4603      	mov	r3, r0
 801352a:	e000      	b.n	801352e <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801352c:	2300      	movs	r3, #0
        }
    }
}
 801352e:	4618      	mov	r0, r3
 8013530:	3710      	adds	r7, #16
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}

08013536 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013536:	b580      	push	{r7, lr}
 8013538:	b086      	sub	sp, #24
 801353a:	af02      	add	r7, sp, #8
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
 8013540:	603b      	str	r3, [r7, #0]
 8013542:	4603      	mov	r3, r0
 8013544:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013546:	7bfb      	ldrb	r3, [r7, #15]
 8013548:	2b05      	cmp	r3, #5
 801354a:	d109      	bne.n	8013560 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	9300      	str	r3, [sp, #0]
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	683a      	ldr	r2, [r7, #0]
 8013554:	6879      	ldr	r1, [r7, #4]
 8013556:	68b8      	ldr	r0, [r7, #8]
 8013558:	f001 fdfc 	bl	8015154 <RegionEU868LinkAdrReq>
 801355c:	4603      	mov	r3, r0
 801355e:	e000      	b.n	8013562 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013560:	2300      	movs	r3, #0
        }
    }
}
 8013562:	4618      	mov	r0, r3
 8013564:	3710      	adds	r7, #16
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b082      	sub	sp, #8
 801356e:	af00      	add	r7, sp, #0
 8013570:	4603      	mov	r3, r0
 8013572:	6039      	str	r1, [r7, #0]
 8013574:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013576:	79fb      	ldrb	r3, [r7, #7]
 8013578:	2b05      	cmp	r3, #5
 801357a:	d104      	bne.n	8013586 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801357c:	6838      	ldr	r0, [r7, #0]
 801357e:	f001 ff0b 	bl	8015398 <RegionEU868RxParamSetupReq>
 8013582:	4603      	mov	r3, r0
 8013584:	e000      	b.n	8013588 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013586:	2300      	movs	r3, #0
        }
    }
}
 8013588:	4618      	mov	r0, r3
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	4603      	mov	r3, r0
 8013598:	6039      	str	r1, [r7, #0]
 801359a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801359c:	79fb      	ldrb	r3, [r7, #7]
 801359e:	2b05      	cmp	r3, #5
 80135a0:	d104      	bne.n	80135ac <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80135a2:	6838      	ldr	r0, [r7, #0]
 80135a4:	f001 ff36 	bl	8015414 <RegionEU868NewChannelReq>
 80135a8:	4603      	mov	r3, r0
 80135aa:	e000      	b.n	80135ae <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80135ac:	2300      	movs	r3, #0
        }
    }
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3708      	adds	r7, #8
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}

080135b6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80135b6:	b580      	push	{r7, lr}
 80135b8:	b082      	sub	sp, #8
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	4603      	mov	r3, r0
 80135be:	6039      	str	r1, [r7, #0]
 80135c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80135c2:	79fb      	ldrb	r3, [r7, #7]
 80135c4:	2b05      	cmp	r3, #5
 80135c6:	d104      	bne.n	80135d2 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80135c8:	6838      	ldr	r0, [r7, #0]
 80135ca:	f001 ff81 	bl	80154d0 <RegionEU868TxParamSetupReq>
 80135ce:	4603      	mov	r3, r0
 80135d0:	e000      	b.n	80135d4 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80135d2:	2300      	movs	r3, #0
        }
    }
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	4603      	mov	r3, r0
 80135e4:	6039      	str	r1, [r7, #0]
 80135e6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	2b05      	cmp	r3, #5
 80135ec:	d104      	bne.n	80135f8 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80135ee:	6838      	ldr	r0, [r7, #0]
 80135f0:	f001 ff7a 	bl	80154e8 <RegionEU868DlChannelReq>
 80135f4:	4603      	mov	r3, r0
 80135f6:	e000      	b.n	80135fa <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80135f8:	2300      	movs	r3, #0
        }
    }
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013602:	b580      	push	{r7, lr}
 8013604:	b082      	sub	sp, #8
 8013606:	af00      	add	r7, sp, #0
 8013608:	4603      	mov	r3, r0
 801360a:	71fb      	strb	r3, [r7, #7]
 801360c:	460b      	mov	r3, r1
 801360e:	71bb      	strb	r3, [r7, #6]
 8013610:	4613      	mov	r3, r2
 8013612:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013614:	79fb      	ldrb	r3, [r7, #7]
 8013616:	2b05      	cmp	r3, #5
 8013618:	d108      	bne.n	801362c <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801361a:	797a      	ldrb	r2, [r7, #5]
 801361c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013620:	4611      	mov	r1, r2
 8013622:	4618      	mov	r0, r3
 8013624:	f001 ffa4 	bl	8015570 <RegionEU868AlternateDr>
 8013628:	4603      	mov	r3, r0
 801362a:	e000      	b.n	801362e <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801362c:	2300      	movs	r3, #0
        }
    }
}
 801362e:	4618      	mov	r0, r3
 8013630:	3708      	adds	r7, #8
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b084      	sub	sp, #16
 801363a:	af00      	add	r7, sp, #0
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
 8013640:	603b      	str	r3, [r7, #0]
 8013642:	4603      	mov	r3, r0
 8013644:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013646:	7bfb      	ldrb	r3, [r7, #15]
 8013648:	2b05      	cmp	r3, #5
 801364a:	d107      	bne.n	801365c <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	683a      	ldr	r2, [r7, #0]
 8013650:	6879      	ldr	r1, [r7, #4]
 8013652:	68b8      	ldr	r0, [r7, #8]
 8013654:	f001 ff9c 	bl	8015590 <RegionEU868NextChannel>
 8013658:	4603      	mov	r3, r0
 801365a:	e000      	b.n	801365e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801365c:	2309      	movs	r3, #9
        }
    }
}
 801365e:	4618      	mov	r0, r3
 8013660:	3710      	adds	r7, #16
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}

08013666 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013666:	b580      	push	{r7, lr}
 8013668:	b082      	sub	sp, #8
 801366a:	af00      	add	r7, sp, #0
 801366c:	4603      	mov	r3, r0
 801366e:	6039      	str	r1, [r7, #0]
 8013670:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013672:	79fb      	ldrb	r3, [r7, #7]
 8013674:	2b05      	cmp	r3, #5
 8013676:	d103      	bne.n	8013680 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8013678:	6838      	ldr	r0, [r7, #0]
 801367a:	f002 f903 	bl	8015884 <RegionEU868SetContinuousWave>
 801367e:	e000      	b.n	8013682 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013680:	bf00      	nop
        }
    }
}
 8013682:	bf00      	nop
 8013684:	3708      	adds	r7, #8
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801368a:	b590      	push	{r4, r7, lr}
 801368c:	b083      	sub	sp, #12
 801368e:	af00      	add	r7, sp, #0
 8013690:	4604      	mov	r4, r0
 8013692:	4608      	mov	r0, r1
 8013694:	4611      	mov	r1, r2
 8013696:	461a      	mov	r2, r3
 8013698:	4623      	mov	r3, r4
 801369a:	71fb      	strb	r3, [r7, #7]
 801369c:	4603      	mov	r3, r0
 801369e:	71bb      	strb	r3, [r7, #6]
 80136a0:	460b      	mov	r3, r1
 80136a2:	717b      	strb	r3, [r7, #5]
 80136a4:	4613      	mov	r3, r2
 80136a6:	713b      	strb	r3, [r7, #4]
    switch( region )
 80136a8:	79fb      	ldrb	r3, [r7, #7]
 80136aa:	2b05      	cmp	r3, #5
 80136ac:	d109      	bne.n	80136c2 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80136ae:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80136b2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80136b6:	79bb      	ldrb	r3, [r7, #6]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f002 f931 	bl	8015920 <RegionEU868ApplyDrOffset>
 80136be:	4603      	mov	r3, r0
 80136c0:	e000      	b.n	80136c4 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80136c2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	370c      	adds	r7, #12
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd90      	pop	{r4, r7, pc}

080136cc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80136cc:	b480      	push	{r7}
 80136ce:	b083      	sub	sp, #12
 80136d0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80136d2:	4b04      	ldr	r3, [pc, #16]	; (80136e4 <RegionGetVersion+0x18>)
 80136d4:	607b      	str	r3, [r7, #4]

    return version;
 80136d6:	687b      	ldr	r3, [r7, #4]
}
 80136d8:	4618      	mov	r0, r3
 80136da:	370c      	adds	r7, #12
 80136dc:	46bd      	mov	sp, r7
 80136de:	bc80      	pop	{r7}
 80136e0:	4770      	bx	lr
 80136e2:	bf00      	nop
 80136e4:	01010003 	.word	0x01010003

080136e8 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80136e8:	b480      	push	{r7}
 80136ea:	b087      	sub	sp, #28
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	4608      	mov	r0, r1
 80136f2:	4639      	mov	r1, r7
 80136f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80136f8:	4603      	mov	r3, r0
 80136fa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	881b      	ldrh	r3, [r3, #0]
 8013700:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8013702:	7afb      	ldrb	r3, [r7, #11]
 8013704:	f083 0301 	eor.w	r3, r3, #1
 8013708:	b2db      	uxtb	r3, r3
 801370a:	2b00      	cmp	r3, #0
 801370c:	d01b      	beq.n	8013746 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801370e:	f242 7310 	movw	r3, #10000	; 0x2710
 8013712:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801371a:	d202      	bcs.n	8013722 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801371c:	2364      	movs	r3, #100	; 0x64
 801371e:	82bb      	strh	r3, [r7, #20]
 8013720:	e00b      	b.n	801373a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8013728:	4293      	cmp	r3, r2
 801372a:	d803      	bhi.n	8013734 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801372c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013730:	82bb      	strh	r3, [r7, #20]
 8013732:	e002      	b.n	801373a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013734:	f242 7310 	movw	r3, #10000	; 0x2710
 8013738:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801373a:	8aba      	ldrh	r2, [r7, #20]
 801373c:	8afb      	ldrh	r3, [r7, #22]
 801373e:	4293      	cmp	r3, r2
 8013740:	bf38      	it	cc
 8013742:	4613      	movcc	r3, r2
 8013744:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8013746:	8afb      	ldrh	r3, [r7, #22]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d101      	bne.n	8013750 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801374c:	2301      	movs	r3, #1
 801374e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8013750:	8afb      	ldrh	r3, [r7, #22]
}
 8013752:	4618      	mov	r0, r3
 8013754:	371c      	adds	r7, #28
 8013756:	46bd      	mov	sp, r7
 8013758:	bc80      	pop	{r7}
 801375a:	4770      	bx	lr

0801375c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b08e      	sub	sp, #56	; 0x38
 8013760:	af02      	add	r7, sp, #8
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	4608      	mov	r0, r1
 8013766:	4639      	mov	r1, r7
 8013768:	e881 000c 	stmia.w	r1, {r2, r3}
 801376c:	4603      	mov	r3, r0
 801376e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	881b      	ldrh	r3, [r3, #0]
 8013774:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013776:	4b4b      	ldr	r3, [pc, #300]	; (80138a4 <SetMaxTimeCredits+0x148>)
 8013778:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801377a:	463b      	mov	r3, r7
 801377c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013780:	f005 fd66 	bl	8019250 <SysTimeToMs>
 8013784:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8013786:	f107 0314 	add.w	r3, r7, #20
 801378a:	2200      	movs	r2, #0
 801378c:	601a      	str	r2, [r3, #0]
 801378e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013790:	7af9      	ldrb	r1, [r7, #11]
 8013792:	463b      	mov	r3, r7
 8013794:	cb0c      	ldmia	r3, {r2, r3}
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f7ff ffa6 	bl	80136e8 <GetDutyCycle>
 801379c:	4603      	mov	r3, r0
 801379e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80137a0:	7afb      	ldrb	r3, [r7, #11]
 80137a2:	f083 0301 	eor.w	r3, r3, #1
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d062      	beq.n	8013872 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80137ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137ae:	2b64      	cmp	r3, #100	; 0x64
 80137b0:	d105      	bne.n	80137be <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80137b2:	4b3c      	ldr	r3, [pc, #240]	; (80138a4 <SetMaxTimeCredits+0x148>)
 80137b4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ba:	609a      	str	r2, [r3, #8]
 80137bc:	e00b      	b.n	80137d6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80137be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80137c4:	d105      	bne.n	80137d2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80137c6:	4b38      	ldr	r3, [pc, #224]	; (80138a8 <SetMaxTimeCredits+0x14c>)
 80137c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ce:	609a      	str	r2, [r3, #8]
 80137d0:	e001      	b.n	80137d6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80137d2:	4b36      	ldr	r3, [pc, #216]	; (80138ac <SetMaxTimeCredits+0x150>)
 80137d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	689a      	ldr	r2, [r3, #8]
 80137da:	f107 031c 	add.w	r3, r7, #28
 80137de:	4611      	mov	r1, r2
 80137e0:	4618      	mov	r0, r3
 80137e2:	f005 fd5d 	bl	80192a0 <SysTimeFromMs>
 80137e6:	f107 0014 	add.w	r0, r7, #20
 80137ea:	6a3b      	ldr	r3, [r7, #32]
 80137ec:	9300      	str	r3, [sp, #0]
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	463a      	mov	r2, r7
 80137f2:	ca06      	ldmia	r2, {r1, r2}
 80137f4:	f005 fc6d 	bl	80190d2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80137f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80137fc:	f083 0301 	eor.w	r3, r3, #1
 8013800:	b2db      	uxtb	r3, r3
 8013802:	2b00      	cmp	r3, #0
 8013804:	d006      	beq.n	8013814 <SetMaxTimeCredits+0xb8>
 8013806:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801380a:	f083 0301 	eor.w	r3, r3, #1
 801380e:	b2db      	uxtb	r3, r3
 8013810:	2b00      	cmp	r3, #0
 8013812:	d108      	bne.n	8013826 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801381a:	429a      	cmp	r2, r3
 801381c:	d103      	bne.n	8013826 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801381e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8013820:	4a23      	ldr	r2, [pc, #140]	; (80138b0 <SetMaxTimeCredits+0x154>)
 8013822:	4293      	cmp	r3, r2
 8013824:	d92f      	bls.n	8013886 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801382a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	4a21      	ldr	r2, [pc, #132]	; (80138b4 <SetMaxTimeCredits+0x158>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d928      	bls.n	8013886 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801383a:	3b30      	subs	r3, #48	; 0x30
 801383c:	4a1e      	ldr	r2, [pc, #120]	; (80138b8 <SetMaxTimeCredits+0x15c>)
 801383e:	fba2 2303 	umull	r2, r3, r2, r3
 8013842:	0c1b      	lsrs	r3, r3, #16
 8013844:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	4a1c      	ldr	r2, [pc, #112]	; (80138bc <SetMaxTimeCredits+0x160>)
 801384a:	fb02 f303 	mul.w	r3, r2, r3
 801384e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8013856:	3330      	adds	r3, #48	; 0x30
 8013858:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801385e:	f107 0314 	add.w	r3, r7, #20
 8013862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013866:	f005 fcf3 	bl	8019250 <SysTimeToMs>
 801386a:	4602      	mov	r2, r0
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	609a      	str	r2, [r3, #8]
 8013870:	e009      	b.n	8013886 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8013872:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013876:	f083 0301 	eor.w	r3, r3, #1
 801387a:	b2db      	uxtb	r3, r3
 801387c:	2b00      	cmp	r3, #0
 801387e:	d002      	beq.n	8013886 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013884:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d102      	bne.n	8013894 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013892:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013898:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801389a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 801389c:	4618      	mov	r0, r3
 801389e:	3730      	adds	r7, #48	; 0x30
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	001b7740 	.word	0x001b7740
 80138a8:	0112a880 	.word	0x0112a880
 80138ac:	02932e00 	.word	0x02932e00
 80138b0:	0001517f 	.word	0x0001517f
 80138b4:	0001ec2f 	.word	0x0001ec2f
 80138b8:	c22e4507 	.word	0xc22e4507
 80138bc:	00015180 	.word	0x00015180

080138c0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b086      	sub	sp, #24
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	4608      	mov	r0, r1
 80138ca:	4611      	mov	r1, r2
 80138cc:	461a      	mov	r2, r3
 80138ce:	4603      	mov	r3, r0
 80138d0:	70fb      	strb	r3, [r7, #3]
 80138d2:	460b      	mov	r3, r1
 80138d4:	70bb      	strb	r3, [r7, #2]
 80138d6:	4613      	mov	r3, r2
 80138d8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80138da:	78f9      	ldrb	r1, [r7, #3]
 80138dc:	787b      	ldrb	r3, [r7, #1]
 80138de:	9301      	str	r3, [sp, #4]
 80138e0:	78bb      	ldrb	r3, [r7, #2]
 80138e2:	9300      	str	r3, [sp, #0]
 80138e4:	f107 0318 	add.w	r3, r7, #24
 80138e8:	cb0c      	ldmia	r3, {r2, r3}
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff ff36 	bl	801375c <SetMaxTimeCredits>
 80138f0:	4603      	mov	r3, r0
 80138f2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80138f4:	78fb      	ldrb	r3, [r7, #3]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00a      	beq.n	8013910 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	f006 fae6 	bl	8019ed0 <UTIL_TIMER_GetElapsedTime>
 8013904:	4602      	mov	r2, r0
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	441a      	add	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	68da      	ldr	r2, [r3, #12]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	691b      	ldr	r3, [r3, #16]
 8013918:	429a      	cmp	r2, r3
 801391a:	d903      	bls.n	8013924 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	691a      	ldr	r2, [r3, #16]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6a3a      	ldr	r2, [r7, #32]
 8013928:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801392a:	89fb      	ldrh	r3, [r7, #14]
}
 801392c:	4618      	mov	r0, r3
 801392e:	3710      	adds	r7, #16
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8013934:	b480      	push	{r7}
 8013936:	b085      	sub	sp, #20
 8013938:	af00      	add	r7, sp, #0
 801393a:	4603      	mov	r3, r0
 801393c:	460a      	mov	r2, r1
 801393e:	80fb      	strh	r3, [r7, #6]
 8013940:	4613      	mov	r3, r2
 8013942:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8013944:	2300      	movs	r3, #0
 8013946:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8013948:	2300      	movs	r3, #0
 801394a:	73bb      	strb	r3, [r7, #14]
 801394c:	e011      	b.n	8013972 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801394e:	88fa      	ldrh	r2, [r7, #6]
 8013950:	7bbb      	ldrb	r3, [r7, #14]
 8013952:	2101      	movs	r1, #1
 8013954:	fa01 f303 	lsl.w	r3, r1, r3
 8013958:	401a      	ands	r2, r3
 801395a:	7bbb      	ldrb	r3, [r7, #14]
 801395c:	2101      	movs	r1, #1
 801395e:	fa01 f303 	lsl.w	r3, r1, r3
 8013962:	429a      	cmp	r2, r3
 8013964:	d102      	bne.n	801396c <CountChannels+0x38>
        {
            nbActiveBits++;
 8013966:	7bfb      	ldrb	r3, [r7, #15]
 8013968:	3301      	adds	r3, #1
 801396a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801396c:	7bbb      	ldrb	r3, [r7, #14]
 801396e:	3301      	adds	r3, #1
 8013970:	73bb      	strb	r3, [r7, #14]
 8013972:	7bba      	ldrb	r2, [r7, #14]
 8013974:	797b      	ldrb	r3, [r7, #5]
 8013976:	429a      	cmp	r2, r3
 8013978:	d3e9      	bcc.n	801394e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801397a:	7bfb      	ldrb	r3, [r7, #15]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3714      	adds	r7, #20
 8013980:	46bd      	mov	sp, r7
 8013982:	bc80      	pop	{r7}
 8013984:	4770      	bx	lr

08013986 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8013986:	b580      	push	{r7, lr}
 8013988:	b084      	sub	sp, #16
 801398a:	af00      	add	r7, sp, #0
 801398c:	6039      	str	r1, [r7, #0]
 801398e:	4611      	mov	r1, r2
 8013990:	461a      	mov	r2, r3
 8013992:	4603      	mov	r3, r0
 8013994:	71fb      	strb	r3, [r7, #7]
 8013996:	460b      	mov	r3, r1
 8013998:	71bb      	strb	r3, [r7, #6]
 801399a:	4613      	mov	r3, r2
 801399c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801399e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80139a2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80139a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f000 f85d 	bl	8013a6a <RegionCommonValueInRange>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d101      	bne.n	80139ba <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80139b6:	2300      	movs	r3, #0
 80139b8:	e053      	b.n	8013a62 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80139ba:	2300      	movs	r3, #0
 80139bc:	73fb      	strb	r3, [r7, #15]
 80139be:	2300      	movs	r3, #0
 80139c0:	73bb      	strb	r3, [r7, #14]
 80139c2:	e049      	b.n	8013a58 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80139c4:	2300      	movs	r3, #0
 80139c6:	737b      	strb	r3, [r7, #13]
 80139c8:	e03d      	b.n	8013a46 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80139ca:	7bbb      	ldrb	r3, [r7, #14]
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	683a      	ldr	r2, [r7, #0]
 80139d0:	4413      	add	r3, r2
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	461a      	mov	r2, r3
 80139d6:	7b7b      	ldrb	r3, [r7, #13]
 80139d8:	fa42 f303 	asr.w	r3, r2, r3
 80139dc:	f003 0301 	and.w	r3, r3, #1
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d02d      	beq.n	8013a40 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80139e4:	7bfa      	ldrb	r2, [r7, #15]
 80139e6:	7b7b      	ldrb	r3, [r7, #13]
 80139e8:	4413      	add	r3, r2
 80139ea:	461a      	mov	r2, r3
 80139ec:	4613      	mov	r3, r2
 80139ee:	005b      	lsls	r3, r3, #1
 80139f0:	4413      	add	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	461a      	mov	r2, r3
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	4413      	add	r3, r2
 80139fa:	7a1b      	ldrb	r3, [r3, #8]
 80139fc:	f343 0303 	sbfx	r3, r3, #0, #4
 8013a00:	b25b      	sxtb	r3, r3
 8013a02:	f003 030f 	and.w	r3, r3, #15
 8013a06:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013a08:	7bfa      	ldrb	r2, [r7, #15]
 8013a0a:	7b7b      	ldrb	r3, [r7, #13]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	461a      	mov	r2, r3
 8013a10:	4613      	mov	r3, r2
 8013a12:	005b      	lsls	r3, r3, #1
 8013a14:	4413      	add	r3, r2
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	461a      	mov	r2, r3
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	7a1b      	ldrb	r3, [r3, #8]
 8013a20:	f343 1303 	sbfx	r3, r3, #4, #4
 8013a24:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013a26:	f003 030f 	and.w	r3, r3, #15
 8013a2a:	b25a      	sxtb	r2, r3
 8013a2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f000 f81a 	bl	8013a6a <RegionCommonValueInRange>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d101      	bne.n	8013a40 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	e010      	b.n	8013a62 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8013a40:	7b7b      	ldrb	r3, [r7, #13]
 8013a42:	3301      	adds	r3, #1
 8013a44:	737b      	strb	r3, [r7, #13]
 8013a46:	7b7b      	ldrb	r3, [r7, #13]
 8013a48:	2b0f      	cmp	r3, #15
 8013a4a:	d9be      	bls.n	80139ca <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013a4c:	7bfb      	ldrb	r3, [r7, #15]
 8013a4e:	3310      	adds	r3, #16
 8013a50:	73fb      	strb	r3, [r7, #15]
 8013a52:	7bbb      	ldrb	r3, [r7, #14]
 8013a54:	3301      	adds	r3, #1
 8013a56:	73bb      	strb	r3, [r7, #14]
 8013a58:	7bfa      	ldrb	r2, [r7, #15]
 8013a5a:	79fb      	ldrb	r3, [r7, #7]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d3b1      	bcc.n	80139c4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8013a6a:	b480      	push	{r7}
 8013a6c:	b083      	sub	sp, #12
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	4603      	mov	r3, r0
 8013a72:	71fb      	strb	r3, [r7, #7]
 8013a74:	460b      	mov	r3, r1
 8013a76:	71bb      	strb	r3, [r7, #6]
 8013a78:	4613      	mov	r3, r2
 8013a7a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8013a7c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013a80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	db07      	blt.n	8013a98 <RegionCommonValueInRange+0x2e>
 8013a88:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013a8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	dc01      	bgt.n	8013a98 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8013a94:	2301      	movs	r3, #1
 8013a96:	e000      	b.n	8013a9a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8013a98:	2300      	movs	r3, #0
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	370c      	adds	r7, #12
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bc80      	pop	{r7}
 8013aa2:	4770      	bx	lr

08013aa4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b085      	sub	sp, #20
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	460b      	mov	r3, r1
 8013aae:	70fb      	strb	r3, [r7, #3]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8013ab4:	78fb      	ldrb	r3, [r7, #3]
 8013ab6:	091b      	lsrs	r3, r3, #4
 8013ab8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013aba:	78bb      	ldrb	r3, [r7, #2]
 8013abc:	091b      	lsrs	r3, r3, #4
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	7bfa      	ldrb	r2, [r7, #15]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d803      	bhi.n	8013ace <RegionCommonChanDisable+0x2a>
 8013ac6:	78fa      	ldrb	r2, [r7, #3]
 8013ac8:	78bb      	ldrb	r3, [r7, #2]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d301      	bcc.n	8013ad2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e017      	b.n	8013b02 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013ad2:	7bfb      	ldrb	r3, [r7, #15]
 8013ad4:	005b      	lsls	r3, r3, #1
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	4413      	add	r3, r2
 8013ada:	881b      	ldrh	r3, [r3, #0]
 8013adc:	b21a      	sxth	r2, r3
 8013ade:	78fb      	ldrb	r3, [r7, #3]
 8013ae0:	f003 030f 	and.w	r3, r3, #15
 8013ae4:	2101      	movs	r1, #1
 8013ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8013aea:	b21b      	sxth	r3, r3
 8013aec:	43db      	mvns	r3, r3
 8013aee:	b21b      	sxth	r3, r3
 8013af0:	4013      	ands	r3, r2
 8013af2:	b219      	sxth	r1, r3
 8013af4:	7bfb      	ldrb	r3, [r7, #15]
 8013af6:	005b      	lsls	r3, r3, #1
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	4413      	add	r3, r2
 8013afc:	b28a      	uxth	r2, r1
 8013afe:	801a      	strh	r2, [r3, #0]

    return true;
 8013b00:	2301      	movs	r3, #1
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3714      	adds	r7, #20
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bc80      	pop	{r7}
 8013b0a:	4770      	bx	lr

08013b0c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	460b      	mov	r3, r1
 8013b16:	70fb      	strb	r3, [r7, #3]
 8013b18:	4613      	mov	r3, r2
 8013b1a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d101      	bne.n	8013b2a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	e018      	b.n	8013b5c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013b2a:	78fb      	ldrb	r3, [r7, #3]
 8013b2c:	73bb      	strb	r3, [r7, #14]
 8013b2e:	e010      	b.n	8013b52 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013b30:	7bbb      	ldrb	r3, [r7, #14]
 8013b32:	005b      	lsls	r3, r3, #1
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	4413      	add	r3, r2
 8013b38:	881b      	ldrh	r3, [r3, #0]
 8013b3a:	2110      	movs	r1, #16
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7ff fef9 	bl	8013934 <CountChannels>
 8013b42:	4603      	mov	r3, r0
 8013b44:	461a      	mov	r2, r3
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
 8013b48:	4413      	add	r3, r2
 8013b4a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013b4c:	7bbb      	ldrb	r3, [r7, #14]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	73bb      	strb	r3, [r7, #14]
 8013b52:	7bba      	ldrb	r2, [r7, #14]
 8013b54:	78bb      	ldrb	r3, [r7, #2]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d3ea      	bcc.n	8013b30 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8013b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3710      	adds	r7, #16
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8013b64:	b480      	push	{r7}
 8013b66:	b087      	sub	sp, #28
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	60b9      	str	r1, [r7, #8]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d016      	beq.n	8013ba6 <RegionCommonChanMaskCopy+0x42>
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d013      	beq.n	8013ba6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013b7e:	2300      	movs	r3, #0
 8013b80:	75fb      	strb	r3, [r7, #23]
 8013b82:	e00c      	b.n	8013b9e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013b84:	7dfb      	ldrb	r3, [r7, #23]
 8013b86:	005b      	lsls	r3, r3, #1
 8013b88:	68ba      	ldr	r2, [r7, #8]
 8013b8a:	441a      	add	r2, r3
 8013b8c:	7dfb      	ldrb	r3, [r7, #23]
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	68f9      	ldr	r1, [r7, #12]
 8013b92:	440b      	add	r3, r1
 8013b94:	8812      	ldrh	r2, [r2, #0]
 8013b96:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013b98:	7dfb      	ldrb	r3, [r7, #23]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	75fb      	strb	r3, [r7, #23]
 8013b9e:	7dfa      	ldrb	r2, [r7, #23]
 8013ba0:	79fb      	ldrb	r3, [r7, #7]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d3ee      	bcc.n	8013b84 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8013ba6:	bf00      	nop
 8013ba8:	371c      	adds	r7, #28
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bc80      	pop	{r7}
 8013bae:	4770      	bx	lr

08013bb0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013bb0:	b082      	sub	sp, #8
 8013bb2:	b580      	push	{r7, lr}
 8013bb4:	b086      	sub	sp, #24
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	60f8      	str	r0, [r7, #12]
 8013bba:	60b9      	str	r1, [r7, #8]
 8013bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013bc2:	79f9      	ldrb	r1, [r7, #7]
 8013bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013bc8:	cb0c      	ldmia	r3, {r2, r3}
 8013bca:	68f8      	ldr	r0, [r7, #12]
 8013bcc:	f7ff fd8c 	bl	80136e8 <GetDutyCycle>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	68da      	ldr	r2, [r3, #12]
 8013bd8:	8afb      	ldrh	r3, [r7, #22]
 8013bda:	68b9      	ldr	r1, [r7, #8]
 8013bdc:	fb01 f303 	mul.w	r3, r1, r3
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d909      	bls.n	8013bf8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	68da      	ldr	r2, [r3, #12]
 8013be8:	8afb      	ldrh	r3, [r7, #22]
 8013bea:	68b9      	ldr	r1, [r7, #8]
 8013bec:	fb01 f303 	mul.w	r3, r1, r3
 8013bf0:	1ad2      	subs	r2, r2, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8013bf6:	e002      	b.n	8013bfe <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	60da      	str	r2, [r3, #12]
}
 8013bfe:	bf00      	nop
 8013c00:	3718      	adds	r7, #24
 8013c02:	46bd      	mov	sp, r7
 8013c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013c08:	b002      	add	sp, #8
 8013c0a:	4770      	bx	lr

08013c0c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8013c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c0e:	b08f      	sub	sp, #60	; 0x3c
 8013c10:	af04      	add	r7, sp, #16
 8013c12:	6039      	str	r1, [r7, #0]
 8013c14:	4611      	mov	r1, r2
 8013c16:	461a      	mov	r2, r3
 8013c18:	4603      	mov	r3, r0
 8013c1a:	71fb      	strb	r3, [r7, #7]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	71bb      	strb	r3, [r7, #6]
 8013c20:	4613      	mov	r3, r2
 8013c22:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8013c24:	f04f 33ff 	mov.w	r3, #4294967295
 8013c28:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8013c2a:	f006 f93f 	bl	8019eac <UTIL_TIMER_GetCurrentTime>
 8013c2e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8013c30:	2300      	movs	r3, #0
 8013c32:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8013c34:	2301      	movs	r3, #1
 8013c36:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8013c3e:	2300      	movs	r3, #0
 8013c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013c44:	e0ba      	b.n	8013dbc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8013c46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4413      	add	r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	461a      	mov	r2, r3
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	189c      	adds	r4, r3, r2
 8013c58:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8013c5c:	797a      	ldrb	r2, [r7, #5]
 8013c5e:	79fd      	ldrb	r5, [r7, #7]
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	9302      	str	r3, [sp, #8]
 8013c64:	46ec      	mov	ip, sp
 8013c66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013c6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c6e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013c72:	4633      	mov	r3, r6
 8013c74:	4629      	mov	r1, r5
 8013c76:	4620      	mov	r0, r4
 8013c78:	f7ff fe22 	bl	80138c0 <UpdateTimeCredits>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8013c80:	8afa      	ldrh	r2, [r7, #22]
 8013c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c84:	fb02 f303 	mul.w	r3, r2, r3
 8013c88:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013c8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013c8e:	4613      	mov	r3, r2
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	4413      	add	r3, r2
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	461a      	mov	r2, r3
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	68db      	ldr	r3, [r3, #12]
 8013c9e:	69ba      	ldr	r2, [r7, #24]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d308      	bcc.n	8013cb6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013ca4:	797b      	ldrb	r3, [r7, #5]
 8013ca6:	f083 0301 	eor.w	r3, r3, #1
 8013caa:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d013      	beq.n	8013cd8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013cb0:	79fb      	ldrb	r3, [r7, #7]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d010      	beq.n	8013cd8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8013cb6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013cba:	4613      	mov	r3, r2
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	4413      	add	r3, r2
 8013cc0:	00db      	lsls	r3, r3, #3
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	2201      	movs	r2, #1
 8013cca:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8013ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013cd6:	e06c      	b.n	8013db2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8013cd8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	4413      	add	r3, r2
 8013cea:	2200      	movs	r2, #0
 8013cec:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8013cee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	005b      	lsls	r3, r3, #1
 8013cf6:	4413      	add	r3, r2
 8013cf8:	00db      	lsls	r3, r3, #3
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	4413      	add	r3, r2
 8013d00:	691b      	ldr	r3, [r3, #16]
 8013d02:	69ba      	ldr	r2, [r7, #24]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d215      	bcs.n	8013d34 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8013d08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	4413      	add	r3, r2
 8013d12:	00db      	lsls	r3, r3, #3
 8013d14:	461a      	mov	r2, r3
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	4413      	add	r3, r2
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	69ba      	ldr	r2, [r7, #24]
 8013d1e:	1ad3      	subs	r3, r2, r3
 8013d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d22:	4293      	cmp	r3, r2
 8013d24:	bf28      	it	cs
 8013d26:	4613      	movcs	r3, r2
 8013d28:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8013d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d2e:	3301      	adds	r3, #1
 8013d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8013d34:	79fb      	ldrb	r3, [r7, #7]
 8013d36:	f083 0301 	eor.w	r3, r3, #1
 8013d3a:	b2db      	uxtb	r3, r3
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d038      	beq.n	8013db2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8013d40:	2300      	movs	r3, #0
 8013d42:	60fb      	str	r3, [r7, #12]
 8013d44:	2300      	movs	r3, #0
 8013d46:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013d48:	8afb      	ldrh	r3, [r7, #22]
 8013d4a:	2b64      	cmp	r3, #100	; 0x64
 8013d4c:	d103      	bne.n	8013d56 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8013d4e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	e009      	b.n	8013d6a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013d56:	8afb      	ldrh	r3, [r7, #22]
 8013d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013d5c:	d103      	bne.n	8013d66 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8013d5e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8013d62:	60fb      	str	r3, [r7, #12]
 8013d64:	e001      	b.n	8013d6a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013d66:	4b1e      	ldr	r3, [pc, #120]	; (8013de0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013d68:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8013d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d6c:	4a1c      	ldr	r2, [pc, #112]	; (8013de0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d90e      	bls.n	8013d90 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8013d72:	68fa      	ldr	r2, [r7, #12]
 8013d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d76:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013d7a:	3b30      	subs	r3, #48	; 0x30
 8013d7c:	4919      	ldr	r1, [pc, #100]	; (8013de4 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8013d7e:	fba1 1303 	umull	r1, r3, r1, r3
 8013d82:	0c1b      	lsrs	r3, r3, #16
 8013d84:	3301      	adds	r3, #1
 8013d86:	4918      	ldr	r1, [pc, #96]	; (8013de8 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8013d88:	fb01 f303 	mul.w	r3, r1, r3
 8013d8c:	4413      	add	r3, r2
 8013d8e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8013d90:	f107 000c 	add.w	r0, r7, #12
 8013d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d9a:	f107 020c 	add.w	r2, r7, #12
 8013d9e:	ca06      	ldmia	r2, {r1, r2}
 8013da0:	f005 f997 	bl	80190d2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8013da4:	f107 030c 	add.w	r3, r7, #12
 8013da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013dac:	f005 fa50 	bl	8019250 <SysTimeToMs>
 8013db0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8013db2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013db6:	3301      	adds	r3, #1
 8013db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013dbc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013dc0:	79bb      	ldrb	r3, [r7, #6]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	f4ff af3f 	bcc.w	8013c46 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8013dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d102      	bne.n	8013dd6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8013dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd4:	e000      	b.n	8013dd8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8013dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	372c      	adds	r7, #44	; 0x2c
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013de0:	0001ec30 	.word	0x0001ec30
 8013de4:	c22e4507 	.word	0xc22e4507
 8013de8:	00015180 	.word	0x00015180

08013dec <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013dec:	b480      	push	{r7}
 8013dee:	b085      	sub	sp, #20
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8013df6:	2300      	movs	r3, #0
 8013df8:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	2b03      	cmp	r3, #3
 8013e00:	d13f      	bne.n	8013e82 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	3301      	adds	r3, #1
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	b25a      	sxtb	r2, r3
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013e14:	f003 030f 	and.w	r3, r3, #15
 8013e18:	b25a      	sxtb	r2, r3
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	091b      	lsrs	r3, r3, #4
 8013e28:	b2db      	uxtb	r3, r3
 8013e2a:	b25a      	sxtb	r2, r3
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	3302      	adds	r3, #2
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	b29a      	uxth	r2, r3
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	889b      	ldrh	r3, [r3, #4]
 8013e40:	b21a      	sxth	r2, r3
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	3303      	adds	r3, #3
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	021b      	lsls	r3, r3, #8
 8013e4a:	b21b      	sxth	r3, r3
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	b21b      	sxth	r3, r3
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	791a      	ldrb	r2, [r3, #4]
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	091b      	lsrs	r3, r3, #4
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	f003 0307 	and.w	r3, r3, #7
 8013e6a:	b2da      	uxtb	r2, r3
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	f003 030f 	and.w	r3, r3, #15
 8013e78:	b2da      	uxtb	r2, r3
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013e7e:	2305      	movs	r3, #5
 8013e80:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8013e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3714      	adds	r7, #20
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bc80      	pop	{r7}
 8013e8c:	4770      	bx	lr

08013e8e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013e8e:	b5b0      	push	{r4, r5, r7, lr}
 8013e90:	b088      	sub	sp, #32
 8013e92:	af02      	add	r7, sp, #8
 8013e94:	60f8      	str	r0, [r7, #12]
 8013e96:	60b9      	str	r1, [r7, #8]
 8013e98:	607a      	str	r2, [r7, #4]
 8013e9a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	791b      	ldrb	r3, [r3, #4]
 8013ea0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	799b      	ldrb	r3, [r3, #6]
 8013ea6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	79db      	ldrb	r3, [r3, #7]
 8013eac:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	7a1b      	ldrb	r3, [r3, #8]
 8013eb2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	795b      	ldrb	r3, [r3, #5]
 8013eb8:	f083 0301 	eor.w	r3, r3, #1
 8013ebc:	b2db      	uxtb	r3, r3
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d008      	beq.n	8013ed4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	7adb      	ldrb	r3, [r3, #11]
 8013ec6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	7a5b      	ldrb	r3, [r3, #9]
 8013ecc:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	7a9b      	ldrb	r3, [r3, #10]
 8013ed2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8013ed4:	7dfb      	ldrb	r3, [r7, #23]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d04a      	beq.n	8013f70 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8013eda:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8013ede:	2b0f      	cmp	r3, #15
 8013ee0:	d103      	bne.n	8013eea <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	7a5b      	ldrb	r3, [r3, #9]
 8013ee6:	75bb      	strb	r3, [r7, #22]
 8013ee8:	e01d      	b.n	8013f26 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	7b18      	ldrb	r0, [r3, #12]
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	6919      	ldr	r1, [r3, #16]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8013efe:	68fa      	ldr	r2, [r7, #12]
 8013f00:	6992      	ldr	r2, [r2, #24]
 8013f02:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8013f06:	9201      	str	r2, [sp, #4]
 8013f08:	9300      	str	r3, [sp, #0]
 8013f0a:	462b      	mov	r3, r5
 8013f0c:	4622      	mov	r2, r4
 8013f0e:	f7ff fd3a 	bl	8013986 <RegionCommonChanVerifyDr>
 8013f12:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8013f14:	f083 0301 	eor.w	r3, r3, #1
 8013f18:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d003      	beq.n	8013f26 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8013f1e:	7dfb      	ldrb	r3, [r7, #23]
 8013f20:	f023 0302 	bic.w	r3, r3, #2
 8013f24:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8013f26:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013f2a:	2b0f      	cmp	r3, #15
 8013f2c:	d103      	bne.n	8013f36 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	7a9b      	ldrb	r3, [r3, #10]
 8013f32:	757b      	strb	r3, [r7, #21]
 8013f34:	e01c      	b.n	8013f70 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8013f42:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7ff fd8f 	bl	8013a6a <RegionCommonValueInRange>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d10e      	bne.n	8013f70 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8013f58:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	da03      	bge.n	8013f68 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	7f5b      	ldrb	r3, [r3, #29]
 8013f64:	757b      	strb	r3, [r7, #21]
 8013f66:	e003      	b.n	8013f70 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013f68:	7dfb      	ldrb	r3, [r7, #23]
 8013f6a:	f023 0304 	bic.w	r3, r3, #4
 8013f6e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013f70:	7dfb      	ldrb	r3, [r7, #23]
 8013f72:	2b07      	cmp	r3, #7
 8013f74:	d105      	bne.n	8013f82 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8013f76:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d101      	bne.n	8013f82 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	7dba      	ldrb	r2, [r7, #22]
 8013f86:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	7d7a      	ldrb	r2, [r7, #21]
 8013f8c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013f8e:	7d3a      	ldrb	r2, [r7, #20]
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	701a      	strb	r2, [r3, #0]

    return status;
 8013f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3718      	adds	r7, #24
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013fa0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	6039      	str	r1, [r7, #0]
 8013faa:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8013fac:	79fb      	ldrb	r3, [r7, #7]
 8013fae:	4a06      	ldr	r2, [pc, #24]	; (8013fc8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8013fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bc80      	pop	{r7}
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	000f4240 	.word	0x000f4240

08013fcc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b083      	sub	sp, #12
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8013fd6:	79fb      	ldrb	r3, [r7, #7]
 8013fd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013fdc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	370c      	adds	r7, #12
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bc80      	pop	{r7}
 8013fe8:	4770      	bx	lr
	...

08013fec <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	60f8      	str	r0, [r7, #12]
 8013ff4:	607a      	str	r2, [r7, #4]
 8013ff6:	603b      	str	r3, [r7, #0]
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013ffc:	7afa      	ldrb	r2, [r7, #11]
 8013ffe:	7afb      	ldrb	r3, [r7, #11]
 8014000:	3b04      	subs	r3, #4
 8014002:	4619      	mov	r1, r3
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	fb03 f101 	mul.w	r1, r3, r1
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014010:	fb00 f303 	mul.w	r3, r0, r3
 8014014:	440b      	add	r3, r1
 8014016:	005b      	lsls	r3, r3, #1
 8014018:	2b00      	cmp	r3, #0
 801401a:	d013      	beq.n	8014044 <RegionCommonComputeRxWindowParameters+0x58>
 801401c:	7afb      	ldrb	r3, [r7, #11]
 801401e:	3b04      	subs	r3, #4
 8014020:	4619      	mov	r1, r3
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	fb03 f101 	mul.w	r1, r3, r1
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801402e:	fb00 f303 	mul.w	r3, r0, r3
 8014032:	440b      	add	r3, r1
 8014034:	0059      	lsls	r1, r3, #1
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	440b      	add	r3, r1
 801403a:	1e59      	subs	r1, r3, #1
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	fbb1 f3f3 	udiv	r3, r1, r3
 8014042:	e00f      	b.n	8014064 <RegionCommonComputeRxWindowParameters+0x78>
 8014044:	7afb      	ldrb	r3, [r7, #11]
 8014046:	3b04      	subs	r3, #4
 8014048:	4619      	mov	r1, r3
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	fb03 f101 	mul.w	r1, r3, r1
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014056:	fb00 f303 	mul.w	r3, r0, r3
 801405a:	440b      	add	r3, r1
 801405c:	0059      	lsls	r1, r3, #1
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	fbb1 f3f3 	udiv	r3, r1, r3
 8014064:	429a      	cmp	r2, r3
 8014066:	bf38      	it	cc
 8014068:	461a      	movcc	r2, r3
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	4619      	mov	r1, r3
 8014074:	69bb      	ldr	r3, [r7, #24]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	68fa      	ldr	r2, [r7, #12]
 801407a:	fb02 f303 	mul.w	r3, r2, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d007      	beq.n	8014092 <RegionCommonComputeRxWindowParameters+0xa6>
 8014082:	69bb      	ldr	r3, [r7, #24]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	68fa      	ldr	r2, [r7, #12]
 8014088:	fb02 f303 	mul.w	r3, r2, r3
 801408c:	3301      	adds	r3, #1
 801408e:	085b      	lsrs	r3, r3, #1
 8014090:	e005      	b.n	801409e <RegionCommonComputeRxWindowParameters+0xb2>
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	68fa      	ldr	r2, [r7, #12]
 8014098:	fb02 f303 	mul.w	r3, r2, r3
 801409c:	085b      	lsrs	r3, r3, #1
 801409e:	1acb      	subs	r3, r1, r3
 80140a0:	683a      	ldr	r2, [r7, #0]
 80140a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80140a6:	fb01 f202 	mul.w	r2, r1, r2
 80140aa:	1a9b      	subs	r3, r3, r2
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	dd27      	ble.n	8014100 <RegionCommonComputeRxWindowParameters+0x114>
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	009b      	lsls	r3, r3, #2
 80140b4:	4619      	mov	r1, r3
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	68fa      	ldr	r2, [r7, #12]
 80140bc:	fb02 f303 	mul.w	r3, r2, r3
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d007      	beq.n	80140d4 <RegionCommonComputeRxWindowParameters+0xe8>
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	68fa      	ldr	r2, [r7, #12]
 80140ca:	fb02 f303 	mul.w	r3, r2, r3
 80140ce:	3301      	adds	r3, #1
 80140d0:	085b      	lsrs	r3, r3, #1
 80140d2:	e005      	b.n	80140e0 <RegionCommonComputeRxWindowParameters+0xf4>
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	fb02 f303 	mul.w	r3, r2, r3
 80140de:	085b      	lsrs	r3, r3, #1
 80140e0:	1acb      	subs	r3, r1, r3
 80140e2:	683a      	ldr	r2, [r7, #0]
 80140e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80140e8:	fb01 f202 	mul.w	r2, r1, r2
 80140ec:	1a9b      	subs	r3, r3, r2
 80140ee:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80140f2:	4a19      	ldr	r2, [pc, #100]	; (8014158 <RegionCommonComputeRxWindowParameters+0x16c>)
 80140f4:	fb82 1203 	smull	r1, r2, r2, r3
 80140f8:	1192      	asrs	r2, r2, #6
 80140fa:	17db      	asrs	r3, r3, #31
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	e024      	b.n	801414a <RegionCommonComputeRxWindowParameters+0x15e>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	4619      	mov	r1, r3
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	fb02 f303 	mul.w	r3, r2, r3
 8014110:	2b00      	cmp	r3, #0
 8014112:	d007      	beq.n	8014124 <RegionCommonComputeRxWindowParameters+0x138>
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	fb02 f303 	mul.w	r3, r2, r3
 801411e:	3301      	adds	r3, #1
 8014120:	085b      	lsrs	r3, r3, #1
 8014122:	e005      	b.n	8014130 <RegionCommonComputeRxWindowParameters+0x144>
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	fb02 f303 	mul.w	r3, r2, r3
 801412e:	085b      	lsrs	r3, r3, #1
 8014130:	1acb      	subs	r3, r1, r3
 8014132:	683a      	ldr	r2, [r7, #0]
 8014134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014138:	fb01 f202 	mul.w	r2, r1, r2
 801413c:	1a9b      	subs	r3, r3, r2
 801413e:	4a06      	ldr	r2, [pc, #24]	; (8014158 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014140:	fb82 1203 	smull	r1, r2, r2, r3
 8014144:	1192      	asrs	r2, r2, #6
 8014146:	17db      	asrs	r3, r3, #31
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	69fa      	ldr	r2, [r7, #28]
 801414c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801414e:	bf00      	nop
 8014150:	3714      	adds	r7, #20
 8014152:	46bd      	mov	sp, r7
 8014154:	bc80      	pop	{r7}
 8014156:	4770      	bx	lr
 8014158:	10624dd3 	.word	0x10624dd3

0801415c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b086      	sub	sp, #24
 8014160:	af00      	add	r7, sp, #0
 8014162:	4603      	mov	r3, r0
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
 8014168:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801416a:	2300      	movs	r3, #0
 801416c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014172:	005b      	lsls	r3, r3, #1
 8014174:	4618      	mov	r0, r3
 8014176:	f7ec fb7d 	bl	8000874 <__aeabi_ui2f>
 801417a:	4603      	mov	r3, r0
 801417c:	4619      	mov	r1, r3
 801417e:	68b8      	ldr	r0, [r7, #8]
 8014180:	f7ec fac6 	bl	8000710 <__aeabi_fsub>
 8014184:	4603      	mov	r3, r0
 8014186:	6879      	ldr	r1, [r7, #4]
 8014188:	4618      	mov	r0, r3
 801418a:	f7ec fac1 	bl	8000710 <__aeabi_fsub>
 801418e:	4603      	mov	r3, r0
 8014190:	4618      	mov	r0, r3
 8014192:	f7ec f9b1 	bl	80004f8 <__aeabi_f2d>
 8014196:	4602      	mov	r2, r0
 8014198:	460b      	mov	r3, r1
 801419a:	4610      	mov	r0, r2
 801419c:	4619      	mov	r1, r3
 801419e:	f006 fe9b 	bl	801aed8 <floor>
 80141a2:	4602      	mov	r2, r0
 80141a4:	460b      	mov	r3, r1
 80141a6:	4610      	mov	r0, r2
 80141a8:	4619      	mov	r1, r3
 80141aa:	f7ec fa85 	bl	80006b8 <__aeabi_d2iz>
 80141ae:	4603      	mov	r3, r0
 80141b0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80141b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3718      	adds	r7, #24
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80141be:	b590      	push	{r4, r7, lr}
 80141c0:	b087      	sub	sp, #28
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	60f8      	str	r0, [r7, #12]
 80141c6:	60b9      	str	r1, [r7, #8]
 80141c8:	607a      	str	r2, [r7, #4]
 80141ca:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80141cc:	2300      	movs	r3, #0
 80141ce:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80141d0:	2300      	movs	r3, #0
 80141d2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80141d4:	2300      	movs	r3, #0
 80141d6:	757b      	strb	r3, [r7, #21]
 80141d8:	2300      	movs	r3, #0
 80141da:	753b      	strb	r3, [r7, #20]
 80141dc:	e09c      	b.n	8014318 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80141de:	2300      	movs	r3, #0
 80141e0:	74fb      	strb	r3, [r7, #19]
 80141e2:	e08f      	b.n	8014304 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	685a      	ldr	r2, [r3, #4]
 80141e8:	7d3b      	ldrb	r3, [r7, #20]
 80141ea:	005b      	lsls	r3, r3, #1
 80141ec:	4413      	add	r3, r2
 80141ee:	881b      	ldrh	r3, [r3, #0]
 80141f0:	461a      	mov	r2, r3
 80141f2:	7cfb      	ldrb	r3, [r7, #19]
 80141f4:	fa42 f303 	asr.w	r3, r2, r3
 80141f8:	f003 0301 	and.w	r3, r3, #1
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d07e      	beq.n	80142fe <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	689a      	ldr	r2, [r3, #8]
 8014204:	7d79      	ldrb	r1, [r7, #21]
 8014206:	7cfb      	ldrb	r3, [r7, #19]
 8014208:	440b      	add	r3, r1
 801420a:	4619      	mov	r1, r3
 801420c:	460b      	mov	r3, r1
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	440b      	add	r3, r1
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	4413      	add	r3, r2
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d06b      	beq.n	80142f4 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	f083 0301 	eor.w	r3, r3, #1
 8014224:	b2db      	uxtb	r3, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	d011      	beq.n	801424e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801422e:	2b00      	cmp	r3, #0
 8014230:	d00d      	beq.n	801424e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	695a      	ldr	r2, [r3, #20]
 8014236:	7d3b      	ldrb	r3, [r7, #20]
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	4413      	add	r3, r2
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	461a      	mov	r2, r3
 8014240:	7cfb      	ldrb	r3, [r7, #19]
 8014242:	fa42 f303 	asr.w	r3, r2, r3
 8014246:	f003 0301 	and.w	r3, r3, #1
 801424a:	2b00      	cmp	r3, #0
 801424c:	d054      	beq.n	80142f8 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	785b      	ldrb	r3, [r3, #1]
 8014252:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	689a      	ldr	r2, [r3, #8]
 8014258:	7d79      	ldrb	r1, [r7, #21]
 801425a:	7cfb      	ldrb	r3, [r7, #19]
 801425c:	440b      	add	r3, r1
 801425e:	4619      	mov	r1, r3
 8014260:	460b      	mov	r3, r1
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	440b      	add	r3, r1
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	4413      	add	r3, r2
 801426a:	7a1b      	ldrb	r3, [r3, #8]
 801426c:	f343 0303 	sbfx	r3, r3, #0, #4
 8014270:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014272:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	689a      	ldr	r2, [r3, #8]
 8014278:	7d79      	ldrb	r1, [r7, #21]
 801427a:	7cfb      	ldrb	r3, [r7, #19]
 801427c:	440b      	add	r3, r1
 801427e:	4619      	mov	r1, r3
 8014280:	460b      	mov	r3, r1
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	440b      	add	r3, r1
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	4413      	add	r3, r2
 801428a:	7a1b      	ldrb	r3, [r3, #8]
 801428c:	f343 1303 	sbfx	r3, r3, #4, #4
 8014290:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014292:	461a      	mov	r2, r3
 8014294:	4621      	mov	r1, r4
 8014296:	f7ff fbe8 	bl	8013a6a <RegionCommonValueInRange>
 801429a:	4603      	mov	r3, r0
 801429c:	2b00      	cmp	r3, #0
 801429e:	d02d      	beq.n	80142fc <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	68da      	ldr	r2, [r3, #12]
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	6899      	ldr	r1, [r3, #8]
 80142a8:	7d78      	ldrb	r0, [r7, #21]
 80142aa:	7cfb      	ldrb	r3, [r7, #19]
 80142ac:	4403      	add	r3, r0
 80142ae:	4618      	mov	r0, r3
 80142b0:	4603      	mov	r3, r0
 80142b2:	005b      	lsls	r3, r3, #1
 80142b4:	4403      	add	r3, r0
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	440b      	add	r3, r1
 80142ba:	7a5b      	ldrb	r3, [r3, #9]
 80142bc:	4619      	mov	r1, r3
 80142be:	460b      	mov	r3, r1
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	440b      	add	r3, r1
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	4413      	add	r3, r2
 80142c8:	7d1b      	ldrb	r3, [r3, #20]
 80142ca:	f083 0301 	eor.w	r3, r3, #1
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d003      	beq.n	80142dc <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80142d4:	7dbb      	ldrb	r3, [r7, #22]
 80142d6:	3301      	adds	r3, #1
 80142d8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80142da:	e010      	b.n	80142fe <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80142dc:	7dfb      	ldrb	r3, [r7, #23]
 80142de:	1c5a      	adds	r2, r3, #1
 80142e0:	75fa      	strb	r2, [r7, #23]
 80142e2:	461a      	mov	r2, r3
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	4413      	add	r3, r2
 80142e8:	7d79      	ldrb	r1, [r7, #21]
 80142ea:	7cfa      	ldrb	r2, [r7, #19]
 80142ec:	440a      	add	r2, r1
 80142ee:	b2d2      	uxtb	r2, r2
 80142f0:	701a      	strb	r2, [r3, #0]
 80142f2:	e004      	b.n	80142fe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80142f4:	bf00      	nop
 80142f6:	e002      	b.n	80142fe <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80142f8:	bf00      	nop
 80142fa:	e000      	b.n	80142fe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80142fc:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80142fe:	7cfb      	ldrb	r3, [r7, #19]
 8014300:	3301      	adds	r3, #1
 8014302:	74fb      	strb	r3, [r7, #19]
 8014304:	7cfb      	ldrb	r3, [r7, #19]
 8014306:	2b0f      	cmp	r3, #15
 8014308:	f67f af6c 	bls.w	80141e4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801430c:	7d7b      	ldrb	r3, [r7, #21]
 801430e:	3310      	adds	r3, #16
 8014310:	757b      	strb	r3, [r7, #21]
 8014312:	7d3b      	ldrb	r3, [r7, #20]
 8014314:	3301      	adds	r3, #1
 8014316:	753b      	strb	r3, [r7, #20]
 8014318:	7d7b      	ldrb	r3, [r7, #21]
 801431a:	b29a      	uxth	r2, r3
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	8a1b      	ldrh	r3, [r3, #16]
 8014320:	429a      	cmp	r2, r3
 8014322:	f4ff af5c 	bcc.w	80141de <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	7dfa      	ldrb	r2, [r7, #23]
 801432a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	7dba      	ldrb	r2, [r7, #22]
 8014330:	701a      	strb	r2, [r3, #0]
}
 8014332:	bf00      	nop
 8014334:	371c      	adds	r7, #28
 8014336:	46bd      	mov	sp, r7
 8014338:	bd90      	pop	{r4, r7, pc}

0801433a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801433a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801433c:	b08b      	sub	sp, #44	; 0x2c
 801433e:	af04      	add	r7, sp, #16
 8014340:	60f8      	str	r0, [r7, #12]
 8014342:	60b9      	str	r1, [r7, #8]
 8014344:	607a      	str	r2, [r7, #4]
 8014346:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	4618      	mov	r0, r3
 801434e:	f005 fdbf 	bl	8019ed0 <UTIL_TIMER_GetElapsedTime>
 8014352:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	1ad2      	subs	r2, r2, r3
 801435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801435e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014362:	2201      	movs	r2, #1
 8014364:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2200      	movs	r2, #0
 801436a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d004      	beq.n	801437e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014378:	697a      	ldr	r2, [r7, #20]
 801437a:	429a      	cmp	r2, r3
 801437c:	d32b      	bcc.n	80143d6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	2200      	movs	r2, #0
 8014382:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	69db      	ldr	r3, [r3, #28]
 8014388:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801438e:	68dd      	ldr	r5, [r3, #12]
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	7a5e      	ldrb	r6, [r3, #9]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f893 c008 	ldrb.w	ip, [r3, #8]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	7d1b      	ldrb	r3, [r3, #20]
 801439e:	68fa      	ldr	r2, [r7, #12]
 80143a0:	6992      	ldr	r2, [r2, #24]
 80143a2:	9203      	str	r2, [sp, #12]
 80143a4:	68fa      	ldr	r2, [r7, #12]
 80143a6:	f10d 0e04 	add.w	lr, sp, #4
 80143aa:	320c      	adds	r2, #12
 80143ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143b0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	4663      	mov	r3, ip
 80143b8:	4632      	mov	r2, r6
 80143ba:	4629      	mov	r1, r5
 80143bc:	4620      	mov	r0, r4
 80143be:	f7ff fc25 	bl	8013c0c <RegionCommonUpdateBandTimeOff>
 80143c2:	4602      	mov	r2, r0
 80143c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143c6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	69d8      	ldr	r0, [r3, #28]
 80143cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ce:	683a      	ldr	r2, [r7, #0]
 80143d0:	6879      	ldr	r1, [r7, #4]
 80143d2:	f7ff fef4 	bl	80141be <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d004      	beq.n	80143e8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80143de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80143e4:	2300      	movs	r3, #0
 80143e6:	e006      	b.n	80143f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80143e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80143f0:	230b      	movs	r3, #11
 80143f2:	e000      	b.n	80143f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80143f4:	230c      	movs	r3, #12
    }
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	371c      	adds	r7, #28
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080143fe <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80143fe:	b5b0      	push	{r4, r5, r7, lr}
 8014400:	b086      	sub	sp, #24
 8014402:	af02      	add	r7, sp, #8
 8014404:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f993 2000 	ldrsb.w	r2, [r3]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014418:	429a      	cmp	r2, r3
 801441a:	d103      	bne.n	8014424 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014422:	e026      	b.n	8014472 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014424:	7bfb      	ldrb	r3, [r7, #15]
 8014426:	3b01      	subs	r3, #1
 8014428:	b2db      	uxtb	r3, r3
 801442a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014432:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014436:	429a      	cmp	r2, r3
 8014438:	d019      	beq.n	801446e <RegionCommonGetNextLowerTxDr+0x70>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	78d8      	ldrb	r0, [r3, #3]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6859      	ldr	r1, [r3, #4]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	6892      	ldr	r2, [r2, #8]
 8014452:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014456:	9201      	str	r2, [sp, #4]
 8014458:	9300      	str	r3, [sp, #0]
 801445a:	462b      	mov	r3, r5
 801445c:	4622      	mov	r2, r4
 801445e:	f7ff fa92 	bl	8013986 <RegionCommonChanVerifyDr>
 8014462:	4603      	mov	r3, r0
 8014464:	f083 0301 	eor.w	r3, r3, #1
 8014468:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801446a:	2b00      	cmp	r3, #0
 801446c:	d1da      	bne.n	8014424 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014472:	4618      	mov	r0, r3
 8014474:	3710      	adds	r7, #16
 8014476:	46bd      	mov	sp, r7
 8014478:	bdb0      	pop	{r4, r5, r7, pc}

0801447a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801447a:	b480      	push	{r7}
 801447c:	b083      	sub	sp, #12
 801447e:	af00      	add	r7, sp, #0
 8014480:	4603      	mov	r3, r0
 8014482:	460a      	mov	r2, r1
 8014484:	71fb      	strb	r3, [r7, #7]
 8014486:	4613      	mov	r3, r2
 8014488:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801448a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014492:	4293      	cmp	r3, r2
 8014494:	bfb8      	it	lt
 8014496:	4613      	movlt	r3, r2
 8014498:	b25b      	sxtb	r3, r3
}
 801449a:	4618      	mov	r0, r3
 801449c:	370c      	adds	r7, #12
 801449e:	46bd      	mov	sp, r7
 80144a0:	bc80      	pop	{r7}
 80144a2:	4770      	bx	lr

080144a4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	009b      	lsls	r3, r3, #2
 80144b2:	683a      	ldr	r2, [r7, #0]
 80144b4:	4413      	add	r3, r2
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	4a07      	ldr	r2, [pc, #28]	; (80144d8 <RegionCommonGetBandwidth+0x34>)
 80144ba:	4293      	cmp	r3, r2
 80144bc:	d004      	beq.n	80144c8 <RegionCommonGetBandwidth+0x24>
 80144be:	4a07      	ldr	r2, [pc, #28]	; (80144dc <RegionCommonGetBandwidth+0x38>)
 80144c0:	4293      	cmp	r3, r2
 80144c2:	d003      	beq.n	80144cc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80144c4:	2300      	movs	r3, #0
 80144c6:	e002      	b.n	80144ce <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80144c8:	2301      	movs	r3, #1
 80144ca:	e000      	b.n	80144ce <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80144cc:	2302      	movs	r3, #2
    }
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bc80      	pop	{r7}
 80144d6:	4770      	bx	lr
 80144d8:	0003d090 	.word	0x0003d090
 80144dc:	0007a120 	.word	0x0007a120

080144e0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b086      	sub	sp, #24
 80144e4:	af04      	add	r7, sp, #16
 80144e6:	4603      	mov	r3, r0
 80144e8:	6039      	str	r1, [r7, #0]
 80144ea:	71fb      	strb	r3, [r7, #7]
 80144ec:	4613      	mov	r3, r2
 80144ee:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80144f0:	79fb      	ldrb	r3, [r7, #7]
 80144f2:	2b05      	cmp	r3, #5
 80144f4:	d810      	bhi.n	8014518 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80144f6:	79fb      	ldrb	r3, [r7, #7]
 80144f8:	4a0f      	ldr	r2, [pc, #60]	; (8014538 <RegionCommonRxConfigPrint+0x58>)
 80144fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014502:	9202      	str	r2, [sp, #8]
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	9201      	str	r2, [sp, #4]
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	4b0c      	ldr	r3, [pc, #48]	; (801453c <RegionCommonRxConfigPrint+0x5c>)
 801450c:	2201      	movs	r2, #1
 801450e:	2100      	movs	r1, #0
 8014510:	2002      	movs	r0, #2
 8014512:	f005 fdbb 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014516:	e00a      	b.n	801452e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014518:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801451c:	9301      	str	r3, [sp, #4]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	9300      	str	r3, [sp, #0]
 8014522:	4b07      	ldr	r3, [pc, #28]	; (8014540 <RegionCommonRxConfigPrint+0x60>)
 8014524:	2201      	movs	r2, #1
 8014526:	2100      	movs	r1, #0
 8014528:	2002      	movs	r0, #2
 801452a:	f005 fdaf 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
}
 801452e:	bf00      	nop
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	2000011c 	.word	0x2000011c
 801453c:	0801b374 	.word	0x0801b374
 8014540:	0801b394 	.word	0x0801b394

08014544 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af02      	add	r7, sp, #8
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	460b      	mov	r3, r1
 801454e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	9300      	str	r3, [sp, #0]
 801455a:	4b05      	ldr	r3, [pc, #20]	; (8014570 <RegionCommonTxConfigPrint+0x2c>)
 801455c:	2201      	movs	r2, #1
 801455e:	2100      	movs	r1, #0
 8014560:	2002      	movs	r0, #2
 8014562:	f005 fd93 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
}
 8014566:	bf00      	nop
 8014568:	3708      	adds	r7, #8
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	0801b3b0 	.word	0x0801b3b0

08014574 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801457e:	4b2d      	ldr	r3, [pc, #180]	; (8014634 <VerifyRfFreq+0xc0>)
 8014580:	6a1b      	ldr	r3, [r3, #32]
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	4798      	blx	r3
 8014586:	4603      	mov	r3, r0
 8014588:	f083 0301 	eor.w	r3, r3, #1
 801458c:	b2db      	uxtb	r3, r3
 801458e:	2b00      	cmp	r3, #0
 8014590:	d001      	beq.n	8014596 <VerifyRfFreq+0x22>
    {
        return false;
 8014592:	2300      	movs	r3, #0
 8014594:	e04a      	b.n	801462c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4a27      	ldr	r2, [pc, #156]	; (8014638 <VerifyRfFreq+0xc4>)
 801459a:	4293      	cmp	r3, r2
 801459c:	d307      	bcc.n	80145ae <VerifyRfFreq+0x3a>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	4a26      	ldr	r2, [pc, #152]	; (801463c <VerifyRfFreq+0xc8>)
 80145a2:	4293      	cmp	r3, r2
 80145a4:	d803      	bhi.n	80145ae <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	2202      	movs	r2, #2
 80145aa:	701a      	strb	r2, [r3, #0]
 80145ac:	e03d      	b.n	801462a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	4a22      	ldr	r2, [pc, #136]	; (801463c <VerifyRfFreq+0xc8>)
 80145b2:	4293      	cmp	r3, r2
 80145b4:	d907      	bls.n	80145c6 <VerifyRfFreq+0x52>
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	4a21      	ldr	r2, [pc, #132]	; (8014640 <VerifyRfFreq+0xcc>)
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d803      	bhi.n	80145c6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	2200      	movs	r2, #0
 80145c2:	701a      	strb	r2, [r3, #0]
 80145c4:	e031      	b.n	801462a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	4a1d      	ldr	r2, [pc, #116]	; (8014640 <VerifyRfFreq+0xcc>)
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d907      	bls.n	80145de <VerifyRfFreq+0x6a>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4a1c      	ldr	r2, [pc, #112]	; (8014644 <VerifyRfFreq+0xd0>)
 80145d2:	4293      	cmp	r3, r2
 80145d4:	d803      	bhi.n	80145de <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	2201      	movs	r2, #1
 80145da:	701a      	strb	r2, [r3, #0]
 80145dc:	e025      	b.n	801462a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	4a19      	ldr	r2, [pc, #100]	; (8014648 <VerifyRfFreq+0xd4>)
 80145e2:	4293      	cmp	r3, r2
 80145e4:	d907      	bls.n	80145f6 <VerifyRfFreq+0x82>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	4a18      	ldr	r2, [pc, #96]	; (801464c <VerifyRfFreq+0xd8>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d803      	bhi.n	80145f6 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	2205      	movs	r2, #5
 80145f2:	701a      	strb	r2, [r3, #0]
 80145f4:	e019      	b.n	801462a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	4a15      	ldr	r2, [pc, #84]	; (8014650 <VerifyRfFreq+0xdc>)
 80145fa:	4293      	cmp	r3, r2
 80145fc:	d907      	bls.n	801460e <VerifyRfFreq+0x9a>
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	4a14      	ldr	r2, [pc, #80]	; (8014654 <VerifyRfFreq+0xe0>)
 8014602:	4293      	cmp	r3, r2
 8014604:	d803      	bhi.n	801460e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	2203      	movs	r2, #3
 801460a:	701a      	strb	r2, [r3, #0]
 801460c:	e00d      	b.n	801462a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	4a11      	ldr	r2, [pc, #68]	; (8014658 <VerifyRfFreq+0xe4>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d307      	bcc.n	8014626 <VerifyRfFreq+0xb2>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	4a10      	ldr	r2, [pc, #64]	; (801465c <VerifyRfFreq+0xe8>)
 801461a:	4293      	cmp	r3, r2
 801461c:	d803      	bhi.n	8014626 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	2204      	movs	r2, #4
 8014622:	701a      	strb	r2, [r3, #0]
 8014624:	e001      	b.n	801462a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014626:	2300      	movs	r3, #0
 8014628:	e000      	b.n	801462c <VerifyRfFreq+0xb8>
    }
    return true;
 801462a:	2301      	movs	r3, #1
}
 801462c:	4618      	mov	r0, r3
 801462e:	3708      	adds	r7, #8
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	0801b950 	.word	0x0801b950
 8014638:	337055c0 	.word	0x337055c0
 801463c:	338eda3f 	.word	0x338eda3f
 8014640:	33bca100 	.word	0x33bca100
 8014644:	33c5c8c0 	.word	0x33c5c8c0
 8014648:	33c74f5f 	.word	0x33c74f5f
 801464c:	33cef080 	.word	0x33cef080
 8014650:	33d1fdbf 	.word	0x33d1fdbf
 8014654:	33d5ce50 	.word	0x33d5ce50
 8014658:	33d691a0 	.word	0x33d691a0
 801465c:	33db2580 	.word	0x33db2580

08014660 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014660:	b590      	push	{r4, r7, lr}
 8014662:	b08b      	sub	sp, #44	; 0x2c
 8014664:	af04      	add	r7, sp, #16
 8014666:	4603      	mov	r3, r0
 8014668:	460a      	mov	r2, r1
 801466a:	71fb      	strb	r3, [r7, #7]
 801466c:	4613      	mov	r3, r2
 801466e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8014670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014674:	4a1f      	ldr	r2, [pc, #124]	; (80146f4 <GetTimeOnAir+0x94>)
 8014676:	5cd3      	ldrb	r3, [r2, r3]
 8014678:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801467e:	491e      	ldr	r1, [pc, #120]	; (80146f8 <GetTimeOnAir+0x98>)
 8014680:	4618      	mov	r0, r3
 8014682:	f7ff ff0f 	bl	80144a4 <RegionCommonGetBandwidth>
 8014686:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014688:	2300      	movs	r3, #0
 801468a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801468c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014690:	2b07      	cmp	r3, #7
 8014692:	d118      	bne.n	80146c6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014694:	4b19      	ldr	r3, [pc, #100]	; (80146fc <GetTimeOnAir+0x9c>)
 8014696:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014698:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801469c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80146a0:	fb02 f303 	mul.w	r3, r2, r3
 80146a4:	4619      	mov	r1, r3
 80146a6:	88bb      	ldrh	r3, [r7, #4]
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	2201      	movs	r2, #1
 80146ac:	9203      	str	r2, [sp, #12]
 80146ae:	9302      	str	r3, [sp, #8]
 80146b0:	2300      	movs	r3, #0
 80146b2:	9301      	str	r3, [sp, #4]
 80146b4:	2305      	movs	r3, #5
 80146b6:	9300      	str	r3, [sp, #0]
 80146b8:	2300      	movs	r3, #0
 80146ba:	460a      	mov	r2, r1
 80146bc:	68f9      	ldr	r1, [r7, #12]
 80146be:	2000      	movs	r0, #0
 80146c0:	47a0      	blx	r4
 80146c2:	6178      	str	r0, [r7, #20]
 80146c4:	e011      	b.n	80146ea <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80146c6:	4b0d      	ldr	r3, [pc, #52]	; (80146fc <GetTimeOnAir+0x9c>)
 80146c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80146ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80146ce:	88bb      	ldrh	r3, [r7, #4]
 80146d0:	b2db      	uxtb	r3, r3
 80146d2:	2101      	movs	r1, #1
 80146d4:	9103      	str	r1, [sp, #12]
 80146d6:	9302      	str	r3, [sp, #8]
 80146d8:	2300      	movs	r3, #0
 80146da:	9301      	str	r3, [sp, #4]
 80146dc:	2308      	movs	r3, #8
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	2301      	movs	r3, #1
 80146e2:	68f9      	ldr	r1, [r7, #12]
 80146e4:	2001      	movs	r0, #1
 80146e6:	47a0      	blx	r4
 80146e8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80146ea:	697b      	ldr	r3, [r7, #20]
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	371c      	adds	r7, #28
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd90      	pop	{r4, r7, pc}
 80146f4:	0801b918 	.word	0x0801b918
 80146f8:	0801b920 	.word	0x0801b920
 80146fc:	0801b950 	.word	0x0801b950

08014700 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b088      	sub	sp, #32
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014708:	2300      	movs	r3, #0
 801470a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	3b01      	subs	r3, #1
 8014712:	2b38      	cmp	r3, #56	; 0x38
 8014714:	f200 8128 	bhi.w	8014968 <RegionEU868GetPhyParam+0x268>
 8014718:	a201      	add	r2, pc, #4	; (adr r2, 8014720 <RegionEU868GetPhyParam+0x20>)
 801471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801471e:	bf00      	nop
 8014720:	08014805 	.word	0x08014805
 8014724:	0801480b 	.word	0x0801480b
 8014728:	08014969 	.word	0x08014969
 801472c:	08014969 	.word	0x08014969
 8014730:	08014969 	.word	0x08014969
 8014734:	08014811 	.word	0x08014811
 8014738:	08014969 	.word	0x08014969
 801473c:	0801484b 	.word	0x0801484b
 8014740:	08014969 	.word	0x08014969
 8014744:	08014851 	.word	0x08014851
 8014748:	08014857 	.word	0x08014857
 801474c:	0801485d 	.word	0x0801485d
 8014750:	08014863 	.word	0x08014863
 8014754:	08014873 	.word	0x08014873
 8014758:	08014883 	.word	0x08014883
 801475c:	08014889 	.word	0x08014889
 8014760:	08014891 	.word	0x08014891
 8014764:	08014899 	.word	0x08014899
 8014768:	080148a1 	.word	0x080148a1
 801476c:	080148a9 	.word	0x080148a9
 8014770:	080148b1 	.word	0x080148b1
 8014774:	080148b9 	.word	0x080148b9
 8014778:	080148cd 	.word	0x080148cd
 801477c:	080148d3 	.word	0x080148d3
 8014780:	080148d9 	.word	0x080148d9
 8014784:	080148df 	.word	0x080148df
 8014788:	080148eb 	.word	0x080148eb
 801478c:	080148f7 	.word	0x080148f7
 8014790:	080148fd 	.word	0x080148fd
 8014794:	08014905 	.word	0x08014905
 8014798:	0801490b 	.word	0x0801490b
 801479c:	08014911 	.word	0x08014911
 80147a0:	08014919 	.word	0x08014919
 80147a4:	08014817 	.word	0x08014817
 80147a8:	08014969 	.word	0x08014969
 80147ac:	08014969 	.word	0x08014969
 80147b0:	08014969 	.word	0x08014969
 80147b4:	08014969 	.word	0x08014969
 80147b8:	08014969 	.word	0x08014969
 80147bc:	08014969 	.word	0x08014969
 80147c0:	08014969 	.word	0x08014969
 80147c4:	08014969 	.word	0x08014969
 80147c8:	08014969 	.word	0x08014969
 80147cc:	08014969 	.word	0x08014969
 80147d0:	08014969 	.word	0x08014969
 80147d4:	08014969 	.word	0x08014969
 80147d8:	08014969 	.word	0x08014969
 80147dc:	0801491f 	.word	0x0801491f
 80147e0:	08014925 	.word	0x08014925
 80147e4:	08014933 	.word	0x08014933
 80147e8:	08014969 	.word	0x08014969
 80147ec:	08014969 	.word	0x08014969
 80147f0:	08014939 	.word	0x08014939
 80147f4:	0801493f 	.word	0x0801493f
 80147f8:	08014969 	.word	0x08014969
 80147fc:	08014945 	.word	0x08014945
 8014800:	08014955 	.word	0x08014955
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8014804:	2300      	movs	r3, #0
 8014806:	61bb      	str	r3, [r7, #24]
            break;
 8014808:	e0af      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801480a:	2300      	movs	r3, #0
 801480c:	61bb      	str	r3, [r7, #24]
            break;
 801480e:	e0ac      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8014810:	2300      	movs	r3, #0
 8014812:	61bb      	str	r3, [r7, #24]
            break;
 8014814:	e0a9      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801481c:	733b      	strb	r3, [r7, #12]
 801481e:	2307      	movs	r3, #7
 8014820:	737b      	strb	r3, [r7, #13]
 8014822:	2300      	movs	r3, #0
 8014824:	73bb      	strb	r3, [r7, #14]
 8014826:	2310      	movs	r3, #16
 8014828:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801482a:	4b53      	ldr	r3, [pc, #332]	; (8014978 <RegionEU868GetPhyParam+0x278>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014832:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014834:	4b50      	ldr	r3, [pc, #320]	; (8014978 <RegionEU868GetPhyParam+0x278>)
 8014836:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014838:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801483a:	f107 030c 	add.w	r3, r7, #12
 801483e:	4618      	mov	r0, r3
 8014840:	f7ff fddd 	bl	80143fe <RegionCommonGetNextLowerTxDr>
 8014844:	4603      	mov	r3, r0
 8014846:	61bb      	str	r3, [r7, #24]
            break;
 8014848:	e08f      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801484a:	2300      	movs	r3, #0
 801484c:	61bb      	str	r3, [r7, #24]
            break;
 801484e:	e08c      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8014850:	2300      	movs	r3, #0
 8014852:	61bb      	str	r3, [r7, #24]
            break;
 8014854:	e089      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014856:	2340      	movs	r3, #64	; 0x40
 8014858:	61bb      	str	r3, [r7, #24]
            break;
 801485a:	e086      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801485c:	2320      	movs	r3, #32
 801485e:	61bb      	str	r3, [r7, #24]
            break;
 8014860:	e083      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014868:	461a      	mov	r2, r3
 801486a:	4b44      	ldr	r3, [pc, #272]	; (801497c <RegionEU868GetPhyParam+0x27c>)
 801486c:	5c9b      	ldrb	r3, [r3, r2]
 801486e:	61bb      	str	r3, [r7, #24]
            break;
 8014870:	e07b      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014878:	461a      	mov	r2, r3
 801487a:	4b41      	ldr	r3, [pc, #260]	; (8014980 <RegionEU868GetPhyParam+0x280>)
 801487c:	5c9b      	ldrb	r3, [r3, r2]
 801487e:	61bb      	str	r3, [r7, #24]
            break;
 8014880:	e073      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8014882:	2301      	movs	r3, #1
 8014884:	61bb      	str	r3, [r7, #24]
            break;
 8014886:	e070      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8014888:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801488c:	61bb      	str	r3, [r7, #24]
            break;
 801488e:	e06c      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014894:	61bb      	str	r3, [r7, #24]
            break;
 8014896:	e068      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014898:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801489c:	61bb      	str	r3, [r7, #24]
            break;
 801489e:	e064      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80148a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80148a4:	61bb      	str	r3, [r7, #24]
            break;
 80148a6:	e060      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80148a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80148ac:	61bb      	str	r3, [r7, #24]
            break;
 80148ae:	e05c      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80148b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80148b4:	61bb      	str	r3, [r7, #24]
            break;
 80148b6:	e058      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80148b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80148bc:	4831      	ldr	r0, [pc, #196]	; (8014984 <RegionEU868GetPhyParam+0x284>)
 80148be:	f001 f879 	bl	80159b4 <randr>
 80148c2:	4603      	mov	r3, r0
 80148c4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80148c8:	61bb      	str	r3, [r7, #24]
            break;
 80148ca:	e04e      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80148cc:	2300      	movs	r3, #0
 80148ce:	61bb      	str	r3, [r7, #24]
            break;
 80148d0:	e04b      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80148d2:	4b2d      	ldr	r3, [pc, #180]	; (8014988 <RegionEU868GetPhyParam+0x288>)
 80148d4:	61bb      	str	r3, [r7, #24]
            break;
 80148d6:	e048      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80148d8:	2300      	movs	r3, #0
 80148da:	61bb      	str	r3, [r7, #24]
            break;
 80148dc:	e045      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80148de:	4b26      	ldr	r3, [pc, #152]	; (8014978 <RegionEU868GetPhyParam+0x278>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80148e6:	61bb      	str	r3, [r7, #24]
            break;
 80148e8:	e03f      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80148ea:	4b23      	ldr	r3, [pc, #140]	; (8014978 <RegionEU868GetPhyParam+0x278>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80148f2:	61bb      	str	r3, [r7, #24]
            break;
 80148f4:	e039      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80148f6:	2310      	movs	r3, #16
 80148f8:	61bb      	str	r3, [r7, #24]
            break;
 80148fa:	e036      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80148fc:	4b1e      	ldr	r3, [pc, #120]	; (8014978 <RegionEU868GetPhyParam+0x278>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	61bb      	str	r3, [r7, #24]
            break;
 8014902:	e032      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8014904:	2300      	movs	r3, #0
 8014906:	61bb      	str	r3, [r7, #24]
            break;
 8014908:	e02f      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801490a:	2300      	movs	r3, #0
 801490c:	61bb      	str	r3, [r7, #24]
            break;
 801490e:	e02c      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8014910:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8014914:	61bb      	str	r3, [r7, #24]
            break;
 8014916:	e028      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8014918:	4b1c      	ldr	r3, [pc, #112]	; (801498c <RegionEU868GetPhyParam+0x28c>)
 801491a:	61bb      	str	r3, [r7, #24]
            break;
 801491c:	e025      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801491e:	4b1a      	ldr	r3, [pc, #104]	; (8014988 <RegionEU868GetPhyParam+0x288>)
 8014920:	61bb      	str	r3, [r7, #24]
            break;
 8014922:	e022      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8014924:	2311      	movs	r3, #17
 8014926:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8014928:	2302      	movs	r3, #2
 801492a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801492c:	2300      	movs	r3, #0
 801492e:	76bb      	strb	r3, [r7, #26]
            break;
 8014930:	e01b      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8014932:	2303      	movs	r3, #3
 8014934:	61bb      	str	r3, [r7, #24]
            break;
 8014936:	e018      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8014938:	4b13      	ldr	r3, [pc, #76]	; (8014988 <RegionEU868GetPhyParam+0x288>)
 801493a:	61bb      	str	r3, [r7, #24]
            break;
 801493c:	e015      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801493e:	2303      	movs	r3, #3
 8014940:	61bb      	str	r3, [r7, #24]
            break;
 8014942:	e012      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801494a:	461a      	mov	r2, r3
 801494c:	4b10      	ldr	r3, [pc, #64]	; (8014990 <RegionEU868GetPhyParam+0x290>)
 801494e:	5c9b      	ldrb	r3, [r3, r2]
 8014950:	61bb      	str	r3, [r7, #24]
            break;
 8014952:	e00a      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801495a:	490e      	ldr	r1, [pc, #56]	; (8014994 <RegionEU868GetPhyParam+0x294>)
 801495c:	4618      	mov	r0, r3
 801495e:	f7ff fda1 	bl	80144a4 <RegionCommonGetBandwidth>
 8014962:	4603      	mov	r3, r0
 8014964:	61bb      	str	r3, [r7, #24]
            break;
 8014966:	e000      	b.n	801496a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8014968:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	61fb      	str	r3, [r7, #28]
 801496e:	69fb      	ldr	r3, [r7, #28]
}
 8014970:	4618      	mov	r0, r3
 8014972:	3720      	adds	r7, #32
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	20001ae0 	.word	0x20001ae0
 801497c:	0801b940 	.word	0x0801b940
 8014980:	0801b948 	.word	0x0801b948
 8014984:	fffffc18 	.word	0xfffffc18
 8014988:	33d3e608 	.word	0x33d3e608
 801498c:	4009999a 	.word	0x4009999a
 8014990:	0801b918 	.word	0x0801b918
 8014994:	0801b920 	.word	0x0801b920

08014998 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014998:	b590      	push	{r4, r7, lr}
 801499a:	b085      	sub	sp, #20
 801499c:	af02      	add	r7, sp, #8
 801499e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80149a0:	4b11      	ldr	r3, [pc, #68]	; (80149e8 <RegionEU868SetBandTxDone+0x50>)
 80149a2:	681a      	ldr	r2, [r3, #0]
 80149a4:	4b11      	ldr	r3, [pc, #68]	; (80149ec <RegionEU868SetBandTxDone+0x54>)
 80149a6:	6819      	ldr	r1, [r3, #0]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	4618      	mov	r0, r3
 80149ae:	4603      	mov	r3, r0
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	4403      	add	r3, r0
 80149b4:	009b      	lsls	r3, r3, #2
 80149b6:	440b      	add	r3, r1
 80149b8:	3309      	adds	r3, #9
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	4619      	mov	r1, r3
 80149be:	460b      	mov	r3, r1
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	440b      	add	r3, r1
 80149c4:	00db      	lsls	r3, r3, #3
 80149c6:	18d0      	adds	r0, r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	6899      	ldr	r1, [r3, #8]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	785c      	ldrb	r4, [r3, #1]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	691a      	ldr	r2, [r3, #16]
 80149d4:	9200      	str	r2, [sp, #0]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	4622      	mov	r2, r4
 80149da:	f7ff f8e9 	bl	8013bb0 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80149de:	bf00      	nop
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd90      	pop	{r4, r7, pc}
 80149e6:	bf00      	nop
 80149e8:	20001adc 	.word	0x20001adc
 80149ec:	20001ae0 	.word	0x20001ae0

080149f0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b0b0      	sub	sp, #192	; 0xc0
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80149f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80149fc:	2290      	movs	r2, #144	; 0x90
 80149fe:	2100      	movs	r1, #0
 8014a00:	4618      	mov	r0, r3
 8014a02:	f005 fddf 	bl	801a5c4 <memset>
 8014a06:	2364      	movs	r3, #100	; 0x64
 8014a08:	863b      	strh	r3, [r7, #48]	; 0x30
 8014a0a:	2364      	movs	r3, #100	; 0x64
 8014a0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8014a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a14:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8014a18:	230a      	movs	r3, #10
 8014a1a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8014a1e:	2364      	movs	r3, #100	; 0x64
 8014a20:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8014a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a28:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	7a1b      	ldrb	r3, [r3, #8]
 8014a30:	2b02      	cmp	r3, #2
 8014a32:	d05e      	beq.n	8014af2 <RegionEU868InitDefaults+0x102>
 8014a34:	2b02      	cmp	r3, #2
 8014a36:	dc6b      	bgt.n	8014b10 <RegionEU868InitDefaults+0x120>
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <RegionEU868InitDefaults+0x52>
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d03f      	beq.n	8014ac0 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8014a40:	e066      	b.n	8014b10 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d063      	beq.n	8014b12 <RegionEU868InitDefaults+0x122>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d05f      	beq.n	8014b12 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	4a30      	ldr	r2, [pc, #192]	; (8014b18 <RegionEU868InitDefaults+0x128>)
 8014a58:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	4a2f      	ldr	r2, [pc, #188]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014a60:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8014a62:	4b2d      	ldr	r3, [pc, #180]	; (8014b18 <RegionEU868InitDefaults+0x128>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	4618      	mov	r0, r3
 8014a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014a6c:	2290      	movs	r2, #144	; 0x90
 8014a6e:	4619      	mov	r1, r3
 8014a70:	f000 ffb7 	bl	80159e2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8014a74:	4b29      	ldr	r3, [pc, #164]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	4a29      	ldr	r2, [pc, #164]	; (8014b20 <RegionEU868InitDefaults+0x130>)
 8014a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8014a80:	4b26      	ldr	r3, [pc, #152]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	4a27      	ldr	r2, [pc, #156]	; (8014b24 <RegionEU868InitDefaults+0x134>)
 8014a86:	330c      	adds	r3, #12
 8014a88:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8014a8e:	4b23      	ldr	r3, [pc, #140]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	4a25      	ldr	r2, [pc, #148]	; (8014b28 <RegionEU868InitDefaults+0x138>)
 8014a94:	3318      	adds	r3, #24
 8014a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8014a9c:	4b1f      	ldr	r3, [pc, #124]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2207      	movs	r2, #7
 8014aa2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014aa6:	4b1d      	ldr	r3, [pc, #116]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8014aae:	4b1b      	ldr	r3, [pc, #108]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8014ab6:	2201      	movs	r2, #1
 8014ab8:	4619      	mov	r1, r3
 8014aba:	f7ff f853 	bl	8013b64 <RegionCommonChanMaskCopy>
 8014abe:	e028      	b.n	8014b12 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014ac0:	4b16      	ldr	r3, [pc, #88]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014ac8:	4b14      	ldr	r3, [pc, #80]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2200      	movs	r2, #0
 8014ace:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8014ad0:	4b12      	ldr	r3, [pc, #72]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014ad8:	4b10      	ldr	r3, [pc, #64]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8014ae0:	4b0e      	ldr	r3, [pc, #56]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8014ae8:	2201      	movs	r2, #1
 8014aea:	4619      	mov	r1, r3
 8014aec:	f7ff f83a 	bl	8013b64 <RegionCommonChanMaskCopy>
            break;
 8014af0:	e00f      	b.n	8014b12 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014af2:	4b0a      	ldr	r3, [pc, #40]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8014afa:	4b08      	ldr	r3, [pc, #32]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8014b02:	4b06      	ldr	r3, [pc, #24]	; (8014b1c <RegionEU868InitDefaults+0x12c>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	430a      	orrs	r2, r1
 8014b08:	b292      	uxth	r2, r2
 8014b0a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8014b0e:	e000      	b.n	8014b12 <RegionEU868InitDefaults+0x122>
            break;
 8014b10:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014b12:	37c0      	adds	r7, #192	; 0xc0
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	20001adc 	.word	0x20001adc
 8014b1c:	20001ae0 	.word	0x20001ae0
 8014b20:	0801b3cc 	.word	0x0801b3cc
 8014b24:	0801b3d8 	.word	0x0801b3d8
 8014b28:	0801b3e4 	.word	0x0801b3e4

08014b2c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	460b      	mov	r3, r1
 8014b36:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8014b38:	78fb      	ldrb	r3, [r7, #3]
 8014b3a:	2b0f      	cmp	r3, #15
 8014b3c:	d86c      	bhi.n	8014c18 <RegionEU868Verify+0xec>
 8014b3e:	a201      	add	r2, pc, #4	; (adr r2, 8014b44 <RegionEU868Verify+0x18>)
 8014b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b44:	08014b85 	.word	0x08014b85
 8014b48:	08014c19 	.word	0x08014c19
 8014b4c:	08014c19 	.word	0x08014c19
 8014b50:	08014c19 	.word	0x08014c19
 8014b54:	08014c19 	.word	0x08014c19
 8014b58:	08014b9d 	.word	0x08014b9d
 8014b5c:	08014bbb 	.word	0x08014bbb
 8014b60:	08014bd9 	.word	0x08014bd9
 8014b64:	08014c19 	.word	0x08014c19
 8014b68:	08014bf7 	.word	0x08014bf7
 8014b6c:	08014bf7 	.word	0x08014bf7
 8014b70:	08014c19 	.word	0x08014c19
 8014b74:	08014c19 	.word	0x08014c19
 8014b78:	08014c19 	.word	0x08014c19
 8014b7c:	08014c19 	.word	0x08014c19
 8014b80:	08014c15 	.word	0x08014c15
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8014b84:	2300      	movs	r3, #0
 8014b86:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	f107 020f 	add.w	r2, r7, #15
 8014b90:	4611      	mov	r1, r2
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7ff fcee 	bl	8014574 <VerifyRfFreq>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	e03e      	b.n	8014c1a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8014ba2:	2207      	movs	r2, #7
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fe ff5f 	bl	8013a6a <RegionCommonValueInRange>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	bf14      	ite	ne
 8014bb2:	2301      	movne	r3, #1
 8014bb4:	2300      	moveq	r3, #0
 8014bb6:	b2db      	uxtb	r3, r3
 8014bb8:	e02f      	b.n	8014c1a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8014bc0:	2205      	movs	r2, #5
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fe ff50 	bl	8013a6a <RegionCommonValueInRange>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	bf14      	ite	ne
 8014bd0:	2301      	movne	r3, #1
 8014bd2:	2300      	moveq	r3, #0
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	e020      	b.n	8014c1a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f993 3000 	ldrsb.w	r3, [r3]
 8014bde:	2207      	movs	r2, #7
 8014be0:	2100      	movs	r1, #0
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fe ff41 	bl	8013a6a <RegionCommonValueInRange>
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	bf14      	ite	ne
 8014bee:	2301      	movne	r3, #1
 8014bf0:	2300      	moveq	r3, #0
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	e011      	b.n	8014c1a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8014bfc:	2207      	movs	r2, #7
 8014bfe:	2100      	movs	r1, #0
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7fe ff32 	bl	8013a6a <RegionCommonValueInRange>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	bf14      	ite	ne
 8014c0c:	2301      	movne	r3, #1
 8014c0e:	2300      	moveq	r3, #0
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	e002      	b.n	8014c1a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8014c14:	2301      	movs	r3, #1
 8014c16:	e000      	b.n	8014c1a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8014c18:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop

08014c24 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b08a      	sub	sp, #40	; 0x28
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014c2c:	2350      	movs	r3, #80	; 0x50
 8014c2e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	791b      	ldrb	r3, [r3, #4]
 8014c36:	2b10      	cmp	r3, #16
 8014c38:	d162      	bne.n	8014d00 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	330f      	adds	r3, #15
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d15e      	bne.n	8014d04 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014c46:	2300      	movs	r3, #0
 8014c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c4c:	2303      	movs	r3, #3
 8014c4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014c52:	e050      	b.n	8014cf6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8014c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c58:	2b07      	cmp	r3, #7
 8014c5a:	d824      	bhi.n	8014ca6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c64:	4413      	add	r3, r2
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014c6a:	69ba      	ldr	r2, [r7, #24]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6819      	ldr	r1, [r3, #0]
 8014c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c74:	3301      	adds	r3, #1
 8014c76:	440b      	add	r3, r1
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	021b      	lsls	r3, r3, #8
 8014c7c:	4313      	orrs	r3, r2
 8014c7e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014c80:	69ba      	ldr	r2, [r7, #24]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	6819      	ldr	r1, [r3, #0]
 8014c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c8a:	3302      	adds	r3, #2
 8014c8c:	440b      	add	r3, r1
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	041b      	lsls	r3, r3, #16
 8014c92:	4313      	orrs	r3, r2
 8014c94:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	2264      	movs	r2, #100	; 0x64
 8014c9a:	fb02 f303 	mul.w	r3, r2, r3
 8014c9e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	61fb      	str	r3, [r7, #28]
 8014ca4:	e006      	b.n	8014cb4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014caa:	2300      	movs	r3, #0
 8014cac:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014cb4:	69bb      	ldr	r3, [r7, #24]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00b      	beq.n	8014cd2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014cba:	f107 0318 	add.w	r3, r7, #24
 8014cbe:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cc4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014cc6:	f107 0310 	add.w	r3, r7, #16
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f000 fd0e 	bl	80156ec <RegionEU868ChannelAdd>
 8014cd0:	e007      	b.n	8014ce2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cd6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8014cd8:	f107 030c 	add.w	r3, r7, #12
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f000 fda7 	bl	8015830 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ce6:	3303      	adds	r3, #3
 8014ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cfa:	2b0f      	cmp	r3, #15
 8014cfc:	d9aa      	bls.n	8014c54 <RegionEU868ApplyCFList+0x30>
 8014cfe:	e002      	b.n	8014d06 <RegionEU868ApplyCFList+0xe2>
        return;
 8014d00:	bf00      	nop
 8014d02:	e000      	b.n	8014d06 <RegionEU868ApplyCFList+0xe2>
        return;
 8014d04:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014d06:	3728      	adds	r7, #40	; 0x28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	791b      	ldrb	r3, [r3, #4]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d002      	beq.n	8014d22 <RegionEU868ChanMaskSet+0x16>
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d00b      	beq.n	8014d38 <RegionEU868ChanMaskSet+0x2c>
 8014d20:	e015      	b.n	8014d4e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014d22:	4b0e      	ldr	r3, [pc, #56]	; (8014d5c <RegionEU868ChanMaskSet+0x50>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2201      	movs	r2, #1
 8014d30:	4619      	mov	r1, r3
 8014d32:	f7fe ff17 	bl	8013b64 <RegionCommonChanMaskCopy>
            break;
 8014d36:	e00c      	b.n	8014d52 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014d38:	4b08      	ldr	r3, [pc, #32]	; (8014d5c <RegionEU868ChanMaskSet+0x50>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2201      	movs	r2, #1
 8014d46:	4619      	mov	r1, r3
 8014d48:	f7fe ff0c 	bl	8013b64 <RegionCommonChanMaskCopy>
            break;
 8014d4c:	e001      	b.n	8014d52 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	e000      	b.n	8014d54 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8014d52:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}
 8014d5c:	20001ae0 	.word	0x20001ae0

08014d60 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b088      	sub	sp, #32
 8014d64:	af02      	add	r7, sp, #8
 8014d66:	60ba      	str	r2, [r7, #8]
 8014d68:	607b      	str	r3, [r7, #4]
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	73fb      	strb	r3, [r7, #15]
 8014d6e:	460b      	mov	r3, r1
 8014d70:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8014d72:	2300      	movs	r3, #0
 8014d74:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8014d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d7a:	2b07      	cmp	r3, #7
 8014d7c:	bfa8      	it	ge
 8014d7e:	2307      	movge	r3, #7
 8014d80:	b25a      	sxtb	r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d8c:	491e      	ldr	r1, [pc, #120]	; (8014e08 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7ff fb88 	bl	80144a4 <RegionCommonGetBandwidth>
 8014d94:	4603      	mov	r3, r0
 8014d96:	b2da      	uxtb	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014da2:	2b07      	cmp	r3, #7
 8014da4:	d10a      	bne.n	8014dbc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014dac:	461a      	mov	r2, r3
 8014dae:	4b17      	ldr	r3, [pc, #92]	; (8014e0c <RegionEU868ComputeRxWindowParameters+0xac>)
 8014db0:	5c9b      	ldrb	r3, [r3, r2]
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7ff f90a 	bl	8013fcc <RegionCommonComputeSymbolTimeFsk>
 8014db8:	6178      	str	r0, [r7, #20]
 8014dba:	e011      	b.n	8014de0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	4b11      	ldr	r3, [pc, #68]	; (8014e0c <RegionEU868ComputeRxWindowParameters+0xac>)
 8014dc6:	5c9a      	ldrb	r2, [r3, r2]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014dce:	4619      	mov	r1, r3
 8014dd0:	4b0d      	ldr	r3, [pc, #52]	; (8014e08 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8014dd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	4610      	mov	r0, r2
 8014dda:	f7ff f8e1 	bl	8013fa0 <RegionCommonComputeSymbolTimeLoRa>
 8014dde:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014de0:	4b0b      	ldr	r3, [pc, #44]	; (8014e10 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8014de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014de4:	4798      	blx	r3
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	3308      	adds	r3, #8
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	320c      	adds	r2, #12
 8014dee:	7bb9      	ldrb	r1, [r7, #14]
 8014df0:	9201      	str	r2, [sp, #4]
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	4603      	mov	r3, r0
 8014df6:	68ba      	ldr	r2, [r7, #8]
 8014df8:	6978      	ldr	r0, [r7, #20]
 8014dfa:	f7ff f8f7 	bl	8013fec <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8014dfe:	bf00      	nop
 8014e00:	3718      	adds	r7, #24
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	0801b920 	.word	0x0801b920
 8014e0c:	0801b918 	.word	0x0801b918
 8014e10:	0801b950 	.word	0x0801b950

08014e14 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014e14:	b5b0      	push	{r4, r5, r7, lr}
 8014e16:	b090      	sub	sp, #64	; 0x40
 8014e18:	af0a      	add	r7, sp, #40	; 0x28
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	785b      	ldrb	r3, [r3, #1]
 8014e22:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014e24:	2300      	movs	r3, #0
 8014e26:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014e32:	4b5a      	ldr	r3, [pc, #360]	; (8014f9c <RegionEU868RxConfig+0x188>)
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	4798      	blx	r3
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d001      	beq.n	8014e42 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	e0a8      	b.n	8014f94 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	7cdb      	ldrb	r3, [r3, #19]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d126      	bne.n	8014e98 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014e4a:	4b55      	ldr	r3, [pc, #340]	; (8014fa0 <RegionEU868RxConfig+0x18c>)
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	4619      	mov	r1, r3
 8014e54:	460b      	mov	r3, r1
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	440b      	add	r3, r1
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4413      	add	r3, r2
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014e62:	4b4f      	ldr	r3, [pc, #316]	; (8014fa0 <RegionEU868RxConfig+0x18c>)
 8014e64:	681a      	ldr	r2, [r3, #0]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	440b      	add	r3, r1
 8014e72:	009b      	lsls	r3, r3, #2
 8014e74:	4413      	add	r3, r2
 8014e76:	3304      	adds	r3, #4
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d00c      	beq.n	8014e98 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014e7e:	4b48      	ldr	r3, [pc, #288]	; (8014fa0 <RegionEU868RxConfig+0x18c>)
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	4619      	mov	r1, r3
 8014e88:	460b      	mov	r3, r1
 8014e8a:	005b      	lsls	r3, r3, #1
 8014e8c:	440b      	add	r3, r1
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4413      	add	r3, r2
 8014e92:	3304      	adds	r3, #4
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e9c:	4a41      	ldr	r2, [pc, #260]	; (8014fa4 <RegionEU868RxConfig+0x190>)
 8014e9e:	5cd3      	ldrb	r3, [r2, r3]
 8014ea0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014ea2:	4b3e      	ldr	r3, [pc, #248]	; (8014f9c <RegionEU868RxConfig+0x188>)
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	6938      	ldr	r0, [r7, #16]
 8014ea8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014eae:	2b07      	cmp	r3, #7
 8014eb0:	d128      	bne.n	8014f04 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014eb6:	4b39      	ldr	r3, [pc, #228]	; (8014f9c <RegionEU868RxConfig+0x188>)
 8014eb8:	699c      	ldr	r4, [r3, #24]
 8014eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ec2:	fb02 f303 	mul.w	r3, r2, r3
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	b29b      	uxth	r3, r3
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	7c92      	ldrb	r2, [r2, #18]
 8014ed2:	7df8      	ldrb	r0, [r7, #23]
 8014ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	9208      	str	r2, [sp, #32]
 8014eda:	2200      	movs	r2, #0
 8014edc:	9207      	str	r2, [sp, #28]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	9206      	str	r2, [sp, #24]
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	9205      	str	r2, [sp, #20]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	9204      	str	r2, [sp, #16]
 8014eea:	2200      	movs	r2, #0
 8014eec:	9203      	str	r2, [sp, #12]
 8014eee:	9302      	str	r3, [sp, #8]
 8014ef0:	2305      	movs	r3, #5
 8014ef2:	9301      	str	r3, [sp, #4]
 8014ef4:	4b2c      	ldr	r3, [pc, #176]	; (8014fa8 <RegionEU868RxConfig+0x194>)
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	2300      	movs	r3, #0
 8014efa:	460a      	mov	r2, r1
 8014efc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014f00:	47a0      	blx	r4
 8014f02:	e024      	b.n	8014f4e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8014f04:	2301      	movs	r3, #1
 8014f06:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014f08:	4b24      	ldr	r3, [pc, #144]	; (8014f9c <RegionEU868RxConfig+0x188>)
 8014f0a:	699c      	ldr	r4, [r3, #24]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	789b      	ldrb	r3, [r3, #2]
 8014f10:	461d      	mov	r5, r3
 8014f12:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	689b      	ldr	r3, [r3, #8]
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	7c92      	ldrb	r2, [r2, #18]
 8014f20:	7df8      	ldrb	r0, [r7, #23]
 8014f22:	9209      	str	r2, [sp, #36]	; 0x24
 8014f24:	2201      	movs	r2, #1
 8014f26:	9208      	str	r2, [sp, #32]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	9207      	str	r2, [sp, #28]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	9206      	str	r2, [sp, #24]
 8014f30:	2200      	movs	r2, #0
 8014f32:	9205      	str	r2, [sp, #20]
 8014f34:	2200      	movs	r2, #0
 8014f36:	9204      	str	r2, [sp, #16]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	9203      	str	r2, [sp, #12]
 8014f3c:	9302      	str	r3, [sp, #8]
 8014f3e:	2308      	movs	r3, #8
 8014f40:	9301      	str	r3, [sp, #4]
 8014f42:	2300      	movs	r3, #0
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	2301      	movs	r3, #1
 8014f48:	460a      	mov	r2, r1
 8014f4a:	4629      	mov	r1, r5
 8014f4c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	7c5b      	ldrb	r3, [r3, #17]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d005      	beq.n	8014f62 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8014f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f5a:	4a14      	ldr	r2, [pc, #80]	; (8014fac <RegionEU868RxConfig+0x198>)
 8014f5c:	5cd3      	ldrb	r3, [r2, r3]
 8014f5e:	75bb      	strb	r3, [r7, #22]
 8014f60:	e004      	b.n	8014f6c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8014f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f66:	4a12      	ldr	r2, [pc, #72]	; (8014fb0 <RegionEU868RxConfig+0x19c>)
 8014f68:	5cd3      	ldrb	r3, [r2, r3]
 8014f6a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014f6c:	4b0b      	ldr	r3, [pc, #44]	; (8014f9c <RegionEU868RxConfig+0x188>)
 8014f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f70:	7dba      	ldrb	r2, [r7, #22]
 8014f72:	320d      	adds	r2, #13
 8014f74:	b2d1      	uxtb	r1, r2
 8014f76:	7dfa      	ldrb	r2, [r7, #23]
 8014f78:	4610      	mov	r0, r2
 8014f7a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	7cdb      	ldrb	r3, [r3, #19]
 8014f80:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014f84:	6939      	ldr	r1, [r7, #16]
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7ff faaa 	bl	80144e0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	7bfa      	ldrb	r2, [r7, #15]
 8014f90:	701a      	strb	r2, [r3, #0]
    return true;
 8014f92:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3718      	adds	r7, #24
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8014f9c:	0801b950 	.word	0x0801b950
 8014fa0:	20001ae0 	.word	0x20001ae0
 8014fa4:	0801b918 	.word	0x0801b918
 8014fa8:	00014585 	.word	0x00014585
 8014fac:	0801b948 	.word	0x0801b948
 8014fb0:	0801b940 	.word	0x0801b940

08014fb4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014fb4:	b590      	push	{r4, r7, lr}
 8014fb6:	b093      	sub	sp, #76	; 0x4c
 8014fb8:	af0a      	add	r7, sp, #40	; 0x28
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	4b5d      	ldr	r3, [pc, #372]	; (8015140 <RegionEU868TxConfig+0x18c>)
 8014fca:	5c9b      	ldrb	r3, [r3, r2]
 8014fcc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014fd4:	4b5b      	ldr	r3, [pc, #364]	; (8015144 <RegionEU868TxConfig+0x190>)
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	4b5b      	ldr	r3, [pc, #364]	; (8015148 <RegionEU868TxConfig+0x194>)
 8014fda:	6819      	ldr	r1, [r3, #0]
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	461c      	mov	r4, r3
 8014fe2:	4623      	mov	r3, r4
 8014fe4:	005b      	lsls	r3, r3, #1
 8014fe6:	4423      	add	r3, r4
 8014fe8:	009b      	lsls	r3, r3, #2
 8014fea:	440b      	add	r3, r1
 8014fec:	3309      	adds	r3, #9
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	4619      	mov	r1, r3
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	005b      	lsls	r3, r3, #1
 8014ff6:	440b      	add	r3, r1
 8014ff8:	00db      	lsls	r3, r3, #3
 8014ffa:	4413      	add	r3, r2
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8015002:	4619      	mov	r1, r3
 8015004:	f7ff fa39 	bl	801447a <RegionCommonLimitTxPower>
 8015008:	4603      	mov	r3, r0
 801500a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015012:	494e      	ldr	r1, [pc, #312]	; (801514c <RegionEU868TxConfig+0x198>)
 8015014:	4618      	mov	r0, r3
 8015016:	f7ff fa45 	bl	80144a4 <RegionCommonGetBandwidth>
 801501a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801501c:	2300      	movs	r3, #0
 801501e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	6859      	ldr	r1, [r3, #4]
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	689a      	ldr	r2, [r3, #8]
 8015028:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801502c:	4618      	mov	r0, r3
 801502e:	f7ff f895 	bl	801415c <RegionCommonComputeTxPower>
 8015032:	4603      	mov	r3, r0
 8015034:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015036:	4b46      	ldr	r3, [pc, #280]	; (8015150 <RegionEU868TxConfig+0x19c>)
 8015038:	68da      	ldr	r2, [r3, #12]
 801503a:	4b43      	ldr	r3, [pc, #268]	; (8015148 <RegionEU868TxConfig+0x194>)
 801503c:	6819      	ldr	r1, [r3, #0]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	4618      	mov	r0, r3
 8015044:	4603      	mov	r3, r0
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	4403      	add	r3, r0
 801504a:	009b      	lsls	r3, r3, #2
 801504c:	440b      	add	r3, r1
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	4618      	mov	r0, r3
 8015052:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801505a:	2b07      	cmp	r3, #7
 801505c:	d124      	bne.n	80150a8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801505e:	2300      	movs	r3, #0
 8015060:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015062:	4b3b      	ldr	r3, [pc, #236]	; (8015150 <RegionEU868TxConfig+0x19c>)
 8015064:	69dc      	ldr	r4, [r3, #28]
 8015066:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801506a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801506e:	fb02 f303 	mul.w	r3, r2, r3
 8015072:	461a      	mov	r2, r3
 8015074:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015078:	7ff8      	ldrb	r0, [r7, #31]
 801507a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801507e:	9308      	str	r3, [sp, #32]
 8015080:	2300      	movs	r3, #0
 8015082:	9307      	str	r3, [sp, #28]
 8015084:	2300      	movs	r3, #0
 8015086:	9306      	str	r3, [sp, #24]
 8015088:	2300      	movs	r3, #0
 801508a:	9305      	str	r3, [sp, #20]
 801508c:	2301      	movs	r3, #1
 801508e:	9304      	str	r3, [sp, #16]
 8015090:	2300      	movs	r3, #0
 8015092:	9303      	str	r3, [sp, #12]
 8015094:	2305      	movs	r3, #5
 8015096:	9302      	str	r3, [sp, #8]
 8015098:	2300      	movs	r3, #0
 801509a:	9301      	str	r3, [sp, #4]
 801509c:	9200      	str	r2, [sp, #0]
 801509e:	69bb      	ldr	r3, [r7, #24]
 80150a0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80150a4:	47a0      	blx	r4
 80150a6:	e01d      	b.n	80150e4 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80150a8:	2301      	movs	r3, #1
 80150aa:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80150ac:	4b28      	ldr	r3, [pc, #160]	; (8015150 <RegionEU868TxConfig+0x19c>)
 80150ae:	69dc      	ldr	r4, [r3, #28]
 80150b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80150b4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80150b8:	7ff8      	ldrb	r0, [r7, #31]
 80150ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80150be:	9208      	str	r2, [sp, #32]
 80150c0:	2200      	movs	r2, #0
 80150c2:	9207      	str	r2, [sp, #28]
 80150c4:	2200      	movs	r2, #0
 80150c6:	9206      	str	r2, [sp, #24]
 80150c8:	2200      	movs	r2, #0
 80150ca:	9205      	str	r2, [sp, #20]
 80150cc:	2201      	movs	r2, #1
 80150ce:	9204      	str	r2, [sp, #16]
 80150d0:	2200      	movs	r2, #0
 80150d2:	9203      	str	r2, [sp, #12]
 80150d4:	2208      	movs	r2, #8
 80150d6:	9202      	str	r2, [sp, #8]
 80150d8:	2201      	movs	r2, #1
 80150da:	9201      	str	r2, [sp, #4]
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	69bb      	ldr	r3, [r7, #24]
 80150e0:	2200      	movs	r2, #0
 80150e2:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80150e4:	4b18      	ldr	r3, [pc, #96]	; (8015148 <RegionEU868TxConfig+0x194>)
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	4619      	mov	r1, r3
 80150ee:	460b      	mov	r3, r1
 80150f0:	005b      	lsls	r3, r3, #1
 80150f2:	440b      	add	r3, r1
 80150f4:	009b      	lsls	r3, r3, #2
 80150f6:	4413      	add	r3, r2
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015100:	4619      	mov	r1, r3
 8015102:	4610      	mov	r0, r2
 8015104:	f7ff fa1e 	bl	8014544 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	899b      	ldrh	r3, [r3, #12]
 8015112:	4619      	mov	r1, r3
 8015114:	4610      	mov	r0, r2
 8015116:	f7ff faa3 	bl	8014660 <GetTimeOnAir>
 801511a:	4602      	mov	r2, r0
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015120:	4b0b      	ldr	r3, [pc, #44]	; (8015150 <RegionEU868TxConfig+0x19c>)
 8015122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	8992      	ldrh	r2, [r2, #12]
 8015128:	b2d1      	uxtb	r1, r2
 801512a:	7ffa      	ldrb	r2, [r7, #31]
 801512c:	4610      	mov	r0, r2
 801512e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	7f7a      	ldrb	r2, [r7, #29]
 8015134:	701a      	strb	r2, [r3, #0]
    return true;
 8015136:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015138:	4618      	mov	r0, r3
 801513a:	3724      	adds	r7, #36	; 0x24
 801513c:	46bd      	mov	sp, r7
 801513e:	bd90      	pop	{r4, r7, pc}
 8015140:	0801b918 	.word	0x0801b918
 8015144:	20001adc 	.word	0x20001adc
 8015148:	20001ae0 	.word	0x20001ae0
 801514c:	0801b920 	.word	0x0801b920
 8015150:	0801b950 	.word	0x0801b950

08015154 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015154:	b590      	push	{r4, r7, lr}
 8015156:	b093      	sub	sp, #76	; 0x4c
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
 8015160:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015162:	2307      	movs	r3, #7
 8015164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015168:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801516c:	2200      	movs	r2, #0
 801516e:	601a      	str	r2, [r3, #0]
 8015170:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015172:	2300      	movs	r3, #0
 8015174:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015178:	2300      	movs	r3, #0
 801517a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801517e:	2300      	movs	r3, #0
 8015180:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015182:	e085      	b.n	8015290 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	685a      	ldr	r2, [r3, #4]
 8015188:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801518c:	4413      	add	r3, r2
 801518e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015192:	4611      	mov	r1, r2
 8015194:	4618      	mov	r0, r3
 8015196:	f7fe fe29 	bl	8013dec <RegionCommonParseLinkAdrReq>
 801519a:	4603      	mov	r3, r0
 801519c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80151a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d07b      	beq.n	80152a0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80151a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80151ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80151b0:	4413      	add	r3, r2
 80151b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80151b6:	2307      	movs	r3, #7
 80151b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80151bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80151c0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80151c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d109      	bne.n	80151de <RegionEU868LinkAdrReq+0x8a>
 80151ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d106      	bne.n	80151de <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80151d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151d4:	f023 0301 	bic.w	r3, r3, #1
 80151d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80151dc:	e058      	b.n	8015290 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80151de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d003      	beq.n	80151ee <RegionEU868LinkAdrReq+0x9a>
 80151e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80151ea:	2b05      	cmp	r3, #5
 80151ec:	d903      	bls.n	80151f6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80151ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80151f2:	2b06      	cmp	r3, #6
 80151f4:	d906      	bls.n	8015204 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80151f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151fa:	f023 0301 	bic.w	r3, r3, #1
 80151fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015202:	e045      	b.n	8015290 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015204:	2300      	movs	r3, #0
 8015206:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801520a:	e03d      	b.n	8015288 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801520c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015210:	2b06      	cmp	r3, #6
 8015212:	d118      	bne.n	8015246 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015214:	4b5f      	ldr	r3, [pc, #380]	; (8015394 <RegionEU868LinkAdrReq+0x240>)
 8015216:	6819      	ldr	r1, [r3, #0]
 8015218:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801521c:	4613      	mov	r3, r2
 801521e:	005b      	lsls	r3, r3, #1
 8015220:	4413      	add	r3, r2
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	440b      	add	r3, r1
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d028      	beq.n	801527e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801522c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015230:	2201      	movs	r2, #1
 8015232:	fa02 f303 	lsl.w	r3, r2, r3
 8015236:	b21a      	sxth	r2, r3
 8015238:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801523a:	b21b      	sxth	r3, r3
 801523c:	4313      	orrs	r3, r2
 801523e:	b21b      	sxth	r3, r3
 8015240:	b29b      	uxth	r3, r3
 8015242:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015244:	e01b      	b.n	801527e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015246:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015248:	461a      	mov	r2, r3
 801524a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801524e:	fa42 f303 	asr.w	r3, r2, r3
 8015252:	f003 0301 	and.w	r3, r3, #1
 8015256:	2b00      	cmp	r3, #0
 8015258:	d011      	beq.n	801527e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801525a:	4b4e      	ldr	r3, [pc, #312]	; (8015394 <RegionEU868LinkAdrReq+0x240>)
 801525c:	6819      	ldr	r1, [r3, #0]
 801525e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015262:	4613      	mov	r3, r2
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	4413      	add	r3, r2
 8015268:	009b      	lsls	r3, r3, #2
 801526a:	440b      	add	r3, r1
 801526c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801526e:	2b00      	cmp	r3, #0
 8015270:	d105      	bne.n	801527e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015272:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015276:	f023 0301 	bic.w	r3, r3, #1
 801527a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801527e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015282:	3301      	adds	r3, #1
 8015284:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015288:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801528c:	2b0f      	cmp	r3, #15
 801528e:	d9bd      	bls.n	801520c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	7a1b      	ldrb	r3, [r3, #8]
 8015294:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015298:	429a      	cmp	r2, r3
 801529a:	f4ff af73 	bcc.w	8015184 <RegionEU868LinkAdrReq+0x30>
 801529e:	e000      	b.n	80152a2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80152a0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80152a2:	2302      	movs	r3, #2
 80152a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	7a5b      	ldrb	r3, [r3, #9]
 80152ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80152b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7ff fa23 	bl	8014700 <RegionEU868GetPhyParam>
 80152ba:	4603      	mov	r3, r0
 80152bc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80152be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80152c2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	7a9b      	ldrb	r3, [r3, #10]
 80152c8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80152ca:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80152ce:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80152d0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80152d4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80152d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80152da:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80152e2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152ea:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	7b5b      	ldrb	r3, [r3, #13]
 80152f0:	b25b      	sxtb	r3, r3
 80152f2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80152f4:	2310      	movs	r3, #16
 80152f6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80152f8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80152fc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80152fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015300:	b25b      	sxtb	r3, r3
 8015302:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015306:	2307      	movs	r3, #7
 8015308:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801530c:	4b21      	ldr	r3, [pc, #132]	; (8015394 <RegionEU868LinkAdrReq+0x240>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015312:	2307      	movs	r3, #7
 8015314:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015318:	2300      	movs	r3, #0
 801531a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015324:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015328:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801532c:	1c9a      	adds	r2, r3, #2
 801532e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015332:	1c59      	adds	r1, r3, #1
 8015334:	f107 0010 	add.w	r0, r7, #16
 8015338:	4623      	mov	r3, r4
 801533a:	f7fe fda8 	bl	8013e8e <RegionCommonLinkAdrReqVerifyParams>
 801533e:	4603      	mov	r3, r0
 8015340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015348:	2b07      	cmp	r3, #7
 801534a:	d10d      	bne.n	8015368 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801534c:	4b11      	ldr	r3, [pc, #68]	; (8015394 <RegionEU868LinkAdrReq+0x240>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015354:	220c      	movs	r2, #12
 8015356:	2100      	movs	r1, #0
 8015358:	4618      	mov	r0, r3
 801535a:	f000 fb7d 	bl	8015a58 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801535e:	4b0d      	ldr	r3, [pc, #52]	; (8015394 <RegionEU868LinkAdrReq+0x240>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015364:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015368:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015370:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015378:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015382:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015386:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801538c:	4618      	mov	r0, r3
 801538e:	374c      	adds	r7, #76	; 0x4c
 8015390:	46bd      	mov	sp, r7
 8015392:	bd90      	pop	{r4, r7, pc}
 8015394:	20001ae0 	.word	0x20001ae0

08015398 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b084      	sub	sp, #16
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80153a0:	2307      	movs	r3, #7
 80153a2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80153a4:	2300      	movs	r3, #0
 80153a6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	f107 020e 	add.w	r2, r7, #14
 80153b0:	4611      	mov	r1, r2
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7ff f8de 	bl	8014574 <VerifyRfFreq>
 80153b8:	4603      	mov	r3, r0
 80153ba:	f083 0301 	eor.w	r3, r3, #1
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d003      	beq.n	80153cc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80153c4:	7bfb      	ldrb	r3, [r7, #15]
 80153c6:	f023 0301 	bic.w	r3, r3, #1
 80153ca:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f993 3000 	ldrsb.w	r3, [r3]
 80153d2:	2207      	movs	r2, #7
 80153d4:	2100      	movs	r1, #0
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fe fb47 	bl	8013a6a <RegionCommonValueInRange>
 80153dc:	4603      	mov	r3, r0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d103      	bne.n	80153ea <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80153e2:	7bfb      	ldrb	r3, [r7, #15]
 80153e4:	f023 0302 	bic.w	r3, r3, #2
 80153e8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153f0:	2205      	movs	r2, #5
 80153f2:	2100      	movs	r1, #0
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7fe fb38 	bl	8013a6a <RegionCommonValueInRange>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d103      	bne.n	8015408 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015400:	7bfb      	ldrb	r3, [r7, #15]
 8015402:	f023 0304 	bic.w	r3, r3, #4
 8015406:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015408:	7bfb      	ldrb	r3, [r7, #15]
}
 801540a:	4618      	mov	r0, r3
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
	...

08015414 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801541c:	2303      	movs	r3, #3
 801541e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d114      	bne.n	8015454 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015430:	b2db      	uxtb	r3, r3
 8015432:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015434:	f107 0308 	add.w	r3, r7, #8
 8015438:	4618      	mov	r0, r3
 801543a:	f000 f9f9 	bl	8015830 <RegionEU868ChannelsRemove>
 801543e:	4603      	mov	r3, r0
 8015440:	f083 0301 	eor.w	r3, r3, #1
 8015444:	b2db      	uxtb	r3, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	d03b      	beq.n	80154c2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801544a:	7dfb      	ldrb	r3, [r7, #23]
 801544c:	f023 0303 	bic.w	r3, r3, #3
 8015450:	75fb      	strb	r3, [r7, #23]
 8015452:	e036      	b.n	80154c2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015460:	b2db      	uxtb	r3, r3
 8015462:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015464:	f107 030c 	add.w	r3, r7, #12
 8015468:	4618      	mov	r0, r3
 801546a:	f000 f93f 	bl	80156ec <RegionEU868ChannelAdd>
 801546e:	4603      	mov	r3, r0
 8015470:	2b06      	cmp	r3, #6
 8015472:	d820      	bhi.n	80154b6 <RegionEU868NewChannelReq+0xa2>
 8015474:	a201      	add	r2, pc, #4	; (adr r2, 801547c <RegionEU868NewChannelReq+0x68>)
 8015476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801547a:	bf00      	nop
 801547c:	080154c1 	.word	0x080154c1
 8015480:	080154b7 	.word	0x080154b7
 8015484:	080154b7 	.word	0x080154b7
 8015488:	080154b7 	.word	0x080154b7
 801548c:	08015499 	.word	0x08015499
 8015490:	080154a3 	.word	0x080154a3
 8015494:	080154ad 	.word	0x080154ad
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015498:	7dfb      	ldrb	r3, [r7, #23]
 801549a:	f023 0301 	bic.w	r3, r3, #1
 801549e:	75fb      	strb	r3, [r7, #23]
                break;
 80154a0:	e00f      	b.n	80154c2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80154a2:	7dfb      	ldrb	r3, [r7, #23]
 80154a4:	f023 0302 	bic.w	r3, r3, #2
 80154a8:	75fb      	strb	r3, [r7, #23]
                break;
 80154aa:	e00a      	b.n	80154c2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80154ac:	7dfb      	ldrb	r3, [r7, #23]
 80154ae:	f023 0303 	bic.w	r3, r3, #3
 80154b2:	75fb      	strb	r3, [r7, #23]
                break;
 80154b4:	e005      	b.n	80154c2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80154b6:	7dfb      	ldrb	r3, [r7, #23]
 80154b8:	f023 0303 	bic.w	r3, r3, #3
 80154bc:	75fb      	strb	r3, [r7, #23]
                break;
 80154be:	e000      	b.n	80154c2 <RegionEU868NewChannelReq+0xae>
                break;
 80154c0:	bf00      	nop
            }
        }
    }

    return status;
 80154c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3718      	adds	r7, #24
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop

080154d0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80154d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80154dc:	4618      	mov	r0, r3
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bc80      	pop	{r7}
 80154e4:	4770      	bx	lr
	...

080154e8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b084      	sub	sp, #16
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80154f0:	2303      	movs	r3, #3
 80154f2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80154f4:	2300      	movs	r3, #0
 80154f6:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	f107 020e 	add.w	r2, r7, #14
 8015500:	4611      	mov	r1, r2
 8015502:	4618      	mov	r0, r3
 8015504:	f7ff f836 	bl	8014574 <VerifyRfFreq>
 8015508:	4603      	mov	r3, r0
 801550a:	f083 0301 	eor.w	r3, r3, #1
 801550e:	b2db      	uxtb	r3, r3
 8015510:	2b00      	cmp	r3, #0
 8015512:	d003      	beq.n	801551c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015514:	7bfb      	ldrb	r3, [r7, #15]
 8015516:	f023 0301 	bic.w	r3, r3, #1
 801551a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801551c:	4b13      	ldr	r3, [pc, #76]	; (801556c <RegionEU868DlChannelReq+0x84>)
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	781b      	ldrb	r3, [r3, #0]
 8015524:	4619      	mov	r1, r3
 8015526:	460b      	mov	r3, r1
 8015528:	005b      	lsls	r3, r3, #1
 801552a:	440b      	add	r3, r1
 801552c:	009b      	lsls	r3, r3, #2
 801552e:	4413      	add	r3, r2
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d103      	bne.n	801553e <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015536:	7bfb      	ldrb	r3, [r7, #15]
 8015538:	f023 0302 	bic.w	r3, r3, #2
 801553c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801553e:	7bfb      	ldrb	r3, [r7, #15]
 8015540:	2b03      	cmp	r3, #3
 8015542:	d10d      	bne.n	8015560 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015544:	4b09      	ldr	r3, [pc, #36]	; (801556c <RegionEU868DlChannelReq+0x84>)
 8015546:	6819      	ldr	r1, [r3, #0]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	4618      	mov	r0, r3
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	685a      	ldr	r2, [r3, #4]
 8015552:	4603      	mov	r3, r0
 8015554:	005b      	lsls	r3, r3, #1
 8015556:	4403      	add	r3, r0
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	440b      	add	r3, r1
 801555c:	3304      	adds	r3, #4
 801555e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015564:	4618      	mov	r0, r3
 8015566:	3710      	adds	r7, #16
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	20001ae0 	.word	0x20001ae0

08015570 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	4603      	mov	r3, r0
 8015578:	460a      	mov	r2, r1
 801557a:	71fb      	strb	r3, [r7, #7]
 801557c:	4613      	mov	r3, r2
 801557e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015580:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015584:	4618      	mov	r0, r3
 8015586:	370c      	adds	r7, #12
 8015588:	46bd      	mov	sp, r7
 801558a:	bc80      	pop	{r7}
 801558c:	4770      	bx	lr
	...

08015590 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b09a      	sub	sp, #104	; 0x68
 8015594:	af02      	add	r7, sp, #8
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	607a      	str	r2, [r7, #4]
 801559c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801559e:	2300      	movs	r3, #0
 80155a0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80155a4:	2300      	movs	r3, #0
 80155a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80155aa:	2300      	movs	r3, #0
 80155ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80155ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80155b2:	2200      	movs	r2, #0
 80155b4:	601a      	str	r2, [r3, #0]
 80155b6:	605a      	str	r2, [r3, #4]
 80155b8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80155ba:	230c      	movs	r3, #12
 80155bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80155c0:	2307      	movs	r3, #7
 80155c2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80155c4:	4b47      	ldr	r3, [pc, #284]	; (80156e4 <RegionEU868NextChannel+0x154>)
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80155cc:	2201      	movs	r2, #1
 80155ce:	2100      	movs	r1, #0
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fe fa9b 	bl	8013b0c <RegionCommonCountChannels>
 80155d6:	4603      	mov	r3, r0
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10a      	bne.n	80155f2 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80155dc:	4b41      	ldr	r3, [pc, #260]	; (80156e4 <RegionEU868NextChannel+0x154>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80155e4:	4b3f      	ldr	r3, [pc, #252]	; (80156e4 <RegionEU868NextChannel+0x154>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f042 0207 	orr.w	r2, r2, #7
 80155ec:	b292      	uxth	r2, r2
 80155ee:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	7a5b      	ldrb	r3, [r3, #9]
 80155f6:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015602:	4b38      	ldr	r3, [pc, #224]	; (80156e4 <RegionEU868NextChannel+0x154>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801560a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801560c:	4b35      	ldr	r3, [pc, #212]	; (80156e4 <RegionEU868NextChannel+0x154>)
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015612:	4b35      	ldr	r3, [pc, #212]	; (80156e8 <RegionEU868NextChannel+0x158>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015618:	2310      	movs	r3, #16
 801561a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801561c:	f107 0312 	add.w	r3, r7, #18
 8015620:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	7a9b      	ldrb	r3, [r3, #10]
 8015632:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015636:	2306      	movs	r3, #6
 8015638:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801563c:	68fa      	ldr	r2, [r7, #12]
 801563e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015642:	320c      	adds	r2, #12
 8015644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015648:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	7d1b      	ldrb	r3, [r3, #20]
 8015650:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	8adb      	ldrh	r3, [r3, #22]
 801565e:	4619      	mov	r1, r3
 8015660:	4610      	mov	r0, r2
 8015662:	f7fe fffd 	bl	8014660 <GetTimeOnAir>
 8015666:	4603      	mov	r3, r0
 8015668:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801566a:	f107 0314 	add.w	r3, r7, #20
 801566e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015670:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8015674:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015678:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8015684:	9300      	str	r3, [sp, #0]
 8015686:	460b      	mov	r3, r1
 8015688:	6839      	ldr	r1, [r7, #0]
 801568a:	f7fe fe56 	bl	801433a <RegionCommonIdentifyChannels>
 801568e:	4603      	mov	r3, r0
 8015690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015698:	2b00      	cmp	r3, #0
 801569a:	d10e      	bne.n	80156ba <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801569c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80156a0:	3b01      	subs	r3, #1
 80156a2:	4619      	mov	r1, r3
 80156a4:	2000      	movs	r0, #0
 80156a6:	f000 f985 	bl	80159b4 <randr>
 80156aa:	4603      	mov	r3, r0
 80156ac:	3360      	adds	r3, #96	; 0x60
 80156ae:	443b      	add	r3, r7
 80156b0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	701a      	strb	r2, [r3, #0]
 80156b8:	e00e      	b.n	80156d8 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80156ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80156be:	2b0c      	cmp	r3, #12
 80156c0:	d10a      	bne.n	80156d8 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80156c2:	4b08      	ldr	r3, [pc, #32]	; (80156e4 <RegionEU868NextChannel+0x154>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80156ca:	4b06      	ldr	r3, [pc, #24]	; (80156e4 <RegionEU868NextChannel+0x154>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f042 0207 	orr.w	r2, r2, #7
 80156d2:	b292      	uxth	r2, r2
 80156d4:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 80156d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3760      	adds	r7, #96	; 0x60
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	20001ae0 	.word	0x20001ae0
 80156e8:	20001adc 	.word	0x20001adc

080156ec <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80156f4:	2300      	movs	r3, #0
 80156f6:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80156f8:	2300      	movs	r3, #0
 80156fa:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80156fc:	2300      	movs	r3, #0
 80156fe:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	791b      	ldrb	r3, [r3, #4]
 8015704:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8015706:	7b7b      	ldrb	r3, [r7, #13]
 8015708:	2b02      	cmp	r3, #2
 801570a:	d801      	bhi.n	8015710 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801570c:	2306      	movs	r3, #6
 801570e:	e089      	b.n	8015824 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8015710:	7b7b      	ldrb	r3, [r7, #13]
 8015712:	2b0f      	cmp	r3, #15
 8015714:	d901      	bls.n	801571a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015716:	2303      	movs	r3, #3
 8015718:	e084      	b.n	8015824 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	7a1b      	ldrb	r3, [r3, #8]
 8015720:	f343 0303 	sbfx	r3, r3, #0, #4
 8015724:	b25b      	sxtb	r3, r3
 8015726:	2207      	movs	r2, #7
 8015728:	2100      	movs	r1, #0
 801572a:	4618      	mov	r0, r3
 801572c:	f7fe f99d 	bl	8013a6a <RegionCommonValueInRange>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d101      	bne.n	801573a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8015736:	2301      	movs	r3, #1
 8015738:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	7a1b      	ldrb	r3, [r3, #8]
 8015740:	f343 1303 	sbfx	r3, r3, #4, #4
 8015744:	b25b      	sxtb	r3, r3
 8015746:	2207      	movs	r2, #7
 8015748:	2100      	movs	r1, #0
 801574a:	4618      	mov	r0, r3
 801574c:	f7fe f98d 	bl	8013a6a <RegionCommonValueInRange>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	d101      	bne.n	801575a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8015756:	2301      	movs	r3, #1
 8015758:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	7a1b      	ldrb	r3, [r3, #8]
 8015760:	f343 0303 	sbfx	r3, r3, #0, #4
 8015764:	b25a      	sxtb	r2, r3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	7a1b      	ldrb	r3, [r3, #8]
 801576c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015770:	b25b      	sxtb	r3, r3
 8015772:	429a      	cmp	r2, r3
 8015774:	dd01      	ble.n	801577a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8015776:	2301      	movs	r3, #1
 8015778:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801577a:	7bbb      	ldrb	r3, [r7, #14]
 801577c:	f083 0301 	eor.w	r3, r3, #1
 8015780:	b2db      	uxtb	r3, r3
 8015782:	2b00      	cmp	r3, #0
 8015784:	d010      	beq.n	80157a8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f107 020c 	add.w	r2, r7, #12
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f7fe feee 	bl	8014574 <VerifyRfFreq>
 8015798:	4603      	mov	r3, r0
 801579a:	f083 0301 	eor.w	r3, r3, #1
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d001      	beq.n	80157a8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80157a4:	2301      	movs	r3, #1
 80157a6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80157a8:	7bfb      	ldrb	r3, [r7, #15]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d004      	beq.n	80157b8 <RegionEU868ChannelAdd+0xcc>
 80157ae:	7bbb      	ldrb	r3, [r7, #14]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d001      	beq.n	80157b8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80157b4:	2306      	movs	r3, #6
 80157b6:	e035      	b.n	8015824 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80157b8:	7bfb      	ldrb	r3, [r7, #15]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d001      	beq.n	80157c2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80157be:	2305      	movs	r3, #5
 80157c0:	e030      	b.n	8015824 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80157c2:	7bbb      	ldrb	r3, [r7, #14]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d001      	beq.n	80157cc <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80157c8:	2304      	movs	r3, #4
 80157ca:	e02b      	b.n	8015824 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80157cc:	4b17      	ldr	r3, [pc, #92]	; (801582c <RegionEU868ChannelAdd+0x140>)
 80157ce:	6819      	ldr	r1, [r3, #0]
 80157d0:	7b7a      	ldrb	r2, [r7, #13]
 80157d2:	4613      	mov	r3, r2
 80157d4:	005b      	lsls	r3, r3, #1
 80157d6:	4413      	add	r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	18c8      	adds	r0, r1, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	220c      	movs	r2, #12
 80157e2:	4619      	mov	r1, r3
 80157e4:	f000 f8fd 	bl	80159e2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80157e8:	4b10      	ldr	r3, [pc, #64]	; (801582c <RegionEU868ChannelAdd+0x140>)
 80157ea:	6819      	ldr	r1, [r3, #0]
 80157ec:	7b7a      	ldrb	r2, [r7, #13]
 80157ee:	7b38      	ldrb	r0, [r7, #12]
 80157f0:	4613      	mov	r3, r2
 80157f2:	005b      	lsls	r3, r3, #1
 80157f4:	4413      	add	r3, r2
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	440b      	add	r3, r1
 80157fa:	3309      	adds	r3, #9
 80157fc:	4602      	mov	r2, r0
 80157fe:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8015800:	4b0a      	ldr	r3, [pc, #40]	; (801582c <RegionEU868ChannelAdd+0x140>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8015808:	b21a      	sxth	r2, r3
 801580a:	7b7b      	ldrb	r3, [r7, #13]
 801580c:	2101      	movs	r1, #1
 801580e:	fa01 f303 	lsl.w	r3, r1, r3
 8015812:	b21b      	sxth	r3, r3
 8015814:	4313      	orrs	r3, r2
 8015816:	b21a      	sxth	r2, r3
 8015818:	4b04      	ldr	r3, [pc, #16]	; (801582c <RegionEU868ChannelAdd+0x140>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	b292      	uxth	r2, r2
 801581e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8015822:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015824:	4618      	mov	r0, r3
 8015826:	3710      	adds	r7, #16
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	20001ae0 	.word	0x20001ae0

08015830 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b086      	sub	sp, #24
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801583e:	7dfb      	ldrb	r3, [r7, #23]
 8015840:	2b02      	cmp	r3, #2
 8015842:	d801      	bhi.n	8015848 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8015844:	2300      	movs	r3, #0
 8015846:	e016      	b.n	8015876 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015848:	4b0d      	ldr	r3, [pc, #52]	; (8015880 <RegionEU868ChannelsRemove+0x50>)
 801584a:	6819      	ldr	r1, [r3, #0]
 801584c:	7dfa      	ldrb	r2, [r7, #23]
 801584e:	4613      	mov	r3, r2
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	4413      	add	r3, r2
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	440b      	add	r3, r1
 8015858:	461a      	mov	r2, r3
 801585a:	2300      	movs	r3, #0
 801585c:	6013      	str	r3, [r2, #0]
 801585e:	6053      	str	r3, [r2, #4]
 8015860:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8015862:	4b07      	ldr	r3, [pc, #28]	; (8015880 <RegionEU868ChannelsRemove+0x50>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801586a:	7df9      	ldrb	r1, [r7, #23]
 801586c:	2210      	movs	r2, #16
 801586e:	4618      	mov	r0, r3
 8015870:	f7fe f918 	bl	8013aa4 <RegionCommonChanDisable>
 8015874:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8015876:	4618      	mov	r0, r3
 8015878:	3718      	adds	r7, #24
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	20001ae0 	.word	0x20001ae0

08015884 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015884:	b590      	push	{r4, r7, lr}
 8015886:	b085      	sub	sp, #20
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015892:	4b20      	ldr	r3, [pc, #128]	; (8015914 <RegionEU868SetContinuousWave+0x90>)
 8015894:	681a      	ldr	r2, [r3, #0]
 8015896:	4b20      	ldr	r3, [pc, #128]	; (8015918 <RegionEU868SetContinuousWave+0x94>)
 8015898:	6819      	ldr	r1, [r3, #0]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	461c      	mov	r4, r3
 80158a0:	4623      	mov	r3, r4
 80158a2:	005b      	lsls	r3, r3, #1
 80158a4:	4423      	add	r3, r4
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	440b      	add	r3, r1
 80158aa:	3309      	adds	r3, #9
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	4619      	mov	r1, r3
 80158b0:	460b      	mov	r3, r1
 80158b2:	005b      	lsls	r3, r3, #1
 80158b4:	440b      	add	r3, r1
 80158b6:	00db      	lsls	r3, r3, #3
 80158b8:	4413      	add	r3, r2
 80158ba:	3302      	adds	r3, #2
 80158bc:	f993 3000 	ldrsb.w	r3, [r3]
 80158c0:	4619      	mov	r1, r3
 80158c2:	f7fe fdda 	bl	801447a <RegionCommonLimitTxPower>
 80158c6:	4603      	mov	r3, r0
 80158c8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80158ce:	4b12      	ldr	r3, [pc, #72]	; (8015918 <RegionEU868SetContinuousWave+0x94>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	4619      	mov	r1, r3
 80158d8:	460b      	mov	r3, r1
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	440b      	add	r3, r1
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	4413      	add	r3, r2
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6859      	ldr	r1, [r3, #4]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	689a      	ldr	r2, [r3, #8]
 80158ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fe fc32 	bl	801415c <RegionCommonComputeTxPower>
 80158f8:	4603      	mov	r3, r0
 80158fa:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80158fc:	4b07      	ldr	r3, [pc, #28]	; (801591c <RegionEU868SetContinuousWave+0x98>)
 80158fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015900:	687a      	ldr	r2, [r7, #4]
 8015902:	8992      	ldrh	r2, [r2, #12]
 8015904:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015908:	68b8      	ldr	r0, [r7, #8]
 801590a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801590c:	bf00      	nop
 801590e:	3714      	adds	r7, #20
 8015910:	46bd      	mov	sp, r7
 8015912:	bd90      	pop	{r4, r7, pc}
 8015914:	20001adc 	.word	0x20001adc
 8015918:	20001ae0 	.word	0x20001ae0
 801591c:	0801b950 	.word	0x0801b950

08015920 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015920:	b480      	push	{r7}
 8015922:	b085      	sub	sp, #20
 8015924:	af00      	add	r7, sp, #0
 8015926:	4603      	mov	r3, r0
 8015928:	71fb      	strb	r3, [r7, #7]
 801592a:	460b      	mov	r3, r1
 801592c:	71bb      	strb	r3, [r7, #6]
 801592e:	4613      	mov	r3, r2
 8015930:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8015932:	79ba      	ldrb	r2, [r7, #6]
 8015934:	797b      	ldrb	r3, [r7, #5]
 8015936:	1ad3      	subs	r3, r2, r3
 8015938:	b2db      	uxtb	r3, r3
 801593a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801593c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015940:	2b00      	cmp	r3, #0
 8015942:	da01      	bge.n	8015948 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8015944:	2300      	movs	r3, #0
 8015946:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015948:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801594a:	4618      	mov	r0, r3
 801594c:	3714      	adds	r7, #20
 801594e:	46bd      	mov	sp, r7
 8015950:	bc80      	pop	{r7}
 8015952:	4770      	bx	lr

08015954 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8015954:	b480      	push	{r7}
 8015956:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015958:	4b0d      	ldr	r3, [pc, #52]	; (8015990 <rand1+0x3c>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4a0d      	ldr	r2, [pc, #52]	; (8015994 <rand1+0x40>)
 801595e:	fb02 f303 	mul.w	r3, r2, r3
 8015962:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015966:	3339      	adds	r3, #57	; 0x39
 8015968:	4a09      	ldr	r2, [pc, #36]	; (8015990 <rand1+0x3c>)
 801596a:	6013      	str	r3, [r2, #0]
 801596c:	4b08      	ldr	r3, [pc, #32]	; (8015990 <rand1+0x3c>)
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	2303      	movs	r3, #3
 8015972:	fba3 1302 	umull	r1, r3, r3, r2
 8015976:	1ad1      	subs	r1, r2, r3
 8015978:	0849      	lsrs	r1, r1, #1
 801597a:	440b      	add	r3, r1
 801597c:	0f99      	lsrs	r1, r3, #30
 801597e:	460b      	mov	r3, r1
 8015980:	07db      	lsls	r3, r3, #31
 8015982:	1a5b      	subs	r3, r3, r1
 8015984:	1ad1      	subs	r1, r2, r3
 8015986:	460b      	mov	r3, r1
}
 8015988:	4618      	mov	r0, r3
 801598a:	46bd      	mov	sp, r7
 801598c:	bc80      	pop	{r7}
 801598e:	4770      	bx	lr
 8015990:	20000134 	.word	0x20000134
 8015994:	41c64e6d 	.word	0x41c64e6d

08015998 <srand1>:

void srand1( uint32_t seed )
{
 8015998:	b480      	push	{r7}
 801599a:	b083      	sub	sp, #12
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
    next = seed;
 80159a0:	4a03      	ldr	r2, [pc, #12]	; (80159b0 <srand1+0x18>)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6013      	str	r3, [r2, #0]
}
 80159a6:	bf00      	nop
 80159a8:	370c      	adds	r7, #12
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bc80      	pop	{r7}
 80159ae:	4770      	bx	lr
 80159b0:	20000134 	.word	0x20000134

080159b4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
 80159bc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80159be:	f7ff ffc9 	bl	8015954 <rand1>
 80159c2:	4602      	mov	r2, r0
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	1acb      	subs	r3, r1, r3
 80159ca:	3301      	adds	r3, #1
 80159cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80159d0:	fb01 f303 	mul.w	r3, r1, r3
 80159d4:	1ad2      	subs	r2, r2, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	4413      	add	r3, r2
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3708      	adds	r7, #8
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}

080159e2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80159e2:	b480      	push	{r7}
 80159e4:	b085      	sub	sp, #20
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	60f8      	str	r0, [r7, #12]
 80159ea:	60b9      	str	r1, [r7, #8]
 80159ec:	4613      	mov	r3, r2
 80159ee:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80159f0:	e007      	b.n	8015a02 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80159f2:	68ba      	ldr	r2, [r7, #8]
 80159f4:	1c53      	adds	r3, r2, #1
 80159f6:	60bb      	str	r3, [r7, #8]
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	1c59      	adds	r1, r3, #1
 80159fc:	60f9      	str	r1, [r7, #12]
 80159fe:	7812      	ldrb	r2, [r2, #0]
 8015a00:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a02:	88fb      	ldrh	r3, [r7, #6]
 8015a04:	1e5a      	subs	r2, r3, #1
 8015a06:	80fa      	strh	r2, [r7, #6]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d1f2      	bne.n	80159f2 <memcpy1+0x10>
    }
}
 8015a0c:	bf00      	nop
 8015a0e:	bf00      	nop
 8015a10:	3714      	adds	r7, #20
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bc80      	pop	{r7}
 8015a16:	4770      	bx	lr

08015a18 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	4613      	mov	r3, r2
 8015a24:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8015a26:	88fb      	ldrh	r3, [r7, #6]
 8015a28:	3b01      	subs	r3, #1
 8015a2a:	68fa      	ldr	r2, [r7, #12]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8015a30:	e007      	b.n	8015a42 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8015a32:	68ba      	ldr	r2, [r7, #8]
 8015a34:	1c53      	adds	r3, r2, #1
 8015a36:	60bb      	str	r3, [r7, #8]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	1e59      	subs	r1, r3, #1
 8015a3c:	60f9      	str	r1, [r7, #12]
 8015a3e:	7812      	ldrb	r2, [r2, #0]
 8015a40:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a42:	88fb      	ldrh	r3, [r7, #6]
 8015a44:	1e5a      	subs	r2, r3, #1
 8015a46:	80fa      	strh	r2, [r7, #6]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d1f2      	bne.n	8015a32 <memcpyr+0x1a>
    }
}
 8015a4c:	bf00      	nop
 8015a4e:	bf00      	nop
 8015a50:	3714      	adds	r7, #20
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bc80      	pop	{r7}
 8015a56:	4770      	bx	lr

08015a58 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	460b      	mov	r3, r1
 8015a62:	70fb      	strb	r3, [r7, #3]
 8015a64:	4613      	mov	r3, r2
 8015a66:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8015a68:	e004      	b.n	8015a74 <memset1+0x1c>
    {
        *dst++ = value;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	1c5a      	adds	r2, r3, #1
 8015a6e:	607a      	str	r2, [r7, #4]
 8015a70:	78fa      	ldrb	r2, [r7, #3]
 8015a72:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a74:	883b      	ldrh	r3, [r7, #0]
 8015a76:	1e5a      	subs	r2, r3, #1
 8015a78:	803a      	strh	r2, [r7, #0]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d1f5      	bne.n	8015a6a <memset1+0x12>
    }
}
 8015a7e:	bf00      	nop
 8015a80:	bf00      	nop
 8015a82:	370c      	adds	r7, #12
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bc80      	pop	{r7}
 8015a88:	4770      	bx	lr
	...

08015a8c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b085      	sub	sp, #20
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	460b      	mov	r3, r1
 8015a96:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8015a98:	f04f 33ff 	mov.w	r3, #4294967295
 8015a9c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d101      	bne.n	8015aa8 <Crc32+0x1c>
    {
        return 0;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	e026      	b.n	8015af6 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	817b      	strh	r3, [r7, #10]
 8015aac:	e01d      	b.n	8015aea <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8015aae:	897b      	ldrh	r3, [r7, #10]
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	4413      	add	r3, r2
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	4053      	eors	r3, r2
 8015abc:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8015abe:	2300      	movs	r3, #0
 8015ac0:	813b      	strh	r3, [r7, #8]
 8015ac2:	e00c      	b.n	8015ade <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	085a      	lsrs	r2, r3, #1
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f003 0301 	and.w	r3, r3, #1
 8015ace:	425b      	negs	r3, r3
 8015ad0:	490b      	ldr	r1, [pc, #44]	; (8015b00 <Crc32+0x74>)
 8015ad2:	400b      	ands	r3, r1
 8015ad4:	4053      	eors	r3, r2
 8015ad6:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8015ad8:	893b      	ldrh	r3, [r7, #8]
 8015ada:	3301      	adds	r3, #1
 8015adc:	813b      	strh	r3, [r7, #8]
 8015ade:	893b      	ldrh	r3, [r7, #8]
 8015ae0:	2b07      	cmp	r3, #7
 8015ae2:	d9ef      	bls.n	8015ac4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8015ae4:	897b      	ldrh	r3, [r7, #10]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	817b      	strh	r3, [r7, #10]
 8015aea:	897a      	ldrh	r2, [r7, #10]
 8015aec:	887b      	ldrh	r3, [r7, #2]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d3dd      	bcc.n	8015aae <Crc32+0x22>
        }
    }

    return ~crc;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	43db      	mvns	r3, r3
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	3714      	adds	r7, #20
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bc80      	pop	{r7}
 8015afe:	4770      	bx	lr
 8015b00:	edb88320 	.word	0xedb88320

08015b04 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af02      	add	r7, sp, #8
 8015b0a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8015b0c:	4a24      	ldr	r2, [pc, #144]	; (8015ba0 <RadioInit+0x9c>)
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8015b12:	4b24      	ldr	r3, [pc, #144]	; (8015ba4 <RadioInit+0xa0>)
 8015b14:	2200      	movs	r2, #0
 8015b16:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8015b18:	4b22      	ldr	r3, [pc, #136]	; (8015ba4 <RadioInit+0xa0>)
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8015b1e:	4b21      	ldr	r3, [pc, #132]	; (8015ba4 <RadioInit+0xa0>)
 8015b20:	2200      	movs	r2, #0
 8015b22:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8015b24:	4b1f      	ldr	r3, [pc, #124]	; (8015ba4 <RadioInit+0xa0>)
 8015b26:	2200      	movs	r2, #0
 8015b28:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8015b2a:	481f      	ldr	r0, [pc, #124]	; (8015ba8 <RadioInit+0xa4>)
 8015b2c:	f001 ff88 	bl	8017a40 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8015b30:	4b1c      	ldr	r3, [pc, #112]	; (8015ba4 <RadioInit+0xa0>)
 8015b32:	2200      	movs	r2, #0
 8015b34:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8015b36:	4b1b      	ldr	r3, [pc, #108]	; (8015ba4 <RadioInit+0xa0>)
 8015b38:	2200      	movs	r2, #0
 8015b3a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8015b3c:	f002 fa16 	bl	8017f6c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8015b40:	2100      	movs	r1, #0
 8015b42:	2000      	movs	r0, #0
 8015b44:	f002 fdde 	bl	8018704 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8015b48:	2204      	movs	r2, #4
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	2001      	movs	r0, #1
 8015b4e:	f002 fb9b 	bl	8018288 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015b52:	2300      	movs	r3, #0
 8015b54:	2200      	movs	r2, #0
 8015b56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015b5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015b5e:	f002 facb 	bl	80180f8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8015b62:	f000 fe83 	bl	801686c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8015b66:	2300      	movs	r3, #0
 8015b68:	9300      	str	r3, [sp, #0]
 8015b6a:	4b10      	ldr	r3, [pc, #64]	; (8015bac <RadioInit+0xa8>)
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8015b72:	480f      	ldr	r0, [pc, #60]	; (8015bb0 <RadioInit+0xac>)
 8015b74:	f003 ffdc 	bl	8019b30 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8015b78:	2300      	movs	r3, #0
 8015b7a:	9300      	str	r3, [sp, #0]
 8015b7c:	4b0d      	ldr	r3, [pc, #52]	; (8015bb4 <RadioInit+0xb0>)
 8015b7e:	2200      	movs	r2, #0
 8015b80:	f04f 31ff 	mov.w	r1, #4294967295
 8015b84:	480c      	ldr	r0, [pc, #48]	; (8015bb8 <RadioInit+0xb4>)
 8015b86:	f003 ffd3 	bl	8019b30 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8015b8a:	4809      	ldr	r0, [pc, #36]	; (8015bb0 <RadioInit+0xac>)
 8015b8c:	f004 f874 	bl	8019c78 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8015b90:	4809      	ldr	r0, [pc, #36]	; (8015bb8 <RadioInit+0xb4>)
 8015b92:	f004 f871 	bl	8019c78 <UTIL_TIMER_Stop>
}
 8015b96:	bf00      	nop
 8015b98:	3708      	adds	r7, #8
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	20001be4 	.word	0x20001be4
 8015ba4:	20001be8 	.word	0x20001be8
 8015ba8:	08016c59 	.word	0x08016c59
 8015bac:	08016be1 	.word	0x08016be1
 8015bb0:	20001c44 	.word	0x20001c44
 8015bb4:	08016bf5 	.word	0x08016bf5
 8015bb8:	20001c5c 	.word	0x20001c5c

08015bbc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8015bc0:	f001 ff80 	bl	8017ac4 <SUBGRF_GetOperatingMode>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b07      	cmp	r3, #7
 8015bc8:	d00a      	beq.n	8015be0 <RadioGetStatus+0x24>
 8015bca:	2b07      	cmp	r3, #7
 8015bcc:	dc0a      	bgt.n	8015be4 <RadioGetStatus+0x28>
 8015bce:	2b04      	cmp	r3, #4
 8015bd0:	d002      	beq.n	8015bd8 <RadioGetStatus+0x1c>
 8015bd2:	2b05      	cmp	r3, #5
 8015bd4:	d002      	beq.n	8015bdc <RadioGetStatus+0x20>
 8015bd6:	e005      	b.n	8015be4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8015bd8:	2302      	movs	r3, #2
 8015bda:	e004      	b.n	8015be6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	e002      	b.n	8015be6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8015be0:	2303      	movs	r3, #3
 8015be2:	e000      	b.n	8015be6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8015be4:	2300      	movs	r3, #0
    }
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	bd80      	pop	{r7, pc}
	...

08015bec <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b082      	sub	sp, #8
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8015bf6:	4a2a      	ldr	r2, [pc, #168]	; (8015ca0 <RadioSetModem+0xb4>)
 8015bf8:	79fb      	ldrb	r3, [r7, #7]
 8015bfa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8015bfc:	79fb      	ldrb	r3, [r7, #7]
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f003 f943 	bl	8018e8a <RFW_SetRadioModem>
    switch( modem )
 8015c04:	79fb      	ldrb	r3, [r7, #7]
 8015c06:	2b05      	cmp	r3, #5
 8015c08:	d80e      	bhi.n	8015c28 <RadioSetModem+0x3c>
 8015c0a:	a201      	add	r2, pc, #4	; (adr r2, 8015c10 <RadioSetModem+0x24>)
 8015c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c10:	08015c37 	.word	0x08015c37
 8015c14:	08015c45 	.word	0x08015c45
 8015c18:	08015c29 	.word	0x08015c29
 8015c1c:	08015c6b 	.word	0x08015c6b
 8015c20:	08015c79 	.word	0x08015c79
 8015c24:	08015c87 	.word	0x08015c87
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8015c28:	2003      	movs	r0, #3
 8015c2a:	f002 fb07 	bl	801823c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015c2e:	4b1c      	ldr	r3, [pc, #112]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	735a      	strb	r2, [r3, #13]
        break;
 8015c34:	e02f      	b.n	8015c96 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015c36:	2000      	movs	r0, #0
 8015c38:	f002 fb00 	bl	801823c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015c3c:	4b18      	ldr	r3, [pc, #96]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c3e:	2200      	movs	r2, #0
 8015c40:	735a      	strb	r2, [r3, #13]
        break;
 8015c42:	e028      	b.n	8015c96 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8015c44:	2001      	movs	r0, #1
 8015c46:	f002 faf9 	bl	801823c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8015c4a:	4b15      	ldr	r3, [pc, #84]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c4c:	7b5a      	ldrb	r2, [r3, #13]
 8015c4e:	4b14      	ldr	r3, [pc, #80]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c50:	7b1b      	ldrb	r3, [r3, #12]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d01e      	beq.n	8015c94 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8015c56:	4b12      	ldr	r3, [pc, #72]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c58:	7b1a      	ldrb	r2, [r3, #12]
 8015c5a:	4b11      	ldr	r3, [pc, #68]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c5c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8015c5e:	4b10      	ldr	r3, [pc, #64]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c60:	7b5b      	ldrb	r3, [r3, #13]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f000 ff86 	bl	8016b74 <RadioSetPublicNetwork>
        }
        break;
 8015c68:	e014      	b.n	8015c94 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8015c6a:	2002      	movs	r0, #2
 8015c6c:	f002 fae6 	bl	801823c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015c70:	4b0b      	ldr	r3, [pc, #44]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c72:	2200      	movs	r2, #0
 8015c74:	735a      	strb	r2, [r3, #13]
        break;
 8015c76:	e00e      	b.n	8015c96 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8015c78:	2002      	movs	r0, #2
 8015c7a:	f002 fadf 	bl	801823c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015c7e:	4b08      	ldr	r3, [pc, #32]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c80:	2200      	movs	r2, #0
 8015c82:	735a      	strb	r2, [r3, #13]
        break;
 8015c84:	e007      	b.n	8015c96 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015c86:	2000      	movs	r0, #0
 8015c88:	f002 fad8 	bl	801823c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015c8c:	4b04      	ldr	r3, [pc, #16]	; (8015ca0 <RadioSetModem+0xb4>)
 8015c8e:	2200      	movs	r2, #0
 8015c90:	735a      	strb	r2, [r3, #13]
        break;
 8015c92:	e000      	b.n	8015c96 <RadioSetModem+0xaa>
        break;
 8015c94:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8015c96:	bf00      	nop
 8015c98:	3708      	adds	r7, #8
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	20001be8 	.word	0x20001be8

08015ca4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b082      	sub	sp, #8
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f002 fa7f 	bl	80181b0 <SUBGRF_SetRfFrequency>
}
 8015cb2:	bf00      	nop
 8015cb4:	3708      	adds	r7, #8
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}

08015cba <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8015cba:	b580      	push	{r7, lr}
 8015cbc:	b090      	sub	sp, #64	; 0x40
 8015cbe:	af0a      	add	r7, sp, #40	; 0x28
 8015cc0:	60f8      	str	r0, [r7, #12]
 8015cc2:	60b9      	str	r1, [r7, #8]
 8015cc4:	603b      	str	r3, [r7, #0]
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8015cca:	2301      	movs	r3, #1
 8015ccc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8015cd6:	f000 fddc 	bl	8016892 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8015cda:	2000      	movs	r0, #0
 8015cdc:	f7ff ff86 	bl	8015bec <RadioSetModem>

    RadioSetChannel( freq );
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f7ff ffdf 	bl	8015ca4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8015cea:	2300      	movs	r3, #0
 8015cec:	9308      	str	r3, [sp, #32]
 8015cee:	2300      	movs	r3, #0
 8015cf0:	9307      	str	r3, [sp, #28]
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	9306      	str	r3, [sp, #24]
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	9305      	str	r3, [sp, #20]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	9304      	str	r3, [sp, #16]
 8015cfe:	2300      	movs	r3, #0
 8015d00:	9303      	str	r3, [sp, #12]
 8015d02:	2300      	movs	r3, #0
 8015d04:	9302      	str	r3, [sp, #8]
 8015d06:	2303      	movs	r3, #3
 8015d08:	9301      	str	r3, [sp, #4]
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	9300      	str	r3, [sp, #0]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	f44f 7216 	mov.w	r2, #600	; 0x258
 8015d14:	68b9      	ldr	r1, [r7, #8]
 8015d16:	2000      	movs	r0, #0
 8015d18:	f000 f83c 	bl	8015d94 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	f000 fdbf 	bl	80168a0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8015d22:	f000 ff55 	bl	8016bd0 <RadioGetWakeupTime>
 8015d26:	4603      	mov	r3, r0
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7eb ff61 	bl	8001bf0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8015d2e:	f004 f8bd 	bl	8019eac <UTIL_TIMER_GetCurrentTime>
 8015d32:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015d34:	e00d      	b.n	8015d52 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8015d36:	2000      	movs	r0, #0
 8015d38:	f000 fe9a 	bl	8016a70 <RadioRssi>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8015d40:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	dd02      	ble.n	8015d52 <RadioIsChannelFree+0x98>
        {
            status = false;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	75fb      	strb	r3, [r7, #23]
            break;
 8015d50:	e006      	b.n	8015d60 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015d52:	6938      	ldr	r0, [r7, #16]
 8015d54:	f004 f8bc 	bl	8019ed0 <UTIL_TIMER_GetElapsedTime>
 8015d58:	4602      	mov	r2, r0
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	d8ea      	bhi.n	8015d36 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8015d60:	f000 fd97 	bl	8016892 <RadioStandby>

    return status;
 8015d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3718      	adds	r7, #24
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b082      	sub	sp, #8
 8015d72:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8015d74:	2300      	movs	r3, #0
 8015d76:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015d78:	2300      	movs	r3, #0
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	2000      	movs	r0, #0
 8015d80:	f002 f9ba 	bl	80180f8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8015d84:	f001 ff6f 	bl	8017c66 <SUBGRF_GetRandom>
 8015d88:	6078      	str	r0, [r7, #4]

    return rnd;
 8015d8a:	687b      	ldr	r3, [r7, #4]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b08a      	sub	sp, #40	; 0x28
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	60b9      	str	r1, [r7, #8]
 8015d9c:	607a      	str	r2, [r7, #4]
 8015d9e:	461a      	mov	r2, r3
 8015da0:	4603      	mov	r3, r0
 8015da2:	73fb      	strb	r3, [r7, #15]
 8015da4:	4613      	mov	r3, r2
 8015da6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8015da8:	4ab9      	ldr	r2, [pc, #740]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015daa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8015dae:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8015db0:	f003 f829 	bl	8018e06 <RFW_DeInit>
    if( rxContinuous == true )
 8015db4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d001      	beq.n	8015dc0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8015dc0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d004      	beq.n	8015dd2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8015dc8:	4ab2      	ldr	r2, [pc, #712]	; (8016094 <RadioSetRxConfig+0x300>)
 8015dca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015dce:	7013      	strb	r3, [r2, #0]
 8015dd0:	e002      	b.n	8015dd8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8015dd2:	4bb0      	ldr	r3, [pc, #704]	; (8016094 <RadioSetRxConfig+0x300>)
 8015dd4:	22ff      	movs	r2, #255	; 0xff
 8015dd6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8015dd8:	7bfb      	ldrb	r3, [r7, #15]
 8015dda:	2b05      	cmp	r3, #5
 8015ddc:	d009      	beq.n	8015df2 <RadioSetRxConfig+0x5e>
 8015dde:	2b05      	cmp	r3, #5
 8015de0:	f300 81ca 	bgt.w	8016178 <RadioSetRxConfig+0x3e4>
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f000 80bf 	beq.w	8015f68 <RadioSetRxConfig+0x1d4>
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	f000 8124 	beq.w	8016038 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8015df0:	e1c2      	b.n	8016178 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8015df2:	2001      	movs	r0, #1
 8015df4:	f002 f87c 	bl	8017ef0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015df8:	4ba5      	ldr	r3, [pc, #660]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015e00:	4aa3      	ldr	r2, [pc, #652]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8015e06:	4ba2      	ldr	r3, [pc, #648]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e08:	2209      	movs	r2, #9
 8015e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8015e0e:	4ba0      	ldr	r3, [pc, #640]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015e14:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8015e16:	68b8      	ldr	r0, [r7, #8]
 8015e18:	f002 ff28 	bl	8018c6c <SUBGRF_GetFskBandwidthRegValue>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	461a      	mov	r2, r3
 8015e20:	4b9b      	ldr	r3, [pc, #620]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015e26:	4b9a      	ldr	r3, [pc, #616]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e28:	2200      	movs	r2, #0
 8015e2a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015e2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e2e:	00db      	lsls	r3, r3, #3
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	4b97      	ldr	r3, [pc, #604]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e34:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8015e36:	4b96      	ldr	r3, [pc, #600]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e38:	2200      	movs	r2, #0
 8015e3a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8015e3c:	4b94      	ldr	r3, [pc, #592]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e3e:	2210      	movs	r2, #16
 8015e40:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015e42:	4b93      	ldr	r3, [pc, #588]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e44:	2200      	movs	r2, #0
 8015e46:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8015e48:	4b91      	ldr	r3, [pc, #580]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015e4e:	4b91      	ldr	r3, [pc, #580]	; (8016094 <RadioSetRxConfig+0x300>)
 8015e50:	781a      	ldrb	r2, [r3, #0]
 8015e52:	4b8f      	ldr	r3, [pc, #572]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e54:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015e56:	4b8e      	ldr	r3, [pc, #568]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e58:	2201      	movs	r2, #1
 8015e5a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8015e5c:	4b8c      	ldr	r3, [pc, #560]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015e5e:	2200      	movs	r2, #0
 8015e60:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8015e62:	2005      	movs	r0, #5
 8015e64:	f7ff fec2 	bl	8015bec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015e68:	488b      	ldr	r0, [pc, #556]	; (8016098 <RadioSetRxConfig+0x304>)
 8015e6a:	f002 fadb 	bl	8018424 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015e6e:	488b      	ldr	r0, [pc, #556]	; (801609c <RadioSetRxConfig+0x308>)
 8015e70:	f002 fbaa 	bl	80185c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015e74:	4a8a      	ldr	r2, [pc, #552]	; (80160a0 <RadioSetRxConfig+0x30c>)
 8015e76:	f107 031c 	add.w	r3, r7, #28
 8015e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e82:	f107 031c 	add.w	r3, r7, #28
 8015e86:	4618      	mov	r0, r3
 8015e88:	f001 fe6b 	bl	8017b62 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015e8c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015e90:	f001 feb6 	bl	8017c00 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8015e94:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015e98:	f000 fe09 	bl	8016aae <RadioRead>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8015ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ea6:	f023 0310 	bic.w	r3, r3, #16
 8015eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8015eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015eb8:	f000 fde7 	bl	8016a8a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8015ebc:	2104      	movs	r1, #4
 8015ebe:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8015ec2:	f000 fde2 	bl	8016a8a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8015ec6:	f640 009b 	movw	r0, #2203	; 0x89b
 8015eca:	f000 fdf0 	bl	8016aae <RadioRead>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ed8:	f023 031c 	bic.w	r3, r3, #28
 8015edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8015ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ee4:	f043 0308 	orr.w	r3, r3, #8
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	4619      	mov	r1, r3
 8015eec:	f640 009b 	movw	r0, #2203	; 0x89b
 8015ef0:	f000 fdcb 	bl	8016a8a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8015ef4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015ef8:	f000 fdd9 	bl	8016aae <RadioRead>
 8015efc:	4603      	mov	r3, r0
 8015efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f06:	f023 0318 	bic.w	r3, r3, #24
 8015f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8015f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f12:	f043 0318 	orr.w	r3, r3, #24
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	4619      	mov	r1, r3
 8015f1a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015f1e:	f000 fdb4 	bl	8016a8a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8015f22:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015f26:	f000 fdc2 	bl	8016aae <RadioRead>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8015f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8015f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f40:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	4619      	mov	r1, r3
 8015f48:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015f4c:	f000 fd9d 	bl	8016a8a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8015f50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015f52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015f56:	fb02 f303 	mul.w	r3, r2, r3
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f62:	4a4b      	ldr	r2, [pc, #300]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015f64:	6093      	str	r3, [r2, #8]
            break;
 8015f66:	e108      	b.n	801617a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015f68:	2000      	movs	r0, #0
 8015f6a:	f001 ffc1 	bl	8017ef0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015f6e:	4b48      	ldr	r3, [pc, #288]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015f70:	2200      	movs	r2, #0
 8015f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015f76:	4a46      	ldr	r2, [pc, #280]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015f7c:	4b44      	ldr	r3, [pc, #272]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015f7e:	220b      	movs	r2, #11
 8015f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8015f84:	68b8      	ldr	r0, [r7, #8]
 8015f86:	f002 fe71 	bl	8018c6c <SUBGRF_GetFskBandwidthRegValue>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	4b40      	ldr	r3, [pc, #256]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015f94:	4b3e      	ldr	r3, [pc, #248]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015f96:	2200      	movs	r2, #0
 8015f98:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015f9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015f9c:	00db      	lsls	r3, r3, #3
 8015f9e:	b29a      	uxth	r2, r3
 8015fa0:	4b3b      	ldr	r3, [pc, #236]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fa2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015fa4:	4b3a      	ldr	r3, [pc, #232]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fa6:	2204      	movs	r2, #4
 8015fa8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8015faa:	4b39      	ldr	r3, [pc, #228]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fac:	2218      	movs	r2, #24
 8015fae:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015fb0:	4b37      	ldr	r3, [pc, #220]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015fb6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015fba:	f083 0301 	eor.w	r3, r3, #1
 8015fbe:	b2db      	uxtb	r3, r3
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	4b33      	ldr	r3, [pc, #204]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fc4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015fc6:	4b33      	ldr	r3, [pc, #204]	; (8016094 <RadioSetRxConfig+0x300>)
 8015fc8:	781a      	ldrb	r2, [r3, #0]
 8015fca:	4b31      	ldr	r3, [pc, #196]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fcc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8015fce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d003      	beq.n	8015fde <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015fd6:	4b2e      	ldr	r3, [pc, #184]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fd8:	22f2      	movs	r2, #242	; 0xf2
 8015fda:	75da      	strb	r2, [r3, #23]
 8015fdc:	e002      	b.n	8015fe4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015fde:	4b2c      	ldr	r3, [pc, #176]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015fe4:	4b2a      	ldr	r3, [pc, #168]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8015fea:	f000 fc52 	bl	8016892 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8015fee:	2000      	movs	r0, #0
 8015ff0:	f7ff fdfc 	bl	8015bec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015ff4:	4828      	ldr	r0, [pc, #160]	; (8016098 <RadioSetRxConfig+0x304>)
 8015ff6:	f002 fa15 	bl	8018424 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015ffa:	4828      	ldr	r0, [pc, #160]	; (801609c <RadioSetRxConfig+0x308>)
 8015ffc:	f002 fae4 	bl	80185c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016000:	4a28      	ldr	r2, [pc, #160]	; (80160a4 <RadioSetRxConfig+0x310>)
 8016002:	f107 0314 	add.w	r3, r7, #20
 8016006:	e892 0003 	ldmia.w	r2, {r0, r1}
 801600a:	e883 0003 	stmia.w	r3, {r0, r1}
 801600e:	f107 0314 	add.w	r3, r7, #20
 8016012:	4618      	mov	r0, r3
 8016014:	f001 fda5 	bl	8017b62 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016018:	f240 10ff 	movw	r0, #511	; 0x1ff
 801601c:	f001 fdf0 	bl	8017c00 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016020:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016022:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016026:	fb02 f303 	mul.w	r3, r2, r3
 801602a:	461a      	mov	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016032:	4a17      	ldr	r2, [pc, #92]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8016034:	6093      	str	r3, [r2, #8]
            break;
 8016036:	e0a0      	b.n	801617a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016038:	2000      	movs	r0, #0
 801603a:	f001 ff59 	bl	8017ef0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801603e:	4b14      	ldr	r3, [pc, #80]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8016040:	2201      	movs	r2, #1
 8016042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	b2da      	uxtb	r2, r3
 801604a:	4b11      	ldr	r3, [pc, #68]	; (8016090 <RadioSetRxConfig+0x2fc>)
 801604c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016050:	4a15      	ldr	r2, [pc, #84]	; (80160a8 <RadioSetRxConfig+0x314>)
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	4413      	add	r3, r2
 8016056:	781a      	ldrb	r2, [r3, #0]
 8016058:	4b0d      	ldr	r3, [pc, #52]	; (8016090 <RadioSetRxConfig+0x2fc>)
 801605a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801605e:	4a0c      	ldr	r2, [pc, #48]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8016060:	7bbb      	ldrb	r3, [r7, #14]
 8016062:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d105      	bne.n	8016078 <RadioSetRxConfig+0x2e4>
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2b0b      	cmp	r3, #11
 8016070:	d008      	beq.n	8016084 <RadioSetRxConfig+0x2f0>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2b0c      	cmp	r3, #12
 8016076:	d005      	beq.n	8016084 <RadioSetRxConfig+0x2f0>
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	2b01      	cmp	r3, #1
 801607c:	d116      	bne.n	80160ac <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2b0c      	cmp	r3, #12
 8016082:	d113      	bne.n	80160ac <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016084:	4b02      	ldr	r3, [pc, #8]	; (8016090 <RadioSetRxConfig+0x2fc>)
 8016086:	2201      	movs	r2, #1
 8016088:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801608c:	e012      	b.n	80160b4 <RadioSetRxConfig+0x320>
 801608e:	bf00      	nop
 8016090:	20001be8 	.word	0x20001be8
 8016094:	20000138 	.word	0x20000138
 8016098:	20001c20 	.word	0x20001c20
 801609c:	20001bf6 	.word	0x20001bf6
 80160a0:	0801b3f0 	.word	0x0801b3f0
 80160a4:	0801b3f8 	.word	0x0801b3f8
 80160a8:	0801b9d4 	.word	0x0801b9d4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80160ac:	4b35      	ldr	r3, [pc, #212]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160ae:	2200      	movs	r2, #0
 80160b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80160b4:	4b33      	ldr	r3, [pc, #204]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160b6:	2201      	movs	r2, #1
 80160b8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80160ba:	4b32      	ldr	r3, [pc, #200]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80160c0:	2b05      	cmp	r3, #5
 80160c2:	d004      	beq.n	80160ce <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80160c4:	4b2f      	ldr	r3, [pc, #188]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80160ca:	2b06      	cmp	r3, #6
 80160cc:	d10a      	bne.n	80160e4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80160ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160d0:	2b0b      	cmp	r3, #11
 80160d2:	d803      	bhi.n	80160dc <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80160d4:	4b2b      	ldr	r3, [pc, #172]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160d6:	220c      	movs	r2, #12
 80160d8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80160da:	e006      	b.n	80160ea <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80160dc:	4a29      	ldr	r2, [pc, #164]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160e0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80160e2:	e002      	b.n	80160ea <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80160e4:	4a27      	ldr	r2, [pc, #156]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160e8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80160ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80160ee:	4b25      	ldr	r3, [pc, #148]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160f0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80160f2:	4b25      	ldr	r3, [pc, #148]	; (8016188 <RadioSetRxConfig+0x3f4>)
 80160f4:	781a      	ldrb	r2, [r3, #0]
 80160f6:	4b23      	ldr	r3, [pc, #140]	; (8016184 <RadioSetRxConfig+0x3f0>)
 80160f8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80160fa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80160fe:	4b21      	ldr	r3, [pc, #132]	; (8016184 <RadioSetRxConfig+0x3f0>)
 8016100:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016104:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016108:	4b1e      	ldr	r3, [pc, #120]	; (8016184 <RadioSetRxConfig+0x3f0>)
 801610a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801610e:	f000 fbc0 	bl	8016892 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016112:	2001      	movs	r0, #1
 8016114:	f7ff fd6a 	bl	8015bec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016118:	481c      	ldr	r0, [pc, #112]	; (801618c <RadioSetRxConfig+0x3f8>)
 801611a:	f002 f983 	bl	8018424 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801611e:	481c      	ldr	r0, [pc, #112]	; (8016190 <RadioSetRxConfig+0x3fc>)
 8016120:	f002 fa52 	bl	80185c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016124:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016126:	b2db      	uxtb	r3, r3
 8016128:	4618      	mov	r0, r3
 801612a:	f001 fef0 	bl	8017f0e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801612e:	4b15      	ldr	r3, [pc, #84]	; (8016184 <RadioSetRxConfig+0x3f0>)
 8016130:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016134:	2b01      	cmp	r3, #1
 8016136:	d10d      	bne.n	8016154 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016138:	f240 7036 	movw	r0, #1846	; 0x736
 801613c:	f002 fba0 	bl	8018880 <SUBGRF_ReadRegister>
 8016140:	4603      	mov	r3, r0
 8016142:	f023 0304 	bic.w	r3, r3, #4
 8016146:	b2db      	uxtb	r3, r3
 8016148:	4619      	mov	r1, r3
 801614a:	f240 7036 	movw	r0, #1846	; 0x736
 801614e:	f002 fb83 	bl	8018858 <SUBGRF_WriteRegister>
 8016152:	e00c      	b.n	801616e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016154:	f240 7036 	movw	r0, #1846	; 0x736
 8016158:	f002 fb92 	bl	8018880 <SUBGRF_ReadRegister>
 801615c:	4603      	mov	r3, r0
 801615e:	f043 0304 	orr.w	r3, r3, #4
 8016162:	b2db      	uxtb	r3, r3
 8016164:	4619      	mov	r1, r3
 8016166:	f240 7036 	movw	r0, #1846	; 0x736
 801616a:	f002 fb75 	bl	8018858 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801616e:	4b05      	ldr	r3, [pc, #20]	; (8016184 <RadioSetRxConfig+0x3f0>)
 8016170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016174:	609a      	str	r2, [r3, #8]
            break;
 8016176:	e000      	b.n	801617a <RadioSetRxConfig+0x3e6>
            break;
 8016178:	bf00      	nop
    }
}
 801617a:	bf00      	nop
 801617c:	3728      	adds	r7, #40	; 0x28
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	20001be8 	.word	0x20001be8
 8016188:	20000138 	.word	0x20000138
 801618c:	20001c20 	.word	0x20001c20
 8016190:	20001bf6 	.word	0x20001bf6

08016194 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	60ba      	str	r2, [r7, #8]
 801619c:	607b      	str	r3, [r7, #4]
 801619e:	4603      	mov	r3, r0
 80161a0:	73fb      	strb	r3, [r7, #15]
 80161a2:	460b      	mov	r3, r1
 80161a4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80161a6:	f002 fe2e 	bl	8018e06 <RFW_DeInit>
    switch( modem )
 80161aa:	7bfb      	ldrb	r3, [r7, #15]
 80161ac:	2b04      	cmp	r3, #4
 80161ae:	f000 80c7 	beq.w	8016340 <RadioSetTxConfig+0x1ac>
 80161b2:	2b04      	cmp	r3, #4
 80161b4:	f300 80d6 	bgt.w	8016364 <RadioSetTxConfig+0x1d0>
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d002      	beq.n	80161c2 <RadioSetTxConfig+0x2e>
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d059      	beq.n	8016274 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80161c0:	e0d0      	b.n	8016364 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80161c2:	4b74      	ldr	r3, [pc, #464]	; (8016394 <RadioSetTxConfig+0x200>)
 80161c4:	2200      	movs	r2, #0
 80161c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80161ca:	4a72      	ldr	r2, [pc, #456]	; (8016394 <RadioSetTxConfig+0x200>)
 80161cc:	6a3b      	ldr	r3, [r7, #32]
 80161ce:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80161d0:	4b70      	ldr	r3, [pc, #448]	; (8016394 <RadioSetTxConfig+0x200>)
 80161d2:	220b      	movs	r2, #11
 80161d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f002 fd47 	bl	8018c6c <SUBGRF_GetFskBandwidthRegValue>
 80161de:	4603      	mov	r3, r0
 80161e0:	461a      	mov	r2, r3
 80161e2:	4b6c      	ldr	r3, [pc, #432]	; (8016394 <RadioSetTxConfig+0x200>)
 80161e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80161e8:	4a6a      	ldr	r2, [pc, #424]	; (8016394 <RadioSetTxConfig+0x200>)
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80161ee:	4b69      	ldr	r3, [pc, #420]	; (8016394 <RadioSetTxConfig+0x200>)
 80161f0:	2200      	movs	r2, #0
 80161f2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80161f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80161f6:	00db      	lsls	r3, r3, #3
 80161f8:	b29a      	uxth	r2, r3
 80161fa:	4b66      	ldr	r3, [pc, #408]	; (8016394 <RadioSetTxConfig+0x200>)
 80161fc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80161fe:	4b65      	ldr	r3, [pc, #404]	; (8016394 <RadioSetTxConfig+0x200>)
 8016200:	2204      	movs	r2, #4
 8016202:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016204:	4b63      	ldr	r3, [pc, #396]	; (8016394 <RadioSetTxConfig+0x200>)
 8016206:	2218      	movs	r2, #24
 8016208:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801620a:	4b62      	ldr	r3, [pc, #392]	; (8016394 <RadioSetTxConfig+0x200>)
 801620c:	2200      	movs	r2, #0
 801620e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016214:	f083 0301 	eor.w	r3, r3, #1
 8016218:	b2db      	uxtb	r3, r3
 801621a:	461a      	mov	r2, r3
 801621c:	4b5d      	ldr	r3, [pc, #372]	; (8016394 <RadioSetTxConfig+0x200>)
 801621e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016220:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016224:	2b00      	cmp	r3, #0
 8016226:	d003      	beq.n	8016230 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016228:	4b5a      	ldr	r3, [pc, #360]	; (8016394 <RadioSetTxConfig+0x200>)
 801622a:	22f2      	movs	r2, #242	; 0xf2
 801622c:	75da      	strb	r2, [r3, #23]
 801622e:	e002      	b.n	8016236 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016230:	4b58      	ldr	r3, [pc, #352]	; (8016394 <RadioSetTxConfig+0x200>)
 8016232:	2201      	movs	r2, #1
 8016234:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016236:	4b57      	ldr	r3, [pc, #348]	; (8016394 <RadioSetTxConfig+0x200>)
 8016238:	2201      	movs	r2, #1
 801623a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801623c:	f000 fb29 	bl	8016892 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8016240:	2000      	movs	r0, #0
 8016242:	f7ff fcd3 	bl	8015bec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016246:	4854      	ldr	r0, [pc, #336]	; (8016398 <RadioSetTxConfig+0x204>)
 8016248:	f002 f8ec 	bl	8018424 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801624c:	4853      	ldr	r0, [pc, #332]	; (801639c <RadioSetTxConfig+0x208>)
 801624e:	f002 f9bb 	bl	80185c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016252:	4a53      	ldr	r2, [pc, #332]	; (80163a0 <RadioSetTxConfig+0x20c>)
 8016254:	f107 0310 	add.w	r3, r7, #16
 8016258:	e892 0003 	ldmia.w	r2, {r0, r1}
 801625c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016260:	f107 0310 	add.w	r3, r7, #16
 8016264:	4618      	mov	r0, r3
 8016266:	f001 fc7c 	bl	8017b62 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801626a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801626e:	f001 fcc7 	bl	8017c00 <SUBGRF_SetWhiteningSeed>
            break;
 8016272:	e078      	b.n	8016366 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016274:	4b47      	ldr	r3, [pc, #284]	; (8016394 <RadioSetTxConfig+0x200>)
 8016276:	2201      	movs	r2, #1
 8016278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801627c:	6a3b      	ldr	r3, [r7, #32]
 801627e:	b2da      	uxtb	r2, r3
 8016280:	4b44      	ldr	r3, [pc, #272]	; (8016394 <RadioSetTxConfig+0x200>)
 8016282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016286:	4a47      	ldr	r2, [pc, #284]	; (80163a4 <RadioSetTxConfig+0x210>)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	4413      	add	r3, r2
 801628c:	781a      	ldrb	r2, [r3, #0]
 801628e:	4b41      	ldr	r3, [pc, #260]	; (8016394 <RadioSetTxConfig+0x200>)
 8016290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016294:	4a3f      	ldr	r2, [pc, #252]	; (8016394 <RadioSetTxConfig+0x200>)
 8016296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801629a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d105      	bne.n	80162b0 <RadioSetTxConfig+0x11c>
 80162a4:	6a3b      	ldr	r3, [r7, #32]
 80162a6:	2b0b      	cmp	r3, #11
 80162a8:	d008      	beq.n	80162bc <RadioSetTxConfig+0x128>
 80162aa:	6a3b      	ldr	r3, [r7, #32]
 80162ac:	2b0c      	cmp	r3, #12
 80162ae:	d005      	beq.n	80162bc <RadioSetTxConfig+0x128>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2b01      	cmp	r3, #1
 80162b4:	d107      	bne.n	80162c6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80162b6:	6a3b      	ldr	r3, [r7, #32]
 80162b8:	2b0c      	cmp	r3, #12
 80162ba:	d104      	bne.n	80162c6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80162bc:	4b35      	ldr	r3, [pc, #212]	; (8016394 <RadioSetTxConfig+0x200>)
 80162be:	2201      	movs	r2, #1
 80162c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80162c4:	e003      	b.n	80162ce <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80162c6:	4b33      	ldr	r3, [pc, #204]	; (8016394 <RadioSetTxConfig+0x200>)
 80162c8:	2200      	movs	r2, #0
 80162ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80162ce:	4b31      	ldr	r3, [pc, #196]	; (8016394 <RadioSetTxConfig+0x200>)
 80162d0:	2201      	movs	r2, #1
 80162d2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80162d4:	4b2f      	ldr	r3, [pc, #188]	; (8016394 <RadioSetTxConfig+0x200>)
 80162d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80162da:	2b05      	cmp	r3, #5
 80162dc:	d004      	beq.n	80162e8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80162de:	4b2d      	ldr	r3, [pc, #180]	; (8016394 <RadioSetTxConfig+0x200>)
 80162e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80162e4:	2b06      	cmp	r3, #6
 80162e6:	d10a      	bne.n	80162fe <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80162e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80162ea:	2b0b      	cmp	r3, #11
 80162ec:	d803      	bhi.n	80162f6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80162ee:	4b29      	ldr	r3, [pc, #164]	; (8016394 <RadioSetTxConfig+0x200>)
 80162f0:	220c      	movs	r2, #12
 80162f2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80162f4:	e006      	b.n	8016304 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80162f6:	4a27      	ldr	r2, [pc, #156]	; (8016394 <RadioSetTxConfig+0x200>)
 80162f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80162fa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80162fc:	e002      	b.n	8016304 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80162fe:	4a25      	ldr	r2, [pc, #148]	; (8016394 <RadioSetTxConfig+0x200>)
 8016300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016302:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016304:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016308:	4b22      	ldr	r3, [pc, #136]	; (8016394 <RadioSetTxConfig+0x200>)
 801630a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801630c:	4b26      	ldr	r3, [pc, #152]	; (80163a8 <RadioSetTxConfig+0x214>)
 801630e:	781a      	ldrb	r2, [r3, #0]
 8016310:	4b20      	ldr	r3, [pc, #128]	; (8016394 <RadioSetTxConfig+0x200>)
 8016312:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016314:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016318:	4b1e      	ldr	r3, [pc, #120]	; (8016394 <RadioSetTxConfig+0x200>)
 801631a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801631e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016322:	4b1c      	ldr	r3, [pc, #112]	; (8016394 <RadioSetTxConfig+0x200>)
 8016324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016328:	f000 fab3 	bl	8016892 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801632c:	2001      	movs	r0, #1
 801632e:	f7ff fc5d 	bl	8015bec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016332:	4819      	ldr	r0, [pc, #100]	; (8016398 <RadioSetTxConfig+0x204>)
 8016334:	f002 f876 	bl	8018424 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016338:	4818      	ldr	r0, [pc, #96]	; (801639c <RadioSetTxConfig+0x208>)
 801633a:	f002 f945 	bl	80185c8 <SUBGRF_SetPacketParams>
            break;
 801633e:	e012      	b.n	8016366 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016340:	2004      	movs	r0, #4
 8016342:	f7ff fc53 	bl	8015bec <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016346:	4b13      	ldr	r3, [pc, #76]	; (8016394 <RadioSetTxConfig+0x200>)
 8016348:	2202      	movs	r2, #2
 801634a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801634e:	4a11      	ldr	r2, [pc, #68]	; (8016394 <RadioSetTxConfig+0x200>)
 8016350:	6a3b      	ldr	r3, [r7, #32]
 8016352:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016354:	4b0f      	ldr	r3, [pc, #60]	; (8016394 <RadioSetTxConfig+0x200>)
 8016356:	2216      	movs	r2, #22
 8016358:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801635c:	480e      	ldr	r0, [pc, #56]	; (8016398 <RadioSetTxConfig+0x204>)
 801635e:	f002 f861 	bl	8018424 <SUBGRF_SetModulationParams>
            break;
 8016362:	e000      	b.n	8016366 <RadioSetTxConfig+0x1d2>
            break;
 8016364:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801636a:	4618      	mov	r0, r3
 801636c:	f002 fb90 	bl	8018a90 <SUBGRF_SetRfTxPower>
 8016370:	4603      	mov	r3, r0
 8016372:	461a      	mov	r2, r3
 8016374:	4b07      	ldr	r3, [pc, #28]	; (8016394 <RadioSetTxConfig+0x200>)
 8016376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801637a:	4b06      	ldr	r3, [pc, #24]	; (8016394 <RadioSetTxConfig+0x200>)
 801637c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016380:	4618      	mov	r0, r3
 8016382:	f002 fd54 	bl	8018e2e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016386:	4a03      	ldr	r2, [pc, #12]	; (8016394 <RadioSetTxConfig+0x200>)
 8016388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801638a:	6053      	str	r3, [r2, #4]
}
 801638c:	bf00      	nop
 801638e:	3718      	adds	r7, #24
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	20001be8 	.word	0x20001be8
 8016398:	20001c20 	.word	0x20001c20
 801639c:	20001bf6 	.word	0x20001bf6
 80163a0:	0801b3f8 	.word	0x0801b3f8
 80163a4:	0801b9d4 	.word	0x0801b9d4
 80163a8:	20000138 	.word	0x20000138

080163ac <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
    return true;
 80163b4:	2301      	movs	r3, #1
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	370c      	adds	r7, #12
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bc80      	pop	{r7}
 80163be:	4770      	bx	lr

080163c0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80163c0:	b480      	push	{r7}
 80163c2:	b085      	sub	sp, #20
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	4603      	mov	r3, r0
 80163c8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80163ca:	2300      	movs	r3, #0
 80163cc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80163ce:	79fb      	ldrb	r3, [r7, #7]
 80163d0:	2b0a      	cmp	r3, #10
 80163d2:	d83e      	bhi.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
 80163d4:	a201      	add	r2, pc, #4	; (adr r2, 80163dc <RadioGetLoRaBandwidthInHz+0x1c>)
 80163d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163da:	bf00      	nop
 80163dc:	08016409 	.word	0x08016409
 80163e0:	08016419 	.word	0x08016419
 80163e4:	08016429 	.word	0x08016429
 80163e8:	08016439 	.word	0x08016439
 80163ec:	08016441 	.word	0x08016441
 80163f0:	08016447 	.word	0x08016447
 80163f4:	0801644d 	.word	0x0801644d
 80163f8:	08016453 	.word	0x08016453
 80163fc:	08016411 	.word	0x08016411
 8016400:	08016421 	.word	0x08016421
 8016404:	08016431 	.word	0x08016431
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016408:	f641 6384 	movw	r3, #7812	; 0x1e84
 801640c:	60fb      	str	r3, [r7, #12]
        break;
 801640e:	e020      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016410:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016414:	60fb      	str	r3, [r7, #12]
        break;
 8016416:	e01c      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016418:	f643 5309 	movw	r3, #15625	; 0x3d09
 801641c:	60fb      	str	r3, [r7, #12]
        break;
 801641e:	e018      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016420:	f245 1361 	movw	r3, #20833	; 0x5161
 8016424:	60fb      	str	r3, [r7, #12]
        break;
 8016426:	e014      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016428:	f647 2312 	movw	r3, #31250	; 0x7a12
 801642c:	60fb      	str	r3, [r7, #12]
        break;
 801642e:	e010      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016430:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016434:	60fb      	str	r3, [r7, #12]
        break;
 8016436:	e00c      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016438:	f24f 4324 	movw	r3, #62500	; 0xf424
 801643c:	60fb      	str	r3, [r7, #12]
        break;
 801643e:	e008      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016440:	4b07      	ldr	r3, [pc, #28]	; (8016460 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016442:	60fb      	str	r3, [r7, #12]
        break;
 8016444:	e005      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016446:	4b07      	ldr	r3, [pc, #28]	; (8016464 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016448:	60fb      	str	r3, [r7, #12]
        break;
 801644a:	e002      	b.n	8016452 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801644c:	4b06      	ldr	r3, [pc, #24]	; (8016468 <RadioGetLoRaBandwidthInHz+0xa8>)
 801644e:	60fb      	str	r3, [r7, #12]
        break;
 8016450:	bf00      	nop
    }

    return bandwidthInHz;
 8016452:	68fb      	ldr	r3, [r7, #12]
}
 8016454:	4618      	mov	r0, r3
 8016456:	3714      	adds	r7, #20
 8016458:	46bd      	mov	sp, r7
 801645a:	bc80      	pop	{r7}
 801645c:	4770      	bx	lr
 801645e:	bf00      	nop
 8016460:	0001e848 	.word	0x0001e848
 8016464:	0003d090 	.word	0x0003d090
 8016468:	0007a120 	.word	0x0007a120

0801646c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801646c:	b480      	push	{r7}
 801646e:	b083      	sub	sp, #12
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
 8016474:	4608      	mov	r0, r1
 8016476:	4611      	mov	r1, r2
 8016478:	461a      	mov	r2, r3
 801647a:	4603      	mov	r3, r0
 801647c:	70fb      	strb	r3, [r7, #3]
 801647e:	460b      	mov	r3, r1
 8016480:	803b      	strh	r3, [r7, #0]
 8016482:	4613      	mov	r3, r2
 8016484:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016486:	883b      	ldrh	r3, [r7, #0]
 8016488:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801648a:	78ba      	ldrb	r2, [r7, #2]
 801648c:	f082 0201 	eor.w	r2, r2, #1
 8016490:	b2d2      	uxtb	r2, r2
 8016492:	2a00      	cmp	r2, #0
 8016494:	d001      	beq.n	801649a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016496:	2208      	movs	r2, #8
 8016498:	e000      	b.n	801649c <RadioGetGfskTimeOnAirNumerator+0x30>
 801649a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801649c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801649e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80164a2:	7c3b      	ldrb	r3, [r7, #16]
 80164a4:	7d39      	ldrb	r1, [r7, #20]
 80164a6:	2900      	cmp	r1, #0
 80164a8:	d001      	beq.n	80164ae <RadioGetGfskTimeOnAirNumerator+0x42>
 80164aa:	2102      	movs	r1, #2
 80164ac:	e000      	b.n	80164b0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80164ae:	2100      	movs	r1, #0
 80164b0:	440b      	add	r3, r1
 80164b2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80164b4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80164b6:	4618      	mov	r0, r3
 80164b8:	370c      	adds	r7, #12
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bc80      	pop	{r7}
 80164be:	4770      	bx	lr

080164c0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80164c0:	b480      	push	{r7}
 80164c2:	b08b      	sub	sp, #44	; 0x2c
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60f8      	str	r0, [r7, #12]
 80164c8:	60b9      	str	r1, [r7, #8]
 80164ca:	4611      	mov	r1, r2
 80164cc:	461a      	mov	r2, r3
 80164ce:	460b      	mov	r3, r1
 80164d0:	71fb      	strb	r3, [r7, #7]
 80164d2:	4613      	mov	r3, r2
 80164d4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80164d6:	79fb      	ldrb	r3, [r7, #7]
 80164d8:	3304      	adds	r3, #4
 80164da:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80164dc:	2300      	movs	r3, #0
 80164de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	2b05      	cmp	r3, #5
 80164e6:	d002      	beq.n	80164ee <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	2b06      	cmp	r3, #6
 80164ec:	d104      	bne.n	80164f8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80164ee:	88bb      	ldrh	r3, [r7, #4]
 80164f0:	2b0b      	cmp	r3, #11
 80164f2:	d801      	bhi.n	80164f8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80164f4:	230c      	movs	r3, #12
 80164f6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d105      	bne.n	801650a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	2b0b      	cmp	r3, #11
 8016502:	d008      	beq.n	8016516 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	2b0c      	cmp	r3, #12
 8016508:	d005      	beq.n	8016516 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	2b01      	cmp	r3, #1
 801650e:	d105      	bne.n	801651c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	2b0c      	cmp	r3, #12
 8016514:	d102      	bne.n	801651c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016516:	2301      	movs	r3, #1
 8016518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801651c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016520:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016526:	2a00      	cmp	r2, #0
 8016528:	d001      	beq.n	801652e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801652a:	2210      	movs	r2, #16
 801652c:	e000      	b.n	8016530 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801652e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016530:	4413      	add	r3, r2
 8016532:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016538:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801653a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801653e:	2a00      	cmp	r2, #0
 8016540:	d001      	beq.n	8016546 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016542:	2200      	movs	r2, #0
 8016544:	e000      	b.n	8016548 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016546:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016548:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801654a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	2b06      	cmp	r3, #6
 8016550:	d803      	bhi.n	801655a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016552:	68bb      	ldr	r3, [r7, #8]
 8016554:	009b      	lsls	r3, r3, #2
 8016556:	623b      	str	r3, [r7, #32]
 8016558:	e00e      	b.n	8016578 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801655a:	69fb      	ldr	r3, [r7, #28]
 801655c:	3308      	adds	r3, #8
 801655e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016564:	2b00      	cmp	r3, #0
 8016566:	d004      	beq.n	8016572 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	3b02      	subs	r3, #2
 801656c:	009b      	lsls	r3, r3, #2
 801656e:	623b      	str	r3, [r7, #32]
 8016570:	e002      	b.n	8016578 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	009b      	lsls	r3, r3, #2
 8016576:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016578:	69fb      	ldr	r3, [r7, #28]
 801657a:	2b00      	cmp	r3, #0
 801657c:	da01      	bge.n	8016582 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801657e:	2300      	movs	r3, #0
 8016580:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8016582:	69fa      	ldr	r2, [r7, #28]
 8016584:	6a3b      	ldr	r3, [r7, #32]
 8016586:	4413      	add	r3, r2
 8016588:	1e5a      	subs	r2, r3, #1
 801658a:	6a3b      	ldr	r3, [r7, #32]
 801658c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016590:	697a      	ldr	r2, [r7, #20]
 8016592:	fb03 f202 	mul.w	r2, r3, r2
 8016596:	88bb      	ldrh	r3, [r7, #4]
 8016598:	4413      	add	r3, r2
    int32_t intermediate =
 801659a:	330c      	adds	r3, #12
 801659c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	2b06      	cmp	r3, #6
 80165a2:	d802      	bhi.n	80165aa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80165a4:	69bb      	ldr	r3, [r7, #24]
 80165a6:	3302      	adds	r3, #2
 80165a8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	009b      	lsls	r3, r3, #2
 80165ae:	1c5a      	adds	r2, r3, #1
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	3b02      	subs	r3, #2
 80165b4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	372c      	adds	r7, #44	; 0x2c
 80165bc:	46bd      	mov	sp, r7
 80165be:	bc80      	pop	{r7}
 80165c0:	4770      	bx	lr
	...

080165c4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b08a      	sub	sp, #40	; 0x28
 80165c8:	af04      	add	r7, sp, #16
 80165ca:	60b9      	str	r1, [r7, #8]
 80165cc:	607a      	str	r2, [r7, #4]
 80165ce:	461a      	mov	r2, r3
 80165d0:	4603      	mov	r3, r0
 80165d2:	73fb      	strb	r3, [r7, #15]
 80165d4:	4613      	mov	r3, r2
 80165d6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80165d8:	2300      	movs	r3, #0
 80165da:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80165dc:	2301      	movs	r3, #1
 80165de:	613b      	str	r3, [r7, #16]

    switch( modem )
 80165e0:	7bfb      	ldrb	r3, [r7, #15]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d002      	beq.n	80165ec <RadioTimeOnAir+0x28>
 80165e6:	2b01      	cmp	r3, #1
 80165e8:	d017      	beq.n	801661a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80165ea:	e035      	b.n	8016658 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80165ec:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80165f0:	8c3a      	ldrh	r2, [r7, #32]
 80165f2:	7bb9      	ldrb	r1, [r7, #14]
 80165f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80165f8:	9301      	str	r3, [sp, #4]
 80165fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	4603      	mov	r3, r0
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7ff ff32 	bl	801646c <RadioGetGfskTimeOnAirNumerator>
 8016608:	4603      	mov	r3, r0
 801660a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801660e:	fb02 f303 	mul.w	r3, r2, r3
 8016612:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	613b      	str	r3, [r7, #16]
        break;
 8016618:	e01e      	b.n	8016658 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801661a:	8c39      	ldrh	r1, [r7, #32]
 801661c:	7bba      	ldrb	r2, [r7, #14]
 801661e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016622:	9302      	str	r3, [sp, #8]
 8016624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016628:	9301      	str	r3, [sp, #4]
 801662a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	460b      	mov	r3, r1
 8016632:	6879      	ldr	r1, [r7, #4]
 8016634:	68b8      	ldr	r0, [r7, #8]
 8016636:	f7ff ff43 	bl	80164c0 <RadioGetLoRaTimeOnAirNumerator>
 801663a:	4603      	mov	r3, r0
 801663c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016640:	fb02 f303 	mul.w	r3, r2, r3
 8016644:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8016646:	4a0a      	ldr	r2, [pc, #40]	; (8016670 <RadioTimeOnAir+0xac>)
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	4413      	add	r3, r2
 801664c:	781b      	ldrb	r3, [r3, #0]
 801664e:	4618      	mov	r0, r3
 8016650:	f7ff feb6 	bl	80163c0 <RadioGetLoRaBandwidthInHz>
 8016654:	6138      	str	r0, [r7, #16]
        break;
 8016656:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8016658:	697a      	ldr	r2, [r7, #20]
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	4413      	add	r3, r2
 801665e:	1e5a      	subs	r2, r3, #1
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016666:	4618      	mov	r0, r3
 8016668:	3718      	adds	r7, #24
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
 801666e:	bf00      	nop
 8016670:	0801b9d4 	.word	0x0801b9d4

08016674 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	460b      	mov	r3, r1
 801667e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8016680:	2300      	movs	r3, #0
 8016682:	2200      	movs	r2, #0
 8016684:	f240 2101 	movw	r1, #513	; 0x201
 8016688:	f240 2001 	movw	r0, #513	; 0x201
 801668c:	f001 fd34 	bl	80180f8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8016690:	4b71      	ldr	r3, [pc, #452]	; (8016858 <RadioSend+0x1e4>)
 8016692:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016696:	2101      	movs	r1, #1
 8016698:	4618      	mov	r0, r3
 801669a:	f002 f9d1 	bl	8018a40 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801669e:	4b6e      	ldr	r3, [pc, #440]	; (8016858 <RadioSend+0x1e4>)
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	2b01      	cmp	r3, #1
 80166a4:	d112      	bne.n	80166cc <RadioSend+0x58>
 80166a6:	4b6c      	ldr	r3, [pc, #432]	; (8016858 <RadioSend+0x1e4>)
 80166a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80166ac:	2b06      	cmp	r3, #6
 80166ae:	d10d      	bne.n	80166cc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80166b0:	f640 0089 	movw	r0, #2185	; 0x889
 80166b4:	f002 f8e4 	bl	8018880 <SUBGRF_ReadRegister>
 80166b8:	4603      	mov	r3, r0
 80166ba:	f023 0304 	bic.w	r3, r3, #4
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	4619      	mov	r1, r3
 80166c2:	f640 0089 	movw	r0, #2185	; 0x889
 80166c6:	f002 f8c7 	bl	8018858 <SUBGRF_WriteRegister>
 80166ca:	e00c      	b.n	80166e6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80166cc:	f640 0089 	movw	r0, #2185	; 0x889
 80166d0:	f002 f8d6 	bl	8018880 <SUBGRF_ReadRegister>
 80166d4:	4603      	mov	r3, r0
 80166d6:	f043 0304 	orr.w	r3, r3, #4
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	4619      	mov	r1, r3
 80166de:	f640 0089 	movw	r0, #2185	; 0x889
 80166e2:	f002 f8b9 	bl	8018858 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80166e6:	4b5c      	ldr	r3, [pc, #368]	; (8016858 <RadioSend+0x1e4>)
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	2b04      	cmp	r3, #4
 80166ec:	f200 80a7 	bhi.w	801683e <RadioSend+0x1ca>
 80166f0:	a201      	add	r2, pc, #4	; (adr r2, 80166f8 <RadioSend+0x84>)
 80166f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166f6:	bf00      	nop
 80166f8:	08016727 	.word	0x08016727
 80166fc:	0801670d 	.word	0x0801670d
 8016700:	08016727 	.word	0x08016727
 8016704:	08016787 	.word	0x08016787
 8016708:	080167a7 	.word	0x080167a7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801670c:	4a52      	ldr	r2, [pc, #328]	; (8016858 <RadioSend+0x1e4>)
 801670e:	78fb      	ldrb	r3, [r7, #3]
 8016710:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016712:	4852      	ldr	r0, [pc, #328]	; (801685c <RadioSend+0x1e8>)
 8016714:	f001 ff58 	bl	80185c8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8016718:	78fb      	ldrb	r3, [r7, #3]
 801671a:	2200      	movs	r2, #0
 801671c:	4619      	mov	r1, r3
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f001 fa0c 	bl	8017b3c <SUBGRF_SendPayload>
            break;
 8016724:	e08c      	b.n	8016840 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8016726:	f002 fb74 	bl	8018e12 <RFW_Is_Init>
 801672a:	4603      	mov	r3, r0
 801672c:	2b01      	cmp	r3, #1
 801672e:	d11d      	bne.n	801676c <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8016730:	f107 020d 	add.w	r2, r7, #13
 8016734:	78fb      	ldrb	r3, [r7, #3]
 8016736:	4619      	mov	r1, r3
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f002 fb82 	bl	8018e42 <RFW_TransmitInit>
 801673e:	4603      	mov	r3, r0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d10c      	bne.n	801675e <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8016744:	7b7a      	ldrb	r2, [r7, #13]
 8016746:	4b44      	ldr	r3, [pc, #272]	; (8016858 <RadioSend+0x1e4>)
 8016748:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801674a:	4844      	ldr	r0, [pc, #272]	; (801685c <RadioSend+0x1e8>)
 801674c:	f001 ff3c 	bl	80185c8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8016750:	7b7b      	ldrb	r3, [r7, #13]
 8016752:	2200      	movs	r2, #0
 8016754:	4619      	mov	r1, r3
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f001 f9f0 	bl	8017b3c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801675c:	e070      	b.n	8016840 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801675e:	4b40      	ldr	r3, [pc, #256]	; (8016860 <RadioSend+0x1ec>)
 8016760:	2201      	movs	r2, #1
 8016762:	2100      	movs	r1, #0
 8016764:	2002      	movs	r0, #2
 8016766:	f003 fc91 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
 801676a:	e072      	b.n	8016852 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801676c:	4a3a      	ldr	r2, [pc, #232]	; (8016858 <RadioSend+0x1e4>)
 801676e:	78fb      	ldrb	r3, [r7, #3]
 8016770:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016772:	483a      	ldr	r0, [pc, #232]	; (801685c <RadioSend+0x1e8>)
 8016774:	f001 ff28 	bl	80185c8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8016778:	78fb      	ldrb	r3, [r7, #3]
 801677a:	2200      	movs	r2, #0
 801677c:	4619      	mov	r1, r3
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f001 f9dc 	bl	8017b3c <SUBGRF_SendPayload>
            break;
 8016784:	e05c      	b.n	8016840 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8016786:	4b34      	ldr	r3, [pc, #208]	; (8016858 <RadioSend+0x1e4>)
 8016788:	2202      	movs	r2, #2
 801678a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801678c:	4a32      	ldr	r2, [pc, #200]	; (8016858 <RadioSend+0x1e4>)
 801678e:	78fb      	ldrb	r3, [r7, #3]
 8016790:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016792:	4832      	ldr	r0, [pc, #200]	; (801685c <RadioSend+0x1e8>)
 8016794:	f001 ff18 	bl	80185c8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8016798:	78fb      	ldrb	r3, [r7, #3]
 801679a:	2200      	movs	r2, #0
 801679c:	4619      	mov	r1, r3
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f001 f9cc 	bl	8017b3c <SUBGRF_SendPayload>
            break;
 80167a4:	e04c      	b.n	8016840 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80167a6:	78fb      	ldrb	r3, [r7, #3]
 80167a8:	461a      	mov	r2, r3
 80167aa:	6879      	ldr	r1, [r7, #4]
 80167ac:	482d      	ldr	r0, [pc, #180]	; (8016864 <RadioSend+0x1f0>)
 80167ae:	f000 fcbc 	bl	801712a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80167b2:	4b29      	ldr	r3, [pc, #164]	; (8016858 <RadioSend+0x1e4>)
 80167b4:	2202      	movs	r2, #2
 80167b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80167b8:	78fb      	ldrb	r3, [r7, #3]
 80167ba:	3301      	adds	r3, #1
 80167bc:	b2da      	uxtb	r2, r3
 80167be:	4b26      	ldr	r3, [pc, #152]	; (8016858 <RadioSend+0x1e4>)
 80167c0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80167c2:	4826      	ldr	r0, [pc, #152]	; (801685c <RadioSend+0x1e8>)
 80167c4:	f001 ff00 	bl	80185c8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80167c8:	2100      	movs	r1, #0
 80167ca:	20f1      	movs	r0, #241	; 0xf1
 80167cc:	f000 f95d 	bl	8016a8a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80167d0:	2100      	movs	r1, #0
 80167d2:	20f0      	movs	r0, #240	; 0xf0
 80167d4:	f000 f959 	bl	8016a8a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80167d8:	4b1f      	ldr	r3, [pc, #124]	; (8016858 <RadioSend+0x1e4>)
 80167da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80167dc:	2b64      	cmp	r3, #100	; 0x64
 80167de:	d108      	bne.n	80167f2 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80167e0:	2170      	movs	r1, #112	; 0x70
 80167e2:	20f3      	movs	r0, #243	; 0xf3
 80167e4:	f000 f951 	bl	8016a8a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80167e8:	211d      	movs	r1, #29
 80167ea:	20f2      	movs	r0, #242	; 0xf2
 80167ec:	f000 f94d 	bl	8016a8a <RadioWrite>
 80167f0:	e007      	b.n	8016802 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80167f2:	21e1      	movs	r1, #225	; 0xe1
 80167f4:	20f3      	movs	r0, #243	; 0xf3
 80167f6:	f000 f948 	bl	8016a8a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80167fa:	2104      	movs	r1, #4
 80167fc:	20f2      	movs	r0, #242	; 0xf2
 80167fe:	f000 f944 	bl	8016a8a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8016802:	78fb      	ldrb	r3, [r7, #3]
 8016804:	b29b      	uxth	r3, r3
 8016806:	00db      	lsls	r3, r3, #3
 8016808:	b29b      	uxth	r3, r3
 801680a:	3302      	adds	r3, #2
 801680c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801680e:	89fb      	ldrh	r3, [r7, #14]
 8016810:	0a1b      	lsrs	r3, r3, #8
 8016812:	b29b      	uxth	r3, r3
 8016814:	b2db      	uxtb	r3, r3
 8016816:	4619      	mov	r1, r3
 8016818:	20f4      	movs	r0, #244	; 0xf4
 801681a:	f000 f936 	bl	8016a8a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801681e:	89fb      	ldrh	r3, [r7, #14]
 8016820:	b2db      	uxtb	r3, r3
 8016822:	4619      	mov	r1, r3
 8016824:	20f5      	movs	r0, #245	; 0xf5
 8016826:	f000 f930 	bl	8016a8a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801682a:	78fb      	ldrb	r3, [r7, #3]
 801682c:	3301      	adds	r3, #1
 801682e:	b2db      	uxtb	r3, r3
 8016830:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8016834:	4619      	mov	r1, r3
 8016836:	480b      	ldr	r0, [pc, #44]	; (8016864 <RadioSend+0x1f0>)
 8016838:	f001 f980 	bl	8017b3c <SUBGRF_SendPayload>
            break;
 801683c:	e000      	b.n	8016840 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801683e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8016840:	4b05      	ldr	r3, [pc, #20]	; (8016858 <RadioSend+0x1e4>)
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	4619      	mov	r1, r3
 8016846:	4808      	ldr	r0, [pc, #32]	; (8016868 <RadioSend+0x1f4>)
 8016848:	f003 fa86 	bl	8019d58 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801684c:	4806      	ldr	r0, [pc, #24]	; (8016868 <RadioSend+0x1f4>)
 801684e:	f003 f9a5 	bl	8019b9c <UTIL_TIMER_Start>
}
 8016852:	3710      	adds	r7, #16
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}
 8016858:	20001be8 	.word	0x20001be8
 801685c:	20001bf6 	.word	0x20001bf6
 8016860:	0801b400 	.word	0x0801b400
 8016864:	20001ae4 	.word	0x20001ae4
 8016868:	20001c44 	.word	0x20001c44

0801686c <RadioSleep>:

static void RadioSleep( void )
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8016872:	2300      	movs	r3, #0
 8016874:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8016876:	793b      	ldrb	r3, [r7, #4]
 8016878:	f043 0304 	orr.w	r3, r3, #4
 801687c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801687e:	7938      	ldrb	r0, [r7, #4]
 8016880:	f001 fa38 	bl	8017cf4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8016884:	2002      	movs	r0, #2
 8016886:	f7eb f9b3 	bl	8001bf0 <HAL_Delay>
}
 801688a:	bf00      	nop
 801688c:	3708      	adds	r7, #8
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}

08016892 <RadioStandby>:

static void RadioStandby( void )
{
 8016892:	b580      	push	{r7, lr}
 8016894:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8016896:	2000      	movs	r0, #0
 8016898:	f001 fa5e 	bl	8017d58 <SUBGRF_SetStandby>
}
 801689c:	bf00      	nop
 801689e:	bd80      	pop	{r7, pc}

080168a0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80168a8:	f002 fab3 	bl	8018e12 <RFW_Is_Init>
 80168ac:	4603      	mov	r3, r0
 80168ae:	2b01      	cmp	r3, #1
 80168b0:	d102      	bne.n	80168b8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80168b2:	f002 fad6 	bl	8018e62 <RFW_ReceiveInit>
 80168b6:	e007      	b.n	80168c8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80168b8:	2300      	movs	r3, #0
 80168ba:	2200      	movs	r2, #0
 80168bc:	f240 2162 	movw	r1, #610	; 0x262
 80168c0:	f240 2062 	movw	r0, #610	; 0x262
 80168c4:	f001 fc18 	bl	80180f8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d006      	beq.n	80168dc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80168ce:	6879      	ldr	r1, [r7, #4]
 80168d0:	4811      	ldr	r0, [pc, #68]	; (8016918 <RadioRx+0x78>)
 80168d2:	f003 fa41 	bl	8019d58 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80168d6:	4810      	ldr	r0, [pc, #64]	; (8016918 <RadioRx+0x78>)
 80168d8:	f003 f960 	bl	8019b9c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80168dc:	4b0f      	ldr	r3, [pc, #60]	; (801691c <RadioRx+0x7c>)
 80168de:	2200      	movs	r2, #0
 80168e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80168e2:	4b0e      	ldr	r3, [pc, #56]	; (801691c <RadioRx+0x7c>)
 80168e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80168e8:	2100      	movs	r1, #0
 80168ea:	4618      	mov	r0, r3
 80168ec:	f002 f8a8 	bl	8018a40 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80168f0:	4b0a      	ldr	r3, [pc, #40]	; (801691c <RadioRx+0x7c>)
 80168f2:	785b      	ldrb	r3, [r3, #1]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d004      	beq.n	8016902 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80168f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80168fc:	f001 fa68 	bl	8017dd0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8016900:	e005      	b.n	801690e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8016902:	4b06      	ldr	r3, [pc, #24]	; (801691c <RadioRx+0x7c>)
 8016904:	689b      	ldr	r3, [r3, #8]
 8016906:	019b      	lsls	r3, r3, #6
 8016908:	4618      	mov	r0, r3
 801690a:	f001 fa61 	bl	8017dd0 <SUBGRF_SetRx>
}
 801690e:	bf00      	nop
 8016910:	3708      	adds	r7, #8
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	20001c5c 	.word	0x20001c5c
 801691c:	20001be8 	.word	0x20001be8

08016920 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8016928:	f002 fa73 	bl	8018e12 <RFW_Is_Init>
 801692c:	4603      	mov	r3, r0
 801692e:	2b01      	cmp	r3, #1
 8016930:	d102      	bne.n	8016938 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8016932:	f002 fa96 	bl	8018e62 <RFW_ReceiveInit>
 8016936:	e007      	b.n	8016948 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8016938:	2300      	movs	r3, #0
 801693a:	2200      	movs	r2, #0
 801693c:	f240 2162 	movw	r1, #610	; 0x262
 8016940:	f240 2062 	movw	r0, #610	; 0x262
 8016944:	f001 fbd8 	bl	80180f8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d006      	beq.n	801695c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801694e:	6879      	ldr	r1, [r7, #4]
 8016950:	4811      	ldr	r0, [pc, #68]	; (8016998 <RadioRxBoosted+0x78>)
 8016952:	f003 fa01 	bl	8019d58 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8016956:	4810      	ldr	r0, [pc, #64]	; (8016998 <RadioRxBoosted+0x78>)
 8016958:	f003 f920 	bl	8019b9c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801695c:	4b0f      	ldr	r3, [pc, #60]	; (801699c <RadioRxBoosted+0x7c>)
 801695e:	2200      	movs	r2, #0
 8016960:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8016962:	4b0e      	ldr	r3, [pc, #56]	; (801699c <RadioRxBoosted+0x7c>)
 8016964:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016968:	2100      	movs	r1, #0
 801696a:	4618      	mov	r0, r3
 801696c:	f002 f868 	bl	8018a40 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8016970:	4b0a      	ldr	r3, [pc, #40]	; (801699c <RadioRxBoosted+0x7c>)
 8016972:	785b      	ldrb	r3, [r3, #1]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d004      	beq.n	8016982 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8016978:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801697c:	f001 fa48 	bl	8017e10 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8016980:	e005      	b.n	801698e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8016982:	4b06      	ldr	r3, [pc, #24]	; (801699c <RadioRxBoosted+0x7c>)
 8016984:	689b      	ldr	r3, [r3, #8]
 8016986:	019b      	lsls	r3, r3, #6
 8016988:	4618      	mov	r0, r3
 801698a:	f001 fa41 	bl	8017e10 <SUBGRF_SetRxBoosted>
}
 801698e:	bf00      	nop
 8016990:	3708      	adds	r7, #8
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	20001c5c 	.word	0x20001c5c
 801699c:	20001be8 	.word	0x20001be8

080169a0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	005a      	lsls	r2, r3, #1
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	4413      	add	r3, r2
 80169b2:	4a0c      	ldr	r2, [pc, #48]	; (80169e4 <RadioSetRxDutyCycle+0x44>)
 80169b4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80169b6:	2300      	movs	r3, #0
 80169b8:	2200      	movs	r2, #0
 80169ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80169be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80169c2:	f001 fb99 	bl	80180f8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80169c6:	4b07      	ldr	r3, [pc, #28]	; (80169e4 <RadioSetRxDutyCycle+0x44>)
 80169c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80169cc:	2100      	movs	r1, #0
 80169ce:	4618      	mov	r0, r3
 80169d0:	f002 f836 	bl	8018a40 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80169d4:	6839      	ldr	r1, [r7, #0]
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f001 fa3e 	bl	8017e58 <SUBGRF_SetRxDutyCycle>
}
 80169dc:	bf00      	nop
 80169de:	3708      	adds	r7, #8
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	20001be8 	.word	0x20001be8

080169e8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80169ec:	4b09      	ldr	r3, [pc, #36]	; (8016a14 <RadioStartCad+0x2c>)
 80169ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80169f2:	2100      	movs	r1, #0
 80169f4:	4618      	mov	r0, r3
 80169f6:	f002 f823 	bl	8018a40 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80169fa:	2300      	movs	r3, #0
 80169fc:	2200      	movs	r2, #0
 80169fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8016a02:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8016a06:	f001 fb77 	bl	80180f8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8016a0a:	f001 fa51 	bl	8017eb0 <SUBGRF_SetCad>
}
 8016a0e:	bf00      	nop
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20001be8 	.word	0x20001be8

08016a18 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	460b      	mov	r3, r1
 8016a22:	70fb      	strb	r3, [r7, #3]
 8016a24:	4613      	mov	r3, r2
 8016a26:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8016a28:	883b      	ldrh	r3, [r7, #0]
 8016a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016a2e:	fb02 f303 	mul.w	r3, r2, r3
 8016a32:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f001 fbbb 	bl	80181b0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8016a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f002 f826 	bl	8018a90 <SUBGRF_SetRfTxPower>
 8016a44:	4603      	mov	r3, r0
 8016a46:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8016a48:	7afb      	ldrb	r3, [r7, #11]
 8016a4a:	2101      	movs	r1, #1
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f001 fff7 	bl	8018a40 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8016a52:	f001 fa3b 	bl	8017ecc <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8016a56:	68f9      	ldr	r1, [r7, #12]
 8016a58:	4804      	ldr	r0, [pc, #16]	; (8016a6c <RadioSetTxContinuousWave+0x54>)
 8016a5a:	f003 f97d 	bl	8019d58 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8016a5e:	4803      	ldr	r0, [pc, #12]	; (8016a6c <RadioSetTxContinuousWave+0x54>)
 8016a60:	f003 f89c 	bl	8019b9c <UTIL_TIMER_Start>
}
 8016a64:	bf00      	nop
 8016a66:	3710      	adds	r7, #16
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}
 8016a6c:	20001c44 	.word	0x20001c44

08016a70 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	4603      	mov	r3, r0
 8016a78:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8016a7a:	f001 fe5a 	bl	8018732 <SUBGRF_GetRssiInst>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	b21b      	sxth	r3, r3
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3708      	adds	r7, #8
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}

08016a8a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8016a8a:	b580      	push	{r7, lr}
 8016a8c:	b082      	sub	sp, #8
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	4603      	mov	r3, r0
 8016a92:	460a      	mov	r2, r1
 8016a94:	80fb      	strh	r3, [r7, #6]
 8016a96:	4613      	mov	r3, r2
 8016a98:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8016a9a:	797a      	ldrb	r2, [r7, #5]
 8016a9c:	88fb      	ldrh	r3, [r7, #6]
 8016a9e:	4611      	mov	r1, r2
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f001 fed9 	bl	8018858 <SUBGRF_WriteRegister>
}
 8016aa6:	bf00      	nop
 8016aa8:	3708      	adds	r7, #8
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}

08016aae <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8016aae:	b580      	push	{r7, lr}
 8016ab0:	b082      	sub	sp, #8
 8016ab2:	af00      	add	r7, sp, #0
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8016ab8:	88fb      	ldrh	r3, [r7, #6]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f001 fee0 	bl	8018880 <SUBGRF_ReadRegister>
 8016ac0:	4603      	mov	r3, r0
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3708      	adds	r7, #8
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}

08016aca <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8016aca:	b580      	push	{r7, lr}
 8016acc:	b082      	sub	sp, #8
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	6039      	str	r1, [r7, #0]
 8016ad4:	80fb      	strh	r3, [r7, #6]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8016ada:	797b      	ldrb	r3, [r7, #5]
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	88fb      	ldrh	r3, [r7, #6]
 8016ae0:	6839      	ldr	r1, [r7, #0]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f001 fee0 	bl	80188a8 <SUBGRF_WriteRegisters>
}
 8016ae8:	bf00      	nop
 8016aea:	3708      	adds	r7, #8
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	4603      	mov	r3, r0
 8016af8:	6039      	str	r1, [r7, #0]
 8016afa:	80fb      	strh	r3, [r7, #6]
 8016afc:	4613      	mov	r3, r2
 8016afe:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8016b00:	797b      	ldrb	r3, [r7, #5]
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	88fb      	ldrh	r3, [r7, #6]
 8016b06:	6839      	ldr	r1, [r7, #0]
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f001 feef 	bl	80188ec <SUBGRF_ReadRegisters>
}
 8016b0e:	bf00      	nop
 8016b10:	3708      	adds	r7, #8
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
	...

08016b18 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	4603      	mov	r3, r0
 8016b20:	460a      	mov	r2, r1
 8016b22:	71fb      	strb	r3, [r7, #7]
 8016b24:	4613      	mov	r3, r2
 8016b26:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8016b28:	79fb      	ldrb	r3, [r7, #7]
 8016b2a:	2b01      	cmp	r3, #1
 8016b2c:	d10a      	bne.n	8016b44 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8016b2e:	4a0e      	ldr	r2, [pc, #56]	; (8016b68 <RadioSetMaxPayloadLength+0x50>)
 8016b30:	79bb      	ldrb	r3, [r7, #6]
 8016b32:	7013      	strb	r3, [r2, #0]
 8016b34:	4b0c      	ldr	r3, [pc, #48]	; (8016b68 <RadioSetMaxPayloadLength+0x50>)
 8016b36:	781a      	ldrb	r2, [r3, #0]
 8016b38:	4b0c      	ldr	r3, [pc, #48]	; (8016b6c <RadioSetMaxPayloadLength+0x54>)
 8016b3a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b3c:	480c      	ldr	r0, [pc, #48]	; (8016b70 <RadioSetMaxPayloadLength+0x58>)
 8016b3e:	f001 fd43 	bl	80185c8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8016b42:	e00d      	b.n	8016b60 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8016b44:	4b09      	ldr	r3, [pc, #36]	; (8016b6c <RadioSetMaxPayloadLength+0x54>)
 8016b46:	7d5b      	ldrb	r3, [r3, #21]
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d109      	bne.n	8016b60 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8016b4c:	4a06      	ldr	r2, [pc, #24]	; (8016b68 <RadioSetMaxPayloadLength+0x50>)
 8016b4e:	79bb      	ldrb	r3, [r7, #6]
 8016b50:	7013      	strb	r3, [r2, #0]
 8016b52:	4b05      	ldr	r3, [pc, #20]	; (8016b68 <RadioSetMaxPayloadLength+0x50>)
 8016b54:	781a      	ldrb	r2, [r3, #0]
 8016b56:	4b05      	ldr	r3, [pc, #20]	; (8016b6c <RadioSetMaxPayloadLength+0x54>)
 8016b58:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b5a:	4805      	ldr	r0, [pc, #20]	; (8016b70 <RadioSetMaxPayloadLength+0x58>)
 8016b5c:	f001 fd34 	bl	80185c8 <SUBGRF_SetPacketParams>
}
 8016b60:	bf00      	nop
 8016b62:	3708      	adds	r7, #8
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}
 8016b68:	20000138 	.word	0x20000138
 8016b6c:	20001be8 	.word	0x20001be8
 8016b70:	20001bf6 	.word	0x20001bf6

08016b74 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8016b7e:	4a13      	ldr	r2, [pc, #76]	; (8016bcc <RadioSetPublicNetwork+0x58>)
 8016b80:	79fb      	ldrb	r3, [r7, #7]
 8016b82:	7313      	strb	r3, [r2, #12]
 8016b84:	4b11      	ldr	r3, [pc, #68]	; (8016bcc <RadioSetPublicNetwork+0x58>)
 8016b86:	7b1a      	ldrb	r2, [r3, #12]
 8016b88:	4b10      	ldr	r3, [pc, #64]	; (8016bcc <RadioSetPublicNetwork+0x58>)
 8016b8a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8016b8c:	2001      	movs	r0, #1
 8016b8e:	f7ff f82d 	bl	8015bec <RadioSetModem>
    if( enable == true )
 8016b92:	79fb      	ldrb	r3, [r7, #7]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d00a      	beq.n	8016bae <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8016b98:	2134      	movs	r1, #52	; 0x34
 8016b9a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8016b9e:	f001 fe5b 	bl	8018858 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8016ba2:	2144      	movs	r1, #68	; 0x44
 8016ba4:	f240 7041 	movw	r0, #1857	; 0x741
 8016ba8:	f001 fe56 	bl	8018858 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8016bac:	e009      	b.n	8016bc2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8016bae:	2114      	movs	r1, #20
 8016bb0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8016bb4:	f001 fe50 	bl	8018858 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8016bb8:	2124      	movs	r1, #36	; 0x24
 8016bba:	f240 7041 	movw	r0, #1857	; 0x741
 8016bbe:	f001 fe4b 	bl	8018858 <SUBGRF_WriteRegister>
}
 8016bc2:	bf00      	nop
 8016bc4:	3708      	adds	r7, #8
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	20001be8 	.word	0x20001be8

08016bd0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8016bd4:	f001 ff90 	bl	8018af8 <SUBGRF_GetRadioWakeUpTime>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	3303      	adds	r3, #3
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8016be8:	f000 f80e 	bl	8016c08 <RadioOnTxTimeoutProcess>
}
 8016bec:	bf00      	nop
 8016bee:	3708      	adds	r7, #8
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8016bfc:	f000 f818 	bl	8016c30 <RadioOnRxTimeoutProcess>
}
 8016c00:	bf00      	nop
 8016c02:	3708      	adds	r7, #8
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016c0c:	4b07      	ldr	r3, [pc, #28]	; (8016c2c <RadioOnTxTimeoutProcess+0x24>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d008      	beq.n	8016c26 <RadioOnTxTimeoutProcess+0x1e>
 8016c14:	4b05      	ldr	r3, [pc, #20]	; (8016c2c <RadioOnTxTimeoutProcess+0x24>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d003      	beq.n	8016c26 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8016c1e:	4b03      	ldr	r3, [pc, #12]	; (8016c2c <RadioOnTxTimeoutProcess+0x24>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	685b      	ldr	r3, [r3, #4]
 8016c24:	4798      	blx	r3
    }
}
 8016c26:	bf00      	nop
 8016c28:	bd80      	pop	{r7, pc}
 8016c2a:	bf00      	nop
 8016c2c:	20001be4 	.word	0x20001be4

08016c30 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016c34:	4b07      	ldr	r3, [pc, #28]	; (8016c54 <RadioOnRxTimeoutProcess+0x24>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d008      	beq.n	8016c4e <RadioOnRxTimeoutProcess+0x1e>
 8016c3c:	4b05      	ldr	r3, [pc, #20]	; (8016c54 <RadioOnRxTimeoutProcess+0x24>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d003      	beq.n	8016c4e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8016c46:	4b03      	ldr	r3, [pc, #12]	; (8016c54 <RadioOnRxTimeoutProcess+0x24>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	68db      	ldr	r3, [r3, #12]
 8016c4c:	4798      	blx	r3
    }
}
 8016c4e:	bf00      	nop
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	20001be4 	.word	0x20001be4

08016c58 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	4603      	mov	r3, r0
 8016c60:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8016c62:	4a05      	ldr	r2, [pc, #20]	; (8016c78 <RadioOnDioIrq+0x20>)
 8016c64:	88fb      	ldrh	r3, [r7, #6]
 8016c66:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8016c6a:	f000 f807 	bl	8016c7c <RadioIrqProcess>
}
 8016c6e:	bf00      	nop
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	20001be8 	.word	0x20001be8

08016c7c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8016c7c:	b590      	push	{r4, r7, lr}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8016c82:	2300      	movs	r3, #0
 8016c84:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8016c86:	2300      	movs	r3, #0
 8016c88:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8016c8a:	4ba8      	ldr	r3, [pc, #672]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016c8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c94:	f000 810c 	beq.w	8016eb0 <RadioIrqProcess+0x234>
 8016c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c9c:	f300 81e8 	bgt.w	8017070 <RadioIrqProcess+0x3f4>
 8016ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ca4:	f000 80f0 	beq.w	8016e88 <RadioIrqProcess+0x20c>
 8016ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016cac:	f300 81e0 	bgt.w	8017070 <RadioIrqProcess+0x3f4>
 8016cb0:	2b80      	cmp	r3, #128	; 0x80
 8016cb2:	f000 80d5 	beq.w	8016e60 <RadioIrqProcess+0x1e4>
 8016cb6:	2b80      	cmp	r3, #128	; 0x80
 8016cb8:	f300 81da 	bgt.w	8017070 <RadioIrqProcess+0x3f4>
 8016cbc:	2b20      	cmp	r3, #32
 8016cbe:	dc49      	bgt.n	8016d54 <RadioIrqProcess+0xd8>
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	f340 81d5 	ble.w	8017070 <RadioIrqProcess+0x3f4>
 8016cc6:	3b01      	subs	r3, #1
 8016cc8:	2b1f      	cmp	r3, #31
 8016cca:	f200 81d1 	bhi.w	8017070 <RadioIrqProcess+0x3f4>
 8016cce:	a201      	add	r2, pc, #4	; (adr r2, 8016cd4 <RadioIrqProcess+0x58>)
 8016cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cd4:	08016d5d 	.word	0x08016d5d
 8016cd8:	08016d97 	.word	0x08016d97
 8016cdc:	08017071 	.word	0x08017071
 8016ce0:	08016f4d 	.word	0x08016f4d
 8016ce4:	08017071 	.word	0x08017071
 8016ce8:	08017071 	.word	0x08017071
 8016cec:	08017071 	.word	0x08017071
 8016cf0:	08016fc9 	.word	0x08016fc9
 8016cf4:	08017071 	.word	0x08017071
 8016cf8:	08017071 	.word	0x08017071
 8016cfc:	08017071 	.word	0x08017071
 8016d00:	08017071 	.word	0x08017071
 8016d04:	08017071 	.word	0x08017071
 8016d08:	08017071 	.word	0x08017071
 8016d0c:	08017071 	.word	0x08017071
 8016d10:	08016fe5 	.word	0x08016fe5
 8016d14:	08017071 	.word	0x08017071
 8016d18:	08017071 	.word	0x08017071
 8016d1c:	08017071 	.word	0x08017071
 8016d20:	08017071 	.word	0x08017071
 8016d24:	08017071 	.word	0x08017071
 8016d28:	08017071 	.word	0x08017071
 8016d2c:	08017071 	.word	0x08017071
 8016d30:	08017071 	.word	0x08017071
 8016d34:	08017071 	.word	0x08017071
 8016d38:	08017071 	.word	0x08017071
 8016d3c:	08017071 	.word	0x08017071
 8016d40:	08017071 	.word	0x08017071
 8016d44:	08017071 	.word	0x08017071
 8016d48:	08017071 	.word	0x08017071
 8016d4c:	08017071 	.word	0x08017071
 8016d50:	08016ff3 	.word	0x08016ff3
 8016d54:	2b40      	cmp	r3, #64	; 0x40
 8016d56:	f000 816d 	beq.w	8017034 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8016d5a:	e189      	b.n	8017070 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8016d5c:	4874      	ldr	r0, [pc, #464]	; (8016f30 <RadioIrqProcess+0x2b4>)
 8016d5e:	f002 ff8b 	bl	8019c78 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8016d62:	2000      	movs	r0, #0
 8016d64:	f000 fff8 	bl	8017d58 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8016d68:	f002 f85a 	bl	8018e20 <RFW_Is_LongPacketModeEnabled>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d101      	bne.n	8016d76 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8016d72:	f002 f87e 	bl	8018e72 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8016d76:	4b6f      	ldr	r3, [pc, #444]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f000 817a 	beq.w	8017074 <RadioIrqProcess+0x3f8>
 8016d80:	4b6c      	ldr	r3, [pc, #432]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	f000 8174 	beq.w	8017074 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8016d8c:	4b69      	ldr	r3, [pc, #420]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	4798      	blx	r3
        break;
 8016d94:	e16e      	b.n	8017074 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8016d96:	4868      	ldr	r0, [pc, #416]	; (8016f38 <RadioIrqProcess+0x2bc>)
 8016d98:	f002 ff6e 	bl	8019c78 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8016d9c:	4b63      	ldr	r3, [pc, #396]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016d9e:	785b      	ldrb	r3, [r3, #1]
 8016da0:	f083 0301 	eor.w	r3, r3, #1
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d014      	beq.n	8016dd4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8016daa:	2000      	movs	r0, #0
 8016dac:	f000 ffd4 	bl	8017d58 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8016db0:	2100      	movs	r1, #0
 8016db2:	f640 1002 	movw	r0, #2306	; 0x902
 8016db6:	f001 fd4f 	bl	8018858 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8016dba:	f640 1044 	movw	r0, #2372	; 0x944
 8016dbe:	f001 fd5f 	bl	8018880 <SUBGRF_ReadRegister>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	f043 0302 	orr.w	r3, r3, #2
 8016dc8:	b2db      	uxtb	r3, r3
 8016dca:	4619      	mov	r1, r3
 8016dcc:	f640 1044 	movw	r0, #2372	; 0x944
 8016dd0:	f001 fd42 	bl	8018858 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8016dd4:	1dfb      	adds	r3, r7, #7
 8016dd6:	22ff      	movs	r2, #255	; 0xff
 8016dd8:	4619      	mov	r1, r3
 8016dda:	4858      	ldr	r0, [pc, #352]	; (8016f3c <RadioIrqProcess+0x2c0>)
 8016ddc:	f000 fe8c 	bl	8017af8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8016de0:	4857      	ldr	r0, [pc, #348]	; (8016f40 <RadioIrqProcess+0x2c4>)
 8016de2:	f001 fce7 	bl	80187b4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8016de6:	4b53      	ldr	r3, [pc, #332]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d036      	beq.n	8016e5c <RadioIrqProcess+0x1e0>
 8016dee:	4b51      	ldr	r3, [pc, #324]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	689b      	ldr	r3, [r3, #8]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d031      	beq.n	8016e5c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8016df8:	4b4c      	ldr	r3, [pc, #304]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016dfe:	2b01      	cmp	r3, #1
 8016e00:	d10e      	bne.n	8016e20 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8016e02:	4b4c      	ldr	r3, [pc, #304]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	689c      	ldr	r4, [r3, #8]
 8016e08:	79fb      	ldrb	r3, [r7, #7]
 8016e0a:	b299      	uxth	r1, r3
 8016e0c:	4b47      	ldr	r3, [pc, #284]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016e0e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8016e12:	b21a      	sxth	r2, r3
 8016e14:	4b45      	ldr	r3, [pc, #276]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016e16:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8016e1a:	4848      	ldr	r0, [pc, #288]	; (8016f3c <RadioIrqProcess+0x2c0>)
 8016e1c:	47a0      	blx	r4
                break;
 8016e1e:	e01e      	b.n	8016e5e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8016e20:	4b42      	ldr	r3, [pc, #264]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e24:	463a      	mov	r2, r7
 8016e26:	4611      	mov	r1, r2
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f001 ff47 	bl	8018cbc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8016e2e:	4b41      	ldr	r3, [pc, #260]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	689c      	ldr	r4, [r3, #8]
 8016e34:	79fb      	ldrb	r3, [r7, #7]
 8016e36:	b299      	uxth	r1, r3
 8016e38:	4b3c      	ldr	r3, [pc, #240]	; (8016f2c <RadioIrqProcess+0x2b0>)
 8016e3a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8016e3e:	b218      	sxth	r0, r3
 8016e40:	683b      	ldr	r3, [r7, #0]
 8016e42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016e46:	4a3f      	ldr	r2, [pc, #252]	; (8016f44 <RadioIrqProcess+0x2c8>)
 8016e48:	fb82 c203 	smull	ip, r2, r2, r3
 8016e4c:	1192      	asrs	r2, r2, #6
 8016e4e:	17db      	asrs	r3, r3, #31
 8016e50:	1ad3      	subs	r3, r2, r3
 8016e52:	b25b      	sxtb	r3, r3
 8016e54:	4602      	mov	r2, r0
 8016e56:	4839      	ldr	r0, [pc, #228]	; (8016f3c <RadioIrqProcess+0x2c0>)
 8016e58:	47a0      	blx	r4
                break;
 8016e5a:	e000      	b.n	8016e5e <RadioIrqProcess+0x1e2>
        }
 8016e5c:	bf00      	nop
        break;
 8016e5e:	e118      	b.n	8017092 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8016e60:	2000      	movs	r0, #0
 8016e62:	f000 ff79 	bl	8017d58 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016e66:	4b33      	ldr	r3, [pc, #204]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	f000 8104 	beq.w	8017078 <RadioIrqProcess+0x3fc>
 8016e70:	4b30      	ldr	r3, [pc, #192]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	699b      	ldr	r3, [r3, #24]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	f000 80fe 	beq.w	8017078 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8016e7c:	4b2d      	ldr	r3, [pc, #180]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	699b      	ldr	r3, [r3, #24]
 8016e82:	2000      	movs	r0, #0
 8016e84:	4798      	blx	r3
        break;
 8016e86:	e0f7      	b.n	8017078 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8016e88:	2000      	movs	r0, #0
 8016e8a:	f000 ff65 	bl	8017d58 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016e8e:	4b29      	ldr	r3, [pc, #164]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	f000 80f2 	beq.w	801707c <RadioIrqProcess+0x400>
 8016e98:	4b26      	ldr	r3, [pc, #152]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	699b      	ldr	r3, [r3, #24]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	f000 80ec 	beq.w	801707c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8016ea4:	4b23      	ldr	r3, [pc, #140]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	699b      	ldr	r3, [r3, #24]
 8016eaa:	2001      	movs	r0, #1
 8016eac:	4798      	blx	r3
        break;
 8016eae:	e0e5      	b.n	801707c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8016eb0:	4b25      	ldr	r3, [pc, #148]	; (8016f48 <RadioIrqProcess+0x2cc>)
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	2100      	movs	r1, #0
 8016eb6:	2002      	movs	r0, #2
 8016eb8:	f003 f8e8 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8016ebc:	f000 fe02 	bl	8017ac4 <SUBGRF_GetOperatingMode>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	2b04      	cmp	r3, #4
 8016ec4:	d115      	bne.n	8016ef2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8016ec6:	481a      	ldr	r0, [pc, #104]	; (8016f30 <RadioIrqProcess+0x2b4>)
 8016ec8:	f002 fed6 	bl	8019c78 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8016ecc:	2000      	movs	r0, #0
 8016ece:	f000 ff43 	bl	8017d58 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016ed2:	4b18      	ldr	r3, [pc, #96]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f000 80d2 	beq.w	8017080 <RadioIrqProcess+0x404>
 8016edc:	4b15      	ldr	r3, [pc, #84]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	f000 80cc 	beq.w	8017080 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8016ee8:	4b12      	ldr	r3, [pc, #72]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	685b      	ldr	r3, [r3, #4]
 8016eee:	4798      	blx	r3
        break;
 8016ef0:	e0c6      	b.n	8017080 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8016ef2:	f000 fde7 	bl	8017ac4 <SUBGRF_GetOperatingMode>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b05      	cmp	r3, #5
 8016efa:	f040 80c1 	bne.w	8017080 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8016efe:	480e      	ldr	r0, [pc, #56]	; (8016f38 <RadioIrqProcess+0x2bc>)
 8016f00:	f002 feba 	bl	8019c78 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8016f04:	2000      	movs	r0, #0
 8016f06:	f000 ff27 	bl	8017d58 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016f0a:	4b0a      	ldr	r3, [pc, #40]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	f000 80b6 	beq.w	8017080 <RadioIrqProcess+0x404>
 8016f14:	4b07      	ldr	r3, [pc, #28]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	68db      	ldr	r3, [r3, #12]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	f000 80b0 	beq.w	8017080 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8016f20:	4b04      	ldr	r3, [pc, #16]	; (8016f34 <RadioIrqProcess+0x2b8>)
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	68db      	ldr	r3, [r3, #12]
 8016f26:	4798      	blx	r3
        break;
 8016f28:	e0aa      	b.n	8017080 <RadioIrqProcess+0x404>
 8016f2a:	bf00      	nop
 8016f2c:	20001be8 	.word	0x20001be8
 8016f30:	20001c44 	.word	0x20001c44
 8016f34:	20001be4 	.word	0x20001be4
 8016f38:	20001c5c 	.word	0x20001c5c
 8016f3c:	20001ae4 	.word	0x20001ae4
 8016f40:	20001c0c 	.word	0x20001c0c
 8016f44:	10624dd3 	.word	0x10624dd3
 8016f48:	0801b418 	.word	0x0801b418
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8016f4c:	4b53      	ldr	r3, [pc, #332]	; (801709c <RadioIrqProcess+0x420>)
 8016f4e:	2201      	movs	r2, #1
 8016f50:	2100      	movs	r1, #0
 8016f52:	2002      	movs	r0, #2
 8016f54:	f003 f89a 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8016f58:	4b51      	ldr	r3, [pc, #324]	; (80170a0 <RadioIrqProcess+0x424>)
 8016f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	f000 8091 	beq.w	8017084 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8016f62:	4a50      	ldr	r2, [pc, #320]	; (80170a4 <RadioIrqProcess+0x428>)
 8016f64:	4b4e      	ldr	r3, [pc, #312]	; (80170a0 <RadioIrqProcess+0x424>)
 8016f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f68:	0c1b      	lsrs	r3, r3, #16
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	f640 1003 	movw	r0, #2307	; 0x903
 8016f72:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8016f74:	4a4b      	ldr	r2, [pc, #300]	; (80170a4 <RadioIrqProcess+0x428>)
 8016f76:	4b4a      	ldr	r3, [pc, #296]	; (80170a0 <RadioIrqProcess+0x424>)
 8016f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f7a:	0a1b      	lsrs	r3, r3, #8
 8016f7c:	b2db      	uxtb	r3, r3
 8016f7e:	4619      	mov	r1, r3
 8016f80:	f640 1004 	movw	r0, #2308	; 0x904
 8016f84:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8016f86:	4a47      	ldr	r2, [pc, #284]	; (80170a4 <RadioIrqProcess+0x428>)
 8016f88:	4b45      	ldr	r3, [pc, #276]	; (80170a0 <RadioIrqProcess+0x424>)
 8016f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	4619      	mov	r1, r3
 8016f90:	f640 1005 	movw	r0, #2309	; 0x905
 8016f94:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8016f96:	4c43      	ldr	r4, [pc, #268]	; (80170a4 <RadioIrqProcess+0x428>)
 8016f98:	4b43      	ldr	r3, [pc, #268]	; (80170a8 <RadioIrqProcess+0x42c>)
 8016f9a:	f640 1002 	movw	r0, #2306	; 0x902
 8016f9e:	4798      	blx	r3
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	f043 0301 	orr.w	r3, r3, #1
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	4619      	mov	r1, r3
 8016faa:	f640 1002 	movw	r0, #2306	; 0x902
 8016fae:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8016fb0:	4b3b      	ldr	r3, [pc, #236]	; (80170a0 <RadioIrqProcess+0x424>)
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	2200      	movs	r2, #0
 8016fba:	f240 2162 	movw	r1, #610	; 0x262
 8016fbe:	f240 2062 	movw	r0, #610	; 0x262
 8016fc2:	f001 f899 	bl	80180f8 <SUBGRF_SetDioIrqParams>
        break;
 8016fc6:	e05d      	b.n	8017084 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8016fc8:	4b38      	ldr	r3, [pc, #224]	; (80170ac <RadioIrqProcess+0x430>)
 8016fca:	2201      	movs	r2, #1
 8016fcc:	2100      	movs	r1, #0
 8016fce:	2002      	movs	r0, #2
 8016fd0:	f003 f85c 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8016fd4:	f001 ff1d 	bl	8018e12 <RFW_Is_Init>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b01      	cmp	r3, #1
 8016fdc:	d154      	bne.n	8017088 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8016fde:	f001 ff4e 	bl	8018e7e <RFW_ReceivePayload>
        break;
 8016fe2:	e051      	b.n	8017088 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8016fe4:	4b32      	ldr	r3, [pc, #200]	; (80170b0 <RadioIrqProcess+0x434>)
 8016fe6:	2201      	movs	r2, #1
 8016fe8:	2100      	movs	r1, #0
 8016fea:	2002      	movs	r0, #2
 8016fec:	f003 f84e 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8016ff0:	e04f      	b.n	8017092 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8016ff2:	4830      	ldr	r0, [pc, #192]	; (80170b4 <RadioIrqProcess+0x438>)
 8016ff4:	f002 fe40 	bl	8019c78 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8016ff8:	4b29      	ldr	r3, [pc, #164]	; (80170a0 <RadioIrqProcess+0x424>)
 8016ffa:	785b      	ldrb	r3, [r3, #1]
 8016ffc:	f083 0301 	eor.w	r3, r3, #1
 8017000:	b2db      	uxtb	r3, r3
 8017002:	2b00      	cmp	r3, #0
 8017004:	d002      	beq.n	801700c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8017006:	2000      	movs	r0, #0
 8017008:	f000 fea6 	bl	8017d58 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801700c:	4b2a      	ldr	r3, [pc, #168]	; (80170b8 <RadioIrqProcess+0x43c>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d03b      	beq.n	801708c <RadioIrqProcess+0x410>
 8017014:	4b28      	ldr	r3, [pc, #160]	; (80170b8 <RadioIrqProcess+0x43c>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	68db      	ldr	r3, [r3, #12]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d036      	beq.n	801708c <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801701e:	4b26      	ldr	r3, [pc, #152]	; (80170b8 <RadioIrqProcess+0x43c>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	68db      	ldr	r3, [r3, #12]
 8017024:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017026:	4b25      	ldr	r3, [pc, #148]	; (80170bc <RadioIrqProcess+0x440>)
 8017028:	2201      	movs	r2, #1
 801702a:	2100      	movs	r1, #0
 801702c:	2002      	movs	r0, #2
 801702e:	f003 f82d 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017032:	e02b      	b.n	801708c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017034:	4b22      	ldr	r3, [pc, #136]	; (80170c0 <RadioIrqProcess+0x444>)
 8017036:	2201      	movs	r2, #1
 8017038:	2100      	movs	r1, #0
 801703a:	2002      	movs	r0, #2
 801703c:	f003 f826 	bl	801a08c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017040:	4b17      	ldr	r3, [pc, #92]	; (80170a0 <RadioIrqProcess+0x424>)
 8017042:	785b      	ldrb	r3, [r3, #1]
 8017044:	f083 0301 	eor.w	r3, r3, #1
 8017048:	b2db      	uxtb	r3, r3
 801704a:	2b00      	cmp	r3, #0
 801704c:	d002      	beq.n	8017054 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801704e:	2000      	movs	r0, #0
 8017050:	f000 fe82 	bl	8017d58 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017054:	4b18      	ldr	r3, [pc, #96]	; (80170b8 <RadioIrqProcess+0x43c>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d019      	beq.n	8017090 <RadioIrqProcess+0x414>
 801705c:	4b16      	ldr	r3, [pc, #88]	; (80170b8 <RadioIrqProcess+0x43c>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d014      	beq.n	8017090 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8017066:	4b14      	ldr	r3, [pc, #80]	; (80170b8 <RadioIrqProcess+0x43c>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	691b      	ldr	r3, [r3, #16]
 801706c:	4798      	blx	r3
        break;
 801706e:	e00f      	b.n	8017090 <RadioIrqProcess+0x414>
        break;
 8017070:	bf00      	nop
 8017072:	e00e      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 8017074:	bf00      	nop
 8017076:	e00c      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 8017078:	bf00      	nop
 801707a:	e00a      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 801707c:	bf00      	nop
 801707e:	e008      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 8017080:	bf00      	nop
 8017082:	e006      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 8017084:	bf00      	nop
 8017086:	e004      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 8017088:	bf00      	nop
 801708a:	e002      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 801708c:	bf00      	nop
 801708e:	e000      	b.n	8017092 <RadioIrqProcess+0x416>
        break;
 8017090:	bf00      	nop
    }
}
 8017092:	bf00      	nop
 8017094:	370c      	adds	r7, #12
 8017096:	46bd      	mov	sp, r7
 8017098:	bd90      	pop	{r4, r7, pc}
 801709a:	bf00      	nop
 801709c:	0801b42c 	.word	0x0801b42c
 80170a0:	20001be8 	.word	0x20001be8
 80170a4:	08016a8b 	.word	0x08016a8b
 80170a8:	08016aaf 	.word	0x08016aaf
 80170ac:	0801b438 	.word	0x0801b438
 80170b0:	0801b444 	.word	0x0801b444
 80170b4:	20001c5c 	.word	0x20001c5c
 80170b8:	20001be4 	.word	0x20001be4
 80170bc:	0801b450 	.word	0x0801b450
 80170c0:	0801b45c 	.word	0x0801b45c

080170c4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80170c8:	4b09      	ldr	r3, [pc, #36]	; (80170f0 <RadioTxPrbs+0x2c>)
 80170ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80170ce:	2101      	movs	r1, #1
 80170d0:	4618      	mov	r0, r3
 80170d2:	f001 fcb5 	bl	8018a40 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80170d6:	4b07      	ldr	r3, [pc, #28]	; (80170f4 <RadioTxPrbs+0x30>)
 80170d8:	212d      	movs	r1, #45	; 0x2d
 80170da:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80170de:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80170e0:	f000 fefd 	bl	8017ede <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80170e4:	4804      	ldr	r0, [pc, #16]	; (80170f8 <RadioTxPrbs+0x34>)
 80170e6:	f000 fe53 	bl	8017d90 <SUBGRF_SetTx>
}
 80170ea:	bf00      	nop
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	20001be8 	.word	0x20001be8
 80170f4:	08016a8b 	.word	0x08016a8b
 80170f8:	000fffff 	.word	0x000fffff

080170fc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b084      	sub	sp, #16
 8017100:	af00      	add	r7, sp, #0
 8017102:	4603      	mov	r3, r0
 8017104:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801710a:	4618      	mov	r0, r3
 801710c:	f001 fcc0 	bl	8018a90 <SUBGRF_SetRfTxPower>
 8017110:	4603      	mov	r3, r0
 8017112:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017114:	7bfb      	ldrb	r3, [r7, #15]
 8017116:	2101      	movs	r1, #1
 8017118:	4618      	mov	r0, r3
 801711a:	f001 fc91 	bl	8018a40 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801711e:	f000 fed5 	bl	8017ecc <SUBGRF_SetTxContinuousWave>
}
 8017122:	bf00      	nop
 8017124:	3710      	adds	r7, #16
 8017126:	46bd      	mov	sp, r7
 8017128:	bd80      	pop	{r7, pc}

0801712a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801712a:	b480      	push	{r7}
 801712c:	b089      	sub	sp, #36	; 0x24
 801712e:	af00      	add	r7, sp, #0
 8017130:	60f8      	str	r0, [r7, #12]
 8017132:	60b9      	str	r1, [r7, #8]
 8017134:	4613      	mov	r3, r2
 8017136:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017138:	2300      	movs	r3, #0
 801713a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801713c:	2300      	movs	r3, #0
 801713e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8017140:	2300      	movs	r3, #0
 8017142:	61bb      	str	r3, [r7, #24]
 8017144:	e011      	b.n	801716a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	68ba      	ldr	r2, [r7, #8]
 801714a:	4413      	add	r3, r2
 801714c:	781a      	ldrb	r2, [r3, #0]
 801714e:	69bb      	ldr	r3, [r7, #24]
 8017150:	68b9      	ldr	r1, [r7, #8]
 8017152:	440b      	add	r3, r1
 8017154:	43d2      	mvns	r2, r2
 8017156:	b2d2      	uxtb	r2, r2
 8017158:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801715a:	69bb      	ldr	r3, [r7, #24]
 801715c:	68fa      	ldr	r2, [r7, #12]
 801715e:	4413      	add	r3, r2
 8017160:	2200      	movs	r2, #0
 8017162:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017164:	69bb      	ldr	r3, [r7, #24]
 8017166:	3301      	adds	r3, #1
 8017168:	61bb      	str	r3, [r7, #24]
 801716a:	79fb      	ldrb	r3, [r7, #7]
 801716c:	69ba      	ldr	r2, [r7, #24]
 801716e:	429a      	cmp	r2, r3
 8017170:	dbe9      	blt.n	8017146 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8017172:	2300      	movs	r3, #0
 8017174:	61bb      	str	r3, [r7, #24]
 8017176:	e049      	b.n	801720c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017178:	69bb      	ldr	r3, [r7, #24]
 801717a:	425a      	negs	r2, r3
 801717c:	f003 0307 	and.w	r3, r3, #7
 8017180:	f002 0207 	and.w	r2, r2, #7
 8017184:	bf58      	it	pl
 8017186:	4253      	negpl	r3, r2
 8017188:	b2db      	uxtb	r3, r3
 801718a:	f1c3 0307 	rsb	r3, r3, #7
 801718e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	2b00      	cmp	r3, #0
 8017194:	da00      	bge.n	8017198 <payload_integration+0x6e>
 8017196:	3307      	adds	r3, #7
 8017198:	10db      	asrs	r3, r3, #3
 801719a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801719c:	69bb      	ldr	r3, [r7, #24]
 801719e:	3301      	adds	r3, #1
 80171a0:	425a      	negs	r2, r3
 80171a2:	f003 0307 	and.w	r3, r3, #7
 80171a6:	f002 0207 	and.w	r2, r2, #7
 80171aa:	bf58      	it	pl
 80171ac:	4253      	negpl	r3, r2
 80171ae:	b2db      	uxtb	r3, r3
 80171b0:	f1c3 0307 	rsb	r3, r3, #7
 80171b4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80171b6:	69bb      	ldr	r3, [r7, #24]
 80171b8:	3301      	adds	r3, #1
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	da00      	bge.n	80171c0 <payload_integration+0x96>
 80171be:	3307      	adds	r3, #7
 80171c0:	10db      	asrs	r3, r3, #3
 80171c2:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80171c4:	7dbb      	ldrb	r3, [r7, #22]
 80171c6:	68ba      	ldr	r2, [r7, #8]
 80171c8:	4413      	add	r3, r2
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	461a      	mov	r2, r3
 80171ce:	7dfb      	ldrb	r3, [r7, #23]
 80171d0:	fa42 f303 	asr.w	r3, r2, r3
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	f003 0301 	and.w	r3, r3, #1
 80171da:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80171dc:	7ffa      	ldrb	r2, [r7, #31]
 80171de:	7cfb      	ldrb	r3, [r7, #19]
 80171e0:	4053      	eors	r3, r2
 80171e2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80171e4:	7d3b      	ldrb	r3, [r7, #20]
 80171e6:	68fa      	ldr	r2, [r7, #12]
 80171e8:	4413      	add	r3, r2
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	b25a      	sxtb	r2, r3
 80171ee:	7ff9      	ldrb	r1, [r7, #31]
 80171f0:	7d7b      	ldrb	r3, [r7, #21]
 80171f2:	fa01 f303 	lsl.w	r3, r1, r3
 80171f6:	b25b      	sxtb	r3, r3
 80171f8:	4313      	orrs	r3, r2
 80171fa:	b259      	sxtb	r1, r3
 80171fc:	7d3b      	ldrb	r3, [r7, #20]
 80171fe:	68fa      	ldr	r2, [r7, #12]
 8017200:	4413      	add	r3, r2
 8017202:	b2ca      	uxtb	r2, r1
 8017204:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	3301      	adds	r3, #1
 801720a:	61bb      	str	r3, [r7, #24]
 801720c:	79fb      	ldrb	r3, [r7, #7]
 801720e:	00db      	lsls	r3, r3, #3
 8017210:	69ba      	ldr	r2, [r7, #24]
 8017212:	429a      	cmp	r2, r3
 8017214:	dbb0      	blt.n	8017178 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017216:	7ffb      	ldrb	r3, [r7, #31]
 8017218:	01db      	lsls	r3, r3, #7
 801721a:	b25a      	sxtb	r2, r3
 801721c:	7ffb      	ldrb	r3, [r7, #31]
 801721e:	019b      	lsls	r3, r3, #6
 8017220:	b25b      	sxtb	r3, r3
 8017222:	4313      	orrs	r3, r2
 8017224:	b25b      	sxtb	r3, r3
 8017226:	7ffa      	ldrb	r2, [r7, #31]
 8017228:	2a00      	cmp	r2, #0
 801722a:	d101      	bne.n	8017230 <payload_integration+0x106>
 801722c:	2220      	movs	r2, #32
 801722e:	e000      	b.n	8017232 <payload_integration+0x108>
 8017230:	2200      	movs	r2, #0
 8017232:	4313      	orrs	r3, r2
 8017234:	b259      	sxtb	r1, r3
 8017236:	79fb      	ldrb	r3, [r7, #7]
 8017238:	68fa      	ldr	r2, [r7, #12]
 801723a:	4413      	add	r3, r2
 801723c:	b2ca      	uxtb	r2, r1
 801723e:	701a      	strb	r2, [r3, #0]
}
 8017240:	bf00      	nop
 8017242:	3724      	adds	r7, #36	; 0x24
 8017244:	46bd      	mov	sp, r7
 8017246:	bc80      	pop	{r7}
 8017248:	4770      	bx	lr
	...

0801724c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b08c      	sub	sp, #48	; 0x30
 8017250:	af00      	add	r7, sp, #0
 8017252:	60b9      	str	r1, [r7, #8]
 8017254:	607a      	str	r2, [r7, #4]
 8017256:	603b      	str	r3, [r7, #0]
 8017258:	4603      	mov	r3, r0
 801725a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801725c:	2300      	movs	r3, #0
 801725e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8017260:	2300      	movs	r3, #0
 8017262:	623b      	str	r3, [r7, #32]
 8017264:	2300      	movs	r3, #0
 8017266:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017268:	f001 fdcd 	bl	8018e06 <RFW_DeInit>

    if( rxContinuous != 0 )
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d001      	beq.n	8017276 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017272:	2300      	movs	r3, #0
 8017274:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2b00      	cmp	r3, #0
 801727a:	bf14      	ite	ne
 801727c:	2301      	movne	r3, #1
 801727e:	2300      	moveq	r3, #0
 8017280:	b2da      	uxtb	r2, r3
 8017282:	4ba3      	ldr	r3, [pc, #652]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017284:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017286:	7bfb      	ldrb	r3, [r7, #15]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d003      	beq.n	8017294 <RadioSetRxGenericConfig+0x48>
 801728c:	2b01      	cmp	r3, #1
 801728e:	f000 80dc 	beq.w	801744a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017292:	e194      	b.n	80175be <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	689b      	ldr	r3, [r3, #8]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d003      	beq.n	80172a4 <RadioSetRxGenericConfig+0x58>
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	68db      	ldr	r3, [r3, #12]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d102      	bne.n	80172aa <RadioSetRxGenericConfig+0x5e>
            return -1;
 80172a4:	f04f 33ff 	mov.w	r3, #4294967295
 80172a8:	e18a      	b.n	80175c0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	7f9b      	ldrb	r3, [r3, #30]
 80172ae:	2b08      	cmp	r3, #8
 80172b0:	d902      	bls.n	80172b8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80172b2:	f04f 33ff 	mov.w	r3, #4294967295
 80172b6:	e183      	b.n	80175c0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	6919      	ldr	r1, [r3, #16]
 80172bc:	68bb      	ldr	r3, [r7, #8]
 80172be:	7f9b      	ldrb	r3, [r3, #30]
 80172c0:	b29a      	uxth	r2, r3
 80172c2:	f107 0320 	add.w	r3, r7, #32
 80172c6:	4618      	mov	r0, r3
 80172c8:	f001 fe90 	bl	8018fec <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	bf14      	ite	ne
 80172d4:	2301      	movne	r3, #1
 80172d6:	2300      	moveq	r3, #0
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	4618      	mov	r0, r3
 80172dc:	f000 fe08 	bl	8017ef0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80172e0:	4b8b      	ldr	r3, [pc, #556]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80172e2:	2200      	movs	r2, #0
 80172e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	689b      	ldr	r3, [r3, #8]
 80172ec:	4a88      	ldr	r2, [pc, #544]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80172ee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80172f0:	68bb      	ldr	r3, [r7, #8]
 80172f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80172f6:	4b86      	ldr	r3, [pc, #536]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80172f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	4618      	mov	r0, r3
 8017302:	f001 fcb3 	bl	8018c6c <SUBGRF_GetFskBandwidthRegValue>
 8017306:	4603      	mov	r3, r0
 8017308:	461a      	mov	r2, r3
 801730a:	4b81      	ldr	r3, [pc, #516]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 801730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017310:	4b7f      	ldr	r3, [pc, #508]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017312:	2200      	movs	r2, #0
 8017314:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017316:	68bb      	ldr	r3, [r7, #8]
 8017318:	68db      	ldr	r3, [r3, #12]
 801731a:	b29b      	uxth	r3, r3
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	b29a      	uxth	r2, r3
 8017320:	4b7b      	ldr	r3, [pc, #492]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017322:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	7fda      	ldrb	r2, [r3, #31]
 8017328:	4b79      	ldr	r3, [pc, #484]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 801732a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	7f9b      	ldrb	r3, [r3, #30]
 8017330:	00db      	lsls	r3, r3, #3
 8017332:	b2da      	uxtb	r2, r3
 8017334:	4b76      	ldr	r3, [pc, #472]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017336:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801733e:	4b74      	ldr	r3, [pc, #464]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017340:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017348:	2b00      	cmp	r3, #0
 801734a:	d105      	bne.n	8017358 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	695b      	ldr	r3, [r3, #20]
 8017350:	b2da      	uxtb	r2, r3
 8017352:	4b6f      	ldr	r3, [pc, #444]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017354:	759a      	strb	r2, [r3, #22]
 8017356:	e00b      	b.n	8017370 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801735e:	2b02      	cmp	r3, #2
 8017360:	d103      	bne.n	801736a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017362:	4b6b      	ldr	r3, [pc, #428]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017364:	22ff      	movs	r2, #255	; 0xff
 8017366:	759a      	strb	r2, [r3, #22]
 8017368:	e002      	b.n	8017370 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801736a:	4b69      	ldr	r3, [pc, #420]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 801736c:	22ff      	movs	r2, #255	; 0xff
 801736e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017376:	2b02      	cmp	r3, #2
 8017378:	d004      	beq.n	8017384 <RadioSetRxGenericConfig+0x138>
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017380:	2b02      	cmp	r3, #2
 8017382:	d12d      	bne.n	80173e0 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801738a:	2bf1      	cmp	r3, #241	; 0xf1
 801738c:	d00c      	beq.n	80173a8 <RadioSetRxGenericConfig+0x15c>
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017394:	2bf2      	cmp	r3, #242	; 0xf2
 8017396:	d007      	beq.n	80173a8 <RadioSetRxGenericConfig+0x15c>
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801739e:	2b01      	cmp	r3, #1
 80173a0:	d002      	beq.n	80173a8 <RadioSetRxGenericConfig+0x15c>
            return -1;
 80173a2:	f04f 33ff 	mov.w	r3, #4294967295
 80173a6:	e10b      	b.n	80175c0 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 80173a8:	2300      	movs	r3, #0
 80173aa:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80173b0:	4b58      	ldr	r3, [pc, #352]	; (8017514 <RadioSetRxGenericConfig+0x2c8>)
 80173b2:	6819      	ldr	r1, [r3, #0]
 80173b4:	f107 0314 	add.w	r3, r7, #20
 80173b8:	4a57      	ldr	r2, [pc, #348]	; (8017518 <RadioSetRxGenericConfig+0x2cc>)
 80173ba:	4618      	mov	r0, r3
 80173bc:	f001 fd16 	bl	8018dec <RFW_Init>
 80173c0:	4603      	mov	r3, r0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d002      	beq.n	80173cc <RadioSetRxGenericConfig+0x180>
            return -1;
 80173c6:	f04f 33ff 	mov.w	r3, #4294967295
 80173ca:	e0f9      	b.n	80175c0 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80173cc:	4b50      	ldr	r3, [pc, #320]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80173ce:	2200      	movs	r2, #0
 80173d0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80173d2:	4b4f      	ldr	r3, [pc, #316]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80173d4:	2201      	movs	r2, #1
 80173d6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80173d8:	4b4d      	ldr	r3, [pc, #308]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80173da:	2200      	movs	r2, #0
 80173dc:	755a      	strb	r2, [r3, #21]
        {
 80173de:	e00e      	b.n	80173fe <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80173e0:	68bb      	ldr	r3, [r7, #8]
 80173e2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80173e6:	4b4a      	ldr	r3, [pc, #296]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80173e8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80173f0:	4b47      	ldr	r3, [pc, #284]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80173f2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80173fa:	4b45      	ldr	r3, [pc, #276]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80173fc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80173fe:	f7ff fa48 	bl	8016892 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017402:	2000      	movs	r0, #0
 8017404:	f7fe fbf2 	bl	8015bec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017408:	4844      	ldr	r0, [pc, #272]	; (801751c <RadioSetRxGenericConfig+0x2d0>)
 801740a:	f001 f80b 	bl	8018424 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801740e:	4844      	ldr	r0, [pc, #272]	; (8017520 <RadioSetRxGenericConfig+0x2d4>)
 8017410:	f001 f8da 	bl	80185c8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017414:	f107 0320 	add.w	r3, r7, #32
 8017418:	4618      	mov	r0, r3
 801741a:	f000 fba2 	bl	8017b62 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	8b9b      	ldrh	r3, [r3, #28]
 8017422:	4618      	mov	r0, r3
 8017424:	f000 fbec 	bl	8017c00 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	8b1b      	ldrh	r3, [r3, #24]
 801742c:	4618      	mov	r0, r3
 801742e:	f000 fbc7 	bl	8017bc0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017438:	fb03 f202 	mul.w	r2, r3, r2
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	689b      	ldr	r3, [r3, #8]
 8017440:	fbb2 f3f3 	udiv	r3, r2, r3
 8017444:	4a32      	ldr	r2, [pc, #200]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017446:	6093      	str	r3, [r2, #8]
        break;
 8017448:	e0b9      	b.n	80175be <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801744e:	2b00      	cmp	r3, #0
 8017450:	d102      	bne.n	8017458 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8017452:	f04f 33ff 	mov.w	r3, #4294967295
 8017456:	e0b3      	b.n	80175c0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801745e:	2b01      	cmp	r3, #1
 8017460:	d104      	bne.n	801746c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	695b      	ldr	r3, [r3, #20]
 8017466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801746a:	e002      	b.n	8017472 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801746c:	23ff      	movs	r3, #255	; 0xff
 801746e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017472:	68bb      	ldr	r3, [r7, #8]
 8017474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017476:	2b00      	cmp	r3, #0
 8017478:	bf14      	ite	ne
 801747a:	2301      	movne	r3, #1
 801747c:	2300      	moveq	r3, #0
 801747e:	b2db      	uxtb	r3, r3
 8017480:	4618      	mov	r0, r3
 8017482:	f000 fd35 	bl	8017ef0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	b2db      	uxtb	r3, r3
 801748a:	4618      	mov	r0, r3
 801748c:	f000 fd3f 	bl	8017f0e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017490:	4b1f      	ldr	r3, [pc, #124]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017492:	2201      	movs	r2, #1
 8017494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801749e:	4b1c      	ldr	r3, [pc, #112]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80174a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80174aa:	4b19      	ldr	r3, [pc, #100]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80174ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80174b6:	4b16      	ldr	r3, [pc, #88]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80174b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80174c2:	2b02      	cmp	r3, #2
 80174c4:	d010      	beq.n	80174e8 <RadioSetRxGenericConfig+0x29c>
 80174c6:	2b02      	cmp	r3, #2
 80174c8:	dc2c      	bgt.n	8017524 <RadioSetRxGenericConfig+0x2d8>
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d002      	beq.n	80174d4 <RadioSetRxGenericConfig+0x288>
 80174ce:	2b01      	cmp	r3, #1
 80174d0:	d005      	beq.n	80174de <RadioSetRxGenericConfig+0x292>
            break;
 80174d2:	e027      	b.n	8017524 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80174d4:	4b0e      	ldr	r3, [pc, #56]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80174d6:	2200      	movs	r2, #0
 80174d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80174dc:	e023      	b.n	8017526 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80174de:	4b0c      	ldr	r3, [pc, #48]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80174e0:	2201      	movs	r2, #1
 80174e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80174e6:	e01e      	b.n	8017526 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80174ee:	2b0b      	cmp	r3, #11
 80174f0:	d004      	beq.n	80174fc <RadioSetRxGenericConfig+0x2b0>
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80174f8:	2b0c      	cmp	r3, #12
 80174fa:	d104      	bne.n	8017506 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80174fc:	4b04      	ldr	r3, [pc, #16]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 80174fe:	2201      	movs	r2, #1
 8017500:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017504:	e00f      	b.n	8017526 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017506:	4b02      	ldr	r3, [pc, #8]	; (8017510 <RadioSetRxGenericConfig+0x2c4>)
 8017508:	2200      	movs	r2, #0
 801750a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801750e:	e00a      	b.n	8017526 <RadioSetRxGenericConfig+0x2da>
 8017510:	20001be8 	.word	0x20001be8
 8017514:	20001be4 	.word	0x20001be4
 8017518:	20001c5c 	.word	0x20001c5c
 801751c:	20001c20 	.word	0x20001c20
 8017520:	20001bf6 	.word	0x20001bf6
            break;
 8017524:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017526:	4b28      	ldr	r3, [pc, #160]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 8017528:	2201      	movs	r2, #1
 801752a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8017530:	4b25      	ldr	r3, [pc, #148]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 8017532:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801753a:	4b23      	ldr	r3, [pc, #140]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 801753c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801753e:	4a22      	ldr	r2, [pc, #136]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 8017540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017544:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801754c:	4b1e      	ldr	r3, [pc, #120]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 801754e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8017558:	4b1b      	ldr	r3, [pc, #108]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 801755a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801755e:	f7ff f998 	bl	8016892 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017562:	2001      	movs	r0, #1
 8017564:	f7fe fb42 	bl	8015bec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017568:	4818      	ldr	r0, [pc, #96]	; (80175cc <RadioSetRxGenericConfig+0x380>)
 801756a:	f000 ff5b 	bl	8018424 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801756e:	4818      	ldr	r0, [pc, #96]	; (80175d0 <RadioSetRxGenericConfig+0x384>)
 8017570:	f001 f82a 	bl	80185c8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017574:	4b14      	ldr	r3, [pc, #80]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 8017576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801757a:	2b01      	cmp	r3, #1
 801757c:	d10d      	bne.n	801759a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801757e:	f240 7036 	movw	r0, #1846	; 0x736
 8017582:	f001 f97d 	bl	8018880 <SUBGRF_ReadRegister>
 8017586:	4603      	mov	r3, r0
 8017588:	f023 0304 	bic.w	r3, r3, #4
 801758c:	b2db      	uxtb	r3, r3
 801758e:	4619      	mov	r1, r3
 8017590:	f240 7036 	movw	r0, #1846	; 0x736
 8017594:	f001 f960 	bl	8018858 <SUBGRF_WriteRegister>
 8017598:	e00c      	b.n	80175b4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801759a:	f240 7036 	movw	r0, #1846	; 0x736
 801759e:	f001 f96f 	bl	8018880 <SUBGRF_ReadRegister>
 80175a2:	4603      	mov	r3, r0
 80175a4:	f043 0304 	orr.w	r3, r3, #4
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	4619      	mov	r1, r3
 80175ac:	f240 7036 	movw	r0, #1846	; 0x736
 80175b0:	f001 f952 	bl	8018858 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80175b4:	4b04      	ldr	r3, [pc, #16]	; (80175c8 <RadioSetRxGenericConfig+0x37c>)
 80175b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175ba:	609a      	str	r2, [r3, #8]
        break;
 80175bc:	bf00      	nop
    }
    return status;
 80175be:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3730      	adds	r7, #48	; 0x30
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	20001be8 	.word	0x20001be8
 80175cc:	20001c20 	.word	0x20001c20
 80175d0:	20001bf6 	.word	0x20001bf6

080175d4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b08e      	sub	sp, #56	; 0x38
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60b9      	str	r1, [r7, #8]
 80175dc:	607b      	str	r3, [r7, #4]
 80175de:	4603      	mov	r3, r0
 80175e0:	73fb      	strb	r3, [r7, #15]
 80175e2:	4613      	mov	r3, r2
 80175e4:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80175e6:	2300      	movs	r3, #0
 80175e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175ea:	2300      	movs	r3, #0
 80175ec:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80175ee:	f001 fc0a 	bl	8018e06 <RFW_DeInit>
    switch( modem )
 80175f2:	7bfb      	ldrb	r3, [r7, #15]
 80175f4:	2b03      	cmp	r3, #3
 80175f6:	f200 8204 	bhi.w	8017a02 <RadioSetTxGenericConfig+0x42e>
 80175fa:	a201      	add	r2, pc, #4	; (adr r2, 8017600 <RadioSetTxGenericConfig+0x2c>)
 80175fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017600:	08017785 	.word	0x08017785
 8017604:	080178cd 	.word	0x080178cd
 8017608:	080179c5 	.word	0x080179c5
 801760c:	08017611 	.word	0x08017611
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	7c9b      	ldrb	r3, [r3, #18]
 8017614:	2b08      	cmp	r3, #8
 8017616:	d902      	bls.n	801761e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8017618:	f04f 33ff 	mov.w	r3, #4294967295
 801761c:	e206      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	6899      	ldr	r1, [r3, #8]
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	7c9b      	ldrb	r3, [r3, #18]
 8017626:	b29a      	uxth	r2, r3
 8017628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801762c:	4618      	mov	r0, r3
 801762e:	f001 fcdd 	bl	8018fec <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8017632:	68bb      	ldr	r3, [r7, #8]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d102      	bne.n	8017640 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801763a:	f04f 33ff 	mov.w	r3, #4294967295
 801763e:	e1f5      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f242 7210 	movw	r2, #10000	; 0x2710
 8017648:	4293      	cmp	r3, r2
 801764a:	d813      	bhi.n	8017674 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801764c:	2302      	movs	r3, #2
 801764e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8017652:	4b99      	ldr	r3, [pc, #612]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017654:	2203      	movs	r2, #3
 8017656:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8017658:	4b97      	ldr	r3, [pc, #604]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801765a:	2203      	movs	r2, #3
 801765c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	4a94      	ldr	r2, [pc, #592]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017666:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	7cda      	ldrb	r2, [r3, #19]
 801766c:	4b92      	ldr	r3, [pc, #584]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801766e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017672:	e017      	b.n	80176a4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8017674:	2300      	movs	r3, #0
 8017676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801767a:	4b8f      	ldr	r3, [pc, #572]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801767c:	2200      	movs	r2, #0
 801767e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017680:	4b8d      	ldr	r3, [pc, #564]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017682:	2200      	movs	r2, #0
 8017684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a8a      	ldr	r2, [pc, #552]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801768e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	7cda      	ldrb	r2, [r3, #19]
 8017694:	4b88      	ldr	r3, [pc, #544]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	089b      	lsrs	r3, r3, #2
 80176a0:	4a85      	ldr	r2, [pc, #532]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80176a2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	685b      	ldr	r3, [r3, #4]
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	00db      	lsls	r3, r3, #3
 80176ac:	b29a      	uxth	r2, r3
 80176ae:	4b82      	ldr	r3, [pc, #520]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80176b0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80176b2:	4b81      	ldr	r3, [pc, #516]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80176b4:	2204      	movs	r2, #4
 80176b6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80176b8:	68bb      	ldr	r3, [r7, #8]
 80176ba:	7c9b      	ldrb	r3, [r3, #18]
 80176bc:	00db      	lsls	r3, r3, #3
 80176be:	b2da      	uxtb	r2, r3
 80176c0:	4b7d      	ldr	r3, [pc, #500]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80176c2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80176c4:	4b7c      	ldr	r3, [pc, #496]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80176c6:	2200      	movs	r2, #0
 80176c8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	7d9b      	ldrb	r3, [r3, #22]
 80176ce:	2b02      	cmp	r3, #2
 80176d0:	d003      	beq.n	80176da <RadioSetTxGenericConfig+0x106>
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	7d1b      	ldrb	r3, [r3, #20]
 80176d6:	2b02      	cmp	r3, #2
 80176d8:	d12b      	bne.n	8017732 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80176da:	68bb      	ldr	r3, [r7, #8]
 80176dc:	7d5b      	ldrb	r3, [r3, #21]
 80176de:	2bf1      	cmp	r3, #241	; 0xf1
 80176e0:	d00a      	beq.n	80176f8 <RadioSetTxGenericConfig+0x124>
 80176e2:	68bb      	ldr	r3, [r7, #8]
 80176e4:	7d5b      	ldrb	r3, [r3, #21]
 80176e6:	2bf2      	cmp	r3, #242	; 0xf2
 80176e8:	d006      	beq.n	80176f8 <RadioSetTxGenericConfig+0x124>
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	7d5b      	ldrb	r3, [r3, #21]
 80176ee:	2b01      	cmp	r3, #1
 80176f0:	d002      	beq.n	80176f8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80176f2:	f04f 33ff 	mov.w	r3, #4294967295
 80176f6:	e199      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 80176f8:	68bb      	ldr	r3, [r7, #8]
 80176fa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80176fc:	2301      	movs	r3, #1
 80176fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8017702:	4b6e      	ldr	r3, [pc, #440]	; (80178bc <RadioSetTxGenericConfig+0x2e8>)
 8017704:	6819      	ldr	r1, [r3, #0]
 8017706:	f107 0320 	add.w	r3, r7, #32
 801770a:	4a6d      	ldr	r2, [pc, #436]	; (80178c0 <RadioSetTxGenericConfig+0x2ec>)
 801770c:	4618      	mov	r0, r3
 801770e:	f001 fb6d 	bl	8018dec <RFW_Init>
 8017712:	4603      	mov	r3, r0
 8017714:	2b00      	cmp	r3, #0
 8017716:	d002      	beq.n	801771e <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8017718:	f04f 33ff 	mov.w	r3, #4294967295
 801771c:	e186      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801771e:	4b66      	ldr	r3, [pc, #408]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017720:	2200      	movs	r2, #0
 8017722:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8017724:	4b64      	ldr	r3, [pc, #400]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017726:	2201      	movs	r2, #1
 8017728:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801772a:	4b63      	ldr	r3, [pc, #396]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801772c:	2200      	movs	r2, #0
 801772e:	755a      	strb	r2, [r3, #21]
        {
 8017730:	e00b      	b.n	801774a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	7d5a      	ldrb	r2, [r3, #21]
 8017736:	4b60      	ldr	r3, [pc, #384]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017738:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	7d9a      	ldrb	r2, [r3, #22]
 801773e:	4b5e      	ldr	r3, [pc, #376]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017740:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	7d1a      	ldrb	r2, [r3, #20]
 8017746:	4b5c      	ldr	r3, [pc, #368]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017748:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801774a:	f7ff f8a2 	bl	8016892 <RadioStandby>
        RadioSetModem( radio_modem );
 801774e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017752:	4618      	mov	r0, r3
 8017754:	f7fe fa4a 	bl	8015bec <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017758:	485a      	ldr	r0, [pc, #360]	; (80178c4 <RadioSetTxGenericConfig+0x2f0>)
 801775a:	f000 fe63 	bl	8018424 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801775e:	485a      	ldr	r0, [pc, #360]	; (80178c8 <RadioSetTxGenericConfig+0x2f4>)
 8017760:	f000 ff32 	bl	80185c8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017768:	4618      	mov	r0, r3
 801776a:	f000 f9fa 	bl	8017b62 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	8a1b      	ldrh	r3, [r3, #16]
 8017772:	4618      	mov	r0, r3
 8017774:	f000 fa44 	bl	8017c00 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8017778:	68bb      	ldr	r3, [r7, #8]
 801777a:	899b      	ldrh	r3, [r3, #12]
 801777c:	4618      	mov	r0, r3
 801777e:	f000 fa1f 	bl	8017bc0 <SUBGRF_SetCrcPolynomial>
        break;
 8017782:	e13f      	b.n	8017a04 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d102      	bne.n	8017792 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801778c:	f04f 33ff 	mov.w	r3, #4294967295
 8017790:	e14c      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	7c9b      	ldrb	r3, [r3, #18]
 8017796:	2b08      	cmp	r3, #8
 8017798:	d902      	bls.n	80177a0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801779a:	f04f 33ff 	mov.w	r3, #4294967295
 801779e:	e145      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	6899      	ldr	r1, [r3, #8]
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	7c9b      	ldrb	r3, [r3, #18]
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80177ae:	4618      	mov	r0, r3
 80177b0:	f001 fc1c 	bl	8018fec <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80177b4:	4b40      	ldr	r3, [pc, #256]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177b6:	2200      	movs	r2, #0
 80177b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	4a3d      	ldr	r2, [pc, #244]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177c2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	7cda      	ldrb	r2, [r3, #19]
 80177c8:	4b3b      	ldr	r3, [pc, #236]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80177ce:	68bb      	ldr	r3, [r7, #8]
 80177d0:	699b      	ldr	r3, [r3, #24]
 80177d2:	4a39      	ldr	r2, [pc, #228]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177d4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80177d6:	4b38      	ldr	r3, [pc, #224]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177d8:	2200      	movs	r2, #0
 80177da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	685b      	ldr	r3, [r3, #4]
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	00db      	lsls	r3, r3, #3
 80177e4:	b29a      	uxth	r2, r3
 80177e6:	4b34      	ldr	r3, [pc, #208]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177e8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80177ea:	4b33      	ldr	r3, [pc, #204]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177ec:	2204      	movs	r2, #4
 80177ee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80177f0:	68bb      	ldr	r3, [r7, #8]
 80177f2:	7c9b      	ldrb	r3, [r3, #18]
 80177f4:	00db      	lsls	r3, r3, #3
 80177f6:	b2da      	uxtb	r2, r3
 80177f8:	4b2f      	ldr	r3, [pc, #188]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177fa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80177fc:	4b2e      	ldr	r3, [pc, #184]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 80177fe:	2200      	movs	r2, #0
 8017800:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017802:	68bb      	ldr	r3, [r7, #8]
 8017804:	7d9b      	ldrb	r3, [r3, #22]
 8017806:	2b02      	cmp	r3, #2
 8017808:	d003      	beq.n	8017812 <RadioSetTxGenericConfig+0x23e>
 801780a:	68bb      	ldr	r3, [r7, #8]
 801780c:	7d1b      	ldrb	r3, [r3, #20]
 801780e:	2b02      	cmp	r3, #2
 8017810:	d12a      	bne.n	8017868 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017812:	68bb      	ldr	r3, [r7, #8]
 8017814:	7d5b      	ldrb	r3, [r3, #21]
 8017816:	2bf1      	cmp	r3, #241	; 0xf1
 8017818:	d00a      	beq.n	8017830 <RadioSetTxGenericConfig+0x25c>
 801781a:	68bb      	ldr	r3, [r7, #8]
 801781c:	7d5b      	ldrb	r3, [r3, #21]
 801781e:	2bf2      	cmp	r3, #242	; 0xf2
 8017820:	d006      	beq.n	8017830 <RadioSetTxGenericConfig+0x25c>
 8017822:	68bb      	ldr	r3, [r7, #8]
 8017824:	7d5b      	ldrb	r3, [r3, #21]
 8017826:	2b01      	cmp	r3, #1
 8017828:	d002      	beq.n	8017830 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801782a:	f04f 33ff 	mov.w	r3, #4294967295
 801782e:	e0fd      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8017830:	2301      	movs	r3, #1
 8017832:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8017838:	4b20      	ldr	r3, [pc, #128]	; (80178bc <RadioSetTxGenericConfig+0x2e8>)
 801783a:	6819      	ldr	r1, [r3, #0]
 801783c:	f107 0314 	add.w	r3, r7, #20
 8017840:	4a1f      	ldr	r2, [pc, #124]	; (80178c0 <RadioSetTxGenericConfig+0x2ec>)
 8017842:	4618      	mov	r0, r3
 8017844:	f001 fad2 	bl	8018dec <RFW_Init>
 8017848:	4603      	mov	r3, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d002      	beq.n	8017854 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801784e:	f04f 33ff 	mov.w	r3, #4294967295
 8017852:	e0eb      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017854:	4b18      	ldr	r3, [pc, #96]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017856:	2200      	movs	r2, #0
 8017858:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801785a:	4b17      	ldr	r3, [pc, #92]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801785c:	2201      	movs	r2, #1
 801785e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017860:	4b15      	ldr	r3, [pc, #84]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017862:	2200      	movs	r2, #0
 8017864:	755a      	strb	r2, [r3, #21]
        {
 8017866:	e00b      	b.n	8017880 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	7d5a      	ldrb	r2, [r3, #21]
 801786c:	4b12      	ldr	r3, [pc, #72]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801786e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017870:	68bb      	ldr	r3, [r7, #8]
 8017872:	7d9a      	ldrb	r2, [r3, #22]
 8017874:	4b10      	ldr	r3, [pc, #64]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 8017876:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8017878:	68bb      	ldr	r3, [r7, #8]
 801787a:	7d1a      	ldrb	r2, [r3, #20]
 801787c:	4b0e      	ldr	r3, [pc, #56]	; (80178b8 <RadioSetTxGenericConfig+0x2e4>)
 801787e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8017880:	f7ff f807 	bl	8016892 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017884:	2000      	movs	r0, #0
 8017886:	f7fe f9b1 	bl	8015bec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801788a:	480e      	ldr	r0, [pc, #56]	; (80178c4 <RadioSetTxGenericConfig+0x2f0>)
 801788c:	f000 fdca 	bl	8018424 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017890:	480d      	ldr	r0, [pc, #52]	; (80178c8 <RadioSetTxGenericConfig+0x2f4>)
 8017892:	f000 fe99 	bl	80185c8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801789a:	4618      	mov	r0, r3
 801789c:	f000 f961 	bl	8017b62 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	8a1b      	ldrh	r3, [r3, #16]
 80178a4:	4618      	mov	r0, r3
 80178a6:	f000 f9ab 	bl	8017c00 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	899b      	ldrh	r3, [r3, #12]
 80178ae:	4618      	mov	r0, r3
 80178b0:	f000 f986 	bl	8017bc0 <SUBGRF_SetCrcPolynomial>
        break;
 80178b4:	e0a6      	b.n	8017a04 <RadioSetTxGenericConfig+0x430>
 80178b6:	bf00      	nop
 80178b8:	20001be8 	.word	0x20001be8
 80178bc:	20001be4 	.word	0x20001be4
 80178c0:	20001c44 	.word	0x20001c44
 80178c4:	20001c20 	.word	0x20001c20
 80178c8:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80178cc:	4b59      	ldr	r3, [pc, #356]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80178ce:	2201      	movs	r2, #1
 80178d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	781a      	ldrb	r2, [r3, #0]
 80178d8:	4b56      	ldr	r3, [pc, #344]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80178da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	785a      	ldrb	r2, [r3, #1]
 80178e2:	4b54      	ldr	r3, [pc, #336]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80178e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	789a      	ldrb	r2, [r3, #2]
 80178ec:	4b51      	ldr	r3, [pc, #324]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80178ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	78db      	ldrb	r3, [r3, #3]
 80178f6:	2b02      	cmp	r3, #2
 80178f8:	d010      	beq.n	801791c <RadioSetTxGenericConfig+0x348>
 80178fa:	2b02      	cmp	r3, #2
 80178fc:	dc20      	bgt.n	8017940 <RadioSetTxGenericConfig+0x36c>
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d002      	beq.n	8017908 <RadioSetTxGenericConfig+0x334>
 8017902:	2b01      	cmp	r3, #1
 8017904:	d005      	beq.n	8017912 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8017906:	e01b      	b.n	8017940 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017908:	4b4a      	ldr	r3, [pc, #296]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 801790a:	2200      	movs	r2, #0
 801790c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017910:	e017      	b.n	8017942 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017912:	4b48      	ldr	r3, [pc, #288]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017914:	2201      	movs	r2, #1
 8017916:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801791a:	e012      	b.n	8017942 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	2b0b      	cmp	r3, #11
 8017922:	d003      	beq.n	801792c <RadioSetTxGenericConfig+0x358>
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	2b0c      	cmp	r3, #12
 801792a:	d104      	bne.n	8017936 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801792c:	4b41      	ldr	r3, [pc, #260]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 801792e:	2201      	movs	r2, #1
 8017930:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017934:	e005      	b.n	8017942 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017936:	4b3f      	ldr	r3, [pc, #252]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017938:	2200      	movs	r2, #0
 801793a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801793e:	e000      	b.n	8017942 <RadioSetTxGenericConfig+0x36e>
            break;
 8017940:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017942:	4b3c      	ldr	r3, [pc, #240]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017944:	2201      	movs	r2, #1
 8017946:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017948:	68bb      	ldr	r3, [r7, #8]
 801794a:	889a      	ldrh	r2, [r3, #4]
 801794c:	4b39      	ldr	r3, [pc, #228]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 801794e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	799a      	ldrb	r2, [r3, #6]
 8017954:	4b37      	ldr	r3, [pc, #220]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017956:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	79da      	ldrb	r2, [r3, #7]
 801795c:	4b35      	ldr	r3, [pc, #212]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 801795e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	7a1a      	ldrb	r2, [r3, #8]
 8017966:	4b33      	ldr	r3, [pc, #204]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801796c:	f7fe ff91 	bl	8016892 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017970:	2001      	movs	r0, #1
 8017972:	f7fe f93b 	bl	8015bec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017976:	4830      	ldr	r0, [pc, #192]	; (8017a38 <RadioSetTxGenericConfig+0x464>)
 8017978:	f000 fd54 	bl	8018424 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801797c:	482f      	ldr	r0, [pc, #188]	; (8017a3c <RadioSetTxGenericConfig+0x468>)
 801797e:	f000 fe23 	bl	80185c8 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8017982:	4b2c      	ldr	r3, [pc, #176]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017988:	2b06      	cmp	r3, #6
 801798a:	d10d      	bne.n	80179a8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801798c:	f640 0089 	movw	r0, #2185	; 0x889
 8017990:	f000 ff76 	bl	8018880 <SUBGRF_ReadRegister>
 8017994:	4603      	mov	r3, r0
 8017996:	f023 0304 	bic.w	r3, r3, #4
 801799a:	b2db      	uxtb	r3, r3
 801799c:	4619      	mov	r1, r3
 801799e:	f640 0089 	movw	r0, #2185	; 0x889
 80179a2:	f000 ff59 	bl	8018858 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 80179a6:	e02d      	b.n	8017a04 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80179a8:	f640 0089 	movw	r0, #2185	; 0x889
 80179ac:	f000 ff68 	bl	8018880 <SUBGRF_ReadRegister>
 80179b0:	4603      	mov	r3, r0
 80179b2:	f043 0304 	orr.w	r3, r3, #4
 80179b6:	b2db      	uxtb	r3, r3
 80179b8:	4619      	mov	r1, r3
 80179ba:	f640 0089 	movw	r0, #2185	; 0x889
 80179be:	f000 ff4b 	bl	8018858 <SUBGRF_WriteRegister>
        break;
 80179c2:	e01f      	b.n	8017a04 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d004      	beq.n	80179d6 <RadioSetTxGenericConfig+0x402>
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80179d4:	d902      	bls.n	80179dc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80179d6:	f04f 33ff 	mov.w	r3, #4294967295
 80179da:	e027      	b.n	8017a2c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80179dc:	2003      	movs	r0, #3
 80179de:	f7fe f905 	bl	8015bec <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80179e2:	4b14      	ldr	r3, [pc, #80]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80179e4:	2202      	movs	r2, #2
 80179e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	4a11      	ldr	r2, [pc, #68]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80179f0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80179f2:	4b10      	ldr	r3, [pc, #64]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 80179f4:	2216      	movs	r2, #22
 80179f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80179fa:	480f      	ldr	r0, [pc, #60]	; (8017a38 <RadioSetTxGenericConfig+0x464>)
 80179fc:	f000 fd12 	bl	8018424 <SUBGRF_SetModulationParams>
        break;
 8017a00:	e000      	b.n	8017a04 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8017a02:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f001 f841 	bl	8018a90 <SUBGRF_SetRfTxPower>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	461a      	mov	r2, r3
 8017a12:	4b08      	ldr	r3, [pc, #32]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017a14:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017a18:	4b06      	ldr	r3, [pc, #24]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017a1a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f001 fa05 	bl	8018e2e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017a24:	4a03      	ldr	r2, [pc, #12]	; (8017a34 <RadioSetTxGenericConfig+0x460>)
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	6053      	str	r3, [r2, #4]
    return 0;
 8017a2a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3738      	adds	r7, #56	; 0x38
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	20001be8 	.word	0x20001be8
 8017a38:	20001c20 	.word	0x20001c20
 8017a3c:	20001bf6 	.word	0x20001bf6

08017a40 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b084      	sub	sp, #16
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d002      	beq.n	8017a54 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8017a4e:	4a1a      	ldr	r2, [pc, #104]	; (8017ab8 <SUBGRF_Init+0x78>)
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8017a54:	f7e9 ff02 	bl	800185c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017a58:	2002      	movs	r0, #2
 8017a5a:	f001 f8e5 	bl	8018c28 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8017a5e:	4b17      	ldr	r3, [pc, #92]	; (8017abc <SUBGRF_Init+0x7c>)
 8017a60:	2200      	movs	r2, #0
 8017a62:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8017a64:	2000      	movs	r0, #0
 8017a66:	f000 f977 	bl	8017d58 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8017a6a:	f7f2 f848 	bl	8009afe <RBI_IsTCXO>
 8017a6e:	4603      	mov	r3, r0
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d10e      	bne.n	8017a92 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8017a74:	2140      	movs	r1, #64	; 0x40
 8017a76:	2001      	movs	r0, #1
 8017a78:	f000 fb78 	bl	801816c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8017a7c:	2100      	movs	r1, #0
 8017a7e:	f640 1011 	movw	r0, #2321	; 0x911
 8017a82:	f000 fee9 	bl	8018858 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8017a86:	237f      	movs	r3, #127	; 0x7f
 8017a88:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8017a8a:	7b38      	ldrb	r0, [r7, #12]
 8017a8c:	f000 fa85 	bl	8017f9a <SUBGRF_Calibrate>
 8017a90:	e009      	b.n	8017aa6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017a92:	2120      	movs	r1, #32
 8017a94:	f640 1011 	movw	r0, #2321	; 0x911
 8017a98:	f000 fede 	bl	8018858 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017a9c:	2120      	movs	r1, #32
 8017a9e:	f640 1012 	movw	r0, #2322	; 0x912
 8017aa2:	f000 fed9 	bl	8018858 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8017aa6:	f7f2 f807 	bl	8009ab8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8017aaa:	4b05      	ldr	r3, [pc, #20]	; (8017ac0 <SUBGRF_Init+0x80>)
 8017aac:	2201      	movs	r2, #1
 8017aae:	701a      	strb	r2, [r3, #0]
}
 8017ab0:	bf00      	nop
 8017ab2:	3710      	adds	r7, #16
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	20001c80 	.word	0x20001c80
 8017abc:	20001c7c 	.word	0x20001c7c
 8017ac0:	20001c74 	.word	0x20001c74

08017ac4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8017ac4:	b480      	push	{r7}
 8017ac6:	af00      	add	r7, sp, #0
    return OperatingMode;
 8017ac8:	4b02      	ldr	r3, [pc, #8]	; (8017ad4 <SUBGRF_GetOperatingMode+0x10>)
 8017aca:	781b      	ldrb	r3, [r3, #0]
}
 8017acc:	4618      	mov	r0, r3
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bc80      	pop	{r7}
 8017ad2:	4770      	bx	lr
 8017ad4:	20001c74 	.word	0x20001c74

08017ad8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	460b      	mov	r3, r1
 8017ae2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8017ae4:	78fb      	ldrb	r3, [r7, #3]
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	6879      	ldr	r1, [r7, #4]
 8017aea:	2000      	movs	r0, #0
 8017aec:	f000 ff20 	bl	8018930 <SUBGRF_WriteBuffer>
}
 8017af0:	bf00      	nop
 8017af2:	3708      	adds	r7, #8
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}

08017af8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b086      	sub	sp, #24
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	4613      	mov	r3, r2
 8017b04:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8017b06:	2300      	movs	r3, #0
 8017b08:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8017b0a:	f107 0317 	add.w	r3, r7, #23
 8017b0e:	4619      	mov	r1, r3
 8017b10:	68b8      	ldr	r0, [r7, #8]
 8017b12:	f000 fe23 	bl	801875c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	79fa      	ldrb	r2, [r7, #7]
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d201      	bcs.n	8017b24 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8017b20:	2301      	movs	r3, #1
 8017b22:	e007      	b.n	8017b34 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8017b24:	7df8      	ldrb	r0, [r7, #23]
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	461a      	mov	r2, r3
 8017b2c:	68f9      	ldr	r1, [r7, #12]
 8017b2e:	f000 ff21 	bl	8018974 <SUBGRF_ReadBuffer>

    return 0;
 8017b32:	2300      	movs	r3, #0
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	3718      	adds	r7, #24
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b084      	sub	sp, #16
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	460b      	mov	r3, r1
 8017b46:	607a      	str	r2, [r7, #4]
 8017b48:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8017b4a:	7afb      	ldrb	r3, [r7, #11]
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	68f8      	ldr	r0, [r7, #12]
 8017b50:	f7ff ffc2 	bl	8017ad8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f000 f91b 	bl	8017d90 <SUBGRF_SetTx>
}
 8017b5a:	bf00      	nop
 8017b5c:	3710      	adds	r7, #16
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}

08017b62 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8017b62:	b580      	push	{r7, lr}
 8017b64:	b082      	sub	sp, #8
 8017b66:	af00      	add	r7, sp, #0
 8017b68:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8017b6a:	2208      	movs	r2, #8
 8017b6c:	6879      	ldr	r1, [r7, #4]
 8017b6e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8017b72:	f000 fe99 	bl	80188a8 <SUBGRF_WriteRegisters>
    return 0;
 8017b76:	2300      	movs	r3, #0
}
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}

08017b80 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	4603      	mov	r3, r0
 8017b88:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8017b8a:	88fb      	ldrh	r3, [r7, #6]
 8017b8c:	0a1b      	lsrs	r3, r3, #8
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	b2db      	uxtb	r3, r3
 8017b92:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8017b94:	88fb      	ldrh	r3, [r7, #6]
 8017b96:	b2db      	uxtb	r3, r3
 8017b98:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017b9a:	f000 fb6b 	bl	8018274 <SUBGRF_GetPacketType>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d108      	bne.n	8017bb6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8017ba4:	f107 030c 	add.w	r3, r7, #12
 8017ba8:	2202      	movs	r2, #2
 8017baa:	4619      	mov	r1, r3
 8017bac:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8017bb0:	f000 fe7a 	bl	80188a8 <SUBGRF_WriteRegisters>
            break;
 8017bb4:	e000      	b.n	8017bb8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8017bb6:	bf00      	nop
    }
}
 8017bb8:	bf00      	nop
 8017bba:	3710      	adds	r7, #16
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}

08017bc0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8017bca:	88fb      	ldrh	r3, [r7, #6]
 8017bcc:	0a1b      	lsrs	r3, r3, #8
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8017bd4:	88fb      	ldrh	r3, [r7, #6]
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017bda:	f000 fb4b 	bl	8018274 <SUBGRF_GetPacketType>
 8017bde:	4603      	mov	r3, r0
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d108      	bne.n	8017bf6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8017be4:	f107 030c 	add.w	r3, r7, #12
 8017be8:	2202      	movs	r2, #2
 8017bea:	4619      	mov	r1, r3
 8017bec:	f240 60be 	movw	r0, #1726	; 0x6be
 8017bf0:	f000 fe5a 	bl	80188a8 <SUBGRF_WriteRegisters>
            break;
 8017bf4:	e000      	b.n	8017bf8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8017bf6:	bf00      	nop
    }
}
 8017bf8:	bf00      	nop
 8017bfa:	3710      	adds	r7, #16
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b084      	sub	sp, #16
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	4603      	mov	r3, r0
 8017c08:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8017c0e:	f000 fb31 	bl	8018274 <SUBGRF_GetPacketType>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d121      	bne.n	8017c5c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8017c18:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017c1c:	f000 fe30 	bl	8018880 <SUBGRF_ReadRegister>
 8017c20:	4603      	mov	r3, r0
 8017c22:	f023 0301 	bic.w	r3, r3, #1
 8017c26:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8017c28:	88fb      	ldrh	r3, [r7, #6]
 8017c2a:	0a1b      	lsrs	r3, r3, #8
 8017c2c:	b29b      	uxth	r3, r3
 8017c2e:	b25b      	sxtb	r3, r3
 8017c30:	f003 0301 	and.w	r3, r3, #1
 8017c34:	b25a      	sxtb	r2, r3
 8017c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c3a:	4313      	orrs	r3, r2
 8017c3c:	b25b      	sxtb	r3, r3
 8017c3e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8017c40:	7bfb      	ldrb	r3, [r7, #15]
 8017c42:	4619      	mov	r1, r3
 8017c44:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017c48:	f000 fe06 	bl	8018858 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8017c4c:	88fb      	ldrh	r3, [r7, #6]
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	4619      	mov	r1, r3
 8017c52:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8017c56:	f000 fdff 	bl	8018858 <SUBGRF_WriteRegister>
            break;
 8017c5a:	e000      	b.n	8017c5e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8017c5c:	bf00      	nop
    }
}
 8017c5e:	bf00      	nop
 8017c60:	3710      	adds	r7, #16
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}

08017c66 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8017c66:	b580      	push	{r7, lr}
 8017c68:	b082      	sub	sp, #8
 8017c6a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8017c70:	2300      	movs	r3, #0
 8017c72:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8017c74:	2300      	movs	r3, #0
 8017c76:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8017c78:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017c7c:	f000 fe00 	bl	8018880 <SUBGRF_ReadRegister>
 8017c80:	4603      	mov	r3, r0
 8017c82:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8017c84:	79fb      	ldrb	r3, [r7, #7]
 8017c86:	f023 0301 	bic.w	r3, r3, #1
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017c92:	f000 fde1 	bl	8018858 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8017c96:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017c9a:	f000 fdf1 	bl	8018880 <SUBGRF_ReadRegister>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8017ca2:	79bb      	ldrb	r3, [r7, #6]
 8017ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	4619      	mov	r1, r3
 8017cac:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017cb0:	f000 fdd2 	bl	8018858 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017cb4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017cb8:	f000 f88a 	bl	8017dd0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8017cbc:	463b      	mov	r3, r7
 8017cbe:	2204      	movs	r2, #4
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	f640 0019 	movw	r0, #2073	; 0x819
 8017cc6:	f000 fe11 	bl	80188ec <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8017cca:	2000      	movs	r0, #0
 8017ccc:	f000 f844 	bl	8017d58 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8017cd0:	79fb      	ldrb	r3, [r7, #7]
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017cd8:	f000 fdbe 	bl	8018858 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8017cdc:	79bb      	ldrb	r3, [r7, #6]
 8017cde:	4619      	mov	r1, r3
 8017ce0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017ce4:	f000 fdb8 	bl	8018858 <SUBGRF_WriteRegister>

    return number;
 8017ce8:	683b      	ldr	r3, [r7, #0]
}
 8017cea:	4618      	mov	r0, r3
 8017cec:	3708      	adds	r7, #8
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	bd80      	pop	{r7, pc}
	...

08017cf4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8017cfc:	2000      	movs	r0, #0
 8017cfe:	f7f1 fee6 	bl	8009ace <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017d02:	2002      	movs	r0, #2
 8017d04:	f000 ff90 	bl	8018c28 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017d08:	793b      	ldrb	r3, [r7, #4]
 8017d0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	009b      	lsls	r3, r3, #2
 8017d12:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017d14:	793b      	ldrb	r3, [r7, #4]
 8017d16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017d1e:	b25b      	sxtb	r3, r3
 8017d20:	4313      	orrs	r3, r2
 8017d22:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8017d24:	793b      	ldrb	r3, [r7, #4]
 8017d26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017d2a:	b2db      	uxtb	r3, r3
 8017d2c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017d2e:	4313      	orrs	r3, r2
 8017d30:	b25b      	sxtb	r3, r3
 8017d32:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017d34:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8017d36:	f107 030f 	add.w	r3, r7, #15
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	4619      	mov	r1, r3
 8017d3e:	2084      	movs	r0, #132	; 0x84
 8017d40:	f000 fe3a 	bl	80189b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8017d44:	4b03      	ldr	r3, [pc, #12]	; (8017d54 <SUBGRF_SetSleep+0x60>)
 8017d46:	2200      	movs	r2, #0
 8017d48:	701a      	strb	r2, [r3, #0]
}
 8017d4a:	bf00      	nop
 8017d4c:	3710      	adds	r7, #16
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	20001c74 	.word	0x20001c74

08017d58 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b082      	sub	sp, #8
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	4603      	mov	r3, r0
 8017d60:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8017d62:	1dfb      	adds	r3, r7, #7
 8017d64:	2201      	movs	r2, #1
 8017d66:	4619      	mov	r1, r3
 8017d68:	2080      	movs	r0, #128	; 0x80
 8017d6a:	f000 fe25 	bl	80189b8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8017d6e:	79fb      	ldrb	r3, [r7, #7]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d103      	bne.n	8017d7c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8017d74:	4b05      	ldr	r3, [pc, #20]	; (8017d8c <SUBGRF_SetStandby+0x34>)
 8017d76:	2201      	movs	r2, #1
 8017d78:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8017d7a:	e002      	b.n	8017d82 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8017d7c:	4b03      	ldr	r3, [pc, #12]	; (8017d8c <SUBGRF_SetStandby+0x34>)
 8017d7e:	2202      	movs	r2, #2
 8017d80:	701a      	strb	r2, [r3, #0]
}
 8017d82:	bf00      	nop
 8017d84:	3708      	adds	r7, #8
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	20001c74 	.word	0x20001c74

08017d90 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8017d98:	4b0c      	ldr	r3, [pc, #48]	; (8017dcc <SUBGRF_SetTx+0x3c>)
 8017d9a:	2204      	movs	r2, #4
 8017d9c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	0c1b      	lsrs	r3, r3, #16
 8017da2:	b2db      	uxtb	r3, r3
 8017da4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	0a1b      	lsrs	r3, r3, #8
 8017daa:	b2db      	uxtb	r3, r3
 8017dac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	b2db      	uxtb	r3, r3
 8017db2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8017db4:	f107 030c 	add.w	r3, r7, #12
 8017db8:	2203      	movs	r2, #3
 8017dba:	4619      	mov	r1, r3
 8017dbc:	2083      	movs	r0, #131	; 0x83
 8017dbe:	f000 fdfb 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017dc2:	bf00      	nop
 8017dc4:	3710      	adds	r7, #16
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	20001c74 	.word	0x20001c74

08017dd0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b084      	sub	sp, #16
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017dd8:	4b0c      	ldr	r3, [pc, #48]	; (8017e0c <SUBGRF_SetRx+0x3c>)
 8017dda:	2205      	movs	r2, #5
 8017ddc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	0c1b      	lsrs	r3, r3, #16
 8017de2:	b2db      	uxtb	r3, r3
 8017de4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	0a1b      	lsrs	r3, r3, #8
 8017dea:	b2db      	uxtb	r3, r3
 8017dec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	b2db      	uxtb	r3, r3
 8017df2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017df4:	f107 030c 	add.w	r3, r7, #12
 8017df8:	2203      	movs	r2, #3
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	2082      	movs	r0, #130	; 0x82
 8017dfe:	f000 fddb 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017e02:	bf00      	nop
 8017e04:	3710      	adds	r7, #16
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}
 8017e0a:	bf00      	nop
 8017e0c:	20001c74 	.word	0x20001c74

08017e10 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017e18:	4b0e      	ldr	r3, [pc, #56]	; (8017e54 <SUBGRF_SetRxBoosted+0x44>)
 8017e1a:	2205      	movs	r2, #5
 8017e1c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8017e1e:	2197      	movs	r1, #151	; 0x97
 8017e20:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8017e24:	f000 fd18 	bl	8018858 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	0c1b      	lsrs	r3, r3, #16
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	0a1b      	lsrs	r3, r3, #8
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	b2db      	uxtb	r3, r3
 8017e3c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017e3e:	f107 030c 	add.w	r3, r7, #12
 8017e42:	2203      	movs	r2, #3
 8017e44:	4619      	mov	r1, r3
 8017e46:	2082      	movs	r0, #130	; 0x82
 8017e48:	f000 fdb6 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017e4c:	bf00      	nop
 8017e4e:	3710      	adds	r7, #16
 8017e50:	46bd      	mov	sp, r7
 8017e52:	bd80      	pop	{r7, pc}
 8017e54:	20001c74 	.word	0x20001c74

08017e58 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b084      	sub	sp, #16
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
 8017e60:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	0c1b      	lsrs	r3, r3, #16
 8017e66:	b2db      	uxtb	r3, r3
 8017e68:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	0a1b      	lsrs	r3, r3, #8
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	0c1b      	lsrs	r3, r3, #16
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	0a1b      	lsrs	r3, r3, #8
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8017e88:	683b      	ldr	r3, [r7, #0]
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8017e8e:	f107 0308 	add.w	r3, r7, #8
 8017e92:	2206      	movs	r2, #6
 8017e94:	4619      	mov	r1, r3
 8017e96:	2094      	movs	r0, #148	; 0x94
 8017e98:	f000 fd8e 	bl	80189b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8017e9c:	4b03      	ldr	r3, [pc, #12]	; (8017eac <SUBGRF_SetRxDutyCycle+0x54>)
 8017e9e:	2206      	movs	r2, #6
 8017ea0:	701a      	strb	r2, [r3, #0]
}
 8017ea2:	bf00      	nop
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	20001c74 	.word	0x20001c74

08017eb0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	2100      	movs	r1, #0
 8017eb8:	20c5      	movs	r0, #197	; 0xc5
 8017eba:	f000 fd7d 	bl	80189b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8017ebe:	4b02      	ldr	r3, [pc, #8]	; (8017ec8 <SUBGRF_SetCad+0x18>)
 8017ec0:	2207      	movs	r2, #7
 8017ec2:	701a      	strb	r2, [r3, #0]
}
 8017ec4:	bf00      	nop
 8017ec6:	bd80      	pop	{r7, pc}
 8017ec8:	20001c74 	.word	0x20001c74

08017ecc <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	2100      	movs	r1, #0
 8017ed4:	20d1      	movs	r0, #209	; 0xd1
 8017ed6:	f000 fd6f 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017eda:	bf00      	nop
 8017edc:	bd80      	pop	{r7, pc}

08017ede <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8017ede:	b580      	push	{r7, lr}
 8017ee0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	20d2      	movs	r0, #210	; 0xd2
 8017ee8:	f000 fd66 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017eec:	bf00      	nop
 8017eee:	bd80      	pop	{r7, pc}

08017ef0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8017efa:	1dfb      	adds	r3, r7, #7
 8017efc:	2201      	movs	r2, #1
 8017efe:	4619      	mov	r1, r3
 8017f00:	209f      	movs	r0, #159	; 0x9f
 8017f02:	f000 fd59 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017f06:	bf00      	nop
 8017f08:	3708      	adds	r7, #8
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	bd80      	pop	{r7, pc}

08017f0e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8017f0e:	b580      	push	{r7, lr}
 8017f10:	b084      	sub	sp, #16
 8017f12:	af00      	add	r7, sp, #0
 8017f14:	4603      	mov	r3, r0
 8017f16:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8017f18:	1dfb      	adds	r3, r7, #7
 8017f1a:	2201      	movs	r2, #1
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	20a0      	movs	r0, #160	; 0xa0
 8017f20:	f000 fd4a 	bl	80189b8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8017f24:	79fb      	ldrb	r3, [r7, #7]
 8017f26:	2b3f      	cmp	r3, #63	; 0x3f
 8017f28:	d91c      	bls.n	8017f64 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8017f2a:	79fb      	ldrb	r3, [r7, #7]
 8017f2c:	085b      	lsrs	r3, r3, #1
 8017f2e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8017f30:	2300      	movs	r3, #0
 8017f32:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8017f34:	2300      	movs	r3, #0
 8017f36:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8017f38:	e005      	b.n	8017f46 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8017f3a:	7bfb      	ldrb	r3, [r7, #15]
 8017f3c:	089b      	lsrs	r3, r3, #2
 8017f3e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8017f40:	7bbb      	ldrb	r3, [r7, #14]
 8017f42:	3301      	adds	r3, #1
 8017f44:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8017f46:	7bfb      	ldrb	r3, [r7, #15]
 8017f48:	2b1f      	cmp	r3, #31
 8017f4a:	d8f6      	bhi.n	8017f3a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8017f4c:	7bfb      	ldrb	r3, [r7, #15]
 8017f4e:	00db      	lsls	r3, r3, #3
 8017f50:	b2da      	uxtb	r2, r3
 8017f52:	7bbb      	ldrb	r3, [r7, #14]
 8017f54:	4413      	add	r3, r2
 8017f56:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8017f58:	7b7b      	ldrb	r3, [r7, #13]
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	f240 7006 	movw	r0, #1798	; 0x706
 8017f60:	f000 fc7a 	bl	8018858 <SUBGRF_WriteRegister>
    }
}
 8017f64:	bf00      	nop
 8017f66:	3710      	adds	r7, #16
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b082      	sub	sp, #8
 8017f70:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8017f72:	f7f1 fdcf 	bl	8009b14 <RBI_IsDCDC>
 8017f76:	4603      	mov	r3, r0
 8017f78:	2b01      	cmp	r3, #1
 8017f7a:	d102      	bne.n	8017f82 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	71fb      	strb	r3, [r7, #7]
 8017f80:	e001      	b.n	8017f86 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8017f82:	2300      	movs	r3, #0
 8017f84:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8017f86:	1dfb      	adds	r3, r7, #7
 8017f88:	2201      	movs	r2, #1
 8017f8a:	4619      	mov	r1, r3
 8017f8c:	2096      	movs	r0, #150	; 0x96
 8017f8e:	f000 fd13 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8017f92:	bf00      	nop
 8017f94:	3708      	adds	r7, #8
 8017f96:	46bd      	mov	sp, r7
 8017f98:	bd80      	pop	{r7, pc}

08017f9a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8017f9a:	b580      	push	{r7, lr}
 8017f9c:	b084      	sub	sp, #16
 8017f9e:	af00      	add	r7, sp, #0
 8017fa0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8017fa2:	793b      	ldrb	r3, [r7, #4]
 8017fa4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8017fa8:	b2db      	uxtb	r3, r3
 8017faa:	019b      	lsls	r3, r3, #6
 8017fac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8017fae:	793b      	ldrb	r3, [r7, #4]
 8017fb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017fb4:	b2db      	uxtb	r3, r3
 8017fb6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8017fb8:	b25b      	sxtb	r3, r3
 8017fba:	4313      	orrs	r3, r2
 8017fbc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8017fbe:	793b      	ldrb	r3, [r7, #4]
 8017fc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8017fc8:	b25b      	sxtb	r3, r3
 8017fca:	4313      	orrs	r3, r2
 8017fcc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8017fce:	793b      	ldrb	r3, [r7, #4]
 8017fd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017fd4:	b2db      	uxtb	r3, r3
 8017fd6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8017fd8:	b25b      	sxtb	r3, r3
 8017fda:	4313      	orrs	r3, r2
 8017fdc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8017fde:	793b      	ldrb	r3, [r7, #4]
 8017fe0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8017fe8:	b25b      	sxtb	r3, r3
 8017fea:	4313      	orrs	r3, r2
 8017fec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8017fee:	793b      	ldrb	r3, [r7, #4]
 8017ff0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8017ff8:	b25b      	sxtb	r3, r3
 8017ffa:	4313      	orrs	r3, r2
 8017ffc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8017ffe:	793b      	ldrb	r3, [r7, #4]
 8018000:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018004:	b2db      	uxtb	r3, r3
 8018006:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018008:	4313      	orrs	r3, r2
 801800a:	b25b      	sxtb	r3, r3
 801800c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801800e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018010:	f107 030f 	add.w	r3, r7, #15
 8018014:	2201      	movs	r2, #1
 8018016:	4619      	mov	r1, r3
 8018018:	2089      	movs	r0, #137	; 0x89
 801801a:	f000 fccd 	bl	80189b8 <SUBGRF_WriteCommand>
}
 801801e:	bf00      	nop
 8018020:	3710      	adds	r7, #16
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
	...

08018028 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b084      	sub	sp, #16
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	4a1b      	ldr	r2, [pc, #108]	; (80180a0 <SUBGRF_CalibrateImage+0x78>)
 8018034:	4293      	cmp	r3, r2
 8018036:	d904      	bls.n	8018042 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018038:	23e1      	movs	r3, #225	; 0xe1
 801803a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801803c:	23e9      	movs	r3, #233	; 0xe9
 801803e:	737b      	strb	r3, [r7, #13]
 8018040:	e022      	b.n	8018088 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4a17      	ldr	r2, [pc, #92]	; (80180a4 <SUBGRF_CalibrateImage+0x7c>)
 8018046:	4293      	cmp	r3, r2
 8018048:	d904      	bls.n	8018054 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801804a:	23d7      	movs	r3, #215	; 0xd7
 801804c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801804e:	23db      	movs	r3, #219	; 0xdb
 8018050:	737b      	strb	r3, [r7, #13]
 8018052:	e019      	b.n	8018088 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	4a14      	ldr	r2, [pc, #80]	; (80180a8 <SUBGRF_CalibrateImage+0x80>)
 8018058:	4293      	cmp	r3, r2
 801805a:	d904      	bls.n	8018066 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801805c:	23c1      	movs	r3, #193	; 0xc1
 801805e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018060:	23c5      	movs	r3, #197	; 0xc5
 8018062:	737b      	strb	r3, [r7, #13]
 8018064:	e010      	b.n	8018088 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	4a10      	ldr	r2, [pc, #64]	; (80180ac <SUBGRF_CalibrateImage+0x84>)
 801806a:	4293      	cmp	r3, r2
 801806c:	d904      	bls.n	8018078 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801806e:	2375      	movs	r3, #117	; 0x75
 8018070:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018072:	2381      	movs	r3, #129	; 0x81
 8018074:	737b      	strb	r3, [r7, #13]
 8018076:	e007      	b.n	8018088 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	4a0d      	ldr	r2, [pc, #52]	; (80180b0 <SUBGRF_CalibrateImage+0x88>)
 801807c:	4293      	cmp	r3, r2
 801807e:	d903      	bls.n	8018088 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018080:	236b      	movs	r3, #107	; 0x6b
 8018082:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018084:	236f      	movs	r3, #111	; 0x6f
 8018086:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018088:	f107 030c 	add.w	r3, r7, #12
 801808c:	2202      	movs	r2, #2
 801808e:	4619      	mov	r1, r3
 8018090:	2098      	movs	r0, #152	; 0x98
 8018092:	f000 fc91 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8018096:	bf00      	nop
 8018098:	3710      	adds	r7, #16
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
 801809e:	bf00      	nop
 80180a0:	35a4e900 	.word	0x35a4e900
 80180a4:	32a9f880 	.word	0x32a9f880
 80180a8:	2de54480 	.word	0x2de54480
 80180ac:	1b6b0b00 	.word	0x1b6b0b00
 80180b0:	1954fc40 	.word	0x1954fc40

080180b4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80180b4:	b590      	push	{r4, r7, lr}
 80180b6:	b085      	sub	sp, #20
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	4604      	mov	r4, r0
 80180bc:	4608      	mov	r0, r1
 80180be:	4611      	mov	r1, r2
 80180c0:	461a      	mov	r2, r3
 80180c2:	4623      	mov	r3, r4
 80180c4:	71fb      	strb	r3, [r7, #7]
 80180c6:	4603      	mov	r3, r0
 80180c8:	71bb      	strb	r3, [r7, #6]
 80180ca:	460b      	mov	r3, r1
 80180cc:	717b      	strb	r3, [r7, #5]
 80180ce:	4613      	mov	r3, r2
 80180d0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80180d2:	79fb      	ldrb	r3, [r7, #7]
 80180d4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80180d6:	79bb      	ldrb	r3, [r7, #6]
 80180d8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80180da:	797b      	ldrb	r3, [r7, #5]
 80180dc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80180de:	793b      	ldrb	r3, [r7, #4]
 80180e0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80180e2:	f107 030c 	add.w	r3, r7, #12
 80180e6:	2204      	movs	r2, #4
 80180e8:	4619      	mov	r1, r3
 80180ea:	2095      	movs	r0, #149	; 0x95
 80180ec:	f000 fc64 	bl	80189b8 <SUBGRF_WriteCommand>
}
 80180f0:	bf00      	nop
 80180f2:	3714      	adds	r7, #20
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd90      	pop	{r4, r7, pc}

080180f8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80180f8:	b590      	push	{r4, r7, lr}
 80180fa:	b085      	sub	sp, #20
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	4604      	mov	r4, r0
 8018100:	4608      	mov	r0, r1
 8018102:	4611      	mov	r1, r2
 8018104:	461a      	mov	r2, r3
 8018106:	4623      	mov	r3, r4
 8018108:	80fb      	strh	r3, [r7, #6]
 801810a:	4603      	mov	r3, r0
 801810c:	80bb      	strh	r3, [r7, #4]
 801810e:	460b      	mov	r3, r1
 8018110:	807b      	strh	r3, [r7, #2]
 8018112:	4613      	mov	r3, r2
 8018114:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018116:	88fb      	ldrh	r3, [r7, #6]
 8018118:	0a1b      	lsrs	r3, r3, #8
 801811a:	b29b      	uxth	r3, r3
 801811c:	b2db      	uxtb	r3, r3
 801811e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018120:	88fb      	ldrh	r3, [r7, #6]
 8018122:	b2db      	uxtb	r3, r3
 8018124:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018126:	88bb      	ldrh	r3, [r7, #4]
 8018128:	0a1b      	lsrs	r3, r3, #8
 801812a:	b29b      	uxth	r3, r3
 801812c:	b2db      	uxtb	r3, r3
 801812e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018130:	88bb      	ldrh	r3, [r7, #4]
 8018132:	b2db      	uxtb	r3, r3
 8018134:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018136:	887b      	ldrh	r3, [r7, #2]
 8018138:	0a1b      	lsrs	r3, r3, #8
 801813a:	b29b      	uxth	r3, r3
 801813c:	b2db      	uxtb	r3, r3
 801813e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018140:	887b      	ldrh	r3, [r7, #2]
 8018142:	b2db      	uxtb	r3, r3
 8018144:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018146:	883b      	ldrh	r3, [r7, #0]
 8018148:	0a1b      	lsrs	r3, r3, #8
 801814a:	b29b      	uxth	r3, r3
 801814c:	b2db      	uxtb	r3, r3
 801814e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018150:	883b      	ldrh	r3, [r7, #0]
 8018152:	b2db      	uxtb	r3, r3
 8018154:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018156:	f107 0308 	add.w	r3, r7, #8
 801815a:	2208      	movs	r2, #8
 801815c:	4619      	mov	r1, r3
 801815e:	2008      	movs	r0, #8
 8018160:	f000 fc2a 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8018164:	bf00      	nop
 8018166:	3714      	adds	r7, #20
 8018168:	46bd      	mov	sp, r7
 801816a:	bd90      	pop	{r4, r7, pc}

0801816c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	4603      	mov	r3, r0
 8018174:	6039      	str	r1, [r7, #0]
 8018176:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018178:	79fb      	ldrb	r3, [r7, #7]
 801817a:	f003 0307 	and.w	r3, r3, #7
 801817e:	b2db      	uxtb	r3, r3
 8018180:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	0c1b      	lsrs	r3, r3, #16
 8018186:	b2db      	uxtb	r3, r3
 8018188:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	0a1b      	lsrs	r3, r3, #8
 801818e:	b2db      	uxtb	r3, r3
 8018190:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	b2db      	uxtb	r3, r3
 8018196:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018198:	f107 030c 	add.w	r3, r7, #12
 801819c:	2204      	movs	r2, #4
 801819e:	4619      	mov	r1, r3
 80181a0:	2097      	movs	r0, #151	; 0x97
 80181a2:	f000 fc09 	bl	80189b8 <SUBGRF_WriteCommand>
}
 80181a6:	bf00      	nop
 80181a8:	3710      	adds	r7, #16
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
	...

080181b0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80181b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80181b4:	b084      	sub	sp, #16
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80181ba:	2300      	movs	r3, #0
 80181bc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80181be:	4b1d      	ldr	r3, [pc, #116]	; (8018234 <SUBGRF_SetRfFrequency+0x84>)
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	f083 0301 	eor.w	r3, r3, #1
 80181c6:	b2db      	uxtb	r3, r3
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d005      	beq.n	80181d8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f7ff ff2b 	bl	8018028 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80181d2:	4b18      	ldr	r3, [pc, #96]	; (8018234 <SUBGRF_SetRfFrequency+0x84>)
 80181d4:	2201      	movs	r2, #1
 80181d6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	2200      	movs	r2, #0
 80181dc:	461c      	mov	r4, r3
 80181de:	4615      	mov	r5, r2
 80181e0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80181e4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80181e8:	4a13      	ldr	r2, [pc, #76]	; (8018238 <SUBGRF_SetRfFrequency+0x88>)
 80181ea:	f04f 0300 	mov.w	r3, #0
 80181ee:	4640      	mov	r0, r8
 80181f0:	4649      	mov	r1, r9
 80181f2:	f7e8 fbbd 	bl	8000970 <__aeabi_uldivmod>
 80181f6:	4602      	mov	r2, r0
 80181f8:	460b      	mov	r3, r1
 80181fa:	4613      	mov	r3, r2
 80181fc:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	0e1b      	lsrs	r3, r3, #24
 8018202:	b2db      	uxtb	r3, r3
 8018204:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	0c1b      	lsrs	r3, r3, #16
 801820a:	b2db      	uxtb	r3, r3
 801820c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	0a1b      	lsrs	r3, r3, #8
 8018212:	b2db      	uxtb	r3, r3
 8018214:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	b2db      	uxtb	r3, r3
 801821a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801821c:	f107 0308 	add.w	r3, r7, #8
 8018220:	2204      	movs	r2, #4
 8018222:	4619      	mov	r1, r3
 8018224:	2086      	movs	r0, #134	; 0x86
 8018226:	f000 fbc7 	bl	80189b8 <SUBGRF_WriteCommand>
}
 801822a:	bf00      	nop
 801822c:	3710      	adds	r7, #16
 801822e:	46bd      	mov	sp, r7
 8018230:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018234:	20001c7c 	.word	0x20001c7c
 8018238:	01e84800 	.word	0x01e84800

0801823c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b082      	sub	sp, #8
 8018240:	af00      	add	r7, sp, #0
 8018242:	4603      	mov	r3, r0
 8018244:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018246:	79fa      	ldrb	r2, [r7, #7]
 8018248:	4b09      	ldr	r3, [pc, #36]	; (8018270 <SUBGRF_SetPacketType+0x34>)
 801824a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801824c:	79fb      	ldrb	r3, [r7, #7]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d104      	bne.n	801825c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018252:	2100      	movs	r1, #0
 8018254:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018258:	f000 fafe 	bl	8018858 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801825c:	1dfb      	adds	r3, r7, #7
 801825e:	2201      	movs	r2, #1
 8018260:	4619      	mov	r1, r3
 8018262:	208a      	movs	r0, #138	; 0x8a
 8018264:	f000 fba8 	bl	80189b8 <SUBGRF_WriteCommand>
}
 8018268:	bf00      	nop
 801826a:	3708      	adds	r7, #8
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}
 8018270:	20001c75 	.word	0x20001c75

08018274 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018274:	b480      	push	{r7}
 8018276:	af00      	add	r7, sp, #0
    return PacketType;
 8018278:	4b02      	ldr	r3, [pc, #8]	; (8018284 <SUBGRF_GetPacketType+0x10>)
 801827a:	781b      	ldrb	r3, [r3, #0]
}
 801827c:	4618      	mov	r0, r3
 801827e:	46bd      	mov	sp, r7
 8018280:	bc80      	pop	{r7}
 8018282:	4770      	bx	lr
 8018284:	20001c75 	.word	0x20001c75

08018288 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b084      	sub	sp, #16
 801828c:	af00      	add	r7, sp, #0
 801828e:	4603      	mov	r3, r0
 8018290:	71fb      	strb	r3, [r7, #7]
 8018292:	460b      	mov	r3, r1
 8018294:	71bb      	strb	r3, [r7, #6]
 8018296:	4613      	mov	r3, r2
 8018298:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801829a:	79fb      	ldrb	r3, [r7, #7]
 801829c:	2b01      	cmp	r3, #1
 801829e:	d149      	bne.n	8018334 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80182a0:	2000      	movs	r0, #0
 80182a2:	f7f1 fc42 	bl	8009b2a <RBI_GetRFOMaxPowerConfig>
 80182a6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80182a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80182ac:	68fa      	ldr	r2, [r7, #12]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	da01      	bge.n	80182b6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	2b0e      	cmp	r3, #14
 80182ba:	d10e      	bne.n	80182da <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80182bc:	2301      	movs	r3, #1
 80182be:	2201      	movs	r2, #1
 80182c0:	2100      	movs	r1, #0
 80182c2:	2004      	movs	r0, #4
 80182c4:	f7ff fef6 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80182c8:	79ba      	ldrb	r2, [r7, #6]
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	1ad3      	subs	r3, r2, r3
 80182d0:	b2db      	uxtb	r3, r3
 80182d2:	330e      	adds	r3, #14
 80182d4:	b2db      	uxtb	r3, r3
 80182d6:	71bb      	strb	r3, [r7, #6]
 80182d8:	e01f      	b.n	801831a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	2b0a      	cmp	r3, #10
 80182de:	d10e      	bne.n	80182fe <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80182e0:	2301      	movs	r3, #1
 80182e2:	2201      	movs	r2, #1
 80182e4:	2100      	movs	r1, #0
 80182e6:	2001      	movs	r0, #1
 80182e8:	f7ff fee4 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80182ec:	79ba      	ldrb	r2, [r7, #6]
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	1ad3      	subs	r3, r2, r3
 80182f4:	b2db      	uxtb	r3, r3
 80182f6:	330d      	adds	r3, #13
 80182f8:	b2db      	uxtb	r3, r3
 80182fa:	71bb      	strb	r3, [r7, #6]
 80182fc:	e00d      	b.n	801831a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80182fe:	2301      	movs	r3, #1
 8018300:	2201      	movs	r2, #1
 8018302:	2100      	movs	r1, #0
 8018304:	2006      	movs	r0, #6
 8018306:	f7ff fed5 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801830a:	79ba      	ldrb	r2, [r7, #6]
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	b2db      	uxtb	r3, r3
 8018310:	1ad3      	subs	r3, r2, r3
 8018312:	b2db      	uxtb	r3, r3
 8018314:	330e      	adds	r3, #14
 8018316:	b2db      	uxtb	r3, r3
 8018318:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801831a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801831e:	f113 0f11 	cmn.w	r3, #17
 8018322:	da01      	bge.n	8018328 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8018324:	23ef      	movs	r3, #239	; 0xef
 8018326:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8018328:	2118      	movs	r1, #24
 801832a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801832e:	f000 fa93 	bl	8018858 <SUBGRF_WriteRegister>
 8018332:	e067      	b.n	8018404 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8018334:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018338:	f000 faa2 	bl	8018880 <SUBGRF_ReadRegister>
 801833c:	4603      	mov	r3, r0
 801833e:	f043 031e 	orr.w	r3, r3, #30
 8018342:	b2db      	uxtb	r3, r3
 8018344:	4619      	mov	r1, r3
 8018346:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801834a:	f000 fa85 	bl	8018858 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801834e:	2001      	movs	r0, #1
 8018350:	f7f1 fbeb 	bl	8009b2a <RBI_GetRFOMaxPowerConfig>
 8018354:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8018356:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801835a:	68fa      	ldr	r2, [r7, #12]
 801835c:	429a      	cmp	r2, r3
 801835e:	da01      	bge.n	8018364 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	2b14      	cmp	r3, #20
 8018368:	d10e      	bne.n	8018388 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801836a:	2301      	movs	r3, #1
 801836c:	2200      	movs	r2, #0
 801836e:	2105      	movs	r1, #5
 8018370:	2003      	movs	r0, #3
 8018372:	f7ff fe9f 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018376:	79ba      	ldrb	r2, [r7, #6]
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	b2db      	uxtb	r3, r3
 801837c:	1ad3      	subs	r3, r2, r3
 801837e:	b2db      	uxtb	r3, r3
 8018380:	3316      	adds	r3, #22
 8018382:	b2db      	uxtb	r3, r3
 8018384:	71bb      	strb	r3, [r7, #6]
 8018386:	e031      	b.n	80183ec <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	2b11      	cmp	r3, #17
 801838c:	d10e      	bne.n	80183ac <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801838e:	2301      	movs	r3, #1
 8018390:	2200      	movs	r2, #0
 8018392:	2103      	movs	r1, #3
 8018394:	2002      	movs	r0, #2
 8018396:	f7ff fe8d 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801839a:	79ba      	ldrb	r2, [r7, #6]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	b2db      	uxtb	r3, r3
 80183a0:	1ad3      	subs	r3, r2, r3
 80183a2:	b2db      	uxtb	r3, r3
 80183a4:	3316      	adds	r3, #22
 80183a6:	b2db      	uxtb	r3, r3
 80183a8:	71bb      	strb	r3, [r7, #6]
 80183aa:	e01f      	b.n	80183ec <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2b0e      	cmp	r3, #14
 80183b0:	d10e      	bne.n	80183d0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80183b2:	2301      	movs	r3, #1
 80183b4:	2200      	movs	r2, #0
 80183b6:	2102      	movs	r1, #2
 80183b8:	2002      	movs	r0, #2
 80183ba:	f7ff fe7b 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80183be:	79ba      	ldrb	r2, [r7, #6]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	b2db      	uxtb	r3, r3
 80183c4:	1ad3      	subs	r3, r2, r3
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	330e      	adds	r3, #14
 80183ca:	b2db      	uxtb	r3, r3
 80183cc:	71bb      	strb	r3, [r7, #6]
 80183ce:	e00d      	b.n	80183ec <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80183d0:	2301      	movs	r3, #1
 80183d2:	2200      	movs	r2, #0
 80183d4:	2107      	movs	r1, #7
 80183d6:	2004      	movs	r0, #4
 80183d8:	f7ff fe6c 	bl	80180b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80183dc:	79ba      	ldrb	r2, [r7, #6]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	1ad3      	subs	r3, r2, r3
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	3316      	adds	r3, #22
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80183ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80183f0:	f113 0f09 	cmn.w	r3, #9
 80183f4:	da01      	bge.n	80183fa <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80183f6:	23f7      	movs	r3, #247	; 0xf7
 80183f8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80183fa:	2138      	movs	r1, #56	; 0x38
 80183fc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018400:	f000 fa2a 	bl	8018858 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018404:	79bb      	ldrb	r3, [r7, #6]
 8018406:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8018408:	797b      	ldrb	r3, [r7, #5]
 801840a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801840c:	f107 0308 	add.w	r3, r7, #8
 8018410:	2202      	movs	r2, #2
 8018412:	4619      	mov	r1, r3
 8018414:	208e      	movs	r0, #142	; 0x8e
 8018416:	f000 facf 	bl	80189b8 <SUBGRF_WriteCommand>
}
 801841a:	bf00      	nop
 801841c:	3710      	adds	r7, #16
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}
	...

08018424 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018424:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018428:	b086      	sub	sp, #24
 801842a:	af00      	add	r7, sp, #0
 801842c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801842e:	2300      	movs	r3, #0
 8018430:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018432:	4a61      	ldr	r2, [pc, #388]	; (80185b8 <SUBGRF_SetModulationParams+0x194>)
 8018434:	f107 0308 	add.w	r3, r7, #8
 8018438:	e892 0003 	ldmia.w	r2, {r0, r1}
 801843c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	781a      	ldrb	r2, [r3, #0]
 8018444:	4b5d      	ldr	r3, [pc, #372]	; (80185bc <SUBGRF_SetModulationParams+0x198>)
 8018446:	781b      	ldrb	r3, [r3, #0]
 8018448:	429a      	cmp	r2, r3
 801844a:	d004      	beq.n	8018456 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	4618      	mov	r0, r3
 8018452:	f7ff fef3 	bl	801823c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	2b03      	cmp	r3, #3
 801845c:	f200 80a5 	bhi.w	80185aa <SUBGRF_SetModulationParams+0x186>
 8018460:	a201      	add	r2, pc, #4	; (adr r2, 8018468 <SUBGRF_SetModulationParams+0x44>)
 8018462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018466:	bf00      	nop
 8018468:	08018479 	.word	0x08018479
 801846c:	08018539 	.word	0x08018539
 8018470:	080184fb 	.word	0x080184fb
 8018474:	08018567 	.word	0x08018567
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018478:	2308      	movs	r3, #8
 801847a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	4a4f      	ldr	r2, [pc, #316]	; (80185c0 <SUBGRF_SetModulationParams+0x19c>)
 8018482:	fbb2 f3f3 	udiv	r3, r2, r3
 8018486:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	0c1b      	lsrs	r3, r3, #16
 801848c:	b2db      	uxtb	r3, r3
 801848e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	0a1b      	lsrs	r3, r3, #8
 8018494:	b2db      	uxtb	r3, r3
 8018496:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	b2db      	uxtb	r3, r3
 801849c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	7b1b      	ldrb	r3, [r3, #12]
 80184a2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	7b5b      	ldrb	r3, [r3, #13]
 80184a8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	689b      	ldr	r3, [r3, #8]
 80184ae:	2200      	movs	r2, #0
 80184b0:	461c      	mov	r4, r3
 80184b2:	4615      	mov	r5, r2
 80184b4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80184b8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80184bc:	4a41      	ldr	r2, [pc, #260]	; (80185c4 <SUBGRF_SetModulationParams+0x1a0>)
 80184be:	f04f 0300 	mov.w	r3, #0
 80184c2:	4640      	mov	r0, r8
 80184c4:	4649      	mov	r1, r9
 80184c6:	f7e8 fa53 	bl	8000970 <__aeabi_uldivmod>
 80184ca:	4602      	mov	r2, r0
 80184cc:	460b      	mov	r3, r1
 80184ce:	4613      	mov	r3, r2
 80184d0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80184d2:	697b      	ldr	r3, [r7, #20]
 80184d4:	0c1b      	lsrs	r3, r3, #16
 80184d6:	b2db      	uxtb	r3, r3
 80184d8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	0a1b      	lsrs	r3, r3, #8
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	b2db      	uxtb	r3, r3
 80184e6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80184e8:	7cfb      	ldrb	r3, [r7, #19]
 80184ea:	b29a      	uxth	r2, r3
 80184ec:	f107 0308 	add.w	r3, r7, #8
 80184f0:	4619      	mov	r1, r3
 80184f2:	208b      	movs	r0, #139	; 0x8b
 80184f4:	f000 fa60 	bl	80189b8 <SUBGRF_WriteCommand>
        break;
 80184f8:	e058      	b.n	80185ac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80184fa:	2304      	movs	r3, #4
 80184fc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	691b      	ldr	r3, [r3, #16]
 8018502:	4a2f      	ldr	r2, [pc, #188]	; (80185c0 <SUBGRF_SetModulationParams+0x19c>)
 8018504:	fbb2 f3f3 	udiv	r3, r2, r3
 8018508:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	0c1b      	lsrs	r3, r3, #16
 801850e:	b2db      	uxtb	r3, r3
 8018510:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018512:	697b      	ldr	r3, [r7, #20]
 8018514:	0a1b      	lsrs	r3, r3, #8
 8018516:	b2db      	uxtb	r3, r3
 8018518:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	b2db      	uxtb	r3, r3
 801851e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	7d1b      	ldrb	r3, [r3, #20]
 8018524:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018526:	7cfb      	ldrb	r3, [r7, #19]
 8018528:	b29a      	uxth	r2, r3
 801852a:	f107 0308 	add.w	r3, r7, #8
 801852e:	4619      	mov	r1, r3
 8018530:	208b      	movs	r0, #139	; 0x8b
 8018532:	f000 fa41 	bl	80189b8 <SUBGRF_WriteCommand>
        break;
 8018536:	e039      	b.n	80185ac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8018538:	2304      	movs	r3, #4
 801853a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	7e1b      	ldrb	r3, [r3, #24]
 8018540:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	7e5b      	ldrb	r3, [r3, #25]
 8018546:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	7e9b      	ldrb	r3, [r3, #26]
 801854c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	7edb      	ldrb	r3, [r3, #27]
 8018552:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018554:	7cfb      	ldrb	r3, [r7, #19]
 8018556:	b29a      	uxth	r2, r3
 8018558:	f107 0308 	add.w	r3, r7, #8
 801855c:	4619      	mov	r1, r3
 801855e:	208b      	movs	r0, #139	; 0x8b
 8018560:	f000 fa2a 	bl	80189b8 <SUBGRF_WriteCommand>

        break;
 8018564:	e022      	b.n	80185ac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018566:	2305      	movs	r3, #5
 8018568:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	4a14      	ldr	r2, [pc, #80]	; (80185c0 <SUBGRF_SetModulationParams+0x19c>)
 8018570:	fbb2 f3f3 	udiv	r3, r2, r3
 8018574:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018576:	697b      	ldr	r3, [r7, #20]
 8018578:	0c1b      	lsrs	r3, r3, #16
 801857a:	b2db      	uxtb	r3, r3
 801857c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	0a1b      	lsrs	r3, r3, #8
 8018582:	b2db      	uxtb	r3, r3
 8018584:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	b2db      	uxtb	r3, r3
 801858a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	7b1b      	ldrb	r3, [r3, #12]
 8018590:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	7b5b      	ldrb	r3, [r3, #13]
 8018596:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018598:	7cfb      	ldrb	r3, [r7, #19]
 801859a:	b29a      	uxth	r2, r3
 801859c:	f107 0308 	add.w	r3, r7, #8
 80185a0:	4619      	mov	r1, r3
 80185a2:	208b      	movs	r0, #139	; 0x8b
 80185a4:	f000 fa08 	bl	80189b8 <SUBGRF_WriteCommand>
        break;
 80185a8:	e000      	b.n	80185ac <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80185aa:	bf00      	nop
    }
}
 80185ac:	bf00      	nop
 80185ae:	3718      	adds	r7, #24
 80185b0:	46bd      	mov	sp, r7
 80185b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80185b6:	bf00      	nop
 80185b8:	0801b46c 	.word	0x0801b46c
 80185bc:	20001c75 	.word	0x20001c75
 80185c0:	3d090000 	.word	0x3d090000
 80185c4:	01e84800 	.word	0x01e84800

080185c8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b086      	sub	sp, #24
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80185d0:	2300      	movs	r3, #0
 80185d2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80185d4:	4a48      	ldr	r2, [pc, #288]	; (80186f8 <SUBGRF_SetPacketParams+0x130>)
 80185d6:	f107 030c 	add.w	r3, r7, #12
 80185da:	ca07      	ldmia	r2, {r0, r1, r2}
 80185dc:	c303      	stmia	r3!, {r0, r1}
 80185de:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	781a      	ldrb	r2, [r3, #0]
 80185e4:	4b45      	ldr	r3, [pc, #276]	; (80186fc <SUBGRF_SetPacketParams+0x134>)
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d004      	beq.n	80185f6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7ff fe23 	bl	801823c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	2b03      	cmp	r3, #3
 80185fc:	d878      	bhi.n	80186f0 <SUBGRF_SetPacketParams+0x128>
 80185fe:	a201      	add	r2, pc, #4	; (adr r2, 8018604 <SUBGRF_SetPacketParams+0x3c>)
 8018600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018604:	08018615 	.word	0x08018615
 8018608:	080186a5 	.word	0x080186a5
 801860c:	08018699 	.word	0x08018699
 8018610:	08018615 	.word	0x08018615
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	7a5b      	ldrb	r3, [r3, #9]
 8018618:	2bf1      	cmp	r3, #241	; 0xf1
 801861a:	d10a      	bne.n	8018632 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801861c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018620:	f7ff faae 	bl	8017b80 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018624:	f248 0005 	movw	r0, #32773	; 0x8005
 8018628:	f7ff faca 	bl	8017bc0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801862c:	2302      	movs	r3, #2
 801862e:	75bb      	strb	r3, [r7, #22]
 8018630:	e011      	b.n	8018656 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	7a5b      	ldrb	r3, [r3, #9]
 8018636:	2bf2      	cmp	r3, #242	; 0xf2
 8018638:	d10a      	bne.n	8018650 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801863a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801863e:	f7ff fa9f 	bl	8017b80 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018642:	f241 0021 	movw	r0, #4129	; 0x1021
 8018646:	f7ff fabb 	bl	8017bc0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801864a:	2306      	movs	r3, #6
 801864c:	75bb      	strb	r3, [r7, #22]
 801864e:	e002      	b.n	8018656 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	7a5b      	ldrb	r3, [r3, #9]
 8018654:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018656:	2309      	movs	r3, #9
 8018658:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	885b      	ldrh	r3, [r3, #2]
 801865e:	0a1b      	lsrs	r3, r3, #8
 8018660:	b29b      	uxth	r3, r3
 8018662:	b2db      	uxtb	r3, r3
 8018664:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	885b      	ldrh	r3, [r3, #2]
 801866a:	b2db      	uxtb	r3, r3
 801866c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	791b      	ldrb	r3, [r3, #4]
 8018672:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	795b      	ldrb	r3, [r3, #5]
 8018678:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	799b      	ldrb	r3, [r3, #6]
 801867e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	79db      	ldrb	r3, [r3, #7]
 8018684:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	7a1b      	ldrb	r3, [r3, #8]
 801868a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801868c:	7dbb      	ldrb	r3, [r7, #22]
 801868e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	7a9b      	ldrb	r3, [r3, #10]
 8018694:	753b      	strb	r3, [r7, #20]
        break;
 8018696:	e022      	b.n	80186de <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018698:	2301      	movs	r3, #1
 801869a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	7b1b      	ldrb	r3, [r3, #12]
 80186a0:	733b      	strb	r3, [r7, #12]
        break;
 80186a2:	e01c      	b.n	80186de <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80186a4:	2306      	movs	r3, #6
 80186a6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	89db      	ldrh	r3, [r3, #14]
 80186ac:	0a1b      	lsrs	r3, r3, #8
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	b2db      	uxtb	r3, r3
 80186b2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	89db      	ldrh	r3, [r3, #14]
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	7c1a      	ldrb	r2, [r3, #16]
 80186c0:	4b0f      	ldr	r3, [pc, #60]	; (8018700 <SUBGRF_SetPacketParams+0x138>)
 80186c2:	4611      	mov	r1, r2
 80186c4:	7019      	strb	r1, [r3, #0]
 80186c6:	4613      	mov	r3, r2
 80186c8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	7c5b      	ldrb	r3, [r3, #17]
 80186ce:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	7c9b      	ldrb	r3, [r3, #18]
 80186d4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	7cdb      	ldrb	r3, [r3, #19]
 80186da:	747b      	strb	r3, [r7, #17]
        break;
 80186dc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80186de:	7dfb      	ldrb	r3, [r7, #23]
 80186e0:	b29a      	uxth	r2, r3
 80186e2:	f107 030c 	add.w	r3, r7, #12
 80186e6:	4619      	mov	r1, r3
 80186e8:	208c      	movs	r0, #140	; 0x8c
 80186ea:	f000 f965 	bl	80189b8 <SUBGRF_WriteCommand>
 80186ee:	e000      	b.n	80186f2 <SUBGRF_SetPacketParams+0x12a>
        return;
 80186f0:	bf00      	nop
}
 80186f2:	3718      	adds	r7, #24
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}
 80186f8:	0801b474 	.word	0x0801b474
 80186fc:	20001c75 	.word	0x20001c75
 8018700:	20001c76 	.word	0x20001c76

08018704 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	4603      	mov	r3, r0
 801870c:	460a      	mov	r2, r1
 801870e:	71fb      	strb	r3, [r7, #7]
 8018710:	4613      	mov	r3, r2
 8018712:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018714:	79fb      	ldrb	r3, [r7, #7]
 8018716:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018718:	79bb      	ldrb	r3, [r7, #6]
 801871a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801871c:	f107 030c 	add.w	r3, r7, #12
 8018720:	2202      	movs	r2, #2
 8018722:	4619      	mov	r1, r3
 8018724:	208f      	movs	r0, #143	; 0x8f
 8018726:	f000 f947 	bl	80189b8 <SUBGRF_WriteCommand>
}
 801872a:	bf00      	nop
 801872c:	3710      	adds	r7, #16
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}

08018732 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018732:	b580      	push	{r7, lr}
 8018734:	b082      	sub	sp, #8
 8018736:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018738:	2300      	movs	r3, #0
 801873a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801873c:	1d3b      	adds	r3, r7, #4
 801873e:	2201      	movs	r2, #1
 8018740:	4619      	mov	r1, r3
 8018742:	2015      	movs	r0, #21
 8018744:	f000 f95a 	bl	80189fc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018748:	793b      	ldrb	r3, [r7, #4]
 801874a:	425b      	negs	r3, r3
 801874c:	105b      	asrs	r3, r3, #1
 801874e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018750:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018754:	4618      	mov	r0, r3
 8018756:	3708      	adds	r7, #8
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}

0801875c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b084      	sub	sp, #16
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
 8018764:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018766:	f107 030c 	add.w	r3, r7, #12
 801876a:	2202      	movs	r2, #2
 801876c:	4619      	mov	r1, r3
 801876e:	2013      	movs	r0, #19
 8018770:	f000 f944 	bl	80189fc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018774:	f7ff fd7e 	bl	8018274 <SUBGRF_GetPacketType>
 8018778:	4603      	mov	r3, r0
 801877a:	2b01      	cmp	r3, #1
 801877c:	d10d      	bne.n	801879a <SUBGRF_GetRxBufferStatus+0x3e>
 801877e:	4b0c      	ldr	r3, [pc, #48]	; (80187b0 <SUBGRF_GetRxBufferStatus+0x54>)
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	b2db      	uxtb	r3, r3
 8018784:	2b01      	cmp	r3, #1
 8018786:	d108      	bne.n	801879a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018788:	f240 7002 	movw	r0, #1794	; 0x702
 801878c:	f000 f878 	bl	8018880 <SUBGRF_ReadRegister>
 8018790:	4603      	mov	r3, r0
 8018792:	461a      	mov	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	701a      	strb	r2, [r3, #0]
 8018798:	e002      	b.n	80187a0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801879a:	7b3a      	ldrb	r2, [r7, #12]
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80187a0:	7b7a      	ldrb	r2, [r7, #13]
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	701a      	strb	r2, [r3, #0]
}
 80187a6:	bf00      	nop
 80187a8:	3710      	adds	r7, #16
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	20001c76 	.word	0x20001c76

080187b4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b084      	sub	sp, #16
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80187bc:	f107 030c 	add.w	r3, r7, #12
 80187c0:	2203      	movs	r2, #3
 80187c2:	4619      	mov	r1, r3
 80187c4:	2014      	movs	r0, #20
 80187c6:	f000 f919 	bl	80189fc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80187ca:	f7ff fd53 	bl	8018274 <SUBGRF_GetPacketType>
 80187ce:	4603      	mov	r3, r0
 80187d0:	461a      	mov	r2, r3
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	781b      	ldrb	r3, [r3, #0]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d002      	beq.n	80187e4 <SUBGRF_GetPacketStatus+0x30>
 80187de:	2b01      	cmp	r3, #1
 80187e0:	d013      	beq.n	801880a <SUBGRF_GetPacketStatus+0x56>
 80187e2:	e02a      	b.n	801883a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80187e4:	7b3a      	ldrb	r2, [r7, #12]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80187ea:	7b7b      	ldrb	r3, [r7, #13]
 80187ec:	425b      	negs	r3, r3
 80187ee:	105b      	asrs	r3, r3, #1
 80187f0:	b25a      	sxtb	r2, r3
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80187f6:	7bbb      	ldrb	r3, [r7, #14]
 80187f8:	425b      	negs	r3, r3
 80187fa:	105b      	asrs	r3, r3, #1
 80187fc:	b25a      	sxtb	r2, r3
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2200      	movs	r2, #0
 8018806:	609a      	str	r2, [r3, #8]
            break;
 8018808:	e020      	b.n	801884c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801880a:	7b3b      	ldrb	r3, [r7, #12]
 801880c:	425b      	negs	r3, r3
 801880e:	105b      	asrs	r3, r3, #1
 8018810:	b25a      	sxtb	r2, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018816:	7b7b      	ldrb	r3, [r7, #13]
 8018818:	b25b      	sxtb	r3, r3
 801881a:	3302      	adds	r3, #2
 801881c:	109b      	asrs	r3, r3, #2
 801881e:	b25a      	sxtb	r2, r3
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018824:	7bbb      	ldrb	r3, [r7, #14]
 8018826:	425b      	negs	r3, r3
 8018828:	105b      	asrs	r3, r3, #1
 801882a:	b25a      	sxtb	r2, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8018830:	4b08      	ldr	r3, [pc, #32]	; (8018854 <SUBGRF_GetPacketStatus+0xa0>)
 8018832:	681a      	ldr	r2, [r3, #0]
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	611a      	str	r2, [r3, #16]
            break;
 8018838:	e008      	b.n	801884c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801883a:	2214      	movs	r2, #20
 801883c:	2100      	movs	r1, #0
 801883e:	6878      	ldr	r0, [r7, #4]
 8018840:	f000 fbf3 	bl	801902a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	220f      	movs	r2, #15
 8018848:	701a      	strb	r2, [r3, #0]
            break;
 801884a:	bf00      	nop
    }
}
 801884c:	bf00      	nop
 801884e:	3710      	adds	r7, #16
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}
 8018854:	20001c78 	.word	0x20001c78

08018858 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	4603      	mov	r3, r0
 8018860:	460a      	mov	r2, r1
 8018862:	80fb      	strh	r3, [r7, #6]
 8018864:	4613      	mov	r3, r2
 8018866:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018868:	1d7a      	adds	r2, r7, #5
 801886a:	88f9      	ldrh	r1, [r7, #6]
 801886c:	2301      	movs	r3, #1
 801886e:	4803      	ldr	r0, [pc, #12]	; (801887c <SUBGRF_WriteRegister+0x24>)
 8018870:	f7ee f98a 	bl	8006b88 <HAL_SUBGHZ_WriteRegisters>
}
 8018874:	bf00      	nop
 8018876:	3708      	adds	r7, #8
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	20000268 	.word	0x20000268

08018880 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b084      	sub	sp, #16
 8018884:	af00      	add	r7, sp, #0
 8018886:	4603      	mov	r3, r0
 8018888:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801888a:	f107 020f 	add.w	r2, r7, #15
 801888e:	88f9      	ldrh	r1, [r7, #6]
 8018890:	2301      	movs	r3, #1
 8018892:	4804      	ldr	r0, [pc, #16]	; (80188a4 <SUBGRF_ReadRegister+0x24>)
 8018894:	f7ee f9d7 	bl	8006c46 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018898:	7bfb      	ldrb	r3, [r7, #15]
}
 801889a:	4618      	mov	r0, r3
 801889c:	3710      	adds	r7, #16
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}
 80188a2:	bf00      	nop
 80188a4:	20000268 	.word	0x20000268

080188a8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b086      	sub	sp, #24
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	4603      	mov	r3, r0
 80188b0:	6039      	str	r1, [r7, #0]
 80188b2:	80fb      	strh	r3, [r7, #6]
 80188b4:	4613      	mov	r3, r2
 80188b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188b8:	f3ef 8310 	mrs	r3, PRIMASK
 80188bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80188be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80188c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80188c2:	b672      	cpsid	i
}
 80188c4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80188c6:	88bb      	ldrh	r3, [r7, #4]
 80188c8:	88f9      	ldrh	r1, [r7, #6]
 80188ca:	683a      	ldr	r2, [r7, #0]
 80188cc:	4806      	ldr	r0, [pc, #24]	; (80188e8 <SUBGRF_WriteRegisters+0x40>)
 80188ce:	f7ee f95b 	bl	8006b88 <HAL_SUBGHZ_WriteRegisters>
 80188d2:	697b      	ldr	r3, [r7, #20]
 80188d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	f383 8810 	msr	PRIMASK, r3
}
 80188dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80188de:	bf00      	nop
 80188e0:	3718      	adds	r7, #24
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	bf00      	nop
 80188e8:	20000268 	.word	0x20000268

080188ec <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b086      	sub	sp, #24
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	4603      	mov	r3, r0
 80188f4:	6039      	str	r1, [r7, #0]
 80188f6:	80fb      	strh	r3, [r7, #6]
 80188f8:	4613      	mov	r3, r2
 80188fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188fc:	f3ef 8310 	mrs	r3, PRIMASK
 8018900:	60fb      	str	r3, [r7, #12]
  return(result);
 8018902:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018906:	b672      	cpsid	i
}
 8018908:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801890a:	88bb      	ldrh	r3, [r7, #4]
 801890c:	88f9      	ldrh	r1, [r7, #6]
 801890e:	683a      	ldr	r2, [r7, #0]
 8018910:	4806      	ldr	r0, [pc, #24]	; (801892c <SUBGRF_ReadRegisters+0x40>)
 8018912:	f7ee f998 	bl	8006c46 <HAL_SUBGHZ_ReadRegisters>
 8018916:	697b      	ldr	r3, [r7, #20]
 8018918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801891a:	693b      	ldr	r3, [r7, #16]
 801891c:	f383 8810 	msr	PRIMASK, r3
}
 8018920:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018922:	bf00      	nop
 8018924:	3718      	adds	r7, #24
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	20000268 	.word	0x20000268

08018930 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b086      	sub	sp, #24
 8018934:	af00      	add	r7, sp, #0
 8018936:	4603      	mov	r3, r0
 8018938:	6039      	str	r1, [r7, #0]
 801893a:	71fb      	strb	r3, [r7, #7]
 801893c:	4613      	mov	r3, r2
 801893e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018940:	f3ef 8310 	mrs	r3, PRIMASK
 8018944:	60fb      	str	r3, [r7, #12]
  return(result);
 8018946:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801894a:	b672      	cpsid	i
}
 801894c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801894e:	79bb      	ldrb	r3, [r7, #6]
 8018950:	b29b      	uxth	r3, r3
 8018952:	79f9      	ldrb	r1, [r7, #7]
 8018954:	683a      	ldr	r2, [r7, #0]
 8018956:	4806      	ldr	r0, [pc, #24]	; (8018970 <SUBGRF_WriteBuffer+0x40>)
 8018958:	f7ee fa89 	bl	8006e6e <HAL_SUBGHZ_WriteBuffer>
 801895c:	697b      	ldr	r3, [r7, #20]
 801895e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018960:	693b      	ldr	r3, [r7, #16]
 8018962:	f383 8810 	msr	PRIMASK, r3
}
 8018966:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018968:	bf00      	nop
 801896a:	3718      	adds	r7, #24
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}
 8018970:	20000268 	.word	0x20000268

08018974 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b086      	sub	sp, #24
 8018978:	af00      	add	r7, sp, #0
 801897a:	4603      	mov	r3, r0
 801897c:	6039      	str	r1, [r7, #0]
 801897e:	71fb      	strb	r3, [r7, #7]
 8018980:	4613      	mov	r3, r2
 8018982:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018984:	f3ef 8310 	mrs	r3, PRIMASK
 8018988:	60fb      	str	r3, [r7, #12]
  return(result);
 801898a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801898c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801898e:	b672      	cpsid	i
}
 8018990:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8018992:	79bb      	ldrb	r3, [r7, #6]
 8018994:	b29b      	uxth	r3, r3
 8018996:	79f9      	ldrb	r1, [r7, #7]
 8018998:	683a      	ldr	r2, [r7, #0]
 801899a:	4806      	ldr	r0, [pc, #24]	; (80189b4 <SUBGRF_ReadBuffer+0x40>)
 801899c:	f7ee faba 	bl	8006f14 <HAL_SUBGHZ_ReadBuffer>
 80189a0:	697b      	ldr	r3, [r7, #20]
 80189a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189a4:	693b      	ldr	r3, [r7, #16]
 80189a6:	f383 8810 	msr	PRIMASK, r3
}
 80189aa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80189ac:	bf00      	nop
 80189ae:	3718      	adds	r7, #24
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bd80      	pop	{r7, pc}
 80189b4:	20000268 	.word	0x20000268

080189b8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	4603      	mov	r3, r0
 80189c0:	6039      	str	r1, [r7, #0]
 80189c2:	71fb      	strb	r3, [r7, #7]
 80189c4:	4613      	mov	r3, r2
 80189c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189c8:	f3ef 8310 	mrs	r3, PRIMASK
 80189cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80189ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80189d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80189d2:	b672      	cpsid	i
}
 80189d4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80189d6:	88bb      	ldrh	r3, [r7, #4]
 80189d8:	79f9      	ldrb	r1, [r7, #7]
 80189da:	683a      	ldr	r2, [r7, #0]
 80189dc:	4806      	ldr	r0, [pc, #24]	; (80189f8 <SUBGRF_WriteCommand+0x40>)
 80189de:	f7ee f993 	bl	8006d08 <HAL_SUBGHZ_ExecSetCmd>
 80189e2:	697b      	ldr	r3, [r7, #20]
 80189e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	f383 8810 	msr	PRIMASK, r3
}
 80189ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80189ee:	bf00      	nop
 80189f0:	3718      	adds	r7, #24
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	20000268 	.word	0x20000268

080189fc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b086      	sub	sp, #24
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	4603      	mov	r3, r0
 8018a04:	6039      	str	r1, [r7, #0]
 8018a06:	71fb      	strb	r3, [r7, #7]
 8018a08:	4613      	mov	r3, r2
 8018a0a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8018a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a16:	b672      	cpsid	i
}
 8018a18:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8018a1a:	88bb      	ldrh	r3, [r7, #4]
 8018a1c:	79f9      	ldrb	r1, [r7, #7]
 8018a1e:	683a      	ldr	r2, [r7, #0]
 8018a20:	4806      	ldr	r0, [pc, #24]	; (8018a3c <SUBGRF_ReadCommand+0x40>)
 8018a22:	f7ee f9d0 	bl	8006dc6 <HAL_SUBGHZ_ExecGetCmd>
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	f383 8810 	msr	PRIMASK, r3
}
 8018a30:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a32:	bf00      	nop
 8018a34:	3718      	adds	r7, #24
 8018a36:	46bd      	mov	sp, r7
 8018a38:	bd80      	pop	{r7, pc}
 8018a3a:	bf00      	nop
 8018a3c:	20000268 	.word	0x20000268

08018a40 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	4603      	mov	r3, r0
 8018a48:	460a      	mov	r2, r1
 8018a4a:	71fb      	strb	r3, [r7, #7]
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8018a50:	2301      	movs	r3, #1
 8018a52:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8018a54:	79bb      	ldrb	r3, [r7, #6]
 8018a56:	2b01      	cmp	r3, #1
 8018a58:	d10d      	bne.n	8018a76 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8018a5a:	79fb      	ldrb	r3, [r7, #7]
 8018a5c:	2b01      	cmp	r3, #1
 8018a5e:	d104      	bne.n	8018a6a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8018a60:	2302      	movs	r3, #2
 8018a62:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8018a64:	2004      	movs	r0, #4
 8018a66:	f000 f8df 	bl	8018c28 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8018a6a:	79fb      	ldrb	r3, [r7, #7]
 8018a6c:	2b02      	cmp	r3, #2
 8018a6e:	d107      	bne.n	8018a80 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8018a70:	2303      	movs	r3, #3
 8018a72:	73fb      	strb	r3, [r7, #15]
 8018a74:	e004      	b.n	8018a80 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8018a76:	79bb      	ldrb	r3, [r7, #6]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d101      	bne.n	8018a80 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8018a80:	7bfb      	ldrb	r3, [r7, #15]
 8018a82:	4618      	mov	r0, r3
 8018a84:	f7f1 f823 	bl	8009ace <RBI_ConfigRFSwitch>
}
 8018a88:	bf00      	nop
 8018a8a:	3710      	adds	r7, #16
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}

08018a90 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b084      	sub	sp, #16
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	4603      	mov	r3, r0
 8018a98:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8018a9e:	f7f1 f823 	bl	8009ae8 <RBI_GetTxConfig>
 8018aa2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	2b02      	cmp	r3, #2
 8018aa8:	d016      	beq.n	8018ad8 <SUBGRF_SetRfTxPower+0x48>
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	2b02      	cmp	r3, #2
 8018aae:	dc16      	bgt.n	8018ade <SUBGRF_SetRfTxPower+0x4e>
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d003      	beq.n	8018abe <SUBGRF_SetRfTxPower+0x2e>
 8018ab6:	68bb      	ldr	r3, [r7, #8]
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d00a      	beq.n	8018ad2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8018abc:	e00f      	b.n	8018ade <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8018abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ac2:	2b0f      	cmp	r3, #15
 8018ac4:	dd02      	ble.n	8018acc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8018ac6:	2302      	movs	r3, #2
 8018ac8:	73fb      	strb	r3, [r7, #15]
            break;
 8018aca:	e009      	b.n	8018ae0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8018acc:	2301      	movs	r3, #1
 8018ace:	73fb      	strb	r3, [r7, #15]
            break;
 8018ad0:	e006      	b.n	8018ae0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8018ad2:	2301      	movs	r3, #1
 8018ad4:	73fb      	strb	r3, [r7, #15]
            break;
 8018ad6:	e003      	b.n	8018ae0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8018ad8:	2302      	movs	r3, #2
 8018ada:	73fb      	strb	r3, [r7, #15]
            break;
 8018adc:	e000      	b.n	8018ae0 <SUBGRF_SetRfTxPower+0x50>
            break;
 8018ade:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8018ae0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8018ae4:	7bfb      	ldrb	r3, [r7, #15]
 8018ae6:	2202      	movs	r2, #2
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7ff fbcd 	bl	8018288 <SUBGRF_SetTxParams>

    return paSelect;
 8018aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	3710      	adds	r7, #16
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}

08018af8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8018af8:	b480      	push	{r7}
 8018afa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8018afc:	2301      	movs	r3, #1
}
 8018afe:	4618      	mov	r0, r3
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bc80      	pop	{r7}
 8018b04:	4770      	bx	lr
	...

08018b08 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8018b10:	4b03      	ldr	r3, [pc, #12]	; (8018b20 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2001      	movs	r0, #1
 8018b16:	4798      	blx	r3
}
 8018b18:	bf00      	nop
 8018b1a:	3708      	adds	r7, #8
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	20001c80 	.word	0x20001c80

08018b24 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b082      	sub	sp, #8
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8018b2c:	4b03      	ldr	r3, [pc, #12]	; (8018b3c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2002      	movs	r0, #2
 8018b32:	4798      	blx	r3
}
 8018b34:	bf00      	nop
 8018b36:	3708      	adds	r7, #8
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	20001c80 	.word	0x20001c80

08018b40 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b082      	sub	sp, #8
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8018b48:	4b03      	ldr	r3, [pc, #12]	; (8018b58 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	2040      	movs	r0, #64	; 0x40
 8018b4e:	4798      	blx	r3
}
 8018b50:	bf00      	nop
 8018b52:	3708      	adds	r7, #8
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	20001c80 	.word	0x20001c80

08018b5c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b082      	sub	sp, #8
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
 8018b64:	460b      	mov	r3, r1
 8018b66:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8018b68:	78fb      	ldrb	r3, [r7, #3]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d002      	beq.n	8018b74 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8018b6e:	2b01      	cmp	r3, #1
 8018b70:	d005      	beq.n	8018b7e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8018b72:	e00a      	b.n	8018b8a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8018b74:	4b07      	ldr	r3, [pc, #28]	; (8018b94 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	2080      	movs	r0, #128	; 0x80
 8018b7a:	4798      	blx	r3
            break;
 8018b7c:	e005      	b.n	8018b8a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8018b7e:	4b05      	ldr	r3, [pc, #20]	; (8018b94 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018b86:	4798      	blx	r3
            break;
 8018b88:	bf00      	nop
    }
}
 8018b8a:	bf00      	nop
 8018b8c:	3708      	adds	r7, #8
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd80      	pop	{r7, pc}
 8018b92:	bf00      	nop
 8018b94:	20001c80 	.word	0x20001c80

08018b98 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8018ba0:	4b04      	ldr	r3, [pc, #16]	; (8018bb4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018ba8:	4798      	blx	r3
}
 8018baa:	bf00      	nop
 8018bac:	3708      	adds	r7, #8
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}
 8018bb2:	bf00      	nop
 8018bb4:	20001c80 	.word	0x20001c80

08018bb8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8018bc0:	4b03      	ldr	r3, [pc, #12]	; (8018bd0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2020      	movs	r0, #32
 8018bc6:	4798      	blx	r3
}
 8018bc8:	bf00      	nop
 8018bca:	3708      	adds	r7, #8
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	20001c80 	.word	0x20001c80

08018bd4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b082      	sub	sp, #8
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8018bdc:	4b03      	ldr	r3, [pc, #12]	; (8018bec <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	2004      	movs	r0, #4
 8018be2:	4798      	blx	r3
}
 8018be4:	bf00      	nop
 8018be6:	3708      	adds	r7, #8
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	20001c80 	.word	0x20001c80

08018bf0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b082      	sub	sp, #8
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8018bf8:	4b03      	ldr	r3, [pc, #12]	; (8018c08 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	2008      	movs	r0, #8
 8018bfe:	4798      	blx	r3
}
 8018c00:	bf00      	nop
 8018c02:	3708      	adds	r7, #8
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}
 8018c08:	20001c80 	.word	0x20001c80

08018c0c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8018c14:	4b03      	ldr	r3, [pc, #12]	; (8018c24 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2010      	movs	r0, #16
 8018c1a:	4798      	blx	r3
}
 8018c1c:	bf00      	nop
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}
 8018c24:	20001c80 	.word	0x20001c80

08018c28 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b084      	sub	sp, #16
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	4603      	mov	r3, r0
 8018c30:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8018c32:	f7f0 ff6f 	bl	8009b14 <RBI_IsDCDC>
 8018c36:	4603      	mov	r3, r0
 8018c38:	2b01      	cmp	r3, #1
 8018c3a:	d112      	bne.n	8018c62 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8018c3c:	f640 1023 	movw	r0, #2339	; 0x923
 8018c40:	f7ff fe1e 	bl	8018880 <SUBGRF_ReadRegister>
 8018c44:	4603      	mov	r3, r0
 8018c46:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8018c48:	7bfb      	ldrb	r3, [r7, #15]
 8018c4a:	f023 0306 	bic.w	r3, r3, #6
 8018c4e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8018c50:	7bfa      	ldrb	r2, [r7, #15]
 8018c52:	79fb      	ldrb	r3, [r7, #7]
 8018c54:	4313      	orrs	r3, r2
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	4619      	mov	r1, r3
 8018c5a:	f640 1023 	movw	r0, #2339	; 0x923
 8018c5e:	f7ff fdfb 	bl	8018858 <SUBGRF_WriteRegister>
  }
}
 8018c62:	bf00      	nop
 8018c64:	3710      	adds	r7, #16
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}
	...

08018c6c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8018c6c:	b480      	push	{r7}
 8018c6e:	b085      	sub	sp, #20
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d101      	bne.n	8018c7e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8018c7a:	231f      	movs	r3, #31
 8018c7c:	e016      	b.n	8018cac <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018c7e:	2300      	movs	r3, #0
 8018c80:	73fb      	strb	r3, [r7, #15]
 8018c82:	e00f      	b.n	8018ca4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8018c84:	7bfb      	ldrb	r3, [r7, #15]
 8018c86:	4a0c      	ldr	r2, [pc, #48]	; (8018cb8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018c88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018c8c:	687a      	ldr	r2, [r7, #4]
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d205      	bcs.n	8018c9e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8018c92:	7bfb      	ldrb	r3, [r7, #15]
 8018c94:	4a08      	ldr	r2, [pc, #32]	; (8018cb8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	4413      	add	r3, r2
 8018c9a:	791b      	ldrb	r3, [r3, #4]
 8018c9c:	e006      	b.n	8018cac <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018c9e:	7bfb      	ldrb	r3, [r7, #15]
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	73fb      	strb	r3, [r7, #15]
 8018ca4:	7bfb      	ldrb	r3, [r7, #15]
 8018ca6:	2b15      	cmp	r3, #21
 8018ca8:	d9ec      	bls.n	8018c84 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8018caa:	e7fe      	b.n	8018caa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3714      	adds	r7, #20
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bc80      	pop	{r7}
 8018cb4:	4770      	bx	lr
 8018cb6:	bf00      	nop
 8018cb8:	0801b9d8 	.word	0x0801b9d8

08018cbc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08a      	sub	sp, #40	; 0x28
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8018cc6:	4b35      	ldr	r3, [pc, #212]	; (8018d9c <SUBGRF_GetCFO+0xe0>)
 8018cc8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8018cca:	f640 0007 	movw	r0, #2055	; 0x807
 8018cce:	f7ff fdd7 	bl	8018880 <SUBGRF_ReadRegister>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8018cd6:	7ffb      	ldrb	r3, [r7, #31]
 8018cd8:	08db      	lsrs	r3, r3, #3
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	f003 0303 	and.w	r3, r3, #3
 8018ce0:	3328      	adds	r3, #40	; 0x28
 8018ce2:	443b      	add	r3, r7
 8018ce4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8018ce8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8018cea:	7ffb      	ldrb	r3, [r7, #31]
 8018cec:	f003 0307 	and.w	r3, r3, #7
 8018cf0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8018cf2:	7fba      	ldrb	r2, [r7, #30]
 8018cf4:	7f7b      	ldrb	r3, [r7, #29]
 8018cf6:	3b01      	subs	r3, #1
 8018cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8018cfc:	461a      	mov	r2, r3
 8018cfe:	4b28      	ldr	r3, [pc, #160]	; (8018da0 <SUBGRF_GetCFO+0xe4>)
 8018d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d04:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8018d06:	69ba      	ldr	r2, [r7, #24]
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d0e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8018d10:	2301      	movs	r3, #1
 8018d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8018d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d1a:	697a      	ldr	r2, [r7, #20]
 8018d1c:	fb02 f303 	mul.w	r3, r2, r3
 8018d20:	2b07      	cmp	r3, #7
 8018d22:	d802      	bhi.n	8018d2a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8018d24:	2302      	movs	r3, #2
 8018d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8018d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d2e:	697a      	ldr	r2, [r7, #20]
 8018d30:	fb02 f303 	mul.w	r3, r2, r3
 8018d34:	2b03      	cmp	r3, #3
 8018d36:	d802      	bhi.n	8018d3e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8018d38:	2304      	movs	r3, #4
 8018d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8018d3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018d42:	69bb      	ldr	r3, [r7, #24]
 8018d44:	fb02 f303 	mul.w	r3, r2, r3
 8018d48:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8018d4a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8018d4e:	f7ff fd97 	bl	8018880 <SUBGRF_ReadRegister>
 8018d52:	4603      	mov	r3, r0
 8018d54:	021b      	lsls	r3, r3, #8
 8018d56:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018d5a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8018d5c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8018d60:	f7ff fd8e 	bl	8018880 <SUBGRF_ReadRegister>
 8018d64:	4603      	mov	r3, r0
 8018d66:	461a      	mov	r2, r3
 8018d68:	6a3b      	ldr	r3, [r7, #32]
 8018d6a:	4313      	orrs	r3, r2
 8018d6c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8018d6e:	6a3b      	ldr	r3, [r7, #32]
 8018d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d005      	beq.n	8018d84 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8018d78:	6a3b      	ldr	r3, [r7, #32]
 8018d7a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8018d7e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8018d82:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8018d84:	693b      	ldr	r3, [r7, #16]
 8018d86:	095b      	lsrs	r3, r3, #5
 8018d88:	6a3a      	ldr	r2, [r7, #32]
 8018d8a:	fb02 f303 	mul.w	r3, r2, r3
 8018d8e:	11da      	asrs	r2, r3, #7
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	601a      	str	r2, [r3, #0]
}
 8018d94:	bf00      	nop
 8018d96:	3728      	adds	r7, #40	; 0x28
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	0c0a0804 	.word	0x0c0a0804
 8018da0:	01e84800 	.word	0x01e84800

08018da4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8018da4:	b480      	push	{r7}
 8018da6:	b087      	sub	sp, #28
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	4603      	mov	r3, r0
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	607a      	str	r2, [r7, #4]
 8018db0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8018db2:	2300      	movs	r3, #0
 8018db4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8018db6:	f04f 33ff 	mov.w	r3, #4294967295
 8018dba:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8018dbc:	697b      	ldr	r3, [r7, #20]
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	371c      	adds	r7, #28
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bc80      	pop	{r7}
 8018dc6:	4770      	bx	lr

08018dc8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8018dc8:	b480      	push	{r7}
 8018dca:	b087      	sub	sp, #28
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	4603      	mov	r3, r0
 8018dd0:	60b9      	str	r1, [r7, #8]
 8018dd2:	607a      	str	r2, [r7, #4]
 8018dd4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8018dda:	f04f 33ff 	mov.w	r3, #4294967295
 8018dde:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8018de0:	697b      	ldr	r3, [r7, #20]
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	371c      	adds	r7, #28
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bc80      	pop	{r7}
 8018dea:	4770      	bx	lr

08018dec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8018dec:	b480      	push	{r7}
 8018dee:	b085      	sub	sp, #20
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	60f8      	str	r0, [r7, #12]
 8018df4:	60b9      	str	r1, [r7, #8]
 8018df6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8018df8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3714      	adds	r7, #20
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bc80      	pop	{r7}
 8018e04:	4770      	bx	lr

08018e06 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8018e06:	b480      	push	{r7}
 8018e08:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8018e0a:	bf00      	nop
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bc80      	pop	{r7}
 8018e10:	4770      	bx	lr

08018e12 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8018e12:	b480      	push	{r7}
 8018e14:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8018e16:	2300      	movs	r3, #0
#endif
}
 8018e18:	4618      	mov	r0, r3
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bc80      	pop	{r7}
 8018e1e:	4770      	bx	lr

08018e20 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8018e20:	b480      	push	{r7}
 8018e22:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8018e24:	2300      	movs	r3, #0
#endif
}
 8018e26:	4618      	mov	r0, r3
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bc80      	pop	{r7}
 8018e2c:	4770      	bx	lr

08018e2e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8018e2e:	b480      	push	{r7}
 8018e30:	b083      	sub	sp, #12
 8018e32:	af00      	add	r7, sp, #0
 8018e34:	4603      	mov	r3, r0
 8018e36:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8018e38:	bf00      	nop
 8018e3a:	370c      	adds	r7, #12
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	bc80      	pop	{r7}
 8018e40:	4770      	bx	lr

08018e42 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8018e42:	b480      	push	{r7}
 8018e44:	b087      	sub	sp, #28
 8018e46:	af00      	add	r7, sp, #0
 8018e48:	60f8      	str	r0, [r7, #12]
 8018e4a:	460b      	mov	r3, r1
 8018e4c:	607a      	str	r2, [r7, #4]
 8018e4e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8018e50:	f04f 33ff 	mov.w	r3, #4294967295
 8018e54:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8018e56:	697b      	ldr	r3, [r7, #20]
}
 8018e58:	4618      	mov	r0, r3
 8018e5a:	371c      	adds	r7, #28
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bc80      	pop	{r7}
 8018e60:	4770      	bx	lr

08018e62 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8018e62:	b480      	push	{r7}
 8018e64:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8018e66:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bc80      	pop	{r7}
 8018e70:	4770      	bx	lr

08018e72 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8018e72:	b480      	push	{r7}
 8018e74:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8018e76:	bf00      	nop
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bc80      	pop	{r7}
 8018e7c:	4770      	bx	lr

08018e7e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8018e7e:	b480      	push	{r7}
 8018e80:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8018e82:	bf00      	nop
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bc80      	pop	{r7}
 8018e88:	4770      	bx	lr

08018e8a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8018e8a:	b480      	push	{r7}
 8018e8c:	b083      	sub	sp, #12
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	4603      	mov	r3, r0
 8018e92:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8018e94:	bf00      	nop
 8018e96:	370c      	adds	r7, #12
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bc80      	pop	{r7}
 8018e9c:	4770      	bx	lr
	...

08018ea0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018ea0:	b480      	push	{r7}
 8018ea2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018ea4:	4b04      	ldr	r3, [pc, #16]	; (8018eb8 <UTIL_LPM_Init+0x18>)
 8018ea6:	2200      	movs	r2, #0
 8018ea8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018eaa:	4b04      	ldr	r3, [pc, #16]	; (8018ebc <UTIL_LPM_Init+0x1c>)
 8018eac:	2200      	movs	r2, #0
 8018eae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018eb0:	bf00      	nop
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bc80      	pop	{r7}
 8018eb6:	4770      	bx	lr
 8018eb8:	20001c84 	.word	0x20001c84
 8018ebc:	20001c88 	.word	0x20001c88

08018ec0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018ec0:	b480      	push	{r7}
 8018ec2:	b087      	sub	sp, #28
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
 8018ec8:	460b      	mov	r3, r1
 8018eca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8018ed0:	613b      	str	r3, [r7, #16]
  return(result);
 8018ed2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018ed4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018ed6:	b672      	cpsid	i
}
 8018ed8:	bf00      	nop
  
  switch( state )
 8018eda:	78fb      	ldrb	r3, [r7, #3]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d008      	beq.n	8018ef2 <UTIL_LPM_SetStopMode+0x32>
 8018ee0:	2b01      	cmp	r3, #1
 8018ee2:	d10e      	bne.n	8018f02 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8018ee4:	4b0d      	ldr	r3, [pc, #52]	; (8018f1c <UTIL_LPM_SetStopMode+0x5c>)
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	4313      	orrs	r3, r2
 8018eec:	4a0b      	ldr	r2, [pc, #44]	; (8018f1c <UTIL_LPM_SetStopMode+0x5c>)
 8018eee:	6013      	str	r3, [r2, #0]
      break;
 8018ef0:	e008      	b.n	8018f04 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	43da      	mvns	r2, r3
 8018ef6:	4b09      	ldr	r3, [pc, #36]	; (8018f1c <UTIL_LPM_SetStopMode+0x5c>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	4013      	ands	r3, r2
 8018efc:	4a07      	ldr	r2, [pc, #28]	; (8018f1c <UTIL_LPM_SetStopMode+0x5c>)
 8018efe:	6013      	str	r3, [r2, #0]
      break;
 8018f00:	e000      	b.n	8018f04 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8018f02:	bf00      	nop
 8018f04:	697b      	ldr	r3, [r7, #20]
 8018f06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	f383 8810 	msr	PRIMASK, r3
}
 8018f0e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018f10:	bf00      	nop
 8018f12:	371c      	adds	r7, #28
 8018f14:	46bd      	mov	sp, r7
 8018f16:	bc80      	pop	{r7}
 8018f18:	4770      	bx	lr
 8018f1a:	bf00      	nop
 8018f1c:	20001c84 	.word	0x20001c84

08018f20 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018f20:	b480      	push	{r7}
 8018f22:	b087      	sub	sp, #28
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	460b      	mov	r3, r1
 8018f2a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8018f30:	613b      	str	r3, [r7, #16]
  return(result);
 8018f32:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f36:	b672      	cpsid	i
}
 8018f38:	bf00      	nop
  
  switch(state)
 8018f3a:	78fb      	ldrb	r3, [r7, #3]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d008      	beq.n	8018f52 <UTIL_LPM_SetOffMode+0x32>
 8018f40:	2b01      	cmp	r3, #1
 8018f42:	d10e      	bne.n	8018f62 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018f44:	4b0d      	ldr	r3, [pc, #52]	; (8018f7c <UTIL_LPM_SetOffMode+0x5c>)
 8018f46:	681a      	ldr	r2, [r3, #0]
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	4313      	orrs	r3, r2
 8018f4c:	4a0b      	ldr	r2, [pc, #44]	; (8018f7c <UTIL_LPM_SetOffMode+0x5c>)
 8018f4e:	6013      	str	r3, [r2, #0]
      break;
 8018f50:	e008      	b.n	8018f64 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	43da      	mvns	r2, r3
 8018f56:	4b09      	ldr	r3, [pc, #36]	; (8018f7c <UTIL_LPM_SetOffMode+0x5c>)
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	4013      	ands	r3, r2
 8018f5c:	4a07      	ldr	r2, [pc, #28]	; (8018f7c <UTIL_LPM_SetOffMode+0x5c>)
 8018f5e:	6013      	str	r3, [r2, #0]
      break;
 8018f60:	e000      	b.n	8018f64 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018f62:	bf00      	nop
 8018f64:	697b      	ldr	r3, [r7, #20]
 8018f66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	f383 8810 	msr	PRIMASK, r3
}
 8018f6e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018f70:	bf00      	nop
 8018f72:	371c      	adds	r7, #28
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bc80      	pop	{r7}
 8018f78:	4770      	bx	lr
 8018f7a:	bf00      	nop
 8018f7c:	20001c88 	.word	0x20001c88

08018f80 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f86:	f3ef 8310 	mrs	r3, PRIMASK
 8018f8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f8c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8018f8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f90:	b672      	cpsid	i
}
 8018f92:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8018f94:	4b12      	ldr	r3, [pc, #72]	; (8018fe0 <UTIL_LPM_EnterLowPower+0x60>)
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d006      	beq.n	8018faa <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8018f9c:	4b11      	ldr	r3, [pc, #68]	; (8018fe4 <UTIL_LPM_EnterLowPower+0x64>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8018fa2:	4b10      	ldr	r3, [pc, #64]	; (8018fe4 <UTIL_LPM_EnterLowPower+0x64>)
 8018fa4:	685b      	ldr	r3, [r3, #4]
 8018fa6:	4798      	blx	r3
 8018fa8:	e010      	b.n	8018fcc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8018faa:	4b0f      	ldr	r3, [pc, #60]	; (8018fe8 <UTIL_LPM_EnterLowPower+0x68>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d006      	beq.n	8018fc0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8018fb2:	4b0c      	ldr	r3, [pc, #48]	; (8018fe4 <UTIL_LPM_EnterLowPower+0x64>)
 8018fb4:	689b      	ldr	r3, [r3, #8]
 8018fb6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8018fb8:	4b0a      	ldr	r3, [pc, #40]	; (8018fe4 <UTIL_LPM_EnterLowPower+0x64>)
 8018fba:	68db      	ldr	r3, [r3, #12]
 8018fbc:	4798      	blx	r3
 8018fbe:	e005      	b.n	8018fcc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8018fc0:	4b08      	ldr	r3, [pc, #32]	; (8018fe4 <UTIL_LPM_EnterLowPower+0x64>)
 8018fc2:	691b      	ldr	r3, [r3, #16]
 8018fc4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8018fc6:	4b07      	ldr	r3, [pc, #28]	; (8018fe4 <UTIL_LPM_EnterLowPower+0x64>)
 8018fc8:	695b      	ldr	r3, [r3, #20]
 8018fca:	4798      	blx	r3
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f383 8810 	msr	PRIMASK, r3
}
 8018fd6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8018fd8:	bf00      	nop
 8018fda:	3710      	adds	r7, #16
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}
 8018fe0:	20001c84 	.word	0x20001c84
 8018fe4:	0801b4d8 	.word	0x0801b4d8
 8018fe8:	20001c88 	.word	0x20001c88

08018fec <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8018fec:	b480      	push	{r7}
 8018fee:	b087      	sub	sp, #28
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	60f8      	str	r0, [r7, #12]
 8018ff4:	60b9      	str	r1, [r7, #8]
 8018ff6:	4613      	mov	r3, r2
 8018ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8018ffe:	68bb      	ldr	r3, [r7, #8]
 8019000:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019002:	e007      	b.n	8019014 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019004:	693a      	ldr	r2, [r7, #16]
 8019006:	1c53      	adds	r3, r2, #1
 8019008:	613b      	str	r3, [r7, #16]
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	1c59      	adds	r1, r3, #1
 801900e:	6179      	str	r1, [r7, #20]
 8019010:	7812      	ldrb	r2, [r2, #0]
 8019012:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019014:	88fb      	ldrh	r3, [r7, #6]
 8019016:	1e5a      	subs	r2, r3, #1
 8019018:	80fa      	strh	r2, [r7, #6]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d1f2      	bne.n	8019004 <UTIL_MEM_cpy_8+0x18>
    }
}
 801901e:	bf00      	nop
 8019020:	bf00      	nop
 8019022:	371c      	adds	r7, #28
 8019024:	46bd      	mov	sp, r7
 8019026:	bc80      	pop	{r7}
 8019028:	4770      	bx	lr

0801902a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801902a:	b480      	push	{r7}
 801902c:	b085      	sub	sp, #20
 801902e:	af00      	add	r7, sp, #0
 8019030:	6078      	str	r0, [r7, #4]
 8019032:	460b      	mov	r3, r1
 8019034:	70fb      	strb	r3, [r7, #3]
 8019036:	4613      	mov	r3, r2
 8019038:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801903e:	e004      	b.n	801904a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	1c5a      	adds	r2, r3, #1
 8019044:	60fa      	str	r2, [r7, #12]
 8019046:	78fa      	ldrb	r2, [r7, #3]
 8019048:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801904a:	883b      	ldrh	r3, [r7, #0]
 801904c:	1e5a      	subs	r2, r3, #1
 801904e:	803a      	strh	r2, [r7, #0]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d1f5      	bne.n	8019040 <UTIL_MEM_set_8+0x16>
  }
}
 8019054:	bf00      	nop
 8019056:	bf00      	nop
 8019058:	3714      	adds	r7, #20
 801905a:	46bd      	mov	sp, r7
 801905c:	bc80      	pop	{r7}
 801905e:	4770      	bx	lr

08019060 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019060:	b082      	sub	sp, #8
 8019062:	b480      	push	{r7}
 8019064:	b087      	sub	sp, #28
 8019066:	af00      	add	r7, sp, #0
 8019068:	60f8      	str	r0, [r7, #12]
 801906a:	1d38      	adds	r0, r7, #4
 801906c:	e880 0006 	stmia.w	r0, {r1, r2}
 8019070:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019072:	2300      	movs	r3, #0
 8019074:	613b      	str	r3, [r7, #16]
 8019076:	2300      	movs	r3, #0
 8019078:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801907e:	4413      	add	r3, r2
 8019080:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019082:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019086:	b29a      	uxth	r2, r3
 8019088:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801908c:	b29b      	uxth	r3, r3
 801908e:	4413      	add	r3, r2
 8019090:	b29b      	uxth	r3, r3
 8019092:	b21b      	sxth	r3, r3
 8019094:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019096:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801909a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801909e:	db0a      	blt.n	80190b6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 80190a0:	693b      	ldr	r3, [r7, #16]
 80190a2:	3301      	adds	r3, #1
 80190a4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 80190a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80190b0:	b29b      	uxth	r3, r3
 80190b2:	b21b      	sxth	r3, r3
 80190b4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	461a      	mov	r2, r3
 80190ba:	f107 0310 	add.w	r3, r7, #16
 80190be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80190c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80190c6:	68f8      	ldr	r0, [r7, #12]
 80190c8:	371c      	adds	r7, #28
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bc80      	pop	{r7}
 80190ce:	b002      	add	sp, #8
 80190d0:	4770      	bx	lr

080190d2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80190d2:	b082      	sub	sp, #8
 80190d4:	b480      	push	{r7}
 80190d6:	b087      	sub	sp, #28
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	1d38      	adds	r0, r7, #4
 80190de:	e880 0006 	stmia.w	r0, {r1, r2}
 80190e2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80190e4:	2300      	movs	r3, #0
 80190e6:	613b      	str	r3, [r7, #16]
 80190e8:	2300      	movs	r3, #0
 80190ea:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80190ec:	687a      	ldr	r2, [r7, #4]
 80190ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f0:	1ad3      	subs	r3, r2, r3
 80190f2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80190f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80190f8:	b29a      	uxth	r2, r3
 80190fa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80190fe:	b29b      	uxth	r3, r3
 8019100:	1ad3      	subs	r3, r2, r3
 8019102:	b29b      	uxth	r3, r3
 8019104:	b21b      	sxth	r3, r3
 8019106:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019108:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801910c:	2b00      	cmp	r3, #0
 801910e:	da0a      	bge.n	8019126 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019110:	693b      	ldr	r3, [r7, #16]
 8019112:	3b01      	subs	r3, #1
 8019114:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019116:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801911a:	b29b      	uxth	r3, r3
 801911c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019120:	b29b      	uxth	r3, r3
 8019122:	b21b      	sxth	r3, r3
 8019124:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	461a      	mov	r2, r3
 801912a:	f107 0310 	add.w	r3, r7, #16
 801912e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019132:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019136:	68f8      	ldr	r0, [r7, #12]
 8019138:	371c      	adds	r7, #28
 801913a:	46bd      	mov	sp, r7
 801913c:	bc80      	pop	{r7}
 801913e:	b002      	add	sp, #8
 8019140:	4770      	bx	lr
	...

08019144 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b088      	sub	sp, #32
 8019148:	af02      	add	r7, sp, #8
 801914a:	463b      	mov	r3, r7
 801914c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019150:	2300      	movs	r3, #0
 8019152:	60bb      	str	r3, [r7, #8]
 8019154:	2300      	movs	r3, #0
 8019156:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019158:	4b10      	ldr	r3, [pc, #64]	; (801919c <SysTimeSet+0x58>)
 801915a:	691b      	ldr	r3, [r3, #16]
 801915c:	f107 0208 	add.w	r2, r7, #8
 8019160:	3204      	adds	r2, #4
 8019162:	4610      	mov	r0, r2
 8019164:	4798      	blx	r3
 8019166:	4603      	mov	r3, r0
 8019168:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801916a:	f107 0010 	add.w	r0, r7, #16
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	9300      	str	r3, [sp, #0]
 8019172:	68bb      	ldr	r3, [r7, #8]
 8019174:	463a      	mov	r2, r7
 8019176:	ca06      	ldmia	r2, {r1, r2}
 8019178:	f7ff ffab 	bl	80190d2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801917c:	4b07      	ldr	r3, [pc, #28]	; (801919c <SysTimeSet+0x58>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	693a      	ldr	r2, [r7, #16]
 8019182:	4610      	mov	r0, r2
 8019184:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019186:	4b05      	ldr	r3, [pc, #20]	; (801919c <SysTimeSet+0x58>)
 8019188:	689b      	ldr	r3, [r3, #8]
 801918a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801918e:	4610      	mov	r0, r2
 8019190:	4798      	blx	r3
}
 8019192:	bf00      	nop
 8019194:	3718      	adds	r7, #24
 8019196:	46bd      	mov	sp, r7
 8019198:	bd80      	pop	{r7, pc}
 801919a:	bf00      	nop
 801919c:	0801b5bc 	.word	0x0801b5bc

080191a0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b08a      	sub	sp, #40	; 0x28
 80191a4:	af02      	add	r7, sp, #8
 80191a6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80191a8:	2300      	movs	r3, #0
 80191aa:	61bb      	str	r3, [r7, #24]
 80191ac:	2300      	movs	r3, #0
 80191ae:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80191b0:	2300      	movs	r3, #0
 80191b2:	613b      	str	r3, [r7, #16]
 80191b4:	2300      	movs	r3, #0
 80191b6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80191b8:	4b14      	ldr	r3, [pc, #80]	; (801920c <SysTimeGet+0x6c>)
 80191ba:	691b      	ldr	r3, [r3, #16]
 80191bc:	f107 0218 	add.w	r2, r7, #24
 80191c0:	3204      	adds	r2, #4
 80191c2:	4610      	mov	r0, r2
 80191c4:	4798      	blx	r3
 80191c6:	4603      	mov	r3, r0
 80191c8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80191ca:	4b10      	ldr	r3, [pc, #64]	; (801920c <SysTimeGet+0x6c>)
 80191cc:	68db      	ldr	r3, [r3, #12]
 80191ce:	4798      	blx	r3
 80191d0:	4603      	mov	r3, r0
 80191d2:	b21b      	sxth	r3, r3
 80191d4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80191d6:	4b0d      	ldr	r3, [pc, #52]	; (801920c <SysTimeGet+0x6c>)
 80191d8:	685b      	ldr	r3, [r3, #4]
 80191da:	4798      	blx	r3
 80191dc:	4603      	mov	r3, r0
 80191de:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80191e0:	f107 0010 	add.w	r0, r7, #16
 80191e4:	69fb      	ldr	r3, [r7, #28]
 80191e6:	9300      	str	r3, [sp, #0]
 80191e8:	69bb      	ldr	r3, [r7, #24]
 80191ea:	f107 0208 	add.w	r2, r7, #8
 80191ee:	ca06      	ldmia	r2, {r1, r2}
 80191f0:	f7ff ff36 	bl	8019060 <SysTimeAdd>

  return sysTime;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	461a      	mov	r2, r3
 80191f8:	f107 0310 	add.w	r3, r7, #16
 80191fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019200:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	3720      	adds	r7, #32
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}
 801920c:	0801b5bc 	.word	0x0801b5bc

08019210 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b084      	sub	sp, #16
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019218:	2300      	movs	r3, #0
 801921a:	60bb      	str	r3, [r7, #8]
 801921c:	2300      	movs	r3, #0
 801921e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019220:	4b0a      	ldr	r3, [pc, #40]	; (801924c <SysTimeGetMcuTime+0x3c>)
 8019222:	691b      	ldr	r3, [r3, #16]
 8019224:	f107 0208 	add.w	r2, r7, #8
 8019228:	3204      	adds	r2, #4
 801922a:	4610      	mov	r0, r2
 801922c:	4798      	blx	r3
 801922e:	4603      	mov	r3, r0
 8019230:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	461a      	mov	r2, r3
 8019236:	f107 0308 	add.w	r3, r7, #8
 801923a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801923e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	3710      	adds	r7, #16
 8019246:	46bd      	mov	sp, r7
 8019248:	bd80      	pop	{r7, pc}
 801924a:	bf00      	nop
 801924c:	0801b5bc 	.word	0x0801b5bc

08019250 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b088      	sub	sp, #32
 8019254:	af02      	add	r7, sp, #8
 8019256:	463b      	mov	r3, r7
 8019258:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801925c:	4b0f      	ldr	r3, [pc, #60]	; (801929c <SysTimeToMs+0x4c>)
 801925e:	68db      	ldr	r3, [r3, #12]
 8019260:	4798      	blx	r3
 8019262:	4603      	mov	r3, r0
 8019264:	b21b      	sxth	r3, r3
 8019266:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019268:	4b0c      	ldr	r3, [pc, #48]	; (801929c <SysTimeToMs+0x4c>)
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	4798      	blx	r3
 801926e:	4603      	mov	r3, r0
 8019270:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019272:	f107 0008 	add.w	r0, r7, #8
 8019276:	697b      	ldr	r3, [r7, #20]
 8019278:	9300      	str	r3, [sp, #0]
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	463a      	mov	r2, r7
 801927e:	ca06      	ldmia	r2, {r1, r2}
 8019280:	f7ff ff27 	bl	80190d2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801928a:	fb02 f303 	mul.w	r3, r2, r3
 801928e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019292:	4413      	add	r3, r2
}
 8019294:	4618      	mov	r0, r3
 8019296:	3718      	adds	r7, #24
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	0801b5bc 	.word	0x0801b5bc

080192a0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b08a      	sub	sp, #40	; 0x28
 80192a4:	af02      	add	r7, sp, #8
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	4a19      	ldr	r2, [pc, #100]	; (8019314 <SysTimeFromMs+0x74>)
 80192ae:	fba2 2303 	umull	r2, r3, r2, r3
 80192b2:	099b      	lsrs	r3, r3, #6
 80192b4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80192b6:	69fb      	ldr	r3, [r7, #28]
 80192b8:	617b      	str	r3, [r7, #20]
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	b29a      	uxth	r2, r3
 80192be:	69fb      	ldr	r3, [r7, #28]
 80192c0:	b29b      	uxth	r3, r3
 80192c2:	4619      	mov	r1, r3
 80192c4:	0149      	lsls	r1, r1, #5
 80192c6:	1ac9      	subs	r1, r1, r3
 80192c8:	0089      	lsls	r1, r1, #2
 80192ca:	440b      	add	r3, r1
 80192cc:	00db      	lsls	r3, r3, #3
 80192ce:	b29b      	uxth	r3, r3
 80192d0:	1ad3      	subs	r3, r2, r3
 80192d2:	b29b      	uxth	r3, r3
 80192d4:	b21b      	sxth	r3, r3
 80192d6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 80192d8:	f107 030c 	add.w	r3, r7, #12
 80192dc:	2200      	movs	r2, #0
 80192de:	601a      	str	r2, [r3, #0]
 80192e0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80192e2:	4b0d      	ldr	r3, [pc, #52]	; (8019318 <SysTimeFromMs+0x78>)
 80192e4:	68db      	ldr	r3, [r3, #12]
 80192e6:	4798      	blx	r3
 80192e8:	4603      	mov	r3, r0
 80192ea:	b21b      	sxth	r3, r3
 80192ec:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80192ee:	4b0a      	ldr	r3, [pc, #40]	; (8019318 <SysTimeFromMs+0x78>)
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	4798      	blx	r3
 80192f4:	4603      	mov	r3, r0
 80192f6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 80192f8:	6878      	ldr	r0, [r7, #4]
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	9300      	str	r3, [sp, #0]
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	f107 0214 	add.w	r2, r7, #20
 8019304:	ca06      	ldmia	r2, {r1, r2}
 8019306:	f7ff feab 	bl	8019060 <SysTimeAdd>
}
 801930a:	6878      	ldr	r0, [r7, #4]
 801930c:	3720      	adds	r7, #32
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
 8019312:	bf00      	nop
 8019314:	10624dd3 	.word	0x10624dd3
 8019318:	0801b5bc 	.word	0x0801b5bc

0801931c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801931c:	b480      	push	{r7}
 801931e:	b085      	sub	sp, #20
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019328:	e00e      	b.n	8019348 <ee_skip_atoi+0x2c>
 801932a:	68fa      	ldr	r2, [r7, #12]
 801932c:	4613      	mov	r3, r2
 801932e:	009b      	lsls	r3, r3, #2
 8019330:	4413      	add	r3, r2
 8019332:	005b      	lsls	r3, r3, #1
 8019334:	4618      	mov	r0, r3
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	1c59      	adds	r1, r3, #1
 801933c:	687a      	ldr	r2, [r7, #4]
 801933e:	6011      	str	r1, [r2, #0]
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	4403      	add	r3, r0
 8019344:	3b30      	subs	r3, #48	; 0x30
 8019346:	60fb      	str	r3, [r7, #12]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	781b      	ldrb	r3, [r3, #0]
 801934e:	2b2f      	cmp	r3, #47	; 0x2f
 8019350:	d904      	bls.n	801935c <ee_skip_atoi+0x40>
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	2b39      	cmp	r3, #57	; 0x39
 801935a:	d9e6      	bls.n	801932a <ee_skip_atoi+0xe>
  return i;
 801935c:	68fb      	ldr	r3, [r7, #12]
}
 801935e:	4618      	mov	r0, r3
 8019360:	3714      	adds	r7, #20
 8019362:	46bd      	mov	sp, r7
 8019364:	bc80      	pop	{r7}
 8019366:	4770      	bx	lr

08019368 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019368:	b480      	push	{r7}
 801936a:	b099      	sub	sp, #100	; 0x64
 801936c:	af00      	add	r7, sp, #0
 801936e:	60f8      	str	r0, [r7, #12]
 8019370:	60b9      	str	r1, [r7, #8]
 8019372:	607a      	str	r2, [r7, #4]
 8019374:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019376:	4b71      	ldr	r3, [pc, #452]	; (801953c <ee_number+0x1d4>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801937c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801937e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019382:	2b00      	cmp	r3, #0
 8019384:	d002      	beq.n	801938c <ee_number+0x24>
 8019386:	4b6e      	ldr	r3, [pc, #440]	; (8019540 <ee_number+0x1d8>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	2b01      	cmp	r3, #1
 8019390:	dd02      	ble.n	8019398 <ee_number+0x30>
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	2b24      	cmp	r3, #36	; 0x24
 8019396:	dd01      	ble.n	801939c <ee_number+0x34>
 8019398:	2300      	movs	r3, #0
 801939a:	e0ca      	b.n	8019532 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801939c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801939e:	f003 0301 	and.w	r3, r3, #1
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d001      	beq.n	80193aa <ee_number+0x42>
 80193a6:	2330      	movs	r3, #48	; 0x30
 80193a8:	e000      	b.n	80193ac <ee_number+0x44>
 80193aa:	2320      	movs	r3, #32
 80193ac:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 80193b0:	2300      	movs	r3, #0
 80193b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 80193b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193b8:	f003 0302 	and.w	r3, r3, #2
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d00b      	beq.n	80193d8 <ee_number+0x70>
  {
    if (num < 0)
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	da08      	bge.n	80193d8 <ee_number+0x70>
    {
      sign = '-';
 80193c6:	232d      	movs	r3, #45	; 0x2d
 80193c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	425b      	negs	r3, r3
 80193d0:	607b      	str	r3, [r7, #4]
      size--;
 80193d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80193d4:	3b01      	subs	r3, #1
 80193d6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 80193d8:	2300      	movs	r3, #0
 80193da:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d11e      	bne.n	8019420 <ee_number+0xb8>
    tmp[i++] = '0';
 80193e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193e4:	1c5a      	adds	r2, r3, #1
 80193e6:	657a      	str	r2, [r7, #84]	; 0x54
 80193e8:	3360      	adds	r3, #96	; 0x60
 80193ea:	443b      	add	r3, r7
 80193ec:	2230      	movs	r2, #48	; 0x30
 80193ee:	f803 2c50 	strb.w	r2, [r3, #-80]
 80193f2:	e018      	b.n	8019426 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	683a      	ldr	r2, [r7, #0]
 80193f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80193fc:	fb01 f202 	mul.w	r2, r1, r2
 8019400:	1a9b      	subs	r3, r3, r2
 8019402:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019404:	441a      	add	r2, r3
 8019406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019408:	1c59      	adds	r1, r3, #1
 801940a:	6579      	str	r1, [r7, #84]	; 0x54
 801940c:	7812      	ldrb	r2, [r2, #0]
 801940e:	3360      	adds	r3, #96	; 0x60
 8019410:	443b      	add	r3, r7
 8019412:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019416:	687a      	ldr	r2, [r7, #4]
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	fbb2 f3f3 	udiv	r3, r2, r3
 801941e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d1e6      	bne.n	80193f4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8019426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801942a:	429a      	cmp	r2, r3
 801942c:	dd01      	ble.n	8019432 <ee_number+0xca>
 801942e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019430:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019436:	1ad3      	subs	r3, r2, r3
 8019438:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801943a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801943c:	f003 0301 	and.w	r3, r3, #1
 8019440:	2b00      	cmp	r3, #0
 8019442:	d112      	bne.n	801946a <ee_number+0x102>
 8019444:	e00c      	b.n	8019460 <ee_number+0xf8>
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	1c5a      	adds	r2, r3, #1
 801944a:	60fa      	str	r2, [r7, #12]
 801944c:	2220      	movs	r2, #32
 801944e:	701a      	strb	r2, [r3, #0]
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	3b01      	subs	r3, #1
 8019454:	60bb      	str	r3, [r7, #8]
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d101      	bne.n	8019460 <ee_number+0xf8>
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	e068      	b.n	8019532 <ee_number+0x1ca>
 8019460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019462:	1e5a      	subs	r2, r3, #1
 8019464:	66ba      	str	r2, [r7, #104]	; 0x68
 8019466:	2b00      	cmp	r3, #0
 8019468:	dced      	bgt.n	8019446 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801946a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801946e:	2b00      	cmp	r3, #0
 8019470:	d01b      	beq.n	80194aa <ee_number+0x142>
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	1c5a      	adds	r2, r3, #1
 8019476:	60fa      	str	r2, [r7, #12]
 8019478:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801947c:	701a      	strb	r2, [r3, #0]
 801947e:	68bb      	ldr	r3, [r7, #8]
 8019480:	3b01      	subs	r3, #1
 8019482:	60bb      	str	r3, [r7, #8]
 8019484:	68bb      	ldr	r3, [r7, #8]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d10f      	bne.n	80194aa <ee_number+0x142>
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	e051      	b.n	8019532 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	1c5a      	adds	r2, r3, #1
 8019492:	60fa      	str	r2, [r7, #12]
 8019494:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019498:	701a      	strb	r2, [r3, #0]
 801949a:	68bb      	ldr	r3, [r7, #8]
 801949c:	3b01      	subs	r3, #1
 801949e:	60bb      	str	r3, [r7, #8]
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d101      	bne.n	80194aa <ee_number+0x142>
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	e043      	b.n	8019532 <ee_number+0x1ca>
 80194aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80194ac:	1e5a      	subs	r2, r3, #1
 80194ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	dcec      	bgt.n	801948e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 80194b4:	e00c      	b.n	80194d0 <ee_number+0x168>
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	1c5a      	adds	r2, r3, #1
 80194ba:	60fa      	str	r2, [r7, #12]
 80194bc:	2230      	movs	r2, #48	; 0x30
 80194be:	701a      	strb	r2, [r3, #0]
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	3b01      	subs	r3, #1
 80194c4:	60bb      	str	r3, [r7, #8]
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d101      	bne.n	80194d0 <ee_number+0x168>
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	e030      	b.n	8019532 <ee_number+0x1ca>
 80194d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194d2:	1e5a      	subs	r2, r3, #1
 80194d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80194d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80194d8:	429a      	cmp	r2, r3
 80194da:	dbec      	blt.n	80194b6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80194dc:	e010      	b.n	8019500 <ee_number+0x198>
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	1c5a      	adds	r2, r3, #1
 80194e2:	60fa      	str	r2, [r7, #12]
 80194e4:	f107 0110 	add.w	r1, r7, #16
 80194e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80194ea:	440a      	add	r2, r1
 80194ec:	7812      	ldrb	r2, [r2, #0]
 80194ee:	701a      	strb	r2, [r3, #0]
 80194f0:	68bb      	ldr	r3, [r7, #8]
 80194f2:	3b01      	subs	r3, #1
 80194f4:	60bb      	str	r3, [r7, #8]
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d101      	bne.n	8019500 <ee_number+0x198>
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	e018      	b.n	8019532 <ee_number+0x1ca>
 8019500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019502:	1e5a      	subs	r2, r3, #1
 8019504:	657a      	str	r2, [r7, #84]	; 0x54
 8019506:	2b00      	cmp	r3, #0
 8019508:	dce9      	bgt.n	80194de <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801950a:	e00c      	b.n	8019526 <ee_number+0x1be>
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	1c5a      	adds	r2, r3, #1
 8019510:	60fa      	str	r2, [r7, #12]
 8019512:	2220      	movs	r2, #32
 8019514:	701a      	strb	r2, [r3, #0]
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	3b01      	subs	r3, #1
 801951a:	60bb      	str	r3, [r7, #8]
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d101      	bne.n	8019526 <ee_number+0x1be>
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	e005      	b.n	8019532 <ee_number+0x1ca>
 8019526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019528:	1e5a      	subs	r2, r3, #1
 801952a:	66ba      	str	r2, [r7, #104]	; 0x68
 801952c:	2b00      	cmp	r3, #0
 801952e:	dced      	bgt.n	801950c <ee_number+0x1a4>

  return str;
 8019530:	68fb      	ldr	r3, [r7, #12]
}
 8019532:	4618      	mov	r0, r3
 8019534:	3764      	adds	r7, #100	; 0x64
 8019536:	46bd      	mov	sp, r7
 8019538:	bc80      	pop	{r7}
 801953a:	4770      	bx	lr
 801953c:	2000013c 	.word	0x2000013c
 8019540:	20000140 	.word	0x20000140

08019544 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b092      	sub	sp, #72	; 0x48
 8019548:	af04      	add	r7, sp, #16
 801954a:	60f8      	str	r0, [r7, #12]
 801954c:	60b9      	str	r1, [r7, #8]
 801954e:	607a      	str	r2, [r7, #4]
 8019550:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	2b00      	cmp	r3, #0
 8019556:	dc01      	bgt.n	801955c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019558:	2300      	movs	r3, #0
 801955a:	e142      	b.n	80197e2 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019560:	e12a      	b.n	80197b8 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	1ad2      	subs	r2, r2, r3
 8019568:	68bb      	ldr	r3, [r7, #8]
 801956a:	3b01      	subs	r3, #1
 801956c:	429a      	cmp	r2, r3
 801956e:	f280 8131 	bge.w	80197d4 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	781b      	ldrb	r3, [r3, #0]
 8019576:	2b25      	cmp	r3, #37	; 0x25
 8019578:	d006      	beq.n	8019588 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801957a:	687a      	ldr	r2, [r7, #4]
 801957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957e:	1c59      	adds	r1, r3, #1
 8019580:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019582:	7812      	ldrb	r2, [r2, #0]
 8019584:	701a      	strb	r2, [r3, #0]
      continue;
 8019586:	e114      	b.n	80197b2 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 8019588:	2300      	movs	r3, #0
 801958a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	3301      	adds	r3, #1
 8019590:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	781b      	ldrb	r3, [r3, #0]
 8019596:	2b30      	cmp	r3, #48	; 0x30
 8019598:	d103      	bne.n	80195a2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801959a:	6a3b      	ldr	r3, [r7, #32]
 801959c:	f043 0301 	orr.w	r3, r3, #1
 80195a0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 80195a2:	f04f 33ff 	mov.w	r3, #4294967295
 80195a6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	781b      	ldrb	r3, [r3, #0]
 80195ac:	2b2f      	cmp	r3, #47	; 0x2f
 80195ae:	d908      	bls.n	80195c2 <tiny_vsnprintf_like+0x7e>
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	781b      	ldrb	r3, [r3, #0]
 80195b4:	2b39      	cmp	r3, #57	; 0x39
 80195b6:	d804      	bhi.n	80195c2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 80195b8:	1d3b      	adds	r3, r7, #4
 80195ba:	4618      	mov	r0, r3
 80195bc:	f7ff feae 	bl	801931c <ee_skip_atoi>
 80195c0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 80195c2:	f04f 33ff 	mov.w	r3, #4294967295
 80195c6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 80195c8:	f04f 33ff 	mov.w	r3, #4294967295
 80195cc:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 80195ce:	230a      	movs	r3, #10
 80195d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	781b      	ldrb	r3, [r3, #0]
 80195d6:	3b58      	subs	r3, #88	; 0x58
 80195d8:	2b20      	cmp	r3, #32
 80195da:	f200 8094 	bhi.w	8019706 <tiny_vsnprintf_like+0x1c2>
 80195de:	a201      	add	r2, pc, #4	; (adr r2, 80195e4 <tiny_vsnprintf_like+0xa0>)
 80195e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195e4:	080196ef 	.word	0x080196ef
 80195e8:	08019707 	.word	0x08019707
 80195ec:	08019707 	.word	0x08019707
 80195f0:	08019707 	.word	0x08019707
 80195f4:	08019707 	.word	0x08019707
 80195f8:	08019707 	.word	0x08019707
 80195fc:	08019707 	.word	0x08019707
 8019600:	08019707 	.word	0x08019707
 8019604:	08019707 	.word	0x08019707
 8019608:	08019707 	.word	0x08019707
 801960c:	08019707 	.word	0x08019707
 8019610:	08019673 	.word	0x08019673
 8019614:	080196fd 	.word	0x080196fd
 8019618:	08019707 	.word	0x08019707
 801961c:	08019707 	.word	0x08019707
 8019620:	08019707 	.word	0x08019707
 8019624:	08019707 	.word	0x08019707
 8019628:	080196fd 	.word	0x080196fd
 801962c:	08019707 	.word	0x08019707
 8019630:	08019707 	.word	0x08019707
 8019634:	08019707 	.word	0x08019707
 8019638:	08019707 	.word	0x08019707
 801963c:	08019707 	.word	0x08019707
 8019640:	08019707 	.word	0x08019707
 8019644:	08019707 	.word	0x08019707
 8019648:	08019707 	.word	0x08019707
 801964c:	08019707 	.word	0x08019707
 8019650:	08019693 	.word	0x08019693
 8019654:	08019707 	.word	0x08019707
 8019658:	08019753 	.word	0x08019753
 801965c:	08019707 	.word	0x08019707
 8019660:	08019707 	.word	0x08019707
 8019664:	080196f7 	.word	0x080196f7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801966a:	1c5a      	adds	r2, r3, #1
 801966c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801966e:	2220      	movs	r2, #32
 8019670:	701a      	strb	r2, [r3, #0]
 8019672:	69fb      	ldr	r3, [r7, #28]
 8019674:	3b01      	subs	r3, #1
 8019676:	61fb      	str	r3, [r7, #28]
 8019678:	69fb      	ldr	r3, [r7, #28]
 801967a:	2b00      	cmp	r3, #0
 801967c:	dcf4      	bgt.n	8019668 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	1d1a      	adds	r2, r3, #4
 8019682:	603a      	str	r2, [r7, #0]
 8019684:	6819      	ldr	r1, [r3, #0]
 8019686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019688:	1c5a      	adds	r2, r3, #1
 801968a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801968c:	b2ca      	uxtb	r2, r1
 801968e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019690:	e08f      	b.n	80197b2 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019692:	683b      	ldr	r3, [r7, #0]
 8019694:	1d1a      	adds	r2, r3, #4
 8019696:	603a      	str	r2, [r7, #0]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d101      	bne.n	80196a6 <tiny_vsnprintf_like+0x162>
 80196a2:	4b52      	ldr	r3, [pc, #328]	; (80197ec <tiny_vsnprintf_like+0x2a8>)
 80196a4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 80196a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196a8:	f7e6 fd6a 	bl	8000180 <strlen>
 80196ac:	4603      	mov	r3, r0
 80196ae:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80196b0:	e004      	b.n	80196bc <tiny_vsnprintf_like+0x178>
 80196b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196b4:	1c5a      	adds	r2, r3, #1
 80196b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80196b8:	2220      	movs	r2, #32
 80196ba:	701a      	strb	r2, [r3, #0]
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	1e5a      	subs	r2, r3, #1
 80196c0:	61fa      	str	r2, [r7, #28]
 80196c2:	693a      	ldr	r2, [r7, #16]
 80196c4:	429a      	cmp	r2, r3
 80196c6:	dbf4      	blt.n	80196b2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80196c8:	2300      	movs	r3, #0
 80196ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80196cc:	e00a      	b.n	80196e4 <tiny_vsnprintf_like+0x1a0>
 80196ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196d0:	1c53      	adds	r3, r2, #1
 80196d2:	627b      	str	r3, [r7, #36]	; 0x24
 80196d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d6:	1c59      	adds	r1, r3, #1
 80196d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80196da:	7812      	ldrb	r2, [r2, #0]
 80196dc:	701a      	strb	r2, [r3, #0]
 80196de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196e0:	3301      	adds	r3, #1
 80196e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80196e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	429a      	cmp	r2, r3
 80196ea:	dbf0      	blt.n	80196ce <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 80196ec:	e061      	b.n	80197b2 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80196ee:	6a3b      	ldr	r3, [r7, #32]
 80196f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196f4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 80196f6:	2310      	movs	r3, #16
 80196f8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80196fa:	e02d      	b.n	8019758 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 80196fc:	6a3b      	ldr	r3, [r7, #32]
 80196fe:	f043 0302 	orr.w	r3, r3, #2
 8019702:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019704:	e025      	b.n	8019752 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	781b      	ldrb	r3, [r3, #0]
 801970a:	2b25      	cmp	r3, #37	; 0x25
 801970c:	d004      	beq.n	8019718 <tiny_vsnprintf_like+0x1d4>
 801970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019710:	1c5a      	adds	r2, r3, #1
 8019712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019714:	2225      	movs	r2, #37	; 0x25
 8019716:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	1ad2      	subs	r2, r2, r3
 801971e:	68bb      	ldr	r3, [r7, #8]
 8019720:	3b01      	subs	r3, #1
 8019722:	429a      	cmp	r2, r3
 8019724:	da17      	bge.n	8019756 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d006      	beq.n	801973c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801972e:	687a      	ldr	r2, [r7, #4]
 8019730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019732:	1c59      	adds	r1, r3, #1
 8019734:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019736:	7812      	ldrb	r2, [r2, #0]
 8019738:	701a      	strb	r2, [r3, #0]
 801973a:	e002      	b.n	8019742 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	3b01      	subs	r3, #1
 8019740:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	1ad2      	subs	r2, r2, r3
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	3b01      	subs	r3, #1
 801974c:	429a      	cmp	r2, r3
 801974e:	db2f      	blt.n	80197b0 <tiny_vsnprintf_like+0x26c>
 8019750:	e002      	b.n	8019758 <tiny_vsnprintf_like+0x214>
        break;
 8019752:	bf00      	nop
 8019754:	e000      	b.n	8019758 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019756:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	2b6c      	cmp	r3, #108	; 0x6c
 801975c:	d105      	bne.n	801976a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	1d1a      	adds	r2, r3, #4
 8019762:	603a      	str	r2, [r7, #0]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	637b      	str	r3, [r7, #52]	; 0x34
 8019768:	e00f      	b.n	801978a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801976a:	6a3b      	ldr	r3, [r7, #32]
 801976c:	f003 0302 	and.w	r3, r3, #2
 8019770:	2b00      	cmp	r3, #0
 8019772:	d005      	beq.n	8019780 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	1d1a      	adds	r2, r3, #4
 8019778:	603a      	str	r2, [r7, #0]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	637b      	str	r3, [r7, #52]	; 0x34
 801977e:	e004      	b.n	801978a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019780:	683b      	ldr	r3, [r7, #0]
 8019782:	1d1a      	adds	r2, r3, #4
 8019784:	603a      	str	r2, [r7, #0]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801978a:	68bb      	ldr	r3, [r7, #8]
 801978c:	1e5a      	subs	r2, r3, #1
 801978e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	1acb      	subs	r3, r1, r3
 8019794:	1ad1      	subs	r1, r2, r3
 8019796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019798:	6a3b      	ldr	r3, [r7, #32]
 801979a:	9302      	str	r3, [sp, #8]
 801979c:	69bb      	ldr	r3, [r7, #24]
 801979e:	9301      	str	r3, [sp, #4]
 80197a0:	69fb      	ldr	r3, [r7, #28]
 80197a2:	9300      	str	r3, [sp, #0]
 80197a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80197a8:	f7ff fdde 	bl	8019368 <ee_number>
 80197ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80197ae:	e000      	b.n	80197b2 <tiny_vsnprintf_like+0x26e>
        continue;
 80197b0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	3301      	adds	r3, #1
 80197b6:	607b      	str	r3, [r7, #4]
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	781b      	ldrb	r3, [r3, #0]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f47f aed0 	bne.w	8019562 <tiny_vsnprintf_like+0x1e>
 80197c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	1ad2      	subs	r2, r2, r3
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	3b01      	subs	r3, #1
 80197cc:	429a      	cmp	r2, r3
 80197ce:	f6bf aec8 	bge.w	8019562 <tiny_vsnprintf_like+0x1e>
 80197d2:	e000      	b.n	80197d6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 80197d4:	bf00      	nop
  }

  *str = '\0';
 80197d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d8:	2200      	movs	r2, #0
 80197da:	701a      	strb	r2, [r3, #0]
  return str - buf;
 80197dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	1ad3      	subs	r3, r2, r3
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	3738      	adds	r7, #56	; 0x38
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}
 80197ea:	bf00      	nop
 80197ec:	0801b4d0 	.word	0x0801b4d0

080197f0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b090      	sub	sp, #64	; 0x40
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80197f8:	4b73      	ldr	r3, [pc, #460]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80197fe:	4b72      	ldr	r3, [pc, #456]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 8019800:	681a      	ldr	r2, [r3, #0]
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	4013      	ands	r3, r2
 8019806:	4a70      	ldr	r2, [pc, #448]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 8019808:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801980a:	4b70      	ldr	r3, [pc, #448]	; (80199cc <UTIL_SEQ_Run+0x1dc>)
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8019810:	4b6f      	ldr	r3, [pc, #444]	; (80199d0 <UTIL_SEQ_Run+0x1e0>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8019816:	4b6f      	ldr	r3, [pc, #444]	; (80199d4 <UTIL_SEQ_Run+0x1e4>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801981c:	4b6e      	ldr	r3, [pc, #440]	; (80199d8 <UTIL_SEQ_Run+0x1e8>)
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019822:	e08d      	b.n	8019940 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019824:	2300      	movs	r3, #0
 8019826:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019828:	e002      	b.n	8019830 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801982a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801982c:	3301      	adds	r3, #1
 801982e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019830:	4a6a      	ldr	r2, [pc, #424]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 8019832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019834:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801983a:	401a      	ands	r2, r3
 801983c:	4b62      	ldr	r3, [pc, #392]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	4013      	ands	r3, r2
 8019842:	2b00      	cmp	r3, #0
 8019844:	d0f1      	beq.n	801982a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019846:	4a65      	ldr	r2, [pc, #404]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 8019848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801984a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019850:	401a      	ands	r2, r3
 8019852:	4b5d      	ldr	r3, [pc, #372]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	4013      	ands	r3, r2
 8019858:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801985a:	4a60      	ldr	r2, [pc, #384]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 801985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801985e:	00db      	lsls	r3, r3, #3
 8019860:	4413      	add	r3, r2
 8019862:	685a      	ldr	r2, [r3, #4]
 8019864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019866:	4013      	ands	r3, r2
 8019868:	2b00      	cmp	r3, #0
 801986a:	d106      	bne.n	801987a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801986c:	4a5b      	ldr	r2, [pc, #364]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 801986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019870:	00db      	lsls	r3, r3, #3
 8019872:	4413      	add	r3, r2
 8019874:	f04f 32ff 	mov.w	r2, #4294967295
 8019878:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801987a:	4a58      	ldr	r2, [pc, #352]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 801987c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801987e:	00db      	lsls	r3, r3, #3
 8019880:	4413      	add	r3, r2
 8019882:	685a      	ldr	r2, [r3, #4]
 8019884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019886:	4013      	ands	r3, r2
 8019888:	4618      	mov	r0, r3
 801988a:	f000 f907 	bl	8019a9c <SEQ_BitPosition>
 801988e:	4603      	mov	r3, r0
 8019890:	461a      	mov	r2, r3
 8019892:	4b53      	ldr	r3, [pc, #332]	; (80199e0 <UTIL_SEQ_Run+0x1f0>)
 8019894:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019896:	4a51      	ldr	r2, [pc, #324]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 8019898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801989a:	00db      	lsls	r3, r3, #3
 801989c:	4413      	add	r3, r2
 801989e:	685a      	ldr	r2, [r3, #4]
 80198a0:	4b4f      	ldr	r3, [pc, #316]	; (80199e0 <UTIL_SEQ_Run+0x1f0>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	2101      	movs	r1, #1
 80198a6:	fa01 f303 	lsl.w	r3, r1, r3
 80198aa:	43db      	mvns	r3, r3
 80198ac:	401a      	ands	r2, r3
 80198ae:	494b      	ldr	r1, [pc, #300]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 80198b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198b2:	00db      	lsls	r3, r3, #3
 80198b4:	440b      	add	r3, r1
 80198b6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80198b8:	f3ef 8310 	mrs	r3, PRIMASK
 80198bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80198be:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80198c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80198c2:	b672      	cpsid	i
}
 80198c4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80198c6:	4b46      	ldr	r3, [pc, #280]	; (80199e0 <UTIL_SEQ_Run+0x1f0>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2201      	movs	r2, #1
 80198cc:	fa02 f303 	lsl.w	r3, r2, r3
 80198d0:	43da      	mvns	r2, r3
 80198d2:	4b3e      	ldr	r3, [pc, #248]	; (80199cc <UTIL_SEQ_Run+0x1dc>)
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	4013      	ands	r3, r2
 80198d8:	4a3c      	ldr	r2, [pc, #240]	; (80199cc <UTIL_SEQ_Run+0x1dc>)
 80198da:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80198dc:	2301      	movs	r3, #1
 80198de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80198e0:	e013      	b.n	801990a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80198e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198e4:	3b01      	subs	r3, #1
 80198e6:	4a3d      	ldr	r2, [pc, #244]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 80198e8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80198ec:	4b3c      	ldr	r3, [pc, #240]	; (80199e0 <UTIL_SEQ_Run+0x1f0>)
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	2201      	movs	r2, #1
 80198f2:	fa02 f303 	lsl.w	r3, r2, r3
 80198f6:	43da      	mvns	r2, r3
 80198f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198fa:	3b01      	subs	r3, #1
 80198fc:	400a      	ands	r2, r1
 80198fe:	4937      	ldr	r1, [pc, #220]	; (80199dc <UTIL_SEQ_Run+0x1ec>)
 8019900:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019906:	3b01      	subs	r3, #1
 8019908:	63fb      	str	r3, [r7, #60]	; 0x3c
 801990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801990c:	2b00      	cmp	r3, #0
 801990e:	d1e8      	bne.n	80198e2 <UTIL_SEQ_Run+0xf2>
 8019910:	6a3b      	ldr	r3, [r7, #32]
 8019912:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	f383 8810 	msr	PRIMASK, r3
}
 801991a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801991c:	4b30      	ldr	r3, [pc, #192]	; (80199e0 <UTIL_SEQ_Run+0x1f0>)
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	4a30      	ldr	r2, [pc, #192]	; (80199e4 <UTIL_SEQ_Run+0x1f4>)
 8019922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019926:	4798      	blx	r3

    local_taskset = TaskSet;
 8019928:	4b28      	ldr	r3, [pc, #160]	; (80199cc <UTIL_SEQ_Run+0x1dc>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801992e:	4b28      	ldr	r3, [pc, #160]	; (80199d0 <UTIL_SEQ_Run+0x1e0>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8019934:	4b27      	ldr	r3, [pc, #156]	; (80199d4 <UTIL_SEQ_Run+0x1e4>)
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801993a:	4b27      	ldr	r3, [pc, #156]	; (80199d8 <UTIL_SEQ_Run+0x1e8>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019944:	401a      	ands	r2, r3
 8019946:	4b20      	ldr	r3, [pc, #128]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	4013      	ands	r3, r2
 801994c:	2b00      	cmp	r3, #0
 801994e:	d005      	beq.n	801995c <UTIL_SEQ_Run+0x16c>
 8019950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019954:	4013      	ands	r3, r2
 8019956:	2b00      	cmp	r3, #0
 8019958:	f43f af64 	beq.w	8019824 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801995c:	4b20      	ldr	r3, [pc, #128]	; (80199e0 <UTIL_SEQ_Run+0x1f0>)
 801995e:	f04f 32ff 	mov.w	r2, #4294967295
 8019962:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019964:	f000 f88e 	bl	8019a84 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019968:	f3ef 8310 	mrs	r3, PRIMASK
 801996c:	613b      	str	r3, [r7, #16]
  return(result);
 801996e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019972:	b672      	cpsid	i
}
 8019974:	bf00      	nop
  local_taskset = TaskSet;
 8019976:	4b15      	ldr	r3, [pc, #84]	; (80199cc <UTIL_SEQ_Run+0x1dc>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801997c:	4b14      	ldr	r3, [pc, #80]	; (80199d0 <UTIL_SEQ_Run+0x1e0>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8019982:	4b14      	ldr	r3, [pc, #80]	; (80199d4 <UTIL_SEQ_Run+0x1e4>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801998c:	401a      	ands	r2, r3
 801998e:	4b0e      	ldr	r3, [pc, #56]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	4013      	ands	r3, r2
 8019994:	2b00      	cmp	r3, #0
 8019996:	d107      	bne.n	80199a8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019998:	4b0f      	ldr	r3, [pc, #60]	; (80199d8 <UTIL_SEQ_Run+0x1e8>)
 801999a:	681a      	ldr	r2, [r3, #0]
 801999c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801999e:	4013      	ands	r3, r2
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d101      	bne.n	80199a8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80199a4:	f7e7 ffde 	bl	8001964 <UTIL_SEQ_Idle>
 80199a8:	69fb      	ldr	r3, [r7, #28]
 80199aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	f383 8810 	msr	PRIMASK, r3
}
 80199b2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80199b4:	f000 f86c 	bl	8019a90 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80199b8:	4a03      	ldr	r2, [pc, #12]	; (80199c8 <UTIL_SEQ_Run+0x1d8>)
 80199ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199bc:	6013      	str	r3, [r2, #0]

  return;
 80199be:	bf00      	nop
}
 80199c0:	3740      	adds	r7, #64	; 0x40
 80199c2:	46bd      	mov	sp, r7
 80199c4:	bd80      	pop	{r7, pc}
 80199c6:	bf00      	nop
 80199c8:	20000148 	.word	0x20000148
 80199cc:	20001c8c 	.word	0x20001c8c
 80199d0:	20001c90 	.word	0x20001c90
 80199d4:	20000144 	.word	0x20000144
 80199d8:	20001c94 	.word	0x20001c94
 80199dc:	20001cac 	.word	0x20001cac
 80199e0:	20001c98 	.word	0x20001c98
 80199e4:	20001c9c 	.word	0x20001c9c

080199e8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b088      	sub	sp, #32
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	60f8      	str	r0, [r7, #12]
 80199f0:	60b9      	str	r1, [r7, #8]
 80199f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199f4:	f3ef 8310 	mrs	r3, PRIMASK
 80199f8:	617b      	str	r3, [r7, #20]
  return(result);
 80199fa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80199fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80199fe:	b672      	cpsid	i
}
 8019a00:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019a02:	68f8      	ldr	r0, [r7, #12]
 8019a04:	f000 f84a 	bl	8019a9c <SEQ_BitPosition>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	4619      	mov	r1, r3
 8019a0c:	4a06      	ldr	r2, [pc, #24]	; (8019a28 <UTIL_SEQ_RegTask+0x40>)
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a18:	69bb      	ldr	r3, [r7, #24]
 8019a1a:	f383 8810 	msr	PRIMASK, r3
}
 8019a1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019a20:	bf00      	nop
}
 8019a22:	3720      	adds	r7, #32
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bd80      	pop	{r7, pc}
 8019a28:	20001c9c 	.word	0x20001c9c

08019a2c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019a2c:	b480      	push	{r7}
 8019a2e:	b087      	sub	sp, #28
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
 8019a34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a36:	f3ef 8310 	mrs	r3, PRIMASK
 8019a3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a3c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019a3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a40:	b672      	cpsid	i
}
 8019a42:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019a44:	4b0d      	ldr	r3, [pc, #52]	; (8019a7c <UTIL_SEQ_SetTask+0x50>)
 8019a46:	681a      	ldr	r2, [r3, #0]
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	4a0b      	ldr	r2, [pc, #44]	; (8019a7c <UTIL_SEQ_SetTask+0x50>)
 8019a4e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019a50:	4a0b      	ldr	r2, [pc, #44]	; (8019a80 <UTIL_SEQ_SetTask+0x54>)
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	431a      	orrs	r2, r3
 8019a5c:	4908      	ldr	r1, [pc, #32]	; (8019a80 <UTIL_SEQ_SetTask+0x54>)
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019a64:	697b      	ldr	r3, [r7, #20]
 8019a66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	f383 8810 	msr	PRIMASK, r3
}
 8019a6e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019a70:	bf00      	nop
}
 8019a72:	371c      	adds	r7, #28
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bc80      	pop	{r7}
 8019a78:	4770      	bx	lr
 8019a7a:	bf00      	nop
 8019a7c:	20001c8c 	.word	0x20001c8c
 8019a80:	20001cac 	.word	0x20001cac

08019a84 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019a84:	b480      	push	{r7}
 8019a86:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019a88:	bf00      	nop
}
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bc80      	pop	{r7}
 8019a8e:	4770      	bx	lr

08019a90 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019a90:	b480      	push	{r7}
 8019a92:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019a94:	bf00      	nop
}
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bc80      	pop	{r7}
 8019a9a:	4770      	bx	lr

08019a9c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019a9c:	b480      	push	{r7}
 8019a9e:	b085      	sub	sp, #20
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	0c1b      	lsrs	r3, r3, #16
 8019ab0:	041b      	lsls	r3, r3, #16
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d104      	bne.n	8019ac0 <SEQ_BitPosition+0x24>
 8019ab6:	2310      	movs	r3, #16
 8019ab8:	73fb      	strb	r3, [r7, #15]
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	041b      	lsls	r3, r3, #16
 8019abe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8019ac0:	68bb      	ldr	r3, [r7, #8]
 8019ac2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d105      	bne.n	8019ad6 <SEQ_BitPosition+0x3a>
 8019aca:	7bfb      	ldrb	r3, [r7, #15]
 8019acc:	3308      	adds	r3, #8
 8019ace:	73fb      	strb	r3, [r7, #15]
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	021b      	lsls	r3, r3, #8
 8019ad4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d105      	bne.n	8019aec <SEQ_BitPosition+0x50>
 8019ae0:	7bfb      	ldrb	r3, [r7, #15]
 8019ae2:	3304      	adds	r3, #4
 8019ae4:	73fb      	strb	r3, [r7, #15]
 8019ae6:	68bb      	ldr	r3, [r7, #8]
 8019ae8:	011b      	lsls	r3, r3, #4
 8019aea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	0f1b      	lsrs	r3, r3, #28
 8019af0:	4a06      	ldr	r2, [pc, #24]	; (8019b0c <SEQ_BitPosition+0x70>)
 8019af2:	5cd2      	ldrb	r2, [r2, r3]
 8019af4:	7bfb      	ldrb	r3, [r7, #15]
 8019af6:	4413      	add	r3, r2
 8019af8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019afa:	7bfb      	ldrb	r3, [r7, #15]
 8019afc:	f1c3 031f 	rsb	r3, r3, #31
 8019b00:	b2db      	uxtb	r3, r3
}
 8019b02:	4618      	mov	r0, r3
 8019b04:	3714      	adds	r7, #20
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bc80      	pop	{r7}
 8019b0a:	4770      	bx	lr
 8019b0c:	0801ba88 	.word	0x0801ba88

08019b10 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8019b14:	4b04      	ldr	r3, [pc, #16]	; (8019b28 <UTIL_TIMER_Init+0x18>)
 8019b16:	2200      	movs	r2, #0
 8019b18:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8019b1a:	4b04      	ldr	r3, [pc, #16]	; (8019b2c <UTIL_TIMER_Init+0x1c>)
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	4798      	blx	r3
 8019b20:	4603      	mov	r3, r0
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	bd80      	pop	{r7, pc}
 8019b26:	bf00      	nop
 8019b28:	20001cb4 	.word	0x20001cb4
 8019b2c:	0801b590 	.word	0x0801b590

08019b30 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	60f8      	str	r0, [r7, #12]
 8019b38:	60b9      	str	r1, [r7, #8]
 8019b3a:	603b      	str	r3, [r7, #0]
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d023      	beq.n	8019b8e <UTIL_TIMER_Create+0x5e>
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d020      	beq.n	8019b8e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8019b52:	4b11      	ldr	r3, [pc, #68]	; (8019b98 <UTIL_TIMER_Create+0x68>)
 8019b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b56:	68b8      	ldr	r0, [r7, #8]
 8019b58:	4798      	blx	r3
 8019b5a:	4602      	mov	r2, r0
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	2200      	movs	r2, #0
 8019b64:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	2200      	movs	r2, #0
 8019b6a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	2200      	movs	r2, #0
 8019b70:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	683a      	ldr	r2, [r7, #0]
 8019b76:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	69ba      	ldr	r2, [r7, #24]
 8019b7c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	79fa      	ldrb	r2, [r7, #7]
 8019b82:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	2200      	movs	r2, #0
 8019b88:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	e000      	b.n	8019b90 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8019b8e:	2301      	movs	r3, #1
  }
}
 8019b90:	4618      	mov	r0, r3
 8019b92:	3710      	adds	r7, #16
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}
 8019b98:	0801b590 	.word	0x0801b590

08019b9c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b08a      	sub	sp, #40	; 0x28
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d056      	beq.n	8019c5e <UTIL_TIMER_Start+0xc2>
 8019bb0:	6878      	ldr	r0, [r7, #4]
 8019bb2:	f000 f9a9 	bl	8019f08 <TimerExists>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	f083 0301 	eor.w	r3, r3, #1
 8019bbc:	b2db      	uxtb	r3, r3
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d04d      	beq.n	8019c5e <UTIL_TIMER_Start+0xc2>
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	7a5b      	ldrb	r3, [r3, #9]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d149      	bne.n	8019c5e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019bca:	f3ef 8310 	mrs	r3, PRIMASK
 8019bce:	613b      	str	r3, [r7, #16]
  return(result);
 8019bd0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019bd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019bd4:	b672      	cpsid	i
}
 8019bd6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8019bde:	4b24      	ldr	r3, [pc, #144]	; (8019c70 <UTIL_TIMER_Start+0xd4>)
 8019be0:	6a1b      	ldr	r3, [r3, #32]
 8019be2:	4798      	blx	r3
 8019be4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8019be6:	6a3a      	ldr	r2, [r7, #32]
 8019be8:	69bb      	ldr	r3, [r7, #24]
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d201      	bcs.n	8019bf2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8019bee:	69bb      	ldr	r3, [r7, #24]
 8019bf0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	6a3a      	ldr	r2, [r7, #32]
 8019bf6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	2201      	movs	r2, #1
 8019c02:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	2200      	movs	r2, #0
 8019c08:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8019c0a:	4b1a      	ldr	r3, [pc, #104]	; (8019c74 <UTIL_TIMER_Start+0xd8>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d106      	bne.n	8019c20 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8019c12:	4b17      	ldr	r3, [pc, #92]	; (8019c70 <UTIL_TIMER_Start+0xd4>)
 8019c14:	691b      	ldr	r3, [r3, #16]
 8019c16:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8019c18:	6878      	ldr	r0, [r7, #4]
 8019c1a:	f000 f9eb 	bl	8019ff4 <TimerInsertNewHeadTimer>
 8019c1e:	e017      	b.n	8019c50 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8019c20:	4b13      	ldr	r3, [pc, #76]	; (8019c70 <UTIL_TIMER_Start+0xd4>)
 8019c22:	699b      	ldr	r3, [r3, #24]
 8019c24:	4798      	blx	r3
 8019c26:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681a      	ldr	r2, [r3, #0]
 8019c2c:	697b      	ldr	r3, [r7, #20]
 8019c2e:	441a      	add	r2, r3
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681a      	ldr	r2, [r3, #0]
 8019c38:	4b0e      	ldr	r3, [pc, #56]	; (8019c74 <UTIL_TIMER_Start+0xd8>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	429a      	cmp	r2, r3
 8019c40:	d203      	bcs.n	8019c4a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8019c42:	6878      	ldr	r0, [r7, #4]
 8019c44:	f000 f9d6 	bl	8019ff4 <TimerInsertNewHeadTimer>
 8019c48:	e002      	b.n	8019c50 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8019c4a:	6878      	ldr	r0, [r7, #4]
 8019c4c:	f000 f9a2 	bl	8019f94 <TimerInsertTimer>
 8019c50:	69fb      	ldr	r3, [r7, #28]
 8019c52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	f383 8810 	msr	PRIMASK, r3
}
 8019c5a:	bf00      	nop
  {
 8019c5c:	e002      	b.n	8019c64 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8019c5e:	2301      	movs	r3, #1
 8019c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8019c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019c68:	4618      	mov	r0, r3
 8019c6a:	3728      	adds	r7, #40	; 0x28
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	0801b590 	.word	0x0801b590
 8019c74:	20001cb4 	.word	0x20001cb4

08019c78 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b088      	sub	sp, #32
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019c80:	2300      	movs	r3, #0
 8019c82:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d05b      	beq.n	8019d42 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8019c8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019c90:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c94:	b672      	cpsid	i
}
 8019c96:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8019c98:	4b2d      	ldr	r3, [pc, #180]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8019c9e:	4b2c      	ldr	r3, [pc, #176]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2201      	movs	r2, #1
 8019ca8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8019caa:	4b29      	ldr	r3, [pc, #164]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d041      	beq.n	8019d36 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8019cb8:	4b25      	ldr	r3, [pc, #148]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	687a      	ldr	r2, [r7, #4]
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d134      	bne.n	8019d2c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8019cc2:	4b23      	ldr	r3, [pc, #140]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8019cca:	4b21      	ldr	r3, [pc, #132]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	695b      	ldr	r3, [r3, #20]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d00a      	beq.n	8019cea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8019cd4:	4b1e      	ldr	r3, [pc, #120]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	695b      	ldr	r3, [r3, #20]
 8019cda:	4a1d      	ldr	r2, [pc, #116]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019cdc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8019cde:	4b1c      	ldr	r3, [pc, #112]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	f000 f92c 	bl	8019f40 <TimerSetTimeout>
 8019ce8:	e023      	b.n	8019d32 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8019cea:	4b1a      	ldr	r3, [pc, #104]	; (8019d54 <UTIL_TIMER_Stop+0xdc>)
 8019cec:	68db      	ldr	r3, [r3, #12]
 8019cee:	4798      	blx	r3
            TimerListHead = NULL;
 8019cf0:	4b17      	ldr	r3, [pc, #92]	; (8019d50 <UTIL_TIMER_Stop+0xd8>)
 8019cf2:	2200      	movs	r2, #0
 8019cf4:	601a      	str	r2, [r3, #0]
 8019cf6:	e01c      	b.n	8019d32 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8019cf8:	697a      	ldr	r2, [r7, #20]
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	d110      	bne.n	8019d22 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8019d00:	697b      	ldr	r3, [r7, #20]
 8019d02:	695b      	ldr	r3, [r3, #20]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d006      	beq.n	8019d16 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8019d08:	697b      	ldr	r3, [r7, #20]
 8019d0a:	695b      	ldr	r3, [r3, #20]
 8019d0c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019d0e:	69bb      	ldr	r3, [r7, #24]
 8019d10:	697a      	ldr	r2, [r7, #20]
 8019d12:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8019d14:	e00d      	b.n	8019d32 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8019d16:	2300      	movs	r3, #0
 8019d18:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019d1a:	69bb      	ldr	r3, [r7, #24]
 8019d1c:	697a      	ldr	r2, [r7, #20]
 8019d1e:	615a      	str	r2, [r3, #20]
            break;
 8019d20:	e007      	b.n	8019d32 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	695b      	ldr	r3, [r3, #20]
 8019d2a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8019d2c:	697b      	ldr	r3, [r7, #20]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d1e2      	bne.n	8019cf8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8019d32:	2300      	movs	r3, #0
 8019d34:	77fb      	strb	r3, [r7, #31]
 8019d36:	693b      	ldr	r3, [r7, #16]
 8019d38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d3a:	68bb      	ldr	r3, [r7, #8]
 8019d3c:	f383 8810 	msr	PRIMASK, r3
}
 8019d40:	e001      	b.n	8019d46 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8019d42:	2301      	movs	r3, #1
 8019d44:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8019d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	3720      	adds	r7, #32
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}
 8019d50:	20001cb4 	.word	0x20001cb4
 8019d54:	0801b590 	.word	0x0801b590

08019d58 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b084      	sub	sp, #16
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
 8019d60:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019d62:	2300      	movs	r3, #0
 8019d64:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d102      	bne.n	8019d72 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8019d6c:	2301      	movs	r3, #1
 8019d6e:	73fb      	strb	r3, [r7, #15]
 8019d70:	e014      	b.n	8019d9c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8019d72:	4b0d      	ldr	r3, [pc, #52]	; (8019da8 <UTIL_TIMER_SetPeriod+0x50>)
 8019d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d76:	6838      	ldr	r0, [r7, #0]
 8019d78:	4798      	blx	r3
 8019d7a:	4602      	mov	r2, r0
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8019d80:	6878      	ldr	r0, [r7, #4]
 8019d82:	f000 f8c1 	bl	8019f08 <TimerExists>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d007      	beq.n	8019d9c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8019d8c:	6878      	ldr	r0, [r7, #4]
 8019d8e:	f7ff ff73 	bl	8019c78 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8019d92:	6878      	ldr	r0, [r7, #4]
 8019d94:	f7ff ff02 	bl	8019b9c <UTIL_TIMER_Start>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8019d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d9e:	4618      	mov	r0, r3
 8019da0:	3710      	adds	r7, #16
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	0801b590 	.word	0x0801b590

08019dac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 8019dac:	b590      	push	{r4, r7, lr}
 8019dae:	b089      	sub	sp, #36	; 0x24
 8019db0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019db2:	f3ef 8310 	mrs	r3, PRIMASK
 8019db6:	60bb      	str	r3, [r7, #8]
  return(result);
 8019db8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019dba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dbc:	b672      	cpsid	i
}
 8019dbe:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8019dc0:	4b38      	ldr	r3, [pc, #224]	; (8019ea4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019dc2:	695b      	ldr	r3, [r3, #20]
 8019dc4:	4798      	blx	r3
 8019dc6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8019dc8:	4b36      	ldr	r3, [pc, #216]	; (8019ea4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019dca:	691b      	ldr	r3, [r3, #16]
 8019dcc:	4798      	blx	r3
 8019dce:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8019dd0:	693a      	ldr	r2, [r7, #16]
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	1ad3      	subs	r3, r2, r3
 8019dd6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8019dd8:	4b33      	ldr	r3, [pc, #204]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d037      	beq.n	8019e50 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 8019de0:	4b31      	ldr	r3, [pc, #196]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 8019de6:	69fb      	ldr	r3, [r7, #28]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	68fa      	ldr	r2, [r7, #12]
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d206      	bcs.n	8019dfe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 8019df0:	69fb      	ldr	r3, [r7, #28]
 8019df2:	681a      	ldr	r2, [r3, #0]
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	1ad2      	subs	r2, r2, r3
 8019df8:	69fb      	ldr	r3, [r7, #28]
 8019dfa:	601a      	str	r2, [r3, #0]
 8019dfc:	e002      	b.n	8019e04 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 8019dfe:	69fb      	ldr	r3, [r7, #28]
 8019e00:	2200      	movs	r2, #0
 8019e02:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 8019e04:	69fb      	ldr	r3, [r7, #28]
 8019e06:	695b      	ldr	r3, [r3, #20]
 8019e08:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 8019e0a:	69fb      	ldr	r3, [r7, #28]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d1ea      	bne.n	8019de6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8019e10:	e01e      	b.n	8019e50 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 8019e12:	4b25      	ldr	r3, [pc, #148]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 8019e18:	4b23      	ldr	r3, [pc, #140]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	695b      	ldr	r3, [r3, #20]
 8019e1e:	4a22      	ldr	r2, [pc, #136]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e20:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 8019e22:	69fb      	ldr	r3, [r7, #28]
 8019e24:	2200      	movs	r2, #0
 8019e26:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8019e2e:	69fb      	ldr	r3, [r7, #28]
 8019e30:	68db      	ldr	r3, [r3, #12]
 8019e32:	69fa      	ldr	r2, [r7, #28]
 8019e34:	6912      	ldr	r2, [r2, #16]
 8019e36:	4610      	mov	r0, r2
 8019e38:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8019e3a:	69fb      	ldr	r3, [r7, #28]
 8019e3c:	7adb      	ldrb	r3, [r3, #11]
 8019e3e:	2b01      	cmp	r3, #1
 8019e40:	d106      	bne.n	8019e50 <UTIL_TIMER_IRQ_Handler+0xa4>
 8019e42:	69fb      	ldr	r3, [r7, #28]
 8019e44:	7a9b      	ldrb	r3, [r3, #10]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d102      	bne.n	8019e50 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8019e4a:	69f8      	ldr	r0, [r7, #28]
 8019e4c:	f7ff fea6 	bl	8019b9c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8019e50:	4b15      	ldr	r3, [pc, #84]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d00d      	beq.n	8019e74 <UTIL_TIMER_IRQ_Handler+0xc8>
 8019e58:	4b13      	ldr	r3, [pc, #76]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d0d7      	beq.n	8019e12 <UTIL_TIMER_IRQ_Handler+0x66>
 8019e62:	4b11      	ldr	r3, [pc, #68]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	681c      	ldr	r4, [r3, #0]
 8019e68:	4b0e      	ldr	r3, [pc, #56]	; (8019ea4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019e6a:	699b      	ldr	r3, [r3, #24]
 8019e6c:	4798      	blx	r3
 8019e6e:	4603      	mov	r3, r0
 8019e70:	429c      	cmp	r4, r3
 8019e72:	d3ce      	bcc.n	8019e12 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8019e74:	4b0c      	ldr	r3, [pc, #48]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d009      	beq.n	8019e90 <UTIL_TIMER_IRQ_Handler+0xe4>
 8019e7c:	4b0a      	ldr	r3, [pc, #40]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	7a1b      	ldrb	r3, [r3, #8]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d104      	bne.n	8019e90 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8019e86:	4b08      	ldr	r3, [pc, #32]	; (8019ea8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	f000 f858 	bl	8019f40 <TimerSetTimeout>
 8019e90:	69bb      	ldr	r3, [r7, #24]
 8019e92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	f383 8810 	msr	PRIMASK, r3
}
 8019e9a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8019e9c:	bf00      	nop
 8019e9e:	3724      	adds	r7, #36	; 0x24
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd90      	pop	{r4, r7, pc}
 8019ea4:	0801b590 	.word	0x0801b590
 8019ea8:	20001cb4 	.word	0x20001cb4

08019eac <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b082      	sub	sp, #8
 8019eb0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8019eb2:	4b06      	ldr	r3, [pc, #24]	; (8019ecc <UTIL_TIMER_GetCurrentTime+0x20>)
 8019eb4:	69db      	ldr	r3, [r3, #28]
 8019eb6:	4798      	blx	r3
 8019eb8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8019eba:	4b04      	ldr	r3, [pc, #16]	; (8019ecc <UTIL_TIMER_GetCurrentTime+0x20>)
 8019ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ebe:	6878      	ldr	r0, [r7, #4]
 8019ec0:	4798      	blx	r3
 8019ec2:	4603      	mov	r3, r0
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3708      	adds	r7, #8
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	0801b590 	.word	0x0801b590

08019ed0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b084      	sub	sp, #16
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8019ed8:	4b0a      	ldr	r3, [pc, #40]	; (8019f04 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019eda:	69db      	ldr	r3, [r3, #28]
 8019edc:	4798      	blx	r3
 8019ede:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8019ee0:	4b08      	ldr	r3, [pc, #32]	; (8019f04 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ee4:	6878      	ldr	r0, [r7, #4]
 8019ee6:	4798      	blx	r3
 8019ee8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8019eea:	4b06      	ldr	r3, [pc, #24]	; (8019f04 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eee:	68f9      	ldr	r1, [r7, #12]
 8019ef0:	68ba      	ldr	r2, [r7, #8]
 8019ef2:	1a8a      	subs	r2, r1, r2
 8019ef4:	4610      	mov	r0, r2
 8019ef6:	4798      	blx	r3
 8019ef8:	4603      	mov	r3, r0
}
 8019efa:	4618      	mov	r0, r3
 8019efc:	3710      	adds	r7, #16
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}
 8019f02:	bf00      	nop
 8019f04:	0801b590 	.word	0x0801b590

08019f08 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8019f08:	b480      	push	{r7}
 8019f0a:	b085      	sub	sp, #20
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019f10:	4b0a      	ldr	r3, [pc, #40]	; (8019f3c <TimerExists+0x34>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8019f16:	e008      	b.n	8019f2a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8019f18:	68fa      	ldr	r2, [r7, #12]
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	d101      	bne.n	8019f24 <TimerExists+0x1c>
    {
      return true;
 8019f20:	2301      	movs	r3, #1
 8019f22:	e006      	b.n	8019f32 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	695b      	ldr	r3, [r3, #20]
 8019f28:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d1f3      	bne.n	8019f18 <TimerExists+0x10>
  }
  return false;
 8019f30:	2300      	movs	r3, #0
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	3714      	adds	r7, #20
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bc80      	pop	{r7}
 8019f3a:	4770      	bx	lr
 8019f3c:	20001cb4 	.word	0x20001cb4

08019f40 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8019f40:	b590      	push	{r4, r7, lr}
 8019f42:	b085      	sub	sp, #20
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8019f48:	4b11      	ldr	r3, [pc, #68]	; (8019f90 <TimerSetTimeout+0x50>)
 8019f4a:	6a1b      	ldr	r3, [r3, #32]
 8019f4c:	4798      	blx	r3
 8019f4e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2201      	movs	r2, #1
 8019f54:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681c      	ldr	r4, [r3, #0]
 8019f5a:	4b0d      	ldr	r3, [pc, #52]	; (8019f90 <TimerSetTimeout+0x50>)
 8019f5c:	699b      	ldr	r3, [r3, #24]
 8019f5e:	4798      	blx	r3
 8019f60:	4602      	mov	r2, r0
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	4413      	add	r3, r2
 8019f66:	429c      	cmp	r4, r3
 8019f68:	d207      	bcs.n	8019f7a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8019f6a:	4b09      	ldr	r3, [pc, #36]	; (8019f90 <TimerSetTimeout+0x50>)
 8019f6c:	699b      	ldr	r3, [r3, #24]
 8019f6e:	4798      	blx	r3
 8019f70:	4602      	mov	r2, r0
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	441a      	add	r2, r3
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8019f7a:	4b05      	ldr	r3, [pc, #20]	; (8019f90 <TimerSetTimeout+0x50>)
 8019f7c:	689b      	ldr	r3, [r3, #8]
 8019f7e:	687a      	ldr	r2, [r7, #4]
 8019f80:	6812      	ldr	r2, [r2, #0]
 8019f82:	4610      	mov	r0, r2
 8019f84:	4798      	blx	r3
}
 8019f86:	bf00      	nop
 8019f88:	3714      	adds	r7, #20
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd90      	pop	{r4, r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	0801b590 	.word	0x0801b590

08019f94 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8019f94:	b480      	push	{r7}
 8019f96:	b085      	sub	sp, #20
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019f9c:	4b14      	ldr	r3, [pc, #80]	; (8019ff0 <TimerInsertTimer+0x5c>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8019fa2:	4b13      	ldr	r3, [pc, #76]	; (8019ff0 <TimerInsertTimer+0x5c>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	695b      	ldr	r3, [r3, #20]
 8019fa8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8019faa:	e012      	b.n	8019fd2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	681a      	ldr	r2, [r3, #0]
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d905      	bls.n	8019fc4 <TimerInsertTimer+0x30>
    {
        cur = next;
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	695b      	ldr	r3, [r3, #20]
 8019fc0:	60bb      	str	r3, [r7, #8]
 8019fc2:	e006      	b.n	8019fd2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	68ba      	ldr	r2, [r7, #8]
 8019fce:	615a      	str	r2, [r3, #20]
        return;
 8019fd0:	e009      	b.n	8019fe6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	695b      	ldr	r3, [r3, #20]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d1e8      	bne.n	8019fac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	687a      	ldr	r2, [r7, #4]
 8019fde:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	615a      	str	r2, [r3, #20]
}
 8019fe6:	3714      	adds	r7, #20
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bc80      	pop	{r7}
 8019fec:	4770      	bx	lr
 8019fee:	bf00      	nop
 8019ff0:	20001cb4 	.word	0x20001cb4

08019ff4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b084      	sub	sp, #16
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019ffc:	4b0b      	ldr	r3, [pc, #44]	; (801a02c <TimerInsertNewHeadTimer+0x38>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d002      	beq.n	801a00e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	2200      	movs	r2, #0
 801a00c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	68fa      	ldr	r2, [r7, #12]
 801a012:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a014:	4a05      	ldr	r2, [pc, #20]	; (801a02c <TimerInsertNewHeadTimer+0x38>)
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a01a:	4b04      	ldr	r3, [pc, #16]	; (801a02c <TimerInsertNewHeadTimer+0x38>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	4618      	mov	r0, r3
 801a020:	f7ff ff8e 	bl	8019f40 <TimerSetTimeout>
}
 801a024:	bf00      	nop
 801a026:	3710      	adds	r7, #16
 801a028:	46bd      	mov	sp, r7
 801a02a:	bd80      	pop	{r7, pc}
 801a02c:	20001cb4 	.word	0x20001cb4

0801a030 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a034:	2218      	movs	r2, #24
 801a036:	2100      	movs	r1, #0
 801a038:	4807      	ldr	r0, [pc, #28]	; (801a058 <UTIL_ADV_TRACE_Init+0x28>)
 801a03a:	f7fe fff6 	bl	801902a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a03e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a042:	2100      	movs	r1, #0
 801a044:	4805      	ldr	r0, [pc, #20]	; (801a05c <UTIL_ADV_TRACE_Init+0x2c>)
 801a046:	f7fe fff0 	bl	801902a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a04a:	4b05      	ldr	r3, [pc, #20]	; (801a060 <UTIL_ADV_TRACE_Init+0x30>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	4805      	ldr	r0, [pc, #20]	; (801a064 <UTIL_ADV_TRACE_Init+0x34>)
 801a050:	4798      	blx	r3
 801a052:	4603      	mov	r3, r0
}
 801a054:	4618      	mov	r0, r3
 801a056:	bd80      	pop	{r7, pc}
 801a058:	20001cb8 	.word	0x20001cb8
 801a05c:	20001cd0 	.word	0x20001cd0
 801a060:	0801b5d0 	.word	0x0801b5d0
 801a064:	0801a2d1 	.word	0x0801a2d1

0801a068 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a068:	b480      	push	{r7}
 801a06a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a06c:	4b06      	ldr	r3, [pc, #24]	; (801a088 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a06e:	8a5a      	ldrh	r2, [r3, #18]
 801a070:	4b05      	ldr	r3, [pc, #20]	; (801a088 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a072:	8a1b      	ldrh	r3, [r3, #16]
 801a074:	429a      	cmp	r2, r3
 801a076:	d101      	bne.n	801a07c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a078:	2301      	movs	r3, #1
 801a07a:	e000      	b.n	801a07e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a07c:	2300      	movs	r3, #0
}
 801a07e:	4618      	mov	r0, r3
 801a080:	46bd      	mov	sp, r7
 801a082:	bc80      	pop	{r7}
 801a084:	4770      	bx	lr
 801a086:	bf00      	nop
 801a088:	20001cb8 	.word	0x20001cb8

0801a08c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a08c:	b408      	push	{r3}
 801a08e:	b580      	push	{r7, lr}
 801a090:	b08d      	sub	sp, #52	; 0x34
 801a092:	af00      	add	r7, sp, #0
 801a094:	60f8      	str	r0, [r7, #12]
 801a096:	60b9      	str	r1, [r7, #8]
 801a098:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a09a:	2300      	movs	r3, #0
 801a09c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a09e:	2300      	movs	r3, #0
 801a0a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a0a2:	4b37      	ldr	r3, [pc, #220]	; (801a180 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a0a4:	7a1b      	ldrb	r3, [r3, #8]
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	4293      	cmp	r3, r2
 801a0ac:	d902      	bls.n	801a0b4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a0ae:	f06f 0304 	mvn.w	r3, #4
 801a0b2:	e05e      	b.n	801a172 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a0b4:	4b32      	ldr	r3, [pc, #200]	; (801a180 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a0b6:	68da      	ldr	r2, [r3, #12]
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	4013      	ands	r3, r2
 801a0bc:	68ba      	ldr	r2, [r7, #8]
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	d002      	beq.n	801a0c8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a0c2:	f06f 0305 	mvn.w	r3, #5
 801a0c6:	e054      	b.n	801a172 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a0c8:	4b2d      	ldr	r3, [pc, #180]	; (801a180 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a0ca:	685b      	ldr	r3, [r3, #4]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d00a      	beq.n	801a0e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d007      	beq.n	801a0e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a0d6:	4b2a      	ldr	r3, [pc, #168]	; (801a180 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a0d8:	685b      	ldr	r3, [r3, #4]
 801a0da:	f107 0116 	add.w	r1, r7, #22
 801a0de:	f107 0218 	add.w	r2, r7, #24
 801a0e2:	4610      	mov	r0, r2
 801a0e4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a0e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a0f4:	4823      	ldr	r0, [pc, #140]	; (801a184 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a0f6:	f7ff fa25 	bl	8019544 <tiny_vsnprintf_like>
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a0fe:	f000 f9f1 	bl	801a4e4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a102:	8afa      	ldrh	r2, [r7, #22]
 801a104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a106:	4413      	add	r3, r2
 801a108:	b29b      	uxth	r3, r3
 801a10a:	f107 0214 	add.w	r2, r7, #20
 801a10e:	4611      	mov	r1, r2
 801a110:	4618      	mov	r0, r3
 801a112:	f000 f969 	bl	801a3e8 <TRACE_AllocateBufer>
 801a116:	4603      	mov	r3, r0
 801a118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a11c:	d025      	beq.n	801a16a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a11e:	2300      	movs	r3, #0
 801a120:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a122:	e00e      	b.n	801a142 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a126:	8aba      	ldrh	r2, [r7, #20]
 801a128:	3330      	adds	r3, #48	; 0x30
 801a12a:	443b      	add	r3, r7
 801a12c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a130:	4b15      	ldr	r3, [pc, #84]	; (801a188 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a132:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a134:	8abb      	ldrh	r3, [r7, #20]
 801a136:	3301      	adds	r3, #1
 801a138:	b29b      	uxth	r3, r3
 801a13a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a13c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a13e:	3301      	adds	r3, #1
 801a140:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a142:	8afb      	ldrh	r3, [r7, #22]
 801a144:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a146:	429a      	cmp	r2, r3
 801a148:	d3ec      	bcc.n	801a124 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a14a:	8abb      	ldrh	r3, [r7, #20]
 801a14c:	461a      	mov	r2, r3
 801a14e:	4b0e      	ldr	r3, [pc, #56]	; (801a188 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a150:	18d0      	adds	r0, r2, r3
 801a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a156:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a15a:	f7ff f9f3 	bl	8019544 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a15e:	f000 f9df 	bl	801a520 <TRACE_UnLock>

    return TRACE_Send();
 801a162:	f000 f831 	bl	801a1c8 <TRACE_Send>
 801a166:	4603      	mov	r3, r0
 801a168:	e003      	b.n	801a172 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a16a:	f000 f9d9 	bl	801a520 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a16e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a172:	4618      	mov	r0, r3
 801a174:	3734      	adds	r7, #52	; 0x34
 801a176:	46bd      	mov	sp, r7
 801a178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a17c:	b001      	add	sp, #4
 801a17e:	4770      	bx	lr
 801a180:	20001cb8 	.word	0x20001cb8
 801a184:	200020d0 	.word	0x200020d0
 801a188:	20001cd0 	.word	0x20001cd0

0801a18c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a18c:	b480      	push	{r7}
 801a18e:	b083      	sub	sp, #12
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a194:	4a03      	ldr	r2, [pc, #12]	; (801a1a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6053      	str	r3, [r2, #4]
}
 801a19a:	bf00      	nop
 801a19c:	370c      	adds	r7, #12
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bc80      	pop	{r7}
 801a1a2:	4770      	bx	lr
 801a1a4:	20001cb8 	.word	0x20001cb8

0801a1a8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a1a8:	b480      	push	{r7}
 801a1aa:	b083      	sub	sp, #12
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a1b2:	4a04      	ldr	r2, [pc, #16]	; (801a1c4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a1b4:	79fb      	ldrb	r3, [r7, #7]
 801a1b6:	7213      	strb	r3, [r2, #8]
}
 801a1b8:	bf00      	nop
 801a1ba:	370c      	adds	r7, #12
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bc80      	pop	{r7}
 801a1c0:	4770      	bx	lr
 801a1c2:	bf00      	nop
 801a1c4:	20001cb8 	.word	0x20001cb8

0801a1c8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b088      	sub	sp, #32
 801a1cc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1d6:	f3ef 8310 	mrs	r3, PRIMASK
 801a1da:	613b      	str	r3, [r7, #16]
  return(result);
 801a1dc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a1de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1e0:	b672      	cpsid	i
}
 801a1e2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a1e4:	f000 f9ba 	bl	801a55c <TRACE_IsLocked>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d15d      	bne.n	801a2aa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a1ee:	f000 f979 	bl	801a4e4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a1f2:	4b34      	ldr	r3, [pc, #208]	; (801a2c4 <TRACE_Send+0xfc>)
 801a1f4:	8a1a      	ldrh	r2, [r3, #16]
 801a1f6:	4b33      	ldr	r3, [pc, #204]	; (801a2c4 <TRACE_Send+0xfc>)
 801a1f8:	8a5b      	ldrh	r3, [r3, #18]
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	d04d      	beq.n	801a29a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a1fe:	4b31      	ldr	r3, [pc, #196]	; (801a2c4 <TRACE_Send+0xfc>)
 801a200:	789b      	ldrb	r3, [r3, #2]
 801a202:	2b01      	cmp	r3, #1
 801a204:	d117      	bne.n	801a236 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a206:	4b2f      	ldr	r3, [pc, #188]	; (801a2c4 <TRACE_Send+0xfc>)
 801a208:	881a      	ldrh	r2, [r3, #0]
 801a20a:	4b2e      	ldr	r3, [pc, #184]	; (801a2c4 <TRACE_Send+0xfc>)
 801a20c:	8a1b      	ldrh	r3, [r3, #16]
 801a20e:	1ad3      	subs	r3, r2, r3
 801a210:	b29a      	uxth	r2, r3
 801a212:	4b2c      	ldr	r3, [pc, #176]	; (801a2c4 <TRACE_Send+0xfc>)
 801a214:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a216:	4b2b      	ldr	r3, [pc, #172]	; (801a2c4 <TRACE_Send+0xfc>)
 801a218:	2202      	movs	r2, #2
 801a21a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a21c:	4b29      	ldr	r3, [pc, #164]	; (801a2c4 <TRACE_Send+0xfc>)
 801a21e:	2200      	movs	r2, #0
 801a220:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a222:	4b28      	ldr	r3, [pc, #160]	; (801a2c4 <TRACE_Send+0xfc>)
 801a224:	8a9b      	ldrh	r3, [r3, #20]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d105      	bne.n	801a236 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a22a:	4b26      	ldr	r3, [pc, #152]	; (801a2c4 <TRACE_Send+0xfc>)
 801a22c:	2200      	movs	r2, #0
 801a22e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a230:	4b24      	ldr	r3, [pc, #144]	; (801a2c4 <TRACE_Send+0xfc>)
 801a232:	2200      	movs	r2, #0
 801a234:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a236:	4b23      	ldr	r3, [pc, #140]	; (801a2c4 <TRACE_Send+0xfc>)
 801a238:	789b      	ldrb	r3, [r3, #2]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d115      	bne.n	801a26a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a23e:	4b21      	ldr	r3, [pc, #132]	; (801a2c4 <TRACE_Send+0xfc>)
 801a240:	8a5a      	ldrh	r2, [r3, #18]
 801a242:	4b20      	ldr	r3, [pc, #128]	; (801a2c4 <TRACE_Send+0xfc>)
 801a244:	8a1b      	ldrh	r3, [r3, #16]
 801a246:	429a      	cmp	r2, r3
 801a248:	d908      	bls.n	801a25c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a24a:	4b1e      	ldr	r3, [pc, #120]	; (801a2c4 <TRACE_Send+0xfc>)
 801a24c:	8a5a      	ldrh	r2, [r3, #18]
 801a24e:	4b1d      	ldr	r3, [pc, #116]	; (801a2c4 <TRACE_Send+0xfc>)
 801a250:	8a1b      	ldrh	r3, [r3, #16]
 801a252:	1ad3      	subs	r3, r2, r3
 801a254:	b29a      	uxth	r2, r3
 801a256:	4b1b      	ldr	r3, [pc, #108]	; (801a2c4 <TRACE_Send+0xfc>)
 801a258:	829a      	strh	r2, [r3, #20]
 801a25a:	e006      	b.n	801a26a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a25c:	4b19      	ldr	r3, [pc, #100]	; (801a2c4 <TRACE_Send+0xfc>)
 801a25e:	8a1b      	ldrh	r3, [r3, #16]
 801a260:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a264:	b29a      	uxth	r2, r3
 801a266:	4b17      	ldr	r3, [pc, #92]	; (801a2c4 <TRACE_Send+0xfc>)
 801a268:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a26a:	4b16      	ldr	r3, [pc, #88]	; (801a2c4 <TRACE_Send+0xfc>)
 801a26c:	8a1b      	ldrh	r3, [r3, #16]
 801a26e:	461a      	mov	r2, r3
 801a270:	4b15      	ldr	r3, [pc, #84]	; (801a2c8 <TRACE_Send+0x100>)
 801a272:	4413      	add	r3, r2
 801a274:	61bb      	str	r3, [r7, #24]
 801a276:	697b      	ldr	r3, [r7, #20]
 801a278:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	f383 8810 	msr	PRIMASK, r3
}
 801a280:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a282:	f7e7 fc71 	bl	8001b68 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a286:	4b11      	ldr	r3, [pc, #68]	; (801a2cc <TRACE_Send+0x104>)
 801a288:	68db      	ldr	r3, [r3, #12]
 801a28a:	4a0e      	ldr	r2, [pc, #56]	; (801a2c4 <TRACE_Send+0xfc>)
 801a28c:	8a92      	ldrh	r2, [r2, #20]
 801a28e:	4611      	mov	r1, r2
 801a290:	69b8      	ldr	r0, [r7, #24]
 801a292:	4798      	blx	r3
 801a294:	4603      	mov	r3, r0
 801a296:	77fb      	strb	r3, [r7, #31]
 801a298:	e00d      	b.n	801a2b6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a29a:	f000 f941 	bl	801a520 <TRACE_UnLock>
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2a2:	68bb      	ldr	r3, [r7, #8]
 801a2a4:	f383 8810 	msr	PRIMASK, r3
}
 801a2a8:	e005      	b.n	801a2b6 <TRACE_Send+0xee>
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	f383 8810 	msr	PRIMASK, r3
}
 801a2b4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a2b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	3720      	adds	r7, #32
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bd80      	pop	{r7, pc}
 801a2c2:	bf00      	nop
 801a2c4:	20001cb8 	.word	0x20001cb8
 801a2c8:	20001cd0 	.word	0x20001cd0
 801a2cc:	0801b5d0 	.word	0x0801b5d0

0801a2d0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b088      	sub	sp, #32
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a2e0:	617b      	str	r3, [r7, #20]
  return(result);
 801a2e2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a2e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a2e6:	b672      	cpsid	i
}
 801a2e8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a2ea:	4b3c      	ldr	r3, [pc, #240]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a2ec:	789b      	ldrb	r3, [r3, #2]
 801a2ee:	2b02      	cmp	r3, #2
 801a2f0:	d106      	bne.n	801a300 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a2f2:	4b3a      	ldr	r3, [pc, #232]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a2f8:	4b38      	ldr	r3, [pc, #224]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	821a      	strh	r2, [r3, #16]
 801a2fe:	e00a      	b.n	801a316 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a300:	4b36      	ldr	r3, [pc, #216]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a302:	8a1a      	ldrh	r2, [r3, #16]
 801a304:	4b35      	ldr	r3, [pc, #212]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a306:	8a9b      	ldrh	r3, [r3, #20]
 801a308:	4413      	add	r3, r2
 801a30a:	b29b      	uxth	r3, r3
 801a30c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a310:	b29a      	uxth	r2, r3
 801a312:	4b32      	ldr	r3, [pc, #200]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a314:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a316:	4b31      	ldr	r3, [pc, #196]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a318:	8a1a      	ldrh	r2, [r3, #16]
 801a31a:	4b30      	ldr	r3, [pc, #192]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a31c:	8a5b      	ldrh	r3, [r3, #18]
 801a31e:	429a      	cmp	r2, r3
 801a320:	d04d      	beq.n	801a3be <TRACE_TxCpltCallback+0xee>
 801a322:	4b2e      	ldr	r3, [pc, #184]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a324:	8adb      	ldrh	r3, [r3, #22]
 801a326:	2b01      	cmp	r3, #1
 801a328:	d149      	bne.n	801a3be <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a32a:	4b2c      	ldr	r3, [pc, #176]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a32c:	789b      	ldrb	r3, [r3, #2]
 801a32e:	2b01      	cmp	r3, #1
 801a330:	d117      	bne.n	801a362 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a332:	4b2a      	ldr	r3, [pc, #168]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a334:	881a      	ldrh	r2, [r3, #0]
 801a336:	4b29      	ldr	r3, [pc, #164]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a338:	8a1b      	ldrh	r3, [r3, #16]
 801a33a:	1ad3      	subs	r3, r2, r3
 801a33c:	b29a      	uxth	r2, r3
 801a33e:	4b27      	ldr	r3, [pc, #156]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a340:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a342:	4b26      	ldr	r3, [pc, #152]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a344:	2202      	movs	r2, #2
 801a346:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a348:	4b24      	ldr	r3, [pc, #144]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a34a:	2200      	movs	r2, #0
 801a34c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a34e:	4b23      	ldr	r3, [pc, #140]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a350:	8a9b      	ldrh	r3, [r3, #20]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d105      	bne.n	801a362 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a356:	4b21      	ldr	r3, [pc, #132]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a358:	2200      	movs	r2, #0
 801a35a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a35c:	4b1f      	ldr	r3, [pc, #124]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a35e:	2200      	movs	r2, #0
 801a360:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a362:	4b1e      	ldr	r3, [pc, #120]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a364:	789b      	ldrb	r3, [r3, #2]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d115      	bne.n	801a396 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a36a:	4b1c      	ldr	r3, [pc, #112]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a36c:	8a5a      	ldrh	r2, [r3, #18]
 801a36e:	4b1b      	ldr	r3, [pc, #108]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a370:	8a1b      	ldrh	r3, [r3, #16]
 801a372:	429a      	cmp	r2, r3
 801a374:	d908      	bls.n	801a388 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a376:	4b19      	ldr	r3, [pc, #100]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a378:	8a5a      	ldrh	r2, [r3, #18]
 801a37a:	4b18      	ldr	r3, [pc, #96]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a37c:	8a1b      	ldrh	r3, [r3, #16]
 801a37e:	1ad3      	subs	r3, r2, r3
 801a380:	b29a      	uxth	r2, r3
 801a382:	4b16      	ldr	r3, [pc, #88]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a384:	829a      	strh	r2, [r3, #20]
 801a386:	e006      	b.n	801a396 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a388:	4b14      	ldr	r3, [pc, #80]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a38a:	8a1b      	ldrh	r3, [r3, #16]
 801a38c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a390:	b29a      	uxth	r2, r3
 801a392:	4b12      	ldr	r3, [pc, #72]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a394:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a396:	4b11      	ldr	r3, [pc, #68]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a398:	8a1b      	ldrh	r3, [r3, #16]
 801a39a:	461a      	mov	r2, r3
 801a39c:	4b10      	ldr	r3, [pc, #64]	; (801a3e0 <TRACE_TxCpltCallback+0x110>)
 801a39e:	4413      	add	r3, r2
 801a3a0:	61fb      	str	r3, [r7, #28]
 801a3a2:	69bb      	ldr	r3, [r7, #24]
 801a3a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3a6:	693b      	ldr	r3, [r7, #16]
 801a3a8:	f383 8810 	msr	PRIMASK, r3
}
 801a3ac:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a3ae:	4b0d      	ldr	r3, [pc, #52]	; (801a3e4 <TRACE_TxCpltCallback+0x114>)
 801a3b0:	68db      	ldr	r3, [r3, #12]
 801a3b2:	4a0a      	ldr	r2, [pc, #40]	; (801a3dc <TRACE_TxCpltCallback+0x10c>)
 801a3b4:	8a92      	ldrh	r2, [r2, #20]
 801a3b6:	4611      	mov	r1, r2
 801a3b8:	69f8      	ldr	r0, [r7, #28]
 801a3ba:	4798      	blx	r3
 801a3bc:	e00a      	b.n	801a3d4 <TRACE_TxCpltCallback+0x104>
 801a3be:	69bb      	ldr	r3, [r7, #24]
 801a3c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	f383 8810 	msr	PRIMASK, r3
}
 801a3c8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a3ca:	f7e7 fbd5 	bl	8001b78 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a3ce:	f000 f8a7 	bl	801a520 <TRACE_UnLock>
  }
}
 801a3d2:	bf00      	nop
 801a3d4:	bf00      	nop
 801a3d6:	3720      	adds	r7, #32
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	bd80      	pop	{r7, pc}
 801a3dc:	20001cb8 	.word	0x20001cb8
 801a3e0:	20001cd0 	.word	0x20001cd0
 801a3e4:	0801b5d0 	.word	0x0801b5d0

0801a3e8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a3e8:	b480      	push	{r7}
 801a3ea:	b087      	sub	sp, #28
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	6039      	str	r1, [r7, #0]
 801a3f2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a3f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a3f8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3fa:	f3ef 8310 	mrs	r3, PRIMASK
 801a3fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801a400:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a404:	b672      	cpsid	i
}
 801a406:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a408:	4b35      	ldr	r3, [pc, #212]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a40a:	8a5a      	ldrh	r2, [r3, #18]
 801a40c:	4b34      	ldr	r3, [pc, #208]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a40e:	8a1b      	ldrh	r3, [r3, #16]
 801a410:	429a      	cmp	r2, r3
 801a412:	d11b      	bne.n	801a44c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a414:	4b32      	ldr	r3, [pc, #200]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a416:	8a5b      	ldrh	r3, [r3, #18]
 801a418:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a41c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a41e:	88fa      	ldrh	r2, [r7, #6]
 801a420:	8afb      	ldrh	r3, [r7, #22]
 801a422:	429a      	cmp	r2, r3
 801a424:	d33a      	bcc.n	801a49c <TRACE_AllocateBufer+0xb4>
 801a426:	4b2e      	ldr	r3, [pc, #184]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a428:	8a1b      	ldrh	r3, [r3, #16]
 801a42a:	88fa      	ldrh	r2, [r7, #6]
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d235      	bcs.n	801a49c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a430:	4b2b      	ldr	r3, [pc, #172]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a432:	2201      	movs	r2, #1
 801a434:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a436:	4b2a      	ldr	r3, [pc, #168]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a438:	8a5a      	ldrh	r2, [r3, #18]
 801a43a:	4b29      	ldr	r3, [pc, #164]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a43c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a43e:	4b28      	ldr	r3, [pc, #160]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a440:	8a1b      	ldrh	r3, [r3, #16]
 801a442:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a444:	4b26      	ldr	r3, [pc, #152]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a446:	2200      	movs	r2, #0
 801a448:	825a      	strh	r2, [r3, #18]
 801a44a:	e027      	b.n	801a49c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a44c:	4b24      	ldr	r3, [pc, #144]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a44e:	8a5a      	ldrh	r2, [r3, #18]
 801a450:	4b23      	ldr	r3, [pc, #140]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a452:	8a1b      	ldrh	r3, [r3, #16]
 801a454:	429a      	cmp	r2, r3
 801a456:	d91b      	bls.n	801a490 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a458:	4b21      	ldr	r3, [pc, #132]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a45a:	8a5b      	ldrh	r3, [r3, #18]
 801a45c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a460:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801a462:	88fa      	ldrh	r2, [r7, #6]
 801a464:	8afb      	ldrh	r3, [r7, #22]
 801a466:	429a      	cmp	r2, r3
 801a468:	d318      	bcc.n	801a49c <TRACE_AllocateBufer+0xb4>
 801a46a:	4b1d      	ldr	r3, [pc, #116]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a46c:	8a1b      	ldrh	r3, [r3, #16]
 801a46e:	88fa      	ldrh	r2, [r7, #6]
 801a470:	429a      	cmp	r2, r3
 801a472:	d213      	bcs.n	801a49c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a474:	4b1a      	ldr	r3, [pc, #104]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a476:	2201      	movs	r2, #1
 801a478:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a47a:	4b19      	ldr	r3, [pc, #100]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a47c:	8a5a      	ldrh	r2, [r3, #18]
 801a47e:	4b18      	ldr	r3, [pc, #96]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a480:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a482:	4b17      	ldr	r3, [pc, #92]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a484:	8a1b      	ldrh	r3, [r3, #16]
 801a486:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a488:	4b15      	ldr	r3, [pc, #84]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a48a:	2200      	movs	r2, #0
 801a48c:	825a      	strh	r2, [r3, #18]
 801a48e:	e005      	b.n	801a49c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801a490:	4b13      	ldr	r3, [pc, #76]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a492:	8a1a      	ldrh	r2, [r3, #16]
 801a494:	4b12      	ldr	r3, [pc, #72]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a496:	8a5b      	ldrh	r3, [r3, #18]
 801a498:	1ad3      	subs	r3, r2, r3
 801a49a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801a49c:	8afa      	ldrh	r2, [r7, #22]
 801a49e:	88fb      	ldrh	r3, [r7, #6]
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d90f      	bls.n	801a4c4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801a4a4:	4b0e      	ldr	r3, [pc, #56]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a4a6:	8a5a      	ldrh	r2, [r3, #18]
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a4ac:	4b0c      	ldr	r3, [pc, #48]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a4ae:	8a5a      	ldrh	r2, [r3, #18]
 801a4b0:	88fb      	ldrh	r3, [r7, #6]
 801a4b2:	4413      	add	r3, r2
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a4ba:	b29a      	uxth	r2, r3
 801a4bc:	4b08      	ldr	r3, [pc, #32]	; (801a4e0 <TRACE_AllocateBufer+0xf8>)
 801a4be:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	82bb      	strh	r3, [r7, #20]
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	f383 8810 	msr	PRIMASK, r3
}
 801a4ce:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801a4d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	371c      	adds	r7, #28
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	bc80      	pop	{r7}
 801a4dc:	4770      	bx	lr
 801a4de:	bf00      	nop
 801a4e0:	20001cb8 	.word	0x20001cb8

0801a4e4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4ea:	f3ef 8310 	mrs	r3, PRIMASK
 801a4ee:	607b      	str	r3, [r7, #4]
  return(result);
 801a4f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a4f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4f4:	b672      	cpsid	i
}
 801a4f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801a4f8:	4b08      	ldr	r3, [pc, #32]	; (801a51c <TRACE_Lock+0x38>)
 801a4fa:	8adb      	ldrh	r3, [r3, #22]
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	b29a      	uxth	r2, r3
 801a500:	4b06      	ldr	r3, [pc, #24]	; (801a51c <TRACE_Lock+0x38>)
 801a502:	82da      	strh	r2, [r3, #22]
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a508:	68bb      	ldr	r3, [r7, #8]
 801a50a:	f383 8810 	msr	PRIMASK, r3
}
 801a50e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a510:	bf00      	nop
 801a512:	3714      	adds	r7, #20
 801a514:	46bd      	mov	sp, r7
 801a516:	bc80      	pop	{r7}
 801a518:	4770      	bx	lr
 801a51a:	bf00      	nop
 801a51c:	20001cb8 	.word	0x20001cb8

0801a520 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801a520:	b480      	push	{r7}
 801a522:	b085      	sub	sp, #20
 801a524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a526:	f3ef 8310 	mrs	r3, PRIMASK
 801a52a:	607b      	str	r3, [r7, #4]
  return(result);
 801a52c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a52e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a530:	b672      	cpsid	i
}
 801a532:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801a534:	4b08      	ldr	r3, [pc, #32]	; (801a558 <TRACE_UnLock+0x38>)
 801a536:	8adb      	ldrh	r3, [r3, #22]
 801a538:	3b01      	subs	r3, #1
 801a53a:	b29a      	uxth	r2, r3
 801a53c:	4b06      	ldr	r3, [pc, #24]	; (801a558 <TRACE_UnLock+0x38>)
 801a53e:	82da      	strh	r2, [r3, #22]
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a544:	68bb      	ldr	r3, [r7, #8]
 801a546:	f383 8810 	msr	PRIMASK, r3
}
 801a54a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a54c:	bf00      	nop
 801a54e:	3714      	adds	r7, #20
 801a550:	46bd      	mov	sp, r7
 801a552:	bc80      	pop	{r7}
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	20001cb8 	.word	0x20001cb8

0801a55c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801a55c:	b480      	push	{r7}
 801a55e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801a560:	4b05      	ldr	r3, [pc, #20]	; (801a578 <TRACE_IsLocked+0x1c>)
 801a562:	8adb      	ldrh	r3, [r3, #22]
 801a564:	2b00      	cmp	r3, #0
 801a566:	bf14      	ite	ne
 801a568:	2301      	movne	r3, #1
 801a56a:	2300      	moveq	r3, #0
 801a56c:	b2db      	uxtb	r3, r3
}
 801a56e:	4618      	mov	r0, r3
 801a570:	46bd      	mov	sp, r7
 801a572:	bc80      	pop	{r7}
 801a574:	4770      	bx	lr
 801a576:	bf00      	nop
 801a578:	20001cb8 	.word	0x20001cb8

0801a57c <__libc_init_array>:
 801a57c:	b570      	push	{r4, r5, r6, lr}
 801a57e:	4d0d      	ldr	r5, [pc, #52]	; (801a5b4 <__libc_init_array+0x38>)
 801a580:	4c0d      	ldr	r4, [pc, #52]	; (801a5b8 <__libc_init_array+0x3c>)
 801a582:	1b64      	subs	r4, r4, r5
 801a584:	10a4      	asrs	r4, r4, #2
 801a586:	2600      	movs	r6, #0
 801a588:	42a6      	cmp	r6, r4
 801a58a:	d109      	bne.n	801a5a0 <__libc_init_array+0x24>
 801a58c:	4d0b      	ldr	r5, [pc, #44]	; (801a5bc <__libc_init_array+0x40>)
 801a58e:	4c0c      	ldr	r4, [pc, #48]	; (801a5c0 <__libc_init_array+0x44>)
 801a590:	f000 fd30 	bl	801aff4 <_init>
 801a594:	1b64      	subs	r4, r4, r5
 801a596:	10a4      	asrs	r4, r4, #2
 801a598:	2600      	movs	r6, #0
 801a59a:	42a6      	cmp	r6, r4
 801a59c:	d105      	bne.n	801a5aa <__libc_init_array+0x2e>
 801a59e:	bd70      	pop	{r4, r5, r6, pc}
 801a5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5a4:	4798      	blx	r3
 801a5a6:	3601      	adds	r6, #1
 801a5a8:	e7ee      	b.n	801a588 <__libc_init_array+0xc>
 801a5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5ae:	4798      	blx	r3
 801a5b0:	3601      	adds	r6, #1
 801a5b2:	e7f2      	b.n	801a59a <__libc_init_array+0x1e>
 801a5b4:	0801bb94 	.word	0x0801bb94
 801a5b8:	0801bb94 	.word	0x0801bb94
 801a5bc:	0801bb94 	.word	0x0801bb94
 801a5c0:	0801bb98 	.word	0x0801bb98

0801a5c4 <memset>:
 801a5c4:	4402      	add	r2, r0
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	4293      	cmp	r3, r2
 801a5ca:	d100      	bne.n	801a5ce <memset+0xa>
 801a5cc:	4770      	bx	lr
 801a5ce:	f803 1b01 	strb.w	r1, [r3], #1
 801a5d2:	e7f9      	b.n	801a5c8 <memset+0x4>

0801a5d4 <sniprintf>:
 801a5d4:	b40c      	push	{r2, r3}
 801a5d6:	b530      	push	{r4, r5, lr}
 801a5d8:	4b17      	ldr	r3, [pc, #92]	; (801a638 <sniprintf+0x64>)
 801a5da:	1e0c      	subs	r4, r1, #0
 801a5dc:	681d      	ldr	r5, [r3, #0]
 801a5de:	b09d      	sub	sp, #116	; 0x74
 801a5e0:	da08      	bge.n	801a5f4 <sniprintf+0x20>
 801a5e2:	238b      	movs	r3, #139	; 0x8b
 801a5e4:	602b      	str	r3, [r5, #0]
 801a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ea:	b01d      	add	sp, #116	; 0x74
 801a5ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5f0:	b002      	add	sp, #8
 801a5f2:	4770      	bx	lr
 801a5f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a5f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5fc:	bf14      	ite	ne
 801a5fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a602:	4623      	moveq	r3, r4
 801a604:	9304      	str	r3, [sp, #16]
 801a606:	9307      	str	r3, [sp, #28]
 801a608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a60c:	9002      	str	r0, [sp, #8]
 801a60e:	9006      	str	r0, [sp, #24]
 801a610:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a614:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a616:	ab21      	add	r3, sp, #132	; 0x84
 801a618:	a902      	add	r1, sp, #8
 801a61a:	4628      	mov	r0, r5
 801a61c:	9301      	str	r3, [sp, #4]
 801a61e:	f000 f869 	bl	801a6f4 <_svfiprintf_r>
 801a622:	1c43      	adds	r3, r0, #1
 801a624:	bfbc      	itt	lt
 801a626:	238b      	movlt	r3, #139	; 0x8b
 801a628:	602b      	strlt	r3, [r5, #0]
 801a62a:	2c00      	cmp	r4, #0
 801a62c:	d0dd      	beq.n	801a5ea <sniprintf+0x16>
 801a62e:	9b02      	ldr	r3, [sp, #8]
 801a630:	2200      	movs	r2, #0
 801a632:	701a      	strb	r2, [r3, #0]
 801a634:	e7d9      	b.n	801a5ea <sniprintf+0x16>
 801a636:	bf00      	nop
 801a638:	2000014c 	.word	0x2000014c

0801a63c <__ssputs_r>:
 801a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a640:	688e      	ldr	r6, [r1, #8]
 801a642:	429e      	cmp	r6, r3
 801a644:	4682      	mov	sl, r0
 801a646:	460c      	mov	r4, r1
 801a648:	4690      	mov	r8, r2
 801a64a:	461f      	mov	r7, r3
 801a64c:	d838      	bhi.n	801a6c0 <__ssputs_r+0x84>
 801a64e:	898a      	ldrh	r2, [r1, #12]
 801a650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a654:	d032      	beq.n	801a6bc <__ssputs_r+0x80>
 801a656:	6825      	ldr	r5, [r4, #0]
 801a658:	6909      	ldr	r1, [r1, #16]
 801a65a:	eba5 0901 	sub.w	r9, r5, r1
 801a65e:	6965      	ldr	r5, [r4, #20]
 801a660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a668:	3301      	adds	r3, #1
 801a66a:	444b      	add	r3, r9
 801a66c:	106d      	asrs	r5, r5, #1
 801a66e:	429d      	cmp	r5, r3
 801a670:	bf38      	it	cc
 801a672:	461d      	movcc	r5, r3
 801a674:	0553      	lsls	r3, r2, #21
 801a676:	d531      	bpl.n	801a6dc <__ssputs_r+0xa0>
 801a678:	4629      	mov	r1, r5
 801a67a:	f000 fb61 	bl	801ad40 <_malloc_r>
 801a67e:	4606      	mov	r6, r0
 801a680:	b950      	cbnz	r0, 801a698 <__ssputs_r+0x5c>
 801a682:	230c      	movs	r3, #12
 801a684:	f8ca 3000 	str.w	r3, [sl]
 801a688:	89a3      	ldrh	r3, [r4, #12]
 801a68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a68e:	81a3      	strh	r3, [r4, #12]
 801a690:	f04f 30ff 	mov.w	r0, #4294967295
 801a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a698:	6921      	ldr	r1, [r4, #16]
 801a69a:	464a      	mov	r2, r9
 801a69c:	f000 fabe 	bl	801ac1c <memcpy>
 801a6a0:	89a3      	ldrh	r3, [r4, #12]
 801a6a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6aa:	81a3      	strh	r3, [r4, #12]
 801a6ac:	6126      	str	r6, [r4, #16]
 801a6ae:	6165      	str	r5, [r4, #20]
 801a6b0:	444e      	add	r6, r9
 801a6b2:	eba5 0509 	sub.w	r5, r5, r9
 801a6b6:	6026      	str	r6, [r4, #0]
 801a6b8:	60a5      	str	r5, [r4, #8]
 801a6ba:	463e      	mov	r6, r7
 801a6bc:	42be      	cmp	r6, r7
 801a6be:	d900      	bls.n	801a6c2 <__ssputs_r+0x86>
 801a6c0:	463e      	mov	r6, r7
 801a6c2:	6820      	ldr	r0, [r4, #0]
 801a6c4:	4632      	mov	r2, r6
 801a6c6:	4641      	mov	r1, r8
 801a6c8:	f000 fab6 	bl	801ac38 <memmove>
 801a6cc:	68a3      	ldr	r3, [r4, #8]
 801a6ce:	1b9b      	subs	r3, r3, r6
 801a6d0:	60a3      	str	r3, [r4, #8]
 801a6d2:	6823      	ldr	r3, [r4, #0]
 801a6d4:	4433      	add	r3, r6
 801a6d6:	6023      	str	r3, [r4, #0]
 801a6d8:	2000      	movs	r0, #0
 801a6da:	e7db      	b.n	801a694 <__ssputs_r+0x58>
 801a6dc:	462a      	mov	r2, r5
 801a6de:	f000 fba3 	bl	801ae28 <_realloc_r>
 801a6e2:	4606      	mov	r6, r0
 801a6e4:	2800      	cmp	r0, #0
 801a6e6:	d1e1      	bne.n	801a6ac <__ssputs_r+0x70>
 801a6e8:	6921      	ldr	r1, [r4, #16]
 801a6ea:	4650      	mov	r0, sl
 801a6ec:	f000 fabe 	bl	801ac6c <_free_r>
 801a6f0:	e7c7      	b.n	801a682 <__ssputs_r+0x46>
	...

0801a6f4 <_svfiprintf_r>:
 801a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6f8:	4698      	mov	r8, r3
 801a6fa:	898b      	ldrh	r3, [r1, #12]
 801a6fc:	061b      	lsls	r3, r3, #24
 801a6fe:	b09d      	sub	sp, #116	; 0x74
 801a700:	4607      	mov	r7, r0
 801a702:	460d      	mov	r5, r1
 801a704:	4614      	mov	r4, r2
 801a706:	d50e      	bpl.n	801a726 <_svfiprintf_r+0x32>
 801a708:	690b      	ldr	r3, [r1, #16]
 801a70a:	b963      	cbnz	r3, 801a726 <_svfiprintf_r+0x32>
 801a70c:	2140      	movs	r1, #64	; 0x40
 801a70e:	f000 fb17 	bl	801ad40 <_malloc_r>
 801a712:	6028      	str	r0, [r5, #0]
 801a714:	6128      	str	r0, [r5, #16]
 801a716:	b920      	cbnz	r0, 801a722 <_svfiprintf_r+0x2e>
 801a718:	230c      	movs	r3, #12
 801a71a:	603b      	str	r3, [r7, #0]
 801a71c:	f04f 30ff 	mov.w	r0, #4294967295
 801a720:	e0d1      	b.n	801a8c6 <_svfiprintf_r+0x1d2>
 801a722:	2340      	movs	r3, #64	; 0x40
 801a724:	616b      	str	r3, [r5, #20]
 801a726:	2300      	movs	r3, #0
 801a728:	9309      	str	r3, [sp, #36]	; 0x24
 801a72a:	2320      	movs	r3, #32
 801a72c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a730:	f8cd 800c 	str.w	r8, [sp, #12]
 801a734:	2330      	movs	r3, #48	; 0x30
 801a736:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a8e0 <_svfiprintf_r+0x1ec>
 801a73a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a73e:	f04f 0901 	mov.w	r9, #1
 801a742:	4623      	mov	r3, r4
 801a744:	469a      	mov	sl, r3
 801a746:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a74a:	b10a      	cbz	r2, 801a750 <_svfiprintf_r+0x5c>
 801a74c:	2a25      	cmp	r2, #37	; 0x25
 801a74e:	d1f9      	bne.n	801a744 <_svfiprintf_r+0x50>
 801a750:	ebba 0b04 	subs.w	fp, sl, r4
 801a754:	d00b      	beq.n	801a76e <_svfiprintf_r+0x7a>
 801a756:	465b      	mov	r3, fp
 801a758:	4622      	mov	r2, r4
 801a75a:	4629      	mov	r1, r5
 801a75c:	4638      	mov	r0, r7
 801a75e:	f7ff ff6d 	bl	801a63c <__ssputs_r>
 801a762:	3001      	adds	r0, #1
 801a764:	f000 80aa 	beq.w	801a8bc <_svfiprintf_r+0x1c8>
 801a768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a76a:	445a      	add	r2, fp
 801a76c:	9209      	str	r2, [sp, #36]	; 0x24
 801a76e:	f89a 3000 	ldrb.w	r3, [sl]
 801a772:	2b00      	cmp	r3, #0
 801a774:	f000 80a2 	beq.w	801a8bc <_svfiprintf_r+0x1c8>
 801a778:	2300      	movs	r3, #0
 801a77a:	f04f 32ff 	mov.w	r2, #4294967295
 801a77e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a782:	f10a 0a01 	add.w	sl, sl, #1
 801a786:	9304      	str	r3, [sp, #16]
 801a788:	9307      	str	r3, [sp, #28]
 801a78a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a78e:	931a      	str	r3, [sp, #104]	; 0x68
 801a790:	4654      	mov	r4, sl
 801a792:	2205      	movs	r2, #5
 801a794:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a798:	4851      	ldr	r0, [pc, #324]	; (801a8e0 <_svfiprintf_r+0x1ec>)
 801a79a:	f7e5 fcf9 	bl	8000190 <memchr>
 801a79e:	9a04      	ldr	r2, [sp, #16]
 801a7a0:	b9d8      	cbnz	r0, 801a7da <_svfiprintf_r+0xe6>
 801a7a2:	06d0      	lsls	r0, r2, #27
 801a7a4:	bf44      	itt	mi
 801a7a6:	2320      	movmi	r3, #32
 801a7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a7ac:	0711      	lsls	r1, r2, #28
 801a7ae:	bf44      	itt	mi
 801a7b0:	232b      	movmi	r3, #43	; 0x2b
 801a7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a7b6:	f89a 3000 	ldrb.w	r3, [sl]
 801a7ba:	2b2a      	cmp	r3, #42	; 0x2a
 801a7bc:	d015      	beq.n	801a7ea <_svfiprintf_r+0xf6>
 801a7be:	9a07      	ldr	r2, [sp, #28]
 801a7c0:	4654      	mov	r4, sl
 801a7c2:	2000      	movs	r0, #0
 801a7c4:	f04f 0c0a 	mov.w	ip, #10
 801a7c8:	4621      	mov	r1, r4
 801a7ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a7ce:	3b30      	subs	r3, #48	; 0x30
 801a7d0:	2b09      	cmp	r3, #9
 801a7d2:	d94e      	bls.n	801a872 <_svfiprintf_r+0x17e>
 801a7d4:	b1b0      	cbz	r0, 801a804 <_svfiprintf_r+0x110>
 801a7d6:	9207      	str	r2, [sp, #28]
 801a7d8:	e014      	b.n	801a804 <_svfiprintf_r+0x110>
 801a7da:	eba0 0308 	sub.w	r3, r0, r8
 801a7de:	fa09 f303 	lsl.w	r3, r9, r3
 801a7e2:	4313      	orrs	r3, r2
 801a7e4:	9304      	str	r3, [sp, #16]
 801a7e6:	46a2      	mov	sl, r4
 801a7e8:	e7d2      	b.n	801a790 <_svfiprintf_r+0x9c>
 801a7ea:	9b03      	ldr	r3, [sp, #12]
 801a7ec:	1d19      	adds	r1, r3, #4
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	9103      	str	r1, [sp, #12]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	bfbb      	ittet	lt
 801a7f6:	425b      	neglt	r3, r3
 801a7f8:	f042 0202 	orrlt.w	r2, r2, #2
 801a7fc:	9307      	strge	r3, [sp, #28]
 801a7fe:	9307      	strlt	r3, [sp, #28]
 801a800:	bfb8      	it	lt
 801a802:	9204      	strlt	r2, [sp, #16]
 801a804:	7823      	ldrb	r3, [r4, #0]
 801a806:	2b2e      	cmp	r3, #46	; 0x2e
 801a808:	d10c      	bne.n	801a824 <_svfiprintf_r+0x130>
 801a80a:	7863      	ldrb	r3, [r4, #1]
 801a80c:	2b2a      	cmp	r3, #42	; 0x2a
 801a80e:	d135      	bne.n	801a87c <_svfiprintf_r+0x188>
 801a810:	9b03      	ldr	r3, [sp, #12]
 801a812:	1d1a      	adds	r2, r3, #4
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	9203      	str	r2, [sp, #12]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	bfb8      	it	lt
 801a81c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a820:	3402      	adds	r4, #2
 801a822:	9305      	str	r3, [sp, #20]
 801a824:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801a8e4 <_svfiprintf_r+0x1f0>
 801a828:	7821      	ldrb	r1, [r4, #0]
 801a82a:	2203      	movs	r2, #3
 801a82c:	4650      	mov	r0, sl
 801a82e:	f7e5 fcaf 	bl	8000190 <memchr>
 801a832:	b140      	cbz	r0, 801a846 <_svfiprintf_r+0x152>
 801a834:	2340      	movs	r3, #64	; 0x40
 801a836:	eba0 000a 	sub.w	r0, r0, sl
 801a83a:	fa03 f000 	lsl.w	r0, r3, r0
 801a83e:	9b04      	ldr	r3, [sp, #16]
 801a840:	4303      	orrs	r3, r0
 801a842:	3401      	adds	r4, #1
 801a844:	9304      	str	r3, [sp, #16]
 801a846:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a84a:	4827      	ldr	r0, [pc, #156]	; (801a8e8 <_svfiprintf_r+0x1f4>)
 801a84c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a850:	2206      	movs	r2, #6
 801a852:	f7e5 fc9d 	bl	8000190 <memchr>
 801a856:	2800      	cmp	r0, #0
 801a858:	d038      	beq.n	801a8cc <_svfiprintf_r+0x1d8>
 801a85a:	4b24      	ldr	r3, [pc, #144]	; (801a8ec <_svfiprintf_r+0x1f8>)
 801a85c:	bb1b      	cbnz	r3, 801a8a6 <_svfiprintf_r+0x1b2>
 801a85e:	9b03      	ldr	r3, [sp, #12]
 801a860:	3307      	adds	r3, #7
 801a862:	f023 0307 	bic.w	r3, r3, #7
 801a866:	3308      	adds	r3, #8
 801a868:	9303      	str	r3, [sp, #12]
 801a86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a86c:	4433      	add	r3, r6
 801a86e:	9309      	str	r3, [sp, #36]	; 0x24
 801a870:	e767      	b.n	801a742 <_svfiprintf_r+0x4e>
 801a872:	fb0c 3202 	mla	r2, ip, r2, r3
 801a876:	460c      	mov	r4, r1
 801a878:	2001      	movs	r0, #1
 801a87a:	e7a5      	b.n	801a7c8 <_svfiprintf_r+0xd4>
 801a87c:	2300      	movs	r3, #0
 801a87e:	3401      	adds	r4, #1
 801a880:	9305      	str	r3, [sp, #20]
 801a882:	4619      	mov	r1, r3
 801a884:	f04f 0c0a 	mov.w	ip, #10
 801a888:	4620      	mov	r0, r4
 801a88a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a88e:	3a30      	subs	r2, #48	; 0x30
 801a890:	2a09      	cmp	r2, #9
 801a892:	d903      	bls.n	801a89c <_svfiprintf_r+0x1a8>
 801a894:	2b00      	cmp	r3, #0
 801a896:	d0c5      	beq.n	801a824 <_svfiprintf_r+0x130>
 801a898:	9105      	str	r1, [sp, #20]
 801a89a:	e7c3      	b.n	801a824 <_svfiprintf_r+0x130>
 801a89c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a8a0:	4604      	mov	r4, r0
 801a8a2:	2301      	movs	r3, #1
 801a8a4:	e7f0      	b.n	801a888 <_svfiprintf_r+0x194>
 801a8a6:	ab03      	add	r3, sp, #12
 801a8a8:	9300      	str	r3, [sp, #0]
 801a8aa:	462a      	mov	r2, r5
 801a8ac:	4b10      	ldr	r3, [pc, #64]	; (801a8f0 <_svfiprintf_r+0x1fc>)
 801a8ae:	a904      	add	r1, sp, #16
 801a8b0:	4638      	mov	r0, r7
 801a8b2:	f3af 8000 	nop.w
 801a8b6:	1c42      	adds	r2, r0, #1
 801a8b8:	4606      	mov	r6, r0
 801a8ba:	d1d6      	bne.n	801a86a <_svfiprintf_r+0x176>
 801a8bc:	89ab      	ldrh	r3, [r5, #12]
 801a8be:	065b      	lsls	r3, r3, #25
 801a8c0:	f53f af2c 	bmi.w	801a71c <_svfiprintf_r+0x28>
 801a8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a8c6:	b01d      	add	sp, #116	; 0x74
 801a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8cc:	ab03      	add	r3, sp, #12
 801a8ce:	9300      	str	r3, [sp, #0]
 801a8d0:	462a      	mov	r2, r5
 801a8d2:	4b07      	ldr	r3, [pc, #28]	; (801a8f0 <_svfiprintf_r+0x1fc>)
 801a8d4:	a904      	add	r1, sp, #16
 801a8d6:	4638      	mov	r0, r7
 801a8d8:	f000 f87a 	bl	801a9d0 <_printf_i>
 801a8dc:	e7eb      	b.n	801a8b6 <_svfiprintf_r+0x1c2>
 801a8de:	bf00      	nop
 801a8e0:	0801ba98 	.word	0x0801ba98
 801a8e4:	0801ba9e 	.word	0x0801ba9e
 801a8e8:	0801baa2 	.word	0x0801baa2
 801a8ec:	00000000 	.word	0x00000000
 801a8f0:	0801a63d 	.word	0x0801a63d

0801a8f4 <_printf_common>:
 801a8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8f8:	4616      	mov	r6, r2
 801a8fa:	4699      	mov	r9, r3
 801a8fc:	688a      	ldr	r2, [r1, #8]
 801a8fe:	690b      	ldr	r3, [r1, #16]
 801a900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a904:	4293      	cmp	r3, r2
 801a906:	bfb8      	it	lt
 801a908:	4613      	movlt	r3, r2
 801a90a:	6033      	str	r3, [r6, #0]
 801a90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a910:	4607      	mov	r7, r0
 801a912:	460c      	mov	r4, r1
 801a914:	b10a      	cbz	r2, 801a91a <_printf_common+0x26>
 801a916:	3301      	adds	r3, #1
 801a918:	6033      	str	r3, [r6, #0]
 801a91a:	6823      	ldr	r3, [r4, #0]
 801a91c:	0699      	lsls	r1, r3, #26
 801a91e:	bf42      	ittt	mi
 801a920:	6833      	ldrmi	r3, [r6, #0]
 801a922:	3302      	addmi	r3, #2
 801a924:	6033      	strmi	r3, [r6, #0]
 801a926:	6825      	ldr	r5, [r4, #0]
 801a928:	f015 0506 	ands.w	r5, r5, #6
 801a92c:	d106      	bne.n	801a93c <_printf_common+0x48>
 801a92e:	f104 0a19 	add.w	sl, r4, #25
 801a932:	68e3      	ldr	r3, [r4, #12]
 801a934:	6832      	ldr	r2, [r6, #0]
 801a936:	1a9b      	subs	r3, r3, r2
 801a938:	42ab      	cmp	r3, r5
 801a93a:	dc26      	bgt.n	801a98a <_printf_common+0x96>
 801a93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a940:	1e13      	subs	r3, r2, #0
 801a942:	6822      	ldr	r2, [r4, #0]
 801a944:	bf18      	it	ne
 801a946:	2301      	movne	r3, #1
 801a948:	0692      	lsls	r2, r2, #26
 801a94a:	d42b      	bmi.n	801a9a4 <_printf_common+0xb0>
 801a94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a950:	4649      	mov	r1, r9
 801a952:	4638      	mov	r0, r7
 801a954:	47c0      	blx	r8
 801a956:	3001      	adds	r0, #1
 801a958:	d01e      	beq.n	801a998 <_printf_common+0xa4>
 801a95a:	6823      	ldr	r3, [r4, #0]
 801a95c:	68e5      	ldr	r5, [r4, #12]
 801a95e:	6832      	ldr	r2, [r6, #0]
 801a960:	f003 0306 	and.w	r3, r3, #6
 801a964:	2b04      	cmp	r3, #4
 801a966:	bf08      	it	eq
 801a968:	1aad      	subeq	r5, r5, r2
 801a96a:	68a3      	ldr	r3, [r4, #8]
 801a96c:	6922      	ldr	r2, [r4, #16]
 801a96e:	bf0c      	ite	eq
 801a970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a974:	2500      	movne	r5, #0
 801a976:	4293      	cmp	r3, r2
 801a978:	bfc4      	itt	gt
 801a97a:	1a9b      	subgt	r3, r3, r2
 801a97c:	18ed      	addgt	r5, r5, r3
 801a97e:	2600      	movs	r6, #0
 801a980:	341a      	adds	r4, #26
 801a982:	42b5      	cmp	r5, r6
 801a984:	d11a      	bne.n	801a9bc <_printf_common+0xc8>
 801a986:	2000      	movs	r0, #0
 801a988:	e008      	b.n	801a99c <_printf_common+0xa8>
 801a98a:	2301      	movs	r3, #1
 801a98c:	4652      	mov	r2, sl
 801a98e:	4649      	mov	r1, r9
 801a990:	4638      	mov	r0, r7
 801a992:	47c0      	blx	r8
 801a994:	3001      	adds	r0, #1
 801a996:	d103      	bne.n	801a9a0 <_printf_common+0xac>
 801a998:	f04f 30ff 	mov.w	r0, #4294967295
 801a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9a0:	3501      	adds	r5, #1
 801a9a2:	e7c6      	b.n	801a932 <_printf_common+0x3e>
 801a9a4:	18e1      	adds	r1, r4, r3
 801a9a6:	1c5a      	adds	r2, r3, #1
 801a9a8:	2030      	movs	r0, #48	; 0x30
 801a9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a9ae:	4422      	add	r2, r4
 801a9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a9b8:	3302      	adds	r3, #2
 801a9ba:	e7c7      	b.n	801a94c <_printf_common+0x58>
 801a9bc:	2301      	movs	r3, #1
 801a9be:	4622      	mov	r2, r4
 801a9c0:	4649      	mov	r1, r9
 801a9c2:	4638      	mov	r0, r7
 801a9c4:	47c0      	blx	r8
 801a9c6:	3001      	adds	r0, #1
 801a9c8:	d0e6      	beq.n	801a998 <_printf_common+0xa4>
 801a9ca:	3601      	adds	r6, #1
 801a9cc:	e7d9      	b.n	801a982 <_printf_common+0x8e>
	...

0801a9d0 <_printf_i>:
 801a9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9d4:	7e0f      	ldrb	r7, [r1, #24]
 801a9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a9d8:	2f78      	cmp	r7, #120	; 0x78
 801a9da:	4691      	mov	r9, r2
 801a9dc:	4680      	mov	r8, r0
 801a9de:	460c      	mov	r4, r1
 801a9e0:	469a      	mov	sl, r3
 801a9e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a9e6:	d807      	bhi.n	801a9f8 <_printf_i+0x28>
 801a9e8:	2f62      	cmp	r7, #98	; 0x62
 801a9ea:	d80a      	bhi.n	801aa02 <_printf_i+0x32>
 801a9ec:	2f00      	cmp	r7, #0
 801a9ee:	f000 80d8 	beq.w	801aba2 <_printf_i+0x1d2>
 801a9f2:	2f58      	cmp	r7, #88	; 0x58
 801a9f4:	f000 80a3 	beq.w	801ab3e <_printf_i+0x16e>
 801a9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa00:	e03a      	b.n	801aa78 <_printf_i+0xa8>
 801aa02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aa06:	2b15      	cmp	r3, #21
 801aa08:	d8f6      	bhi.n	801a9f8 <_printf_i+0x28>
 801aa0a:	a101      	add	r1, pc, #4	; (adr r1, 801aa10 <_printf_i+0x40>)
 801aa0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa10:	0801aa69 	.word	0x0801aa69
 801aa14:	0801aa7d 	.word	0x0801aa7d
 801aa18:	0801a9f9 	.word	0x0801a9f9
 801aa1c:	0801a9f9 	.word	0x0801a9f9
 801aa20:	0801a9f9 	.word	0x0801a9f9
 801aa24:	0801a9f9 	.word	0x0801a9f9
 801aa28:	0801aa7d 	.word	0x0801aa7d
 801aa2c:	0801a9f9 	.word	0x0801a9f9
 801aa30:	0801a9f9 	.word	0x0801a9f9
 801aa34:	0801a9f9 	.word	0x0801a9f9
 801aa38:	0801a9f9 	.word	0x0801a9f9
 801aa3c:	0801ab89 	.word	0x0801ab89
 801aa40:	0801aaad 	.word	0x0801aaad
 801aa44:	0801ab6b 	.word	0x0801ab6b
 801aa48:	0801a9f9 	.word	0x0801a9f9
 801aa4c:	0801a9f9 	.word	0x0801a9f9
 801aa50:	0801abab 	.word	0x0801abab
 801aa54:	0801a9f9 	.word	0x0801a9f9
 801aa58:	0801aaad 	.word	0x0801aaad
 801aa5c:	0801a9f9 	.word	0x0801a9f9
 801aa60:	0801a9f9 	.word	0x0801a9f9
 801aa64:	0801ab73 	.word	0x0801ab73
 801aa68:	682b      	ldr	r3, [r5, #0]
 801aa6a:	1d1a      	adds	r2, r3, #4
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	602a      	str	r2, [r5, #0]
 801aa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aa78:	2301      	movs	r3, #1
 801aa7a:	e0a3      	b.n	801abc4 <_printf_i+0x1f4>
 801aa7c:	6820      	ldr	r0, [r4, #0]
 801aa7e:	6829      	ldr	r1, [r5, #0]
 801aa80:	0606      	lsls	r6, r0, #24
 801aa82:	f101 0304 	add.w	r3, r1, #4
 801aa86:	d50a      	bpl.n	801aa9e <_printf_i+0xce>
 801aa88:	680e      	ldr	r6, [r1, #0]
 801aa8a:	602b      	str	r3, [r5, #0]
 801aa8c:	2e00      	cmp	r6, #0
 801aa8e:	da03      	bge.n	801aa98 <_printf_i+0xc8>
 801aa90:	232d      	movs	r3, #45	; 0x2d
 801aa92:	4276      	negs	r6, r6
 801aa94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa98:	485e      	ldr	r0, [pc, #376]	; (801ac14 <_printf_i+0x244>)
 801aa9a:	230a      	movs	r3, #10
 801aa9c:	e019      	b.n	801aad2 <_printf_i+0x102>
 801aa9e:	680e      	ldr	r6, [r1, #0]
 801aaa0:	602b      	str	r3, [r5, #0]
 801aaa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801aaa6:	bf18      	it	ne
 801aaa8:	b236      	sxthne	r6, r6
 801aaaa:	e7ef      	b.n	801aa8c <_printf_i+0xbc>
 801aaac:	682b      	ldr	r3, [r5, #0]
 801aaae:	6820      	ldr	r0, [r4, #0]
 801aab0:	1d19      	adds	r1, r3, #4
 801aab2:	6029      	str	r1, [r5, #0]
 801aab4:	0601      	lsls	r1, r0, #24
 801aab6:	d501      	bpl.n	801aabc <_printf_i+0xec>
 801aab8:	681e      	ldr	r6, [r3, #0]
 801aaba:	e002      	b.n	801aac2 <_printf_i+0xf2>
 801aabc:	0646      	lsls	r6, r0, #25
 801aabe:	d5fb      	bpl.n	801aab8 <_printf_i+0xe8>
 801aac0:	881e      	ldrh	r6, [r3, #0]
 801aac2:	4854      	ldr	r0, [pc, #336]	; (801ac14 <_printf_i+0x244>)
 801aac4:	2f6f      	cmp	r7, #111	; 0x6f
 801aac6:	bf0c      	ite	eq
 801aac8:	2308      	moveq	r3, #8
 801aaca:	230a      	movne	r3, #10
 801aacc:	2100      	movs	r1, #0
 801aace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aad2:	6865      	ldr	r5, [r4, #4]
 801aad4:	60a5      	str	r5, [r4, #8]
 801aad6:	2d00      	cmp	r5, #0
 801aad8:	bfa2      	ittt	ge
 801aada:	6821      	ldrge	r1, [r4, #0]
 801aadc:	f021 0104 	bicge.w	r1, r1, #4
 801aae0:	6021      	strge	r1, [r4, #0]
 801aae2:	b90e      	cbnz	r6, 801aae8 <_printf_i+0x118>
 801aae4:	2d00      	cmp	r5, #0
 801aae6:	d04d      	beq.n	801ab84 <_printf_i+0x1b4>
 801aae8:	4615      	mov	r5, r2
 801aaea:	fbb6 f1f3 	udiv	r1, r6, r3
 801aaee:	fb03 6711 	mls	r7, r3, r1, r6
 801aaf2:	5dc7      	ldrb	r7, [r0, r7]
 801aaf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801aaf8:	4637      	mov	r7, r6
 801aafa:	42bb      	cmp	r3, r7
 801aafc:	460e      	mov	r6, r1
 801aafe:	d9f4      	bls.n	801aaea <_printf_i+0x11a>
 801ab00:	2b08      	cmp	r3, #8
 801ab02:	d10b      	bne.n	801ab1c <_printf_i+0x14c>
 801ab04:	6823      	ldr	r3, [r4, #0]
 801ab06:	07de      	lsls	r6, r3, #31
 801ab08:	d508      	bpl.n	801ab1c <_printf_i+0x14c>
 801ab0a:	6923      	ldr	r3, [r4, #16]
 801ab0c:	6861      	ldr	r1, [r4, #4]
 801ab0e:	4299      	cmp	r1, r3
 801ab10:	bfde      	ittt	le
 801ab12:	2330      	movle	r3, #48	; 0x30
 801ab14:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ab18:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ab1c:	1b52      	subs	r2, r2, r5
 801ab1e:	6122      	str	r2, [r4, #16]
 801ab20:	f8cd a000 	str.w	sl, [sp]
 801ab24:	464b      	mov	r3, r9
 801ab26:	aa03      	add	r2, sp, #12
 801ab28:	4621      	mov	r1, r4
 801ab2a:	4640      	mov	r0, r8
 801ab2c:	f7ff fee2 	bl	801a8f4 <_printf_common>
 801ab30:	3001      	adds	r0, #1
 801ab32:	d14c      	bne.n	801abce <_printf_i+0x1fe>
 801ab34:	f04f 30ff 	mov.w	r0, #4294967295
 801ab38:	b004      	add	sp, #16
 801ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab3e:	4835      	ldr	r0, [pc, #212]	; (801ac14 <_printf_i+0x244>)
 801ab40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ab44:	6829      	ldr	r1, [r5, #0]
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	f851 6b04 	ldr.w	r6, [r1], #4
 801ab4c:	6029      	str	r1, [r5, #0]
 801ab4e:	061d      	lsls	r5, r3, #24
 801ab50:	d514      	bpl.n	801ab7c <_printf_i+0x1ac>
 801ab52:	07df      	lsls	r7, r3, #31
 801ab54:	bf44      	itt	mi
 801ab56:	f043 0320 	orrmi.w	r3, r3, #32
 801ab5a:	6023      	strmi	r3, [r4, #0]
 801ab5c:	b91e      	cbnz	r6, 801ab66 <_printf_i+0x196>
 801ab5e:	6823      	ldr	r3, [r4, #0]
 801ab60:	f023 0320 	bic.w	r3, r3, #32
 801ab64:	6023      	str	r3, [r4, #0]
 801ab66:	2310      	movs	r3, #16
 801ab68:	e7b0      	b.n	801aacc <_printf_i+0xfc>
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	f043 0320 	orr.w	r3, r3, #32
 801ab70:	6023      	str	r3, [r4, #0]
 801ab72:	2378      	movs	r3, #120	; 0x78
 801ab74:	4828      	ldr	r0, [pc, #160]	; (801ac18 <_printf_i+0x248>)
 801ab76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ab7a:	e7e3      	b.n	801ab44 <_printf_i+0x174>
 801ab7c:	0659      	lsls	r1, r3, #25
 801ab7e:	bf48      	it	mi
 801ab80:	b2b6      	uxthmi	r6, r6
 801ab82:	e7e6      	b.n	801ab52 <_printf_i+0x182>
 801ab84:	4615      	mov	r5, r2
 801ab86:	e7bb      	b.n	801ab00 <_printf_i+0x130>
 801ab88:	682b      	ldr	r3, [r5, #0]
 801ab8a:	6826      	ldr	r6, [r4, #0]
 801ab8c:	6961      	ldr	r1, [r4, #20]
 801ab8e:	1d18      	adds	r0, r3, #4
 801ab90:	6028      	str	r0, [r5, #0]
 801ab92:	0635      	lsls	r5, r6, #24
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	d501      	bpl.n	801ab9c <_printf_i+0x1cc>
 801ab98:	6019      	str	r1, [r3, #0]
 801ab9a:	e002      	b.n	801aba2 <_printf_i+0x1d2>
 801ab9c:	0670      	lsls	r0, r6, #25
 801ab9e:	d5fb      	bpl.n	801ab98 <_printf_i+0x1c8>
 801aba0:	8019      	strh	r1, [r3, #0]
 801aba2:	2300      	movs	r3, #0
 801aba4:	6123      	str	r3, [r4, #16]
 801aba6:	4615      	mov	r5, r2
 801aba8:	e7ba      	b.n	801ab20 <_printf_i+0x150>
 801abaa:	682b      	ldr	r3, [r5, #0]
 801abac:	1d1a      	adds	r2, r3, #4
 801abae:	602a      	str	r2, [r5, #0]
 801abb0:	681d      	ldr	r5, [r3, #0]
 801abb2:	6862      	ldr	r2, [r4, #4]
 801abb4:	2100      	movs	r1, #0
 801abb6:	4628      	mov	r0, r5
 801abb8:	f7e5 faea 	bl	8000190 <memchr>
 801abbc:	b108      	cbz	r0, 801abc2 <_printf_i+0x1f2>
 801abbe:	1b40      	subs	r0, r0, r5
 801abc0:	6060      	str	r0, [r4, #4]
 801abc2:	6863      	ldr	r3, [r4, #4]
 801abc4:	6123      	str	r3, [r4, #16]
 801abc6:	2300      	movs	r3, #0
 801abc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abcc:	e7a8      	b.n	801ab20 <_printf_i+0x150>
 801abce:	6923      	ldr	r3, [r4, #16]
 801abd0:	462a      	mov	r2, r5
 801abd2:	4649      	mov	r1, r9
 801abd4:	4640      	mov	r0, r8
 801abd6:	47d0      	blx	sl
 801abd8:	3001      	adds	r0, #1
 801abda:	d0ab      	beq.n	801ab34 <_printf_i+0x164>
 801abdc:	6823      	ldr	r3, [r4, #0]
 801abde:	079b      	lsls	r3, r3, #30
 801abe0:	d413      	bmi.n	801ac0a <_printf_i+0x23a>
 801abe2:	68e0      	ldr	r0, [r4, #12]
 801abe4:	9b03      	ldr	r3, [sp, #12]
 801abe6:	4298      	cmp	r0, r3
 801abe8:	bfb8      	it	lt
 801abea:	4618      	movlt	r0, r3
 801abec:	e7a4      	b.n	801ab38 <_printf_i+0x168>
 801abee:	2301      	movs	r3, #1
 801abf0:	4632      	mov	r2, r6
 801abf2:	4649      	mov	r1, r9
 801abf4:	4640      	mov	r0, r8
 801abf6:	47d0      	blx	sl
 801abf8:	3001      	adds	r0, #1
 801abfa:	d09b      	beq.n	801ab34 <_printf_i+0x164>
 801abfc:	3501      	adds	r5, #1
 801abfe:	68e3      	ldr	r3, [r4, #12]
 801ac00:	9903      	ldr	r1, [sp, #12]
 801ac02:	1a5b      	subs	r3, r3, r1
 801ac04:	42ab      	cmp	r3, r5
 801ac06:	dcf2      	bgt.n	801abee <_printf_i+0x21e>
 801ac08:	e7eb      	b.n	801abe2 <_printf_i+0x212>
 801ac0a:	2500      	movs	r5, #0
 801ac0c:	f104 0619 	add.w	r6, r4, #25
 801ac10:	e7f5      	b.n	801abfe <_printf_i+0x22e>
 801ac12:	bf00      	nop
 801ac14:	0801baa9 	.word	0x0801baa9
 801ac18:	0801baba 	.word	0x0801baba

0801ac1c <memcpy>:
 801ac1c:	440a      	add	r2, r1
 801ac1e:	4291      	cmp	r1, r2
 801ac20:	f100 33ff 	add.w	r3, r0, #4294967295
 801ac24:	d100      	bne.n	801ac28 <memcpy+0xc>
 801ac26:	4770      	bx	lr
 801ac28:	b510      	push	{r4, lr}
 801ac2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ac32:	4291      	cmp	r1, r2
 801ac34:	d1f9      	bne.n	801ac2a <memcpy+0xe>
 801ac36:	bd10      	pop	{r4, pc}

0801ac38 <memmove>:
 801ac38:	4288      	cmp	r0, r1
 801ac3a:	b510      	push	{r4, lr}
 801ac3c:	eb01 0402 	add.w	r4, r1, r2
 801ac40:	d902      	bls.n	801ac48 <memmove+0x10>
 801ac42:	4284      	cmp	r4, r0
 801ac44:	4623      	mov	r3, r4
 801ac46:	d807      	bhi.n	801ac58 <memmove+0x20>
 801ac48:	1e43      	subs	r3, r0, #1
 801ac4a:	42a1      	cmp	r1, r4
 801ac4c:	d008      	beq.n	801ac60 <memmove+0x28>
 801ac4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac52:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac56:	e7f8      	b.n	801ac4a <memmove+0x12>
 801ac58:	4402      	add	r2, r0
 801ac5a:	4601      	mov	r1, r0
 801ac5c:	428a      	cmp	r2, r1
 801ac5e:	d100      	bne.n	801ac62 <memmove+0x2a>
 801ac60:	bd10      	pop	{r4, pc}
 801ac62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ac6a:	e7f7      	b.n	801ac5c <memmove+0x24>

0801ac6c <_free_r>:
 801ac6c:	b538      	push	{r3, r4, r5, lr}
 801ac6e:	4605      	mov	r5, r0
 801ac70:	2900      	cmp	r1, #0
 801ac72:	d041      	beq.n	801acf8 <_free_r+0x8c>
 801ac74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac78:	1f0c      	subs	r4, r1, #4
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	bfb8      	it	lt
 801ac7e:	18e4      	addlt	r4, r4, r3
 801ac80:	f000 f912 	bl	801aea8 <__malloc_lock>
 801ac84:	4a1d      	ldr	r2, [pc, #116]	; (801acfc <_free_r+0x90>)
 801ac86:	6813      	ldr	r3, [r2, #0]
 801ac88:	b933      	cbnz	r3, 801ac98 <_free_r+0x2c>
 801ac8a:	6063      	str	r3, [r4, #4]
 801ac8c:	6014      	str	r4, [r2, #0]
 801ac8e:	4628      	mov	r0, r5
 801ac90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac94:	f000 b90e 	b.w	801aeb4 <__malloc_unlock>
 801ac98:	42a3      	cmp	r3, r4
 801ac9a:	d908      	bls.n	801acae <_free_r+0x42>
 801ac9c:	6820      	ldr	r0, [r4, #0]
 801ac9e:	1821      	adds	r1, r4, r0
 801aca0:	428b      	cmp	r3, r1
 801aca2:	bf01      	itttt	eq
 801aca4:	6819      	ldreq	r1, [r3, #0]
 801aca6:	685b      	ldreq	r3, [r3, #4]
 801aca8:	1809      	addeq	r1, r1, r0
 801acaa:	6021      	streq	r1, [r4, #0]
 801acac:	e7ed      	b.n	801ac8a <_free_r+0x1e>
 801acae:	461a      	mov	r2, r3
 801acb0:	685b      	ldr	r3, [r3, #4]
 801acb2:	b10b      	cbz	r3, 801acb8 <_free_r+0x4c>
 801acb4:	42a3      	cmp	r3, r4
 801acb6:	d9fa      	bls.n	801acae <_free_r+0x42>
 801acb8:	6811      	ldr	r1, [r2, #0]
 801acba:	1850      	adds	r0, r2, r1
 801acbc:	42a0      	cmp	r0, r4
 801acbe:	d10b      	bne.n	801acd8 <_free_r+0x6c>
 801acc0:	6820      	ldr	r0, [r4, #0]
 801acc2:	4401      	add	r1, r0
 801acc4:	1850      	adds	r0, r2, r1
 801acc6:	4283      	cmp	r3, r0
 801acc8:	6011      	str	r1, [r2, #0]
 801acca:	d1e0      	bne.n	801ac8e <_free_r+0x22>
 801accc:	6818      	ldr	r0, [r3, #0]
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	6053      	str	r3, [r2, #4]
 801acd2:	4401      	add	r1, r0
 801acd4:	6011      	str	r1, [r2, #0]
 801acd6:	e7da      	b.n	801ac8e <_free_r+0x22>
 801acd8:	d902      	bls.n	801ace0 <_free_r+0x74>
 801acda:	230c      	movs	r3, #12
 801acdc:	602b      	str	r3, [r5, #0]
 801acde:	e7d6      	b.n	801ac8e <_free_r+0x22>
 801ace0:	6820      	ldr	r0, [r4, #0]
 801ace2:	1821      	adds	r1, r4, r0
 801ace4:	428b      	cmp	r3, r1
 801ace6:	bf04      	itt	eq
 801ace8:	6819      	ldreq	r1, [r3, #0]
 801acea:	685b      	ldreq	r3, [r3, #4]
 801acec:	6063      	str	r3, [r4, #4]
 801acee:	bf04      	itt	eq
 801acf0:	1809      	addeq	r1, r1, r0
 801acf2:	6021      	streq	r1, [r4, #0]
 801acf4:	6054      	str	r4, [r2, #4]
 801acf6:	e7ca      	b.n	801ac8e <_free_r+0x22>
 801acf8:	bd38      	pop	{r3, r4, r5, pc}
 801acfa:	bf00      	nop
 801acfc:	200022d0 	.word	0x200022d0

0801ad00 <sbrk_aligned>:
 801ad00:	b570      	push	{r4, r5, r6, lr}
 801ad02:	4e0e      	ldr	r6, [pc, #56]	; (801ad3c <sbrk_aligned+0x3c>)
 801ad04:	460c      	mov	r4, r1
 801ad06:	6831      	ldr	r1, [r6, #0]
 801ad08:	4605      	mov	r5, r0
 801ad0a:	b911      	cbnz	r1, 801ad12 <sbrk_aligned+0x12>
 801ad0c:	f000 f8bc 	bl	801ae88 <_sbrk_r>
 801ad10:	6030      	str	r0, [r6, #0]
 801ad12:	4621      	mov	r1, r4
 801ad14:	4628      	mov	r0, r5
 801ad16:	f000 f8b7 	bl	801ae88 <_sbrk_r>
 801ad1a:	1c43      	adds	r3, r0, #1
 801ad1c:	d00a      	beq.n	801ad34 <sbrk_aligned+0x34>
 801ad1e:	1cc4      	adds	r4, r0, #3
 801ad20:	f024 0403 	bic.w	r4, r4, #3
 801ad24:	42a0      	cmp	r0, r4
 801ad26:	d007      	beq.n	801ad38 <sbrk_aligned+0x38>
 801ad28:	1a21      	subs	r1, r4, r0
 801ad2a:	4628      	mov	r0, r5
 801ad2c:	f000 f8ac 	bl	801ae88 <_sbrk_r>
 801ad30:	3001      	adds	r0, #1
 801ad32:	d101      	bne.n	801ad38 <sbrk_aligned+0x38>
 801ad34:	f04f 34ff 	mov.w	r4, #4294967295
 801ad38:	4620      	mov	r0, r4
 801ad3a:	bd70      	pop	{r4, r5, r6, pc}
 801ad3c:	200022d4 	.word	0x200022d4

0801ad40 <_malloc_r>:
 801ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad44:	1ccd      	adds	r5, r1, #3
 801ad46:	f025 0503 	bic.w	r5, r5, #3
 801ad4a:	3508      	adds	r5, #8
 801ad4c:	2d0c      	cmp	r5, #12
 801ad4e:	bf38      	it	cc
 801ad50:	250c      	movcc	r5, #12
 801ad52:	2d00      	cmp	r5, #0
 801ad54:	4607      	mov	r7, r0
 801ad56:	db01      	blt.n	801ad5c <_malloc_r+0x1c>
 801ad58:	42a9      	cmp	r1, r5
 801ad5a:	d905      	bls.n	801ad68 <_malloc_r+0x28>
 801ad5c:	230c      	movs	r3, #12
 801ad5e:	603b      	str	r3, [r7, #0]
 801ad60:	2600      	movs	r6, #0
 801ad62:	4630      	mov	r0, r6
 801ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad68:	4e2e      	ldr	r6, [pc, #184]	; (801ae24 <_malloc_r+0xe4>)
 801ad6a:	f000 f89d 	bl	801aea8 <__malloc_lock>
 801ad6e:	6833      	ldr	r3, [r6, #0]
 801ad70:	461c      	mov	r4, r3
 801ad72:	bb34      	cbnz	r4, 801adc2 <_malloc_r+0x82>
 801ad74:	4629      	mov	r1, r5
 801ad76:	4638      	mov	r0, r7
 801ad78:	f7ff ffc2 	bl	801ad00 <sbrk_aligned>
 801ad7c:	1c43      	adds	r3, r0, #1
 801ad7e:	4604      	mov	r4, r0
 801ad80:	d14d      	bne.n	801ae1e <_malloc_r+0xde>
 801ad82:	6834      	ldr	r4, [r6, #0]
 801ad84:	4626      	mov	r6, r4
 801ad86:	2e00      	cmp	r6, #0
 801ad88:	d140      	bne.n	801ae0c <_malloc_r+0xcc>
 801ad8a:	6823      	ldr	r3, [r4, #0]
 801ad8c:	4631      	mov	r1, r6
 801ad8e:	4638      	mov	r0, r7
 801ad90:	eb04 0803 	add.w	r8, r4, r3
 801ad94:	f000 f878 	bl	801ae88 <_sbrk_r>
 801ad98:	4580      	cmp	r8, r0
 801ad9a:	d13a      	bne.n	801ae12 <_malloc_r+0xd2>
 801ad9c:	6821      	ldr	r1, [r4, #0]
 801ad9e:	3503      	adds	r5, #3
 801ada0:	1a6d      	subs	r5, r5, r1
 801ada2:	f025 0503 	bic.w	r5, r5, #3
 801ada6:	3508      	adds	r5, #8
 801ada8:	2d0c      	cmp	r5, #12
 801adaa:	bf38      	it	cc
 801adac:	250c      	movcc	r5, #12
 801adae:	4629      	mov	r1, r5
 801adb0:	4638      	mov	r0, r7
 801adb2:	f7ff ffa5 	bl	801ad00 <sbrk_aligned>
 801adb6:	3001      	adds	r0, #1
 801adb8:	d02b      	beq.n	801ae12 <_malloc_r+0xd2>
 801adba:	6823      	ldr	r3, [r4, #0]
 801adbc:	442b      	add	r3, r5
 801adbe:	6023      	str	r3, [r4, #0]
 801adc0:	e00e      	b.n	801ade0 <_malloc_r+0xa0>
 801adc2:	6822      	ldr	r2, [r4, #0]
 801adc4:	1b52      	subs	r2, r2, r5
 801adc6:	d41e      	bmi.n	801ae06 <_malloc_r+0xc6>
 801adc8:	2a0b      	cmp	r2, #11
 801adca:	d916      	bls.n	801adfa <_malloc_r+0xba>
 801adcc:	1961      	adds	r1, r4, r5
 801adce:	42a3      	cmp	r3, r4
 801add0:	6025      	str	r5, [r4, #0]
 801add2:	bf18      	it	ne
 801add4:	6059      	strne	r1, [r3, #4]
 801add6:	6863      	ldr	r3, [r4, #4]
 801add8:	bf08      	it	eq
 801adda:	6031      	streq	r1, [r6, #0]
 801addc:	5162      	str	r2, [r4, r5]
 801adde:	604b      	str	r3, [r1, #4]
 801ade0:	4638      	mov	r0, r7
 801ade2:	f104 060b 	add.w	r6, r4, #11
 801ade6:	f000 f865 	bl	801aeb4 <__malloc_unlock>
 801adea:	f026 0607 	bic.w	r6, r6, #7
 801adee:	1d23      	adds	r3, r4, #4
 801adf0:	1af2      	subs	r2, r6, r3
 801adf2:	d0b6      	beq.n	801ad62 <_malloc_r+0x22>
 801adf4:	1b9b      	subs	r3, r3, r6
 801adf6:	50a3      	str	r3, [r4, r2]
 801adf8:	e7b3      	b.n	801ad62 <_malloc_r+0x22>
 801adfa:	6862      	ldr	r2, [r4, #4]
 801adfc:	42a3      	cmp	r3, r4
 801adfe:	bf0c      	ite	eq
 801ae00:	6032      	streq	r2, [r6, #0]
 801ae02:	605a      	strne	r2, [r3, #4]
 801ae04:	e7ec      	b.n	801ade0 <_malloc_r+0xa0>
 801ae06:	4623      	mov	r3, r4
 801ae08:	6864      	ldr	r4, [r4, #4]
 801ae0a:	e7b2      	b.n	801ad72 <_malloc_r+0x32>
 801ae0c:	4634      	mov	r4, r6
 801ae0e:	6876      	ldr	r6, [r6, #4]
 801ae10:	e7b9      	b.n	801ad86 <_malloc_r+0x46>
 801ae12:	230c      	movs	r3, #12
 801ae14:	603b      	str	r3, [r7, #0]
 801ae16:	4638      	mov	r0, r7
 801ae18:	f000 f84c 	bl	801aeb4 <__malloc_unlock>
 801ae1c:	e7a1      	b.n	801ad62 <_malloc_r+0x22>
 801ae1e:	6025      	str	r5, [r4, #0]
 801ae20:	e7de      	b.n	801ade0 <_malloc_r+0xa0>
 801ae22:	bf00      	nop
 801ae24:	200022d0 	.word	0x200022d0

0801ae28 <_realloc_r>:
 801ae28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae2c:	4680      	mov	r8, r0
 801ae2e:	4614      	mov	r4, r2
 801ae30:	460e      	mov	r6, r1
 801ae32:	b921      	cbnz	r1, 801ae3e <_realloc_r+0x16>
 801ae34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae38:	4611      	mov	r1, r2
 801ae3a:	f7ff bf81 	b.w	801ad40 <_malloc_r>
 801ae3e:	b92a      	cbnz	r2, 801ae4c <_realloc_r+0x24>
 801ae40:	f7ff ff14 	bl	801ac6c <_free_r>
 801ae44:	4625      	mov	r5, r4
 801ae46:	4628      	mov	r0, r5
 801ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae4c:	f000 f838 	bl	801aec0 <_malloc_usable_size_r>
 801ae50:	4284      	cmp	r4, r0
 801ae52:	4607      	mov	r7, r0
 801ae54:	d802      	bhi.n	801ae5c <_realloc_r+0x34>
 801ae56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ae5a:	d812      	bhi.n	801ae82 <_realloc_r+0x5a>
 801ae5c:	4621      	mov	r1, r4
 801ae5e:	4640      	mov	r0, r8
 801ae60:	f7ff ff6e 	bl	801ad40 <_malloc_r>
 801ae64:	4605      	mov	r5, r0
 801ae66:	2800      	cmp	r0, #0
 801ae68:	d0ed      	beq.n	801ae46 <_realloc_r+0x1e>
 801ae6a:	42bc      	cmp	r4, r7
 801ae6c:	4622      	mov	r2, r4
 801ae6e:	4631      	mov	r1, r6
 801ae70:	bf28      	it	cs
 801ae72:	463a      	movcs	r2, r7
 801ae74:	f7ff fed2 	bl	801ac1c <memcpy>
 801ae78:	4631      	mov	r1, r6
 801ae7a:	4640      	mov	r0, r8
 801ae7c:	f7ff fef6 	bl	801ac6c <_free_r>
 801ae80:	e7e1      	b.n	801ae46 <_realloc_r+0x1e>
 801ae82:	4635      	mov	r5, r6
 801ae84:	e7df      	b.n	801ae46 <_realloc_r+0x1e>
	...

0801ae88 <_sbrk_r>:
 801ae88:	b538      	push	{r3, r4, r5, lr}
 801ae8a:	4d06      	ldr	r5, [pc, #24]	; (801aea4 <_sbrk_r+0x1c>)
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	4604      	mov	r4, r0
 801ae90:	4608      	mov	r0, r1
 801ae92:	602b      	str	r3, [r5, #0]
 801ae94:	f000 f8a0 	bl	801afd8 <_sbrk>
 801ae98:	1c43      	adds	r3, r0, #1
 801ae9a:	d102      	bne.n	801aea2 <_sbrk_r+0x1a>
 801ae9c:	682b      	ldr	r3, [r5, #0]
 801ae9e:	b103      	cbz	r3, 801aea2 <_sbrk_r+0x1a>
 801aea0:	6023      	str	r3, [r4, #0]
 801aea2:	bd38      	pop	{r3, r4, r5, pc}
 801aea4:	200022d8 	.word	0x200022d8

0801aea8 <__malloc_lock>:
 801aea8:	4801      	ldr	r0, [pc, #4]	; (801aeb0 <__malloc_lock+0x8>)
 801aeaa:	f000 b811 	b.w	801aed0 <__retarget_lock_acquire_recursive>
 801aeae:	bf00      	nop
 801aeb0:	200022dc 	.word	0x200022dc

0801aeb4 <__malloc_unlock>:
 801aeb4:	4801      	ldr	r0, [pc, #4]	; (801aebc <__malloc_unlock+0x8>)
 801aeb6:	f000 b80c 	b.w	801aed2 <__retarget_lock_release_recursive>
 801aeba:	bf00      	nop
 801aebc:	200022dc 	.word	0x200022dc

0801aec0 <_malloc_usable_size_r>:
 801aec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aec4:	1f18      	subs	r0, r3, #4
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	bfbc      	itt	lt
 801aeca:	580b      	ldrlt	r3, [r1, r0]
 801aecc:	18c0      	addlt	r0, r0, r3
 801aece:	4770      	bx	lr

0801aed0 <__retarget_lock_acquire_recursive>:
 801aed0:	4770      	bx	lr

0801aed2 <__retarget_lock_release_recursive>:
 801aed2:	4770      	bx	lr
 801aed4:	0000      	movs	r0, r0
	...

0801aed8 <floor>:
 801aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aedc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801aee0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801aee4:	2e13      	cmp	r6, #19
 801aee6:	4602      	mov	r2, r0
 801aee8:	460b      	mov	r3, r1
 801aeea:	4607      	mov	r7, r0
 801aeec:	460c      	mov	r4, r1
 801aeee:	4605      	mov	r5, r0
 801aef0:	dc33      	bgt.n	801af5a <floor+0x82>
 801aef2:	2e00      	cmp	r6, #0
 801aef4:	da14      	bge.n	801af20 <floor+0x48>
 801aef6:	a334      	add	r3, pc, #208	; (adr r3, 801afc8 <floor+0xf0>)
 801aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aefc:	f7e5 f99e 	bl	800023c <__adddf3>
 801af00:	2200      	movs	r2, #0
 801af02:	2300      	movs	r3, #0
 801af04:	f7e5 fbce 	bl	80006a4 <__aeabi_dcmpgt>
 801af08:	b138      	cbz	r0, 801af1a <floor+0x42>
 801af0a:	2c00      	cmp	r4, #0
 801af0c:	da58      	bge.n	801afc0 <floor+0xe8>
 801af0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801af12:	431d      	orrs	r5, r3
 801af14:	d001      	beq.n	801af1a <floor+0x42>
 801af16:	4c2e      	ldr	r4, [pc, #184]	; (801afd0 <floor+0xf8>)
 801af18:	2500      	movs	r5, #0
 801af1a:	4623      	mov	r3, r4
 801af1c:	462f      	mov	r7, r5
 801af1e:	e025      	b.n	801af6c <floor+0x94>
 801af20:	4a2c      	ldr	r2, [pc, #176]	; (801afd4 <floor+0xfc>)
 801af22:	fa42 f806 	asr.w	r8, r2, r6
 801af26:	ea01 0208 	and.w	r2, r1, r8
 801af2a:	4302      	orrs	r2, r0
 801af2c:	d01e      	beq.n	801af6c <floor+0x94>
 801af2e:	a326      	add	r3, pc, #152	; (adr r3, 801afc8 <floor+0xf0>)
 801af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af34:	f7e5 f982 	bl	800023c <__adddf3>
 801af38:	2200      	movs	r2, #0
 801af3a:	2300      	movs	r3, #0
 801af3c:	f7e5 fbb2 	bl	80006a4 <__aeabi_dcmpgt>
 801af40:	2800      	cmp	r0, #0
 801af42:	d0ea      	beq.n	801af1a <floor+0x42>
 801af44:	2c00      	cmp	r4, #0
 801af46:	bfbe      	ittt	lt
 801af48:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801af4c:	fa43 f606 	asrlt.w	r6, r3, r6
 801af50:	19a4      	addlt	r4, r4, r6
 801af52:	ea24 0408 	bic.w	r4, r4, r8
 801af56:	2500      	movs	r5, #0
 801af58:	e7df      	b.n	801af1a <floor+0x42>
 801af5a:	2e33      	cmp	r6, #51	; 0x33
 801af5c:	dd0a      	ble.n	801af74 <floor+0x9c>
 801af5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801af62:	d103      	bne.n	801af6c <floor+0x94>
 801af64:	f7e5 f96a 	bl	800023c <__adddf3>
 801af68:	4607      	mov	r7, r0
 801af6a:	460b      	mov	r3, r1
 801af6c:	4638      	mov	r0, r7
 801af6e:	4619      	mov	r1, r3
 801af70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af74:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801af78:	f04f 32ff 	mov.w	r2, #4294967295
 801af7c:	fa22 f808 	lsr.w	r8, r2, r8
 801af80:	ea18 0f00 	tst.w	r8, r0
 801af84:	d0f2      	beq.n	801af6c <floor+0x94>
 801af86:	a310      	add	r3, pc, #64	; (adr r3, 801afc8 <floor+0xf0>)
 801af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af8c:	f7e5 f956 	bl	800023c <__adddf3>
 801af90:	2200      	movs	r2, #0
 801af92:	2300      	movs	r3, #0
 801af94:	f7e5 fb86 	bl	80006a4 <__aeabi_dcmpgt>
 801af98:	2800      	cmp	r0, #0
 801af9a:	d0be      	beq.n	801af1a <floor+0x42>
 801af9c:	2c00      	cmp	r4, #0
 801af9e:	da02      	bge.n	801afa6 <floor+0xce>
 801afa0:	2e14      	cmp	r6, #20
 801afa2:	d103      	bne.n	801afac <floor+0xd4>
 801afa4:	3401      	adds	r4, #1
 801afa6:	ea25 0508 	bic.w	r5, r5, r8
 801afaa:	e7b6      	b.n	801af1a <floor+0x42>
 801afac:	2301      	movs	r3, #1
 801afae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801afb2:	fa03 f606 	lsl.w	r6, r3, r6
 801afb6:	4435      	add	r5, r6
 801afb8:	42bd      	cmp	r5, r7
 801afba:	bf38      	it	cc
 801afbc:	18e4      	addcc	r4, r4, r3
 801afbe:	e7f2      	b.n	801afa6 <floor+0xce>
 801afc0:	2500      	movs	r5, #0
 801afc2:	462c      	mov	r4, r5
 801afc4:	e7a9      	b.n	801af1a <floor+0x42>
 801afc6:	bf00      	nop
 801afc8:	8800759c 	.word	0x8800759c
 801afcc:	7e37e43c 	.word	0x7e37e43c
 801afd0:	bff00000 	.word	0xbff00000
 801afd4:	000fffff 	.word	0x000fffff

0801afd8 <_sbrk>:
 801afd8:	4a04      	ldr	r2, [pc, #16]	; (801afec <_sbrk+0x14>)
 801afda:	6811      	ldr	r1, [r2, #0]
 801afdc:	4603      	mov	r3, r0
 801afde:	b909      	cbnz	r1, 801afe4 <_sbrk+0xc>
 801afe0:	4903      	ldr	r1, [pc, #12]	; (801aff0 <_sbrk+0x18>)
 801afe2:	6011      	str	r1, [r2, #0]
 801afe4:	6810      	ldr	r0, [r2, #0]
 801afe6:	4403      	add	r3, r0
 801afe8:	6013      	str	r3, [r2, #0]
 801afea:	4770      	bx	lr
 801afec:	200022e0 	.word	0x200022e0
 801aff0:	200022e8 	.word	0x200022e8

0801aff4 <_init>:
 801aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aff6:	bf00      	nop
 801aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801affa:	bc08      	pop	{r3}
 801affc:	469e      	mov	lr, r3
 801affe:	4770      	bx	lr

0801b000 <_fini>:
 801b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b002:	bf00      	nop
 801b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b006:	bc08      	pop	{r3}
 801b008:	469e      	mov	lr, r3
 801b00a:	4770      	bx	lr
