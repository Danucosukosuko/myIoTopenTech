
ttnmad_noise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001af94  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0801b0d4  0801b0d4  0002b0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801bb94  0801bb94  0002bb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801bc54  0801bc54  000301b0  2**0
                  CONTENTS
  5 .ARM          00000008  0801bc54  0801bc54  0002bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801bc5c  0801bc5c  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801bc5c  0801bc5c  0002bc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801bc60  0801bc60  0002bc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001b0  20000000  0801bc64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002134  200001b0  0801be14  000301b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022e4  0801be14  000322e4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004072c  00000000  00000000  000301da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009b26  00000000  00000000  00070906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003148  00000000  00000000  0007a430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d70  00000000  00000000  0007d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027360  00000000  00000000  000802e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003993d  00000000  00000000  000a7648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8bde  00000000  00000000  000e0f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a9b63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ce7c  00000000  00000000  001a9bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b0 	.word	0x200001b0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b0bc 	.word	0x0801b0bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b4 	.word	0x200001b4
 800017c:	0801b0bc 	.word	0x0801b0bc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_f2iz>:
 8000924:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000928:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800092c:	d30f      	bcc.n	800094e <__aeabi_f2iz+0x2a>
 800092e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000932:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000936:	d90d      	bls.n	8000954 <__aeabi_f2iz+0x30>
 8000938:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800093c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000940:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000944:	fa23 f002 	lsr.w	r0, r3, r2
 8000948:	bf18      	it	ne
 800094a:	4240      	negne	r0, r0
 800094c:	4770      	bx	lr
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	4770      	bx	lr
 8000954:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000958:	d101      	bne.n	800095e <__aeabi_f2iz+0x3a>
 800095a:	0242      	lsls	r2, r0, #9
 800095c:	d105      	bne.n	800096a <__aeabi_f2iz+0x46>
 800095e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000962:	bf08      	it	eq
 8000964:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000968:	4770      	bx	lr
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	4770      	bx	lr

08000970 <__aeabi_uldivmod>:
 8000970:	b953      	cbnz	r3, 8000988 <__aeabi_uldivmod+0x18>
 8000972:	b94a      	cbnz	r2, 8000988 <__aeabi_uldivmod+0x18>
 8000974:	2900      	cmp	r1, #0
 8000976:	bf08      	it	eq
 8000978:	2800      	cmpeq	r0, #0
 800097a:	bf1c      	itt	ne
 800097c:	f04f 31ff 	movne.w	r1, #4294967295
 8000980:	f04f 30ff 	movne.w	r0, #4294967295
 8000984:	f000 b974 	b.w	8000c70 <__aeabi_idiv0>
 8000988:	f1ad 0c08 	sub.w	ip, sp, #8
 800098c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000990:	f000 f806 	bl	80009a0 <__udivmoddi4>
 8000994:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800099c:	b004      	add	sp, #16
 800099e:	4770      	bx	lr

080009a0 <__udivmoddi4>:
 80009a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a4:	9e08      	ldr	r6, [sp, #32]
 80009a6:	460d      	mov	r5, r1
 80009a8:	4604      	mov	r4, r0
 80009aa:	4688      	mov	r8, r1
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d14d      	bne.n	8000a4c <__udivmoddi4+0xac>
 80009b0:	428a      	cmp	r2, r1
 80009b2:	4694      	mov	ip, r2
 80009b4:	d968      	bls.n	8000a88 <__udivmoddi4+0xe8>
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	b152      	cbz	r2, 80009d2 <__udivmoddi4+0x32>
 80009bc:	fa01 f302 	lsl.w	r3, r1, r2
 80009c0:	f1c2 0120 	rsb	r1, r2, #32
 80009c4:	fa20 f101 	lsr.w	r1, r0, r1
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	ea41 0803 	orr.w	r8, r1, r3
 80009d0:	4094      	lsls	r4, r2
 80009d2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80009d6:	0c21      	lsrs	r1, r4, #16
 80009d8:	fbb8 fef5 	udiv	lr, r8, r5
 80009dc:	fa1f f78c 	uxth.w	r7, ip
 80009e0:	fb05 831e 	mls	r3, r5, lr, r8
 80009e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009e8:	fb0e f107 	mul.w	r1, lr, r7
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d90b      	bls.n	8000a08 <__udivmoddi4+0x68>
 80009f0:	eb1c 0303 	adds.w	r3, ip, r3
 80009f4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80009f8:	f080 811e 	bcs.w	8000c38 <__udivmoddi4+0x298>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	f240 811b 	bls.w	8000c38 <__udivmoddi4+0x298>
 8000a02:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000a10:	fb05 3310 	mls	r3, r5, r0, r3
 8000a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a18:	fb00 f707 	mul.w	r7, r0, r7
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x96>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a28:	f080 8108 	bcs.w	8000c3c <__udivmoddi4+0x29c>
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	f240 8105 	bls.w	8000c3c <__udivmoddi4+0x29c>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	1be4      	subs	r4, r4, r7
 8000a38:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	b11e      	cbz	r6, 8000a48 <__udivmoddi4+0xa8>
 8000a40:	40d4      	lsrs	r4, r2
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c6 4300 	strd	r4, r3, [r6]
 8000a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0xc2>
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	f000 80ee 	beq.w	8000c32 <__udivmoddi4+0x292>
 8000a56:	2100      	movs	r1, #0
 8000a58:	e9c6 0500 	strd	r0, r5, [r6]
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a62:	fab3 f183 	clz	r1, r3
 8000a66:	2900      	cmp	r1, #0
 8000a68:	d14a      	bne.n	8000b00 <__udivmoddi4+0x160>
 8000a6a:	42ab      	cmp	r3, r5
 8000a6c:	d302      	bcc.n	8000a74 <__udivmoddi4+0xd4>
 8000a6e:	4282      	cmp	r2, r0
 8000a70:	f200 80f9 	bhi.w	8000c66 <__udivmoddi4+0x2c6>
 8000a74:	1a84      	subs	r4, r0, r2
 8000a76:	eb65 0303 	sbc.w	r3, r5, r3
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d0e2      	beq.n	8000a48 <__udivmoddi4+0xa8>
 8000a82:	e9c6 4800 	strd	r4, r8, [r6]
 8000a86:	e7df      	b.n	8000a48 <__udivmoddi4+0xa8>
 8000a88:	b902      	cbnz	r2, 8000a8c <__udivmoddi4+0xec>
 8000a8a:	deff      	udf	#255	; 0xff
 8000a8c:	fab2 f282 	clz	r2, r2
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	f040 8091 	bne.w	8000bb8 <__udivmoddi4+0x218>
 8000a96:	eba1 050c 	sub.w	r5, r1, ip
 8000a9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9e:	fa1f fe8c 	uxth.w	lr, ip
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000aa8:	fb07 5013 	mls	r0, r7, r3, r5
 8000aac:	0c25      	lsrs	r5, r4, #16
 8000aae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ab2:	fb0e f003 	mul.w	r0, lr, r3
 8000ab6:	42a8      	cmp	r0, r5
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x12c>
 8000aba:	eb1c 0505 	adds.w	r5, ip, r5
 8000abe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac2:	d202      	bcs.n	8000aca <__udivmoddi4+0x12a>
 8000ac4:	42a8      	cmp	r0, r5
 8000ac6:	f200 80cb 	bhi.w	8000c60 <__udivmoddi4+0x2c0>
 8000aca:	4643      	mov	r3, r8
 8000acc:	1a2d      	subs	r5, r5, r0
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ad4:	fb07 5510 	mls	r5, r7, r0, r5
 8000ad8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000adc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x156>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000aec:	d202      	bcs.n	8000af4 <__udivmoddi4+0x154>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	f200 80bb 	bhi.w	8000c6a <__udivmoddi4+0x2ca>
 8000af4:	4628      	mov	r0, r5
 8000af6:	eba4 040e 	sub.w	r4, r4, lr
 8000afa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000afe:	e79e      	b.n	8000a3e <__udivmoddi4+0x9e>
 8000b00:	f1c1 0720 	rsb	r7, r1, #32
 8000b04:	408b      	lsls	r3, r1
 8000b06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b12:	fa05 f301 	lsl.w	r3, r5, r1
 8000b16:	431c      	orrs	r4, r3
 8000b18:	40fd      	lsrs	r5, r7
 8000b1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b1e:	fa00 f301 	lsl.w	r3, r0, r1
 8000b22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b26:	0c20      	lsrs	r0, r4, #16
 8000b28:	fa1f fe8c 	uxth.w	lr, ip
 8000b2c:	fb09 5518 	mls	r5, r9, r8, r5
 8000b30:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000b34:	fb08 f00e 	mul.w	r0, r8, lr
 8000b38:	42a8      	cmp	r0, r5
 8000b3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b3e:	d90b      	bls.n	8000b58 <__udivmoddi4+0x1b8>
 8000b40:	eb1c 0505 	adds.w	r5, ip, r5
 8000b44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b48:	f080 8088 	bcs.w	8000c5c <__udivmoddi4+0x2bc>
 8000b4c:	42a8      	cmp	r0, r5
 8000b4e:	f240 8085 	bls.w	8000c5c <__udivmoddi4+0x2bc>
 8000b52:	f1a8 0802 	sub.w	r8, r8, #2
 8000b56:	4465      	add	r5, ip
 8000b58:	1a2d      	subs	r5, r5, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000b60:	fb09 5510 	mls	r5, r9, r0, r5
 8000b64:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000b68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b6c:	45ae      	cmp	lr, r5
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x1e2>
 8000b70:	eb1c 0505 	adds.w	r5, ip, r5
 8000b74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b78:	d26c      	bcs.n	8000c54 <__udivmoddi4+0x2b4>
 8000b7a:	45ae      	cmp	lr, r5
 8000b7c:	d96a      	bls.n	8000c54 <__udivmoddi4+0x2b4>
 8000b7e:	3802      	subs	r0, #2
 8000b80:	4465      	add	r5, ip
 8000b82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b86:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8a:	eba5 050e 	sub.w	r5, r5, lr
 8000b8e:	42a5      	cmp	r5, r4
 8000b90:	46c8      	mov	r8, r9
 8000b92:	46a6      	mov	lr, r4
 8000b94:	d356      	bcc.n	8000c44 <__udivmoddi4+0x2a4>
 8000b96:	d053      	beq.n	8000c40 <__udivmoddi4+0x2a0>
 8000b98:	b15e      	cbz	r6, 8000bb2 <__udivmoddi4+0x212>
 8000b9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000b9e:	eb65 050e 	sbc.w	r5, r5, lr
 8000ba2:	fa05 f707 	lsl.w	r7, r5, r7
 8000ba6:	fa22 f301 	lsr.w	r3, r2, r1
 8000baa:	40cd      	lsrs	r5, r1
 8000bac:	431f      	orrs	r7, r3
 8000bae:	e9c6 7500 	strd	r7, r5, [r6]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	f1c2 0320 	rsb	r3, r2, #32
 8000bbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	fa25 f303 	lsr.w	r3, r5, r3
 8000bc8:	4095      	lsls	r5, r2
 8000bca:	430d      	orrs	r5, r1
 8000bcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd0:	fa1f fe8c 	uxth.w	lr, ip
 8000bd4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000bd8:	fb07 3011 	mls	r0, r7, r1, r3
 8000bdc:	0c2b      	lsrs	r3, r5, #16
 8000bde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000be2:	fb01 f00e 	mul.w	r0, r1, lr
 8000be6:	4298      	cmp	r0, r3
 8000be8:	fa04 f402 	lsl.w	r4, r4, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x260>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000bf6:	d22f      	bcs.n	8000c58 <__udivmoddi4+0x2b8>
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	d92d      	bls.n	8000c58 <__udivmoddi4+0x2b8>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	b2ad      	uxth	r5, r5
 8000c04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c08:	fb07 3310 	mls	r3, r7, r0, r3
 8000c0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c10:	fb00 f30e 	mul.w	r3, r0, lr
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x28a>
 8000c18:	eb1c 0505 	adds.w	r5, ip, r5
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c20:	d216      	bcs.n	8000c50 <__udivmoddi4+0x2b0>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d914      	bls.n	8000c50 <__udivmoddi4+0x2b0>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4465      	add	r5, ip
 8000c2a:	1aed      	subs	r5, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e738      	b.n	8000aa4 <__udivmoddi4+0x104>
 8000c32:	4631      	mov	r1, r6
 8000c34:	4630      	mov	r0, r6
 8000c36:	e707      	b.n	8000a48 <__udivmoddi4+0xa8>
 8000c38:	4686      	mov	lr, r0
 8000c3a:	e6e5      	b.n	8000a08 <__udivmoddi4+0x68>
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	e6fa      	b.n	8000a36 <__udivmoddi4+0x96>
 8000c40:	454b      	cmp	r3, r9
 8000c42:	d2a9      	bcs.n	8000b98 <__udivmoddi4+0x1f8>
 8000c44:	ebb9 0802 	subs.w	r8, r9, r2
 8000c48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	e7a3      	b.n	8000b98 <__udivmoddi4+0x1f8>
 8000c50:	4640      	mov	r0, r8
 8000c52:	e7ea      	b.n	8000c2a <__udivmoddi4+0x28a>
 8000c54:	4620      	mov	r0, r4
 8000c56:	e794      	b.n	8000b82 <__udivmoddi4+0x1e2>
 8000c58:	4641      	mov	r1, r8
 8000c5a:	e7d1      	b.n	8000c00 <__udivmoddi4+0x260>
 8000c5c:	46d0      	mov	r8, sl
 8000c5e:	e77b      	b.n	8000b58 <__udivmoddi4+0x1b8>
 8000c60:	3b02      	subs	r3, #2
 8000c62:	4465      	add	r5, ip
 8000c64:	e732      	b.n	8000acc <__udivmoddi4+0x12c>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e709      	b.n	8000a7e <__udivmoddi4+0xde>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	e742      	b.n	8000af6 <__udivmoddi4+0x156>

08000c70 <__aeabi_idiv0>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cba:	4013      	ands	r3, r2
 8000cbc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <MX_ADC_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cd8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_ADC_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_ADC_Init+0x94>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_ADC_Init+0x94>)
 8000d4a:	f001 fe67 	bl	8002a1c <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000d54:	f000 fc1e 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001cc 	.word	0x200001cc
 8000d60:	40012400 	.word	0x40012400

08000d64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <HAL_ADC_MspInit+0x24>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d103      	bne.n	8000d7e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d7a:	f7ff ff7b 	bl	8000c74 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40012400 	.word	0x40012400

08000d8c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_ADC_MspDeInit+0x24>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d103      	bne.n	8000da6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000d9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000da2:	f7ff ff7f 	bl	8000ca4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40012400 	.word	0x40012400

08000db4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <SYS_InitMeasurement+0x14>)
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <SYS_InitMeasurement+0x18>)
 8000dbc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200001cc 	.word	0x200001cc
 8000dcc:	40012400 	.word	0x40012400

08000dd0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000dde:	f000 f869 	bl	8000eb4 <SYS_GetBatteryLevel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000de6:	482d      	ldr	r0, [pc, #180]	; (8000e9c <SYS_GetTemperatureLevel+0xcc>)
 8000de8:	f000 f898 	bl	8000f1c <ADC_ReadChannels>
 8000dec:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <SYS_GetTemperatureLevel+0xd0>)
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d026      	beq.n	8000e48 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <SYS_GetTemperatureLevel+0xd0>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d01c      	beq.n	8000e40 <SYS_GetTemperatureLevel+0x70>
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <SYS_GetTemperatureLevel+0xd8>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2264      	movs	r2, #100	; 0x64
 8000e22:	fb03 f202 	mul.w	r2, r3, r2
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <SYS_GetTemperatureLevel+0xd0>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <SYS_GetTemperatureLevel+0xd4>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	1acb      	subs	r3, r1, r3
 8000e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	331e      	adds	r3, #30
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	e001      	b.n	8000e44 <SYS_GetTemperatureLevel+0x74>
 8000e40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e44:	803b      	strh	r3, [r7, #0]
 8000e46:	e01d      	b.n	8000e84 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	fb03 f202 	mul.w	r2, r3, r2
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <SYS_GetTemperatureLevel+0xdc>)
 8000e52:	fba3 1302 	umull	r1, r3, r3, r2
 8000e56:	1ad2      	subs	r2, r2, r3
 8000e58:	0852      	lsrs	r2, r2, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	0adb      	lsrs	r3, r3, #11
 8000e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000e6a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <SYS_GetTemperatureLevel+0xe0>)
 8000e70:	fb82 1203 	smull	r1, r2, r2, r3
 8000e74:	1292      	asrs	r2, r2, #10
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	331e      	adds	r3, #30
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000e84:	883b      	ldrh	r3, [r7, #0]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	b0001000 	.word	0xb0001000
 8000ea0:	1fff75c8 	.word	0x1fff75c8
 8000ea4:	1fff75a8 	.word	0x1fff75a8
 8000ea8:	09ee009f 	.word	0x09ee009f
 8000eac:	00100101 	.word	0x00100101
 8000eb0:	68db8bad 	.word	0x68db8bad

08000eb4 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000ec2:	4813      	ldr	r0, [pc, #76]	; (8000f10 <SYS_GetBatteryLevel+0x5c>)
 8000ec4:	f000 f82a 	bl	8000f1c <ADC_ReadChannels>
 8000ec8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	e016      	b.n	8000f04 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <SYS_GetBatteryLevel+0x60>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00b      	beq.n	8000efa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <SYS_GetBatteryLevel+0x60>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000eec:	fb03 f202 	mul.w	r2, r3, r2
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	e004      	b.n	8000f04 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <SYS_GetBatteryLevel+0x64>)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	b4002000 	.word	0xb4002000
 8000f14:	1fff75aa 	.word	0x1fff75aa
 8000f18:	004c08d8 	.word	0x004c08d8

08000f1c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000f34:	f7ff fec8 	bl	8000cc8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f3a:	f002 fb9e 	bl	800367a <HAL_ADCEx_Calibration_Start>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000f44:	f000 fb26 	bl	8001594 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f5c:	f002 f8aa 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000f66:	f000 fb15 	bl	8001594 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f6c:	f001 ff86 	bl	8002e7c <HAL_ADC_Start>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000f76:	f000 fb0d 	bl	8001594 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f80:	f001 fff4 	bl	8002f6c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f86:	f001 ffbf 	bl	8002f08 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f8c:	f002 f885 	bl	800309a <HAL_ADC_GetValue>
 8000f90:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <ADC_ReadChannels+0x88>)
 8000f94:	f001 fef6 	bl	8002d84 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000f98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001cc 	.word	0x200001cc

08000fa8 <LL_AHB1_GRP1_EnableClock>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fdc:	2004      	movs	r0, #4
 8000fde:	f7ff ffe3 	bl	8000fa8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ffe0 	bl	8000fa8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2102      	movs	r1, #2
 8000fec:	200b      	movs	r0, #11
 8000fee:	f002 fcea 	bl	80039c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ff2:	200b      	movs	r0, #11
 8000ff4:	f002 fd01 	bl	80039fa <HAL_NVIC_EnableIRQ>

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001008:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800100c:	d101      	bne.n	8001012 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001012:	2300      	movs	r3, #0
#endif
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	58004000 	.word	0x58004000

08001020 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001038:	4b56      	ldr	r3, [pc, #344]	; (8001194 <FLASH_IF_Write+0x174>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0299      	lsls	r1, r3, #10
 800103e:	4b56      	ldr	r3, [pc, #344]	; (8001198 <FLASH_IF_Write+0x178>)
 8001040:	400b      	ands	r3, r1
 8001042:	fbb2 f1f3 	udiv	r1, r2, r3
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	0adb      	lsrs	r3, r3, #11
 800104e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800105a:	3b01      	subs	r3, #1
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <FLASH_IF_Write+0x174>)
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	0291      	lsls	r1, r2, #10
 8001062:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <FLASH_IF_Write+0x178>)
 8001064:	400a      	ands	r2, r1
 8001066:	fbb3 f1f2 	udiv	r1, r3, r2
 800106a:	fb01 f202 	mul.w	r2, r1, r2
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	0adb      	lsrs	r3, r3, #11
 8001072:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <FLASH_IF_Write+0x7a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <FLASH_IF_Write+0x7a>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800109a:	f06f 0304 	mvn.w	r3, #4
 800109e:	e074      	b.n	800118a <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <FLASH_IF_Write+0x17c>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da02      	bge.n	80010ae <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80010a8:	f06f 0303 	mvn.w	r3, #3
 80010ac:	e06d      	b.n	800118a <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d005      	beq.n	80010c2 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010bc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e05b      	b.n	8001180 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f8f8 	bl	80012c2 <FLASH_IF_IsEmpty>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d037      	beq.n	8001148 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80010de:	f06f 0304 	mvn.w	r3, #4
 80010e2:	e052      	b.n	800118a <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f0:	4619      	mov	r1, r3
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f017 ffe0 	bl	80190b8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	6a39      	ldr	r1, [r7, #32]
 8001104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001106:	b292      	uxth	r2, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f017 ffd5 	bl	80190b8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800110e:	2200      	movs	r2, #0
 8001110:	2101      	movs	r1, #1
 8001112:	69f8      	ldr	r0, [r7, #28]
 8001114:	f000 f865 	bl	80011e2 <FLASH_IF_EraseByPages>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800111e:	f06f 0301 	mvn.w	r3, #1
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001124:	e030      	b.n	8001188 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800112c:	02db      	lsls	r3, r3, #11
 800112e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f88a 	bl	800124e <FLASH_IF_Write_Buffer>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d010      	beq.n	8001162 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001140:	f06f 0302 	mvn.w	r3, #2
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001146:	e01f      	b.n	8001188 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001150:	f000 f87d 	bl	800124e <FLASH_IF_Write_Buffer>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800115a:	f06f 0302 	mvn.w	r3, #2
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001160:	e012      	b.n	8001188 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	4413      	add	r3, r2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 800116a:	6a3a      	ldr	r2, [r7, #32]
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	4413      	add	r3, r2
 8001170:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	d99f      	bls.n	80010c8 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800118a:	4618      	mov	r0, r3
 800118c:	3730      	adds	r7, #48	; 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	1fff75e0 	.word	0x1fff75e0
 8001198:	03fffc00 	.word	0x03fffc00
 800119c:	58004000 	.word	0x58004000

080011a0 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80011ac:	e00b      	b.n	80011c6 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80011ae:	bf00      	nop
 80011b0:	f7ff ff24 	bl	8000ffc <LL_FLASH_IsActiveFlag_OperationSuspended>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1fa      	bne.n	80011b0 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80011ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	2001      	movs	r0, #1
 80011c2:	f003 f821 	bl	8004208 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d0:	4299      	cmp	r1, r3
 80011d2:	bf08      	it	eq
 80011d4:	4290      	cmpeq	r0, r2
 80011d6:	d1ea      	bne.n	80011ae <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80011d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b08a      	sub	sp, #40	; 0x28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	460b      	mov	r3, r1
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4618      	mov	r0, r3
 8001208:	f003 f99c 	bl	8004544 <HAL_FLASHEx_Erase_IT>
 800120c:	4603      	mov	r3, r0
 800120e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001212:	e00a      	b.n	800122a <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001214:	f107 0214 	add.w	r2, r7, #20
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f938 	bl	8004494 <HAL_FLASHEx_Erase>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800122a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122e:	2b00      	cmp	r3, #0
 8001230:	d008      	beq.n	8001244 <FLASH_IF_EraseByPages+0x62>
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001236:	2b02      	cmp	r3, #2
 8001238:	d101      	bne.n	800123e <FLASH_IF_EraseByPages+0x5c>
 800123a:	2301      	movs	r3, #1
 800123c:	e003      	b.n	8001246 <FLASH_IF_EraseByPages+0x64>
 800123e:	f06f 0301 	mvn.w	r3, #1
 8001242:	e000      	b.n	8001246 <FLASH_IF_EraseByPages+0x64>
 8001244:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b08a      	sub	sp, #40	; 0x28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e020      	b.n	80012aa <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2208      	movs	r2, #8
 800126e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001270:	4618      	mov	r0, r3
 8001272:	f017 ff21 	bl	80190b8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800127a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127e:	bf08      	it	eq
 8001280:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001284:	d005      	beq.n	8001292 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001286:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff88 	bl	80011a0 <FLASH_IF_Write64>
 8001290:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3308      	adds	r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3308      	adds	r3, #8
 800129c:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d108      	bne.n	80012b6 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3d9      	bcc.n	8001268 <FLASH_IF_Write_Buffer+0x1a>
 80012b4:	e000      	b.n	80012b8 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80012b6:	bf00      	nop
    }
  }

  return status;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012cc:	e00a      	b.n	80012e4 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d001      	beq.n	80012de <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 80012da:	2301      	movs	r3, #1
 80012dc:	e039      	b.n	8001352 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ef      	bne.n	80012ce <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	e010      	b.n	800131a <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f103 0208 	add.w	r2, r3, #8
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	bf08      	it	eq
 800130a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800130e:	d001      	beq.n	8001314 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001310:	2301      	movs	r3, #1
 8001312:	e01e      	b.n	8001352 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3301      	adds	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3e9      	bcc.n	80012f8 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001332:	e00a      	b.n	800134a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2bff      	cmp	r3, #255	; 0xff
 800133e:	d001      	beq.n	8001344 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001340:	2301      	movs	r3, #1
 8001342:	e006      	b.n	8001352 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3b01      	subs	r3, #1
 8001348:	603b      	str	r3, [r7, #0]
  while (size != 0)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f1      	bne.n	8001334 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001350:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <LL_AHB2_GRP1_EnableClock>:
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001380:	68fb      	ldr	r3, [r7, #12]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <LL_SYSCFG_EnableFastModePlus>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <LL_SYSCFG_EnableFastModePlus+0x20>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <LL_SYSCFG_EnableFastModePlus+0x20>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff ffc9 	bl	800135c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ffc6 	bl	800135c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d0:	2080      	movs	r0, #128	; 0x80
 80013d2:	f7ff ffc3 	bl	800135c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2004      	movs	r0, #4
 80013d8:	f7ff ffc0 	bl	800135c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e2:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_GPIO_Init+0xd4>)
 80013e4:	f003 fba0 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	4826      	ldr	r0, [pc, #152]	; (8001488 <MX_GPIO_Init+0xd8>)
 80013f0:	f003 fb9a 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB0 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80013f4:	f241 03fd 	movw	r3, #4349	; 0x10fd
 80013f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	481f      	ldr	r0, [pc, #124]	; (8001484 <MX_GPIO_Init+0xd4>)
 8001408:	f003 f960 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin;
 800140c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_CTRL1_GPIO_Port, &GPIO_InitStruct);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_GPIO_Init+0xd4>)
 8001424:	f003 f952 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001428:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800142c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f003 f945 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001442:	2308      	movs	r3, #8
 8001444:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <MX_GPIO_Init+0xdc>)
 8001454:	f003 f93a 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_CTRL2_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_CTRL2_GPIO_Port, &GPIO_InitStruct);
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_GPIO_Init+0xd8>)
 8001470:	f003 f92c 	bl	80046cc <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001474:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001478:	f7ff ff88 	bl	800138c <LL_SYSCFG_EnableFastModePlus>

}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	48000400 	.word	0x48000400
 8001488:	48000800 	.word	0x48000800
 800148c:	48001c00 	.word	0x48001c00

08001490 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	f023 0218 	bic.w	r2, r3, #24
 80014a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f001 f8bf 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f80d 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f7ff ff73 	bl	80013b0 <MX_GPIO_Init>
  MX_RTC_Init();
 80014ca:	f000 f891 	bl	80015f0 <MX_RTC_Init>
  MX_DMA_Init();
 80014ce:	f7ff fd83 	bl	8000fd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014d2:	f000 fe6f 	bl	80021b4 <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 80014d6:	f008 f8a3 	bl	8009620 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80014da:	f008 f8a9 	bl	8009630 <MX_LoRaWAN_Process>
 80014de:	e7fc      	b.n	80014da <main+0x20>

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b09a      	sub	sp, #104	; 0x68
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	2248      	movs	r2, #72	; 0x48
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f019 f8ce 	bl	801a690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001506:	f003 fb27 	bl	8004b58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff ffc0 	bl	8001490 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <SystemClock_Config+0xb0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <SystemClock_Config+0xb0>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <SystemClock_Config+0xb0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800152c:	2324      	movs	r3, #36	; 0x24
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001530:	2381      	movs	r3, #129	; 0x81
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001534:	2301      	movs	r3, #1
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001538:	2300      	movs	r3, #0
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800153c:	23b0      	movs	r3, #176	; 0xb0
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fe51 	bl	80051f0 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001554:	f000 f81e 	bl	8001594 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001558:	234f      	movs	r3, #79	; 0x4f
 800155a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f004 f9d6 	bl	8005928 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001582:	f000 f807 	bl	8001594 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3768      	adds	r7, #104	; 0x68
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	58000400 	.word	0x58000400

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>

0800159e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <LL_APB1_GRP1_EnableClock>:
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	222c      	movs	r2, #44	; 0x2c
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f019 f847 	bl	801a690 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <MX_RTC_Init+0x9c>)
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <MX_RTC_Init+0xa0>)
 8001606:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_RTC_Init+0x9c>)
 800160a:	221f      	movs	r2, #31
 800160c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_RTC_Init+0x9c>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_RTC_Init+0x9c>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_RTC_Init+0x9c>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_RTC_Init+0x9c>)
 8001622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001626:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_RTC_Init+0x9c>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_RTC_Init+0x9c>)
 8001630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_RTC_Init+0x9c>)
 8001638:	f004 fe32 	bl	80062a0 <HAL_RTC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001642:	f7ff ffa7 	bl	8001594 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <MX_RTC_Init+0x9c>)
 8001648:	f005 f920 	bl	800688c <HAL_RTCEx_SetSSRU_IT>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001652:	f7ff ff9f 	bl	8001594 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001662:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001666:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_RTC_Init+0x9c>)
 8001676:	f004 fe8d 	bl	8006394 <HAL_RTC_SetAlarm_IT>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001680:	f7ff ff88 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000230 	.word	0x20000230
 8001690:	40002800 	.word	0x40002800

08001694 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b090      	sub	sp, #64	; 0x40
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	2238      	movs	r2, #56	; 0x38
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f018 fff3 	bl	801a690 <memset>
  if(rtcHandle->Instance==RTC)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_RTC_MspInit+0x74>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d125      	bne.n	8001700 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4618      	mov	r0, r3
 80016c6:	f004 fcd1 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016d0:	f7ff ff60 	bl	8001594 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016d4:	f7ff ff63 	bl	800159e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016dc:	f7ff ff6f 	bl	80015be <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2002      	movs	r0, #2
 80016e6:	f002 f96e 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016ea:	2002      	movs	r0, #2
 80016ec:	f002 f985 	bl	80039fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	202a      	movs	r0, #42	; 0x2a
 80016f6:	f002 f966 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016fa:	202a      	movs	r0, #42	; 0x2a
 80016fc:	f002 f97d 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001700:	bf00      	nop
 8001702:	3740      	adds	r7, #64	; 0x40
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40002800 	.word	0x40002800

0800170c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001712:	2201      	movs	r2, #1
 8001714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001740:	f000 ff9e 	bl	8002680 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001744:	f7ff ffe2 	bl	800170c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001748:	2001      	movs	r0, #1
 800174a:	f003 fa97 	bl	8004c7c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}

08001752 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001756:	f000 ffa1 	bl	800269c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800175a:	f000 fec7 	bl	80024ec <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001766:	f000 ff8b 	bl	8002680 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800176a:	2101      	movs	r1, #1
 800176c:	2000      	movs	r0, #0
 800176e:	f003 fa01 	bl	8004b74 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}

08001776 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800177a:	f000 ff8f 	bl	800269c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <HardFault_Handler+0x4>

0800179a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <MemManage_Handler+0x4>

080017a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <BusFault_Handler+0x4>

080017a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <UsageFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80017e2:	f005 f88f 	bl	8006904 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000230 	.word	0x20000230

080017f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA1_Channel1_IRQHandler+0x10>)
 80017f6:	f002 fb97 	bl	8003f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000030c 	.word	0x2000030c

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USART2_IRQHandler+0x10>)
 800180a:	f005 fedb 	bl	80075c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000027c 	.word	0x2000027c

08001818 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <RTC_Alarm_IRQHandler+0x10>)
 800181e:	f004 ff21 	bl	8006664 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000230 	.word	0x20000230

0800182c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001832:	f005 fbcf 	bl	8006fd4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000268 	.word	0x20000268

08001840 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SUBGHZ_Init+0x20>)
 8001876:	2208      	movs	r2, #8
 8001878:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_SUBGHZ_Init+0x20>)
 800187c:	f005 f92e 	bl	8006adc <HAL_SUBGHZ_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001886:	f7ff fe85 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000268 	.word	0x20000268

08001894 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ffcf 	bl	8001840 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f002 f88d 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018ac:	2032      	movs	r0, #50	; 0x32
 80018ae:	f002 f8a4 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80018cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <LL_FLASH_GetUDN+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	1fff7580 	.word	0x1fff7580

080018f4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LL_FLASH_GetDeviceID+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	1fff7584 	.word	0x1fff7584

0800190c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <LL_FLASH_GetSTCompanyID+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0a1b      	lsrs	r3, r3, #8
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	1fff7584 	.word	0x1fff7584

08001924 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff ffc6 	bl	80018ba <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800192e:	f018 f955 	bl	8019bdc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <SystemApp_Init+0x48>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001938:	f000 f970 	bl	8001c1c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800193c:	f018 fbde 	bl	801a0fc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <SystemApp_Init+0x4c>)
 8001942:	f018 fc89 	bl	801a258 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <SystemApp_Init+0x50>)
 8001948:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800194c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800194e:	2002      	movs	r0, #2
 8001950:	f018 fc90 	bl	801a274 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001954:	f7ff fa2e 	bl	8000db4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001958:	f000 f99c 	bl	8001c94 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800195c:	f017 fb06 	bl	8018f6c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001960:	2101      	movs	r1, #1
 8001962:	2001      	movs	r0, #1
 8001964:	f017 fb42 	bl	8018fec <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000274 	.word	0x20000274
 8001970:	08001b3d 	.word	0x08001b3d
 8001974:	58004000 	.word	0x58004000

08001978 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800197c:	f017 fb66 	bl	801904c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800198e:	f7ff fa91 	bl	8000eb4 <SYS_GetBatteryLevel>
 8001992:	4603      	mov	r3, r0
 8001994:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800199c:	4293      	cmp	r3, r2
 800199e:	d902      	bls.n	80019a6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019a0:	23fe      	movs	r3, #254	; 0xfe
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	e014      	b.n	80019d0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019ac:	d202      	bcs.n	80019b4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e00d      	b.n	80019d0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80019ba:	461a      	mov	r2, r3
 80019bc:	4613      	mov	r3, r2
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <GetBatteryLevel+0x58>)
 80019c8:	fba3 2302 	umull	r2, r3, r3, r2
 80019cc:	09db      	lsrs	r3, r3, #7
 80019ce:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	1b4e81b5 	.word	0x1b4e81b5

080019e0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f91f 	bl	8001c30 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe ff95 	bl	8000924 <__aeabi_f2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80019fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a16:	f7ff ff63 	bl	80018e0 <LL_FLASH_GetUDN>
 8001a1a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a22:	d138      	bne.n	8001a96 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a24:	f000 fe48 	bl	80026b8 <HAL_GetUIDw0>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	f000 fe59 	bl	80026e0 <HAL_GetUIDw2>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4423      	add	r3, r4
 8001a32:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a34:	f000 fe4a 	bl	80026cc <HAL_GetUIDw1>
 8001a38:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	0e1a      	lsrs	r2, r3, #24
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3307      	adds	r3, #7
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	0c1a      	lsrs	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	0a1a      	lsrs	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3305      	adds	r3, #5
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	0e1a      	lsrs	r2, r3, #24
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	0c1a      	lsrs	r2, r3, #16
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	0a1a      	lsrs	r2, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001a94:	e031      	b.n	8001afa <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3307      	adds	r3, #7
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	0a1a      	lsrs	r2, r3, #8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	0c1a      	lsrs	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3305      	adds	r3, #5
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	0e1a      	lsrs	r2, r3, #24
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ac4:	f7ff ff16 	bl	80018f4 <LL_FLASH_GetDeviceID>
 8001ac8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3303      	adds	r3, #3
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ad4:	f7ff ff1a 	bl	800190c <LL_FLASH_GetSTCompanyID>
 8001ad8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3302      	adds	r3, #2
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	0a1a      	lsrs	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	701a      	strb	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}

08001b02 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001b0c:	f7ff fee8 	bl	80018e0 <LL_FLASH_GetUDN>
 8001b10:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d10b      	bne.n	8001b32 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b1a:	f000 fdcd 	bl	80026b8 <HAL_GetUIDw0>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	f000 fdd4 	bl	80026cc <HAL_GetUIDw1>
 8001b24:	4603      	mov	r3, r0
 8001b26:	405c      	eors	r4, r3
 8001b28:	f000 fdda 	bl	80026e0 <HAL_GetUIDw2>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4063      	eors	r3, r4
 8001b30:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b32:	687b      	ldr	r3, [r7, #4]

}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f017 fb8e 	bl	801926c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <TimestampNow+0x3c>)
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f81d 	bl	8001b9c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fb0c 	bl	8000180 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0801b0d4 	.word	0x0801b0d4

08001b7c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b80:	2101      	movs	r1, #1
 8001b82:	2002      	movs	r0, #2
 8001b84:	f017 fa02 	bl	8018f8c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b90:	2100      	movs	r1, #0
 8001b92:	2002      	movs	r0, #2
 8001b94:	f017 f9fa 	bl	8018f8c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b9c:	b40c      	push	{r2, r3}
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f017 fd2b 	bl	8019610 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bc4:	b002      	add	sp, #8
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_GetTick+0x24>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001bee:	f000 f91d 	bl	8001e2c <TIMER_IF_GetTimerValue>
 8001bf2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000274 	.word	0x20000274

08001c04 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f993 	bl	8001f3a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c20:	f000 fd68 	bl	80026f4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c24:	f000 fd6c 	bl	8002700 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001c28:	f000 fd70 	bl	800270c <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <EnvSensors_Read+0x50>)
 8001c3a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <EnvSensors_Read+0x54>)
 8001c3e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <EnvSensors_Read+0x58>)
 8001c42:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001c44:	f7ff f8c4 	bl	8000dd0 <SYS_GetTemperatureLevel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	121b      	asrs	r3, r3, #8
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fe14 	bl	800087c <__aeabi_i2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <EnvSensors_Read+0x5c>)
 8001c6e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <EnvSensors_Read+0x60>)
 8001c74:	611a      	str	r2, [r3, #16]

  return 0;
 8001c76:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	42480000 	.word	0x42480000
 8001c84:	41900000 	.word	0x41900000
 8001c88:	447a0000 	.word	0x447a0000
 8001c8c:	003e090d 	.word	0x003e090d
 8001c90:	000503ab 	.word	0x000503ab

08001c94 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
#else
  int32_t ret = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <TIMER_IF_Init+0x5c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01b      	beq.n	8001d1c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <TIMER_IF_Init+0x60>)
 8001ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001cec:	f7ff fc80 	bl	80015f0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001cf0:	f000 f856 	bl	8001da0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <TIMER_IF_Init+0x60>)
 8001cfa:	f004 fc57 	bl	80065ac <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <TIMER_IF_Init+0x60>)
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <TIMER_IF_Init+0x60>)
 8001d08:	f004 fd8e 	bl	8006828 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f9d3 	bl	80020b8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001d12:	f000 f85f 	bl	8001dd4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <TIMER_IF_Init+0x5c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000275 	.word	0x20000275
 8001d2c:	20000230 	.word	0x20000230

08001d30 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	; 0x38
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	222c      	movs	r2, #44	; 0x2c
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f018 fca2 	bl	801a690 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001d4c:	f000 f828 	bl	8001da0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <TIMER_IF_StartTimer+0x68>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d6c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <TIMER_IF_StartTimer+0x6c>)
 8001d7e:	f004 fb09 	bl	8006394 <HAL_RTC_SetAlarm_IT>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001d88:	f7ff fc04 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3738      	adds	r7, #56	; 0x38
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000278 	.word	0x20000278
 8001d9c:	20000230 	.word	0x20000230

08001da0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <TIMER_IF_StopTimer+0x2c>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001db0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <TIMER_IF_StopTimer+0x30>)
 8001db6:	f004 fbf9 	bl	80065ac <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <TIMER_IF_StopTimer+0x30>)
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40002800 	.word	0x40002800
 8001dd0:	20000230 	.word	0x20000230

08001dd4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001dd8:	f000 f98e 	bl	80020f8 <GetTimerTicks>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a03      	ldr	r2, [pc, #12]	; (8001dec <TIMER_IF_SetTimerContext+0x18>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001de2:	4b02      	ldr	r3, [pc, #8]	; (8001dec <TIMER_IF_SetTimerContext+0x18>)
 8001de4:	681b      	ldr	r3, [r3, #0]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000278 	.word	0x20000278

08001df0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <TIMER_IF_GetTimerContext+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000278 	.word	0x20000278

08001e04 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e0e:	f000 f973 	bl	80020f8 <GetTimerTicks>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000278 	.word	0x20000278

08001e2c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <TIMER_IF_GetTimerValue+0x24>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001e3e:	f000 f95b 	bl	80020f8 <GetTimerTicks>
 8001e42:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000275 	.word	0x20000275

08001e54 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001e5e:	2303      	movs	r3, #3
 8001e60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001e6e:	b5b0      	push	{r4, r5, r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e76:	2100      	movs	r1, #0
 8001e78:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	460a      	mov	r2, r1
 8001e80:	4603      	mov	r3, r0
 8001e82:	0d95      	lsrs	r5, r2, #22
 8001e84:	0294      	lsls	r4, r2, #10
 8001e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f7fe fd6d 	bl	8000970 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bdb0      	pop	{r4, r5, r7, pc}

08001ea8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001ea8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	2000      	movs	r0, #0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4605      	mov	r5, r0
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f04f 0a00 	mov.w	sl, #0
 8001ec6:	f04f 0b00 	mov.w	fp, #0
 8001eca:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001ece:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001ed2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001ed6:	4650      	mov	r0, sl
 8001ed8:	4659      	mov	r1, fp
 8001eda:	1b02      	subs	r2, r0, r4
 8001edc:	eb61 0305 	sbc.w	r3, r1, r5
 8001ee0:	f04f 0000 	mov.w	r0, #0
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	0099      	lsls	r1, r3, #2
 8001eea:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001eee:	0090      	lsls	r0, r2, #2
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	eb12 0804 	adds.w	r8, r2, r4
 8001ef8:	eb43 0905 	adc.w	r9, r3, r5
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f10:	4690      	mov	r8, r2
 8001f12:	4699      	mov	r9, r3
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	0a82      	lsrs	r2, r0, #10
 8001f22:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f26:	0a8b      	lsrs	r3, r1, #10
 8001f28:	4613      	mov	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f38:	4770      	bx	lr

08001f3a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff93 	bl	8001e6e <TIMER_IF_Convert_ms2Tick>
 8001f48:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001f4a:	f000 f8d5 	bl	80020f8 <GetTimerTicks>
 8001f4e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f50:	e000      	b.n	8001f54 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001f52:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f54:	f000 f8d0 	bl	80020f8 <GetTimerTicks>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f6      	bhi.n	8001f52 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f76:	f017 ff7f 	bl	8019e78 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f8a:	f000 f8a5 	bl	80020d8 <TIMER_IF_BkUp_Read_MSBticks>
 8001f8e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f88f 	bl	80020b8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001fa2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001fb0:	f000 f8a2 	bl	80020f8 <GetTimerTicks>
 8001fb4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001fb6:	f000 f88f 	bl	80020d8 <TIMER_IF_BkUp_Read_MSBticks>
 8001fba:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	000b      	movs	r3, r1
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4605      	mov	r5, r0
 8001fda:	eb12 0804 	adds.w	r8, r2, r4
 8001fde:	eb43 0905 	adc.w	r9, r3, r5
 8001fe2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	0a82      	lsrs	r2, r0, #10
 8001ff4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001ff8:	0a8b      	lsrs	r3, r1, #10
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2200      	movs	r2, #0
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800200c:	f04f 0b00 	mov.w	fp, #0
 8002010:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff46 	bl	8001ea8 <TIMER_IF_Convert_Tick2ms>
 800201c:	4603      	mov	r3, r0
 800201e:	b29a      	uxth	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002026:	4618      	mov	r0, r3
 8002028:	3730      	adds	r7, #48	; 0x30
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002030 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	2100      	movs	r1, #0
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800203e:	f004 fc85 	bl	800694c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000230 	.word	0x20000230

08002050 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	2101      	movs	r1, #1
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800205e:	f004 fc75 	bl	800694c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000230 	.word	0x20000230

08002070 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800207a:	2100      	movs	r1, #0
 800207c:	4804      	ldr	r0, [pc, #16]	; (8002090 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800207e:	f004 fc7d 	bl	800697c <HAL_RTCEx_BKUPRead>
 8002082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000230 	.word	0x20000230

08002094 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800209e:	2101      	movs	r1, #1
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80020a2:	f004 fc6b 	bl	800697c <HAL_RTCEx_BKUPRead>
 80020a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000230 	.word	0x20000230

080020b8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	2102      	movs	r1, #2
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80020c6:	f004 fc41 	bl	800694c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000230 	.word	0x20000230

080020d8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80020de:	2102      	movs	r1, #2
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80020e2:	f004 fc4b 	bl	800697c <HAL_RTCEx_BKUPRead>
 80020e6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80020e8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000230 	.word	0x20000230

080020f8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <GetTimerTicks+0x34>)
 8002100:	f7ff fdd9 	bl	8001cb6 <LL_RTC_TIME_GetSubSecond>
 8002104:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002106:	e003      	b.n	8002110 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <GetTimerTicks+0x34>)
 800210a:	f7ff fdd4 	bl	8001cb6 <LL_RTC_TIME_GetSubSecond>
 800210e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <GetTimerTicks+0x34>)
 8002112:	f7ff fdd0 	bl	8001cb6 <LL_RTC_TIME_GetSubSecond>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4293      	cmp	r3, r2
 800211c:	d1f4      	bne.n	8002108 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40002800 	.word	0x40002800

08002130 <LL_AHB2_GRP1_EnableClock>:
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4313      	orrs	r3, r2
 8002146:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002154:	68fb      	ldr	r3, [r7, #12]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <LL_APB1_GRP1_EnableClock>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <LL_APB1_GRP1_DisableClock>:
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a6:	4013      	ands	r3, r2
 80021a8:	658b      	str	r3, [r1, #88]	; 0x58
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021ba:	4a23      	ldr	r2, [pc, #140]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fc:	4811      	ldr	r0, [pc, #68]	; (8002244 <MX_USART2_UART_Init+0x90>)
 80021fe:	f005 f8a8 	bl	8007352 <HAL_UART_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002208:	f7ff f9c4 	bl	8001594 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220c:	2100      	movs	r1, #0
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_USART2_UART_Init+0x90>)
 8002210:	f007 f91c 	bl	800944c <HAL_UARTEx_SetTxFifoThreshold>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800221a:	f7ff f9bb 	bl	8001594 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221e:	2100      	movs	r1, #0
 8002220:	4808      	ldr	r0, [pc, #32]	; (8002244 <MX_USART2_UART_Init+0x90>)
 8002222:	f007 f951 	bl	80094c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800222c:	f7ff f9b2 	bl	8001594 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002230:	4804      	ldr	r0, [pc, #16]	; (8002244 <MX_USART2_UART_Init+0x90>)
 8002232:	f007 f8d3 	bl	80093dc <HAL_UARTEx_DisableFifoMode>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800223c:	f7ff f9aa 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2000027c 	.word	0x2000027c
 8002248:	40004400 	.word	0x40004400

0800224c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b096      	sub	sp, #88	; 0x58
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2238      	movs	r2, #56	; 0x38
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f018 fa0f 	bl	801a690 <memset>
  if(uartHandle->Instance==USART2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_UART_MspInit+0xe8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d157      	bne.n	800232c <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800227c:	2302      	movs	r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002280:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002284:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	4618      	mov	r0, r3
 800228c:	f003 feee 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002296:	f7ff f97d 	bl	8001594 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800229e:	f7ff ff5f 	bl	8002160 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7ff ff44 	bl	8002130 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022a8:	230c      	movs	r3, #12
 80022aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b8:	2307      	movs	r3, #7
 80022ba:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022c0:	4619      	mov	r1, r3
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f002 fa01 	bl	80046cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_UART_MspInit+0xf0>)
 80022ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022d2:	2214      	movs	r2, #20
 80022d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022d8:	2210      	movs	r2, #16
 80022da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_UART_MspInit+0xec>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <HAL_UART_MspInit+0xec>)
 8002302:	f001 fb97 	bl	8003a34 <HAL_DMA_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800230c:	f7ff f942 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_UART_MspInit+0xec>)
 8002314:	679a      	str	r2, [r3, #120]	; 0x78
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_UART_MspInit+0xec>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2102      	movs	r1, #2
 8002320:	2025      	movs	r0, #37	; 0x25
 8002322:	f001 fb50 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002326:	2025      	movs	r0, #37	; 0x25
 8002328:	f001 fb67 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800232c:	bf00      	nop
 800232e:	3758      	adds	r7, #88	; 0x58
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40004400 	.word	0x40004400
 8002338:	2000030c 	.word	0x2000030c
 800233c:	40020008 	.word	0x40020008

08002340 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_UART_MspDeInit+0x3c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d110      	bne.n	8002374 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002352:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002356:	f7ff ff1b 	bl	8002190 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800235a:	210c      	movs	r1, #12
 800235c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002360:	f002 fb14 	bl	800498c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002368:	4618      	mov	r0, r3
 800236a:	f001 fc0b 	bl	8003b84 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800236e:	2025      	movs	r0, #37	; 0x25
 8002370:	f001 fb51 	bl	8003a16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40004400 	.word	0x40004400

08002380 <LL_APB1_GRP1_ForceReset>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <LL_APB1_GRP1_ReleaseReset>:
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b8:	4013      	ands	r3, r2
 80023ba:	638b      	str	r3, [r1, #56]	; 0x38
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <LL_EXTI_EnableIT_0_31+0x24>)
 80023d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80023d6:	4905      	ldr	r1, [pc, #20]	; (80023ec <LL_EXTI_EnableIT_0_31+0x24>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	58000800 	.word	0x58000800

080023f0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <vcom_Init+0x28>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80023fe:	f7fe fdeb 	bl	8000fd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002402:	f7ff fed7 	bl	80021b4 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002406:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800240a:	f7ff ffdd 	bl	80023c8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800240e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000370 	.word	0x20000370

0800241c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002420:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002424:	f7ff ffac 	bl	8002380 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002428:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800242c:	f7ff ffb9 	bl	80023a2 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <vcom_DeInit+0x28>)
 8002432:	f7ff ff85 	bl	8002340 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002436:	200f      	movs	r0, #15
 8002438:	f001 faed 	bl	8003a16 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800243c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000027c 	.word	0x2000027c

08002448 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	461a      	mov	r2, r3
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4804      	ldr	r0, [pc, #16]	; (800246c <vcom_Trace_DMA+0x24>)
 800245c:	f005 f820 	bl	80074a0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002460:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000027c 	.word	0x2000027c

08002470 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <vcom_ReceiveInit+0x70>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800247e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002482:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	e893 0006 	ldmia.w	r3, {r1, r2}
 800248c:	4815      	ldr	r0, [pc, #84]	; (80024e4 <vcom_ReceiveInit+0x74>)
 800248e:	f006 ff18 	bl	80092c2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002492:	bf00      	nop
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <vcom_ReceiveInit+0x74>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d0f7      	beq.n	8002494 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80024a4:	bf00      	nop
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <vcom_ReceiveInit+0x74>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b4:	d1f7      	bne.n	80024a6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <vcom_ReceiveInit+0x74>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <vcom_ReceiveInit+0x74>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024c4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80024c6:	4807      	ldr	r0, [pc, #28]	; (80024e4 <vcom_ReceiveInit+0x74>)
 80024c8:	f006 ff56 	bl	8009378 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80024cc:	2201      	movs	r2, #1
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <vcom_ReceiveInit+0x78>)
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <vcom_ReceiveInit+0x74>)
 80024d2:	f004 ff8f 	bl	80073f4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80024d6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000374 	.word	0x20000374
 80024e4:	2000027c 	.word	0x2000027c
 80024e8:	2000036c 	.word	0x2000036c

080024ec <vcom_Resume>:

void vcom_Resume(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <vcom_Resume+0x28>)
 80024f2:	f004 ff2e 	bl	8007352 <HAL_UART_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <vcom_Resume+0x14>
  {
    Error_Handler();
 80024fc:	f7ff f84a 	bl	8001594 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <vcom_Resume+0x2c>)
 8002502:	f001 fa97 	bl	8003a34 <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <vcom_Resume+0x24>
  {
    Error_Handler();
 800250c:	f7ff f842 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2000027c 	.word	0x2000027c
 8002518:	2000030c 	.word	0x2000030c

0800251c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <HAL_UART_TxCpltCallback+0x24>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d103      	bne.n	8002536 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_UART_TxCpltCallback+0x28>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2000      	movs	r0, #0
 8002534:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40004400 	.word	0x40004400
 8002544:	20000370 	.word	0x20000370

08002548 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_UART_RxCpltCallback+0x44>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d113      	bne.n	8002582 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_UART_RxCpltCallback+0x48>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_UART_RxCpltCallback+0x30>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_UART_RxCpltCallback+0x48>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2200      	movs	r2, #0
 8002572:	2101      	movs	r1, #1
 8002574:	4807      	ldr	r0, [pc, #28]	; (8002594 <HAL_UART_RxCpltCallback+0x4c>)
 8002576:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002578:	2201      	movs	r2, #1
 800257a:	4906      	ldr	r1, [pc, #24]	; (8002594 <HAL_UART_RxCpltCallback+0x4c>)
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f004 ff39 	bl	80073f4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40004400 	.word	0x40004400
 8002590:	20000374 	.word	0x20000374
 8002594:	2000036c 	.word	0x2000036c

08002598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800259a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800259c:	f7ff fb85 	bl	8001caa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <LoopForever+0xe>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b8:	4c0a      	ldr	r4, [pc, #40]	; (80025e4 <LoopForever+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025c6:	f018 f83f 	bl	801a648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ca:	f7fe ff76 	bl	80014ba <main>

080025ce <LoopForever>:

LoopForever:
    b LoopForever
 80025ce:	e7fe      	b.n	80025ce <LoopForever>
  ldr   r0, =_estack
 80025d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80025dc:	0801bc64 	.word	0x0801bc64
  ldr r2, =_sbss
 80025e0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80025e4:	200022e4 	.word	0x200022e4

080025e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC_IRQHandler>
	...

080025ec <LL_DBGMCU_DisableDBGSleepMode>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a03      	ldr	r2, [pc, #12]	; (8002604 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6053      	str	r3, [r2, #4]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	e0042000 	.word	0xe0042000

08002608 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a03      	ldr	r2, [pc, #12]	; (8002620 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002612:	f023 0302 	bic.w	r3, r3, #2
 8002616:	6053      	str	r3, [r2, #4]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	e0042000 	.word	0xe0042000

08002624 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6053      	str	r3, [r2, #4]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	e0042000 	.word	0xe0042000

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264a:	2003      	movs	r0, #3
 800264c:	f001 f9b0 	bl	80039b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002650:	f003 fb2e 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8002654:	4603      	mov	r3, r0
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_Init+0x3c>)
 8002658:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265a:	200f      	movs	r0, #15
 800265c:	f7ff fab4 	bl	8001bc8 <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	e001      	b.n	8002670 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800266c:	f7ff f889 	bl	8001782 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002670:	79fb      	ldrb	r3, [r7, #7]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_SuspendTick+0x18>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a03      	ldr	r2, [pc, #12]	; (8002698 <HAL_SuspendTick+0x18>)
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_ResumeTick+0x18>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_ResumeTick+0x18>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80026bc:	4b02      	ldr	r3, [pc, #8]	; (80026c8 <HAL_GetUIDw0+0x10>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	1fff7590 	.word	0x1fff7590

080026cc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <HAL_GetUIDw1+0x10>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	1fff7594 	.word	0x1fff7594

080026e0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80026e4:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <HAL_GetUIDw2+0x10>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	1fff7598 	.word	0x1fff7598

080026f4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80026f8:	f7ff ff78 	bl	80025ec <LL_DBGMCU_DisableDBGSleepMode>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002704:	f7ff ff80 	bl	8002608 <LL_DBGMCU_DisableDBGStopMode>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002710:	f7ff ff88 	bl	8002624 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}

08002718 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2107      	movs	r1, #7
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	401a      	ands	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	431a      	orrs	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2107      	movs	r1, #7
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	210f      	movs	r1, #15
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	401a      	ands	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	f003 010f 	and.w	r1, r3, #15
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	43db      	mvns	r3, r3
 8002888:	401a      	ands	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	0219      	lsls	r1, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	400b      	ands	r3, r1
 8002892:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028ba:	f023 0317 	bic.w	r3, r3, #23
 80028be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028e0:	f023 0317 	bic.w	r3, r3, #23
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6093      	str	r3, [r2, #8]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002906:	d101      	bne.n	800290c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002928:	f023 0317 	bic.w	r3, r3, #23
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800294e:	f023 0317 	bic.w	r3, r3, #23
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <LL_ADC_IsEnabled+0x18>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <LL_ADC_IsEnabled+0x1a>
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d101      	bne.n	80029a0 <LL_ADC_IsDisableOngoing+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_IsDisableOngoing+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029bc:	f023 0317 	bic.w	r3, r3, #23
 80029c0:	f043 0204 	orr.w	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029e2:	f023 0317 	bic.w	r3, r3, #23
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e19e      	b.n	8002d7c <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe f989 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff44 	bl	80028f2 <LL_ADC_IsInternalRegulatorEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d115      	bne.n	8002a9c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff18 	bl	80028aa <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a7a:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <HAL_ADC_Init+0x2c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	4a98      	ldr	r2, [pc, #608]	; (8002ce4 <HAL_ADC_Init+0x2c8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	3301      	adds	r3, #1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff26 	bl	80028f2 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f043 0210 	orr.w	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff93 	bl	80029f8 <LL_ADC_REG_IsConversionOngoing>
 8002ad2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 8144 	bne.w	8002d6a <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8140 	bne.w	8002d6a <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002af2:	f043 0202 	orr.w	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff30 	bl	8002964 <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 80a7 	bne.w	8002c5a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e1b      	ldrb	r3, [r3, #24]
 8002b14:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b16:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e5b      	ldrb	r3, [r3, #25]
 8002b1c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b1e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7e9b      	ldrb	r3, [r3, #26]
 8002b24:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b26:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_ADC_Init+0x11a>
 8002b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_Init+0x11c>
 8002b36:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b38:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b3e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da04      	bge.n	8002b52 <HAL_ADC_Init+0x136>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b50:	e001      	b.n	8002b56 <HAL_ADC_Init+0x13a>
 8002b52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002b56:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b5e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b60:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d114      	bne.n	8002b9c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7e9b      	ldrb	r3, [r3, #26]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e00b      	b.n	8002b9c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002bc2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	69b9      	ldr	r1, [r7, #24]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d111      	bne.n	8002c12 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bfa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002c00:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002c06:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_ADC_Init+0x2cc>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	6979      	ldr	r1, [r7, #20]
 8002c22:	430b      	orrs	r3, r1
 8002c24:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002c2e:	d014      	beq.n	8002c5a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d00f      	beq.n	8002c5a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c42:	d00a      	beq.n	8002c5a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_ADC_Init+0x2d0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c54:	4925      	ldr	r1, [pc, #148]	; (8002cec <HAL_ADC_Init+0x2d0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	461a      	mov	r2, r3
 8002c64:	2100      	movs	r1, #0
 8002c66:	f7ff fd76 	bl	8002756 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	461a      	mov	r2, r3
 8002c74:	491e      	ldr	r1, [pc, #120]	; (8002cf0 <HAL_ADC_Init+0x2d4>)
 8002c76:	f7ff fd6e 	bl	8002756 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f062 020f 	orn	r2, r2, #15
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28
 8002c92:	e042      	b.n	8002d1a <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9c:	d13d      	bne.n	8002d1a <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e00c      	b.n	8002cbe <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d006      	beq.n	8002cc6 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d9ef      	bls.n	8002ca4 <HAL_ADC_Init+0x288>
 8002cc4:	e000      	b.n	8002cc8 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8002cc6:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d112      	bne.n	8002cf4 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f062 020f 	orn	r2, r2, #15
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cde:	e01c      	b.n	8002d1a <HAL_ADC_Init+0x2fe>
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	053e2d63 	.word	0x053e2d63
 8002ce8:	1ffffc02 	.word	0x1ffffc02
 8002cec:	40012708 	.word	0x40012708
 8002cf0:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f003 031c 	and.w	r3, r3, #28
 8002d06:	f06f 020f 	mvn.w	r2, #15
 8002d0a:	fa02 f103 	lsl.w	r1, r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fd36 	bl	8002792 <LL_ADC_GetSamplingTimeCommonChannels>
 8002d26:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10b      	bne.n	8002d48 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d46:	e018      	b.n	8002d7a <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	f023 0312 	bic.w	r3, r3, #18
 8002d50:	f043 0210 	orr.w	r2, r3, #16
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d68:	e007      	b.n	8002d7a <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06a      	b.n	8002e6c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fabe 	bl	8003324 <ADC_ConversionStop>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fb82 	bl	80034bc <ADC_Disable>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fd7f 	bl	80028d0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002de0:	f023 0303 	bic.w	r3, r3, #3
 8002de4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f240 329f 	movw	r2, #927	; 0x39f
 8002dee:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68d9      	ldr	r1, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_ADC_DeInit+0xf0>)
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002e0e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0207 	bic.w	r2, r2, #7
 8002e1e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8002e2e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_ADC_DeInit+0xf4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <HAL_ADC_DeInit+0xf4>)
 8002e44:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002e48:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd ff9e 	bl	8000d8c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	833e0200 	.word	0x833e0200
 8002e78:	40012708 	.word	0x40012708

08002e7c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fdb5 	bl	80029f8 <LL_ADC_REG_IsConversionOngoing>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d132      	bne.n	8002efa <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Start+0x26>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e02e      	b.n	8002f00 <HAL_ADC_Start+0x84>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa80 	bl	80033b0 <ADC_Enable>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	221c      	movs	r2, #28
 8002eda:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fd5f 	bl	80029ac <LL_ADC_REG_StartConversion>
 8002eee:	e006      	b.n	8002efe <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ef8:	e001      	b.n	8002efe <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Stop+0x16>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e022      	b.n	8002f64 <HAL_ADC_Stop+0x5c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9fc 	bl	8003324 <ADC_ConversionStop>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d111      	bne.n	8002f5a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fac0 	bl	80034bc <ADC_Disable>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d102      	bne.n	8002f84 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e010      	b.n	8002fa6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e077      	b.n	8003092 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fa6:	f7fe fe19 	bl	8001bdc <HAL_GetTick>
 8002faa:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002fac:	e021      	b.n	8002ff2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fb6:	f7fe fe11 	bl	8001bdc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <HAL_ADC_PollForConversion+0x60>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d112      	bne.n	8002ff2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04f      	b.n	8003092 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0d6      	beq.n	8002fae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fbd6 	bl	80027c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d031      	beq.n	8003080 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7e9b      	ldrb	r3, [r3, #26]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d12d      	bne.n	8003080 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d126      	bne.n	8003080 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fcde 	bl	80029f8 <LL_ADC_REG_IsConversionOngoing>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d112      	bne.n	8003068 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020c 	bic.w	r2, r2, #12
 8003050:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	659a      	str	r2, [r3, #88]	; 0x58
 8003066:	e00b      	b.n	8003080 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7e1b      	ldrb	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	220c      	movs	r2, #12
 800308e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x28>
 80030d8:	2302      	movs	r3, #2
 80030da:	e110      	b.n	80032fe <HAL_ADC_ConfigChannel+0x24a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fc85 	bl	80029f8 <LL_ADC_REG_IsConversionOngoing>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 80f7 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f000 80b1 	beq.w	8003262 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003108:	d004      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800310e:	4a7e      	ldr	r2, [pc, #504]	; (8003308 <HAL_ADC_ConfigChannel+0x254>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d108      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7ff fb82 	bl	8002828 <LL_ADC_REG_SetSequencerChAdd>
 8003124:	e041      	b.n	80031aa <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	210f      	movs	r1, #15
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_ConfigChannel+0xa0>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	e011      	b.n	8003178 <HAL_ADC_ConfigChannel+0xc4>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800316c:	2320      	movs	r3, #32
 800316e:	e003      	b.n	8003178 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	6849      	ldr	r1, [r1, #4]
 800317c:	f001 011f 	and.w	r1, r1, #31
 8003180:	408b      	lsls	r3, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	429a      	cmp	r2, r3
 8003196:	d808      	bhi.n	80031aa <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f7ff fb1e 	bl	80027e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7ff fb5b 	bl	8002872 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f280 8097 	bge.w	80032f4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c6:	4851      	ldr	r0, [pc, #324]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 80031c8:	f7ff fab8 	bl	800273c <LL_ADC_GetCommonPathInternalCh>
 80031cc:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a4f      	ldr	r2, [pc, #316]	; (8003310 <HAL_ADC_ConfigChannel+0x25c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d120      	bne.n	800321a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11b      	bne.n	800321a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031e8:	4619      	mov	r1, r3
 80031ea:	4848      	ldr	r0, [pc, #288]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 80031ec:	f7ff fa94 	bl	8002718 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f0:	4b48      	ldr	r3, [pc, #288]	; (8003314 <HAL_ADC_ConfigChannel+0x260>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	4a48      	ldr	r2, [pc, #288]	; (8003318 <HAL_ADC_ConfigChannel+0x264>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3b01      	subs	r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003218:	e06c      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_ADC_ConfigChannel+0x268>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d10c      	bne.n	800323e <HAL_ADC_ConfigChannel+0x18a>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003234:	4619      	mov	r1, r3
 8003236:	4835      	ldr	r0, [pc, #212]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 8003238:	f7ff fa6e 	bl	8002718 <LL_ADC_SetCommonPathInternalCh>
 800323c:	e05a      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_ADC_ConfigChannel+0x26c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d155      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800324e:	2b00      	cmp	r3, #0
 8003250:	d150      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003258:	4619      	mov	r1, r3
 800325a:	482c      	ldr	r0, [pc, #176]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 800325c:	f7ff fa5c 	bl	8002718 <LL_ADC_SetCommonPathInternalCh>
 8003260:	e048      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800326a:	d004      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <HAL_ADC_ConfigChannel+0x254>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d107      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7ff fae3 	bl	800284c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da32      	bge.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328e:	481f      	ldr	r0, [pc, #124]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 8003290:	f7ff fa54 	bl	800273c <LL_ADC_GetCommonPathInternalCh>
 8003294:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_ADC_ConfigChannel+0x25c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d107      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032a6:	4619      	mov	r1, r3
 80032a8:	4818      	ldr	r0, [pc, #96]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 80032aa:	f7ff fa35 	bl	8002718 <LL_ADC_SetCommonPathInternalCh>
 80032ae:	e021      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_ADC_ConfigChannel+0x268>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d107      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c0:	4619      	mov	r1, r3
 80032c2:	4812      	ldr	r0, [pc, #72]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 80032c4:	f7ff fa28 	bl	8002718 <LL_ADC_SetCommonPathInternalCh>
 80032c8:	e014      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_ADC_ConfigChannel+0x26c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10f      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80032da:	4619      	mov	r1, r3
 80032dc:	480b      	ldr	r0, [pc, #44]	; (800330c <HAL_ADC_ConfigChannel+0x258>)
 80032de:	f7ff fa1b 	bl	8002718 <LL_ADC_SetCommonPathInternalCh>
 80032e2:	e007      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80032fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	80000004 	.word	0x80000004
 800330c:	40012708 	.word	0x40012708
 8003310:	b0001000 	.word	0xb0001000
 8003314:	20000000 	.word	0x20000000
 8003318:	053e2d63 	.word	0x053e2d63
 800331c:	b8004000 	.word	0xb8004000
 8003320:	b4002000 	.word	0xb4002000

08003324 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fb61 	bl	80029f8 <LL_ADC_REG_IsConversionOngoing>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d033      	beq.n	80033a4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fb21 	bl	8002988 <LL_ADC_IsDisableOngoing>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fb3e 	bl	80029d2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003356:	f7fe fc41 	bl	8001bdc <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800335c:	e01b      	b.n	8003396 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800335e:	f7fe fc3d 	bl	8001bdc <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d914      	bls.n	8003396 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1dc      	bne.n	800335e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff facf 	bl	8002964 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d169      	bne.n	80034a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b36      	ldr	r3, [pc, #216]	; (80034ac <ADC_Enable+0xfc>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	f043 0210 	orr.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e055      	b.n	80034a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fa8c 	bl	8002918 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003400:	482b      	ldr	r0, [pc, #172]	; (80034b0 <ADC_Enable+0x100>)
 8003402:	f7ff f99b 	bl	800273c <LL_ADC_GetCommonPathInternalCh>
 8003406:	4603      	mov	r3, r0
 8003408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00f      	beq.n	8003430 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <ADC_Enable+0x104>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <ADC_Enable+0x108>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003422:	e002      	b.n	800342a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3b01      	subs	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f9      	bne.n	8003424 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7e5b      	ldrb	r3, [r3, #25]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d033      	beq.n	80034a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003438:	f7fe fbd0 	bl	8001bdc <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800343e:	e028      	b.n	8003492 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fa8d 	bl	8002964 <LL_ADC_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fa5f 	bl	8002918 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800345a:	f7fe fbbf 	bl	8001bdc <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d914      	bls.n	8003492 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d00d      	beq.n	8003492 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e007      	b.n	80034a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d1cf      	bne.n	8003440 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	80000017 	.word	0x80000017
 80034b0:	40012708 	.word	0x40012708
 80034b4:	20000000 	.word	0x20000000
 80034b8:	053e2d63 	.word	0x053e2d63

080034bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fa5d 	bl	8002988 <LL_ADC_IsDisableOngoing>
 80034ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fa45 	bl	8002964 <LL_ADC_IsEnabled>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d047      	beq.n	8003570 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d144      	bne.n	8003570 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0305 	and.w	r3, r3, #5
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10c      	bne.n	800350e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fa20 	bl	800293e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2203      	movs	r2, #3
 8003504:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003506:	f7fe fb69 	bl	8001bdc <HAL_GetTick>
 800350a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800350c:	e029      	b.n	8003562 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f043 0210 	orr.w	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e023      	b.n	8003572 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800352a:	f7fe fb57 	bl	8001bdc <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d914      	bls.n	8003562 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e007      	b.n	8003572 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1dc      	bne.n	800352a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <LL_ADC_SetCalibrationFactor>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800358a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_GetCalibrationFactor>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <LL_ADC_Enable>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ce:	f023 0317 	bic.w	r3, r3, #23
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_Disable>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035f4:	f023 0317 	bic.w	r3, r3, #23
 80035f8:	f043 0202 	orr.w	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <LL_ADC_IsEnabled>:
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <LL_ADC_IsEnabled+0x18>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <LL_ADC_IsEnabled+0x1a>
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <LL_ADC_StartCalibration>:
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800363e:	f023 0317 	bic.w	r3, r3, #23
 8003642:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <LL_ADC_IsCalibrationOnGoing>:
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003668:	d101      	bne.n	800366e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b088      	sub	sp, #32
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_ADCEx_Calibration_Start+0x1e>
 8003694:	2302      	movs	r3, #2
 8003696:	e0b9      	b.n	800380c <HAL_ADCEx_Calibration_Start+0x192>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff0b 	bl	80034bc <ADC_Disable>
 80036a6:	4603      	mov	r3, r0
 80036a8:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ffab 	bl	800360a <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 809d 	bne.w	80037f6 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036c4:	f043 0202 	orr.w	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	f248 0303 	movw	r3, #32771	; 0x8003
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036e8:	f023 0303 	bic.w	r3, r3, #3
 80036ec:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e02e      	b.n	8003752 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff98 	bl	800362e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036fe:	e014      	b.n	800372a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800370c:	d30d      	bcc.n	800372a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f023 0312 	bic.w	r3, r3, #18
 8003716:	f043 0210 	orr.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e070      	b.n	800380c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff90 	bl	8003654 <LL_ADC_IsCalibrationOnGoing>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e2      	bne.n	8003700 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff2f 	bl	80035a2 <LL_ADC_GetCalibrationFactor>
 8003744:	4602      	mov	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4413      	add	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b07      	cmp	r3, #7
 8003756:	d9cd      	bls.n	80036f4 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff29 	bl	80035be <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff01 	bl	800357a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff31 	bl	80035e4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003782:	f7fe fa2b 	bl	8001bdc <HAL_GetTick>
 8003786:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003788:	e01c      	b.n	80037c4 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800378a:	f7fe fa27 	bl	8001bdc <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d915      	bls.n	80037c4 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff34 	bl	800360a <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e023      	b.n	800380c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff1e 	bl	800360a <LL_ADC_IsEnabled>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1da      	bne.n	800378a <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f023 0303 	bic.w	r3, r3, #3
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	659a      	str	r2, [r3, #88]	; 0x58
 80037f4:	e005      	b.n	8003802 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	f043 0210 	orr.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4906      	ldr	r1, [pc, #24]	; (80038ac <__NVIC_EnableIRQ+0x34>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100

080038b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db12      	blt.n	80038e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	490a      	ldr	r1, [pc, #40]	; (80038f4 <__NVIC_DisableIRQ+0x44>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	3320      	adds	r3, #32
 80038d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038dc:	f3bf 8f4f 	dsb	sy
}
 80038e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038e2:	f3bf 8f6f 	isb	sy
}
 80038e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	; 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf28      	it	cs
 800396a:	2304      	movcs	r3, #4
 800396c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3304      	adds	r3, #4
 8003972:	2b06      	cmp	r3, #6
 8003974:	d902      	bls.n	800397c <NVIC_EncodePriority+0x30>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3b03      	subs	r3, #3
 800397a:	e000      	b.n	800397e <NVIC_EncodePriority+0x32>
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43d9      	mvns	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	4313      	orrs	r3, r2
         );
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff2b 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039d4:	f7ff ff42 	bl	800385c <__NVIC_GetPriorityGrouping>
 80039d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	6978      	ldr	r0, [r7, #20]
 80039e0:	f7ff ffb4 	bl	800394c <NVIC_EncodePriority>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff83 	bl	80038f8 <__NVIC_SetPriority>
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff35 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff43 	bl	80038b0 <__NVIC_DisableIRQ>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e08e      	b.n	8003b64 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_DMA_Init+0x138>)
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d80f      	bhi.n	8003a72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <HAL_DMA_Init+0x13c>)
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a45      	ldr	r2, [pc, #276]	; (8003b74 <HAL_DMA_Init+0x140>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	009a      	lsls	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a42      	ldr	r2, [pc, #264]	; (8003b78 <HAL_DMA_Init+0x144>)
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a70:	e00e      	b.n	8003a90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <HAL_DMA_Init+0x148>)
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a3d      	ldr	r2, [pc, #244]	; (8003b74 <HAL_DMA_Init+0x140>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	009a      	lsls	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <HAL_DMA_Init+0x14c>)
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fb24 	bl	8004130 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af0:	d102      	bne.n	8003af8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b0e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <HAL_DMA_Init+0x106>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d80c      	bhi.n	8003b3a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb4d 	bl	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	e008      	b.n	8003b4c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40020407 	.word	0x40020407
 8003b70:	bffdfff8 	.word	0xbffdfff8
 8003b74:	cccccccd 	.word	0xcccccccd
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	bffdfbf8 	.word	0xbffdfbf8
 8003b80:	40020400 	.word	0x40020400

08003b84 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07b      	b.n	8003c8e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <HAL_DMA_DeInit+0x114>)
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d80f      	bhi.n	8003bd2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_DMA_DeInit+0x118>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a38      	ldr	r2, [pc, #224]	; (8003ca0 <HAL_DMA_DeInit+0x11c>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a35      	ldr	r2, [pc, #212]	; (8003ca4 <HAL_DMA_DeInit+0x120>)
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd0:	e00e      	b.n	8003bf0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <HAL_DMA_DeInit+0x124>)
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <HAL_DMA_DeInit+0x11c>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	009a      	lsls	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <HAL_DMA_DeInit+0x128>)
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f003 021c 	and.w	r2, r3, #28
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fa8f 	bl	8004130 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c22:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00f      	beq.n	8003c4c <HAL_DMA_DeInit+0xc8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d80b      	bhi.n	8003c4c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fac3 	bl	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40020407 	.word	0x40020407
 8003c9c:	bffdfff8 	.word	0xbffdfff8
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	bffdfbf8 	.word	0xbffdfbf8
 8003cac:	40020400 	.word	0x40020400

08003cb0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_DMA_Start_IT+0x20>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e069      	b.n	8003da4 <HAL_DMA_Start_IT+0xf4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d155      	bne.n	8003d90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f9d3 	bl	80040b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 020e 	orr.w	r2, r2, #14
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e00f      	b.n	8003d48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 020a 	orr.w	r2, r2, #10
 8003d46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e008      	b.n	8003da2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04f      	b.n	8003e5e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d008      	beq.n	8003ddc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e040      	b.n	8003e5e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 020e 	bic.w	r2, r2, #14
 8003dea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f003 021c 	and.w	r2, r3, #28
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d005      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2204      	movs	r2, #4
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e047      	b.n	8003f1c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 020e 	bic.w	r2, r2, #14
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f003 021c 	and.w	r2, r3, #28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2101      	movs	r1, #1
 8003eca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ece:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ed8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003efa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
    }
  }
  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	f003 031c 	and.w	r3, r3, #28
 8003f48:	2204      	movs	r2, #4
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d027      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x7c>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d022      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0204 	bic.w	r2, r2, #4
 8003f7a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f003 021c 	and.w	r2, r3, #28
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2104      	movs	r1, #4
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8081 	beq.w	800409c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003fa2:	e07b      	b.n	800409c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f003 031c 	and.w	r3, r3, #28
 8003fac:	2202      	movs	r2, #2
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d03d      	beq.n	8004034 <HAL_DMA_IRQHandler+0x10c>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d038      	beq.n	8004034 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 020a 	bic.w	r2, r2, #10
 8003fde:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_DMA_IRQHandler+0x180>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d909      	bls.n	8004008 <HAL_DMA_IRQHandler+0xe0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	f003 031c 	and.w	r3, r3, #28
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_DMA_IRQHandler+0x184>)
 8003ffe:	2102      	movs	r1, #2
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	6053      	str	r3, [r2, #4]
 8004006:	e008      	b.n	800401a <HAL_DMA_IRQHandler+0xf2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f003 031c 	and.w	r3, r3, #28
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <HAL_DMA_IRQHandler+0x188>)
 8004012:	2102      	movs	r1, #2
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d038      	beq.n	800409c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004032:	e033      	b.n	800409c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f003 031c 	and.w	r3, r3, #28
 800403c:	2208      	movs	r2, #8
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02a      	beq.n	800409e <HAL_DMA_IRQHandler+0x176>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d025      	beq.n	800409e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 020e 	bic.w	r2, r2, #14
 8004060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f003 021c 	and.w	r2, r3, #28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2101      	movs	r1, #1
 8004070:	fa01 f202 	lsl.w	r2, r1, r2
 8004074:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800409c:	bf00      	nop
 800409e:	bf00      	nop
}
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40020080 	.word	0x40020080
 80040ac:	40020400 	.word	0x40020400
 80040b0:	40020000 	.word	0x40020000

080040b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f003 021c 	and.w	r2, r3, #28
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d108      	bne.n	8004114 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004112:	e007      	b.n	8004124 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
	...

08004130 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004140:	429a      	cmp	r2, r3
 8004142:	d813      	bhi.n	800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004150:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3b08      	subs	r3, #8
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e011      	b.n	8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004176:	4413      	add	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3b08      	subs	r3, #8
 8004184:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	3307      	adds	r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40020407 	.word	0x40020407
 80041b4:	cccccccd 	.word	0xcccccccd
 80041b8:	4002081c 	.word	0x4002081c
 80041bc:	40020880 	.word	0x40020880

080041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	1000823f 	.word	0x1000823f
 8004204:	40020940 	.word	0x40020940

08004208 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_FLASH_Program+0x80>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_FLASH_Program+0x1a>
 800421e:	2302      	movs	r3, #2
 8004220:	e02d      	b.n	800427e <HAL_FLASH_Program+0x76>
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_FLASH_Program+0x80>)
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004228:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_FLASH_Program+0x80>)
 800422a:	2200      	movs	r2, #0
 800422c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800422e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004232:	f000 f869 	bl	8004308 <FLASH_WaitForLastOperation>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11a      	bne.n	8004276 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424a:	68b8      	ldr	r0, [r7, #8]
 800424c:	f000 f8be 	bl	80043cc <FLASH_Program_DoubleWord>
 8004250:	e004      	b.n	800425c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	4619      	mov	r1, r3
 8004256:	68b8      	ldr	r0, [r7, #8]
 8004258:	f000 f8de 	bl	8004418 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800425c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004260:	f000 f852 	bl	8004308 <FLASH_WaitForLastOperation>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_FLASH_Program+0x84>)
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <HAL_FLASH_Program+0x84>)
 8004272:	4013      	ands	r3, r2
 8004274:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004276:	4b04      	ldr	r3, [pc, #16]	; (8004288 <HAL_FLASH_Program+0x80>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000378 	.word	0x20000378
 800428c:	58004000 	.word	0x58004000

08004290 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_FLASH_Unlock+0x38>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da0b      	bge.n	80042ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_FLASH_Unlock+0x38>)
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_FLASH_Unlock+0x3c>)
 80042a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <HAL_FLASH_Unlock+0x38>)
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_FLASH_Unlock+0x40>)
 80042ac:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_FLASH_Unlock+0x38>)
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da01      	bge.n	80042ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042ba:	79fb      	ldrb	r3, [r7, #7]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	58004000 	.word	0x58004000
 80042cc:	45670123 	.word	0x45670123
 80042d0:	cdef89ab 	.word	0xcdef89ab

080042d4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_FLASH_Lock+0x30>)
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_FLASH_Lock+0x30>)
 80042e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042e8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_FLASH_Lock+0x30>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db01      	blt.n	80042f6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80042f6:	79fb      	ldrb	r3, [r7, #7]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	58004000 	.word	0x58004000

08004308 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7fd fc64 	bl	8001bdc <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004316:	e009      	b.n	800432c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004318:	f7fd fc60 	bl	8001bdc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d801      	bhi.n	800432c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e047      	b.n	80043bc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d0ee      	beq.n	8004318 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 800434c:	2201      	movs	r2, #1
 800434e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004356:	4013      	ands	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <FLASH_WaitForLastOperation+0x6c>
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800436e:	4915      	ldr	r1, [pc, #84]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	618b      	str	r3, [r1, #24]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <FLASH_WaitForLastOperation+0x80>
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004386:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <FLASH_WaitForLastOperation+0xc0>)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e011      	b.n	80043bc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004398:	f7fd fc20 	bl	8001bdc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d801      	bhi.n	80043ac <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e007      	b.n	80043bc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <FLASH_WaitForLastOperation+0xbc>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b8:	d0ee      	beq.n	8004398 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	58004000 	.word	0x58004000
 80043c8:	20000378 	.word	0x20000378

080043cc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <FLASH_Program_DoubleWord+0x48>)
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <FLASH_Program_DoubleWord+0x48>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80043ea:	f3bf 8f6f 	isb	sy
}
 80043ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80043f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	000a      	movs	r2, r1
 80043fe:	2300      	movs	r3, #0
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	3104      	adds	r1, #4
 8004404:	4613      	mov	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	58004000 	.word	0x58004000

08004418 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800442e:	4b18      	ldr	r3, [pc, #96]	; (8004490 <FLASH_Program_Fast+0x78>)
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4a17      	ldr	r2, [pc, #92]	; (8004490 <FLASH_Program_Fast+0x78>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004438:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443a:	f3ef 8310 	mrs	r3, PRIMASK
 800443e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	3304      	adds	r3, #4
 8004454:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3304      	adds	r3, #4
 800445a:	617b      	str	r3, [r7, #20]
    row_index--;
 800445c:	7ffb      	ldrb	r3, [r7, #31]
 800445e:	3b01      	subs	r3, #1
 8004460:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004462:	7ffb      	ldrb	r3, [r7, #31]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ef      	bne.n	8004448 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004468:	bf00      	nop
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <FLASH_Program_Fast+0x78>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d0f8      	beq.n	800446a <FLASH_Program_Fast+0x52>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f383 8810 	msr	PRIMASK, r3
}
 8004482:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004484:	bf00      	nop
 8004486:	3724      	adds	r7, #36	; 0x24
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	58004000 	.word	0x58004000

08004494 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_FLASHEx_Erase+0xac>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_FLASHEx_Erase+0x16>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e046      	b.n	8004538 <HAL_FLASHEx_Erase+0xa4>
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <HAL_FLASHEx_Erase+0xac>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044b0:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_FLASHEx_Erase+0xac>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044ba:	f7ff ff25 	bl	8004308 <FLASH_WaitForLastOperation>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d133      	bne.n	8004530 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d108      	bne.n	80044e2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80044d0:	f000 f880 	bl	80045d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044d8:	f7ff ff16 	bl	8004308 <FLASH_WaitForLastOperation>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
 80044e0:	e024      	b.n	800452c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	e012      	b.n	8004518 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f000 f87e 	bl	80045f4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044fc:	f7ff ff04 	bl	8004308 <FLASH_WaitForLastOperation>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	601a      	str	r2, [r3, #0]
          break;
 8004510:	e00a      	b.n	8004528 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3301      	adds	r3, #1
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4413      	add	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	d3e4      	bcc.n	80044f2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004528:	f000 f8c0 	bl	80046ac <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800452c:	f000 f87a 	bl	8004624 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_FLASHEx_Erase+0xac>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]

  return status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000378 	.word	0x20000378

08004544 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_FLASHEx_Erase_IT+0x14>
 8004554:	2302      	movs	r3, #2
 8004556:	e034      	b.n	80045c2 <HAL_FLASHEx_Erase_IT+0x7e>
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800455e:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 800456a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800456c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004570:	f7ff feca 	bl	8004308 <FLASH_WaitForLastOperation>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e01c      	b.n	80045c0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <HAL_FLASHEx_Erase_IT+0x8c>)
 800458c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004590:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d105      	bne.n	80045a6 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 800459c:	2200      	movs	r2, #0
 800459e:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80045a0:	f000 f818 	bl	80045d4 <FLASH_MassErase>
 80045a4:	e00c      	b.n	80045c0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 80045ac:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4a06      	ldr	r2, [pc, #24]	; (80045cc <HAL_FLASHEx_Erase_IT+0x88>)
 80045b4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f81a 	bl	80045f4 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000378 	.word	0x20000378
 80045d0:	58004000 	.word	0x58004000

080045d4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <FLASH_MassErase+0x1c>)
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <FLASH_MassErase+0x1c>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6153      	str	r3, [r2, #20]
#endif
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	58004000 	.word	0x58004000

080045f4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <FLASH_PageErase+0x2c>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4313      	orrs	r3, r2
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <FLASH_PageErase+0x2c>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6153      	str	r3, [r2, #20]
#endif
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	58004000 	.word	0x58004000

08004624 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004630:	2b01      	cmp	r3, #1
 8004632:	d117      	bne.n	8004664 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800463a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800463e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004656:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004658:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800465e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004662:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004664:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b01      	cmp	r3, #1
 800466e:	d117      	bne.n	80046a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800467a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004682:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a06      	ldr	r2, [pc, #24]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800468e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004692:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <FLASH_FlushCaches+0x84>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <FLASH_FlushCaches+0x84>)
 800469a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800469e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	58004000 	.word	0x58004000

080046ac <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <FLASH_AcknowledgePageErase+0x1c>)
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <FLASH_AcknowledgePageErase+0x1c>)
 80046b6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80046ba:	f023 0302 	bic.w	r3, r3, #2
 80046be:	6153      	str	r3, [r2, #20]
#endif
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	58004000 	.word	0x58004000

080046cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046da:	e140      	b.n	800495e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2101      	movs	r1, #1
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	4013      	ands	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8132 	beq.w	8004958 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d005      	beq.n	800470c <HAL_GPIO_Init+0x40>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d130      	bne.n	800476e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	2203      	movs	r2, #3
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004742:	2201      	movs	r2, #1
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	f003 0201 	and.w	r2, r3, #1
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d017      	beq.n	80047aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	2203      	movs	r2, #3
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d123      	bne.n	80047fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	08da      	lsrs	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3208      	adds	r2, #8
 80047be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	220f      	movs	r2, #15
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	08da      	lsrs	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3208      	adds	r2, #8
 80047f8:	6939      	ldr	r1, [r7, #16]
 80047fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0203 	and.w	r2, r3, #3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 808c 	beq.w	8004958 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004840:	4a4e      	ldr	r2, [pc, #312]	; (800497c <HAL_GPIO_Init+0x2b0>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	2207      	movs	r2, #7
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800486a:	d00d      	beq.n	8004888 <HAL_GPIO_Init+0x1bc>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a44      	ldr	r2, [pc, #272]	; (8004980 <HAL_GPIO_Init+0x2b4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <HAL_GPIO_Init+0x1b8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a43      	ldr	r2, [pc, #268]	; (8004984 <HAL_GPIO_Init+0x2b8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_GPIO_Init+0x1b4>
 800487c:	2302      	movs	r3, #2
 800487e:	e004      	b.n	800488a <HAL_GPIO_Init+0x1be>
 8004880:	2307      	movs	r3, #7
 8004882:	e002      	b.n	800488a <HAL_GPIO_Init+0x1be>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_GPIO_Init+0x1be>
 8004888:	2300      	movs	r3, #0
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	f002 0203 	and.w	r2, r2, #3
 8004890:	0092      	lsls	r2, r2, #2
 8004892:	4093      	lsls	r3, r2
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800489a:	4938      	ldr	r1, [pc, #224]	; (800497c <HAL_GPIO_Init+0x2b0>)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a8:	4b37      	ldr	r3, [pc, #220]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048cc:	4a2e      	ldr	r2, [pc, #184]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048d2:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048f6:	4a24      	ldr	r2, [pc, #144]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 80048fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004902:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004922:	4a19      	ldr	r2, [pc, #100]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004930:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004950:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <HAL_GPIO_Init+0x2bc>)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3301      	adds	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f47f aeb7 	bne.w	80046dc <HAL_GPIO_Init+0x10>
  }
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	48000400 	.word	0x48000400
 8004984:	48000800 	.word	0x48000800
 8004988:	58000800 	.word	0x58000800

0800498c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800499a:	e0af      	b.n	8004afc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800499c:	2201      	movs	r2, #1
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a2 	beq.w	8004af6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049b2:	4a59      	ldr	r2, [pc, #356]	; (8004b18 <HAL_GPIO_DeInit+0x18c>)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	2207      	movs	r2, #7
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049da:	d00d      	beq.n	80049f8 <HAL_GPIO_DeInit+0x6c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a4f      	ldr	r2, [pc, #316]	; (8004b1c <HAL_GPIO_DeInit+0x190>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d007      	beq.n	80049f4 <HAL_GPIO_DeInit+0x68>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a4e      	ldr	r2, [pc, #312]	; (8004b20 <HAL_GPIO_DeInit+0x194>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d101      	bne.n	80049f0 <HAL_GPIO_DeInit+0x64>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e004      	b.n	80049fa <HAL_GPIO_DeInit+0x6e>
 80049f0:	2307      	movs	r3, #7
 80049f2:	e002      	b.n	80049fa <HAL_GPIO_DeInit+0x6e>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_GPIO_DeInit+0x6e>
 80049f8:	2300      	movs	r3, #0
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	f002 0203 	and.w	r2, r2, #3
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	4093      	lsls	r3, r2
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d136      	bne.n	8004a78 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004a0a:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	4943      	ldr	r1, [pc, #268]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a1c:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	493f      	ldr	r1, [pc, #252]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a2e:	4b3d      	ldr	r3, [pc, #244]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	493b      	ldr	r1, [pc, #236]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a3c:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	4937      	ldr	r1, [pc, #220]	; (8004b24 <HAL_GPIO_DeInit+0x198>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	2207      	movs	r2, #7
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <HAL_GPIO_DeInit+0x18c>)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	43da      	mvns	r2, r3
 8004a6a:	482b      	ldr	r0, [pc, #172]	; (8004b18 <HAL_GPIO_DeInit+0x18c>)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	089b      	lsrs	r3, r3, #2
 8004a70:	400a      	ands	r2, r1
 8004a72:	3302      	adds	r3, #2
 8004a74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2103      	movs	r1, #3
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	08da      	lsrs	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3208      	adds	r2, #8
 8004a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	08d2      	lsrs	r2, r2, #3
 8004aac:	4019      	ands	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3208      	adds	r2, #8
 8004ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2103      	movs	r1, #3
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	401a      	ands	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	2103      	movs	r1, #3
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	401a      	ands	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f af49 	bne.w	800499c <HAL_GPIO_DeInit+0x10>
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	48000400 	.word	0x48000400
 8004b20:	48000800 	.word	0x48000800
 8004b24:	58000800 	.word	0x58000800

08004b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	807b      	strh	r3, [r7, #2]
 8004b34:	4613      	mov	r3, r2
 8004b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b38:	787b      	ldrb	r3, [r7, #1]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b44:	e002      	b.n	8004b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a03      	ldr	r2, [pc, #12]	; (8004b70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	58000400 	.word	0x58000400

08004b74 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b92:	d10d      	bne.n	8004bb0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004b94:	f000 f83c 	bl	8004c10 <HAL_PWREx_DisableLowPowerRunMode>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004b9e:	e015      	b.n	8004bcc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004bac:	f000 f822 	bl	8004bf4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004bb6:	f023 0304 	bic.w	r3, r3, #4
 8004bba:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004bc2:	bf30      	wfi
 8004bc4:	e002      	b.n	8004bcc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004bc6:	bf40      	sev
    __WFE();
 8004bc8:	bf20      	wfe
    __WFE();
 8004bca:	bf20      	wfe
  }
}
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	58000400 	.word	0x58000400
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_PWREx_GetVoltageRange+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	58000400 	.word	0x58000400

08004bf4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c02:	6013      	str	r3, [r2, #0]
}
 8004c04:	bf00      	nop
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	58000400 	.word	0x58000400

08004c10 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c20:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2232      	movs	r2, #50	; 0x32
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	0c9b      	lsrs	r3, r3, #18
 8004c34:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004c36:	e002      	b.n	8004c3e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4a:	d102      	bne.n	8004c52 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f2      	bne.n	8004c38 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5e:	d101      	bne.n	8004c64 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e000      	b.n	8004c66 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	58000400 	.word	0x58000400
 8004c74:	20000000 	.word	0x20000000
 8004c78:	431bde83 	.word	0x431bde83

08004c7c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	4a0e      	ldr	r2, [pc, #56]	; (8004cc8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004c9c:	f043 0304 	orr.w	r3, r3, #4
 8004ca0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ca8:	bf30      	wfi
 8004caa:	e002      	b.n	8004cb2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004cac:	bf40      	sev
    __WFE();
 8004cae:	bf20      	wfe
    __WFE();
 8004cb0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004cb8:	f023 0304 	bic.w	r3, r3, #4
 8004cbc:	6113      	str	r3, [r2, #16]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	58000400 	.word	0x58000400
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce0:	d101      	bne.n	8004ce6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr
 8004cf0:	58000400 	.word	0x58000400

08004cf4 <LL_RCC_HSE_EnableTcxo>:
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <LL_RCC_HSE_DisableTcxo>:
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3e:	d101      	bne.n	8004d44 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <LL_RCC_HSE_Enable>:
{
 8004d4e:	b480      	push	{r7}
 8004d50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <LL_RCC_HSE_Disable>:
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <LL_RCC_HSE_IsReady>:
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d98:	d101      	bne.n	8004d9e <LL_RCC_HSE_IsReady+0x18>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <LL_RCC_HSE_IsReady+0x1a>
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <LL_RCC_HSI_Enable>:
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6013      	str	r3, [r2, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_HSI_Disable>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd6:	6013      	str	r3, [r2, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_HSI_IsReady>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df2:	d101      	bne.n	8004df8 <LL_RCC_HSI_IsReady+0x18>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <LL_RCC_HSI_IsReady+0x1a>
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <LL_RCC_LSE_IsReady>:
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d101      	bne.n	8004e42 <LL_RCC_LSE_IsReady+0x18>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <LL_RCC_LSE_IsReady+0x1a>
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_LSI_Enable>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <LL_RCC_LSI_Disable>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <LL_RCC_LSI_IsReady>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d101      	bne.n	8004ea4 <LL_RCC_LSI_IsReady+0x18>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <LL_RCC_LSI_IsReady+0x1a>
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <LL_RCC_MSI_Enable>:
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6013      	str	r3, [r2, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <LL_RCC_MSI_Disable>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_MSI_IsReady>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d101      	bne.n	8004efc <LL_RCC_MSI_IsReady+0x16>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <LL_RCC_MSI_IsReady+0x18>
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004f06:	b480      	push	{r7}
 8004f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d101      	bne.n	8004f1c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <LL_RCC_MSI_GetRange>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	604b      	str	r3, [r1, #4]
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_SetSysClkSource>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_GetSysClkSource>:
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_SetAHBPrescaler>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	608b      	str	r3, [r1, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <LL_RCC_SetAHB3Prescaler>:
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fee:	f023 020f 	bic.w	r2, r3, #15
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <LL_RCC_SetAPB1Prescaler>:
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800501c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <LL_RCC_SetAPB2Prescaler>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <LL_RCC_GetAHBPrescaler>:
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <LL_RCC_GetAHB3Prescaler>:
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005074:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <LL_RCC_GetAPB1Prescaler>:
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <LL_RCC_GetAPB2Prescaler>:
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c4:	6013      	str	r3, [r2, #0]
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e0:	6013      	str	r3, [r2, #0]
}
 80050e2:	bf00      	nop
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80050ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050fc:	d101      	bne.n	8005102 <LL_RCC_PLL_IsReady+0x18>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <LL_RCC_PLL_IsReady+0x1a>
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005132:	4618      	mov	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f003 0303 	and.w	r3, r3, #3
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d101      	bne.n	800517e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d101      	bne.n	80051a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051be:	d101      	bne.n	80051c4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051e0:	d101      	bne.n	80051e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e38b      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005202:	f7ff fece 	bl	8004fa2 <LL_RCC_GetSysClkSource>
 8005206:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005208:	f7ff ffa2 	bl	8005150 <LL_RCC_PLL_GetMainSource>
 800520c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80c9 	beq.w	80053ae <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_RCC_OscConfig+0x3e>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d17b      	bne.n	8005320 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d178      	bne.n	8005320 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800522e:	f7ff fe5a 	bl	8004ee6 <LL_RCC_MSI_IsReady>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCC_OscConfig+0x54>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e36a      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_RCC_OscConfig+0x72>
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005260:	e006      	b.n	8005270 <HAL_RCC_OscConfig+0x80>
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005270:	4293      	cmp	r3, r2
 8005272:	d222      	bcs.n	80052ba <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fd51 	bl	8005d20 <RCC_SetFlashLatencyFromMSIRange>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e348      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005292:	f043 0308 	orr.w	r3, r3, #8
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fe4e 	bl	8004f54 <LL_RCC_MSI_SetCalibTrimming>
 80052b8:	e021      	b.n	80052fe <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c4:	f043 0308 	orr.w	r3, r3, #8
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fe35 	bl	8004f54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fd16 	bl	8005d20 <RCC_SetFlashLatencyFromMSIRange>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e30d      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052fe:	f000 fcd7 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005302:	4603      	mov	r3, r0
 8005304:	4aa1      	ldr	r2, [pc, #644]	; (800558c <HAL_RCC_OscConfig+0x39c>)
 8005306:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005308:	4ba1      	ldr	r3, [pc, #644]	; (8005590 <HAL_RCC_OscConfig+0x3a0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fc fc5b 	bl	8001bc8 <HAL_InitTick>
 8005312:	4603      	mov	r3, r0
 8005314:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005316:	7cfb      	ldrb	r3, [r7, #19]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d047      	beq.n	80053ac <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	e2fc      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02c      	beq.n	8005382 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005328:	f7ff fdc1 	bl	8004eae <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800532c:	f7fc fc56 	bl	8001bdc <HAL_GetTick>
 8005330:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005334:	f7fc fc52 	bl	8001bdc <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e2e9      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005346:	f7ff fdce 	bl	8004ee6 <LL_RCC_MSI_IsReady>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f1      	beq.n	8005334 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800535a:	f043 0308 	orr.w	r3, r3, #8
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fdea 	bl	8004f54 <LL_RCC_MSI_SetCalibTrimming>
 8005380:	e015      	b.n	80053ae <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005382:	f7ff fda2 	bl	8004eca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005386:	f7fc fc29 	bl	8001bdc <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800538e:	f7fc fc25 	bl	8001bdc <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e2bc      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80053a0:	f7ff fda1 	bl	8004ee6 <LL_RCC_MSI_IsReady>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f1      	bne.n	800538e <HAL_RCC_OscConfig+0x19e>
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d05f      	beq.n	800547a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d005      	beq.n	80053cc <HAL_RCC_OscConfig+0x1dc>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d10d      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d10a      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053cc:	f7ff fcdb 	bl	8004d86 <LL_RCC_HSE_IsReady>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d050      	beq.n	8005478 <HAL_RCC_OscConfig+0x288>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d14c      	bne.n	8005478 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e29b      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d102      	bne.n	8005408 <HAL_RCC_OscConfig+0x218>
 8005402:	f7ff fca4 	bl	8004d4e <LL_RCC_HSE_Enable>
 8005406:	e00d      	b.n	8005424 <HAL_RCC_OscConfig+0x234>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005410:	d104      	bne.n	800541c <HAL_RCC_OscConfig+0x22c>
 8005412:	f7ff fc6f 	bl	8004cf4 <LL_RCC_HSE_EnableTcxo>
 8005416:	f7ff fc9a 	bl	8004d4e <LL_RCC_HSE_Enable>
 800541a:	e003      	b.n	8005424 <HAL_RCC_OscConfig+0x234>
 800541c:	f7ff fca5 	bl	8004d6a <LL_RCC_HSE_Disable>
 8005420:	f7ff fc76 	bl	8004d10 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d012      	beq.n	8005452 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fc fbd6 	bl	8001bdc <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fc fbd2 	bl	8001bdc <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e269      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005446:	f7ff fc9e 	bl	8004d86 <LL_RCC_HSE_IsReady>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f1      	beq.n	8005434 <HAL_RCC_OscConfig+0x244>
 8005450:	e013      	b.n	800547a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fc fbc3 	bl	8001bdc <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545a:	f7fc fbbf 	bl	8001bdc <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b64      	cmp	r3, #100	; 0x64
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e256      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800546c:	f7ff fc8b 	bl	8004d86 <LL_RCC_HSE_IsReady>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f1      	bne.n	800545a <HAL_RCC_OscConfig+0x26a>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d04b      	beq.n	800551e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b04      	cmp	r3, #4
 800548a:	d005      	beq.n	8005498 <HAL_RCC_OscConfig+0x2a8>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d113      	bne.n	80054ba <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d110      	bne.n	80054ba <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005498:	f7ff fca2 	bl	8004de0 <LL_RCC_HSI_IsReady>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x2be>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e235      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fca5 	bl	8004e02 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b8:	e031      	b.n	800551e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d019      	beq.n	80054f6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c2:	f7ff fc71 	bl	8004da8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc fb89 	bl	8001bdc <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fc fb85 	bl	8001bdc <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e21c      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80054e0:	f7ff fc7e 	bl	8004de0 <LL_RCC_HSI_IsReady>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f1      	beq.n	80054ce <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fc87 	bl	8004e02 <LL_RCC_HSI_SetCalibTrimming>
 80054f4:	e013      	b.n	800551e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f6:	f7ff fc65 	bl	8004dc4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fa:	f7fc fb6f 	bl	8001bdc <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005502:	f7fc fb6b 	bl	8001bdc <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e202      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005514:	f7ff fc64 	bl	8004de0 <LL_RCC_HSI_IsReady>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f1      	bne.n	8005502 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d06f      	beq.n	800560a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d057      	beq.n	80055e2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	429a      	cmp	r2, r3
 8005548:	d036      	beq.n	80055b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e1db      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d018      	beq.n	800559e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800556c:	f7ff fc7e 	bl	8004e6c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005570:	f7fc fb34 	bl	8001bdc <HAL_GetTick>
 8005574:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005576:	e00d      	b.n	8005594 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fc fb30 	bl	8001bdc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b11      	cmp	r3, #17
 8005584:	d906      	bls.n	8005594 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1c7      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
 800558a:	bf00      	nop
 800558c:	20000000 	.word	0x20000000
 8005590:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8005594:	f7ff fc7a 	bl	8004e8c <LL_RCC_LSI_IsReady>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ec      	bne.n	8005578 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a6:	f023 0210 	bic.w	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b8:	f7ff fc48 	bl	8004e4c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fc fb0e 	bl	8001bdc <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fc fb0a 	bl	8001bdc <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b11      	cmp	r3, #17
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1a1      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80055d6:	f7ff fc59 	bl	8004e8c <LL_RCC_LSI_IsReady>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f1      	beq.n	80055c4 <HAL_RCC_OscConfig+0x3d4>
 80055e0:	e013      	b.n	800560a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e2:	f7ff fc43 	bl	8004e6c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e6:	f7fc faf9 	bl	8001bdc <HAL_GetTick>
 80055ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ee:	f7fc faf5 	bl	8001bdc <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b11      	cmp	r3, #17
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e18c      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005600:	f7ff fc44 	bl	8004e8c <LL_RCC_LSI_IsReady>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f1      	bne.n	80055ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80d8 	beq.w	80057c8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005618:	f7ff fb5a 	bl	8004cd0 <LL_PWR_IsEnabledBkUpAccess>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d113      	bne.n	800564a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005622:	f7ff fa99 	bl	8004b58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005626:	f7fc fad9 	bl	8001bdc <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562e:	f7fc fad5 	bl	8001bdc <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e16c      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005640:	f7ff fb46 	bl	8004cd0 <LL_PWR_IsEnabledBkUpAccess>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f1      	beq.n	800562e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d07b      	beq.n	800574a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2b85      	cmp	r3, #133	; 0x85
 8005658:	d003      	beq.n	8005662 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d109      	bne.n	8005676 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566e:	f043 0304 	orr.w	r3, r3, #4
 8005672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005676:	f7fc fab1 	bl	8001bdc <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fc faa3 	bl	8001bdc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e138      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80056a8:	f7ff fbbf 	bl	8004e2a <LL_RCC_LSE_IsReady>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0ef      	beq.n	8005692 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b81      	cmp	r3, #129	; 0x81
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b85      	cmp	r3, #133	; 0x85
 80056c0:	d121      	bne.n	8005706 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fc fa8b 	bl	8001bdc <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056dc:	e00a      	b.n	80056f4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f7fc fa7d 	bl	8001bdc <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e112      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ec      	beq.n	80056de <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005704:	e060      	b.n	80057c8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc fa69 	bl	8001bdc <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc fa5b 	bl	8001bdc <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0f0      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ec      	bne.n	8005722 <HAL_RCC_OscConfig+0x532>
 8005748:	e03e      	b.n	80057c8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fc fa47 	bl	8001bdc <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800575c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fc fa39 	bl	8001bdc <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e0ce      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1ec      	bne.n	8005766 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fc fa26 	bl	8001bdc <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80057a6:	e00a      	b.n	80057be <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fc fa18 	bl	8001bdc <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0ad      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80057be:	f7ff fb34 	bl	8004e2a <LL_RCC_LSE_IsReady>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1ef      	bne.n	80057a8 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80a3 	beq.w	8005918 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d076      	beq.n	80058c6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d14b      	bne.n	8005878 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e0:	f7ff fc75 	bl	80050ce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fc f9fa 	bl	8001bdc <HAL_GetTick>
 80057e8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fc f9f6 	bl	8001bdc <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b0a      	cmp	r3, #10
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e08d      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80057fe:	f7ff fc74 	bl	80050ea <LL_RCC_PLL_IsReady>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f1      	bne.n	80057ec <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	4b45      	ldr	r3, [pc, #276]	; (8005924 <HAL_RCC_OscConfig+0x734>)
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800581a:	4311      	orrs	r1, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005820:	0212      	lsls	r2, r2, #8
 8005822:	4311      	orrs	r1, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005828:	4311      	orrs	r1, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800582e:	4311      	orrs	r1, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005834:	430a      	orrs	r2, r1
 8005836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583a:	4313      	orrs	r3, r2
 800583c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800583e:	f7ff fc38 	bl	80050b2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fc f9c3 	bl	8001bdc <HAL_GetTick>
 8005856:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fc f9bf 	bl	8001bdc <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b0a      	cmp	r3, #10
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e056      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800586c:	f7ff fc3d 	bl	80050ea <LL_RCC_PLL_IsReady>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f1      	beq.n	800585a <HAL_RCC_OscConfig+0x66a>
 8005876:	e04f      	b.n	8005918 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005878:	f7ff fc29 	bl	80050ce <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005896:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800589a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fc f99c 	bl	8001bdc <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fc f998 	bl	8001bdc <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b0a      	cmp	r3, #10
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e02f      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80058ba:	f7ff fc16 	bl	80050ea <LL_RCC_PLL_IsReady>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f1      	bne.n	80058a8 <HAL_RCC_OscConfig+0x6b8>
 80058c4:	e028      	b.n	8005918 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e023      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f003 0203 	and.w	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d115      	bne.n	8005914 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d10e      	bne.n	8005914 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	429a      	cmp	r2, r3
 8005904:	d106      	bne.n	8005914 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	11c1808c 	.word	0x11c1808c

08005928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e10f      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800593c:	4b89      	ldr	r3, [pc, #548]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d91b      	bls.n	8005982 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b86      	ldr	r3, [pc, #536]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 0207 	bic.w	r2, r3, #7
 8005952:	4984      	ldr	r1, [pc, #528]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595a:	f7fc f93f 	bl	8001bdc <HAL_GetTick>
 800595e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005960:	e008      	b.n	8005974 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005962:	f7fc f93b 	bl	8001bdc <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0f3      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005974:	4b7b      	ldr	r3, [pc, #492]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d1ef      	bne.n	8005962 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d016      	beq.n	80059bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fb10 	bl	8004fb8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005998:	f7fc f920 	bl	8001bdc <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059a0:	f7fc f91c 	bl	8001bdc <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0d4      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059b2:	f7ff fbd8 	bl	8005166 <LL_RCC_IsActiveFlag_HPRE>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f1      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d016      	beq.n	80059f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fb06 	bl	8004fde <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059d2:	f7fc f903 	bl	8001bdc <HAL_GetTick>
 80059d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059da:	f7fc f8ff 	bl	8001bdc <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0b7      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059ec:	f7ff fbcc 	bl	8005188 <LL_RCC_IsActiveFlag_SHDHPRE>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f1      	beq.n	80059da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff faff 	bl	800500a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a0c:	f7fc f8e6 	bl	8001bdc <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a14:	f7fc f8e2 	bl	8001bdc <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e09a      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a26:	f7ff fbc1 	bl	80051ac <LL_RCC_IsActiveFlag_PPRE1>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f1      	beq.n	8005a14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d017      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff faf4 	bl	8005030 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a48:	f7fc f8c8 	bl	8001bdc <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a50:	f7fc f8c4 	bl	8001bdc <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e07c      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a62:	f7ff fbb4 	bl	80051ce <LL_RCC_IsActiveFlag_PPRE2>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f1      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d043      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a80:	f7ff f981 	bl	8004d86 <LL_RCC_HSE_IsReady>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11e      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e066      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d106      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a96:	f7ff fb28 	bl	80050ea <LL_RCC_PLL_IsReady>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d113      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e05b      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005aac:	f7ff fa1b 	bl	8004ee6 <LL_RCC_MSI_IsReady>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d108      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e050      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005aba:	f7ff f991 	bl	8004de0 <LL_RCC_HSI_IsReady>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e049      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fa55 	bl	8004f7c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad2:	f7fc f883 	bl	8001bdc <HAL_GetTick>
 8005ad6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ada:	f7fc f87f 	bl	8001bdc <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e035      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af0:	f7ff fa57 	bl	8004fa2 <LL_RCC_GetSysClkSource>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1ec      	bne.n	8005ada <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b00:	4b18      	ldr	r3, [pc, #96]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d21b      	bcs.n	8005b46 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0e:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f023 0207 	bic.w	r2, r3, #7
 8005b16:	4913      	ldr	r1, [pc, #76]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1e:	f7fc f85d 	bl	8001bdc <HAL_GetTick>
 8005b22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b26:	f7fc f859 	bl	8001bdc <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e011      	b.n	8005b5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <HAL_RCC_ClockConfig+0x23c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d1ef      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b46:	f000 f8b3 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 8005b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fc f837 	bl	8001bc8 <HAL_InitTick>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	58004000 	.word	0x58004000
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	20000004 	.word	0x20000004

08005b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7e:	f7ff fa10 	bl	8004fa2 <LL_RCC_GetSysClkSource>
 8005b82:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b84:	f7ff fae4 	bl	8005150 <LL_RCC_PLL_GetMainSource>
 8005b88:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x2c>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d139      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d136      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005b9c:	f7ff f9b3 	bl	8004f06 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d115      	bne.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x62>
 8005ba6:	f7ff f9ae 	bl	8004f06 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d106      	bne.n	8005bbe <HAL_RCC_GetSysClockFreq+0x4e>
 8005bb0:	f7ff f9b9 	bl	8004f26 <LL_RCC_MSI_GetRange>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	e005      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x5a>
 8005bbe:	f7ff f9bd 	bl	8004f3c <LL_RCC_MSI_GetRangeAfterStandby>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	4a36      	ldr	r2, [pc, #216]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd0:	e014      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x8c>
 8005bd2:	f7ff f998 	bl	8004f06 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_GetSysClockFreq+0x7a>
 8005bdc:	f7ff f9a3 	bl	8004f26 <LL_RCC_MSI_GetRange>
 8005be0:	4603      	mov	r3, r0
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	e005      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x86>
 8005bea:	f7ff f9a7 	bl	8004f3c <LL_RCC_MSI_GetRangeAfterStandby>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d115      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c08:	e012      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d102      	bne.n	8005c16 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e00c      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d109      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c1c:	f7ff f886 	bl	8004d2c <LL_RCC_HSE_IsEnabledDiv2>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e001      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	; (8005cac <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c2e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c30:	f7ff f9b7 	bl	8004fa2 <LL_RCC_GetSysClkSource>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b0c      	cmp	r3, #12
 8005c38:	d12f      	bne.n	8005c9a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005c3a:	f7ff fa89 	bl	8005150 <LL_RCC_PLL_GetMainSource>
 8005c3e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d003      	beq.n	8005c4e <HAL_RCC_GetSysClockFreq+0xde>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d003      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0xe4>
 8005c4c:	e00d      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c50:	60fb      	str	r3, [r7, #12]
        break;
 8005c52:	e00d      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c54:	f7ff f86a 	bl	8004d2c <LL_RCC_HSE_IsEnabledDiv2>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d102      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c60:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005c62:	e005      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c66:	60fb      	str	r3, [r7, #12]
        break;
 8005c68:	e002      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	60fb      	str	r3, [r7, #12]
        break;
 8005c6e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c70:	f7ff fa4c 	bl	800510c <LL_RCC_PLL_GetN>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	fb03 f402 	mul.w	r4, r3, r2
 8005c7c:	f7ff fa5d 	bl	800513a <LL_RCC_PLL_GetDivider>
 8005c80:	4603      	mov	r3, r0
 8005c82:	091b      	lsrs	r3, r3, #4
 8005c84:	3301      	adds	r3, #1
 8005c86:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c8a:	f7ff fa4b 	bl	8005124 <LL_RCC_PLL_GetR>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	0f5b      	lsrs	r3, r3, #29
 8005c92:	3301      	adds	r3, #1
 8005c94:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c98:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005c9a:	697b      	ldr	r3, [r7, #20]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd90      	pop	{r4, r7, pc}
 8005ca4:	0801b618 	.word	0x0801b618
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	01e84800 	.word	0x01e84800

08005cb0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb0:	b598      	push	{r3, r4, r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005cb4:	f7ff ff5c 	bl	8005b70 <HAL_RCC_GetSysClockFreq>
 8005cb8:	4604      	mov	r4, r0
 8005cba:	f7ff f9cc 	bl	8005056 <LL_RCC_GetAHBPrescaler>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4a03      	ldr	r2, [pc, #12]	; (8005cd4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ccc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd98      	pop	{r3, r4, r7, pc}
 8005cd4:	0801b5b8 	.word	0x0801b5b8

08005cd8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd8:	b598      	push	{r3, r4, r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cdc:	f7ff ffe8 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	f7ff f9d0 	bl	8005086 <LL_RCC_GetAPB1Prescaler>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	4a03      	ldr	r2, [pc, #12]	; (8005cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd98      	pop	{r3, r4, r7, pc}
 8005cf8:	0801b5f8 	.word	0x0801b5f8

08005cfc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cfc:	b598      	push	{r3, r4, r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d00:	f7ff ffd6 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005d04:	4604      	mov	r4, r0
 8005d06:	f7ff f9c9 	bl	800509c <LL_RCC_GetAPB2Prescaler>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	0adb      	lsrs	r3, r3, #11
 8005d0e:	4a03      	ldr	r2, [pc, #12]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd98      	pop	{r3, r4, r7, pc}
 8005d1c:	0801b5f8 	.word	0x0801b5f8

08005d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d36:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005d38:	f7ff f998 	bl	800506c <LL_RCC_GetAHB3Prescaler>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005d56:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5a:	0c9c      	lsrs	r4, r3, #18
 8005d5c:	f7fe ff3e 	bl	8004bdc <HAL_PWREx_GetVoltageRange>
 8005d60:	4603      	mov	r3, r0
 8005d62:	4619      	mov	r1, r3
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 f80b 	bl	8005d80 <RCC_SetFlashLatency>
 8005d6a:	4603      	mov	r3, r0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd90      	pop	{r4, r7, pc}
 8005d74:	0801b618 	.word	0x0801b618
 8005d78:	0801b5b8 	.word	0x0801b5b8
 8005d7c:	431bde83 	.word	0x431bde83

08005d80 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08e      	sub	sp, #56	; 0x38
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005d8a:	4a3a      	ldr	r2, [pc, #232]	; (8005e74 <RCC_SetFlashLatency+0xf4>)
 8005d8c:	f107 0320 	add.w	r3, r7, #32
 8005d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d94:	6018      	str	r0, [r3, #0]
 8005d96:	3304      	adds	r3, #4
 8005d98:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005d9a:	4a37      	ldr	r2, [pc, #220]	; (8005e78 <RCC_SetFlashLatency+0xf8>)
 8005d9c:	f107 0318 	add.w	r3, r7, #24
 8005da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005da4:	6018      	str	r0, [r3, #0]
 8005da6:	3304      	adds	r3, #4
 8005da8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005daa:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <RCC_SetFlashLatency+0xfc>)
 8005dac:	f107 030c 	add.w	r3, r7, #12
 8005db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005db6:	2300      	movs	r3, #0
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc0:	d11b      	bne.n	8005dfa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc6:	e014      	b.n	8005df2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	3338      	adds	r3, #56	; 0x38
 8005dce:	443b      	add	r3, r7
 8005dd0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d807      	bhi.n	8005dec <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	3338      	adds	r3, #56	; 0x38
 8005de2:	443b      	add	r3, r7
 8005de4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dea:	e021      	b.n	8005e30 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	3301      	adds	r3, #1
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d9e7      	bls.n	8005dc8 <RCC_SetFlashLatency+0x48>
 8005df8:	e01a      	b.n	8005e30 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfe:	e014      	b.n	8005e2a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	3338      	adds	r3, #56	; 0x38
 8005e06:	443b      	add	r3, r7
 8005e08:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d807      	bhi.n	8005e24 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	3338      	adds	r3, #56	; 0x38
 8005e1a:	443b      	add	r3, r7
 8005e1c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e22:	e005      	b.n	8005e30 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	3301      	adds	r3, #1
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d9e7      	bls.n	8005e00 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <RCC_SetFlashLatency+0x100>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 0207 	bic.w	r2, r3, #7
 8005e38:	4911      	ldr	r1, [pc, #68]	; (8005e80 <RCC_SetFlashLatency+0x100>)
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e40:	f7fb fecc 	bl	8001bdc <HAL_GetTick>
 8005e44:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e46:	e008      	b.n	8005e5a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e48:	f7fb fec8 	bl	8001bdc <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e007      	b.n	8005e6a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <RCC_SetFlashLatency+0x100>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1ef      	bne.n	8005e48 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3738      	adds	r7, #56	; 0x38
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	0801b0e0 	.word	0x0801b0e0
 8005e78:	0801b0e8 	.word	0x0801b0e8
 8005e7c:	0801b0f0 	.word	0x0801b0f0
 8005e80:	58004000 	.word	0x58004000

08005e84 <LL_RCC_LSE_IsReady>:
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d101      	bne.n	8005e9c <LL_RCC_LSE_IsReady+0x18>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <LL_RCC_LSE_IsReady+0x1a>
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <LL_RCC_SetUSARTClockSource>:
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr

08005ed6 <LL_RCC_SetI2SClockSource>:
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <LL_RCC_SetLPUARTClockSource>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr

08005f2a <LL_RCC_SetI2CClockSource>:
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f42:	43db      	mvns	r3, r3
 8005f44:	401a      	ands	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <LL_RCC_SetLPTIMClockSource>:
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0c1b      	lsrs	r3, r3, #16
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <LL_RCC_SetRNGClockSource>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <LL_RCC_SetADCClockSource>:
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <LL_RCC_SetRTCClockSource>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr

08006012 <LL_RCC_GetRTCClockSource>:
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006022:	4618      	mov	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <LL_RCC_ForceBackupDomainReset>:
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800603a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006042:	bf00      	nop
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <LL_RCC_ReleaseBackupDomainReset>:
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006062:	bf00      	nop
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr
	...

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006078:	2300      	movs	r3, #0
 800607a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800607c:	2300      	movs	r3, #0
 800607e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d058      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800608c:	f7fe fd64 	bl	8004b58 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006090:	f7fb fda4 	bl	8001bdc <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006096:	e009      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006098:	f7fb fda0 	bl	8001bdc <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d902      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	74fb      	strb	r3, [r7, #19]
        break;
 80060aa:	e006      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80060ac:	4b7b      	ldr	r3, [pc, #492]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b8:	d1ee      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80060ba:	7cfb      	ldrb	r3, [r7, #19]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d13c      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80060c0:	f7ff ffa7 	bl	8006012 <LL_RCC_GetRTCClockSource>
 80060c4:	4602      	mov	r2, r0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d00f      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060da:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060dc:	f7ff ffa5 	bl	800602a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e0:	f7ff ffb3 	bl	800604a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d014      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fd70 	bl	8001bdc <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80060fe:	e00b      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006100:	f7fb fd6c 	bl	8001bdc <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	; 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d902      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	74fb      	strb	r3, [r7, #19]
            break;
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006118:	f7ff feb4 	bl	8005e84 <LL_RCC_LSE_IsReady>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d1ee      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006122:	7cfb      	ldrb	r3, [r7, #19]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff5b 	bl	8005fe8 <LL_RCC_SetRTCClockSource>
 8006132:	e004      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	74bb      	strb	r3, [r7, #18]
 8006138:	e001      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	7cfb      	ldrb	r3, [r7, #19]
 800613c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fea9 	bl	8005ea6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fe9e 	bl	8005ea6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fec0 	bl	8005f00 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fee6 	bl	8005f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff fedb 	bl	8005f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fed0 	bl	8005f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d004      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fea9 	bl	8005f2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fe9e 	bl	8005f2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d004      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fe93 	bl	8005f2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	d011      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fe5e 	bl	8005ed6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006222:	d107      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800622e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006232:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d010      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fea5 	bl	8005f94 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800625c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006260:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d011      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fea3 	bl	8005fbe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006280:	d107      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800628c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006290:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006292:	7cbb      	ldrb	r3, [r7, #18]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	58000400 	.word	0x58000400

080062a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d068      	beq.n	8006384 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb f9e4 	bl	8001694 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d4:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <HAL_RTC_Init+0xf0>)
 80062d6:	22ca      	movs	r2, #202	; 0xca
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <HAL_RTC_Init+0xf0>)
 80062dc:	2253      	movs	r2, #83	; 0x53
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa0f 	bl	8006704 <RTC_EnterInitMode>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d13f      	bne.n	8006370 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <HAL_RTC_Init+0xf0>)
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_RTC_Init+0xf0>)
 80062f6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80062fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fe:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006300:	4b23      	ldr	r3, [pc, #140]	; (8006390 <HAL_RTC_Init+0xf0>)
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	4319      	orrs	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	430b      	orrs	r3, r1
 8006314:	491e      	ldr	r1, [pc, #120]	; (8006390 <HAL_RTC_Init+0xf0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	491a      	ldr	r1, [pc, #104]	; (8006390 <HAL_RTC_Init+0xf0>)
 8006326:	4313      	orrs	r3, r2
 8006328:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800632a:	4b19      	ldr	r3, [pc, #100]	; (8006390 <HAL_RTC_Init+0xf0>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	430b      	orrs	r3, r1
 800633c:	4914      	ldr	r1, [pc, #80]	; (8006390 <HAL_RTC_Init+0xf0>)
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa12 	bl	800676c <RTC_ExitInitMode>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10e      	bne.n	8006370 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <HAL_RTC_Init+0xf0>)
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a19      	ldr	r1, [r3, #32]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	4319      	orrs	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	430b      	orrs	r3, r1
 800636a:	4909      	ldr	r1, [pc, #36]	; (8006390 <HAL_RTC_Init+0xf0>)
 800636c:	4313      	orrs	r3, r2
 800636e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <HAL_RTC_Init+0xf0>)
 8006372:	22ff      	movs	r2, #255	; 0xff
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40002800 	.word	0x40002800

08006394 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_RTC_SetAlarm_IT+0x1e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0f3      	b.n	800659a <HAL_RTC_SetAlarm_IT+0x206>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80063c2:	4b78      	ldr	r3, [pc, #480]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ca:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	d06a      	beq.n	80064aa <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d13a      	bne.n	8006450 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80063da:	4b72      	ldr	r3, [pc, #456]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 f9f5 	bl	80067e8 <RTC_ByteToBcd2>
 80063fe:	4603      	mov	r3, r0
 8006400:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f9ee 	bl	80067e8 <RTC_ByteToBcd2>
 800640c:	4603      	mov	r3, r0
 800640e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006410:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	789b      	ldrb	r3, [r3, #2]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f9e6 	bl	80067e8 <RTC_ByteToBcd2>
 800641c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800641e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	78db      	ldrb	r3, [r3, #3]
 8006426:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006428:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f9d8 	bl	80067e8 <RTC_ByteToBcd2>
 8006438:	4603      	mov	r3, r0
 800643a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800643c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006444:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e02c      	b.n	80064aa <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006458:	d00d      	beq.n	8006476 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006462:	d008      	beq.n	8006476 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006464:	4b4f      	ldr	r3, [pc, #316]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2200      	movs	r2, #0
 8006474:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006482:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006488:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006490:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006498:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800649a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80064a0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064aa:	4b3e      	ldr	r3, [pc, #248]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064ac:	22ca      	movs	r2, #202	; 0xca
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24
 80064b0:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064b2:	2253      	movs	r2, #83	; 0x53
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d12c      	bne.n	800651a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80064c0:	4b38      	ldr	r3, [pc, #224]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	4a37      	ldr	r2, [pc, #220]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80064ca:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80064cc:	4b35      	ldr	r3, [pc, #212]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d8:	d107      	bne.n	80064ea <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4930      	ldr	r1, [pc, #192]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	644b      	str	r3, [r1, #68]	; 0x44
 80064e8:	e006      	b.n	80064f8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80064ea:	4a2e      	ldr	r2, [pc, #184]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80064f0:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80064f8:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	f043 0201 	orr.w	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800650c:	4b25      	ldr	r3, [pc, #148]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006512:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006516:	6193      	str	r3, [r2, #24]
 8006518:	e02b      	b.n	8006572 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800651a:	4b22      	ldr	r3, [pc, #136]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	4a21      	ldr	r2, [pc, #132]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006520:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006524:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006526:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006528:	2202      	movs	r2, #2
 800652a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006532:	d107      	bne.n	8006544 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4919      	ldr	r1, [pc, #100]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800653e:	4313      	orrs	r3, r2
 8006540:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006542:	e006      	b.n	8006552 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006544:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800654a:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006552:	4a14      	ldr	r2, [pc, #80]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	f043 0202 	orr.w	r2, r3, #2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006566:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800656c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006570:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006578:	4a0b      	ldr	r2, [pc, #44]	; (80065a8 <HAL_RTC_SetAlarm_IT+0x214>)
 800657a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006582:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd90      	pop	{r4, r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40002800 	.word	0x40002800
 80065a8:	58000800 	.word	0x58000800

080065ac <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_RTC_DeactivateAlarm+0x18>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e048      	b.n	8006656 <HAL_RTC_DeactivateAlarm+0xaa>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065d4:	4b22      	ldr	r3, [pc, #136]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065d6:	22ca      	movs	r2, #202	; 0xca
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
 80065da:	4b21      	ldr	r3, [pc, #132]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065dc:	2253      	movs	r2, #83	; 0x53
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d115      	bne.n	8006614 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80065e8:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065f2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80065f4:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f8:	4a19      	ldr	r2, [pc, #100]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 80065fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065fe:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	f023 0201 	bic.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 800660e:	2201      	movs	r2, #1
 8006610:	65da      	str	r2, [r3, #92]	; 0x5c
 8006612:	e014      	b.n	800663e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	4a11      	ldr	r2, [pc, #68]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 800661a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800661e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800662a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f023 0202 	bic.w	r2, r3, #2
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 800663a:	2202      	movs	r2, #2
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006640:	22ff      	movs	r2, #255	; 0xff
 8006642:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr
 8006660:	40002800 	.word	0x40002800

08006664 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800666e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	4013      	ands	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006682:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006684:	2201      	movs	r2, #1
 8006686:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fb fc70 	bl	8001f6e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800669a:	2202      	movs	r2, #2
 800669c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f94a 	bl	8006938 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40002800 	.word	0x40002800

080066b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <HAL_RTC_WaitForSynchro+0x48>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <HAL_RTC_WaitForSynchro+0x48>)
 80066c6:	f023 0320 	bic.w	r3, r3, #32
 80066ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80066cc:	f7fb fa86 	bl	8001bdc <HAL_GetTick>
 80066d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80066d2:	e009      	b.n	80066e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066d4:	f7fb fa82 	bl	8001bdc <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e2:	d901      	bls.n	80066e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e006      	b.n	80066f6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_RTC_WaitForSynchro+0x48>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ef      	beq.n	80066d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40002800 	.word	0x40002800

08006704 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <RTC_EnterInitMode+0x64>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d120      	bne.n	800675e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <RTC_EnterInitMode+0x64>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a11      	ldr	r2, [pc, #68]	; (8006768 <RTC_EnterInitMode+0x64>)
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006728:	f7fb fa58 	bl	8001bdc <HAL_GetTick>
 800672c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800672e:	e00d      	b.n	800674c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006730:	f7fb fa54 	bl	8001bdc <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800673e:	d905      	bls.n	800674c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2203      	movs	r2, #3
 8006748:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <RTC_EnterInitMode+0x64>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <RTC_EnterInitMode+0x5a>
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d1e8      	bne.n	8006730 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40002800 	.word	0x40002800

0800676c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006778:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <RTC_ExitInitMode+0x78>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <RTC_ExitInitMode+0x78>)
 800677e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006782:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006784:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <RTC_ExitInitMode+0x78>)
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10c      	bne.n	80067aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff91 	bl	80066b8 <HAL_RTC_WaitForSynchro>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01e      	beq.n	80067da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2203      	movs	r2, #3
 80067a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	73fb      	strb	r3, [r7, #15]
 80067a8:	e017      	b.n	80067da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067aa:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <RTC_ExitInitMode+0x78>)
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	4a0d      	ldr	r2, [pc, #52]	; (80067e4 <RTC_ExitInitMode+0x78>)
 80067b0:	f023 0320 	bic.w	r3, r3, #32
 80067b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ff7e 	bl	80066b8 <HAL_RTC_WaitForSynchro>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2203      	movs	r2, #3
 80067c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <RTC_ExitInitMode+0x78>)
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	4a04      	ldr	r2, [pc, #16]	; (80067e4 <RTC_ExitInitMode+0x78>)
 80067d4:	f043 0320 	orr.w	r3, r3, #32
 80067d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40002800 	.word	0x40002800

080067e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80067fa:	e005      	b.n	8006808 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	3b0a      	subs	r3, #10
 8006806:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d8f6      	bhi.n	80067fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	b2da      	uxtb	r2, r3
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	4313      	orrs	r3, r2
 800681a:	b2db      	uxtb	r3, r3
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
	...

08006828 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_RTCEx_EnableBypassShadow+0x16>
 800683a:	2302      	movs	r3, #2
 800683c:	e01f      	b.n	800687e <HAL_RTCEx_EnableBypassShadow+0x56>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006850:	22ca      	movs	r2, #202	; 0xca
 8006852:	625a      	str	r2, [r3, #36]	; 0x24
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006856:	2253      	movs	r2, #83	; 0x53
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4a0a      	ldr	r2, [pc, #40]	; (8006888 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006860:	f043 0320 	orr.w	r3, r3, #32
 8006864:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006866:	4b08      	ldr	r3, [pc, #32]	; (8006888 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr
 8006888:	40002800 	.word	0x40002800

0800688c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_RTCEx_SetSSRU_IT+0x16>
 800689e:	2302      	movs	r3, #2
 80068a0:	e027      	b.n	80068f2 <HAL_RTCEx_SetSSRU_IT+0x66>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068b4:	22ca      	movs	r2, #202	; 0xca
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068ba:	2253      	movs	r2, #83	; 0x53
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	4a0e      	ldr	r2, [pc, #56]	; (80068fc <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80068cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80068d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068da:	4b08      	ldr	r3, [pc, #32]	; (80068fc <HAL_RTCEx_SetSSRU_IT+0x70>)
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	40002800 	.word	0x40002800
 8006900:	58000800 	.word	0x58000800

08006904 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fb fb2f 	bl	8001f82 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40002800 	.word	0x40002800

08006938 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr
	...

0800694c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <HAL_RTCEx_BKUPWrite+0x2c>)
 800695a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4413      	add	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	4000b100 	.word	0x4000b100

0800697c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006986:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <HAL_RTCEx_BKUPRead+0x28>)
 8006988:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	4000b100 	.word	0x4000b100

080069a8 <LL_PWR_SetRadioBusyTrigger>:
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069b8:	4904      	ldr	r1, [pc, #16]	; (80069cc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4313      	orrs	r3, r2
 80069be:	608b      	str	r3, [r1, #8]
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	58000400 	.word	0x58000400

080069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069da:	4a04      	ldr	r2, [pc, #16]	; (80069ec <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80069dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr
 80069ec:	58000400 	.word	0x58000400

080069f0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80069fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	58000400 	.word	0x58000400

08006a10 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a14:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006a16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a1a:	619a      	str	r2, [r3, #24]
}
 8006a1c:	bf00      	nop
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	58000400 	.word	0x58000400

08006a28 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d101      	bne.n	8006a3c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e000      	b.n	8006a3e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	58000400 	.word	0x58000400

08006a4c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d101      	bne.n	8006a60 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	58000400 	.word	0x58000400

08006a70 <LL_RCC_RF_DisableReset>:
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a88:	bf00      	nop
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <LL_RCC_IsRFUnderReset>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aa4:	d101      	bne.n	8006aaa <LL_RCC_IsRFUnderReset+0x1a>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <LL_RCC_IsRFUnderReset+0x1c>
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <LL_EXTI_EnableIT_32_63+0x24>)
 8006abe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ac2:	4905      	ldr	r1, [pc, #20]	; (8006ad8 <LL_EXTI_EnableIT_32_63+0x24>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	58000800 	.word	0x58000800

08006adc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]
    return status;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	e04b      	b.n	8006b8a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	799b      	ldrb	r3, [r3, #6]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d105      	bne.n	8006b0c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fec4 	bl	8001894 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006b12:	f7ff ffad 	bl	8006a70 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b16:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <HAL_SUBGHZ_Init+0xb8>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	0cdb      	lsrs	r3, r3, #19
 8006b24:	2264      	movs	r2, #100	; 0x64
 8006b26:	fb02 f303 	mul.w	r3, r2, r3
 8006b2a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	609a      	str	r2, [r3, #8]
      break;
 8006b3c:	e007      	b.n	8006b4e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006b44:	f7ff ffa4 	bl	8006a90 <LL_RCC_IsRFUnderReset>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1ee      	bne.n	8006b2c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b4e:	f7ff ff3f 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006b52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b56:	f7ff ffad 	bl	8006ab4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006b5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b5e:	f7ff ff23 	bl	80069a8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006b62:	f7ff ff55 	bl	8006a10 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 faad 	bl	80070d0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	719a      	strb	r2, [r3, #6]

  return status;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000000 	.word	0x20000000

08006b98 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	817b      	strh	r3, [r7, #10]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	799b      	ldrb	r3, [r3, #6]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d14a      	bne.n	8006c4c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	795b      	ldrb	r3, [r3, #5]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e045      	b.n	8006c4e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fb4c 	bl	800726c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006bd4:	f7ff ff0c 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006bd8:	210d      	movs	r1, #13
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 fa98 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006be0:	897b      	ldrh	r3, [r7, #10]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fa90 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006bf0:	897b      	ldrh	r3, [r7, #10]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fa8a 	bl	8007110 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	82bb      	strh	r3, [r7, #20]
 8006c00:	e00a      	b.n	8006c18 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c02:	8abb      	ldrh	r3, [r7, #20]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fa7f 	bl	8007110 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c12:	8abb      	ldrh	r3, [r7, #20]
 8006c14:	3301      	adds	r3, #1
 8006c16:	82bb      	strh	r3, [r7, #20]
 8006c18:	8aba      	ldrh	r2, [r7, #20]
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3f0      	bcc.n	8006c02 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c20:	f7ff fed6 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb45 	bl	80072b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
 8006c36:	e001      	b.n	8006c3c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	715a      	strb	r2, [r3, #5]

    return status;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	e000      	b.n	8006c4e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b088      	sub	sp, #32
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	461a      	mov	r2, r3
 8006c62:	460b      	mov	r3, r1
 8006c64:	817b      	strh	r3, [r7, #10]
 8006c66:	4613      	mov	r3, r2
 8006c68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	799b      	ldrb	r3, [r3, #6]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d14a      	bne.n	8006d0e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	795b      	ldrb	r3, [r3, #5]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e045      	b.n	8006d10 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 faee 	bl	800726c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c90:	f7ff feae 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006c94:	211d      	movs	r1, #29
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fa3a 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c9c:	897b      	ldrh	r3, [r7, #10]
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fa32 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006cac:	897b      	ldrh	r3, [r7, #10]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fa2c 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa28 	bl	8007110 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	82fb      	strh	r3, [r7, #22]
 8006cc4:	e009      	b.n	8006cda <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006cc6:	69b9      	ldr	r1, [r7, #24]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fa77 	bl	80071bc <SUBGHZSPI_Receive>
      pData++;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006cd4:	8afb      	ldrh	r3, [r7, #22]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	82fb      	strh	r3, [r7, #22]
 8006cda:	8afa      	ldrh	r2, [r7, #22]
 8006cdc:	893b      	ldrh	r3, [r7, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d3f1      	bcc.n	8006cc6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ce2:	f7ff fe75 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fae4 	bl	80072b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e001      	b.n	8006cfe <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	715a      	strb	r2, [r3, #5]

    return status;
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
 8006d0c:	e000      	b.n	8006d10 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
  }
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	461a      	mov	r2, r3
 8006d24:	460b      	mov	r3, r1
 8006d26:	72fb      	strb	r3, [r7, #11]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	799b      	ldrb	r3, [r3, #6]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d14a      	bne.n	8006dcc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	795b      	ldrb	r3, [r3, #5]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e045      	b.n	8006dce <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fa8f 	bl	800726c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	2b84      	cmp	r3, #132	; 0x84
 8006d52:	d002      	beq.n	8006d5a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	2b94      	cmp	r3, #148	; 0x94
 8006d58:	d103      	bne.n	8006d62 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	711a      	strb	r2, [r3, #4]
 8006d60:	e002      	b.n	8006d68 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d68:	f7ff fe42 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f9cd 	bl	8007110 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	82bb      	strh	r3, [r7, #20]
 8006d7a:	e00a      	b.n	8006d92 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d7c:	8abb      	ldrh	r3, [r7, #20]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f9c2 	bl	8007110 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d8c:	8abb      	ldrh	r3, [r7, #20]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	82bb      	strh	r3, [r7, #20]
 8006d92:	8aba      	ldrh	r2, [r7, #20]
 8006d94:	893b      	ldrh	r3, [r7, #8]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d3f0      	bcc.n	8006d7c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d9a:	f7ff fe19 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b84      	cmp	r3, #132	; 0x84
 8006da2:	d002      	beq.n	8006daa <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa85 	bl	80072b4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
 8006db6:	e001      	b.n	8006dbc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	715a      	strb	r2, [r3, #5]

    return status;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	e000      	b.n	8006dce <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006dcc:	2302      	movs	r3, #2
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	461a      	mov	r2, r3
 8006de2:	460b      	mov	r3, r1
 8006de4:	72fb      	strb	r3, [r7, #11]
 8006de6:	4613      	mov	r3, r2
 8006de8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	799b      	ldrb	r3, [r3, #6]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d13d      	bne.n	8006e74 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	795b      	ldrb	r3, [r3, #5]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e038      	b.n	8006e76 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fa2e 	bl	800726c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e10:	f7ff fdee 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	4619      	mov	r1, r3
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f979 	bl	8007110 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006e1e:	2100      	movs	r1, #0
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f975 	bl	8007110 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	82fb      	strh	r3, [r7, #22]
 8006e2a:	e009      	b.n	8006e40 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e2c:	69b9      	ldr	r1, [r7, #24]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f9c4 	bl	80071bc <SUBGHZSPI_Receive>
      pData++;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006e3a:	8afb      	ldrh	r3, [r7, #22]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	82fb      	strh	r3, [r7, #22]
 8006e40:	8afa      	ldrh	r2, [r7, #22]
 8006e42:	893b      	ldrh	r3, [r7, #8]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d3f1      	bcc.n	8006e2c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e48:	f7ff fdc2 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fa31 	bl	80072b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	77fb      	strb	r3, [r7, #31]
 8006e5e:	e001      	b.n	8006e64 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	715a      	strb	r2, [r3, #5]

    return status;
 8006e70:	7ffb      	ldrb	r3, [r7, #31]
 8006e72:	e000      	b.n	8006e76 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
  }
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	72fb      	strb	r3, [r7, #11]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	799b      	ldrb	r3, [r3, #6]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d13e      	bne.n	8006f1a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	795b      	ldrb	r3, [r3, #5]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e039      	b.n	8006f1c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f9dc 	bl	800726c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006eb4:	f7ff fd9c 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006eb8:	210e      	movs	r1, #14
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f928 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f923 	bl	8007110 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	82bb      	strh	r3, [r7, #20]
 8006ece:	e00a      	b.n	8006ee6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ed0:	8abb      	ldrh	r3, [r7, #20]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f918 	bl	8007110 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ee0:	8abb      	ldrh	r3, [r7, #20]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	82bb      	strh	r3, [r7, #20]
 8006ee6:	8aba      	ldrh	r2, [r7, #20]
 8006ee8:	893b      	ldrh	r3, [r7, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d3f0      	bcc.n	8006ed0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006eee:	f7ff fd6f 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 f9de 	bl	80072b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
 8006f04:	e001      	b.n	8006f0a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	715a      	strb	r2, [r3, #5]

    return status;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	e000      	b.n	8006f1c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	460b      	mov	r3, r1
 8006f32:	72fb      	strb	r3, [r7, #11]
 8006f34:	4613      	mov	r3, r2
 8006f36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	799b      	ldrb	r3, [r3, #6]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d141      	bne.n	8006fca <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	795b      	ldrb	r3, [r3, #5]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e03c      	b.n	8006fcc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f987 	bl	800726c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f5e:	f7ff fd47 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006f62:	211e      	movs	r1, #30
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f8d3 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f8ce 	bl	8007110 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f74:	2100      	movs	r1, #0
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f8ca 	bl	8007110 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	82fb      	strh	r3, [r7, #22]
 8006f80:	e009      	b.n	8006f96 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 f919 	bl	80071bc <SUBGHZSPI_Receive>
      pData++;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f90:	8afb      	ldrh	r3, [r7, #22]
 8006f92:	3301      	adds	r3, #1
 8006f94:	82fb      	strh	r3, [r7, #22]
 8006f96:	8afa      	ldrh	r2, [r7, #22]
 8006f98:	893b      	ldrh	r3, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d3f1      	bcc.n	8006f82 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f9e:	f7ff fd17 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 f986 	bl	80072b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e001      	b.n	8006fba <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	715a      	strb	r2, [r3, #5]

    return status;
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
 8006fc8:	e000      	b.n	8006fcc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
  }
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3720      	adds	r7, #32
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006fdc:	2300      	movs	r3, #0
 8006fde:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006fe0:	f107 020c 	add.w	r2, r7, #12
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	2112      	movs	r1, #18
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fef4 	bl	8006dd6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006fee:	7b3b      	ldrb	r3, [r7, #12]
 8006ff0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	b21a      	sxth	r2, r3
 8006ff8:	7b7b      	ldrb	r3, [r7, #13]
 8006ffa:	b21b      	sxth	r3, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b21b      	sxth	r3, r3
 8007000:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007002:	89fb      	ldrh	r3, [r7, #14]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f011 fde1 	bl	8018bd4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007012:	89fb      	ldrh	r3, [r7, #14]
 8007014:	085b      	lsrs	r3, r3, #1
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f011 fde6 	bl	8018bf0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	089b      	lsrs	r3, r3, #2
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f011 fe35 	bl	8018ca0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007036:	89fb      	ldrh	r3, [r7, #14]
 8007038:	08db      	lsrs	r3, r3, #3
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f011 fe3a 	bl	8018cbc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007048:	89fb      	ldrh	r3, [r7, #14]
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f011 fe3f 	bl	8018cd8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f011 fe0c 	bl	8018c84 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800706c:	89fb      	ldrh	r3, [r7, #14]
 800706e:	099b      	lsrs	r3, r3, #6
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f011 fdc7 	bl	8018c0c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800707e:	89fb      	ldrh	r3, [r7, #14]
 8007080:	09db      	lsrs	r3, r3, #7
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00e      	beq.n	80070a8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800708a:	89fb      	ldrh	r3, [r7, #14]
 800708c:	0a1b      	lsrs	r3, r3, #8
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007096:	2101      	movs	r1, #1
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f011 fdc5 	bl	8018c28 <HAL_SUBGHZ_CADStatusCallback>
 800709e:	e003      	b.n	80070a8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f011 fdc0 	bl	8018c28 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	0a5b      	lsrs	r3, r3, #9
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f011 fdd5 	bl	8018c64 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80070ba:	f107 020c 	add.w	r2, r7, #12
 80070be:	2302      	movs	r3, #2
 80070c0:	2102      	movs	r1, #2
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fe28 	bl	8006d18 <HAL_SUBGHZ_ExecSetCmd>
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <SUBGHZSPI_Init+0x3c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a0b      	ldr	r2, [pc, #44]	; (800710c <SUBGHZSPI_Init+0x3c>)
 80070de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80070e4:	4a09      	ldr	r2, [pc, #36]	; (800710c <SUBGHZSPI_Init+0x3c>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80070ec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80070ee:	4b07      	ldr	r3, [pc, #28]	; (800710c <SUBGHZSPI_Init+0x3c>)
 80070f0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80070f4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <SUBGHZSPI_Init+0x3c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a04      	ldr	r2, [pc, #16]	; (800710c <SUBGHZSPI_Init+0x3c>)
 80070fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007100:	6013      	str	r3, [r2, #0]
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr
 800710c:	58010000 	.word	0x58010000

08007110 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007120:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <SUBGHZSPI_Transmit+0xa0>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	0cdb      	lsrs	r3, r3, #19
 800712e:	2264      	movs	r2, #100	; 0x64
 8007130:	fb02 f303 	mul.w	r3, r2, r3
 8007134:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d105      	bne.n	8007148 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	609a      	str	r2, [r3, #8]
      break;
 8007146:	e008      	b.n	800715a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <SUBGHZSPI_Transmit+0xa4>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b02      	cmp	r3, #2
 8007158:	d1ed      	bne.n	8007136 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <SUBGHZSPI_Transmit+0xa8>)
 800715c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	78fa      	ldrb	r2, [r7, #3]
 8007162:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <SUBGHZSPI_Transmit+0xa0>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	0cdb      	lsrs	r3, r3, #19
 8007172:	2264      	movs	r2, #100	; 0x64
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d105      	bne.n	800718c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	609a      	str	r2, [r3, #8]
      break;
 800718a:	e008      	b.n	800719e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007192:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <SUBGHZSPI_Transmit+0xa4>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	d1ed      	bne.n	800717a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <SUBGHZSPI_Transmit+0xa4>)
 80071a0:	68db      	ldr	r3, [r3, #12]

  return status;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000000 	.word	0x20000000
 80071b4:	58010000 	.word	0x58010000
 80071b8:	5801000c 	.word	0x5801000c

080071bc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071ca:	4b25      	ldr	r3, [pc, #148]	; (8007260 <SUBGHZSPI_Receive+0xa4>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4613      	mov	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	0cdb      	lsrs	r3, r3, #19
 80071d8:	2264      	movs	r2, #100	; 0x64
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	609a      	str	r2, [r3, #8]
      break;
 80071f0:	e008      	b.n	8007204 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80071f8:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <SUBGHZSPI_Receive+0xa8>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b02      	cmp	r3, #2
 8007202:	d1ed      	bne.n	80071e0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007204:	4b18      	ldr	r3, [pc, #96]	; (8007268 <SUBGHZSPI_Receive+0xac>)
 8007206:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	22ff      	movs	r2, #255	; 0xff
 800720c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <SUBGHZSPI_Receive+0xa4>)
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4613      	mov	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	0cdb      	lsrs	r3, r3, #19
 800721c:	2264      	movs	r2, #100	; 0x64
 800721e:	fb02 f303 	mul.w	r3, r2, r3
 8007222:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	609a      	str	r2, [r3, #8]
      break;
 8007234:	e008      	b.n	8007248 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3b01      	subs	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800723c:	4b09      	ldr	r3, [pc, #36]	; (8007264 <SUBGHZSPI_Receive+0xa8>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d1ed      	bne.n	8007224 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <SUBGHZSPI_Receive+0xa8>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	701a      	strb	r2, [r3, #0]

  return status;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20000000 	.word	0x20000000
 8007264:	58010000 	.word	0x58010000
 8007268:	5801000c 	.word	0x5801000c

0800726c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	791b      	ldrb	r3, [r3, #4]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d111      	bne.n	80072a0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <SUBGHZ_CheckDeviceReady+0x44>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	4413      	add	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800728c:	f7ff fbb0 	bl	80069f0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3b01      	subs	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f9      	bne.n	8007290 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800729c:	f7ff fb98 	bl	80069d0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f807 	bl	80072b4 <SUBGHZ_WaitOnBusy>
 80072a6:	4603      	mov	r3, r0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000000 	.word	0x20000000

080072b4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <SUBGHZ_WaitOnBusy+0x58>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	4413      	add	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	0d1b      	lsrs	r3, r3, #20
 80072ce:	2264      	movs	r2, #100	; 0x64
 80072d0:	fb02 f303 	mul.w	r3, r2, r3
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80072d6:	f7ff fbb9 	bl	8006a4c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80072da:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	609a      	str	r2, [r3, #8]
      break;
 80072ec:	e009      	b.n	8007302 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80072f4:	f7ff fb98 	bl	8006a28 <LL_PWR_IsActiveFlag_RFBUSYS>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4013      	ands	r3, r2
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d0e9      	beq.n	80072d6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20000000 	.word	0x20000000

08007310 <LL_RCC_GetUSARTClockSource>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	401a      	ands	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	4313      	orrs	r3, r2
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <LL_RCC_GetLPUARTClockSource>:
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800733c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007340:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4013      	ands	r3, r2
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e042      	b.n	80073ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fa ff68 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2224      	movs	r2, #36	; 0x24
 8007380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc4b 	bl	8007c30 <UART_SetConfig>
 800739a:	4603      	mov	r3, r0
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e022      	b.n	80073ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 feb3 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 ff39 	bl	800825a <UART_CheckIdleState>
 80073e8:	4603      	mov	r3, r0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007408:	2b20      	cmp	r3, #32
 800740a:	d142      	bne.n	8007492 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_UART_Receive_IT+0x24>
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e03b      	b.n	8007494 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_UART_Receive_IT+0x36>
 8007426:	2302      	movs	r3, #2
 8007428:	e034      	b.n	8007494 <HAL_UART_Receive_IT+0xa0>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a17      	ldr	r2, [pc, #92]	; (800749c <HAL_UART_Receive_IT+0xa8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01f      	beq.n	8007482 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d018      	beq.n	8007482 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	613b      	str	r3, [r7, #16]
   return(result);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	69f9      	ldr	r1, [r7, #28]
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	61bb      	str	r3, [r7, #24]
   return(result);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e6      	bne.n	8007450 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	461a      	mov	r2, r3
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fff9 	bl	8008480 <UART_Start_Receive_IT>
 800748e:	4603      	mov	r3, r0
 8007490:	e000      	b.n	8007494 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3728      	adds	r7, #40	; 0x28
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40008000 	.word	0x40008000

080074a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	; 0x28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d17a      	bne.n	80075ae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_UART_Transmit_DMA+0x24>
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e073      	b.n	80075b0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_UART_Transmit_DMA+0x36>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e06c      	b.n	80075b0 <HAL_UART_Transmit_DMA+0x110>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2221      	movs	r2, #33	; 0x21
 8007500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007508:	2b00      	cmp	r3, #0
 800750a:	d02c      	beq.n	8007566 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007510:	4a29      	ldr	r2, [pc, #164]	; (80075b8 <HAL_UART_Transmit_DMA+0x118>)
 8007512:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007518:	4a28      	ldr	r2, [pc, #160]	; (80075bc <HAL_UART_Transmit_DMA+0x11c>)
 800751a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007520:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <HAL_UART_Transmit_DMA+0x120>)
 8007522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007528:	2200      	movs	r2, #0
 800752a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	4619      	mov	r1, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3328      	adds	r3, #40	; 0x28
 800753c:	461a      	mov	r2, r3
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f7fc fbb6 	bl	8003cb0 <HAL_DMA_Start_IT>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2210      	movs	r2, #16
 800754e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e024      	b.n	80075b0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2240      	movs	r2, #64	; 0x40
 800756c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	613b      	str	r3, [r7, #16]
   return(result);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007596:	623a      	str	r2, [r7, #32]
 8007598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	69f9      	ldr	r1, [r7, #28]
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e5      	bne.n	8007576 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	e000      	b.n	80075b0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80075ae:	2302      	movs	r3, #2
  }
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3728      	adds	r7, #40	; 0x28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	0800881b 	.word	0x0800881b
 80075bc:	080088b5 	.word	0x080088b5
 80075c0:	080088d1 	.word	0x080088d1

080075c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b0ba      	sub	sp, #232	; 0xe8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80075f2:	4013      	ands	r3, r2
 80075f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11b      	bne.n	8007638 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d015      	beq.n	8007638 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800760c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d105      	bne.n	8007624 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d009      	beq.n	8007638 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 82d6 	beq.w	8007bda <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
      }
      return;
 8007636:	e2d0      	b.n	8007bda <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 811f 	beq.w	8007880 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007642:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007646:	4b8b      	ldr	r3, [pc, #556]	; (8007874 <HAL_UART_IRQHandler+0x2b0>)
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800764e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007652:	4b89      	ldr	r3, [pc, #548]	; (8007878 <HAL_UART_IRQHandler+0x2b4>)
 8007654:	4013      	ands	r3, r2
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8112 	beq.w	8007880 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <HAL_UART_IRQHandler+0xc8>
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2201      	movs	r2, #1
 800767a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007682:	f043 0201 	orr.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d011      	beq.n	80076bc <HAL_UART_IRQHandler+0xf8>
 8007698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2202      	movs	r2, #2
 80076aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b2:	f043 0204 	orr.w	r2, r3, #4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d011      	beq.n	80076ec <HAL_UART_IRQHandler+0x128>
 80076c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2204      	movs	r2, #4
 80076da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f0:	f003 0308 	and.w	r3, r3, #8
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d017      	beq.n	8007728 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d105      	bne.n	8007710 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007704:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007708:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <HAL_UART_IRQHandler+0x2b0>)
 800770a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771e:	f043 0208 	orr.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007730:	2b00      	cmp	r3, #0
 8007732:	d012      	beq.n	800775a <HAL_UART_IRQHandler+0x196>
 8007734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00c      	beq.n	800775a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007750:	f043 0220 	orr.w	r2, r3, #32
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 823c 	beq.w	8007bde <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d013      	beq.n	800779a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800777e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d04f      	beq.n	800785e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 ffc6 	bl	8008750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d141      	bne.n	8007856 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800780a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1d9      	bne.n	80077d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d013      	beq.n	800784e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800782a:	4a14      	ldr	r2, [pc, #80]	; (800787c <HAL_UART_IRQHandler+0x2b8>)
 800782c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007832:	4618      	mov	r0, r3
 8007834:	f7fc fb18 	bl	8003e68 <HAL_DMA_Abort_IT>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d017      	beq.n	800786e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	e00f      	b.n	800786e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9d9 	bl	8007c06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	e00b      	b.n	800786e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9d5 	bl	8007c06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785c:	e007      	b.n	800786e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f9d1 	bl	8007c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800786c:	e1b7      	b.n	8007bde <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786e:	bf00      	nop
    return;
 8007870:	e1b5      	b.n	8007bde <HAL_UART_IRQHandler+0x61a>
 8007872:	bf00      	nop
 8007874:	10000001 	.word	0x10000001
 8007878:	04000120 	.word	0x04000120
 800787c:	08008951 	.word	0x08008951

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007884:	2b01      	cmp	r3, #1
 8007886:	f040 814a 	bne.w	8007b1e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800788a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8143 	beq.w	8007b1e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 813c 	beq.w	8007b1e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2210      	movs	r2, #16
 80078ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	f040 80b5 	bne.w	8007a28 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80078ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8187 	beq.w	8007be2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078de:	429a      	cmp	r2, r3
 80078e0:	f080 817f 	bcs.w	8007be2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 8086 	bne.w	8007a0c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800792a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800792e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1da      	bne.n	8007900 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800795a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3308      	adds	r3, #8
 800796a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800796e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e1      	bne.n	800794a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e3      	bne.n	8007986 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079dc:	f023 0310 	bic.w	r3, r3, #16
 80079e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80079f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e4      	bne.n	80079cc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fc f9d0 	bl	8003dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8f9 	bl	8007c18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a26:	e0dc      	b.n	8007be2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 80ce 	beq.w	8007be6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80c9 	beq.w	8007be6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a76:	647b      	str	r3, [r7, #68]	; 0x44
 8007a78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e4      	bne.n	8007a54 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	623b      	str	r3, [r7, #32]
   return(result);
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e1      	bne.n	8007a8a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0310 	bic.w	r3, r3, #16
 8007aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	69b9      	ldr	r1, [r7, #24]
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e4      	bne.n	8007ada <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f87e 	bl	8007c18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b1c:	e063      	b.n	8007be6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <HAL_UART_IRQHandler+0x584>
 8007b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fba3 	bl	800928c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b46:	e051      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d014      	beq.n	8007b7e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d03a      	beq.n	8007bea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
    }
    return;
 8007b7c:	e035      	b.n	8007bea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <HAL_UART_IRQHandler+0x5da>
 8007b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fef0 	bl	800897c <UART_EndTransmit_IT>
    return;
 8007b9c:	e026      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <HAL_UART_IRQHandler+0x5fa>
 8007baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fb7a 	bl	80092b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bbc:	e016      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d010      	beq.n	8007bec <HAL_UART_IRQHandler+0x628>
 8007bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da0c      	bge.n	8007bec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fb63 	bl	800929e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd8:	e008      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
      return;
 8007bda:	bf00      	nop
 8007bdc:	e006      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
    return;
 8007bde:	bf00      	nop
 8007be0:	e004      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
      return;
 8007be2:	bf00      	nop
 8007be4:	e002      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
      return;
 8007be6:	bf00      	nop
 8007be8:	e000      	b.n	8007bec <HAL_UART_IRQHandler+0x628>
    return;
 8007bea:	bf00      	nop
  }
}
 8007bec:	37e8      	adds	r7, #232	; 0xe8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop

08007bf4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr

08007c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr
	...

08007c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c34:	b08c      	sub	sp, #48	; 0x30
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b94      	ldr	r3, [pc, #592]	; (8007eb0 <UART_SetConfig+0x280>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a89      	ldr	r2, [pc, #548]	; (8007eb4 <UART_SetConfig+0x284>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ca6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	f023 010f 	bic.w	r1, r3, #15
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a7a      	ldr	r2, [pc, #488]	; (8007eb8 <UART_SetConfig+0x288>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d127      	bne.n	8007d24 <UART_SetConfig+0xf4>
 8007cd4:	2003      	movs	r0, #3
 8007cd6:	f7ff fb1b 	bl	8007310 <LL_RCC_GetUSARTClockSource>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d81b      	bhi.n	8007d1c <UART_SetConfig+0xec>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <UART_SetConfig+0xbc>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d0d 	.word	0x08007d0d
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d15 	.word	0x08007d15
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d02:	e080      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d04:	2302      	movs	r3, #2
 8007d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d0a:	e07c      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d12:	e078      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d14:	2308      	movs	r3, #8
 8007d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d1a:	e074      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d22:	e070      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a64      	ldr	r2, [pc, #400]	; (8007ebc <UART_SetConfig+0x28c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d138      	bne.n	8007da0 <UART_SetConfig+0x170>
 8007d2e:	200c      	movs	r0, #12
 8007d30:	f7ff faee 	bl	8007310 <LL_RCC_GetUSARTClockSource>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007d3a:	2b0c      	cmp	r3, #12
 8007d3c:	d82c      	bhi.n	8007d98 <UART_SetConfig+0x168>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <UART_SetConfig+0x114>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007d99 	.word	0x08007d99
 8007d4c:	08007d99 	.word	0x08007d99
 8007d50:	08007d99 	.word	0x08007d99
 8007d54:	08007d89 	.word	0x08007d89
 8007d58:	08007d99 	.word	0x08007d99
 8007d5c:	08007d99 	.word	0x08007d99
 8007d60:	08007d99 	.word	0x08007d99
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007d91 	.word	0x08007d91
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e042      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d80:	2302      	movs	r3, #2
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e03e      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e03a      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d90:	2308      	movs	r3, #8
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d96:	e036      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9e:	e032      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a43      	ldr	r2, [pc, #268]	; (8007eb4 <UART_SetConfig+0x284>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d12a      	bne.n	8007e00 <UART_SetConfig+0x1d0>
 8007daa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007dae:	f7ff fac1 	bl	8007334 <LL_RCC_GetLPUARTClockSource>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db8:	d01a      	beq.n	8007df0 <UART_SetConfig+0x1c0>
 8007dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dbe:	d81b      	bhi.n	8007df8 <UART_SetConfig+0x1c8>
 8007dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc4:	d00c      	beq.n	8007de0 <UART_SetConfig+0x1b0>
 8007dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dca:	d815      	bhi.n	8007df8 <UART_SetConfig+0x1c8>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <UART_SetConfig+0x1a8>
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd4:	d008      	beq.n	8007de8 <UART_SetConfig+0x1b8>
 8007dd6:	e00f      	b.n	8007df8 <UART_SetConfig+0x1c8>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dde:	e012      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007de0:	2302      	movs	r3, #2
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de6:	e00e      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007de8:	2304      	movs	r3, #4
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dee:	e00a      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007df0:	2308      	movs	r3, #8
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df6:	e006      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	e002      	b.n	8007e06 <UART_SetConfig+0x1d6>
 8007e00:	2310      	movs	r3, #16
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <UART_SetConfig+0x284>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	f040 80a4 	bne.w	8007f5a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d823      	bhi.n	8007e62 <UART_SetConfig+0x232>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0x1f0>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e63 	.word	0x08007e63
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e63 	.word	0x08007e63
 8007e30:	08007e53 	.word	0x08007e53
 8007e34:	08007e63 	.word	0x08007e63
 8007e38:	08007e63 	.word	0x08007e63
 8007e3c:	08007e63 	.word	0x08007e63
 8007e40:	08007e5b 	.word	0x08007e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e44:	f7fd ff48 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e4a:	e010      	b.n	8007e6e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ec0 <UART_SetConfig+0x290>)
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e50:	e00d      	b.n	8007e6e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e52:	f7fd fe8d 	bl	8005b70 <HAL_RCC_GetSysClockFreq>
 8007e56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e58:	e009      	b.n	8007e6e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e60:	e005      	b.n	8007e6e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8137 	beq.w	80080e4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <UART_SetConfig+0x294>)
 8007e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	4413      	add	r3, r2
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d305      	bcc.n	8007ea6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d910      	bls.n	8007ec8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007eac:	e11a      	b.n	80080e4 <UART_SetConfig+0x4b4>
 8007eae:	bf00      	nop
 8007eb0:	cfff69f3 	.word	0xcfff69f3
 8007eb4:	40008000 	.word	0x40008000
 8007eb8:	40013800 	.word	0x40013800
 8007ebc:	40004400 	.word	0x40004400
 8007ec0:	00f42400 	.word	0x00f42400
 8007ec4:	0801b6a8 	.word	0x0801b6a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	2200      	movs	r2, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	60fa      	str	r2, [r7, #12]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	4a8e      	ldr	r2, [pc, #568]	; (8008110 <UART_SetConfig+0x4e0>)
 8007ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	2200      	movs	r2, #0
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eea:	f7f8 fd41 	bl	8000970 <__aeabi_uldivmod>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f04f 0200 	mov.w	r2, #0
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	020b      	lsls	r3, r1, #8
 8007f00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f04:	0202      	lsls	r2, r0, #8
 8007f06:	6979      	ldr	r1, [r7, #20]
 8007f08:	6849      	ldr	r1, [r1, #4]
 8007f0a:	0849      	lsrs	r1, r1, #1
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	4605      	mov	r5, r0
 8007f12:	eb12 0804 	adds.w	r8, r2, r4
 8007f16:	eb43 0905 	adc.w	r9, r3, r5
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	469a      	mov	sl, r3
 8007f22:	4693      	mov	fp, r2
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 fd20 	bl	8000970 <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4613      	mov	r3, r2
 8007f36:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3e:	d308      	bcc.n	8007f52 <UART_SetConfig+0x322>
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f46:	d204      	bcs.n	8007f52 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	60da      	str	r2, [r3, #12]
 8007f50:	e0c8      	b.n	80080e4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f58:	e0c4      	b.n	80080e4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f62:	d168      	bne.n	8008036 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d828      	bhi.n	8007fbe <UART_SetConfig+0x38e>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x344>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	08007fbf 	.word	0x08007fbf
 8007f84:	08007faf 	.word	0x08007faf
 8007f88:	08007fbf 	.word	0x08007fbf
 8007f8c:	08007fbf 	.word	0x08007fbf
 8007f90:	08007fbf 	.word	0x08007fbf
 8007f94:	08007fb7 	.word	0x08007fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f98:	f7fd fe9e 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f9e:	e014      	b.n	8007fca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa0:	f7fd feac 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8007fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fa6:	e010      	b.n	8007fca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa8:	4b5a      	ldr	r3, [pc, #360]	; (8008114 <UART_SetConfig+0x4e4>)
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fac:	e00d      	b.n	8007fca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fae:	f7fd fddf 	bl	8005b70 <HAL_RCC_GetSysClockFreq>
 8007fb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fb4:	e009      	b.n	8007fca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fbc:	e005      	b.n	8007fca <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8089 	beq.w	80080e4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	4a4e      	ldr	r2, [pc, #312]	; (8008110 <UART_SetConfig+0x4e0>)
 8007fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe4:	005a      	lsls	r2, r3, #1
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	441a      	add	r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d916      	bls.n	800802e <UART_SetConfig+0x3fe>
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008006:	d212      	bcs.n	800802e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f023 030f 	bic.w	r3, r3, #15
 8008010:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	b29b      	uxth	r3, r3
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	b29a      	uxth	r2, r3
 800801e:	8bfb      	ldrh	r3, [r7, #30]
 8008020:	4313      	orrs	r3, r2
 8008022:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	8bfa      	ldrh	r2, [r7, #30]
 800802a:	60da      	str	r2, [r3, #12]
 800802c:	e05a      	b.n	80080e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008034:	e056      	b.n	80080e4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008036:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800803a:	2b08      	cmp	r3, #8
 800803c:	d827      	bhi.n	800808e <UART_SetConfig+0x45e>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <UART_SetConfig+0x414>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	0800808f 	.word	0x0800808f
 8008054:	0800807f 	.word	0x0800807f
 8008058:	0800808f 	.word	0x0800808f
 800805c:	0800808f 	.word	0x0800808f
 8008060:	0800808f 	.word	0x0800808f
 8008064:	08008087 	.word	0x08008087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008068:	f7fd fe36 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 800806c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800806e:	e014      	b.n	800809a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008070:	f7fd fe44 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008076:	e010      	b.n	800809a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008078:	4b26      	ldr	r3, [pc, #152]	; (8008114 <UART_SetConfig+0x4e4>)
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800807c:	e00d      	b.n	800809a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807e:	f7fd fd77 	bl	8005b70 <HAL_RCC_GetSysClockFreq>
 8008082:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008084:	e009      	b.n	800809a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800808c:	e005      	b.n	800809a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008098:	bf00      	nop
    }

    if (pclk != 0U)
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	2b00      	cmp	r3, #0
 800809e:	d021      	beq.n	80080e4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	4a1a      	ldr	r2, [pc, #104]	; (8008110 <UART_SetConfig+0x4e0>)
 80080a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	2b0f      	cmp	r3, #15
 80080ca:	d908      	bls.n	80080de <UART_SetConfig+0x4ae>
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d2:	d204      	bcs.n	80080de <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	60da      	str	r2, [r3, #12]
 80080dc:	e002      	b.n	80080e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2200      	movs	r2, #0
 80080f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008100:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008104:	4618      	mov	r0, r3
 8008106:	3730      	adds	r7, #48	; 0x30
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810e:	bf00      	nop
 8008110:	0801b6a8 	.word	0x0801b6a8
 8008114:	00f42400 	.word	0x00f42400

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr

0800825a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b086      	sub	sp, #24
 800825e:	af02      	add	r7, sp, #8
 8008260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826a:	f7f9 fcb7 	bl	8001bdc <HAL_GetTick>
 800826e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b08      	cmp	r3, #8
 800827c:	d10e      	bne.n	800829c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800827e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f82f 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e025      	b.n	80082e8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d10e      	bne.n	80082c8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f819 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e00f      	b.n	80082e8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b09c      	sub	sp, #112	; 0x70
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008300:	e0a9      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	f000 80a5 	beq.w	8008456 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830c:	f7f9 fc66 	bl	8001bdc <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <UART_WaitOnFlagUntilTimeout+0x32>
 800831c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831e:	2b00      	cmp	r3, #0
 8008320:	d140      	bne.n	80083a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008332:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008336:	667b      	str	r3, [r7, #100]	; 0x64
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008342:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008346:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800834e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e6      	bne.n	8008322 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	663b      	str	r3, [r7, #96]	; 0x60
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3308      	adds	r3, #8
 8008372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008374:	64ba      	str	r2, [r7, #72]	; 0x48
 8008376:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800837a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e5      	bne.n	8008354 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e069      	b.n	8008478 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d051      	beq.n	8008456 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c0:	d149      	bne.n	8008456 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
 80083ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e6      	bne.n	80083cc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3308      	adds	r3, #8
 8008404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	613b      	str	r3, [r7, #16]
   return(result);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f023 0301 	bic.w	r3, r3, #1
 8008414:	66bb      	str	r3, [r7, #104]	; 0x68
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800841e:	623a      	str	r2, [r7, #32]
 8008420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	69f9      	ldr	r1, [r7, #28]
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	61bb      	str	r3, [r7, #24]
   return(result);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e5      	bne.n	80083fe <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e010      	b.n	8008478 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	429a      	cmp	r2, r3
 8008472:	f43f af46 	beq.w	8008302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3770      	adds	r7, #112	; 0x70
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008480:	b480      	push	{r7}
 8008482:	b0a3      	sub	sp, #140	; 0x8c
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	4613      	mov	r3, r2
 800848c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	88fa      	ldrh	r2, [r7, #6]
 8008498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b2:	d10e      	bne.n	80084d2 <UART_Start_Receive_IT+0x52>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d105      	bne.n	80084c8 <UART_Start_Receive_IT+0x48>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084c6:	e02d      	b.n	8008524 <UART_Start_Receive_IT+0xa4>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	22ff      	movs	r2, #255	; 0xff
 80084cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084d0:	e028      	b.n	8008524 <UART_Start_Receive_IT+0xa4>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10d      	bne.n	80084f6 <UART_Start_Receive_IT+0x76>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <UART_Start_Receive_IT+0x6c>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084ea:	e01b      	b.n	8008524 <UART_Start_Receive_IT+0xa4>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	227f      	movs	r2, #127	; 0x7f
 80084f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084f4:	e016      	b.n	8008524 <UART_Start_Receive_IT+0xa4>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084fe:	d10d      	bne.n	800851c <UART_Start_Receive_IT+0x9c>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d104      	bne.n	8008512 <UART_Start_Receive_IT+0x92>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	227f      	movs	r2, #127	; 0x7f
 800850c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008510:	e008      	b.n	8008524 <UART_Start_Receive_IT+0xa4>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	223f      	movs	r2, #63	; 0x3f
 8008516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800851a:	e003      	b.n	8008524 <UART_Start_Receive_IT+0xa4>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2222      	movs	r2, #34	; 0x22
 8008530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3308      	adds	r3, #8
 8008554:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008558:	673a      	str	r2, [r7, #112]	; 0x70
 800855a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800855e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e3      	bne.n	8008534 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008574:	d153      	bne.n	800861e <UART_Start_Receive_IT+0x19e>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800857c:	88fa      	ldrh	r2, [r7, #6]
 800857e:	429a      	cmp	r2, r3
 8008580:	d34d      	bcc.n	800861e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800858a:	d107      	bne.n	800859c <UART_Start_Receive_IT+0x11c>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d103      	bne.n	800859c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4a4a      	ldr	r2, [pc, #296]	; (80086c0 <UART_Start_Receive_IT+0x240>)
 8008598:	671a      	str	r2, [r3, #112]	; 0x70
 800859a:	e002      	b.n	80085a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a49      	ldr	r2, [pc, #292]	; (80086c4 <UART_Start_Receive_IT+0x244>)
 80085a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01a      	beq.n	80085e8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e4      	bne.n	80085b2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008608:	64ba      	str	r2, [r7, #72]	; 0x48
 800860a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800860e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_Start_Receive_IT+0x168>
 800861c:	e04a      	b.n	80086b4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008626:	d107      	bne.n	8008638 <UART_Start_Receive_IT+0x1b8>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d103      	bne.n	8008638 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a25      	ldr	r2, [pc, #148]	; (80086c8 <UART_Start_Receive_IT+0x248>)
 8008634:	671a      	str	r2, [r3, #112]	; 0x70
 8008636:	e002      	b.n	800863e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4a24      	ldr	r2, [pc, #144]	; (80086cc <UART_Start_Receive_IT+0x24c>)
 800863c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d019      	beq.n	8008682 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008662:	677b      	str	r3, [r7, #116]	; 0x74
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800866c:	637b      	str	r3, [r7, #52]	; 0x34
 800866e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <UART_Start_Receive_IT+0x1ce>
 8008680:	e018      	b.n	80086b4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f043 0320 	orr.w	r3, r3, #32
 8008696:	67bb      	str	r3, [r7, #120]	; 0x78
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e6      	bne.n	8008682 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	378c      	adds	r7, #140	; 0x8c
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr
 80086c0:	08008f8d 	.word	0x08008f8d
 80086c4:	08008c95 	.word	0x08008c95
 80086c8:	08008b33 	.word	0x08008b33
 80086cc:	080089d3 	.word	0x080089d3

080086d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b08f      	sub	sp, #60	; 0x3c
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086ec:	637b      	str	r3, [r7, #52]	; 0x34
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e6      	bne.n	80086d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	60bb      	str	r3, [r7, #8]
   return(result);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008720:	633b      	str	r3, [r7, #48]	; 0x30
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872a:	61ba      	str	r2, [r7, #24]
 800872c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6979      	ldr	r1, [r7, #20]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	613b      	str	r3, [r7, #16]
   return(result);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e5      	bne.n	800870a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008746:	bf00      	nop
 8008748:	373c      	adds	r7, #60	; 0x3c
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b095      	sub	sp, #84	; 0x54
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800876c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008776:	643b      	str	r3, [r7, #64]	; 0x40
 8008778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800877c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e6      	bne.n	8008758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	61fb      	str	r3, [r7, #28]
   return(result);
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e3      	bne.n	800878a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d118      	bne.n	80087fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f023 0310 	bic.w	r3, r3, #16
 80087de:	647b      	str	r3, [r7, #68]	; 0x44
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e8:	61bb      	str	r3, [r7, #24]
 80087ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6979      	ldr	r1, [r7, #20]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	613b      	str	r3, [r7, #16]
   return(result);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e6      	bne.n	80087ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008810:	bf00      	nop
 8008812:	3754      	adds	r7, #84	; 0x54
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr

0800881a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b090      	sub	sp, #64	; 0x40
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d137      	bne.n	80088a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	2200      	movs	r2, #0
 800883a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800883e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	623b      	str	r3, [r7, #32]
   return(result);
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008854:	63bb      	str	r3, [r7, #56]	; 0x38
 8008856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885e:	633a      	str	r2, [r7, #48]	; 0x30
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e5      	bne.n	800883e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	69b9      	ldr	r1, [r7, #24]
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	617b      	str	r3, [r7, #20]
   return(result);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e6      	bne.n	8008872 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088a4:	e002      	b.n	80088ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80088a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80088a8:	f7f9 fe38 	bl	800251c <HAL_UART_TxCpltCallback>
}
 80088ac:	bf00      	nop
 80088ae:	3740      	adds	r7, #64	; 0x40
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff f996 	bl	8007bf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f8:	2b80      	cmp	r3, #128	; 0x80
 80088fa:	d109      	bne.n	8008910 <UART_DMAError+0x40>
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2b21      	cmp	r3, #33	; 0x21
 8008900:	d106      	bne.n	8008910 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2200      	movs	r2, #0
 8008906:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	f7ff fee0 	bl	80086d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d109      	bne.n	8008932 <UART_DMAError+0x62>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b22      	cmp	r3, #34	; 0x22
 8008922:	d106      	bne.n	8008932 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2200      	movs	r2, #0
 8008928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800892c:	6978      	ldr	r0, [r7, #20]
 800892e:	f7ff ff0f 	bl	8008750 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008938:	f043 0210 	orr.w	r2, r3, #16
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008942:	6978      	ldr	r0, [r7, #20]
 8008944:	f7ff f95f 	bl	8007c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008948:	bf00      	nop
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff f949 	bl	8007c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	60bb      	str	r3, [r7, #8]
   return(result);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	61bb      	str	r3, [r7, #24]
 80089a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6979      	ldr	r1, [r7, #20]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	613b      	str	r3, [r7, #16]
   return(result);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e6      	bne.n	8008984 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7f9 fda9 	bl	800251c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ca:	bf00      	nop
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b096      	sub	sp, #88	; 0x58
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	2b22      	cmp	r3, #34	; 0x22
 80089ec:	f040 8095 	bne.w	8008b1a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089fe:	b2d9      	uxtb	r1, r3
 8008a00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	400a      	ands	r2, r1
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d178      	bne.n	8008b2a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a56:	647b      	str	r3, [r7, #68]	; 0x44
 8008a58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e6      	bne.n	8008a38 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	623b      	str	r3, [r7, #32]
   return(result);
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3308      	adds	r3, #8
 8008a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e5      	bne.n	8008a6a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d12e      	bne.n	8008b12 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad8:	61fb      	str	r3, [r7, #28]
 8008ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	69b9      	ldr	r1, [r7, #24]
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e6      	bne.n	8008aba <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	f003 0310 	and.w	r3, r3, #16
 8008af6:	2b10      	cmp	r3, #16
 8008af8:	d103      	bne.n	8008b02 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2210      	movs	r2, #16
 8008b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff f884 	bl	8007c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b10:	e00b      	b.n	8008b2a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7f9 fd18 	bl	8002548 <HAL_UART_RxCpltCallback>
}
 8008b18:	e007      	b.n	8008b2a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699a      	ldr	r2, [r3, #24]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0208 	orr.w	r2, r2, #8
 8008b28:	619a      	str	r2, [r3, #24]
}
 8008b2a:	bf00      	nop
 8008b2c:	3758      	adds	r7, #88	; 0x58
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b096      	sub	sp, #88	; 0x58
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4a:	2b22      	cmp	r3, #34	; 0x22
 8008b4c:	f040 8095 	bne.w	8008c7a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b68:	4013      	ands	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b74:	1c9a      	adds	r2, r3, #2
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d178      	bne.n	8008c8a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e6      	bne.n	8008b98 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e5      	bne.n	8008bca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d12e      	bne.n	8008c72 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f023 0310 	bic.w	r3, r3, #16
 8008c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	6979      	ldr	r1, [r7, #20]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	613b      	str	r3, [r7, #16]
   return(result);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e6      	bne.n	8008c1a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d103      	bne.n	8008c62 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2210      	movs	r2, #16
 8008c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe ffd4 	bl	8007c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c70:	e00b      	b.n	8008c8a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7f9 fc68 	bl	8002548 <HAL_UART_RxCpltCallback>
}
 8008c78:	e007      	b.n	8008c8a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699a      	ldr	r2, [r3, #24]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0208 	orr.w	r2, r2, #8
 8008c88:	619a      	str	r2, [r3, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	3758      	adds	r7, #88	; 0x58
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b0a6      	sub	sp, #152	; 0x98
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ca2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cca:	2b22      	cmp	r3, #34	; 0x22
 8008ccc:	f040 814f 	bne.w	8008f6e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cd6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cda:	e0f6      	b.n	8008eca <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ce6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008cea:	b2d9      	uxtb	r1, r3
 8008cec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf6:	400a      	ands	r2, r1
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d053      	beq.n	8008dd6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d011      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d54:	f043 0201 	orr.w	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d011      	beq.n	8008d8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d84:	f043 0204 	orr.w	r2, r3, #4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d011      	beq.n	8008dbe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2204      	movs	r2, #4
 8008dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008db4:	f043 0202 	orr.w	r2, r3, #2
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7fe ff1c 	bl	8007c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d173      	bne.n	8008eca <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e04:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e06:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e4      	bne.n	8008de2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e2e:	f023 0301 	bic.w	r3, r3, #1
 8008e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3308      	adds	r3, #8
 8008e3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e3c:	657a      	str	r2, [r7, #84]	; 0x54
 8008e3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e3      	bne.n	8008e18 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d12e      	bne.n	8008ec4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	f023 0310 	bic.w	r3, r3, #16
 8008e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b10      	cmp	r3, #16
 8008eaa:	d103      	bne.n	8008eb4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2210      	movs	r2, #16
 8008eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe feab 	bl	8007c18 <HAL_UARTEx_RxEventCallback>
 8008ec2:	e002      	b.n	8008eca <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7f9 fb3f 	bl	8002548 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d006      	beq.n	8008ee0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f47f aefe 	bne.w	8008cdc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ee6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d045      	beq.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ef8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d23e      	bcs.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3308      	adds	r3, #8
 8008f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f16:	673b      	str	r3, [r7, #112]	; 0x70
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e5      	bne.n	8008f00 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008f38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f043 0320 	orr.w	r3, r3, #32
 8008f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6979      	ldr	r1, [r7, #20]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	613b      	str	r3, [r7, #16]
   return(result);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e6      	bne.n	8008f3a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f6c:	e007      	b.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0208 	orr.w	r2, r2, #8
 8008f7c:	619a      	str	r2, [r3, #24]
}
 8008f7e:	bf00      	nop
 8008f80:	3798      	adds	r7, #152	; 0x98
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	080089d3 	.word	0x080089d3

08008f8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b0a8      	sub	sp, #160	; 0xa0
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f9a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc2:	2b22      	cmp	r3, #34	; 0x22
 8008fc4:	f040 8153 	bne.w	800926e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fd2:	e0fa      	b.n	80091ca <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fe6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008fea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fee:	4013      	ands	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffc:	1c9a      	adds	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800901e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d053      	beq.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800902a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d011      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009050:	f043 0201 	orr.w	r2, r3, #1
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800905a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d011      	beq.n	800908a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2202      	movs	r2, #2
 8009078:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009080:	f043 0204 	orr.w	r2, r3, #4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800908a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d011      	beq.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b0:	f043 0202 	orr.w	r2, r3, #2
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fe fd9e 	bl	8007c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d175      	bne.n	80091ca <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009102:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009106:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800910e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e4      	bne.n	80090de <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800912a:	f023 0301 	bic.w	r3, r3, #1
 800912e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800913c:	65ba      	str	r2, [r7, #88]	; 0x58
 800913e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800914a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e1      	bne.n	8009114 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009162:	2b01      	cmp	r3, #1
 8009164:	d12e      	bne.n	80091c4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	f023 0310 	bic.w	r3, r3, #16
 8009180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800918a:	647b      	str	r3, [r7, #68]	; 0x44
 800918c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d103      	bne.n	80091b4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2210      	movs	r2, #16
 80091b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7fe fd2b 	bl	8007c18 <HAL_UARTEx_RxEventCallback>
 80091c2:	e002      	b.n	80091ca <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7f9 f9bf 	bl	8002548 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d006      	beq.n	80091e0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80091d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f47f aefa 	bne.w	8008fd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091ea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d045      	beq.n	800927e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091f8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d23e      	bcs.n	800927e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3308      	adds	r3, #8
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	623b      	str	r3, [r7, #32]
   return(result);
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009216:	677b      	str	r3, [r7, #116]	; 0x74
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009220:	633a      	str	r2, [r7, #48]	; 0x30
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a14      	ldr	r2, [pc, #80]	; (8009288 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009238:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60fb      	str	r3, [r7, #12]
   return(result);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f043 0320 	orr.w	r3, r3, #32
 800924e:	673b      	str	r3, [r7, #112]	; 0x70
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800926c:	e007      	b.n	800927e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0208 	orr.w	r2, r2, #8
 800927c:	619a      	str	r2, [r3, #24]
}
 800927e:	bf00      	nop
 8009280:	37a0      	adds	r7, #160	; 0xa0
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	08008b33 	.word	0x08008b33

0800928c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr

0800929e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr

080092c2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b088      	sub	sp, #32
 80092c6:	af02      	add	r7, sp, #8
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	1d3b      	adds	r3, r7, #4
 80092cc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d101      	bne.n	80092e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80092de:	2302      	movs	r3, #2
 80092e0:	e046      	b.n	8009370 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2224      	movs	r2, #36	; 0x24
 80092ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d105      	bne.n	8009328 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 f90e 	bl	8009544 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0201 	orr.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009338:	f7f8 fc50 	bl	8001bdc <HAL_GetTick>
 800933c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800933e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2200      	movs	r2, #0
 8009348:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f7fe ffcf 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	75fb      	strb	r3, [r7, #23]
 800935c:	e003      	b.n	8009366 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009378:	b480      	push	{r7}
 800937a:	b089      	sub	sp, #36	; 0x24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009386:	2b01      	cmp	r3, #1
 8009388:	d101      	bne.n	800938e <HAL_UARTEx_EnableStopMode+0x16>
 800938a:	2302      	movs	r3, #2
 800938c:	e021      	b.n	80093d2 <HAL_UARTEx_EnableStopMode+0x5a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f043 0302 	orr.w	r3, r3, #2
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e6      	bne.n	8009396 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bc80      	pop	{r7}
 80093da:	4770      	bx	lr

080093dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e027      	b.n	8009442 <HAL_UARTEx_DisableFifoMode+0x66>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2224      	movs	r2, #36	; 0x24
 80093fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0201 	bic.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009420:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800945c:	2b01      	cmp	r3, #1
 800945e:	d101      	bne.n	8009464 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009460:	2302      	movs	r3, #2
 8009462:	e02d      	b.n	80094c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2224      	movs	r2, #36	; 0x24
 8009470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f871 	bl	8009588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094dc:	2302      	movs	r3, #2
 80094de:	e02d      	b.n	800953c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2224      	movs	r2, #36	; 0x24
 80094ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0201 	bic.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f833 	bl	8009588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	1d3b      	adds	r3, r7, #4
 800954e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f023 0210 	bic.w	r2, r3, #16
 800955c:	893b      	ldrh	r3, [r7, #8]
 800955e:	4619      	mov	r1, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009572:	7abb      	ldrb	r3, [r7, #10]
 8009574:	061a      	lsls	r2, r3, #24
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr

08009588 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009594:	2b00      	cmp	r3, #0
 8009596:	d108      	bne.n	80095aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095a8:	e031      	b.n	800960e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095aa:	2308      	movs	r3, #8
 80095ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095ae:	2308      	movs	r3, #8
 80095b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	0e5b      	lsrs	r3, r3, #25
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	0f5b      	lsrs	r3, r3, #29
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	7b3a      	ldrb	r2, [r7, #12]
 80095d6:	4910      	ldr	r1, [pc, #64]	; (8009618 <UARTEx_SetNbDataToProcess+0x90>)
 80095d8:	5c8a      	ldrb	r2, [r1, r2]
 80095da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095de:	7b3a      	ldrb	r2, [r7, #12]
 80095e0:	490e      	ldr	r1, [pc, #56]	; (800961c <UARTEx_SetNbDataToProcess+0x94>)
 80095e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	7b7a      	ldrb	r2, [r7, #13]
 80095f4:	4908      	ldr	r1, [pc, #32]	; (8009618 <UARTEx_SetNbDataToProcess+0x90>)
 80095f6:	5c8a      	ldrb	r2, [r1, r2]
 80095f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095fc:	7b7a      	ldrb	r2, [r7, #13]
 80095fe:	4907      	ldr	r1, [pc, #28]	; (800961c <UARTEx_SetNbDataToProcess+0x94>)
 8009600:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009602:	fb93 f3f2 	sdiv	r3, r3, r2
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	bc80      	pop	{r7}
 8009616:	4770      	bx	lr
 8009618:	0801b6c0 	.word	0x0801b6c0
 800961c:	0801b6c8 	.word	0x0801b6c8

08009620 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009624:	f7f8 f97e 	bl	8001924 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009628:	f000 f820 	bl	800966c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800962c:	bf00      	nop
 800962e:	bd80      	pop	{r7, pc}

08009630 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	f010 f940 	bl	80198bc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}

08009640 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009644:	f3bf 8f4f 	dsb	sy
}
 8009648:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <__NVIC_SystemReset+0x24>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009652:	4904      	ldr	r1, [pc, #16]	; (8009664 <__NVIC_SystemReset+0x24>)
 8009654:	4b04      	ldr	r3, [pc, #16]	; (8009668 <__NVIC_SystemReset+0x28>)
 8009656:	4313      	orrs	r3, r2
 8009658:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800965a:	f3bf 8f4f 	dsb	sy
}
 800965e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009660:	bf00      	nop
 8009662:	e7fd      	b.n	8009660 <__NVIC_SystemReset+0x20>
 8009664:	e000ed00 	.word	0xe000ed00
 8009668:	05fa0004 	.word	0x05fa0004

0800966c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009672:	2300      	movs	r3, #0
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	4b20      	ldr	r3, [pc, #128]	; (80096f8 <LoRaWAN_Init+0x8c>)
 8009678:	2200      	movs	r2, #0
 800967a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800967e:	481f      	ldr	r0, [pc, #124]	; (80096fc <LoRaWAN_Init+0x90>)
 8009680:	f010 fabc 	bl	8019bfc <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009684:	4a1e      	ldr	r2, [pc, #120]	; (8009700 <LoRaWAN_Init+0x94>)
 8009686:	2100      	movs	r1, #0
 8009688:	2001      	movs	r0, #1
 800968a:	f010 fa13 	bl	8019ab4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800968e:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <LoRaWAN_Init+0x98>)
 8009690:	2100      	movs	r1, #0
 8009692:	2002      	movs	r0, #2
 8009694:	f010 fa0e 	bl	8019ab4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009698:	4a1b      	ldr	r2, [pc, #108]	; (8009708 <LoRaWAN_Init+0x9c>)
 800969a:	2100      	movs	r1, #0
 800969c:	2004      	movs	r0, #4
 800969e:	f010 fa09 	bl	8019ab4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80096a2:	4a1a      	ldr	r2, [pc, #104]	; (800970c <LoRaWAN_Init+0xa0>)
 80096a4:	2100      	movs	r1, #0
 80096a6:	2008      	movs	r0, #8
 80096a8:	f010 fa04 	bl	8019ab4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 80096ac:	f000 f9ce 	bl	8009a4c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80096b0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80096b4:	4816      	ldr	r0, [pc, #88]	; (8009710 <LoRaWAN_Init+0xa4>)
 80096b6:	f001 ff23 	bl	800b500 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 80096ba:	4816      	ldr	r0, [pc, #88]	; (8009714 <LoRaWAN_Init+0xa8>)
 80096bc:	f001 ff6c 	bl	800b598 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  APP_LOG(TS_OFF, VLEVEL_M, "LoRaWAN_Init2\r\n");
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 80096c0:	4b15      	ldr	r3, [pc, #84]	; (8009718 <LoRaWAN_Init+0xac>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	4a15      	ldr	r2, [pc, #84]	; (800971c <LoRaWAN_Init+0xb0>)
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f002 f8b6 	bl	800b83c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 80096d0:	4b13      	ldr	r3, [pc, #76]	; (8009720 <LoRaWAN_Init+0xb4>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <LoRaWAN_Init+0x84>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80096d8:	4b12      	ldr	r3, [pc, #72]	; (8009724 <LoRaWAN_Init+0xb8>)
 80096da:	6819      	ldr	r1, [r3, #0]
 80096dc:	2300      	movs	r3, #0
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <LoRaWAN_Init+0xbc>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	4811      	ldr	r0, [pc, #68]	; (800972c <LoRaWAN_Init+0xc0>)
 80096e6:	f010 fa89 	bl	8019bfc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80096ea:	4810      	ldr	r0, [pc, #64]	; (800972c <LoRaWAN_Init+0xc0>)
 80096ec:	f010 fabc 	bl	8019c68 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */
  //LmHandlerSetDutyCycleEnable(false);
  /* USER CODE END LoRaWAN_Init_Last */
}
 80096f0:	bf00      	nop
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	08009971 	.word	0x08009971
 80096fc:	200003ac 	.word	0x200003ac
 8009700:	0800b819 	.word	0x0800b819
 8009704:	08009745 	.word	0x08009745
 8009708:	08009995 	.word	0x08009995
 800970c:	08009925 	.word	0x08009925
 8009710:	2000000c 	.word	0x2000000c
 8009714:	20000058 	.word	0x20000058
 8009718:	20000008 	.word	0x20000008
 800971c:	20000009 	.word	0x20000009
 8009720:	20000390 	.word	0x20000390
 8009724:	2000006c 	.word	0x2000006c
 8009728:	080097f1 	.word	0x080097f1
 800972c:	20000394 	.word	0x20000394

08009730 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr

08009744 <SendTxData>:

static void SendTxData(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
	LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800974a:	23ff      	movs	r3, #255	; 0xff
 800974c:	70fb      	strb	r3, [r7, #3]
	int16_t temperature = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	803b      	strh	r3, [r7, #0]
	UTIL_TIMER_Time_t nextTxIn = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	607b      	str	r3, [r7, #4]
	temperature = SYS_GetTemperatureLevel() >> 8; /* degC */
 8009756:	f7f7 fb3b 	bl	8000dd0 <SYS_GetTemperatureLevel>
 800975a:	4603      	mov	r3, r0
 800975c:	121b      	asrs	r3, r3, #8
 800975e:	803b      	strh	r3, [r7, #0]
	AppData.Port = LORAWAN_USER_APP_PORT;
 8009760:	4b1d      	ldr	r3, [pc, #116]	; (80097d8 <SendTxData+0x94>)
 8009762:	2202      	movs	r2, #2
 8009764:	701a      	strb	r2, [r3, #0]
	AppData.BufferSize = snprintf((char*)AppData.Buffer,LORAWAN_APP_DATA_BUFFER_MAX_SIZE,"%d",temperature);
 8009766:	4b1c      	ldr	r3, [pc, #112]	; (80097d8 <SendTxData+0x94>)
 8009768:	6858      	ldr	r0, [r3, #4]
 800976a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800976e:	4a1b      	ldr	r2, [pc, #108]	; (80097dc <SendTxData+0x98>)
 8009770:	21f2      	movs	r1, #242	; 0xf2
 8009772:	f010 ff95 	bl	801a6a0 <sniprintf>
 8009776:	4603      	mov	r3, r0
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b17      	ldr	r3, [pc, #92]	; (80097d8 <SendTxData+0x94>)
 800977c:	705a      	strb	r2, [r3, #1]


	  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800977e:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <SendTxData+0x9c>)
 8009780:	78db      	ldrb	r3, [r3, #3]
 8009782:	2200      	movs	r2, #0
 8009784:	4619      	mov	r1, r3
 8009786:	4814      	ldr	r0, [pc, #80]	; (80097d8 <SendTxData+0x94>)
 8009788:	f002 f8f4 	bl	800b974 <LmHandlerSend>
 800978c:	4603      	mov	r3, r0
 800978e:	70fb      	strb	r3, [r7, #3]
	   if (LORAMAC_HANDLER_SUCCESS == status)
 8009790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <SendTxData+0x64>
	   {
	     APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
	   }
	   else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8009798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800979c:	f113 0f06 	cmn.w	r3, #6
 80097a0:	d102      	bne.n	80097a8 <SendTxData+0x64>
	   {
	     nextTxIn = LmHandlerGetDutyCycleWaitTime();
 80097a2:	f002 f841 	bl	800b828 <LmHandlerGetDutyCycleWaitTime>
 80097a6:	6078      	str	r0, [r7, #4]
	     {
	       APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
	     }
	   }

	   if (EventType == TX_ON_TIMER)
 80097a8:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <SendTxData+0xa0>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10f      	bne.n	80097d0 <SendTxData+0x8c>
	   {
	     UTIL_TIMER_Stop(&TxTimer);
 80097b0:	480d      	ldr	r0, [pc, #52]	; (80097e8 <SendTxData+0xa4>)
 80097b2:	f010 fac7 	bl	8019d44 <UTIL_TIMER_Stop>
	     UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80097b6:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <SendTxData+0xa8>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4293      	cmp	r3, r2
 80097be:	bf38      	it	cc
 80097c0:	4613      	movcc	r3, r2
 80097c2:	4619      	mov	r1, r3
 80097c4:	4808      	ldr	r0, [pc, #32]	; (80097e8 <SendTxData+0xa4>)
 80097c6:	f010 fb2d 	bl	8019e24 <UTIL_TIMER_SetPeriod>
	     UTIL_TIMER_Start(&TxTimer);
 80097ca:	4807      	ldr	r0, [pc, #28]	; (80097e8 <SendTxData+0xa4>)
 80097cc:	f010 fa4c 	bl	8019c68 <UTIL_TIMER_Start>
	   }

  /* USER CODE END SendTxData_1 */
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000070 	.word	0x20000070
 80097dc:	0801b0fc 	.word	0x0801b0fc
 80097e0:	20000058 	.word	0x20000058
 80097e4:	20000390 	.word	0x20000390
 80097e8:	20000394 	.word	0x20000394
 80097ec:	2000006c 	.word	0x2000006c

080097f0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80097f8:	2100      	movs	r1, #0
 80097fa:	2002      	movs	r0, #2
 80097fc:	f010 f97c 	bl	8019af8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8009800:	4803      	ldr	r0, [pc, #12]	; (8009810 <OnTxTimerEvent+0x20>)
 8009802:	f010 fa31 	bl	8019c68 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000394 	.word	0x20000394

08009814 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	bc80      	pop	{r7}
 8009824:	4770      	bx	lr

08009826 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <OnJoinRequest+0x16>
	  {
	    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800983a:	2b00      	cmp	r3, #0
	    {
	      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
	    }
	  }
  /* USER CODE END OnJoinRequest_1 */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	bc80      	pop	{r7}
 8009844:	4770      	bx	lr

08009846 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 8009862:	bf00      	nop
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	bc80      	pop	{r7}
 800986a:	4770      	bx	lr

0800986c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009870:	2100      	movs	r1, #0
 8009872:	2001      	movs	r0, #1
 8009874:	f010 f940 	bl	8019af8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009878:	bf00      	nop
 800987a:	bd80      	pop	{r7, pc}

0800987c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 8009884:	4a0c      	ldr	r2, [pc, #48]	; (80098b8 <OnTxPeriodicityChanged+0x3c>)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <OnTxPeriodicityChanged+0x3c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <OnTxPeriodicityChanged+0x1c>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <OnTxPeriodicityChanged+0x3c>)
 8009894:	4a09      	ldr	r2, [pc, #36]	; (80098bc <OnTxPeriodicityChanged+0x40>)
 8009896:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 8009898:	4809      	ldr	r0, [pc, #36]	; (80098c0 <OnTxPeriodicityChanged+0x44>)
 800989a:	f010 fa53 	bl	8019d44 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <OnTxPeriodicityChanged+0x3c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4619      	mov	r1, r3
 80098a4:	4806      	ldr	r0, [pc, #24]	; (80098c0 <OnTxPeriodicityChanged+0x44>)
 80098a6:	f010 fabd 	bl	8019e24 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 80098aa:	4805      	ldr	r0, [pc, #20]	; (80098c0 <OnTxPeriodicityChanged+0x44>)
 80098ac:	f010 f9dc 	bl	8019c68 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	2000006c 	.word	0x2000006c
 80098bc:	000493e0 	.word	0x000493e0
 80098c0:	20000394 	.word	0x20000394

080098c4 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80098ce:	4a04      	ldr	r2, [pc, #16]	; (80098e0 <OnTxFrameCtrlChanged+0x1c>)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	20000058 	.word	0x20000058

080098e4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80098ee:	4a04      	ldr	r2, [pc, #16]	; (8009900 <OnPingSlotPeriodicityChanged+0x1c>)
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bc80      	pop	{r7}
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	20000058 	.word	0x20000058

08009904 <OnSystemReset>:

static void OnSystemReset(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009908:	f002 fcfd 	bl	800c306 <LmHandlerHalt>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <OnSystemReset+0x1c>
 8009912:	f002 f813 	bl	800b93c <LmHandlerJoinStatus>
 8009916:	4603      	mov	r3, r0
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800991c:	f7ff fe90 	bl	8009640 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 8009920:	bf00      	nop
 8009922:	bd80      	pop	{r7, pc}

08009924 <StopJoin>:

static void StopJoin(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 8009928:	480d      	ldr	r0, [pc, #52]	; (8009960 <StopJoin+0x3c>)
 800992a:	f010 fa0b 	bl	8019d44 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800992e:	f002 fcdd 	bl	800c2ec <LmHandlerStop>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10e      	bne.n	8009956 <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 8009938:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <StopJoin+0x40>)
 800993a:	2201      	movs	r2, #1
 800993c:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800993e:	480a      	ldr	r0, [pc, #40]	; (8009968 <StopJoin+0x44>)
 8009940:	f001 fe2a 	bl	800b598 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8009944:	4b07      	ldr	r3, [pc, #28]	; (8009964 <StopJoin+0x40>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2101      	movs	r1, #1
 800994a:	4618      	mov	r0, r3
 800994c:	f001 ff76 	bl	800b83c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8009950:	4803      	ldr	r0, [pc, #12]	; (8009960 <StopJoin+0x3c>)
 8009952:	f010 f989 	bl	8019c68 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 8009956:	4805      	ldr	r0, [pc, #20]	; (800996c <StopJoin+0x48>)
 8009958:	f010 f986 	bl	8019c68 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800995c:	bf00      	nop
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000394 	.word	0x20000394
 8009964:	20000008 	.word	0x20000008
 8009968:	20000058 	.word	0x20000058
 800996c:	200003ac 	.word	0x200003ac

08009970 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <OnStopJoinTimerEvent+0x20>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b02      	cmp	r3, #2
 800997e:	d103      	bne.n	8009988 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8009980:	2100      	movs	r1, #0
 8009982:	2008      	movs	r0, #8
 8009984:	f010 f8b8 	bl	8019af8 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20000008 	.word	0x20000008

08009994 <StoreContext>:

static void StoreContext(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800999a:	23ff      	movs	r3, #255	; 0xff
 800999c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800999e:	f002 fcbf 	bl	800c320 <LmHandlerNvmDataStore>
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	4603      	mov	r3, r0
 80099b6:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr
	...

080099c4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80099ce:	f7fa fc5f 	bl	8004290 <HAL_FLASH_Unlock>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11c      	bne.n	8009a12 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 80099d8:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <OnStoreContextRequest+0x58>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	029a      	lsls	r2, r3, #10
 80099de:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <OnStoreContextRequest+0x5c>)
 80099e0:	4013      	ands	r3, r2
 80099e2:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 80099e6:	fbb2 f1f3 	udiv	r1, r2, r3
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	0adb      	lsrs	r3, r3, #11
 80099f2:	2200      	movs	r2, #0
 80099f4:	2101      	movs	r1, #1
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f7 fbf3 	bl	80011e2 <FLASH_IF_EraseByPages>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8009a02:	2300      	movs	r3, #0
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4806      	ldr	r0, [pc, #24]	; (8009a24 <OnStoreContextRequest+0x60>)
 8009a0a:	f7f7 fb09 	bl	8001020 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 8009a0e:	f7fa fc61 	bl	80042d4 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	1fff75e0 	.word	0x1fff75e0
 8009a20:	03fffc00 	.word	0x03fffc00
 8009a24:	0803f000 	.word	0x0803f000

08009a28 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	461a      	mov	r2, r3
 8009a38:	4903      	ldr	r1, [pc, #12]	; (8009a48 <OnRestoreContextRequest+0x20>)
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f00f fb3c 	bl	80190b8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	0803f000 	.word	0x0803f000

08009a4c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8009a50:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009a5c:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009a62:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f043 0320 	orr.w	r3, r3, #32
 8009a70:	4a0d      	ldr	r2, [pc, #52]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a72:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10c      	bne.n	8009a96 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009a7c:	4b0b      	ldr	r3, [pc, #44]	; (8009aac <LoraInfo_Init+0x60>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2100      	movs	r1, #0
 8009a82:	2000      	movs	r0, #0
 8009a84:	f010 fb68 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009a88:	bf00      	nop
 8009a8a:	f010 fb53 	bl	801a134 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d1fa      	bne.n	8009a8a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009a94:	e7fe      	b.n	8009a94 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009a96:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8009a9c:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <LoraInfo_Init+0x5c>)
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009aa2:	bf00      	nop
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	200004b8 	.word	0x200004b8
 8009aac:	0801b100 	.word	0x0801b100

08009ab0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <LoraInfo_GetPtr+0x10>)
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bc80      	pop	{r7}
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	200004b8 	.word	0x200004b8

08009ac4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8009ace:	463b      	mov	r3, r7
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	605a      	str	r2, [r3, #4]
 8009ad6:	609a      	str	r2, [r3, #8]
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	611a      	str	r2, [r3, #16]

  /* Configure the Radio Switch pin */
    gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8009adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae0:	603b      	str	r3, [r7, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aea:	2303      	movs	r3, #3
 8009aec:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009aee:	463b      	mov	r3, r7
 8009af0:	4619      	mov	r1, r3
 8009af2:	480e      	ldr	r0, [pc, #56]	; (8009b2c <RBI_Init+0x68>)
 8009af4:	f7fa fdea 	bl	80046cc <HAL_GPIO_Init>

    gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8009af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009afc:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8009afe:	463b      	mov	r3, r7
 8009b00:	4619      	mov	r1, r3
 8009b02:	480b      	ldr	r0, [pc, #44]	; (8009b30 <RBI_Init+0x6c>)
 8009b04:	f7fa fde2 	bl	80046cc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b0e:	4808      	ldr	r0, [pc, #32]	; (8009b30 <RBI_Init+0x6c>)
 8009b10:	f7fb f80a 	bl	8004b28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009b14:	2200      	movs	r2, #0
 8009b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b1a:	4804      	ldr	r0, [pc, #16]	; (8009b2c <RBI_Init+0x68>)
 8009b1c:	f7fb f804 	bl	8004b28 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009b20:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	48000400 	.word	0x48000400
 8009b30:	48000800 	.word	0x48000800

08009b34 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  switch (Config)
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d83f      	bhi.n	8009bc8 <RBI_ConfigRFSwitch+0x94>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <RBI_ConfigRFSwitch+0x1c>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009b7b 	.word	0x08009b7b
 8009b58:	08009b95 	.word	0x08009b95
 8009b5c:	08009baf 	.word	0x08009baf
    {
      case RBI_SWITCH_OFF:
      {
        /* Turn off switch */
        //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: OFF\r\n");
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009b60:	2200      	movs	r2, #0
 8009b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b66:	481b      	ldr	r0, [pc, #108]	; (8009bd4 <RBI_ConfigRFSwitch+0xa0>)
 8009b68:	f7fa ffde 	bl	8004b28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b72:	4819      	ldr	r0, [pc, #100]	; (8009bd8 <RBI_ConfigRFSwitch+0xa4>)
 8009b74:	f7fa ffd8 	bl	8004b28 <HAL_GPIO_WritePin>
        break;
 8009b78:	e027      	b.n	8009bca <RBI_ConfigRFSwitch+0x96>
      }
      case RBI_SWITCH_RX:
      {
        /*Turns On in Rx Mode the RF Switch */
        //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: RX\r\n");
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b80:	4814      	ldr	r0, [pc, #80]	; (8009bd4 <RBI_ConfigRFSwitch+0xa0>)
 8009b82:	f7fa ffd1 	bl	8004b28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009b86:	2200      	movs	r2, #0
 8009b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b8c:	4812      	ldr	r0, [pc, #72]	; (8009bd8 <RBI_ConfigRFSwitch+0xa4>)
 8009b8e:	f7fa ffcb 	bl	8004b28 <HAL_GPIO_WritePin>
        break;
 8009b92:	e01a      	b.n	8009bca <RBI_ConfigRFSwitch+0x96>
      }
      case RBI_SWITCH_RFO_LP:
      {
        /*Turns On in Tx Low Power the RF Switch */
        //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: LP\r\n");
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009b94:	2201      	movs	r2, #1
 8009b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b9a:	480e      	ldr	r0, [pc, #56]	; (8009bd4 <RBI_ConfigRFSwitch+0xa0>)
 8009b9c:	f7fa ffc4 	bl	8004b28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ba6:	480c      	ldr	r0, [pc, #48]	; (8009bd8 <RBI_ConfigRFSwitch+0xa4>)
 8009ba8:	f7fa ffbe 	bl	8004b28 <HAL_GPIO_WritePin>
        break;
 8009bac:	e00d      	b.n	8009bca <RBI_ConfigRFSwitch+0x96>
      }
      case RBI_SWITCH_RFO_HP:
      {
        /*Turns On in Tx High Power the RF Switch */
        //APP_LOG(TS_OFF, VLEVEL_M, "RF SWITCH: HP\r\n");
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bb4:	4807      	ldr	r0, [pc, #28]	; (8009bd4 <RBI_ConfigRFSwitch+0xa0>)
 8009bb6:	f7fa ffb7 	bl	8004b28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009bc0:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <RBI_ConfigRFSwitch+0xa4>)
 8009bc2:	f7fa ffb1 	bl	8004b28 <HAL_GPIO_WritePin>
        break;
 8009bc6:	e000      	b.n	8009bca <RBI_ConfigRFSwitch+0x96>
      }
      default:
        break;
 8009bc8:	bf00      	nop
    }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009bca:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	48000400 	.word	0x48000400
 8009bd8:	48000800 	.word	0x48000800

08009bdc <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009be2:	2302      	movs	r3, #2
 8009be4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8009be6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr

08009bf2 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8009bfc:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bc80      	pop	{r7}
 8009c06:	4770      	bx	lr

08009c08 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8009c12:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bc80      	pop	{r7}
 8009c1c:	4770      	bx	lr

08009c1e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	4603      	mov	r3, r0
 8009c26:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8009c32:	230f      	movs	r3, #15
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	e001      	b.n	8009c3c <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8009c38:	2316      	movs	r3, #22
 8009c3a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bc80      	pop	{r7}
 8009c46:	4770      	bx	lr

08009c48 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	33f1      	adds	r3, #241	; 0xf1
 8009c54:	2210      	movs	r2, #16
 8009c56:	2100      	movs	r1, #0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f00b ff63 	bl	8015b24 <memset1>
    ctx->M_n = 0;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	22f0      	movs	r2, #240	; 0xf0
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f00b ff59 	bl	8015b24 <memset1>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	461a      	mov	r2, r3
 8009c88:	2110      	movs	r1, #16
 8009c8a:	6838      	ldr	r0, [r7, #0]
 8009c8c:	f000 fe5c 	bl	800a948 <lorawan_aes_set_key>
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08c      	sub	sp, #48	; 0x30
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 80a1 	beq.w	8009df2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009cb6:	f1c3 0310 	rsb	r3, r3, #16
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	bf28      	it	cs
 8009cc0:	4613      	movcs	r3, r2
 8009cc2:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f203 1201 	addw	r2, r3, #257	; 0x101
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009cd0:	4413      	add	r3, r2
 8009cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd4:	b292      	uxth	r2, r2
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f00b fee8 	bl	8015aae <memcpy1>
        ctx->M_n += mlen;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	441a      	add	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009cf4:	2b0f      	cmp	r3, #15
 8009cf6:	f240 808d 	bls.w	8009e14 <AES_CMAC_Update+0x17c>
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	f000 8088 	beq.w	8009e14 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8009d04:	2300      	movs	r3, #0
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d08:	e015      	b.n	8009d36 <AES_CMAC_Update+0x9e>
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	4413      	add	r3, r2
 8009d10:	33f1      	adds	r3, #241	; 0xf1
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	68f9      	ldr	r1, [r7, #12]
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	440b      	add	r3, r1
 8009d1a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	4053      	eors	r3, r2
 8009d22:	b2d9      	uxtb	r1, r3
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	4413      	add	r3, r2
 8009d2a:	33f1      	adds	r3, #241	; 0xf1
 8009d2c:	460a      	mov	r2, r1
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	3301      	adds	r3, #1
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	2b0f      	cmp	r3, #15
 8009d3a:	dde6      	ble.n	8009d0a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009d42:	f107 0314 	add.w	r3, r7, #20
 8009d46:	2210      	movs	r2, #16
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f00b feb0 	bl	8015aae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	f107 0114 	add.w	r1, r7, #20
 8009d54:	f107 0314 	add.w	r3, r7, #20
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fed3 	bl	800ab04 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	33f1      	adds	r3, #241	; 0xf1
 8009d62:	f107 0114 	add.w	r1, r7, #20
 8009d66:	2210      	movs	r2, #16
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f00b fea0 	bl	8015aae <memcpy1>

        data += mlen;
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	4413      	add	r3, r2
 8009d74:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8009d7e:	e038      	b.n	8009df2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8009d80:	2300      	movs	r3, #0
 8009d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d84:	e013      	b.n	8009dae <AES_CMAC_Update+0x116>
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	4413      	add	r3, r2
 8009d8c:	33f1      	adds	r3, #241	; 0xf1
 8009d8e:	781a      	ldrb	r2, [r3, #0]
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	440b      	add	r3, r1
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	4053      	eors	r3, r2
 8009d9a:	b2d9      	uxtb	r1, r3
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	4413      	add	r3, r2
 8009da2:	33f1      	adds	r3, #241	; 0xf1
 8009da4:	460a      	mov	r2, r1
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	3301      	adds	r3, #1
 8009dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	2b0f      	cmp	r3, #15
 8009db2:	dde8      	ble.n	8009d86 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	2210      	movs	r2, #16
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f00b fe74 	bl	8015aae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	f107 0114 	add.w	r1, r7, #20
 8009dcc:	f107 0314 	add.w	r3, r7, #20
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fe97 	bl	800ab04 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	33f1      	adds	r3, #241	; 0xf1
 8009dda:	f107 0114 	add.w	r1, r7, #20
 8009dde:	2210      	movs	r2, #16
 8009de0:	4618      	mov	r0, r3
 8009de2:	f00b fe64 	bl	8015aae <memcpy1>

        data += 16;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	3310      	adds	r3, #16
 8009dea:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3b10      	subs	r3, #16
 8009df0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b10      	cmp	r3, #16
 8009df6:	d8c3      	bhi.n	8009d80 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	b292      	uxth	r2, r2
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f00b fe52 	bl	8015aae <memcpy1>
    ctx->M_n = len;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009e12:	e000      	b.n	8009e16 <AES_CMAC_Update+0x17e>
            return;
 8009e14:	bf00      	nop
}
 8009e16:	3730      	adds	r7, #48	; 0x30
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b092      	sub	sp, #72	; 0x48
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8009e26:	f107 031c 	add.w	r3, r7, #28
 8009e2a:	2210      	movs	r2, #16
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f00b fe78 	bl	8015b24 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	f107 011c 	add.w	r1, r7, #28
 8009e3a:	f107 031c 	add.w	r3, r7, #28
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fe60 	bl	800ab04 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8009e44:	7f3b      	ldrb	r3, [r7, #28]
 8009e46:	b25b      	sxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da30      	bge.n	8009eae <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e50:	e01b      	b.n	8009e8a <AES_CMAC_Final+0x6e>
 8009e52:	f107 021c 	add.w	r2, r7, #28
 8009e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e58:	4413      	add	r3, r2
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	b25a      	sxtb	r2, r3
 8009e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e62:	3301      	adds	r3, #1
 8009e64:	3348      	adds	r3, #72	; 0x48
 8009e66:	443b      	add	r3, r7
 8009e68:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009e6c:	09db      	lsrs	r3, r3, #7
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	b25b      	sxtb	r3, r3
 8009e72:	4313      	orrs	r3, r2
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	b2d9      	uxtb	r1, r3
 8009e78:	f107 021c 	add.w	r2, r7, #28
 8009e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7e:	4413      	add	r3, r2
 8009e80:	460a      	mov	r2, r1
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e86:	3301      	adds	r3, #1
 8009e88:	647b      	str	r3, [r7, #68]	; 0x44
 8009e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8c:	2b0e      	cmp	r3, #14
 8009e8e:	dde0      	ble.n	8009e52 <AES_CMAC_Final+0x36>
 8009e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8009e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ea0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009ea4:	43db      	mvns	r3, r3
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eac:	e027      	b.n	8009efe <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 8009eae:	2300      	movs	r3, #0
 8009eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8009eb2:	e01b      	b.n	8009eec <AES_CMAC_Final+0xd0>
 8009eb4:	f107 021c 	add.w	r2, r7, #28
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eba:	4413      	add	r3, r2
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	b25a      	sxtb	r2, r3
 8009ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	3348      	adds	r3, #72	; 0x48
 8009ec8:	443b      	add	r3, r7
 8009eca:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009ece:	09db      	lsrs	r3, r3, #7
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	b25b      	sxtb	r3, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	b25b      	sxtb	r3, r3
 8009ed8:	b2d9      	uxtb	r1, r3
 8009eda:	f107 021c 	add.w	r2, r7, #28
 8009ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee0:	4413      	add	r3, r2
 8009ee2:	460a      	mov	r2, r1
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee8:	3301      	adds	r3, #1
 8009eea:	643b      	str	r3, [r7, #64]	; 0x40
 8009eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eee:	2b0e      	cmp	r3, #14
 8009ef0:	dde0      	ble.n	8009eb4 <AES_CMAC_Final+0x98>
 8009ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ef6:	005b      	lsls	r3, r3, #1
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f04:	2b10      	cmp	r3, #16
 8009f06:	d11d      	bne.n	8009f44 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8009f08:	2300      	movs	r3, #0
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f0c:	e016      	b.n	8009f3c <AES_CMAC_Final+0x120>
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f12:	4413      	add	r3, r2
 8009f14:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	f107 011c 	add.w	r1, r7, #28
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f20:	440b      	add	r3, r1
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	4053      	eors	r3, r2
 8009f26:	b2d9      	uxtb	r1, r3
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f32:	460a      	mov	r2, r1
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f38:	3301      	adds	r3, #1
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f3e:	2b0f      	cmp	r3, #15
 8009f40:	dde5      	ble.n	8009f0e <AES_CMAC_Final+0xf2>
 8009f42:	e096      	b.n	800a072 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8009f44:	7f3b      	ldrb	r3, [r7, #28]
 8009f46:	b25b      	sxtb	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	da30      	bge.n	8009fae <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f50:	e01b      	b.n	8009f8a <AES_CMAC_Final+0x16e>
 8009f52:	f107 021c 	add.w	r2, r7, #28
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	4413      	add	r3, r2
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	b25a      	sxtb	r2, r3
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	3301      	adds	r3, #1
 8009f64:	3348      	adds	r3, #72	; 0x48
 8009f66:	443b      	add	r3, r7
 8009f68:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009f6c:	09db      	lsrs	r3, r3, #7
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b25b      	sxtb	r3, r3
 8009f76:	b2d9      	uxtb	r1, r3
 8009f78:	f107 021c 	add.w	r2, r7, #28
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	4413      	add	r3, r2
 8009f80:	460a      	mov	r2, r1
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	3301      	adds	r3, #1
 8009f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	2b0e      	cmp	r3, #14
 8009f8e:	dde0      	ble.n	8009f52 <AES_CMAC_Final+0x136>
 8009f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8009f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fa0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fac:	e027      	b.n	8009ffe <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 8009fae:	2300      	movs	r3, #0
 8009fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb2:	e01b      	b.n	8009fec <AES_CMAC_Final+0x1d0>
 8009fb4:	f107 021c 	add.w	r2, r7, #28
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fba:	4413      	add	r3, r2
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	b25a      	sxtb	r2, r3
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	3348      	adds	r3, #72	; 0x48
 8009fc8:	443b      	add	r3, r7
 8009fca:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009fce:	09db      	lsrs	r3, r3, #7
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	b25b      	sxtb	r3, r3
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	b25b      	sxtb	r3, r3
 8009fd8:	b2d9      	uxtb	r1, r3
 8009fda:	f107 021c 	add.w	r2, r7, #28
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	4413      	add	r3, r2
 8009fe2:	460a      	mov	r2, r1
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe8:	3301      	adds	r3, #1
 8009fea:	637b      	str	r3, [r7, #52]	; 0x34
 8009fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fee:	2b0e      	cmp	r3, #14
 8009ff0:	dde0      	ble.n	8009fb4 <AES_CMAC_Final+0x198>
 8009ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4413      	add	r3, r2
 800a008:	2280      	movs	r2, #128	; 0x80
 800a00a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800a00e:	e007      	b.n	800a020 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	4413      	add	r3, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a034:	2b0f      	cmp	r3, #15
 800a036:	d9eb      	bls.n	800a010 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800a038:	2300      	movs	r3, #0
 800a03a:	633b      	str	r3, [r7, #48]	; 0x30
 800a03c:	e016      	b.n	800a06c <AES_CMAC_Final+0x250>
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	4413      	add	r3, r2
 800a044:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a048:	781a      	ldrb	r2, [r3, #0]
 800a04a:	f107 011c 	add.w	r1, r7, #28
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	440b      	add	r3, r1
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	4053      	eors	r3, r2
 800a056:	b2d9      	uxtb	r1, r3
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	4413      	add	r3, r2
 800a05e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a062:	460a      	mov	r2, r1
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	3301      	adds	r3, #1
 800a06a:	633b      	str	r3, [r7, #48]	; 0x30
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2b0f      	cmp	r3, #15
 800a070:	dde5      	ble.n	800a03e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800a072:	2300      	movs	r3, #0
 800a074:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a076:	e015      	b.n	800a0a4 <AES_CMAC_Final+0x288>
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	4413      	add	r3, r2
 800a07e:	33f1      	adds	r3, #241	; 0xf1
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	440b      	add	r3, r1
 800a088:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	4053      	eors	r3, r2
 800a090:	b2d9      	uxtb	r1, r3
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	4413      	add	r3, r2
 800a098:	33f1      	adds	r3, #241	; 0xf1
 800a09a:	460a      	mov	r2, r1
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	2b0f      	cmp	r3, #15
 800a0a8:	dde6      	ble.n	800a078 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a0b0:	f107 030c 	add.w	r3, r7, #12
 800a0b4:	2210      	movs	r2, #16
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f00b fcf9 	bl	8015aae <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	f107 030c 	add.w	r3, r7, #12
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fd1d 	bl	800ab04 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a0ca:	f107 031c 	add.w	r3, r7, #28
 800a0ce:	2210      	movs	r2, #16
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f00b fd26 	bl	8015b24 <memset1>
}
 800a0d8:	bf00      	nop
 800a0da:	3748      	adds	r7, #72	; 0x48
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	7852      	ldrb	r2, [r2, #1]
 800a0fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3302      	adds	r3, #2
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	7892      	ldrb	r2, [r2, #2]
 800a104:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3303      	adds	r3, #3
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	78d2      	ldrb	r2, [r2, #3]
 800a10e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	7912      	ldrb	r2, [r2, #4]
 800a118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3305      	adds	r3, #5
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	7952      	ldrb	r2, [r2, #5]
 800a122:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3306      	adds	r3, #6
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	7992      	ldrb	r2, [r2, #6]
 800a12c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3307      	adds	r3, #7
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	79d2      	ldrb	r2, [r2, #7]
 800a136:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3308      	adds	r3, #8
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	7a12      	ldrb	r2, [r2, #8]
 800a140:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3309      	adds	r3, #9
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	7a52      	ldrb	r2, [r2, #9]
 800a14a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	330a      	adds	r3, #10
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	7a92      	ldrb	r2, [r2, #10]
 800a154:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	330b      	adds	r3, #11
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	7ad2      	ldrb	r2, [r2, #11]
 800a15e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	330c      	adds	r3, #12
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	7b12      	ldrb	r2, [r2, #12]
 800a168:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	330d      	adds	r3, #13
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	7b52      	ldrb	r2, [r2, #13]
 800a172:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	330e      	adds	r3, #14
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	7b92      	ldrb	r2, [r2, #14]
 800a17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	330f      	adds	r3, #15
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	7bd2      	ldrb	r2, [r2, #15]
 800a186:	701a      	strb	r2, [r3, #0]
#endif
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a1a0:	e007      	b.n	800a1b2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	1c53      	adds	r3, r2, #1
 800a1a6:	60bb      	str	r3, [r7, #8]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	1c59      	adds	r1, r3, #1
 800a1ac:	60f9      	str	r1, [r7, #12]
 800a1ae:	7812      	ldrb	r2, [r2, #0]
 800a1b0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	71fa      	strb	r2, [r7, #7]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1f2      	bne.n	800a1a2 <copy_block_nn+0x10>
}
 800a1bc:	bf00      	nop
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bc80      	pop	{r7}
 800a1c6:	4770      	bx	lr

0800a1c8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	4053      	eors	r3, r2
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	7819      	ldrb	r1, [r3, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	781a      	ldrb	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	404a      	eors	r2, r1
 800a1f4:	b2d2      	uxtb	r2, r2
 800a1f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3302      	adds	r3, #2
 800a1fc:	7819      	ldrb	r1, [r3, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	3302      	adds	r3, #2
 800a202:	781a      	ldrb	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3302      	adds	r3, #2
 800a208:	404a      	eors	r2, r1
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3303      	adds	r3, #3
 800a212:	7819      	ldrb	r1, [r3, #0]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3303      	adds	r3, #3
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3303      	adds	r3, #3
 800a21e:	404a      	eors	r2, r1
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	7819      	ldrb	r1, [r3, #0]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	3304      	adds	r3, #4
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3304      	adds	r3, #4
 800a234:	404a      	eors	r2, r1
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3305      	adds	r3, #5
 800a23e:	7819      	ldrb	r1, [r3, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	3305      	adds	r3, #5
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3305      	adds	r3, #5
 800a24a:	404a      	eors	r2, r1
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3306      	adds	r3, #6
 800a254:	7819      	ldrb	r1, [r3, #0]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	3306      	adds	r3, #6
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3306      	adds	r3, #6
 800a260:	404a      	eors	r2, r1
 800a262:	b2d2      	uxtb	r2, r2
 800a264:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3307      	adds	r3, #7
 800a26a:	7819      	ldrb	r1, [r3, #0]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	3307      	adds	r3, #7
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3307      	adds	r3, #7
 800a276:	404a      	eors	r2, r1
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3308      	adds	r3, #8
 800a280:	7819      	ldrb	r1, [r3, #0]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	3308      	adds	r3, #8
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3308      	adds	r3, #8
 800a28c:	404a      	eors	r2, r1
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3309      	adds	r3, #9
 800a296:	7819      	ldrb	r1, [r3, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	3309      	adds	r3, #9
 800a29c:	781a      	ldrb	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3309      	adds	r3, #9
 800a2a2:	404a      	eors	r2, r1
 800a2a4:	b2d2      	uxtb	r2, r2
 800a2a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	330a      	adds	r3, #10
 800a2ac:	7819      	ldrb	r1, [r3, #0]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	330a      	adds	r3, #10
 800a2b2:	781a      	ldrb	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	330a      	adds	r3, #10
 800a2b8:	404a      	eors	r2, r1
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	330b      	adds	r3, #11
 800a2c2:	7819      	ldrb	r1, [r3, #0]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	330b      	adds	r3, #11
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	330b      	adds	r3, #11
 800a2ce:	404a      	eors	r2, r1
 800a2d0:	b2d2      	uxtb	r2, r2
 800a2d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	781a      	ldrb	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	330c      	adds	r3, #12
 800a2e4:	404a      	eors	r2, r1
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	330d      	adds	r3, #13
 800a2ee:	7819      	ldrb	r1, [r3, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	330d      	adds	r3, #13
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	330d      	adds	r3, #13
 800a2fa:	404a      	eors	r2, r1
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	330e      	adds	r3, #14
 800a304:	7819      	ldrb	r1, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	330e      	adds	r3, #14
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	330e      	adds	r3, #14
 800a310:	404a      	eors	r2, r1
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	330f      	adds	r3, #15
 800a31a:	7819      	ldrb	r1, [r3, #0]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	330f      	adds	r3, #15
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	330f      	adds	r3, #15
 800a326:	404a      	eors	r2, r1
 800a328:	b2d2      	uxtb	r2, r2
 800a32a:	701a      	strb	r2, [r3, #0]
#endif
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	bc80      	pop	{r7}
 800a334:	4770      	bx	lr

0800a336 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a336:	b480      	push	{r7}
 800a338:	b085      	sub	sp, #20
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	781a      	ldrb	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	4053      	eors	r3, r2
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	3301      	adds	r3, #1
 800a356:	7819      	ldrb	r1, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3301      	adds	r3, #1
 800a35c:	781a      	ldrb	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3301      	adds	r3, #1
 800a362:	404a      	eors	r2, r1
 800a364:	b2d2      	uxtb	r2, r2
 800a366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	3302      	adds	r3, #2
 800a36c:	7819      	ldrb	r1, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3302      	adds	r3, #2
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3302      	adds	r3, #2
 800a378:	404a      	eors	r2, r1
 800a37a:	b2d2      	uxtb	r2, r2
 800a37c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3303      	adds	r3, #3
 800a382:	7819      	ldrb	r1, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3303      	adds	r3, #3
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3303      	adds	r3, #3
 800a38e:	404a      	eors	r2, r1
 800a390:	b2d2      	uxtb	r2, r2
 800a392:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	3304      	adds	r3, #4
 800a398:	7819      	ldrb	r1, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3304      	adds	r3, #4
 800a39e:	781a      	ldrb	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	404a      	eors	r2, r1
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	3305      	adds	r3, #5
 800a3ae:	7819      	ldrb	r1, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3305      	adds	r3, #5
 800a3b4:	781a      	ldrb	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3305      	adds	r3, #5
 800a3ba:	404a      	eors	r2, r1
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	3306      	adds	r3, #6
 800a3c4:	7819      	ldrb	r1, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3306      	adds	r3, #6
 800a3ca:	781a      	ldrb	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3306      	adds	r3, #6
 800a3d0:	404a      	eors	r2, r1
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	3307      	adds	r3, #7
 800a3da:	7819      	ldrb	r1, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3307      	adds	r3, #7
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3307      	adds	r3, #7
 800a3e6:	404a      	eors	r2, r1
 800a3e8:	b2d2      	uxtb	r2, r2
 800a3ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	7819      	ldrb	r1, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	404a      	eors	r2, r1
 800a3fe:	b2d2      	uxtb	r2, r2
 800a400:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	3309      	adds	r3, #9
 800a406:	7819      	ldrb	r1, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3309      	adds	r3, #9
 800a40c:	781a      	ldrb	r2, [r3, #0]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3309      	adds	r3, #9
 800a412:	404a      	eors	r2, r1
 800a414:	b2d2      	uxtb	r2, r2
 800a416:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	330a      	adds	r3, #10
 800a41c:	7819      	ldrb	r1, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	330a      	adds	r3, #10
 800a422:	781a      	ldrb	r2, [r3, #0]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	330a      	adds	r3, #10
 800a428:	404a      	eors	r2, r1
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	330b      	adds	r3, #11
 800a432:	7819      	ldrb	r1, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	330b      	adds	r3, #11
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	330b      	adds	r3, #11
 800a43e:	404a      	eors	r2, r1
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	330c      	adds	r3, #12
 800a448:	7819      	ldrb	r1, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	330c      	adds	r3, #12
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	330c      	adds	r3, #12
 800a454:	404a      	eors	r2, r1
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	330d      	adds	r3, #13
 800a45e:	7819      	ldrb	r1, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	330d      	adds	r3, #13
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	330d      	adds	r3, #13
 800a46a:	404a      	eors	r2, r1
 800a46c:	b2d2      	uxtb	r2, r2
 800a46e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	330e      	adds	r3, #14
 800a474:	7819      	ldrb	r1, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	330e      	adds	r3, #14
 800a47a:	781a      	ldrb	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	330e      	adds	r3, #14
 800a480:	404a      	eors	r2, r1
 800a482:	b2d2      	uxtb	r2, r2
 800a484:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	330f      	adds	r3, #15
 800a48a:	7819      	ldrb	r1, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	330f      	adds	r3, #15
 800a490:	781a      	ldrb	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	330f      	adds	r3, #15
 800a496:	404a      	eors	r2, r1
 800a498:	b2d2      	uxtb	r2, r2
 800a49a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a49c:	bf00      	nop
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr

0800a4a6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fe88 	bl	800a1c8 <xor_block>
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	4b48      	ldr	r3, [pc, #288]	; (800a5f0 <shift_sub_rows+0x130>)
 800a4d0:	5c9a      	ldrb	r2, [r3, r2]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	701a      	strb	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4a43      	ldr	r2, [pc, #268]	; (800a5f0 <shift_sub_rows+0x130>)
 800a4e4:	5c52      	ldrb	r2, [r2, r1]
 800a4e6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	4a3e      	ldr	r2, [pc, #248]	; (800a5f0 <shift_sub_rows+0x130>)
 800a4f6:	5c52      	ldrb	r2, [r2, r1]
 800a4f8:	701a      	strb	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	4619      	mov	r1, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	330c      	adds	r3, #12
 800a506:	4a3a      	ldr	r2, [pc, #232]	; (800a5f0 <shift_sub_rows+0x130>)
 800a508:	5c52      	ldrb	r2, [r2, r1]
 800a50a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	785b      	ldrb	r3, [r3, #1]
 800a510:	73fb      	strb	r3, [r7, #15]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3305      	adds	r3, #5
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	4619      	mov	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3301      	adds	r3, #1
 800a51e:	4a34      	ldr	r2, [pc, #208]	; (800a5f0 <shift_sub_rows+0x130>)
 800a520:	5c52      	ldrb	r2, [r2, r1]
 800a522:	701a      	strb	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3309      	adds	r3, #9
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	4619      	mov	r1, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3305      	adds	r3, #5
 800a530:	4a2f      	ldr	r2, [pc, #188]	; (800a5f0 <shift_sub_rows+0x130>)
 800a532:	5c52      	ldrb	r2, [r2, r1]
 800a534:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	330d      	adds	r3, #13
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	4619      	mov	r1, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3309      	adds	r3, #9
 800a542:	4a2b      	ldr	r2, [pc, #172]	; (800a5f0 <shift_sub_rows+0x130>)
 800a544:	5c52      	ldrb	r2, [r2, r1]
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	7bfa      	ldrb	r2, [r7, #15]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	330d      	adds	r3, #13
 800a54e:	4928      	ldr	r1, [pc, #160]	; (800a5f0 <shift_sub_rows+0x130>)
 800a550:	5c8a      	ldrb	r2, [r1, r2]
 800a552:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	789b      	ldrb	r3, [r3, #2]
 800a558:	73fb      	strb	r3, [r7, #15]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	330a      	adds	r3, #10
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3302      	adds	r3, #2
 800a566:	4a22      	ldr	r2, [pc, #136]	; (800a5f0 <shift_sub_rows+0x130>)
 800a568:	5c52      	ldrb	r2, [r2, r1]
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	7bfa      	ldrb	r2, [r7, #15]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	330a      	adds	r3, #10
 800a572:	491f      	ldr	r1, [pc, #124]	; (800a5f0 <shift_sub_rows+0x130>)
 800a574:	5c8a      	ldrb	r2, [r1, r2]
 800a576:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	799b      	ldrb	r3, [r3, #6]
 800a57c:	73fb      	strb	r3, [r7, #15]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	330e      	adds	r3, #14
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	4619      	mov	r1, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3306      	adds	r3, #6
 800a58a:	4a19      	ldr	r2, [pc, #100]	; (800a5f0 <shift_sub_rows+0x130>)
 800a58c:	5c52      	ldrb	r2, [r2, r1]
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	7bfa      	ldrb	r2, [r7, #15]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	330e      	adds	r3, #14
 800a596:	4916      	ldr	r1, [pc, #88]	; (800a5f0 <shift_sub_rows+0x130>)
 800a598:	5c8a      	ldrb	r2, [r1, r2]
 800a59a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7bdb      	ldrb	r3, [r3, #15]
 800a5a0:	73fb      	strb	r3, [r7, #15]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	330b      	adds	r3, #11
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	330f      	adds	r3, #15
 800a5ae:	4a10      	ldr	r2, [pc, #64]	; (800a5f0 <shift_sub_rows+0x130>)
 800a5b0:	5c52      	ldrb	r2, [r2, r1]
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3307      	adds	r3, #7
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	330b      	adds	r3, #11
 800a5c0:	4a0b      	ldr	r2, [pc, #44]	; (800a5f0 <shift_sub_rows+0x130>)
 800a5c2:	5c52      	ldrb	r2, [r2, r1]
 800a5c4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3307      	adds	r3, #7
 800a5d2:	4a07      	ldr	r2, [pc, #28]	; (800a5f0 <shift_sub_rows+0x130>)
 800a5d4:	5c52      	ldrb	r2, [r2, r1]
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	7bfa      	ldrb	r2, [r7, #15]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3303      	adds	r3, #3
 800a5de:	4904      	ldr	r1, [pc, #16]	; (800a5f0 <shift_sub_rows+0x130>)
 800a5e0:	5c8a      	ldrb	r2, [r1, r2]
 800a5e2:	701a      	strb	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	0801b6d0 	.word	0x0801b6d0

0800a5f4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	f7ff fd6c 	bl	800a0e0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a608:	7a3b      	ldrb	r3, [r7, #8]
 800a60a:	461a      	mov	r2, r3
 800a60c:	4b9a      	ldr	r3, [pc, #616]	; (800a878 <mix_sub_columns+0x284>)
 800a60e:	5c9a      	ldrb	r2, [r3, r2]
 800a610:	7b7b      	ldrb	r3, [r7, #13]
 800a612:	4619      	mov	r1, r3
 800a614:	4b99      	ldr	r3, [pc, #612]	; (800a87c <mix_sub_columns+0x288>)
 800a616:	5c5b      	ldrb	r3, [r3, r1]
 800a618:	4053      	eors	r3, r2
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	7cbb      	ldrb	r3, [r7, #18]
 800a61e:	4619      	mov	r1, r3
 800a620:	4b97      	ldr	r3, [pc, #604]	; (800a880 <mix_sub_columns+0x28c>)
 800a622:	5c5b      	ldrb	r3, [r3, r1]
 800a624:	4053      	eors	r3, r2
 800a626:	b2da      	uxtb	r2, r3
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	4619      	mov	r1, r3
 800a62c:	4b94      	ldr	r3, [pc, #592]	; (800a880 <mix_sub_columns+0x28c>)
 800a62e:	5c5b      	ldrb	r3, [r3, r1]
 800a630:	4053      	eors	r3, r2
 800a632:	b2da      	uxtb	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a638:	7a3b      	ldrb	r3, [r7, #8]
 800a63a:	461a      	mov	r2, r3
 800a63c:	4b90      	ldr	r3, [pc, #576]	; (800a880 <mix_sub_columns+0x28c>)
 800a63e:	5c9a      	ldrb	r2, [r3, r2]
 800a640:	7b7b      	ldrb	r3, [r7, #13]
 800a642:	4619      	mov	r1, r3
 800a644:	4b8c      	ldr	r3, [pc, #560]	; (800a878 <mix_sub_columns+0x284>)
 800a646:	5c5b      	ldrb	r3, [r3, r1]
 800a648:	4053      	eors	r3, r2
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	7cbb      	ldrb	r3, [r7, #18]
 800a64e:	4619      	mov	r1, r3
 800a650:	4b8a      	ldr	r3, [pc, #552]	; (800a87c <mix_sub_columns+0x288>)
 800a652:	5c5b      	ldrb	r3, [r3, r1]
 800a654:	4053      	eors	r3, r2
 800a656:	b2d9      	uxtb	r1, r3
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	461a      	mov	r2, r3
 800a65c:	4b88      	ldr	r3, [pc, #544]	; (800a880 <mix_sub_columns+0x28c>)
 800a65e:	5c9a      	ldrb	r2, [r3, r2]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	3301      	adds	r3, #1
 800a664:	404a      	eors	r2, r1
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a66a:	7a3b      	ldrb	r3, [r7, #8]
 800a66c:	461a      	mov	r2, r3
 800a66e:	4b84      	ldr	r3, [pc, #528]	; (800a880 <mix_sub_columns+0x28c>)
 800a670:	5c9a      	ldrb	r2, [r3, r2]
 800a672:	7b7b      	ldrb	r3, [r7, #13]
 800a674:	4619      	mov	r1, r3
 800a676:	4b82      	ldr	r3, [pc, #520]	; (800a880 <mix_sub_columns+0x28c>)
 800a678:	5c5b      	ldrb	r3, [r3, r1]
 800a67a:	4053      	eors	r3, r2
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	7cbb      	ldrb	r3, [r7, #18]
 800a680:	4619      	mov	r1, r3
 800a682:	4b7d      	ldr	r3, [pc, #500]	; (800a878 <mix_sub_columns+0x284>)
 800a684:	5c5b      	ldrb	r3, [r3, r1]
 800a686:	4053      	eors	r3, r2
 800a688:	b2d9      	uxtb	r1, r3
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	461a      	mov	r2, r3
 800a68e:	4b7b      	ldr	r3, [pc, #492]	; (800a87c <mix_sub_columns+0x288>)
 800a690:	5c9a      	ldrb	r2, [r3, r2]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3302      	adds	r3, #2
 800a696:	404a      	eors	r2, r1
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a69c:	7a3b      	ldrb	r3, [r7, #8]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	4b76      	ldr	r3, [pc, #472]	; (800a87c <mix_sub_columns+0x288>)
 800a6a2:	5c9a      	ldrb	r2, [r3, r2]
 800a6a4:	7b7b      	ldrb	r3, [r7, #13]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4b75      	ldr	r3, [pc, #468]	; (800a880 <mix_sub_columns+0x28c>)
 800a6aa:	5c5b      	ldrb	r3, [r3, r1]
 800a6ac:	4053      	eors	r3, r2
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	7cbb      	ldrb	r3, [r7, #18]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4b72      	ldr	r3, [pc, #456]	; (800a880 <mix_sub_columns+0x28c>)
 800a6b6:	5c5b      	ldrb	r3, [r3, r1]
 800a6b8:	4053      	eors	r3, r2
 800a6ba:	b2d9      	uxtb	r1, r3
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	4b6d      	ldr	r3, [pc, #436]	; (800a878 <mix_sub_columns+0x284>)
 800a6c2:	5c9a      	ldrb	r2, [r3, r2]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3303      	adds	r3, #3
 800a6c8:	404a      	eors	r2, r1
 800a6ca:	b2d2      	uxtb	r2, r2
 800a6cc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a6ce:	7b3b      	ldrb	r3, [r7, #12]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b69      	ldr	r3, [pc, #420]	; (800a878 <mix_sub_columns+0x284>)
 800a6d4:	5c9a      	ldrb	r2, [r3, r2]
 800a6d6:	7c7b      	ldrb	r3, [r7, #17]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4b68      	ldr	r3, [pc, #416]	; (800a87c <mix_sub_columns+0x288>)
 800a6dc:	5c5b      	ldrb	r3, [r3, r1]
 800a6de:	4053      	eors	r3, r2
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	7dbb      	ldrb	r3, [r7, #22]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4b66      	ldr	r3, [pc, #408]	; (800a880 <mix_sub_columns+0x28c>)
 800a6e8:	5c5b      	ldrb	r3, [r3, r1]
 800a6ea:	4053      	eors	r3, r2
 800a6ec:	b2d9      	uxtb	r1, r3
 800a6ee:	7afb      	ldrb	r3, [r7, #11]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4b63      	ldr	r3, [pc, #396]	; (800a880 <mix_sub_columns+0x28c>)
 800a6f4:	5c9a      	ldrb	r2, [r3, r2]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	404a      	eors	r2, r1
 800a6fc:	b2d2      	uxtb	r2, r2
 800a6fe:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a700:	7b3b      	ldrb	r3, [r7, #12]
 800a702:	461a      	mov	r2, r3
 800a704:	4b5e      	ldr	r3, [pc, #376]	; (800a880 <mix_sub_columns+0x28c>)
 800a706:	5c9a      	ldrb	r2, [r3, r2]
 800a708:	7c7b      	ldrb	r3, [r7, #17]
 800a70a:	4619      	mov	r1, r3
 800a70c:	4b5a      	ldr	r3, [pc, #360]	; (800a878 <mix_sub_columns+0x284>)
 800a70e:	5c5b      	ldrb	r3, [r3, r1]
 800a710:	4053      	eors	r3, r2
 800a712:	b2da      	uxtb	r2, r3
 800a714:	7dbb      	ldrb	r3, [r7, #22]
 800a716:	4619      	mov	r1, r3
 800a718:	4b58      	ldr	r3, [pc, #352]	; (800a87c <mix_sub_columns+0x288>)
 800a71a:	5c5b      	ldrb	r3, [r3, r1]
 800a71c:	4053      	eors	r3, r2
 800a71e:	b2d9      	uxtb	r1, r3
 800a720:	7afb      	ldrb	r3, [r7, #11]
 800a722:	461a      	mov	r2, r3
 800a724:	4b56      	ldr	r3, [pc, #344]	; (800a880 <mix_sub_columns+0x28c>)
 800a726:	5c9a      	ldrb	r2, [r3, r2]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3305      	adds	r3, #5
 800a72c:	404a      	eors	r2, r1
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800a732:	7b3b      	ldrb	r3, [r7, #12]
 800a734:	461a      	mov	r2, r3
 800a736:	4b52      	ldr	r3, [pc, #328]	; (800a880 <mix_sub_columns+0x28c>)
 800a738:	5c9a      	ldrb	r2, [r3, r2]
 800a73a:	7c7b      	ldrb	r3, [r7, #17]
 800a73c:	4619      	mov	r1, r3
 800a73e:	4b50      	ldr	r3, [pc, #320]	; (800a880 <mix_sub_columns+0x28c>)
 800a740:	5c5b      	ldrb	r3, [r3, r1]
 800a742:	4053      	eors	r3, r2
 800a744:	b2da      	uxtb	r2, r3
 800a746:	7dbb      	ldrb	r3, [r7, #22]
 800a748:	4619      	mov	r1, r3
 800a74a:	4b4b      	ldr	r3, [pc, #300]	; (800a878 <mix_sub_columns+0x284>)
 800a74c:	5c5b      	ldrb	r3, [r3, r1]
 800a74e:	4053      	eors	r3, r2
 800a750:	b2d9      	uxtb	r1, r3
 800a752:	7afb      	ldrb	r3, [r7, #11]
 800a754:	461a      	mov	r2, r3
 800a756:	4b49      	ldr	r3, [pc, #292]	; (800a87c <mix_sub_columns+0x288>)
 800a758:	5c9a      	ldrb	r2, [r3, r2]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3306      	adds	r3, #6
 800a75e:	404a      	eors	r2, r1
 800a760:	b2d2      	uxtb	r2, r2
 800a762:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800a764:	7b3b      	ldrb	r3, [r7, #12]
 800a766:	461a      	mov	r2, r3
 800a768:	4b44      	ldr	r3, [pc, #272]	; (800a87c <mix_sub_columns+0x288>)
 800a76a:	5c9a      	ldrb	r2, [r3, r2]
 800a76c:	7c7b      	ldrb	r3, [r7, #17]
 800a76e:	4619      	mov	r1, r3
 800a770:	4b43      	ldr	r3, [pc, #268]	; (800a880 <mix_sub_columns+0x28c>)
 800a772:	5c5b      	ldrb	r3, [r3, r1]
 800a774:	4053      	eors	r3, r2
 800a776:	b2da      	uxtb	r2, r3
 800a778:	7dbb      	ldrb	r3, [r7, #22]
 800a77a:	4619      	mov	r1, r3
 800a77c:	4b40      	ldr	r3, [pc, #256]	; (800a880 <mix_sub_columns+0x28c>)
 800a77e:	5c5b      	ldrb	r3, [r3, r1]
 800a780:	4053      	eors	r3, r2
 800a782:	b2d9      	uxtb	r1, r3
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	461a      	mov	r2, r3
 800a788:	4b3b      	ldr	r3, [pc, #236]	; (800a878 <mix_sub_columns+0x284>)
 800a78a:	5c9a      	ldrb	r2, [r3, r2]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3307      	adds	r3, #7
 800a790:	404a      	eors	r2, r1
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800a796:	7c3b      	ldrb	r3, [r7, #16]
 800a798:	461a      	mov	r2, r3
 800a79a:	4b37      	ldr	r3, [pc, #220]	; (800a878 <mix_sub_columns+0x284>)
 800a79c:	5c9a      	ldrb	r2, [r3, r2]
 800a79e:	7d7b      	ldrb	r3, [r7, #21]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4b36      	ldr	r3, [pc, #216]	; (800a87c <mix_sub_columns+0x288>)
 800a7a4:	5c5b      	ldrb	r3, [r3, r1]
 800a7a6:	4053      	eors	r3, r2
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	7abb      	ldrb	r3, [r7, #10]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4b34      	ldr	r3, [pc, #208]	; (800a880 <mix_sub_columns+0x28c>)
 800a7b0:	5c5b      	ldrb	r3, [r3, r1]
 800a7b2:	4053      	eors	r3, r2
 800a7b4:	b2d9      	uxtb	r1, r3
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4b31      	ldr	r3, [pc, #196]	; (800a880 <mix_sub_columns+0x28c>)
 800a7bc:	5c9a      	ldrb	r2, [r3, r2]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3308      	adds	r3, #8
 800a7c2:	404a      	eors	r2, r1
 800a7c4:	b2d2      	uxtb	r2, r2
 800a7c6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800a7c8:	7c3b      	ldrb	r3, [r7, #16]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4b2c      	ldr	r3, [pc, #176]	; (800a880 <mix_sub_columns+0x28c>)
 800a7ce:	5c9a      	ldrb	r2, [r3, r2]
 800a7d0:	7d7b      	ldrb	r3, [r7, #21]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4b28      	ldr	r3, [pc, #160]	; (800a878 <mix_sub_columns+0x284>)
 800a7d6:	5c5b      	ldrb	r3, [r3, r1]
 800a7d8:	4053      	eors	r3, r2
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	7abb      	ldrb	r3, [r7, #10]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4b26      	ldr	r3, [pc, #152]	; (800a87c <mix_sub_columns+0x288>)
 800a7e2:	5c5b      	ldrb	r3, [r3, r1]
 800a7e4:	4053      	eors	r3, r2
 800a7e6:	b2d9      	uxtb	r1, r3
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4b24      	ldr	r3, [pc, #144]	; (800a880 <mix_sub_columns+0x28c>)
 800a7ee:	5c9a      	ldrb	r2, [r3, r2]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3309      	adds	r3, #9
 800a7f4:	404a      	eors	r2, r1
 800a7f6:	b2d2      	uxtb	r2, r2
 800a7f8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800a7fa:	7c3b      	ldrb	r3, [r7, #16]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4b20      	ldr	r3, [pc, #128]	; (800a880 <mix_sub_columns+0x28c>)
 800a800:	5c9a      	ldrb	r2, [r3, r2]
 800a802:	7d7b      	ldrb	r3, [r7, #21]
 800a804:	4619      	mov	r1, r3
 800a806:	4b1e      	ldr	r3, [pc, #120]	; (800a880 <mix_sub_columns+0x28c>)
 800a808:	5c5b      	ldrb	r3, [r3, r1]
 800a80a:	4053      	eors	r3, r2
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	7abb      	ldrb	r3, [r7, #10]
 800a810:	4619      	mov	r1, r3
 800a812:	4b19      	ldr	r3, [pc, #100]	; (800a878 <mix_sub_columns+0x284>)
 800a814:	5c5b      	ldrb	r3, [r3, r1]
 800a816:	4053      	eors	r3, r2
 800a818:	b2d9      	uxtb	r1, r3
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	461a      	mov	r2, r3
 800a81e:	4b17      	ldr	r3, [pc, #92]	; (800a87c <mix_sub_columns+0x288>)
 800a820:	5c9a      	ldrb	r2, [r3, r2]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	330a      	adds	r3, #10
 800a826:	404a      	eors	r2, r1
 800a828:	b2d2      	uxtb	r2, r2
 800a82a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800a82c:	7c3b      	ldrb	r3, [r7, #16]
 800a82e:	461a      	mov	r2, r3
 800a830:	4b12      	ldr	r3, [pc, #72]	; (800a87c <mix_sub_columns+0x288>)
 800a832:	5c9a      	ldrb	r2, [r3, r2]
 800a834:	7d7b      	ldrb	r3, [r7, #21]
 800a836:	4619      	mov	r1, r3
 800a838:	4b11      	ldr	r3, [pc, #68]	; (800a880 <mix_sub_columns+0x28c>)
 800a83a:	5c5b      	ldrb	r3, [r3, r1]
 800a83c:	4053      	eors	r3, r2
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	7abb      	ldrb	r3, [r7, #10]
 800a842:	4619      	mov	r1, r3
 800a844:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <mix_sub_columns+0x28c>)
 800a846:	5c5b      	ldrb	r3, [r3, r1]
 800a848:	4053      	eors	r3, r2
 800a84a:	b2d9      	uxtb	r1, r3
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	461a      	mov	r2, r3
 800a850:	4b09      	ldr	r3, [pc, #36]	; (800a878 <mix_sub_columns+0x284>)
 800a852:	5c9a      	ldrb	r2, [r3, r2]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	330b      	adds	r3, #11
 800a858:	404a      	eors	r2, r1
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800a85e:	7d3b      	ldrb	r3, [r7, #20]
 800a860:	461a      	mov	r2, r3
 800a862:	4b05      	ldr	r3, [pc, #20]	; (800a878 <mix_sub_columns+0x284>)
 800a864:	5c9a      	ldrb	r2, [r3, r2]
 800a866:	7a7b      	ldrb	r3, [r7, #9]
 800a868:	4619      	mov	r1, r3
 800a86a:	4b04      	ldr	r3, [pc, #16]	; (800a87c <mix_sub_columns+0x288>)
 800a86c:	5c5b      	ldrb	r3, [r3, r1]
 800a86e:	4053      	eors	r3, r2
 800a870:	b2da      	uxtb	r2, r3
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	4619      	mov	r1, r3
 800a876:	e005      	b.n	800a884 <mix_sub_columns+0x290>
 800a878:	0801b7d0 	.word	0x0801b7d0
 800a87c:	0801b8d0 	.word	0x0801b8d0
 800a880:	0801b6d0 	.word	0x0801b6d0
 800a884:	4b2d      	ldr	r3, [pc, #180]	; (800a93c <mix_sub_columns+0x348>)
 800a886:	5c5b      	ldrb	r3, [r3, r1]
 800a888:	4053      	eors	r3, r2
 800a88a:	b2d9      	uxtb	r1, r3
 800a88c:	7cfb      	ldrb	r3, [r7, #19]
 800a88e:	461a      	mov	r2, r3
 800a890:	4b2a      	ldr	r3, [pc, #168]	; (800a93c <mix_sub_columns+0x348>)
 800a892:	5c9a      	ldrb	r2, [r3, r2]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	330c      	adds	r3, #12
 800a898:	404a      	eors	r2, r1
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800a89e:	7d3b      	ldrb	r3, [r7, #20]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4b26      	ldr	r3, [pc, #152]	; (800a93c <mix_sub_columns+0x348>)
 800a8a4:	5c9a      	ldrb	r2, [r3, r2]
 800a8a6:	7a7b      	ldrb	r3, [r7, #9]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4b25      	ldr	r3, [pc, #148]	; (800a940 <mix_sub_columns+0x34c>)
 800a8ac:	5c5b      	ldrb	r3, [r3, r1]
 800a8ae:	4053      	eors	r3, r2
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4b23      	ldr	r3, [pc, #140]	; (800a944 <mix_sub_columns+0x350>)
 800a8b8:	5c5b      	ldrb	r3, [r3, r1]
 800a8ba:	4053      	eors	r3, r2
 800a8bc:	b2d9      	uxtb	r1, r3
 800a8be:	7cfb      	ldrb	r3, [r7, #19]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4b1e      	ldr	r3, [pc, #120]	; (800a93c <mix_sub_columns+0x348>)
 800a8c4:	5c9a      	ldrb	r2, [r3, r2]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	330d      	adds	r3, #13
 800a8ca:	404a      	eors	r2, r1
 800a8cc:	b2d2      	uxtb	r2, r2
 800a8ce:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800a8d0:	7d3b      	ldrb	r3, [r7, #20]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	4b19      	ldr	r3, [pc, #100]	; (800a93c <mix_sub_columns+0x348>)
 800a8d6:	5c9a      	ldrb	r2, [r3, r2]
 800a8d8:	7a7b      	ldrb	r3, [r7, #9]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4b17      	ldr	r3, [pc, #92]	; (800a93c <mix_sub_columns+0x348>)
 800a8de:	5c5b      	ldrb	r3, [r3, r1]
 800a8e0:	4053      	eors	r3, r2
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4b15      	ldr	r3, [pc, #84]	; (800a940 <mix_sub_columns+0x34c>)
 800a8ea:	5c5b      	ldrb	r3, [r3, r1]
 800a8ec:	4053      	eors	r3, r2
 800a8ee:	b2d9      	uxtb	r1, r3
 800a8f0:	7cfb      	ldrb	r3, [r7, #19]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4b13      	ldr	r3, [pc, #76]	; (800a944 <mix_sub_columns+0x350>)
 800a8f6:	5c9a      	ldrb	r2, [r3, r2]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	330e      	adds	r3, #14
 800a8fc:	404a      	eors	r2, r1
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800a902:	7d3b      	ldrb	r3, [r7, #20]
 800a904:	461a      	mov	r2, r3
 800a906:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <mix_sub_columns+0x350>)
 800a908:	5c9a      	ldrb	r2, [r3, r2]
 800a90a:	7a7b      	ldrb	r3, [r7, #9]
 800a90c:	4619      	mov	r1, r3
 800a90e:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <mix_sub_columns+0x348>)
 800a910:	5c5b      	ldrb	r3, [r3, r1]
 800a912:	4053      	eors	r3, r2
 800a914:	b2da      	uxtb	r2, r3
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	4619      	mov	r1, r3
 800a91a:	4b08      	ldr	r3, [pc, #32]	; (800a93c <mix_sub_columns+0x348>)
 800a91c:	5c5b      	ldrb	r3, [r3, r1]
 800a91e:	4053      	eors	r3, r2
 800a920:	b2d9      	uxtb	r1, r3
 800a922:	7cfb      	ldrb	r3, [r7, #19]
 800a924:	461a      	mov	r2, r3
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <mix_sub_columns+0x34c>)
 800a928:	5c9a      	ldrb	r2, [r3, r2]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	330f      	adds	r3, #15
 800a92e:	404a      	eors	r2, r1
 800a930:	b2d2      	uxtb	r2, r2
 800a932:	701a      	strb	r2, [r3, #0]
  }
 800a934:	bf00      	nop
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	0801b6d0 	.word	0x0801b6d0
 800a940:	0801b7d0 	.word	0x0801b7d0
 800a944:	0801b8d0 	.word	0x0801b8d0

0800a948 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	460b      	mov	r3, r1
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	3b10      	subs	r3, #16
 800a95a:	2b10      	cmp	r3, #16
 800a95c:	bf8c      	ite	hi
 800a95e:	2201      	movhi	r2, #1
 800a960:	2200      	movls	r2, #0
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	2a00      	cmp	r2, #0
 800a966:	d10d      	bne.n	800a984 <lorawan_aes_set_key+0x3c>
 800a968:	2201      	movs	r2, #1
 800a96a:	fa02 f303 	lsl.w	r3, r2, r3
 800a96e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a976:	2b00      	cmp	r3, #0
 800a978:	bf14      	ite	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	2300      	moveq	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d105      	bne.n	800a990 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800a98c:	23ff      	movs	r3, #255	; 0xff
 800a98e:	e0b2      	b.n	800aaf6 <lorawan_aes_set_key+0x1ae>
        break;
 800a990:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	7afa      	ldrb	r2, [r7, #11]
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fbfa 	bl	800a192 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	331c      	adds	r3, #28
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800a9a8:	7c7b      	ldrb	r3, [r7, #17]
 800a9aa:	091b      	lsrs	r3, r3, #4
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a9b8:	7afb      	ldrb	r3, [r7, #11]
 800a9ba:	75fb      	strb	r3, [r7, #23]
 800a9bc:	2301      	movs	r3, #1
 800a9be:	75bb      	strb	r3, [r7, #22]
 800a9c0:	e093      	b.n	800aaea <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
 800a9c4:	3b04      	subs	r3, #4
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ca:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	3b03      	subs	r3, #3
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	5cd3      	ldrb	r3, [r2, r3]
 800a9d4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	3b02      	subs	r3, #2
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	5cd3      	ldrb	r3, [r2, r3]
 800a9de:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	5cd3      	ldrb	r3, [r2, r3]
 800a9e8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	7afa      	ldrb	r2, [r7, #11]
 800a9ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9f2:	fb01 f202 	mul.w	r2, r1, r2
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d127      	bne.n	800aa4e <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800a9fe:	7d7b      	ldrb	r3, [r7, #21]
 800aa00:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800aa02:	7d3b      	ldrb	r3, [r7, #20]
 800aa04:	4a3e      	ldr	r2, [pc, #248]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa06:	5cd2      	ldrb	r2, [r2, r3]
 800aa08:	7dbb      	ldrb	r3, [r7, #22]
 800aa0a:	4053      	eors	r3, r2
 800aa0c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800aa0e:	7cfb      	ldrb	r3, [r7, #19]
 800aa10:	4a3b      	ldr	r2, [pc, #236]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa12:	5cd3      	ldrb	r3, [r2, r3]
 800aa14:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800aa16:	7cbb      	ldrb	r3, [r7, #18]
 800aa18:	4a39      	ldr	r2, [pc, #228]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa1a:	5cd3      	ldrb	r3, [r2, r3]
 800aa1c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800aa1e:	7c3b      	ldrb	r3, [r7, #16]
 800aa20:	4a37      	ldr	r2, [pc, #220]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa22:	5cd3      	ldrb	r3, [r2, r3]
 800aa24:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800aa26:	7dbb      	ldrb	r3, [r7, #22]
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	b25a      	sxtb	r2, r3
 800aa2c:	7dbb      	ldrb	r3, [r7, #22]
 800aa2e:	09db      	lsrs	r3, r3, #7
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	4619      	mov	r1, r3
 800aa34:	0049      	lsls	r1, r1, #1
 800aa36:	440b      	add	r3, r1
 800aa38:	4619      	mov	r1, r3
 800aa3a:	00c8      	lsls	r0, r1, #3
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	440b      	add	r3, r1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	4053      	eors	r3, r2
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	75bb      	strb	r3, [r7, #22]
 800aa4c:	e01c      	b.n	800aa88 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	2b18      	cmp	r3, #24
 800aa52:	d919      	bls.n	800aa88 <lorawan_aes_set_key+0x140>
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
 800aa56:	7afa      	ldrb	r2, [r7, #11]
 800aa58:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa5c:	fb01 f202 	mul.w	r2, r1, r2
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b10      	cmp	r3, #16
 800aa66:	d10f      	bne.n	800aa88 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800aa68:	7d7b      	ldrb	r3, [r7, #21]
 800aa6a:	4a25      	ldr	r2, [pc, #148]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa6c:	5cd3      	ldrb	r3, [r2, r3]
 800aa6e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800aa70:	7d3b      	ldrb	r3, [r7, #20]
 800aa72:	4a23      	ldr	r2, [pc, #140]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa74:	5cd3      	ldrb	r3, [r2, r3]
 800aa76:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800aa78:	7cfb      	ldrb	r3, [r7, #19]
 800aa7a:	4a21      	ldr	r2, [pc, #132]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa7c:	5cd3      	ldrb	r3, [r2, r3]
 800aa7e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800aa80:	7cbb      	ldrb	r3, [r7, #18]
 800aa82:	4a1f      	ldr	r2, [pc, #124]	; (800ab00 <lorawan_aes_set_key+0x1b8>)
 800aa84:	5cd3      	ldrb	r3, [r2, r3]
 800aa86:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800aa88:	7dfa      	ldrb	r2, [r7, #23]
 800aa8a:	7afb      	ldrb	r3, [r7, #11]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800aa90:	7c3b      	ldrb	r3, [r7, #16]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	5cd1      	ldrb	r1, [r2, r3]
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	7d7a      	ldrb	r2, [r7, #21]
 800aa9a:	404a      	eors	r2, r1
 800aa9c:	b2d1      	uxtb	r1, r2
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800aaa2:	7c3b      	ldrb	r3, [r7, #16]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	5cd1      	ldrb	r1, [r2, r3]
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	3301      	adds	r3, #1
 800aaae:	7d3a      	ldrb	r2, [r7, #20]
 800aab0:	404a      	eors	r2, r1
 800aab2:	b2d1      	uxtb	r1, r2
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800aab8:	7c3b      	ldrb	r3, [r7, #16]
 800aaba:	3302      	adds	r3, #2
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	5cd1      	ldrb	r1, [r2, r3]
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	3302      	adds	r3, #2
 800aac4:	7cfa      	ldrb	r2, [r7, #19]
 800aac6:	404a      	eors	r2, r1
 800aac8:	b2d1      	uxtb	r1, r2
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800aace:	7c3b      	ldrb	r3, [r7, #16]
 800aad0:	3303      	adds	r3, #3
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	5cd1      	ldrb	r1, [r2, r3]
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	3303      	adds	r3, #3
 800aada:	7cba      	ldrb	r2, [r7, #18]
 800aadc:	404a      	eors	r2, r1
 800aade:	b2d1      	uxtb	r1, r2
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	3304      	adds	r3, #4
 800aae8:	75fb      	strb	r3, [r7, #23]
 800aaea:	7dfa      	ldrb	r2, [r7, #23]
 800aaec:	7c7b      	ldrb	r3, [r7, #17]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	f4ff af67 	bcc.w	800a9c2 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	0801b6d0 	.word	0x0801b6d0

0800ab04 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	; 0x28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d038      	beq.n	800ab8c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	f107 0314 	add.w	r3, r7, #20
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fc07 	bl	800a336 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab2e:	e014      	b.n	800ab5a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ab30:	f107 0314 	add.w	r3, r7, #20
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fd5d 	bl	800a5f4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab40:	0112      	lsls	r2, r2, #4
 800ab42:	441a      	add	r2, r3
 800ab44:	f107 0314 	add.w	r3, r7, #20
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fcab 	bl	800a4a6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ab50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab54:	3301      	adds	r3, #1
 800ab56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ab60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d3e3      	bcc.n	800ab30 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ab68:	f107 0314 	add.w	r3, r7, #20
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff fca7 	bl	800a4c0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab78:	0112      	lsls	r2, r2, #4
 800ab7a:	441a      	add	r2, r3
 800ab7c:	f107 0314 	add.w	r3, r7, #20
 800ab80:	4619      	mov	r1, r3
 800ab82:	68b8      	ldr	r0, [r7, #8]
 800ab84:	f7ff fbd7 	bl	800a336 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e000      	b.n	800ab8e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ab8c:	23ff      	movs	r3, #255	; 0xff
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3728      	adds	r7, #40	; 0x28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9a:	b09d      	sub	sp, #116	; 0x74
 800ab9c:	af10      	add	r7, sp, #64	; 0x40
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800aba4:	2306      	movs	r3, #6
 800aba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800abaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800abae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abb2:	4611      	mov	r1, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f9a7 	bl	800af08 <SecureElementGetKeyByID>
 800abba:	4603      	mov	r3, r0
 800abbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800abc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 80b0 	bne.w	800ad2a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800abca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800abd2:	4b58      	ldr	r3, [pc, #352]	; (800ad34 <PrintKey+0x19c>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	2100      	movs	r1, #0
 800abd8:	2002      	movs	r0, #2
 800abda:	f00f fabd 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800abde:	e056      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800abe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d106      	bne.n	800abf6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800abe8:	4b53      	ldr	r3, [pc, #332]	; (800ad38 <PrintKey+0x1a0>)
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	2002      	movs	r0, #2
 800abf0:	f00f fab2 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800abf4:	e04b      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800abf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d106      	bne.n	800ac0c <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800abfe:	4b4f      	ldr	r3, [pc, #316]	; (800ad3c <PrintKey+0x1a4>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	2100      	movs	r1, #0
 800ac04:	2002      	movs	r0, #2
 800ac06:	f00f faa7 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800ac0a:	e040      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ac0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d106      	bne.n	800ac22 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ac14:	4b4a      	ldr	r3, [pc, #296]	; (800ad40 <PrintKey+0x1a8>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2002      	movs	r0, #2
 800ac1c:	f00f fa9c 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800ac20:	e035      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ac22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d106      	bne.n	800ac38 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ac2a:	4b46      	ldr	r3, [pc, #280]	; (800ad44 <PrintKey+0x1ac>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	2002      	movs	r0, #2
 800ac32:	f00f fa91 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800ac36:	e02a      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ac38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac3c:	2b7f      	cmp	r3, #127	; 0x7f
 800ac3e:	d106      	bne.n	800ac4e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ac40:	4b41      	ldr	r3, [pc, #260]	; (800ad48 <PrintKey+0x1b0>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	2100      	movs	r1, #0
 800ac46:	2002      	movs	r0, #2
 800ac48:	f00f fa86 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800ac4c:	e01f      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ac4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac52:	2b80      	cmp	r3, #128	; 0x80
 800ac54:	d106      	bne.n	800ac64 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ac56:	4b3d      	ldr	r3, [pc, #244]	; (800ad4c <PrintKey+0x1b4>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	2002      	movs	r0, #2
 800ac5e:	f00f fa7b 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800ac62:	e014      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ac64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac68:	2b81      	cmp	r3, #129	; 0x81
 800ac6a:	d106      	bne.n	800ac7a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ac6c:	4b38      	ldr	r3, [pc, #224]	; (800ad50 <PrintKey+0x1b8>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2100      	movs	r1, #0
 800ac72:	2002      	movs	r0, #2
 800ac74:	f00f fa70 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 800ac78:	e009      	b.n	800ac8e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ac7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac7e:	2b82      	cmp	r3, #130	; 0x82
 800ac80:	d105      	bne.n	800ac8e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ac82:	4b34      	ldr	r3, [pc, #208]	; (800ad54 <PrintKey+0x1bc>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	2100      	movs	r1, #0
 800ac88:	2002      	movs	r0, #2
 800ac8a:	f00f fa65 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	785b      	ldrb	r3, [r3, #1]
 800ac92:	4618      	mov	r0, r3
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	789b      	ldrb	r3, [r3, #2]
 800ac98:	461c      	mov	r4, r3
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	78db      	ldrb	r3, [r3, #3]
 800ac9e:	461d      	mov	r5, r3
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	791b      	ldrb	r3, [r3, #4]
 800aca4:	461e      	mov	r6, r3
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	795b      	ldrb	r3, [r3, #5]
 800acaa:	623b      	str	r3, [r7, #32]
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acae:	799b      	ldrb	r3, [r3, #6]
 800acb0:	61fb      	str	r3, [r7, #28]
 800acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb4:	79db      	ldrb	r3, [r3, #7]
 800acb6:	61bb      	str	r3, [r7, #24]
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	7a1b      	ldrb	r3, [r3, #8]
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	7a5b      	ldrb	r3, [r3, #9]
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	7a9b      	ldrb	r3, [r3, #10]
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	7adb      	ldrb	r3, [r3, #11]
 800acce:	60bb      	str	r3, [r7, #8]
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	7b1b      	ldrb	r3, [r3, #12]
 800acd4:	607b      	str	r3, [r7, #4]
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	7b5b      	ldrb	r3, [r3, #13]
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	7b9b      	ldrb	r3, [r3, #14]
 800ace0:	4619      	mov	r1, r3
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	7bdb      	ldrb	r3, [r3, #15]
 800ace6:	461a      	mov	r2, r3
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	7c1b      	ldrb	r3, [r3, #16]
 800acec:	930f      	str	r3, [sp, #60]	; 0x3c
 800acee:	920e      	str	r2, [sp, #56]	; 0x38
 800acf0:	910d      	str	r1, [sp, #52]	; 0x34
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	920c      	str	r2, [sp, #48]	; 0x30
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	920b      	str	r2, [sp, #44]	; 0x2c
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	920a      	str	r2, [sp, #40]	; 0x28
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	9209      	str	r2, [sp, #36]	; 0x24
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	9208      	str	r2, [sp, #32]
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	9207      	str	r2, [sp, #28]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	9206      	str	r2, [sp, #24]
 800ad0e:	69fa      	ldr	r2, [r7, #28]
 800ad10:	9205      	str	r2, [sp, #20]
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	9304      	str	r3, [sp, #16]
 800ad16:	9603      	str	r6, [sp, #12]
 800ad18:	9502      	str	r5, [sp, #8]
 800ad1a:	9401      	str	r4, [sp, #4]
 800ad1c:	9000      	str	r0, [sp, #0]
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <PrintKey+0x1c0>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	2100      	movs	r1, #0
 800ad24:	2002      	movs	r0, #2
 800ad26:	f00f fa17 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800ad2a:	bf00      	nop
 800ad2c:	3734      	adds	r7, #52	; 0x34
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad32:	bf00      	nop
 800ad34:	0801b150 	.word	0x0801b150
 800ad38:	0801b168 	.word	0x0801b168
 800ad3c:	0801b180 	.word	0x0801b180
 800ad40:	0801b198 	.word	0x0801b198
 800ad44:	0801b1b0 	.word	0x0801b1b0
 800ad48:	0801b1c8 	.word	0x0801b1c8
 800ad4c:	0801b1e0 	.word	0x0801b1e0
 800ad50:	0801b1f8 	.word	0x0801b1f8
 800ad54:	0801b210 	.word	0x0801b210
 800ad58:	0801b228 	.word	0x0801b228

0800ad5c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6039      	str	r1, [r7, #0]
 800ad66:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
 800ad6c:	e01a      	b.n	800ada4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ad6e:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <GetKeyByID+0x5c>)
 800ad70:	6819      	ldr	r1, [r3, #0]
 800ad72:	7bfa      	ldrb	r2, [r7, #15]
 800ad74:	4613      	mov	r3, r2
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	4413      	add	r3, r2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3310      	adds	r3, #16
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	79fa      	ldrb	r2, [r7, #7]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d10b      	bne.n	800ad9e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <GetKeyByID+0x5c>)
 800ad88:	6819      	ldr	r1, [r3, #0]
 800ad8a:	7bfa      	ldrb	r2, [r7, #15]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	4413      	add	r3, r2
 800ad92:	3310      	adds	r3, #16
 800ad94:	18ca      	adds	r2, r1, r3
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e006      	b.n	800adac <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	3301      	adds	r3, #1
 800ada2:	73fb      	strb	r3, [r7, #15]
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b09      	cmp	r3, #9
 800ada8:	d9e1      	bls.n	800ad6e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800adaa:	2303      	movs	r3, #3
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bc80      	pop	{r7}
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	200004c8 	.word	0x200004c8

0800adbc <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b0d1      	sub	sp, #324	; 0x144
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800adc6:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800adca:	6020      	str	r0, [r4, #0]
 800adcc:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800add0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800add4:	6001      	str	r1, [r0, #0]
 800add6:	4619      	mov	r1, r3
 800add8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800addc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ade0:	801a      	strh	r2, [r3, #0]
 800ade2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ade6:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800adea:	460a      	mov	r2, r1
 800adec:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800adee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800adf2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <ComputeCmac+0x48>
 800adfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ae04:	2302      	movs	r3, #2
 800ae06:	e05c      	b.n	800aec2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ae08:	f107 0314 	add.w	r3, r7, #20
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe ff1b 	bl	8009c48 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ae12:	f107 0210 	add.w	r2, r7, #16
 800ae16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae1a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	4611      	mov	r1, r2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff ff9a 	bl	800ad5c <GetKeyByID>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ae2e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d143      	bne.n	800aebe <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ae36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	f107 0314 	add.w	r3, r7, #20
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe ff16 	bl	8009c7a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ae4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ae5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ae64:	f107 0014 	add.w	r0, r7, #20
 800ae68:	2210      	movs	r2, #16
 800ae6a:	6819      	ldr	r1, [r3, #0]
 800ae6c:	f7fe ff14 	bl	8009c98 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ae70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae74:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ae78:	881a      	ldrh	r2, [r3, #0]
 800ae7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ae82:	f107 0014 	add.w	r0, r7, #20
 800ae86:	6819      	ldr	r1, [r3, #0]
 800ae88:	f7fe ff06 	bl	8009c98 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ae8c:	f107 0214 	add.w	r2, r7, #20
 800ae90:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ae94:	4611      	mov	r1, r2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe ffc0 	bl	8009e1c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ae9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800aea0:	061a      	lsls	r2, r3, #24
 800aea2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800aeb2:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800aebc:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800aebe:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd90      	pop	{r4, r7, pc}

0800aecc <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800aedc:	2302      	movs	r3, #2
 800aede:	e00a      	b.n	800aef6 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800aee0:	4a07      	ldr	r2, [pc, #28]	; (800af00 <SecureElementInit+0x34>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800aee6:	4b06      	ldr	r3, [pc, #24]	; (800af00 <SecureElementInit+0x34>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	22c0      	movs	r2, #192	; 0xc0
 800aeec:	4905      	ldr	r1, [pc, #20]	; (800af04 <SecureElementInit+0x38>)
 800aeee:	4618      	mov	r0, r3
 800aef0:	f00a fddd 	bl	8015aae <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200004c8 	.word	0x200004c8
 800af04:	0801bb94 	.word	0x0801bb94

0800af08 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	6039      	str	r1, [r7, #0]
 800af12:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
 800af18:	e01a      	b.n	800af50 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800af1a:	4b12      	ldr	r3, [pc, #72]	; (800af64 <SecureElementGetKeyByID+0x5c>)
 800af1c:	6819      	ldr	r1, [r3, #0]
 800af1e:	7bfa      	ldrb	r2, [r7, #15]
 800af20:	4613      	mov	r3, r2
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	4413      	add	r3, r2
 800af26:	440b      	add	r3, r1
 800af28:	3310      	adds	r3, #16
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	79fa      	ldrb	r2, [r7, #7]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d10b      	bne.n	800af4a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <SecureElementGetKeyByID+0x5c>)
 800af34:	6819      	ldr	r1, [r3, #0]
 800af36:	7bfa      	ldrb	r2, [r7, #15]
 800af38:	4613      	mov	r3, r2
 800af3a:	011b      	lsls	r3, r3, #4
 800af3c:	4413      	add	r3, r2
 800af3e:	3310      	adds	r3, #16
 800af40:	18ca      	adds	r2, r1, r3
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800af46:	2300      	movs	r3, #0
 800af48:	e006      	b.n	800af58 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	3301      	adds	r3, #1
 800af4e:	73fb      	strb	r3, [r7, #15]
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	2b09      	cmp	r3, #9
 800af54:	d9e1      	bls.n	800af1a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800af56:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	200004c8 	.word	0x200004c8

0800af68 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800af68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af6a:	b08b      	sub	sp, #44	; 0x2c
 800af6c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800af6e:	4b3f      	ldr	r3, [pc, #252]	; (800b06c <SecureElementPrintKeys+0x104>)
 800af70:	2200      	movs	r2, #0
 800af72:	2100      	movs	r1, #0
 800af74:	2002      	movs	r0, #2
 800af76:	f00f f8ef 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800af7a:	2000      	movs	r0, #0
 800af7c:	f7ff fe0c 	bl	800ab98 <PrintKey>
    PrintKey(NWK_KEY);
 800af80:	2001      	movs	r0, #1
 800af82:	f7ff fe09 	bl	800ab98 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800af86:	4b3a      	ldr	r3, [pc, #232]	; (800b070 <SecureElementPrintKeys+0x108>)
 800af88:	2200      	movs	r2, #0
 800af8a:	2100      	movs	r1, #0
 800af8c:	2002      	movs	r0, #2
 800af8e:	f00f f8e3 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800af92:	2003      	movs	r0, #3
 800af94:	f7ff fe00 	bl	800ab98 <PrintKey>
    PrintKey(NWK_S_KEY);
 800af98:	2002      	movs	r0, #2
 800af9a:	f7ff fdfd 	bl	800ab98 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800af9e:	4b35      	ldr	r3, [pc, #212]	; (800b074 <SecureElementPrintKeys+0x10c>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	2002      	movs	r0, #2
 800afa6:	f00f f8d7 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800afaa:	4b33      	ldr	r3, [pc, #204]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b31      	ldr	r3, [pc, #196]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	4619      	mov	r1, r3
 800afba:	4b2f      	ldr	r3, [pc, #188]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	789b      	ldrb	r3, [r3, #2]
 800afc0:	4618      	mov	r0, r3
 800afc2:	4b2d      	ldr	r3, [pc, #180]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	78db      	ldrb	r3, [r3, #3]
 800afc8:	461c      	mov	r4, r3
 800afca:	4b2b      	ldr	r3, [pc, #172]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	791b      	ldrb	r3, [r3, #4]
 800afd0:	461d      	mov	r5, r3
 800afd2:	4b29      	ldr	r3, [pc, #164]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	795b      	ldrb	r3, [r3, #5]
 800afd8:	461e      	mov	r6, r3
 800afda:	4b27      	ldr	r3, [pc, #156]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	799b      	ldrb	r3, [r3, #6]
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	4b25      	ldr	r3, [pc, #148]	; (800b078 <SecureElementPrintKeys+0x110>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	79db      	ldrb	r3, [r3, #7]
 800afe8:	9307      	str	r3, [sp, #28]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	9306      	str	r3, [sp, #24]
 800afee:	9605      	str	r6, [sp, #20]
 800aff0:	9504      	str	r5, [sp, #16]
 800aff2:	9403      	str	r4, [sp, #12]
 800aff4:	9002      	str	r0, [sp, #8]
 800aff6:	9101      	str	r1, [sp, #4]
 800aff8:	9200      	str	r2, [sp, #0]
 800affa:	4b20      	ldr	r3, [pc, #128]	; (800b07c <SecureElementPrintKeys+0x114>)
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	2002      	movs	r0, #2
 800b002:	f00f f8a9 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b006:	4b1c      	ldr	r3, [pc, #112]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	7a1b      	ldrb	r3, [r3, #8]
 800b00c:	461a      	mov	r2, r3
 800b00e:	4b1a      	ldr	r3, [pc, #104]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	7a5b      	ldrb	r3, [r3, #9]
 800b014:	4619      	mov	r1, r3
 800b016:	4b18      	ldr	r3, [pc, #96]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	7a9b      	ldrb	r3, [r3, #10]
 800b01c:	4618      	mov	r0, r3
 800b01e:	4b16      	ldr	r3, [pc, #88]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	7adb      	ldrb	r3, [r3, #11]
 800b024:	461c      	mov	r4, r3
 800b026:	4b14      	ldr	r3, [pc, #80]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	7b1b      	ldrb	r3, [r3, #12]
 800b02c:	461d      	mov	r5, r3
 800b02e:	4b12      	ldr	r3, [pc, #72]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	7b5b      	ldrb	r3, [r3, #13]
 800b034:	461e      	mov	r6, r3
 800b036:	4b10      	ldr	r3, [pc, #64]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	7b9b      	ldrb	r3, [r3, #14]
 800b03c:	607b      	str	r3, [r7, #4]
 800b03e:	4b0e      	ldr	r3, [pc, #56]	; (800b078 <SecureElementPrintKeys+0x110>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	7bdb      	ldrb	r3, [r3, #15]
 800b044:	9307      	str	r3, [sp, #28]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	9306      	str	r3, [sp, #24]
 800b04a:	9605      	str	r6, [sp, #20]
 800b04c:	9504      	str	r5, [sp, #16]
 800b04e:	9403      	str	r4, [sp, #12]
 800b050:	9002      	str	r0, [sp, #8]
 800b052:	9101      	str	r1, [sp, #4]
 800b054:	9200      	str	r2, [sp, #0]
 800b056:	4b0a      	ldr	r3, [pc, #40]	; (800b080 <SecureElementPrintKeys+0x118>)
 800b058:	2200      	movs	r2, #0
 800b05a:	2100      	movs	r1, #0
 800b05c:	2002      	movs	r0, #2
 800b05e:	f00f f87b 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06c:	0801b27c 	.word	0x0801b27c
 800b070:	0801b294 	.word	0x0801b294
 800b074:	0801b2ac 	.word	0x0801b2ac
 800b078:	200004c8 	.word	0x200004c8
 800b07c:	0801b2c4 	.word	0x0801b2c4
 800b080:	0801b304 	.word	0x0801b304

0800b084 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800b088:	2004      	movs	r0, #4
 800b08a:	f7ff fd85 	bl	800ab98 <PrintKey>
    PrintKey(MC_KE_KEY);
 800b08e:	207f      	movs	r0, #127	; 0x7f
 800b090:	f7ff fd82 	bl	800ab98 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800b094:	2002      	movs	r0, #2
 800b096:	f7ff fd7f 	bl	800ab98 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800b09a:	2003      	movs	r0, #3
 800b09c:	f7ff fd7c 	bl	800ab98 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	6039      	str	r1, [r7, #0]
 800b0b2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e04c      	b.n	800b158 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b0be:	2300      	movs	r3, #0
 800b0c0:	77fb      	strb	r3, [r7, #31]
 800b0c2:	e045      	b.n	800b150 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b0c4:	4b26      	ldr	r3, [pc, #152]	; (800b160 <SecureElementSetKey+0xb8>)
 800b0c6:	6819      	ldr	r1, [r3, #0]
 800b0c8:	7ffa      	ldrb	r2, [r7, #31]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	011b      	lsls	r3, r3, #4
 800b0ce:	4413      	add	r3, r2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	3310      	adds	r3, #16
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	79fa      	ldrb	r2, [r7, #7]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d136      	bne.n	800b14a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d123      	bne.n	800b12a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800b0e2:	2306      	movs	r3, #6
 800b0e4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	f107 0310 	add.w	r3, r7, #16
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	605a      	str	r2, [r3, #4]
 800b0f4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	227f      	movs	r2, #127	; 0x7f
 800b0fc:	2110      	movs	r1, #16
 800b0fe:	6838      	ldr	r0, [r7, #0]
 800b100:	f000 f87d 	bl	800b1fe <SecureElementAesEncrypt>
 800b104:	4603      	mov	r3, r0
 800b106:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b108:	4b15      	ldr	r3, [pc, #84]	; (800b160 <SecureElementSetKey+0xb8>)
 800b10a:	6819      	ldr	r1, [r3, #0]
 800b10c:	7ffa      	ldrb	r2, [r7, #31]
 800b10e:	4613      	mov	r3, r2
 800b110:	011b      	lsls	r3, r3, #4
 800b112:	4413      	add	r3, r2
 800b114:	3310      	adds	r3, #16
 800b116:	440b      	add	r3, r1
 800b118:	3301      	adds	r3, #1
 800b11a:	f107 010c 	add.w	r1, r7, #12
 800b11e:	2210      	movs	r2, #16
 800b120:	4618      	mov	r0, r3
 800b122:	f00a fcc4 	bl	8015aae <memcpy1>
                return retval;
 800b126:	7fbb      	ldrb	r3, [r7, #30]
 800b128:	e016      	b.n	800b158 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b12a:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <SecureElementSetKey+0xb8>)
 800b12c:	6819      	ldr	r1, [r3, #0]
 800b12e:	7ffa      	ldrb	r2, [r7, #31]
 800b130:	4613      	mov	r3, r2
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	4413      	add	r3, r2
 800b136:	3310      	adds	r3, #16
 800b138:	440b      	add	r3, r1
 800b13a:	3301      	adds	r3, #1
 800b13c:	2210      	movs	r2, #16
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	4618      	mov	r0, r3
 800b142:	f00a fcb4 	bl	8015aae <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b146:	2300      	movs	r3, #0
 800b148:	e006      	b.n	800b158 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b14a:	7ffb      	ldrb	r3, [r7, #31]
 800b14c:	3301      	adds	r3, #1
 800b14e:	77fb      	strb	r3, [r7, #31]
 800b150:	7ffb      	ldrb	r3, [r7, #31]
 800b152:	2b09      	cmp	r3, #9
 800b154:	d9b6      	bls.n	800b0c4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b156:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	200004c8 	.word	0x200004c8

0800b164 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af02      	add	r7, sp, #8
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4611      	mov	r1, r2
 800b170:	461a      	mov	r2, r3
 800b172:	460b      	mov	r3, r1
 800b174:	80fb      	strh	r3, [r7, #6]
 800b176:	4613      	mov	r3, r2
 800b178:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b17a:	797b      	ldrb	r3, [r7, #5]
 800b17c:	2b7e      	cmp	r3, #126	; 0x7e
 800b17e:	d901      	bls.n	800b184 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b180:	2303      	movs	r3, #3
 800b182:	e009      	b.n	800b198 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b184:	7979      	ldrb	r1, [r7, #5]
 800b186:	88fa      	ldrh	r2, [r7, #6]
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	460b      	mov	r3, r1
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff fe13 	bl	800adbc <ComputeCmac>
 800b196:	4603      	mov	r3, r0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	607a      	str	r2, [r7, #4]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	817b      	strh	r3, [r7, #10]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e01b      	b.n	800b1f6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b1be:	2306      	movs	r3, #6
 800b1c0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b1c6:	7a79      	ldrb	r1, [r7, #9]
 800b1c8:	897a      	ldrh	r2, [r7, #10]
 800b1ca:	f107 0310 	add.w	r3, r7, #16
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	68f9      	ldr	r1, [r7, #12]
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f7ff fdf1 	bl	800adbc <ComputeCmac>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800b1e4:	7dfb      	ldrb	r3, [r7, #23]
 800b1e6:	e006      	b.n	800b1f6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d001      	beq.n	800b1f4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b0c2      	sub	sp, #264	; 0x108
 800b202:	af00      	add	r7, sp, #0
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	4608      	mov	r0, r1
 800b208:	4611      	mov	r1, r2
 800b20a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800b20e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4603      	mov	r3, r0
 800b216:	817b      	strh	r3, [r7, #10]
 800b218:	460b      	mov	r3, r1
 800b21a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d006      	beq.n	800b230 <SecureElementAesEncrypt+0x32>
 800b222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b230:	2302      	movs	r3, #2
 800b232:	e046      	b.n	800b2c2 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b234:	897b      	ldrh	r3, [r7, #10]
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b240:	2305      	movs	r3, #5
 800b242:	e03e      	b.n	800b2c2 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b244:	f107 0314 	add.w	r3, r7, #20
 800b248:	22f0      	movs	r2, #240	; 0xf0
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f00a fc69 	bl	8015b24 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b252:	f107 0210 	add.w	r2, r7, #16
 800b256:	7a7b      	ldrb	r3, [r7, #9]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff fd7e 	bl	800ad5c <GetKeyByID>
 800b260:	4603      	mov	r3, r0
 800b262:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b266:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d127      	bne.n	800b2be <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	3301      	adds	r3, #1
 800b272:	f107 0214 	add.w	r2, r7, #20
 800b276:	2110      	movs	r1, #16
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff fb65 	bl	800a948 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800b284:	e018      	b.n	800b2b8 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800b286:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	18d0      	adds	r0, r2, r3
 800b28e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b292:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800b296:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800b29a:	6812      	ldr	r2, [r2, #0]
 800b29c:	4413      	add	r3, r2
 800b29e:	f107 0214 	add.w	r2, r7, #20
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f7ff fc2e 	bl	800ab04 <lorawan_aes_encrypt>
            block = block + 16;
 800b2a8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800b2b2:	897b      	ldrh	r3, [r7, #10]
 800b2b4:	3b10      	subs	r3, #16
 800b2b6:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800b2b8:	897b      	ldrh	r3, [r7, #10]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e3      	bne.n	800b286 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b2be:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b088      	sub	sp, #32
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	70fb      	strb	r3, [r7, #3]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e02e      	b.n	800b344 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b2e6:	2306      	movs	r3, #6
 800b2e8:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b2ea:	78bb      	ldrb	r3, [r7, #2]
 800b2ec:	2b7f      	cmp	r3, #127	; 0x7f
 800b2ee:	d104      	bne.n	800b2fa <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d001      	beq.n	800b2fa <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e024      	b.n	800b344 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	f107 0310 	add.w	r3, r7, #16
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	605a      	str	r2, [r3, #4]
 800b308:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b30a:	f107 030c 	add.w	r3, r7, #12
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	2110      	movs	r1, #16
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff ff73 	bl	800b1fe <SecureElementAesEncrypt>
 800b318:	4603      	mov	r3, r0
 800b31a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b31c:	7ffb      	ldrb	r3, [r7, #31]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b322:	7ffb      	ldrb	r3, [r7, #31]
 800b324:	e00e      	b.n	800b344 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800b326:	f107 020c 	add.w	r2, r7, #12
 800b32a:	78bb      	ldrb	r3, [r7, #2]
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff feba 	bl	800b0a8 <SecureElementSetKey>
 800b334:	4603      	mov	r3, r0
 800b336:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b338:	7ffb      	ldrb	r3, [r7, #31]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b33e:	7ffb      	ldrb	r3, [r7, #31]
 800b340:	e000      	b.n	800b344 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b342:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b344:	4618      	mov	r0, r3
 800b346:	3720      	adds	r7, #32
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	4603      	mov	r3, r0
 800b358:	73fb      	strb	r3, [r7, #15]
 800b35a:	4613      	mov	r3, r2
 800b35c:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <SecureElementProcessJoinAccept+0x24>
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <SecureElementProcessJoinAccept+0x24>
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b370:	2302      	movs	r3, #2
 800b372:	e064      	b.n	800b43e <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b374:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b378:	2b21      	cmp	r3, #33	; 0x21
 800b37a:	d901      	bls.n	800b380 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b37c:	2305      	movs	r3, #5
 800b37e:	e05e      	b.n	800b43e <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b380:	2301      	movs	r3, #1
 800b382:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b384:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	461a      	mov	r2, r3
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b390:	f00a fb8d 	bl	8015aae <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	1c58      	adds	r0, r3, #1
 800b398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	b299      	uxth	r1, r3
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	7dfa      	ldrb	r2, [r7, #23]
 800b3a8:	f7ff ff29 	bl	800b1fe <SecureElementAesEncrypt>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b3b2:	2307      	movs	r3, #7
 800b3b4:	e043      	b.n	800b43e <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	330b      	adds	r3, #11
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	09db      	lsrs	r3, r3, #7
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b3c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3cc:	3b04      	subs	r3, #4
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d0:	4413      	add	r3, r2
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b3d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3da:	3b03      	subs	r3, #3
 800b3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3de:	4413      	add	r3, r2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	021b      	lsls	r3, r3, #8
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b3ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3ee:	3b02      	subs	r3, #2
 800b3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f2:	4413      	add	r3, r2
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b3fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b402:	3b01      	subs	r3, #1
 800b404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b406:	4413      	add	r3, r2
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	061b      	lsls	r3, r3, #24
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4313      	orrs	r3, r2
 800b410:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10e      	bne.n	800b438 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b41a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	3b04      	subs	r3, #4
 800b422:	b299      	uxth	r1, r3
 800b424:	2301      	movs	r3, #1
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b42a:	f7ff feb9 	bl	800b1a0 <SecureElementVerifyAesCmac>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b434:	2301      	movs	r3, #1
 800b436:	e002      	b.n	800b43e <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b438:	2304      	movs	r3, #4
 800b43a:	e000      	b.n	800b43e <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b456:	2302      	movs	r3, #2
 800b458:	e006      	b.n	800b468 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b45a:	4b05      	ldr	r3, [pc, #20]	; (800b470 <SecureElementRandomNumber+0x28>)
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	4798      	blx	r3
 800b460:	4602      	mov	r2, r0
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	0801ba18 	.word	0x0801ba18

0800b474 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b482:	2302      	movs	r3, #2
 800b484:	e007      	b.n	800b496 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <SecureElementSetDevEui+0x2c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2208      	movs	r2, #8
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	4618      	mov	r0, r3
 800b490:	f00a fb0d 	bl	8015aae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	200004c8 	.word	0x200004c8

0800b4a4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800b4a8:	4b02      	ldr	r3, [pc, #8]	; (800b4b4 <SecureElementGetDevEui+0x10>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bc80      	pop	{r7}
 800b4b2:	4770      	bx	lr
 800b4b4:	200004c8 	.word	0x200004c8

0800b4b8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e008      	b.n	800b4dc <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <SecureElementSetJoinEui+0x2c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f00a faea 	bl	8015aae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200004c8 	.word	0x200004c8

0800b4e8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800b4ec:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <SecureElementGetJoinEui+0x14>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3308      	adds	r3, #8
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	200004c8 	.word	0x200004c8

0800b500 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800b50a:	4a1a      	ldr	r2, [pc, #104]	; (800b574 <LmHandlerInit+0x74>)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b510:	4b19      	ldr	r3, [pc, #100]	; (800b578 <LmHandlerInit+0x78>)
 800b512:	4a1a      	ldr	r2, [pc, #104]	; (800b57c <LmHandlerInit+0x7c>)
 800b514:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b516:	4b18      	ldr	r3, [pc, #96]	; (800b578 <LmHandlerInit+0x78>)
 800b518:	4a19      	ldr	r2, [pc, #100]	; (800b580 <LmHandlerInit+0x80>)
 800b51a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b51c:	4b16      	ldr	r3, [pc, #88]	; (800b578 <LmHandlerInit+0x78>)
 800b51e:	4a19      	ldr	r2, [pc, #100]	; (800b584 <LmHandlerInit+0x84>)
 800b520:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b522:	4b15      	ldr	r3, [pc, #84]	; (800b578 <LmHandlerInit+0x78>)
 800b524:	4a18      	ldr	r2, [pc, #96]	; (800b588 <LmHandlerInit+0x88>)
 800b526:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <LmHandlerInit+0x74>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a17      	ldr	r2, [pc, #92]	; (800b58c <LmHandlerInit+0x8c>)
 800b530:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b532:	4b10      	ldr	r3, [pc, #64]	; (800b574 <LmHandlerInit+0x74>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	4a14      	ldr	r2, [pc, #80]	; (800b58c <LmHandlerInit+0x8c>)
 800b53a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <LmHandlerInit+0x74>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	4a12      	ldr	r2, [pc, #72]	; (800b58c <LmHandlerInit+0x8c>)
 800b544:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b546:	4b11      	ldr	r3, [pc, #68]	; (800b58c <LmHandlerInit+0x8c>)
 800b548:	4a11      	ldr	r2, [pc, #68]	; (800b590 <LmHandlerInit+0x90>)
 800b54a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b54c:	4b09      	ldr	r3, [pc, #36]	; (800b574 <LmHandlerInit+0x74>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	4a0e      	ldr	r2, [pc, #56]	; (800b58c <LmHandlerInit+0x8c>)
 800b554:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800b556:	490f      	ldr	r1, [pc, #60]	; (800b594 <LmHandlerInit+0x94>)
 800b558:	2000      	movs	r0, #0
 800b55a:	f000 fd8f 	bl	800c07c <LmHandlerPackageRegister>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800b564:	f04f 33ff 	mov.w	r3, #4294967295
 800b568:	e000      	b.n	800b56c <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	200004f4 	.word	0x200004f4
 800b578:	200004f8 	.word	0x200004f8
 800b57c:	0800bd49 	.word	0x0800bd49
 800b580:	0800bdb1 	.word	0x0800bdb1
 800b584:	0800be8d 	.word	0x0800be8d
 800b588:	0800bfa9 	.word	0x0800bfa9
 800b58c:	20000508 	.word	0x20000508
 800b590:	0800c3d1 	.word	0x0800c3d1
 800b594:	20000090 	.word	0x20000090

0800b598 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b094      	sub	sp, #80	; 0x50
 800b59c:	af04      	add	r7, sp, #16
 800b59e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800b5a0:	2214      	movs	r2, #20
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	488f      	ldr	r0, [pc, #572]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b5a6:	f00d fd87 	bl	80190b8 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800b5aa:	f7fe fa81 	bl	8009ab0 <LoraInfo_GetPtr>
 800b5ae:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800b5b0:	4b8c      	ldr	r3, [pc, #560]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	4093      	lsls	r3, r2
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800b5c6:	4b88      	ldr	r3, [pc, #544]	; (800b7e8 <LmHandlerConfigure+0x250>)
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f00e fdc3 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800b5d2:	e7fe      	b.n	800b5d2 <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800b5d4:	4b83      	ldr	r3, [pc, #524]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	4984      	ldr	r1, [pc, #528]	; (800b7ec <LmHandlerConfigure+0x254>)
 800b5dc:	4884      	ldr	r0, [pc, #528]	; (800b7f0 <LmHandlerConfigure+0x258>)
 800b5de:	f004 fbdd 	bl	800fd9c <LoRaMacInitialization>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800b5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ec:	e0f5      	b.n	800b7da <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800b5ee:	2326      	movs	r3, #38	; 0x26
 800b5f0:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b5f2:	f107 0318 	add.w	r3, r7, #24
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f005 f8f4 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d103      	bne.n	800b60a <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800b602:	4b7c      	ldr	r3, [pc, #496]	; (800b7f4 <LmHandlerConfigure+0x25c>)
 800b604:	2201      	movs	r2, #1
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	e02a      	b.n	800b660 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800b60a:	2327      	movs	r3, #39	; 0x27
 800b60c:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800b60e:	4b7a      	ldr	r3, [pc, #488]	; (800b7f8 <LmHandlerConfigure+0x260>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00c      	beq.n	800b632 <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b618:	f107 0318 	add.w	r3, r7, #24
 800b61c:	4618      	mov	r0, r3
 800b61e:	f004 ff5b 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800b622:	4b75      	ldr	r3, [pc, #468]	; (800b7f8 <LmHandlerConfigure+0x260>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	69fa      	ldr	r2, [r7, #28]
 800b62a:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800b62e:	4610      	mov	r0, r2
 800b630:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800b632:	2326      	movs	r3, #38	; 0x26
 800b634:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b636:	f107 0318 	add.w	r3, r7, #24
 800b63a:	4618      	mov	r0, r3
 800b63c:	f005 f8d2 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10c      	bne.n	800b660 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b646:	2301      	movs	r3, #1
 800b648:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b64a:	f107 0318 	add.w	r3, r7, #24
 800b64e:	4618      	mov	r0, r3
 800b650:	f004 ff42 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800b654:	7f3b      	ldrb	r3, [r7, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800b65a:	4b66      	ldr	r3, [pc, #408]	; (800b7f4 <LmHandlerConfigure+0x25c>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800b660:	4b64      	ldr	r3, [pc, #400]	; (800b7f4 <LmHandlerConfigure+0x25c>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d02a      	beq.n	800b6be <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800b668:	4b63      	ldr	r3, [pc, #396]	; (800b7f8 <LmHandlerConfigure+0x260>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d004      	beq.n	800b67c <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800b672:	4b61      	ldr	r3, [pc, #388]	; (800b7f8 <LmHandlerConfigure+0x260>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	69db      	ldr	r3, [r3, #28]
 800b678:	2000      	movs	r0, #0
 800b67a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800b67c:	2306      	movs	r3, #6
 800b67e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b680:	f107 0318 	add.w	r3, r7, #24
 800b684:	4618      	mov	r0, r3
 800b686:	f004 ff27 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4a5b      	ldr	r2, [pc, #364]	; (800b7fc <LmHandlerConfigure+0x264>)
 800b68e:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800b690:	2326      	movs	r3, #38	; 0x26
 800b692:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b694:	f107 0318 	add.w	r3, r7, #24
 800b698:	4618      	mov	r0, r3
 800b69a:	f004 ff1d 	bl	80104d8 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b6a4:	4b4f      	ldr	r3, [pc, #316]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b6a6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800b6ae:	4b4d      	ldr	r3, [pc, #308]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b6b0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800b6b8:	4b4a      	ldr	r3, [pc, #296]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b6ba:	709a      	strb	r2, [r3, #2]
 800b6bc:	e019      	b.n	800b6f2 <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800b6be:	2305      	movs	r3, #5
 800b6c0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800b6c6:	f107 0318 	add.w	r3, r7, #24
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f005 f88a 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800b6d0:	4b49      	ldr	r3, [pc, #292]	; (800b7f8 <LmHandlerConfigure+0x260>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	4798      	blx	r3
 800b6d8:	4603      	mov	r3, r0
 800b6da:	4a48      	ldr	r2, [pc, #288]	; (800b7fc <LmHandlerConfigure+0x264>)
 800b6dc:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800b6de:	2306      	movs	r3, #6
 800b6e0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800b6e2:	4b46      	ldr	r3, [pc, #280]	; (800b7fc <LmHandlerConfigure+0x264>)
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800b6e8:	f107 0318 	add.w	r3, r7, #24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f005 f879 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b6f6:	f107 0318 	add.w	r3, r7, #24
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f004 feec 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2208      	movs	r2, #8
 800b704:	4619      	mov	r1, r3
 800b706:	483d      	ldr	r0, [pc, #244]	; (800b7fc <LmHandlerConfigure+0x264>)
 800b708:	f00a f9d1 	bl	8015aae <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800b70c:	2303      	movs	r3, #3
 800b70e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b710:	f107 0318 	add.w	r3, r7, #24
 800b714:	4618      	mov	r0, r3
 800b716:	f004 fedf 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	2208      	movs	r2, #8
 800b71e:	4619      	mov	r1, r3
 800b720:	4837      	ldr	r0, [pc, #220]	; (800b800 <LmHandlerConfigure+0x268>)
 800b722:	f00a f9c4 	bl	8015aae <memcpy1>

    SecureElementPrintKeys();
 800b726:	f7ff fc1f 	bl	800af68 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b72a:	4b36      	ldr	r3, [pc, #216]	; (800b804 <LmHandlerConfigure+0x26c>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	4b35      	ldr	r3, [pc, #212]	; (800b808 <LmHandlerConfigure+0x270>)
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	4619      	mov	r1, r3
 800b736:	4b35      	ldr	r3, [pc, #212]	; (800b80c <LmHandlerConfigure+0x274>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	4618      	mov	r0, r3
 800b73c:	4b34      	ldr	r3, [pc, #208]	; (800b810 <LmHandlerConfigure+0x278>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	9303      	str	r3, [sp, #12]
 800b742:	9002      	str	r0, [sp, #8]
 800b744:	9101      	str	r1, [sp, #4]
 800b746:	9200      	str	r2, [sp, #0]
 800b748:	4b32      	ldr	r3, [pc, #200]	; (800b814 <LmHandlerConfigure+0x27c>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	2100      	movs	r1, #0
 800b74e:	2002      	movs	r0, #2
 800b750:	f00e fd02 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b754:	230f      	movs	r3, #15
 800b756:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b758:	2301      	movs	r3, #1
 800b75a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b75c:	f107 0318 	add.w	r3, r7, #24
 800b760:	4618      	mov	r0, r3
 800b762:	f005 f83f 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b766:	2310      	movs	r3, #16
 800b768:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b76a:	2300      	movs	r3, #0
 800b76c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b76e:	f107 0318 	add.w	r3, r7, #24
 800b772:	4618      	mov	r0, r3
 800b774:	f005 f836 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800b778:	2304      	movs	r3, #4
 800b77a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b77c:	4b19      	ldr	r3, [pc, #100]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b77e:	789b      	ldrb	r3, [r3, #2]
 800b780:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b782:	f107 0318 	add.w	r3, r7, #24
 800b786:	4618      	mov	r0, r3
 800b788:	f005 f82c 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800b78c:	2337      	movs	r3, #55	; 0x37
 800b78e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800b790:	4b14      	ldr	r3, [pc, #80]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b796:	f107 0318 	add.w	r3, r7, #24
 800b79a:	4618      	mov	r0, r3
 800b79c:	f005 f822 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b7a0:	230f      	movs	r3, #15
 800b7a2:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b7a4:	4b0f      	ldr	r3, [pc, #60]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f107 0210 	add.w	r2, r7, #16
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f007 fe6a 	bl	8013488 <RegionGetPhyParam>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	bf14      	ite	ne
 800b7be:	2301      	movne	r3, #1
 800b7c0:	2300      	moveq	r3, #0
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b7c6:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800b7c8:	2014      	movs	r0, #20
 800b7ca:	f000 faa5 	bl	800bd18 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b7ce:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <LmHandlerConfigure+0x24c>)
 800b7d0:	799b      	ldrb	r3, [r3, #6]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f005 fd96 	bl	8011304 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3740      	adds	r7, #64	; 0x40
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	200004e0 	.word	0x200004e0
 800b7e8:	0801b344 	.word	0x0801b344
 800b7ec:	20000508 	.word	0x20000508
 800b7f0:	200004f8 	.word	0x200004f8
 800b7f4:	20000612 	.word	0x20000612
 800b7f8:	200004f4 	.word	0x200004f4
 800b7fc:	20000078 	.word	0x20000078
 800b800:	20000080 	.word	0x20000080
 800b804:	2000008f 	.word	0x2000008f
 800b808:	2000008e 	.word	0x2000008e
 800b80c:	2000008d 	.word	0x2000008d
 800b810:	2000008c 	.word	0x2000008c
 800b814:	0801b390 	.word	0x0801b390

0800b818 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800b81c:	f002 fa90 	bl	800dd40 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800b820:	f000 fd30 	bl	800c284 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800b824:	bf00      	nop
 800b826:	bd80      	pop	{r7, pc}

0800b828 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800b82c:	4b02      	ldr	r3, [pc, #8]	; (800b838 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800b82e:	681b      	ldr	r3, [r3, #0]
}
 800b830:	4618      	mov	r0, r3
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr
 800b838:	2000051c 	.word	0x2000051c

0800b83c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b090      	sub	sp, #64	; 0x40
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	460a      	mov	r2, r1
 800b846:	71fb      	strb	r3, [r7, #7]
 800b848:	4613      	mov	r3, r2
 800b84a:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b852:	4b35      	ldr	r3, [pc, #212]	; (800b928 <LmHandlerJoin+0xec>)
 800b854:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	2b02      	cmp	r3, #2
 800b862:	d110      	bne.n	800b886 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b864:	2302      	movs	r3, #2
 800b866:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b86a:	4b30      	ldr	r3, [pc, #192]	; (800b92c <LmHandlerJoin+0xf0>)
 800b86c:	2202      	movs	r2, #2
 800b86e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800b870:	4a2e      	ldr	r2, [pc, #184]	; (800b92c <LmHandlerJoin+0xf0>)
 800b872:	79bb      	ldrb	r3, [r7, #6]
 800b874:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800b876:	f004 fd45 	bl	8010304 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800b87a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b87e:	4618      	mov	r0, r3
 800b880:	f005 fb0a 	bl	8010e98 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800b884:	e04b      	b.n	800b91e <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b886:	2301      	movs	r3, #1
 800b888:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b88c:	4b27      	ldr	r3, [pc, #156]	; (800b92c <LmHandlerJoin+0xf0>)
 800b88e:	2201      	movs	r2, #1
 800b890:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b892:	4b25      	ldr	r3, [pc, #148]	; (800b928 <LmHandlerJoin+0xec>)
 800b894:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800b898:	4b24      	ldr	r3, [pc, #144]	; (800b92c <LmHandlerJoin+0xf0>)
 800b89a:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b89c:	4b23      	ldr	r3, [pc, #140]	; (800b92c <LmHandlerJoin+0xf0>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800b8a2:	4a22      	ldr	r2, [pc, #136]	; (800b92c <LmHandlerJoin+0xf0>)
 800b8a4:	79bb      	ldrb	r3, [r7, #6]
 800b8a6:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800b8a8:	4b21      	ldr	r3, [pc, #132]	; (800b930 <LmHandlerJoin+0xf4>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	f083 0301 	eor.w	r3, r3, #1
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01e      	beq.n	800b8f4 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800b8b6:	231e      	movs	r3, #30
 800b8b8:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <LmHandlerJoin+0xec>)
 800b8bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b8c0:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b8c2:	f107 0308 	add.w	r3, r7, #8
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f004 ff8c 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800b8cc:	231f      	movs	r3, #31
 800b8ce:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800b8d0:	4b15      	ldr	r3, [pc, #84]	; (800b928 <LmHandlerJoin+0xec>)
 800b8d2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b8d6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f004 ff81 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b8e2:	2328      	movs	r3, #40	; 0x28
 800b8e4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b8e6:	4b13      	ldr	r3, [pc, #76]	; (800b934 <LmHandlerJoin+0xf8>)
 800b8e8:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f004 ff78 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800b8f4:	f004 fd06 	bl	8010304 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b900:	f107 0308 	add.w	r3, r7, #8
 800b904:	4618      	mov	r0, r3
 800b906:	f004 ff6d 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b90a:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <LmHandlerJoin+0xfc>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b910:	4806      	ldr	r0, [pc, #24]	; (800b92c <LmHandlerJoin+0xf0>)
 800b912:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <LmHandlerJoin+0xec>)
 800b916:	785b      	ldrb	r3, [r3, #1]
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 f92b 	bl	800bb74 <LmHandlerRequestClass>
}
 800b91e:	bf00      	nop
 800b920:	3740      	adds	r7, #64	; 0x40
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	200004e0 	.word	0x200004e0
 800b92c:	2000009c 	.word	0x2000009c
 800b930:	20000612 	.word	0x20000612
 800b934:	01000300 	.word	0x01000300
 800b938:	200004f4 	.word	0x200004f4

0800b93c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	; 0x28
 800b940:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b942:	2301      	movs	r3, #1
 800b944:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b946:	463b      	mov	r3, r7
 800b948:	4618      	mov	r0, r3
 800b94a:	f004 fdc5 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800b954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d106      	bne.n	800b96a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b95c:	793b      	ldrb	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800b962:	2300      	movs	r3, #0
 800b964:	e002      	b.n	800b96c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800b96a:	2300      	movs	r3, #0
    }
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3728      	adds	r7, #40	; 0x28
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08a      	sub	sp, #40	; 0x28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
 800b980:	4613      	mov	r3, r2
 800b982:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b984:	23ff      	movs	r3, #255	; 0xff
 800b986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800b98a:	f001 ff67 	bl	800d85c <LoRaMacIsBusy>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b994:	f06f 0301 	mvn.w	r3, #1
 800b998:	e0b6      	b.n	800bb08 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b99a:	f7ff ffcf 	bl	800b93c <LmHandlerJoinStatus>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d00a      	beq.n	800b9ba <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b9a4:	4b5a      	ldr	r3, [pc, #360]	; (800bb10 <LmHandlerSend+0x19c>)
 800b9a6:	799b      	ldrb	r3, [r3, #6]
 800b9a8:	4a59      	ldr	r2, [pc, #356]	; (800bb10 <LmHandlerSend+0x19c>)
 800b9aa:	79d2      	ldrb	r2, [r2, #7]
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff ff44 	bl	800b83c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b9b4:	f06f 0302 	mvn.w	r3, #2
 800b9b8:	e0a6      	b.n	800bb08 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800b9ba:	4b56      	ldr	r3, [pc, #344]	; (800bb14 <LmHandlerSend+0x1a0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	4798      	blx	r3
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00d      	beq.n	800b9e4 <LmHandlerSend+0x70>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	781a      	ldrb	r2, [r3, #0]
 800b9cc:	4b51      	ldr	r3, [pc, #324]	; (800bb14 <LmHandlerSend+0x1a0>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d006      	beq.n	800b9e4 <LmHandlerSend+0x70>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d002      	beq.n	800b9e4 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800b9de:	f06f 0303 	mvn.w	r3, #3
 800b9e2:	e091      	b.n	800bb08 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800b9e4:	4a4c      	ldr	r2, [pc, #304]	; (800bb18 <LmHandlerSend+0x1a4>)
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bf14      	ite	ne
 800b9f0:	2301      	movne	r3, #1
 800b9f2:	2300      	moveq	r3, #0
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b9f8:	4b48      	ldr	r3, [pc, #288]	; (800bb1c <LmHandlerSend+0x1a8>)
 800b9fa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b9fe:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	f107 020c 	add.w	r2, r7, #12
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f004 fcdc 	bl	80103c8 <LoRaMacQueryTxPossible>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ba16:	2300      	movs	r3, #0
 800ba18:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ba22:	23f9      	movs	r3, #249	; 0xf9
 800ba24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba28:	e009      	b.n	800ba3e <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	785b      	ldrb	r3, [r3, #1]
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ba3e:	4b36      	ldr	r3, [pc, #216]	; (800bb18 <LmHandlerSend+0x1a4>)
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	3310      	adds	r3, #16
 800ba44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba48:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ba4c:	4b33      	ldr	r3, [pc, #204]	; (800bb1c <LmHandlerSend+0x1a8>)
 800ba4e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ba52:	4b31      	ldr	r3, [pc, #196]	; (800bb18 <LmHandlerSend+0x1a4>)
 800ba54:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800ba56:	78ba      	ldrb	r2, [r7, #2]
 800ba58:	f107 0310 	add.w	r3, r7, #16
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f005 fb5a 	bl	8011118 <LoRaMacMcpsRequest>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	4a2c      	ldr	r2, [pc, #176]	; (800bb20 <LmHandlerSend+0x1ac>)
 800ba6e:	6013      	str	r3, [r2, #0]

    switch (status)
 800ba70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba74:	2b11      	cmp	r3, #17
 800ba76:	d840      	bhi.n	800bafa <LmHandlerSend+0x186>
 800ba78:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <LmHandlerSend+0x10c>)
 800ba7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7e:	bf00      	nop
 800ba80:	0800bac9 	.word	0x0800bac9
 800ba84:	0800badb 	.word	0x0800badb
 800ba88:	0800bafb 	.word	0x0800bafb
 800ba8c:	0800bafb 	.word	0x0800bafb
 800ba90:	0800bafb 	.word	0x0800bafb
 800ba94:	0800bafb 	.word	0x0800bafb
 800ba98:	0800bafb 	.word	0x0800bafb
 800ba9c:	0800bae3 	.word	0x0800bae3
 800baa0:	0800bafb 	.word	0x0800bafb
 800baa4:	0800bafb 	.word	0x0800bafb
 800baa8:	0800bafb 	.word	0x0800bafb
 800baac:	0800baf3 	.word	0x0800baf3
 800bab0:	0800bafb 	.word	0x0800bafb
 800bab4:	0800bafb 	.word	0x0800bafb
 800bab8:	0800badb 	.word	0x0800badb
 800babc:	0800badb 	.word	0x0800badb
 800bac0:	0800badb 	.word	0x0800badb
 800bac4:	0800baeb 	.word	0x0800baeb
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800bac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bacc:	f113 0f07 	cmn.w	r3, #7
 800bad0:	d017      	beq.n	800bb02 <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800bad2:	2300      	movs	r3, #0
 800bad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800bad8:	e013      	b.n	800bb02 <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800bada:	23fe      	movs	r3, #254	; 0xfe
 800badc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bae0:	e010      	b.n	800bb04 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bae2:	23fd      	movs	r3, #253	; 0xfd
 800bae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bae8:	e00c      	b.n	800bb04 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800baea:	23fb      	movs	r3, #251	; 0xfb
 800baec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800baf0:	e008      	b.n	800bb04 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800baf2:	23fa      	movs	r3, #250	; 0xfa
 800baf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800baf8:	e004      	b.n	800bb04 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bafa:	23ff      	movs	r3, #255	; 0xff
 800bafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bb00:	e000      	b.n	800bb04 <LmHandlerSend+0x190>
            break;
 800bb02:	bf00      	nop
    }

    return lmhStatus;
 800bb04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3728      	adds	r7, #40	; 0x28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	2000009c 	.word	0x2000009c
 800bb14:	200004cc 	.word	0x200004cc
 800bb18:	200000a4 	.word	0x200000a4
 800bb1c:	200004e0 	.word	0x200004e0
 800bb20:	2000051c 	.word	0x2000051c

0800bb24 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800bb2a:	230a      	movs	r3, #10
 800bb2c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800bb2e:	463b      	mov	r3, r7
 800bb30:	4618      	mov	r0, r3
 800bb32:	f005 f9b1 	bl	8010e98 <LoRaMacMlmeRequest>
 800bb36:	4603      	mov	r3, r0
 800bb38:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <LmHandlerDeviceTimeReq+0x34>)
 800bb3e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e001      	b.n	800bb4e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800bb4a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	2000051c 	.word	0x2000051c

0800bb5c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800bb66:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bc80      	pop	{r7}
 800bb72:	4770      	bx	lr

0800bb74 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08c      	sub	sp, #48	; 0x30
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800bb84:	f001 fe6a 	bl	800d85c <LoRaMacIsBusy>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bb8e:	f06f 0301 	mvn.w	r3, #1
 800bb92:	e073      	b.n	800bc7c <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800bb94:	f7ff fed2 	bl	800b93c <LmHandlerJoinStatus>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d002      	beq.n	800bba4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bb9e:	f06f 0302 	mvn.w	r3, #2
 800bba2:	e06b      	b.n	800bc7c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bba4:	2300      	movs	r3, #0
 800bba6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bba8:	f107 0308 	add.w	r3, r7, #8
 800bbac:	4618      	mov	r0, r3
 800bbae:	f004 fc93 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800bbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbbc:	e05e      	b.n	800bc7c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800bbbe:	7b3b      	ldrb	r3, [r7, #12]
 800bbc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800bbc4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bbc8:	79fb      	ldrb	r3, [r7, #7]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d04d      	beq.n	800bc6a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d028      	beq.n	800bc26 <LmHandlerRequestClass+0xb2>
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	dc4a      	bgt.n	800bc6e <LmHandlerRequestClass+0xfa>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <LmHandlerRequestClass+0x6e>
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d01e      	beq.n	800bc1e <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800bbe0:	e045      	b.n	800bc6e <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800bbe2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d043      	beq.n	800bc72 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800bbea:	79fb      	ldrb	r3, [r7, #7]
 800bbec:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bbee:	f107 0308 	add.w	r3, r7, #8
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f004 fdf6 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10b      	bne.n	800bc16 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800bbfe:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <LmHandlerRequestClass+0x110>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d034      	beq.n	800bc72 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800bc08:	4b1e      	ldr	r3, [pc, #120]	; (800bc84 <LmHandlerRequestClass+0x110>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0e:	79fa      	ldrb	r2, [r7, #7]
 800bc10:	4610      	mov	r0, r2
 800bc12:	4798      	blx	r3
            break;
 800bc14:	e02d      	b.n	800bc72 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bc16:	23ff      	movs	r3, #255	; 0xff
 800bc18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bc1c:	e029      	b.n	800bc72 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800bc1e:	23ff      	movs	r3, #255	; 0xff
 800bc20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bc24:	e028      	b.n	800bc78 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800bc26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800bc2e:	23ff      	movs	r3, #255	; 0xff
 800bc30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bc34:	e01f      	b.n	800bc76 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800bc36:	79fb      	ldrb	r3, [r7, #7]
 800bc38:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bc3a:	f107 0308 	add.w	r3, r7, #8
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f004 fdd0 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10b      	bne.n	800bc62 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <LmHandlerRequestClass+0x110>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d010      	beq.n	800bc76 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800bc54:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <LmHandlerRequestClass+0x110>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5a:	79fa      	ldrb	r2, [r7, #7]
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4798      	blx	r3
            break;
 800bc60:	e009      	b.n	800bc76 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bc62:	23ff      	movs	r3, #255	; 0xff
 800bc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800bc68:	e005      	b.n	800bc76 <LmHandlerRequestClass+0x102>
        }
    }
 800bc6a:	bf00      	nop
 800bc6c:	e004      	b.n	800bc78 <LmHandlerRequestClass+0x104>
            break;
 800bc6e:	bf00      	nop
 800bc70:	e002      	b.n	800bc78 <LmHandlerRequestClass+0x104>
            break;
 800bc72:	bf00      	nop
 800bc74:	e000      	b.n	800bc78 <LmHandlerRequestClass+0x104>
            break;
 800bc76:	bf00      	nop
    return errorStatus;
 800bc78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3730      	adds	r7, #48	; 0x30
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	200004f4 	.word	0x200004f4

0800bc88 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08c      	sub	sp, #48	; 0x30
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d102      	bne.n	800bc9c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9a:	e010      	b.n	800bcbe <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800bca0:	f107 030c 	add.w	r3, r7, #12
 800bca4:	4618      	mov	r0, r3
 800bca6:	f004 fc17 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb4:	e003      	b.n	800bcbe <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800bcb6:	7c3a      	ldrb	r2, [r7, #16]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3730      	adds	r7, #48	; 0x30
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08c      	sub	sp, #48	; 0x30
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d102      	bne.n	800bcdc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800bcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcda:	e016      	b.n	800bd0a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800bcdc:	231f      	movs	r3, #31
 800bcde:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800bce0:	f107 030c 	add.w	r3, r7, #12
 800bce4:	4618      	mov	r0, r3
 800bce6:	f004 fbf7 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	e009      	b.n	800bd0a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800bcf6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f993 2000 	ldrsb.w	r2, [r3]
 800bd04:	4b03      	ldr	r3, [pc, #12]	; (800bd14 <LmHandlerGetTxDatarate+0x4c>)
 800bd06:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3730      	adds	r7, #48	; 0x30
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	200004e0 	.word	0x200004e0

0800bd18 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	; 0x30
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800bd20:	2322      	movs	r3, #34	; 0x22
 800bd22:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bd28:	f107 030c 	add.w	r3, r7, #12
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f004 fd59 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800bd38:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3c:	e000      	b.n	800bd40 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3730      	adds	r7, #48	; 0x30
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800bd50:	4b15      	ldr	r3, [pc, #84]	; (800bda8 <McpsConfirm+0x60>)
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	785a      	ldrb	r2, [r3, #1]
 800bd5a:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <McpsConfirm+0x60>)
 800bd5c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	789b      	ldrb	r3, [r3, #2]
 800bd62:	b25a      	sxtb	r2, r3
 800bd64:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <McpsConfirm+0x60>)
 800bd66:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	4a0e      	ldr	r2, [pc, #56]	; (800bda8 <McpsConfirm+0x60>)
 800bd6e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800bd76:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <McpsConfirm+0x60>)
 800bd78:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <McpsConfirm+0x60>)
 800bd82:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	791b      	ldrb	r3, [r3, #4]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <McpsConfirm+0x60>)
 800bd8c:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800bd8e:	4b07      	ldr	r3, [pc, #28]	; (800bdac <McpsConfirm+0x64>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd94:	4804      	ldr	r0, [pc, #16]	; (800bda8 <McpsConfirm+0x60>)
 800bd96:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	f000 f9de 	bl	800c15c <LmHandlerPackagesNotify>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	200000a4 	.word	0x200000a4
 800bdac:	200004f4 	.word	0x200004f4

0800bdb0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800bdbe:	4b31      	ldr	r3, [pc, #196]	; (800be84 <McpsIndication+0xd4>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	785a      	ldrb	r2, [r3, #1]
 800bdc8:	4b2e      	ldr	r3, [pc, #184]	; (800be84 <McpsIndication+0xd4>)
 800bdca:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800bdcc:	4b2d      	ldr	r3, [pc, #180]	; (800be84 <McpsIndication+0xd4>)
 800bdce:	785b      	ldrb	r3, [r3, #1]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d153      	bne.n	800be7c <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	791b      	ldrb	r3, [r3, #4]
 800bdd8:	b25a      	sxtb	r2, r3
 800bdda:	4b2a      	ldr	r3, [pc, #168]	; (800be84 <McpsIndication+0xd4>)
 800bddc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bde4:	b25a      	sxtb	r2, r3
 800bde6:	4b27      	ldr	r3, [pc, #156]	; (800be84 <McpsIndication+0xd4>)
 800bde8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bdf0:	4b24      	ldr	r3, [pc, #144]	; (800be84 <McpsIndication+0xd4>)
 800bdf2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	78da      	ldrb	r2, [r3, #3]
 800bdf8:	4b22      	ldr	r3, [pc, #136]	; (800be84 <McpsIndication+0xd4>)
 800bdfa:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	4a20      	ldr	r2, [pc, #128]	; (800be84 <McpsIndication+0xd4>)
 800be02:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	78db      	ldrb	r3, [r3, #3]
 800be08:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7b1b      	ldrb	r3, [r3, #12]
 800be0e:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800be16:	4b1c      	ldr	r3, [pc, #112]	; (800be88 <McpsIndication+0xd8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	f107 0218 	add.w	r2, r7, #24
 800be20:	4918      	ldr	r1, [pc, #96]	; (800be84 <McpsIndication+0xd4>)
 800be22:	4610      	mov	r0, r2
 800be24:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800be26:	4b18      	ldr	r3, [pc, #96]	; (800be88 <McpsIndication+0xd8>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d007      	beq.n	800be40 <McpsIndication+0x90>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7e1b      	ldrb	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800be38:	4b13      	ldr	r3, [pc, #76]	; (800be88 <McpsIndication+0xd8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	2001      	movs	r0, #1
 800be44:	f000 f98a 	bl	800c15c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800be48:	f107 0317 	add.w	r3, r7, #23
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff ff1b 	bl	800bc88 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	795b      	ldrb	r3, [r3, #5]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d111      	bne.n	800be7e <McpsIndication+0xce>
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10e      	bne.n	800be7e <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800be60:	2300      	movs	r3, #0
 800be62:	733b      	strb	r3, [r7, #12]
 800be64:	2300      	movs	r3, #0
 800be66:	737b      	strb	r3, [r7, #13]
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800be6c:	f107 030c 	add.w	r3, r7, #12
 800be70:	2201      	movs	r2, #1
 800be72:	2100      	movs	r1, #0
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff fd7d 	bl	800b974 <LmHandlerSend>
 800be7a:	e000      	b.n	800be7e <McpsIndication+0xce>
        return;
 800be7c:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	200000c0 	.word	0x200000c0
 800be88:	200004f4 	.word	0x200004f4

0800be8c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08c      	sub	sp, #48	; 0x30
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800be94:	4b3d      	ldr	r3, [pc, #244]	; (800bf8c <MlmeConfirm+0x100>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	785a      	ldrb	r2, [r3, #1]
 800be9e:	4b3b      	ldr	r3, [pc, #236]	; (800bf8c <MlmeConfirm+0x100>)
 800bea0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800bea2:	4b3b      	ldr	r3, [pc, #236]	; (800bf90 <MlmeConfirm+0x104>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea8:	4838      	ldr	r0, [pc, #224]	; (800bf8c <MlmeConfirm+0x100>)
 800beaa:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	2002      	movs	r0, #2
 800beb0:	f000 f954 	bl	800c15c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	3b01      	subs	r3, #1
 800beba:	2b0c      	cmp	r3, #12
 800bebc:	d85e      	bhi.n	800bf7c <MlmeConfirm+0xf0>
 800bebe:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <MlmeConfirm+0x38>)
 800bec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec4:	0800bef9 	.word	0x0800bef9
 800bec8:	0800bf7d 	.word	0x0800bf7d
 800becc:	0800bf7d 	.word	0x0800bf7d
 800bed0:	0800bf4b 	.word	0x0800bf4b
 800bed4:	0800bf7d 	.word	0x0800bf7d
 800bed8:	0800bf7d 	.word	0x0800bf7d
 800bedc:	0800bf7d 	.word	0x0800bf7d
 800bee0:	0800bf7d 	.word	0x0800bf7d
 800bee4:	0800bf7d 	.word	0x0800bf7d
 800bee8:	0800bf7d 	.word	0x0800bf7d
 800beec:	0800bf7d 	.word	0x0800bf7d
 800bef0:	0800bf63 	.word	0x0800bf63
 800bef4:	0800bf7d 	.word	0x0800bf7d
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800bef8:	2306      	movs	r3, #6
 800befa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800befc:	f107 030c 	add.w	r3, r7, #12
 800bf00:	4618      	mov	r0, r3
 800bf02:	f004 fae9 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	4a22      	ldr	r2, [pc, #136]	; (800bf94 <MlmeConfirm+0x108>)
 800bf0a:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800bf0c:	4822      	ldr	r0, [pc, #136]	; (800bf98 <MlmeConfirm+0x10c>)
 800bf0e:	f7ff fedb 	bl	800bcc8 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	785b      	ldrb	r3, [r3, #1]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d108      	bne.n	800bf2c <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800bf1a:	4b20      	ldr	r3, [pc, #128]	; (800bf9c <MlmeConfirm+0x110>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800bf20:	4b1f      	ldr	r3, [pc, #124]	; (800bfa0 <MlmeConfirm+0x114>)
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff fe25 	bl	800bb74 <LmHandlerRequestClass>
 800bf2a:	e002      	b.n	800bf32 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800bf2c:	4b1b      	ldr	r3, [pc, #108]	; (800bf9c <MlmeConfirm+0x110>)
 800bf2e:	22ff      	movs	r2, #255	; 0xff
 800bf30:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bf32:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <MlmeConfirm+0x104>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf38:	4818      	ldr	r0, [pc, #96]	; (800bf9c <MlmeConfirm+0x110>)
 800bf3a:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	785b      	ldrb	r3, [r3, #1]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d11d      	bne.n	800bf80 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800bf44:	f7ff f89e 	bl	800b084 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800bf48:	e01a      	b.n	800bf80 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800bf4a:	4b16      	ldr	r3, [pc, #88]	; (800bfa4 <MlmeConfirm+0x118>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7a1a      	ldrb	r2, [r3, #8]
 800bf54:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <MlmeConfirm+0x118>)
 800bf56:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	7a5a      	ldrb	r2, [r3, #9]
 800bf5c:	4b11      	ldr	r3, [pc, #68]	; (800bfa4 <MlmeConfirm+0x118>)
 800bf5e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800bf60:	e00f      	b.n	800bf82 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	785b      	ldrb	r3, [r3, #1]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d105      	bne.n	800bf76 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <MlmeConfirm+0x114>)
 800bf6c:	7b1b      	ldrb	r3, [r3, #12]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff fdf4 	bl	800bb5c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800bf74:	e005      	b.n	800bf82 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800bf76:	f7ff fdd5 	bl	800bb24 <LmHandlerDeviceTimeReq>
        break;
 800bf7a:	e002      	b.n	800bf82 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800bf7c:	bf00      	nop
 800bf7e:	e000      	b.n	800bf82 <MlmeConfirm+0xf6>
        break;
 800bf80:	bf00      	nop
    }
}
 800bf82:	bf00      	nop
 800bf84:	3730      	adds	r7, #48	; 0x30
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200000a4 	.word	0x200000a4
 800bf90:	200004f4 	.word	0x200004f4
 800bf94:	20000078 	.word	0x20000078
 800bf98:	200000a0 	.word	0x200000a0
 800bf9c:	2000009c 	.word	0x2000009c
 800bfa0:	200004e0 	.word	0x200004e0
 800bfa4:	200000c0 	.word	0x200000c0

0800bfa8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800bfb2:	4b2f      	ldr	r3, [pc, #188]	; (800c070 <MlmeIndication+0xc8>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	785a      	ldrb	r2, [r3, #1]
 800bfbc:	4b2c      	ldr	r3, [pc, #176]	; (800c070 <MlmeIndication+0xc8>)
 800bfbe:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	789b      	ldrb	r3, [r3, #2]
 800bfc4:	b25a      	sxtb	r2, r3
 800bfc6:	4b2a      	ldr	r3, [pc, #168]	; (800c070 <MlmeIndication+0xc8>)
 800bfc8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfd0:	b25a      	sxtb	r2, r3
 800bfd2:	4b27      	ldr	r3, [pc, #156]	; (800c070 <MlmeIndication+0xc8>)
 800bfd4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bfdc:	4b24      	ldr	r3, [pc, #144]	; (800c070 <MlmeIndication+0xc8>)
 800bfde:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	78da      	ldrb	r2, [r3, #3]
 800bfe4:	4b22      	ldr	r3, [pc, #136]	; (800c070 <MlmeIndication+0xc8>)
 800bfe6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	4a20      	ldr	r2, [pc, #128]	; (800c070 <MlmeIndication+0xc8>)
 800bfee:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b0b      	cmp	r3, #11
 800bff6:	d009      	beq.n	800c00c <MlmeIndication+0x64>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b0f      	cmp	r3, #15
 800bffe:	d005      	beq.n	800c00c <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c000:	4b1c      	ldr	r3, [pc, #112]	; (800c074 <MlmeIndication+0xcc>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	491a      	ldr	r1, [pc, #104]	; (800c070 <MlmeIndication+0xc8>)
 800c008:	2000      	movs	r0, #0
 800c00a:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	2003      	movs	r0, #3
 800c010:	f000 f8a4 	bl	800c15c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b0f      	cmp	r3, #15
 800c01a:	d01e      	beq.n	800c05a <MlmeIndication+0xb2>
 800c01c:	2b0f      	cmp	r3, #15
 800c01e:	dc1e      	bgt.n	800c05e <MlmeIndication+0xb6>
 800c020:	2b07      	cmp	r3, #7
 800c022:	d002      	beq.n	800c02a <MlmeIndication+0x82>
 800c024:	2b0b      	cmp	r3, #11
 800c026:	d01c      	beq.n	800c062 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c028:	e019      	b.n	800c05e <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800c02a:	2300      	movs	r3, #0
 800c02c:	723b      	strb	r3, [r7, #8]
 800c02e:	2300      	movs	r3, #0
 800c030:	727b      	strb	r3, [r7, #9]
 800c032:	2300      	movs	r3, #0
 800c034:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800c036:	4b10      	ldr	r3, [pc, #64]	; (800c078 <MlmeIndication+0xd0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	4798      	blx	r3
 800c03e:	4603      	mov	r3, r0
 800c040:	f083 0301 	eor.w	r3, r3, #1
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00d      	beq.n	800c066 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800c04a:	f107 0308 	add.w	r3, r7, #8
 800c04e:	2201      	movs	r2, #1
 800c050:	2100      	movs	r1, #0
 800c052:	4618      	mov	r0, r3
 800c054:	f7ff fc8e 	bl	800b974 <LmHandlerSend>
        break;
 800c058:	e005      	b.n	800c066 <MlmeIndication+0xbe>
        break;
 800c05a:	bf00      	nop
 800c05c:	e004      	b.n	800c068 <MlmeIndication+0xc0>
        break;
 800c05e:	bf00      	nop
 800c060:	e002      	b.n	800c068 <MlmeIndication+0xc0>
        break;
 800c062:	bf00      	nop
 800c064:	e000      	b.n	800c068 <MlmeIndication+0xc0>
        break;
 800c066:	bf00      	nop
    }
}
 800c068:	bf00      	nop
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	200000c0 	.word	0x200000c0
 800c074:	200004f4 	.word	0x200004f4
 800c078:	200004cc 	.word	0x200004cc

0800c07c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	4603      	mov	r3, r0
 800c084:	6039      	str	r1, [r7, #0]
 800c086:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c08c:	79fb      	ldrb	r3, [r7, #7]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d103      	bne.n	800c09a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800c092:	f000 f9b7 	bl	800c404 <LmhpCompliancePackageFactory>
 800c096:	60f8      	str	r0, [r7, #12]
            break;
 800c098:	e000      	b.n	800c09c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800c09a:	bf00      	nop
        }
    }
    if( package != NULL )
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d02b      	beq.n	800c0fa <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	4918      	ldr	r1, [pc, #96]	; (800c108 <LmHandlerPackageRegister+0x8c>)
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
 800c0ae:	4a16      	ldr	r2, [pc, #88]	; (800c108 <LmHandlerPackageRegister+0x8c>)
 800c0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b4:	4a15      	ldr	r2, [pc, #84]	; (800c10c <LmHandlerPackageRegister+0x90>)
 800c0b6:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800c0b8:	79fb      	ldrb	r3, [r7, #7]
 800c0ba:	4a13      	ldr	r2, [pc, #76]	; (800c108 <LmHandlerPackageRegister+0x8c>)
 800c0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c0:	4a13      	ldr	r2, [pc, #76]	; (800c110 <LmHandlerPackageRegister+0x94>)
 800c0c2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	4a10      	ldr	r2, [pc, #64]	; (800c108 <LmHandlerPackageRegister+0x8c>)
 800c0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0cc:	4a11      	ldr	r2, [pc, #68]	; (800c114 <LmHandlerPackageRegister+0x98>)
 800c0ce:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c0d0:	4b11      	ldr	r3, [pc, #68]	; (800c118 <LmHandlerPackageRegister+0x9c>)
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	490c      	ldr	r1, [pc, #48]	; (800c108 <LmHandlerPackageRegister+0x8c>)
 800c0d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0dc:	6992      	ldr	r2, [r2, #24]
 800c0de:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	4a09      	ldr	r2, [pc, #36]	; (800c108 <LmHandlerPackageRegister+0x8c>)
 800c0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	4a0c      	ldr	r2, [pc, #48]	; (800c11c <LmHandlerPackageRegister+0xa0>)
 800c0ec:	6851      	ldr	r1, [r2, #4]
 800c0ee:	4a0b      	ldr	r2, [pc, #44]	; (800c11c <LmHandlerPackageRegister+0xa0>)
 800c0f0:	7852      	ldrb	r2, [r2, #1]
 800c0f2:	6838      	ldr	r0, [r7, #0]
 800c0f4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e001      	b.n	800c0fe <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c0fa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	200004cc 	.word	0x200004cc
 800c10c:	0800b83d 	.word	0x0800b83d
 800c110:	0800b975 	.word	0x0800b975
 800c114:	0800bb25 	.word	0x0800bb25
 800c118:	200004f4 	.word	0x200004f4
 800c11c:	200000d4 	.word	0x200000d4

0800c120 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	2b04      	cmp	r3, #4
 800c12e:	d80e      	bhi.n	800c14e <LmHandlerPackageIsInitialized+0x2e>
 800c130:	79fb      	ldrb	r3, [r7, #7]
 800c132:	4a09      	ldr	r2, [pc, #36]	; (800c158 <LmHandlerPackageIsInitialized+0x38>)
 800c134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	4a05      	ldr	r2, [pc, #20]	; (800c158 <LmHandlerPackageIsInitialized+0x38>)
 800c142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	4798      	blx	r3
 800c14a:	4603      	mov	r3, r0
 800c14c:	e000      	b.n	800c150 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c14e:	2300      	movs	r3, #0
    }
}
 800c150:	4618      	mov	r0, r3
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	200004cc 	.word	0x200004cc

0800c15c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]
 800c16c:	e07e      	b.n	800c26c <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800c16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c172:	4a43      	ldr	r2, [pc, #268]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d066      	beq.n	800c24a <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d865      	bhi.n	800c24e <LmHandlerPackagesNotify+0xf2>
 800c182:	a201      	add	r2, pc, #4	; (adr r2, 800c188 <LmHandlerPackagesNotify+0x2c>)
 800c184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c188:	0800c199 	.word	0x0800c199
 800c18c:	0800c1bb 	.word	0x0800c1bb
 800c190:	0800c207 	.word	0x0800c207
 800c194:	0800c229 	.word	0x0800c229
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c19c:	4a38      	ldr	r2, [pc, #224]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d054      	beq.n	800c252 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800c1a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ac:	4a34      	ldr	r2, [pc, #208]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	6838      	ldr	r0, [r7, #0]
 800c1b6:	4798      	blx	r3
                    }
                    break;
 800c1b8:	e04b      	b.n	800c252 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1be:	4a30      	ldr	r2, [pc, #192]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d045      	beq.n	800c256 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800c1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ce:	4a2c      	ldr	r2, [pc, #176]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1d4:	781a      	ldrb	r2, [r3, #0]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d00a      	beq.n	800c1f4 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800c1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d137      	bne.n	800c256 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800c1e6:	4b26      	ldr	r3, [pc, #152]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	4798      	blx	r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d030      	beq.n	800c256 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800c1f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1f8:	4a21      	ldr	r2, [pc, #132]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	6838      	ldr	r0, [r7, #0]
 800c202:	4798      	blx	r3
                    }
                    break;
 800c204:	e027      	b.n	800c256 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c20a:	4a1d      	ldr	r2, [pc, #116]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d021      	beq.n	800c25a <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800c216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c21a:	4a19      	ldr	r2, [pc, #100]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	6838      	ldr	r0, [r7, #0]
 800c224:	4798      	blx	r3
                    }
                    break;
 800c226:	e018      	b.n	800c25a <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c22c:	4a14      	ldr	r2, [pc, #80]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c234:	2b00      	cmp	r3, #0
 800c236:	d012      	beq.n	800c25e <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c23c:	4a10      	ldr	r2, [pc, #64]	; (800c280 <LmHandlerPackagesNotify+0x124>)
 800c23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c244:	6838      	ldr	r0, [r7, #0]
 800c246:	4798      	blx	r3
                    }
                    break;
 800c248:	e009      	b.n	800c25e <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800c24a:	bf00      	nop
 800c24c:	e008      	b.n	800c260 <LmHandlerPackagesNotify+0x104>
                    break;
 800c24e:	bf00      	nop
 800c250:	e006      	b.n	800c260 <LmHandlerPackagesNotify+0x104>
                    break;
 800c252:	bf00      	nop
 800c254:	e004      	b.n	800c260 <LmHandlerPackagesNotify+0x104>
                    break;
 800c256:	bf00      	nop
 800c258:	e002      	b.n	800c260 <LmHandlerPackagesNotify+0x104>
                    break;
 800c25a:	bf00      	nop
 800c25c:	e000      	b.n	800c260 <LmHandlerPackagesNotify+0x104>
                    break;
 800c25e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	3301      	adds	r3, #1
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	73fb      	strb	r3, [r7, #15]
 800c26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c270:	2b04      	cmp	r3, #4
 800c272:	f77f af7c 	ble.w	800c16e <LmHandlerPackagesNotify+0x12>
    }
}
 800c276:	bf00      	nop
 800c278:	bf00      	nop
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	200004cc 	.word	0x200004cc

0800c284 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c28a:	2300      	movs	r3, #0
 800c28c:	71fb      	strb	r3, [r7, #7]
 800c28e:	e022      	b.n	800c2d6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c294:	4a14      	ldr	r2, [pc, #80]	; (800c2e8 <LmHandlerPackagesProcess+0x64>)
 800c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d015      	beq.n	800c2ca <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2a2:	4a11      	ldr	r2, [pc, #68]	; (800c2e8 <LmHandlerPackagesProcess+0x64>)
 800c2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00d      	beq.n	800c2ca <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c2ae:	79fb      	ldrb	r3, [r7, #7]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7ff ff35 	bl	800c120 <LmHandlerPackageIsInitialized>
 800c2b6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800c2bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2c0:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <LmHandlerPackagesProcess+0x64>)
 800c2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c2ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	71fb      	strb	r3, [r7, #7]
 800c2d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	ddd8      	ble.n	800c290 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	200004cc 	.word	0x200004cc

0800c2ec <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800c2f0:	f005 f826 	bl	8011340 <LoRaMacDeInitialization>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e001      	b.n	800c302 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c2fe:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c302:	4618      	mov	r0, r3
 800c304:	bd80      	pop	{r7, pc}

0800c306 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800c30a:	f004 f825 	bl	8010358 <LoRaMacHalt>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d101      	bne.n	800c318 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c314:	2300      	movs	r3, #0
 800c316:	e001      	b.n	800c31c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c318:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08e      	sub	sp, #56	; 0x38
 800c324:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c326:	2300      	movs	r3, #0
 800c328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800c330:	f7ff ffe9 	bl	800c306 <LmHandlerHalt>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800c33a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d12f      	bne.n	800c3a2 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800c342:	f000 f84f 	bl	800c3e4 <NvmDataMgmtStoreBegin>
 800c346:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34a:	f113 0f02 	cmn.w	r3, #2
 800c34e:	d103      	bne.n	800c358 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800c350:	23f8      	movs	r3, #248	; 0xf8
 800c352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c356:	e01c      	b.n	800c392 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d104      	bne.n	800c368 <LmHandlerNvmDataStore+0x48>
 800c35e:	4b1b      	ldr	r3, [pc, #108]	; (800c3cc <LmHandlerNvmDataStore+0xac>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d103      	bne.n	800c370 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c368:	23ff      	movs	r3, #255	; 0xff
 800c36a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c36e:	e010      	b.n	800c392 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800c370:	2326      	movs	r3, #38	; 0x26
 800c372:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800c374:	1d3b      	adds	r3, r7, #4
 800c376:	4618      	mov	r0, r3
 800c378:	f004 f8ae 	bl	80104d8 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800c380:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800c384:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800c386:	4b11      	ldr	r3, [pc, #68]	; (800c3cc <LmHandlerNvmDataStore+0xac>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c38e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c390:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800c392:	f000 f82f 	bl	800c3f4 <NvmDataMgmtStoreEnd>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c39c:	23ff      	movs	r3, #255	; 0xff
 800c39e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800c3a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d109      	bne.n	800c3be <LmHandlerNvmDataStore+0x9e>
 800c3aa:	4b08      	ldr	r3, [pc, #32]	; (800c3cc <LmHandlerNvmDataStore+0xac>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	69db      	ldr	r3, [r3, #28]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d004      	beq.n	800c3be <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <LmHandlerNvmDataStore+0xac>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	4798      	blx	r3
    }

    return lmhStatus;
 800c3be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3738      	adds	r7, #56	; 0x38
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200004f4 	.word	0x200004f4

0800c3d0 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bc80      	pop	{r7}
 800c3e2:	4770      	bx	lr

0800c3e4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800c3e8:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bc80      	pop	{r7}
 800c3f2:	4770      	bx	lr

0800c3f4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800c3f8:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bc80      	pop	{r7}
 800c402:	4770      	bx	lr

0800c404 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c408:	4b02      	ldr	r3, [pc, #8]	; (800c414 <LmhpCompliancePackageFactory+0x10>)
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bc80      	pop	{r7}
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	200000dc 	.word	0x200000dc

0800c418 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4613      	mov	r3, r2
 800c424:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00f      	beq.n	800c44c <LmhpComplianceInit+0x34>
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800c432:	4a0c      	ldr	r2, [pc, #48]	; (800c464 <LmhpComplianceInit+0x4c>)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c438:	4a0b      	ldr	r2, [pc, #44]	; (800c468 <LmhpComplianceInit+0x50>)
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c43e:	4a0a      	ldr	r2, [pc, #40]	; (800c468 <LmhpComplianceInit+0x50>)
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c444:	4b08      	ldr	r3, [pc, #32]	; (800c468 <LmhpComplianceInit+0x50>)
 800c446:	2201      	movs	r2, #1
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	e006      	b.n	800c45a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c44c:	4b05      	ldr	r3, [pc, #20]	; (800c464 <LmhpComplianceInit+0x4c>)
 800c44e:	2200      	movs	r2, #0
 800c450:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <LmhpComplianceInit+0x50>)
 800c454:	2200      	movs	r2, #0
 800c456:	701a      	strb	r2, [r3, #0]
    }
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	bc80      	pop	{r7}
 800c462:	4770      	bx	lr
 800c464:	20000640 	.word	0x20000640
 800c468:	2000062c 	.word	0x2000062c

0800c46c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c470:	4b02      	ldr	r3, [pc, #8]	; (800c47c <LmhpComplianceIsInitialized+0x10>)
 800c472:	781b      	ldrb	r3, [r3, #0]
}
 800c474:	4618      	mov	r0, r3
 800c476:	46bd      	mov	sp, r7
 800c478:	bc80      	pop	{r7}
 800c47a:	4770      	bx	lr
 800c47c:	2000062c 	.word	0x2000062c

0800c480 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <LmhpComplianceIsRunning+0x24>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	f083 0301 	eor.w	r3, r3, #1
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c492:	2300      	movs	r3, #0
 800c494:	e001      	b.n	800c49a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c496:	4b03      	ldr	r3, [pc, #12]	; (800c4a4 <LmhpComplianceIsRunning+0x24>)
 800c498:	785b      	ldrb	r3, [r3, #1]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bc80      	pop	{r7}
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	2000062c 	.word	0x2000062c

0800c4a8 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	f083 0301 	eor.w	r3, r3, #1
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d112      	bne.n	800c4e4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c4be:	4b0c      	ldr	r3, [pc, #48]	; (800c4f0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00f      	beq.n	800c4e6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d10b      	bne.n	800c4e6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c4d6:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c4d8:	899b      	ldrh	r3, [r3, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	4b04      	ldr	r3, [pc, #16]	; (800c4f0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c4e0:	819a      	strh	r2, [r3, #12]
 800c4e2:	e000      	b.n	800c4e6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c4e4:	bf00      	nop
    }
}
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bc80      	pop	{r7}
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	2000062c 	.word	0x2000062c

0800c4f4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c4fc:	4b12      	ldr	r3, [pc, #72]	; (800c548 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	f083 0301 	eor.w	r3, r3, #1
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d116      	bne.n	800c538 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c50a:	4b0f      	ldr	r3, [pc, #60]	; (800c548 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c50c:	785b      	ldrb	r3, [r3, #1]
 800c50e:	f083 0301 	eor.w	r3, r3, #1
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d111      	bne.n	800c53c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b04      	cmp	r3, #4
 800c51e:	d10e      	bne.n	800c53e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c520:	4b09      	ldr	r3, [pc, #36]	; (800c548 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c522:	2201      	movs	r2, #1
 800c524:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7a1a      	ldrb	r2, [r3, #8]
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c52c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7a5a      	ldrb	r2, [r3, #9]
 800c532:	4b05      	ldr	r3, [pc, #20]	; (800c548 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c534:	741a      	strb	r2, [r3, #16]
 800c536:	e002      	b.n	800c53e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c538:	bf00      	nop
 800c53a:	e000      	b.n	800c53e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c53c:	bf00      	nop
    }
}
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	bc80      	pop	{r7}
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	2000062c 	.word	0x2000062c

0800c54c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c552:	4b33      	ldr	r3, [pc, #204]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	f083 0301 	eor.w	r3, r3, #1
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c560:	f04f 33ff 	mov.w	r3, #4294967295
 800c564:	e057      	b.n	800c616 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800c566:	4b2e      	ldr	r3, [pc, #184]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c568:	785b      	ldrb	r3, [r3, #1]
 800c56a:	f083 0301 	eor.w	r3, r3, #1
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c574:	2300      	movs	r3, #0
 800c576:	e04e      	b.n	800c616 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c578:	4b29      	ldr	r3, [pc, #164]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c57a:	7b9b      	ldrb	r3, [r3, #14]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d019      	beq.n	800c5b4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c580:	4b27      	ldr	r3, [pc, #156]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c582:	2200      	movs	r2, #0
 800c584:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c586:	4b26      	ldr	r3, [pc, #152]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c588:	2203      	movs	r2, #3
 800c58a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c58c:	4b24      	ldr	r3, [pc, #144]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2205      	movs	r2, #5
 800c592:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c594:	4b22      	ldr	r3, [pc, #136]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	3301      	adds	r3, #1
 800c59a:	4a21      	ldr	r2, [pc, #132]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c59c:	7bd2      	ldrb	r2, [r2, #15]
 800c59e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c5a0:	4b1f      	ldr	r3, [pc, #124]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	3302      	adds	r3, #2
 800c5a6:	4a1e      	ldr	r2, [pc, #120]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5a8:	7c12      	ldrb	r2, [r2, #16]
 800c5aa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c5ac:	4b1c      	ldr	r3, [pc, #112]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	709a      	strb	r2, [r3, #2]
 800c5b2:	e01c      	b.n	800c5ee <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c5b4:	4b1a      	ldr	r3, [pc, #104]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5b6:	789b      	ldrb	r3, [r3, #2]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d005      	beq.n	800c5c8 <LmhpComplianceTxProcess+0x7c>
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d116      	bne.n	800c5ee <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800c5c0:	4b17      	ldr	r3, [pc, #92]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	709a      	strb	r2, [r3, #2]
            break;
 800c5c6:	e012      	b.n	800c5ee <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800c5c8:	4b15      	ldr	r3, [pc, #84]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c5ce:	4b14      	ldr	r3, [pc, #80]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5d0:	899b      	ldrh	r3, [r3, #12]
 800c5d2:	0a1b      	lsrs	r3, r3, #8
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	4b12      	ldr	r3, [pc, #72]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c5de:	4b10      	ldr	r3, [pc, #64]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5e0:	899a      	ldrh	r2, [r3, #12]
 800c5e2:	4b0f      	ldr	r3, [pc, #60]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b2d2      	uxtb	r2, r2
 800c5ea:	701a      	strb	r2, [r3, #0]
            break;
 800c5ec:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c5ee:	23e0      	movs	r3, #224	; 0xe0
 800c5f0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c5f2:	4b0b      	ldr	r3, [pc, #44]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5f4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c5f6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c5f8:	4b09      	ldr	r3, [pc, #36]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c5fa:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c5fc:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800c5fe:	4809      	ldr	r0, [pc, #36]	; (800c624 <LmhpComplianceTxProcess+0xd8>)
 800c600:	f00d fb32 	bl	8019c68 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800c604:	4b08      	ldr	r3, [pc, #32]	; (800c628 <LmhpComplianceTxProcess+0xdc>)
 800c606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c608:	4a05      	ldr	r2, [pc, #20]	; (800c620 <LmhpComplianceTxProcess+0xd4>)
 800c60a:	78d2      	ldrb	r2, [r2, #3]
 800c60c:	4611      	mov	r1, r2
 800c60e:	4638      	mov	r0, r7
 800c610:	2201      	movs	r2, #1
 800c612:	4798      	blx	r3
 800c614:	4603      	mov	r3, r0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	2000062c 	.word	0x2000062c
 800c624:	20000614 	.word	0x20000614
 800c628:	200000dc 	.word	0x200000dc

0800c62c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b0a2      	sub	sp, #136	; 0x88
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c634:	4ba3      	ldr	r3, [pc, #652]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	f083 0301 	eor.w	r3, r3, #1
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f040 81c2 	bne.w	800c9c8 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	7b5b      	ldrb	r3, [r3, #13]
 800c648:	f083 0301 	eor.w	r3, r3, #1
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f040 81bc 	bne.w	800c9cc <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c654:	4b9b      	ldr	r3, [pc, #620]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c656:	785b      	ldrb	r3, [r3, #1]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00c      	beq.n	800c676 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7b9b      	ldrb	r3, [r3, #14]
 800c660:	f083 0301 	eor.w	r3, r3, #1
 800c664:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800c666:	2b00      	cmp	r3, #0
 800c668:	d005      	beq.n	800c676 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c66a:	4b96      	ldr	r3, [pc, #600]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c66c:	899b      	ldrh	r3, [r3, #12]
 800c66e:	3301      	adds	r3, #1
 800c670:	b29a      	uxth	r2, r3
 800c672:	4b94      	ldr	r3, [pc, #592]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c674:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	78db      	ldrb	r3, [r3, #3]
 800c67a:	2be0      	cmp	r3, #224	; 0xe0
 800c67c:	f040 81a8 	bne.w	800c9d0 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c680:	4b90      	ldr	r3, [pc, #576]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c682:	785b      	ldrb	r3, [r3, #1]
 800c684:	f083 0301 	eor.w	r3, r3, #1
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d060      	beq.n	800c750 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	7b1b      	ldrb	r3, [r3, #12]
 800c692:	2b04      	cmp	r3, #4
 800c694:	f040 81a1 	bne.w	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	f040 819b 	bne.w	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	f040 8194 	bne.w	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	f040 818d 	bne.w	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	3303      	adds	r3, #3
 800c6c6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	f040 8186 	bne.w	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800c6ce:	4b7d      	ldr	r3, [pc, #500]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800c6d4:	4b7b      	ldr	r3, [pc, #492]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6d6:	22e0      	movs	r2, #224	; 0xe0
 800c6d8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800c6da:	4b7a      	ldr	r3, [pc, #488]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6dc:	2202      	movs	r2, #2
 800c6de:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800c6e0:	4b78      	ldr	r3, [pc, #480]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800c6e6:	4b77      	ldr	r3, [pc, #476]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800c6ec:	4b75      	ldr	r3, [pc, #468]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800c6f2:	4b74      	ldr	r3, [pc, #464]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800c6f8:	4b72      	ldr	r3, [pc, #456]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800c6fe:	4b71      	ldr	r3, [pc, #452]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c700:	2201      	movs	r2, #1
 800c702:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800c704:	2304      	movs	r3, #4
 800c706:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800c708:	2301      	movs	r3, #1
 800c70a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c70c:	f107 0308 	add.w	r3, r7, #8
 800c710:	4618      	mov	r0, r3
 800c712:	f004 f867 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800c716:	2000      	movs	r0, #0
 800c718:	f004 fdf4 	bl	8011304 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800c71c:	4b6a      	ldr	r3, [pc, #424]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800c726:	4b68      	ldr	r3, [pc, #416]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800c72e:	2300      	movs	r3, #0
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	4b66      	ldr	r3, [pc, #408]	; (800c8cc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c734:	2200      	movs	r2, #0
 800c736:	f04f 31ff 	mov.w	r1, #4294967295
 800c73a:	4865      	ldr	r0, [pc, #404]	; (800c8d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c73c:	f00d fa5e 	bl	8019bfc <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800c740:	f241 3188 	movw	r1, #5000	; 0x1388
 800c744:	4862      	ldr	r0, [pc, #392]	; (800c8d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c746:	f00d fb6d 	bl	8019e24 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800c74a:	f7ff feff 	bl	800c54c <LmhpComplianceTxProcess>
 800c74e:	e144      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	781a      	ldrb	r2, [r3, #0]
 800c756:	4b5b      	ldr	r3, [pc, #364]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c758:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800c75a:	4b5a      	ldr	r3, [pc, #360]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c75c:	789b      	ldrb	r3, [r3, #2]
 800c75e:	2b0a      	cmp	r3, #10
 800c760:	f200 8138 	bhi.w	800c9d4 <LmhpComplianceOnMcpsIndication+0x3a8>
 800c764:	a201      	add	r2, pc, #4	; (adr r2, 800c76c <LmhpComplianceOnMcpsIndication+0x140>)
 800c766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76a:	bf00      	nop
 800c76c:	0800c799 	.word	0x0800c799
 800c770:	0800c7e3 	.word	0x0800c7e3
 800c774:	0800c7eb 	.word	0x0800c7eb
 800c778:	0800c7f9 	.word	0x0800c7f9
 800c77c:	0800c807 	.word	0x0800c807
 800c780:	0800c85f 	.word	0x0800c85f
 800c784:	0800c871 	.word	0x0800c871
 800c788:	0800c8d9 	.word	0x0800c8d9
 800c78c:	0800c981 	.word	0x0800c981
 800c790:	0800c993 	.word	0x0800c993
 800c794:	0800c9ad 	.word	0x0800c9ad
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800c798:	484d      	ldr	r0, [pc, #308]	; (800c8d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c79a:	f00d fad3 	bl	8019d44 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c79e:	4b49      	ldr	r3, [pc, #292]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c7a4:	4b47      	ldr	r3, [pc, #284]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800c7aa:	2304      	movs	r3, #4
 800c7ac:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c7ae:	4b46      	ldr	r3, [pc, #280]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c7b6:	f107 0308 	add.w	r3, r7, #8
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f004 f812 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c7c0:	4b41      	ldr	r3, [pc, #260]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f004 fd9c 	bl	8011304 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c7cc:	4b3e      	ldr	r3, [pc, #248]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 8100 	beq.w	800c9d8 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c7d8:	4b3b      	ldr	r3, [pc, #236]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	4798      	blx	r3
                }
            }
            break;
 800c7e0:	e0fa      	b.n	800c9d8 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800c7e2:	4b38      	ldr	r3, [pc, #224]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	719a      	strb	r2, [r3, #6]
            break;
 800c7e8:	e0f7      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800c7ea:	4b36      	ldr	r3, [pc, #216]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c7f0:	4b34      	ldr	r3, [pc, #208]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	709a      	strb	r2, [r3, #2]
            break;
 800c7f6:	e0f0      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800c7f8:	4b32      	ldr	r3, [pc, #200]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c7fe:	4b31      	ldr	r3, [pc, #196]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c800:	2201      	movs	r2, #1
 800c802:	709a      	strb	r2, [r3, #2]
            break;
 800c804:	e0e9      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7b1a      	ldrb	r2, [r3, #12]
 800c80a:	4b2e      	ldr	r3, [pc, #184]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c80c:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800c80e:	4b2d      	ldr	r3, [pc, #180]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	2204      	movs	r2, #4
 800c814:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c816:	2301      	movs	r3, #1
 800c818:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c81c:	e012      	b.n	800c844 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c826:	4413      	add	r3, r2
 800c828:	781a      	ldrb	r2, [r3, #0]
 800c82a:	4b26      	ldr	r3, [pc, #152]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c82c:	6899      	ldr	r1, [r3, #8]
 800c82e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c832:	440b      	add	r3, r1
 800c834:	3201      	adds	r2, #1
 800c836:	b2d2      	uxtb	r2, r2
 800c838:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c83a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c83e:	3301      	adds	r3, #1
 800c840:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c844:	4b1f      	ldr	r3, [pc, #124]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c846:	795a      	ldrb	r2, [r3, #5]
 800c848:	4b1e      	ldr	r3, [pc, #120]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c84a:	799b      	ldrb	r3, [r3, #6]
 800c84c:	4293      	cmp	r3, r2
 800c84e:	bf28      	it	cs
 800c850:	4613      	movcs	r3, r2
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800c858:	429a      	cmp	r2, r3
 800c85a:	d3e0      	bcc.n	800c81e <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800c85c:	e0bd      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800c85e:	2304      	movs	r3, #4
 800c860:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800c864:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c868:	4618      	mov	r0, r3
 800c86a:	f004 fb15 	bl	8010e98 <LoRaMacMlmeRequest>
            }
            break;
 800c86e:	e0b4      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800c870:	4817      	ldr	r0, [pc, #92]	; (800c8d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c872:	f00d fa67 	bl	8019d44 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c876:	4b13      	ldr	r3, [pc, #76]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c878:	2200      	movs	r2, #0
 800c87a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c87c:	4b11      	ldr	r3, [pc, #68]	; (800c8c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800c87e:	2200      	movs	r2, #0
 800c880:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800c882:	2304      	movs	r3, #4
 800c884:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c886:	4b10      	ldr	r3, [pc, #64]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c88e:	f107 0308 	add.w	r3, r7, #8
 800c892:	4618      	mov	r0, r3
 800c894:	f003 ffa6 	bl	80107e4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c898:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	785b      	ldrb	r3, [r3, #1]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f004 fd30 	bl	8011304 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c8a4:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c8ae:	4b06      	ldr	r3, [pc, #24]	; (800c8c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800c8b6:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800c8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	2002      	movs	r0, #2
 800c8be:	4798      	blx	r3
            }
            break;
 800c8c0:	e08b      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
 800c8c2:	bf00      	nop
 800c8c4:	2000062c 	.word	0x2000062c
 800c8c8:	20000640 	.word	0x20000640
 800c8cc:	0800c9f1 	.word	0x0800c9f1
 800c8d0:	20000614 	.word	0x20000614
 800c8d4:	200000dc 	.word	0x200000dc
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7b1b      	ldrb	r3, [r3, #12]
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d113      	bne.n	800c908 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800c8e0:	2305      	movs	r3, #5
 800c8e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	b21a      	sxth	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	3302      	adds	r3, #2
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	b21b      	sxth	r3, r3
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	b21b      	sxth	r3, r3
 800c900:	b29b      	uxth	r3, r3
 800c902:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800c906:	e032      	b.n	800c96e <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7b1b      	ldrb	r3, [r3, #12]
 800c90c:	2b07      	cmp	r3, #7
 800c90e:	d12e      	bne.n	800c96e <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800c910:	2306      	movs	r3, #6
 800c912:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	3301      	adds	r3, #1
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	b21a      	sxth	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	3302      	adds	r3, #2
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b21b      	sxth	r3, r3
 800c92c:	4313      	orrs	r3, r2
 800c92e:	b21b      	sxth	r3, r3
 800c930:	b29b      	uxth	r3, r3
 800c932:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	3303      	adds	r3, #3
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	041a      	lsls	r2, r3, #16
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	3304      	adds	r3, #4
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	021b      	lsls	r3, r3, #8
 800c94a:	4313      	orrs	r3, r2
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	6892      	ldr	r2, [r2, #8]
 800c950:	3205      	adds	r2, #5
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	4313      	orrs	r3, r2
 800c956:	461a      	mov	r2, r3
 800c958:	2364      	movs	r3, #100	; 0x64
 800c95a:	fb02 f303 	mul.w	r3, r2, r3
 800c95e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	3306      	adds	r3, #6
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	b25b      	sxtb	r3, r3
 800c96a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800c96e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c972:	4618      	mov	r0, r3
 800c974:	f004 fa90 	bl	8010e98 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800c978:	4b19      	ldr	r3, [pc, #100]	; (800c9e0 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	709a      	strb	r2, [r3, #2]
            }
            break;
 800c97e:	e02c      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800c980:	230a      	movs	r3, #10
 800c982:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800c986:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c98a:	4618      	mov	r0, r3
 800c98c:	f004 fa84 	bl	8010e98 <LoRaMacMlmeRequest>
            }
            break;
 800c990:	e023      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800c992:	2300      	movs	r3, #0
 800c994:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	3301      	adds	r3, #1
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c9a0:	f107 0308 	add.w	r3, r7, #8
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f003 ff1d 	bl	80107e4 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800c9aa:	e016      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800c9ac:	230d      	movs	r3, #13
 800c9ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	785b      	ldrb	r3, [r3, #1]
 800c9b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800c9bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f004 fa69 	bl	8010e98 <LoRaMacMlmeRequest>
            }
            break;
 800c9c6:	e008      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800c9c8:	bf00      	nop
 800c9ca:	e006      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800c9cc:	bf00      	nop
 800c9ce:	e004      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800c9d0:	bf00      	nop
 800c9d2:	e002      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800c9d4:	bf00      	nop
 800c9d6:	e000      	b.n	800c9da <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800c9d8:	bf00      	nop
        }
    }
}
 800c9da:	3780      	adds	r7, #128	; 0x80
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	2000062c 	.word	0x2000062c

0800c9e4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800c9e8:	bf00      	nop
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bc80      	pop	{r7}
 800c9ee:	4770      	bx	lr

0800c9f0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800c9f8:	f7ff fda8 	bl	800c54c <LmhpComplianceTxProcess>
}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800ca04:	b590      	push	{r4, r7, lr}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ca0a:	f00d fab5 	bl	8019f78 <UTIL_TIMER_GetCurrentTime>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	4a16      	ldr	r2, [pc, #88]	; (800ca6c <OnRadioTxDone+0x68>)
 800ca12:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ca14:	4c16      	ldr	r4, [pc, #88]	; (800ca70 <OnRadioTxDone+0x6c>)
 800ca16:	463b      	mov	r3, r7
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f00c fc27 	bl	801926c <SysTimeGet>
 800ca1e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800ca22:	463a      	mov	r2, r7
 800ca24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca28:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ca2c:	4a11      	ldr	r2, [pc, #68]	; (800ca74 <OnRadioTxDone+0x70>)
 800ca2e:	7813      	ldrb	r3, [r2, #0]
 800ca30:	f043 0310 	orr.w	r3, r3, #16
 800ca34:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ca36:	4b0e      	ldr	r3, [pc, #56]	; (800ca70 <OnRadioTxDone+0x6c>)
 800ca38:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00a      	beq.n	800ca56 <OnRadioTxDone+0x52>
 800ca40:	4b0b      	ldr	r3, [pc, #44]	; (800ca70 <OnRadioTxDone+0x6c>)
 800ca42:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d004      	beq.n	800ca56 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ca4c:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <OnRadioTxDone+0x6c>)
 800ca4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ca56:	4b08      	ldr	r3, [pc, #32]	; (800ca78 <OnRadioTxDone+0x74>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	2002      	movs	r0, #2
 800ca5e:	f00d fb7b 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
}
 800ca62:	bf00      	nop
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd90      	pop	{r4, r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	200019a4 	.word	0x200019a4
 800ca70:	20000644 	.word	0x20000644
 800ca74:	200019a0 	.word	0x200019a0
 800ca78:	0801b3bc 	.word	0x0801b3bc

0800ca7c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	4608      	mov	r0, r1
 800ca86:	4611      	mov	r1, r2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	817b      	strh	r3, [r7, #10]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	813b      	strh	r3, [r7, #8]
 800ca92:	4613      	mov	r3, r2
 800ca94:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ca96:	f00d fa6f 	bl	8019f78 <UTIL_TIMER_GetCurrentTime>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	4a16      	ldr	r2, [pc, #88]	; (800caf8 <OnRadioRxDone+0x7c>)
 800ca9e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800caa0:	4a15      	ldr	r2, [pc, #84]	; (800caf8 <OnRadioRxDone+0x7c>)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800caa6:	4a14      	ldr	r2, [pc, #80]	; (800caf8 <OnRadioRxDone+0x7c>)
 800caa8:	897b      	ldrh	r3, [r7, #10]
 800caaa:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800caac:	4a12      	ldr	r2, [pc, #72]	; (800caf8 <OnRadioRxDone+0x7c>)
 800caae:	893b      	ldrh	r3, [r7, #8]
 800cab0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800cab2:	4a11      	ldr	r2, [pc, #68]	; (800caf8 <OnRadioRxDone+0x7c>)
 800cab4:	79fb      	ldrb	r3, [r7, #7]
 800cab6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800cab8:	4a10      	ldr	r2, [pc, #64]	; (800cafc <OnRadioRxDone+0x80>)
 800caba:	7813      	ldrb	r3, [r2, #0]
 800cabc:	f043 0308 	orr.w	r3, r3, #8
 800cac0:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cac2:	4b0f      	ldr	r3, [pc, #60]	; (800cb00 <OnRadioRxDone+0x84>)
 800cac4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00a      	beq.n	800cae2 <OnRadioRxDone+0x66>
 800cacc:	4b0c      	ldr	r3, [pc, #48]	; (800cb00 <OnRadioRxDone+0x84>)
 800cace:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cad8:	4b09      	ldr	r3, [pc, #36]	; (800cb00 <OnRadioRxDone+0x84>)
 800cada:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800cae2:	4b08      	ldr	r3, [pc, #32]	; (800cb04 <OnRadioRxDone+0x88>)
 800cae4:	2201      	movs	r2, #1
 800cae6:	2100      	movs	r1, #0
 800cae8:	2002      	movs	r0, #2
 800caea:	f00d fb35 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
}
 800caee:	bf00      	nop
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	200019a8 	.word	0x200019a8
 800cafc:	200019a0 	.word	0x200019a0
 800cb00:	20000644 	.word	0x20000644
 800cb04:	0801b3cc 	.word	0x0801b3cc

0800cb08 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800cb0c:	4a0e      	ldr	r2, [pc, #56]	; (800cb48 <OnRadioTxTimeout+0x40>)
 800cb0e:	7813      	ldrb	r3, [r2, #0]
 800cb10:	f043 0304 	orr.w	r3, r3, #4
 800cb14:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cb16:	4b0d      	ldr	r3, [pc, #52]	; (800cb4c <OnRadioTxTimeout+0x44>)
 800cb18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00a      	beq.n	800cb36 <OnRadioTxTimeout+0x2e>
 800cb20:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <OnRadioTxTimeout+0x44>)
 800cb22:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d004      	beq.n	800cb36 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cb2c:	4b07      	ldr	r3, [pc, #28]	; (800cb4c <OnRadioTxTimeout+0x44>)
 800cb2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800cb36:	4b06      	ldr	r3, [pc, #24]	; (800cb50 <OnRadioTxTimeout+0x48>)
 800cb38:	2201      	movs	r2, #1
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	2002      	movs	r0, #2
 800cb3e:	f00d fb0b 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
}
 800cb42:	bf00      	nop
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200019a0 	.word	0x200019a0
 800cb4c:	20000644 	.word	0x20000644
 800cb50:	0801b3dc 	.word	0x0801b3dc

0800cb54 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800cb58:	4a0b      	ldr	r2, [pc, #44]	; (800cb88 <OnRadioRxError+0x34>)
 800cb5a:	7813      	ldrb	r3, [r2, #0]
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cb62:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <OnRadioRxError+0x38>)
 800cb64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00a      	beq.n	800cb82 <OnRadioRxError+0x2e>
 800cb6c:	4b07      	ldr	r3, [pc, #28]	; (800cb8c <OnRadioRxError+0x38>)
 800cb6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d004      	beq.n	800cb82 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cb78:	4b04      	ldr	r3, [pc, #16]	; (800cb8c <OnRadioRxError+0x38>)
 800cb7a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	4798      	blx	r3
    }
}
 800cb82:	bf00      	nop
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	200019a0 	.word	0x200019a0
 800cb8c:	20000644 	.word	0x20000644

0800cb90 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800cb94:	4a0e      	ldr	r2, [pc, #56]	; (800cbd0 <OnRadioRxTimeout+0x40>)
 800cb96:	7813      	ldrb	r3, [r2, #0]
 800cb98:	f043 0301 	orr.w	r3, r3, #1
 800cb9c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cb9e:	4b0d      	ldr	r3, [pc, #52]	; (800cbd4 <OnRadioRxTimeout+0x44>)
 800cba0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00a      	beq.n	800cbbe <OnRadioRxTimeout+0x2e>
 800cba8:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <OnRadioRxTimeout+0x44>)
 800cbaa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cbb4:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <OnRadioRxTimeout+0x44>)
 800cbb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800cbbe:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <OnRadioRxTimeout+0x48>)
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	2002      	movs	r0, #2
 800cbc6:	f00d fac7 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
}
 800cbca:	bf00      	nop
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200019a0 	.word	0x200019a0
 800cbd4:	20000644 	.word	0x20000644
 800cbd8:	0801b3ec 	.word	0x0801b3ec

0800cbdc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cbe0:	4b08      	ldr	r3, [pc, #32]	; (800cc04 <UpdateRxSlotIdleState+0x28>)
 800cbe2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d004      	beq.n	800cbf4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800cbea:	4b07      	ldr	r3, [pc, #28]	; (800cc08 <UpdateRxSlotIdleState+0x2c>)
 800cbec:	2206      	movs	r2, #6
 800cbee:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800cbf2:	e003      	b.n	800cbfc <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cbf4:	4b04      	ldr	r3, [pc, #16]	; (800cc08 <UpdateRxSlotIdleState+0x2c>)
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800cbfc:	bf00      	nop
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bc80      	pop	{r7}
 800cc02:	4770      	bx	lr
 800cc04:	20000b50 	.word	0x20000b50
 800cc08:	20000644 	.word	0x20000644

0800cc0c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08e      	sub	sp, #56	; 0x38
 800cc10:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cc12:	4b44      	ldr	r3, [pc, #272]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800cc14:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d002      	beq.n	800cc22 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800cc1c:	4b42      	ldr	r3, [pc, #264]	; (800cd28 <ProcessRadioTxDone+0x11c>)
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800cc22:	4b42      	ldr	r3, [pc, #264]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cc24:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4841      	ldr	r0, [pc, #260]	; (800cd30 <ProcessRadioTxDone+0x124>)
 800cc2c:	f00d f8fa 	bl	8019e24 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800cc30:	483f      	ldr	r0, [pc, #252]	; (800cd30 <ProcessRadioTxDone+0x124>)
 800cc32:	f00d f819 	bl	8019c68 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800cc36:	4b3d      	ldr	r3, [pc, #244]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cc38:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	483d      	ldr	r0, [pc, #244]	; (800cd34 <ProcessRadioTxDone+0x128>)
 800cc40:	f00d f8f0 	bl	8019e24 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800cc44:	483b      	ldr	r0, [pc, #236]	; (800cd34 <ProcessRadioTxDone+0x128>)
 800cc46:	f00d f80f 	bl	8019c68 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800cc4a:	4b36      	ldr	r3, [pc, #216]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800cc4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d004      	beq.n	800cc5e <ProcessRadioTxDone+0x52>
 800cc54:	4b35      	ldr	r3, [pc, #212]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cc56:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d019      	beq.n	800cc92 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800cc5e:	2316      	movs	r3, #22
 800cc60:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cc64:	4b2f      	ldr	r3, [pc, #188]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800cc66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc6a:	f107 0220 	add.w	r2, r7, #32
 800cc6e:	4611      	mov	r1, r2
 800cc70:	4618      	mov	r0, r3
 800cc72:	f006 fc09 	bl	8013488 <RegionGetPhyParam>
 800cc76:	4603      	mov	r3, r0
 800cc78:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800cc7a:	4b2c      	ldr	r3, [pc, #176]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cc7c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	4413      	add	r3, r2
 800cc84:	4619      	mov	r1, r3
 800cc86:	482c      	ldr	r0, [pc, #176]	; (800cd38 <ProcessRadioTxDone+0x12c>)
 800cc88:	f00d f8cc 	bl	8019e24 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800cc8c:	482a      	ldr	r0, [pc, #168]	; (800cd38 <ProcessRadioTxDone+0x12c>)
 800cc8e:	f00c ffeb 	bl	8019c68 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800cc92:	4b2a      	ldr	r3, [pc, #168]	; (800cd3c <ProcessRadioTxDone+0x130>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a23      	ldr	r2, [pc, #140]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800cc98:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800cc9a:	4b24      	ldr	r3, [pc, #144]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cc9c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800cca0:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800cca2:	4b26      	ldr	r3, [pc, #152]	; (800cd3c <ProcessRadioTxDone+0x130>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ccac:	4618      	mov	r0, r3
 800ccae:	f00c fb15 	bl	80192dc <SysTimeGetMcuTime>
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	4b1b      	ldr	r3, [pc, #108]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800ccb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ccba:	9200      	str	r2, [sp, #0]
 800ccbc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ccc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ccc4:	ca06      	ldmia	r2, {r1, r2}
 800ccc6:	f00c fa6a 	bl	801919e <SysTimeSub>
 800ccca:	f107 0314 	add.w	r3, r7, #20
 800ccce:	463a      	mov	r2, r7
 800ccd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccd4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ccd8:	4b14      	ldr	r3, [pc, #80]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800ccda:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ccde:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800cce0:	2301      	movs	r3, #1
 800cce2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800cce6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ccf2:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <ProcessRadioTxDone+0x118>)
 800ccf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccf8:	f107 0208 	add.w	r2, r7, #8
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f006 fbda 	bl	80134b8 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800cd04:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cd06:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800cd0a:	f083 0301 	eor.w	r3, r3, #1
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d003      	beq.n	800cd1c <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cd14:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <ProcessRadioTxDone+0x120>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800cd1c:	bf00      	nop
 800cd1e:	3730      	adds	r7, #48	; 0x30
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20000b50 	.word	0x20000b50
 800cd28:	0801ba18 	.word	0x0801ba18
 800cd2c:	20000644 	.word	0x20000644
 800cd30:	200009c4 	.word	0x200009c4
 800cd34:	200009dc 	.word	0x200009dc
 800cd38:	20000a3c 	.word	0x20000a3c
 800cd3c:	200019a4 	.word	0x200019a4

0800cd40 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800cd44:	4b10      	ldr	r3, [pc, #64]	; (800cd88 <PrepareRxDoneAbort+0x48>)
 800cd46:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cd4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4e:	4a0e      	ldr	r2, [pc, #56]	; (800cd88 <PrepareRxDoneAbort+0x48>)
 800cd50:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <PrepareRxDoneAbort+0x48>)
 800cd56:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800cd5e:	2000      	movs	r0, #0
 800cd60:	f001 f8f2 	bl	800df48 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <PrepareRxDoneAbort+0x48>)
 800cd66:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800cd6a:	f043 0302 	orr.w	r3, r3, #2
 800cd6e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800cd72:	4a05      	ldr	r2, [pc, #20]	; (800cd88 <PrepareRxDoneAbort+0x48>)
 800cd74:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800cd78:	f043 0320 	orr.w	r3, r3, #32
 800cd7c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800cd80:	f7ff ff2c 	bl	800cbdc <UpdateRxSlotIdleState>
}
 800cd84:	bf00      	nop
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	20000644 	.word	0x20000644

0800cd8c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800cd8c:	b5b0      	push	{r4, r5, r7, lr}
 800cd8e:	b0a6      	sub	sp, #152	; 0x98
 800cd90:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800cd92:	2313      	movs	r3, #19
 800cd94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800cd98:	4bb9      	ldr	r3, [pc, #740]	; (800d080 <ProcessRadioRxDone+0x2f4>)
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800cd9e:	4bb8      	ldr	r3, [pc, #736]	; (800d080 <ProcessRadioRxDone+0x2f4>)
 800cda0:	891b      	ldrh	r3, [r3, #8]
 800cda2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800cda6:	4bb6      	ldr	r3, [pc, #728]	; (800d080 <ProcessRadioRxDone+0x2f4>)
 800cda8:	895b      	ldrh	r3, [r3, #10]
 800cdaa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800cdae:	4bb4      	ldr	r3, [pc, #720]	; (800d080 <ProcessRadioRxDone+0x2f4>)
 800cdb0:	7b1b      	ldrb	r3, [r3, #12]
 800cdb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800cdc0:	4bb0      	ldr	r3, [pc, #704]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cdc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800cdd6:	4bac      	ldr	r3, [pc, #688]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800cdde:	4aaa      	ldr	r2, [pc, #680]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cde0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cde4:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800cde8:	4aa7      	ldr	r2, [pc, #668]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cdea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cdee:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800cdf2:	4ba5      	ldr	r3, [pc, #660]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cdf4:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800cdf8:	4ba3      	ldr	r3, [pc, #652]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cdfa:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800cdfe:	4ba2      	ldr	r3, [pc, #648]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800ce06:	4ba0      	ldr	r3, [pc, #640]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800ce0e:	4b9e      	ldr	r3, [pc, #632]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800ce16:	4b9c      	ldr	r3, [pc, #624]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800ce1e:	4b9a      	ldr	r3, [pc, #616]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800ce26:	4b98      	ldr	r3, [pc, #608]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800ce2e:	4b96      	ldr	r3, [pc, #600]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ce36:	4b94      	ldr	r3, [pc, #592]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ce3e:	4b92      	ldr	r3, [pc, #584]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800ce46:	4b90      	ldr	r3, [pc, #576]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ce4e:	4b8e      	ldr	r3, [pc, #568]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ce56:	4b8d      	ldr	r3, [pc, #564]	; (800d08c <ProcessRadioRxDone+0x300>)
 800ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5a:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ce5c:	488c      	ldr	r0, [pc, #560]	; (800d090 <ProcessRadioRxDone+0x304>)
 800ce5e:	f00c ff71 	bl	8019d44 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ce62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ce66:	4619      	mov	r1, r3
 800ce68:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ce6a:	f004 fbaa 	bl	80115c2 <LoRaMacClassBRxBeacon>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00a      	beq.n	800ce8a <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ce74:	4a84      	ldr	r2, [pc, #528]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce76:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ce7a:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ce7e:	4a82      	ldr	r2, [pc, #520]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ce80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ce84:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800ce88:	e3c7      	b.n	800d61a <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ce8a:	4b7e      	ldr	r3, [pc, #504]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800ce8c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d11e      	bne.n	800ced2 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ce94:	f004 fba8 	bl	80115e8 <LoRaMacClassBIsPingExpected>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ce9e:	2000      	movs	r0, #0
 800cea0:	f004 fb59 	bl	8011556 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800cea4:	2000      	movs	r0, #0
 800cea6:	f004 fb7a 	bl	801159e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ceaa:	4b77      	ldr	r3, [pc, #476]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800ceac:	2204      	movs	r2, #4
 800ceae:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800ceb2:	e00e      	b.n	800ced2 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ceb4:	f004 fb9f 	bl	80115f6 <LoRaMacClassBIsMulticastExpected>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d009      	beq.n	800ced2 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cebe:	2000      	movs	r0, #0
 800cec0:	f004 fb53 	bl	801156a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cec4:	2000      	movs	r0, #0
 800cec6:	f004 fb73 	bl	80115b0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ceca:	4b6f      	ldr	r3, [pc, #444]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cecc:	2205      	movs	r2, #5
 800cece:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ced2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800cedc:	461a      	mov	r2, r3
 800cede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cee0:	4413      	add	r3, r2
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800cee8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ceec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	2b06      	cmp	r3, #6
 800cef6:	f200 836a 	bhi.w	800d5ce <ProcessRadioRxDone+0x842>
 800cefa:	a201      	add	r2, pc, #4	; (adr r2, 800cf00 <ProcessRadioRxDone+0x174>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cf1d 	.word	0x0800cf1d
 800cf04:	0800d5cf 	.word	0x0800d5cf
 800cf08:	0800d09d 	.word	0x0800d09d
 800cf0c:	0800d5cf 	.word	0x0800d5cf
 800cf10:	0800d095 	.word	0x0800d095
 800cf14:	0800d5cf 	.word	0x0800d5cf
 800cf18:	0800d575 	.word	0x0800d575
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800cf1c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cf20:	2b10      	cmp	r3, #16
 800cf22:	d806      	bhi.n	800cf32 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf24:	4b58      	ldr	r3, [pc, #352]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cf2c:	f7ff ff08 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800cf30:	e373      	b.n	800d61a <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800cf32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf34:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800cf36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cf3e:	4b51      	ldr	r3, [pc, #324]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cf40:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d006      	beq.n	800cf56 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf48:	4b4f      	ldr	r3, [pc, #316]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cf50:	f7ff fef6 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800cf54:	e361      	b.n	800d61a <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800cf56:	f7fe fac7 	bl	800b4e8 <SecureElementGetJoinEui>
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	f107 0308 	add.w	r3, r7, #8
 800cf60:	461a      	mov	r2, r3
 800cf62:	20ff      	movs	r0, #255	; 0xff
 800cf64:	f005 fd14 	bl	8012990 <LoRaMacCryptoHandleJoinAccept>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800cf6e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d172      	bne.n	800d05c <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800cf76:	7c7b      	ldrb	r3, [r7, #17]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4b42      	ldr	r3, [pc, #264]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cf7c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800cf80:	4b40      	ldr	r3, [pc, #256]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cf82:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cf86:	7cbb      	ldrb	r3, [r7, #18]
 800cf88:	021b      	lsls	r3, r3, #8
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	4a3d      	ldr	r2, [pc, #244]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cf8e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800cf92:	4b3c      	ldr	r3, [pc, #240]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cf94:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cf98:	7cfb      	ldrb	r3, [r7, #19]
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	4a39      	ldr	r2, [pc, #228]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfa0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	4a37      	ldr	r2, [pc, #220]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfa8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cfac:	7e3b      	ldrb	r3, [r7, #24]
 800cfae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	4b33      	ldr	r3, [pc, #204]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cfbc:	7e3b      	ldrb	r3, [r7, #24]
 800cfbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4b2f      	ldr	r3, [pc, #188]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfc8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cfcc:	7e3b      	ldrb	r3, [r7, #24]
 800cfce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	4b2b      	ldr	r3, [pc, #172]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800cfdc:	7e7b      	ldrb	r3, [r7, #25]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	4b28      	ldr	r3, [pc, #160]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfe2:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cfe4:	4b27      	ldr	r3, [pc, #156]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d102      	bne.n	800cff2 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cfec:	4b25      	ldr	r3, [pc, #148]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cfee:	2201      	movs	r2, #1
 800cff0:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cff2:	4b24      	ldr	r3, [pc, #144]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800cff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cffa:	fb02 f303 	mul.w	r3, r2, r3
 800cffe:	4a21      	ldr	r2, [pc, #132]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800d000:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d002:	4b20      	ldr	r3, [pc, #128]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800d004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d006:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d00a:	4a1e      	ldr	r2, [pc, #120]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800d00c:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d00e:	4b1d      	ldr	r3, [pc, #116]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d016:	f107 0308 	add.w	r3, r7, #8
 800d01a:	3312      	adds	r3, #18
 800d01c:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d01e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d022:	b2db      	uxtb	r3, r3
 800d024:	3b11      	subs	r3, #17
 800d026:	b2db      	uxtb	r3, r3
 800d028:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d02c:	4b15      	ldr	r3, [pc, #84]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800d02e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d032:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d036:	4611      	mov	r1, r2
 800d038:	4618      	mov	r0, r3
 800d03a:	f006 fa77 	bl	801352c <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d03e:	4b11      	ldr	r3, [pc, #68]	; (800d084 <ProcessRadioRxDone+0x2f8>)
 800d040:	2202      	movs	r2, #2
 800d042:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d046:	2001      	movs	r0, #1
 800d048:	f004 ff9a 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00e      	beq.n	800d070 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800d052:	2101      	movs	r1, #1
 800d054:	2000      	movs	r0, #0
 800d056:	f004 ff07 	bl	8011e68 <LoRaMacConfirmQueueSetStatus>
 800d05a:	e009      	b.n	800d070 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d05c:	2001      	movs	r0, #1
 800d05e:	f004 ff8f 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d003      	beq.n	800d070 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d068:	2101      	movs	r1, #1
 800d06a:	2007      	movs	r0, #7
 800d06c:	f004 fefc 	bl	8011e68 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800d070:	4a05      	ldr	r2, [pc, #20]	; (800d088 <ProcessRadioRxDone+0x2fc>)
 800d072:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d076:	f043 0308 	orr.w	r3, r3, #8
 800d07a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800d07e:	e2ad      	b.n	800d5dc <ProcessRadioRxDone+0x850>
 800d080:	200019a8 	.word	0x200019a8
 800d084:	20000b50 	.word	0x20000b50
 800d088:	20000644 	.word	0x20000644
 800d08c:	0801ba18 	.word	0x0801ba18
 800d090:	200009dc 	.word	0x200009dc
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d094:	4bb0      	ldr	r3, [pc, #704]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d096:	2201      	movs	r2, #1
 800d098:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d09c:	4baf      	ldr	r3, [pc, #700]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d09e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800d0a2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d0a6:	4bac      	ldr	r3, [pc, #688]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d0a8:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800d0ac:	b25b      	sxtb	r3, r3
 800d0ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d0b2:	230d      	movs	r3, #13
 800d0b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d0b8:	4ba8      	ldr	r3, [pc, #672]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d0ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d0c2:	230e      	movs	r3, #14
 800d0c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d0c8:	4ba4      	ldr	r3, [pc, #656]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d0ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f006 f9d7 	bl	8013488 <RegionGetPhyParam>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d0de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d0e2:	3b0d      	subs	r3, #13
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	b21b      	sxth	r3, r3
 800d0e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d0ec:	b21a      	sxth	r2, r3
 800d0ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0f0:	b21b      	sxth	r3, r3
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	dc03      	bgt.n	800d0fe <ProcessRadioRxDone+0x372>
 800d0f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d0fa:	2b0b      	cmp	r3, #11
 800d0fc:	d806      	bhi.n	800d10c <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d0fe:	4b96      	ldr	r3, [pc, #600]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d100:	2201      	movs	r2, #1
 800d102:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d106:	f7ff fe1b 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800d10a:	e286      	b.n	800d61a <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800d10c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d10e:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800d110:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d11a:	4b91      	ldr	r3, [pc, #580]	; (800d360 <ProcessRadioRxDone+0x5d4>)
 800d11c:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d11e:	23ff      	movs	r3, #255	; 0xff
 800d120:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d128:	4618      	mov	r0, r3
 800d12a:	f005 ff30 	bl	8012f8e <LoRaMacParserData>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d006      	beq.n	800d142 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d134:	4b88      	ldr	r3, [pc, #544]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d136:	2201      	movs	r2, #1
 800d138:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d13c:	f7ff fe00 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800d140:	e26b      	b.n	800d61a <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	4a84      	ldr	r2, [pc, #528]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d146:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d14a:	1cba      	adds	r2, r7, #2
 800d14c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f002 fc9e 	bl	800fa94 <DetermineFrameType>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d006      	beq.n	800d16c <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d15e:	4b7e      	ldr	r3, [pc, #504]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d160:	2201      	movs	r2, #1
 800d162:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d166:	f7ff fdeb 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800d16a:	e256      	b.n	800d61a <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d176:	2300      	movs	r3, #0
 800d178:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d17c:	e049      	b.n	800d212 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d17e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d182:	4a76      	ldr	r2, [pc, #472]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d184:	212c      	movs	r1, #44	; 0x2c
 800d186:	fb01 f303 	mul.w	r3, r1, r3
 800d18a:	4413      	add	r3, r2
 800d18c:	33dc      	adds	r3, #220	; 0xdc
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	429a      	cmp	r2, r3
 800d194:	d138      	bne.n	800d208 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d196:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d19a:	4a70      	ldr	r2, [pc, #448]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d19c:	212c      	movs	r1, #44	; 0x2c
 800d19e:	fb01 f303 	mul.w	r3, r1, r3
 800d1a2:	4413      	add	r3, r2
 800d1a4:	33da      	adds	r3, #218	; 0xda
 800d1a6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d02d      	beq.n	800d208 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d1b2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d1b6:	4a69      	ldr	r2, [pc, #420]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d1b8:	212c      	movs	r1, #44	; 0x2c
 800d1ba:	fb01 f303 	mul.w	r3, r1, r3
 800d1be:	4413      	add	r3, r2
 800d1c0:	33db      	adds	r3, #219	; 0xdb
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d1c8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d1cc:	4a63      	ldr	r2, [pc, #396]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d1ce:	212c      	movs	r1, #44	; 0x2c
 800d1d0:	fb01 f303 	mul.w	r3, r1, r3
 800d1d4:	4413      	add	r3, r2
 800d1d6:	33f8      	adds	r3, #248	; 0xf8
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d1de:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d1e2:	4a5e      	ldr	r2, [pc, #376]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d1e4:	212c      	movs	r1, #44	; 0x2c
 800d1e6:	fb01 f303 	mul.w	r3, r1, r3
 800d1ea:	4413      	add	r3, r2
 800d1ec:	33dc      	adds	r3, #220	; 0xdc
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d1f4:	4b59      	ldr	r3, [pc, #356]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d1f6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d10e      	bne.n	800d21c <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d1fe:	4b56      	ldr	r3, [pc, #344]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d200:	2203      	movs	r2, #3
 800d202:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800d206:	e009      	b.n	800d21c <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d208:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d20c:	3301      	adds	r3, #1
 800d20e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d212:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0b1      	beq.n	800d17e <ProcessRadioRxDone+0x3f2>
 800d21a:	e000      	b.n	800d21e <ProcessRadioRxDone+0x492>
                    break;
 800d21c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d21e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d222:	2b01      	cmp	r3, #1
 800d224:	d117      	bne.n	800d256 <ProcessRadioRxDone+0x4ca>
 800d226:	78bb      	ldrb	r3, [r7, #2]
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d10d      	bne.n	800d248 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d22c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800d23a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d242:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d244:	2b00      	cmp	r3, #0
 800d246:	d006      	beq.n	800d256 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d248:	4b43      	ldr	r3, [pc, #268]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d250:	f7ff fd76 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800d254:	e1e1      	b.n	800d61a <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d256:	2315      	movs	r3, #21
 800d258:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d25c:	4b3f      	ldr	r3, [pc, #252]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d25e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d262:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f006 f90d 	bl	8013488 <RegionGetPhyParam>
 800d26e:	4603      	mov	r3, r0
 800d270:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d272:	78b9      	ldrb	r1, [r7, #2]
 800d274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d276:	b29b      	uxth	r3, r3
 800d278:	4d38      	ldr	r5, [pc, #224]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d27a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d27e:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800d282:	1d3a      	adds	r2, r7, #4
 800d284:	9202      	str	r2, [sp, #8]
 800d286:	1cfa      	adds	r2, r7, #3
 800d288:	9201      	str	r2, [sp, #4]
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800d290:	4622      	mov	r2, r4
 800d292:	f000 fe8f 	bl	800dfb4 <GetFCntDown>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d29c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d035      	beq.n	800d310 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d2a4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d2a8:	2b07      	cmp	r3, #7
 800d2aa:	d119      	bne.n	800d2e0 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d2ae:	2208      	movs	r2, #8
 800d2b0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800d2b4:	4b29      	ldr	r3, [pc, #164]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d2b6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d11d      	bne.n	800d2fa <ProcessRadioRxDone+0x56e>
 800d2be:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d2c2:	f023 031f 	bic.w	r3, r3, #31
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	2ba0      	cmp	r3, #160	; 0xa0
 800d2ca:	d116      	bne.n	800d2fa <ProcessRadioRxDone+0x56e>
 800d2cc:	4b23      	ldr	r3, [pc, #140]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d111      	bne.n	800d2fa <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800d2d6:	4b21      	ldr	r3, [pc, #132]	; (800d35c <ProcessRadioRxDone+0x5d0>)
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800d2de:	e00c      	b.n	800d2fa <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800d2e0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d2e4:	2b08      	cmp	r3, #8
 800d2e6:	d104      	bne.n	800d2f2 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800d2e8:	4b1b      	ldr	r3, [pc, #108]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d2ea:	220a      	movs	r2, #10
 800d2ec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d2f0:	e003      	b.n	800d2fa <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2f2:	4b19      	ldr	r3, [pc, #100]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a16      	ldr	r2, [pc, #88]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d2fe:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a14      	ldr	r2, [pc, #80]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d306:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800d30a:	f7ff fd19 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800d30e:	e184      	b.n	800d61a <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d310:	78fa      	ldrb	r2, [r7, #3]
 800d312:	6879      	ldr	r1, [r7, #4]
 800d314:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800d318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	460b      	mov	r3, r1
 800d320:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d324:	f005 fc80 	bl	8012c28 <LoRaMacCryptoUnsecureMessage>
 800d328:	4603      	mov	r3, r0
 800d32a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d32e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d332:	2b00      	cmp	r3, #0
 800d334:	d016      	beq.n	800d364 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d336:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d104      	bne.n	800d348 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d33e:	4b06      	ldr	r3, [pc, #24]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d340:	220b      	movs	r2, #11
 800d342:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d346:	e003      	b.n	800d350 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d348:	4b03      	ldr	r3, [pc, #12]	; (800d358 <ProcessRadioRxDone+0x5cc>)
 800d34a:	220c      	movs	r2, #12
 800d34c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800d350:	f7ff fcf6 	bl	800cd40 <PrepareRxDoneAbort>
                return;
 800d354:	e161      	b.n	800d61a <ProcessRadioRxDone+0x88e>
 800d356:	bf00      	nop
 800d358:	20000644 	.word	0x20000644
 800d35c:	20000b50 	.word	0x20000b50
 800d360:	2000087c 	.word	0x2000087c
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d364:	4bae      	ldr	r3, [pc, #696]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d366:	2200      	movs	r2, #0
 800d368:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800d36c:	4aac      	ldr	r2, [pc, #688]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d36e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d372:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800d376:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d37a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	461a      	mov	r2, r3
 800d382:	4ba7      	ldr	r3, [pc, #668]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d384:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800d388:	4ba5      	ldr	r3, [pc, #660]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800d390:	4ba3      	ldr	r3, [pc, #652]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d392:	2200      	movs	r2, #0
 800d394:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4aa1      	ldr	r2, [pc, #644]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d39c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a9f      	ldr	r2, [pc, #636]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d3a4:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d3a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bf14      	ite	ne
 800d3b6:	2301      	movne	r3, #1
 800d3b8:	2300      	moveq	r3, #0
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	4b98      	ldr	r3, [pc, #608]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d3be:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d3c2:	4b97      	ldr	r3, [pc, #604]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d3ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	bf14      	ite	ne
 800d3d8:	2301      	movne	r3, #1
 800d3da:	2300      	moveq	r3, #0
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	4b90      	ldr	r3, [pc, #576]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d3e0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d3e4:	4b8e      	ldr	r3, [pc, #568]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d3e6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d3ee:	4b8c      	ldr	r3, [pc, #560]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d3f0:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d102      	bne.n	800d3fe <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d3f8:	4b8a      	ldr	r3, [pc, #552]	; (800d624 <ProcessRadioRxDone+0x898>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d3fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d402:	2b01      	cmp	r3, #1
 800d404:	d104      	bne.n	800d410 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d406:	4b86      	ldr	r3, [pc, #536]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d408:	2202      	movs	r2, #2
 800d40a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d40e:	e01f      	b.n	800d450 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d410:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d414:	f023 031f 	bic.w	r3, r3, #31
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2ba0      	cmp	r3, #160	; 0xa0
 800d41c:	d110      	bne.n	800d440 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d41e:	4b81      	ldr	r3, [pc, #516]	; (800d624 <ProcessRadioRxDone+0x898>)
 800d420:	2201      	movs	r2, #1
 800d422:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d426:	4b7f      	ldr	r3, [pc, #508]	; (800d624 <ProcessRadioRxDone+0x898>)
 800d428:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d102      	bne.n	800d436 <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d432:	4a7c      	ldr	r2, [pc, #496]	; (800d624 <ProcessRadioRxDone+0x898>)
 800d434:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d436:	4b7a      	ldr	r3, [pc, #488]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d43e:	e007      	b.n	800d450 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d440:	4b78      	ldr	r3, [pc, #480]	; (800d624 <ProcessRadioRxDone+0x898>)
 800d442:	2200      	movs	r2, #0
 800d444:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d448:	4b75      	ldr	r3, [pc, #468]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d450:	4b73      	ldr	r3, [pc, #460]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d452:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d456:	4a72      	ldr	r2, [pc, #456]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d458:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800d45c:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800d460:	4618      	mov	r0, r3
 800d462:	f001 fee9 	bl	800f238 <RemoveMacCommands>

            switch( fType )
 800d466:	78bb      	ldrb	r3, [r7, #2]
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d874      	bhi.n	800d556 <ProcessRadioRxDone+0x7ca>
 800d46c:	a201      	add	r2, pc, #4	; (adr r2, 800d474 <ProcessRadioRxDone+0x6e8>)
 800d46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d472:	bf00      	nop
 800d474:	0800d485 	.word	0x0800d485
 800d478:	0800d4d5 	.word	0x0800d4d5
 800d47c:	0800d50b 	.word	0x0800d50b
 800d480:	0800d531 	.word	0x0800d531
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d484:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d488:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	461c      	mov	r4, r3
 800d490:	4b63      	ldr	r3, [pc, #396]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d492:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d496:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d49a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d49e:	f102 0010 	add.w	r0, r2, #16
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4622      	mov	r2, r4
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	f000 fee5 	bl	800e278 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d4ae:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d4b2:	4b5b      	ldr	r3, [pc, #364]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d4b4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ba:	4a59      	ldr	r2, [pc, #356]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d4bc:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d4c0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d4c4:	4b56      	ldr	r3, [pc, #344]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d4c6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d4ca:	4b55      	ldr	r3, [pc, #340]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d4d2:	e047      	b.n	800d564 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d4d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	461c      	mov	r4, r3
 800d4e0:	4b4f      	ldr	r3, [pc, #316]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d4e2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d4e6:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d4ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d4ee:	f102 0010 	add.w	r0, r2, #16
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	f000 febd 	bl	800e278 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d4fe:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d502:	4b47      	ldr	r3, [pc, #284]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d504:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d508:	e02c      	b.n	800d564 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d50a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d50c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d510:	4b43      	ldr	r3, [pc, #268]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d512:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800d516:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	460b      	mov	r3, r1
 800d51e:	2100      	movs	r1, #0
 800d520:	f000 feaa 	bl	800e278 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d524:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d528:	4b3d      	ldr	r3, [pc, #244]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d52a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d52e:	e019      	b.n	800d564 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d530:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d534:	4b3a      	ldr	r3, [pc, #232]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d536:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d53a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d53c:	4a38      	ldr	r2, [pc, #224]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d53e:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d542:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d546:	4b36      	ldr	r3, [pc, #216]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d548:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d54c:	4b34      	ldr	r3, [pc, #208]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d554:	e006      	b.n	800d564 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d556:	4b32      	ldr	r3, [pc, #200]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800d55e:	f7ff fbef 	bl	800cd40 <PrepareRxDoneAbort>
                    break;
 800d562:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d564:	4a2e      	ldr	r2, [pc, #184]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d566:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d56a:	f043 0302 	orr.w	r3, r3, #2
 800d56e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800d572:	e033      	b.n	800d5dc <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d574:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d578:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d57a:	18d1      	adds	r1, r2, r3
 800d57c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d580:	b29b      	uxth	r3, r3
 800d582:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	b29b      	uxth	r3, r3
 800d58a:	461a      	mov	r2, r3
 800d58c:	4826      	ldr	r0, [pc, #152]	; (800d628 <ProcessRadioRxDone+0x89c>)
 800d58e:	f008 fa8e 	bl	8015aae <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d592:	4b23      	ldr	r3, [pc, #140]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d594:	2203      	movs	r2, #3
 800d596:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d59a:	4b21      	ldr	r3, [pc, #132]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d5a2:	4b1f      	ldr	r3, [pc, #124]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d5a4:	4a20      	ldr	r2, [pc, #128]	; (800d628 <ProcessRadioRxDone+0x89c>)
 800d5a6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d5aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	4b19      	ldr	r3, [pc, #100]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d5ba:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d5be:	4a18      	ldr	r2, [pc, #96]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d5c0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d5c4:	f043 0302 	orr.w	r3, r3, #2
 800d5c8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800d5cc:	e006      	b.n	800d5dc <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d5ce:	4b14      	ldr	r3, [pc, #80]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800d5d6:	f7ff fbb3 	bl	800cd40 <PrepareRxDoneAbort>
            break;
 800d5da:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d5dc:	4b10      	ldr	r3, [pc, #64]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d5de:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d008      	beq.n	800d5f8 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d5e6:	4b0e      	ldr	r3, [pc, #56]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d5e8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00b      	beq.n	800d608 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	f000 fca9 	bl	800df48 <OnAckTimeoutTimerEvent>
 800d5f6:	e007      	b.n	800d608 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d5f8:	4b0a      	ldr	r3, [pc, #40]	; (800d624 <ProcessRadioRxDone+0x898>)
 800d5fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d102      	bne.n	800d608 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d602:	2000      	movs	r0, #0
 800d604:	f000 fca0 	bl	800df48 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d608:	4a05      	ldr	r2, [pc, #20]	; (800d620 <ProcessRadioRxDone+0x894>)
 800d60a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d60e:	f043 0320 	orr.w	r3, r3, #32
 800d612:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800d616:	f7ff fae1 	bl	800cbdc <UpdateRxSlotIdleState>
}
 800d61a:	3788      	adds	r7, #136	; 0x88
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bdb0      	pop	{r4, r5, r7, pc}
 800d620:	20000644 	.word	0x20000644
 800d624:	20000b50 	.word	0x20000b50
 800d628:	2000087c 	.word	0x2000087c

0800d62c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d630:	4b11      	ldr	r3, [pc, #68]	; (800d678 <ProcessRadioTxTimeout+0x4c>)
 800d632:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d636:	2b02      	cmp	r3, #2
 800d638:	d002      	beq.n	800d640 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <ProcessRadioTxTimeout+0x50>)
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800d640:	f7ff facc 	bl	800cbdc <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d644:	4b0e      	ldr	r3, [pc, #56]	; (800d680 <ProcessRadioTxTimeout+0x54>)
 800d646:	2202      	movs	r2, #2
 800d648:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d64c:	2002      	movs	r0, #2
 800d64e:	f004 fc63 	bl	8011f18 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d652:	4b0b      	ldr	r3, [pc, #44]	; (800d680 <ProcessRadioTxTimeout+0x54>)
 800d654:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800d65c:	4b08      	ldr	r3, [pc, #32]	; (800d680 <ProcessRadioTxTimeout+0x54>)
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d664:	4a06      	ldr	r2, [pc, #24]	; (800d680 <ProcessRadioTxTimeout+0x54>)
 800d666:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d66a:	f043 0320 	orr.w	r3, r3, #32
 800d66e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800d672:	bf00      	nop
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000b50 	.word	0x20000b50
 800d67c:	0801ba18 	.word	0x0801ba18
 800d680:	20000644 	.word	0x20000644

0800d684 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	460a      	mov	r2, r1
 800d68e:	71fb      	strb	r3, [r7, #7]
 800d690:	4613      	mov	r3, r2
 800d692:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d698:	4b40      	ldr	r3, [pc, #256]	; (800d79c <HandleRadioRxErrorTimeout+0x118>)
 800d69a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d002      	beq.n	800d6a8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800d6a2:	4b3f      	ldr	r3, [pc, #252]	; (800d7a0 <HandleRadioRxErrorTimeout+0x11c>)
 800d6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d6a8:	f003 ff97 	bl	80115da <LoRaMacClassBIsBeaconExpected>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d007      	beq.n	800d6c2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d6b2:	2002      	movs	r0, #2
 800d6b4:	f003 ff45 	bl	8011542 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f003 ff67 	bl	801158c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d6c2:	4b36      	ldr	r3, [pc, #216]	; (800d79c <HandleRadioRxErrorTimeout+0x118>)
 800d6c4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d119      	bne.n	800d700 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d6cc:	f003 ff8c 	bl	80115e8 <LoRaMacClassBIsPingExpected>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d007      	beq.n	800d6e6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	f003 ff3d 	bl	8011556 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d6dc:	2000      	movs	r0, #0
 800d6de:	f003 ff5e 	bl	801159e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d6e6:	f003 ff86 	bl	80115f6 <LoRaMacClassBIsMulticastExpected>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d007      	beq.n	800d700 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	f003 ff3a 	bl	801156a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	f003 ff5a 	bl	80115b0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800d700:	7bfb      	ldrb	r3, [r7, #15]
 800d702:	f083 0301 	eor.w	r3, r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d040      	beq.n	800d78e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d70c:	4b25      	ldr	r3, [pc, #148]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d70e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800d712:	2b00      	cmp	r3, #0
 800d714:	d122      	bne.n	800d75c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800d716:	4b23      	ldr	r3, [pc, #140]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d718:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d003      	beq.n	800d728 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d720:	4a20      	ldr	r2, [pc, #128]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f004 fbf4 	bl	8011f18 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d730:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <HandleRadioRxErrorTimeout+0x118>)
 800d732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d734:	4618      	mov	r0, r3
 800d736:	f00c fc31 	bl	8019f9c <UTIL_TIMER_GetElapsedTime>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b19      	ldr	r3, [pc, #100]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d73e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d742:	429a      	cmp	r2, r3
 800d744:	d323      	bcc.n	800d78e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d746:	4818      	ldr	r0, [pc, #96]	; (800d7a8 <HandleRadioRxErrorTimeout+0x124>)
 800d748:	f00c fafc 	bl	8019d44 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d74c:	4a15      	ldr	r2, [pc, #84]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d74e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d752:	f043 0320 	orr.w	r3, r3, #32
 800d756:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800d75a:	e018      	b.n	800d78e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800d75c:	4b11      	ldr	r3, [pc, #68]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d75e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d766:	4a0f      	ldr	r2, [pc, #60]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d768:	79bb      	ldrb	r3, [r7, #6]
 800d76a:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d76e:	79bb      	ldrb	r3, [r7, #6]
 800d770:	4618      	mov	r0, r3
 800d772:	f004 fbd1 	bl	8011f18 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d776:	4b09      	ldr	r3, [pc, #36]	; (800d79c <HandleRadioRxErrorTimeout+0x118>)
 800d778:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d006      	beq.n	800d78e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d780:	4a08      	ldr	r2, [pc, #32]	; (800d7a4 <HandleRadioRxErrorTimeout+0x120>)
 800d782:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d786:	f043 0320 	orr.w	r3, r3, #32
 800d78a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800d78e:	f7ff fa25 	bl	800cbdc <UpdateRxSlotIdleState>
}
 800d792:	bf00      	nop
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20000b50 	.word	0x20000b50
 800d7a0:	0801ba18 	.word	0x0801ba18
 800d7a4:	20000644 	.word	0x20000644
 800d7a8:	200009dc 	.word	0x200009dc

0800d7ac <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d7b0:	2106      	movs	r1, #6
 800d7b2:	2005      	movs	r0, #5
 800d7b4:	f7ff ff66 	bl	800d684 <HandleRadioRxErrorTimeout>
}
 800d7b8:	bf00      	nop
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d7c0:	2104      	movs	r1, #4
 800d7c2:	2003      	movs	r0, #3
 800d7c4:	f7ff ff5e 	bl	800d684 <HandleRadioRxErrorTimeout>
}
 800d7c8:	bf00      	nop
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7d6:	607b      	str	r3, [r7, #4]
  return(result);
 800d7d8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800d7da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7dc:	b672      	cpsid	i
}
 800d7de:	bf00      	nop
    events = LoRaMacRadioEvents;
 800d7e0:	4b1d      	ldr	r3, [pc, #116]	; (800d858 <LoRaMacHandleIrqEvents+0x8c>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800d7e6:	4b1c      	ldr	r3, [pc, #112]	; (800d858 <LoRaMacHandleIrqEvents+0x8c>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	f383 8810 	msr	PRIMASK, r3
}
 800d7f6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d027      	beq.n	800d84e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800d7fe:	783b      	ldrb	r3, [r7, #0]
 800d800:	f003 0310 	and.w	r3, r3, #16
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800d80a:	f7ff f9ff 	bl	800cc0c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800d80e:	783b      	ldrb	r3, [r7, #0]
 800d810:	f003 0308 	and.w	r3, r3, #8
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800d81a:	f7ff fab7 	bl	800cd8c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800d81e:	783b      	ldrb	r3, [r7, #0]
 800d820:	f003 0304 	and.w	r3, r3, #4
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800d82a:	f7ff feff 	bl	800d62c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800d82e:	783b      	ldrb	r3, [r7, #0]
 800d830:	f003 0302 	and.w	r3, r3, #2
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800d83a:	f7ff ffb7 	bl	800d7ac <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800d83e:	783b      	ldrb	r3, [r7, #0]
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800d84a:	f7ff ffb7 	bl	800d7bc <ProcessRadioRxTimeout>
        }
    }
}
 800d84e:	bf00      	nop
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	200019a0 	.word	0x200019a0

0800d85c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800d85c:	b480      	push	{r7}
 800d85e:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d860:	4b08      	ldr	r3, [pc, #32]	; (800d884 <LoRaMacIsBusy+0x28>)
 800d862:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d86a:	4b06      	ldr	r3, [pc, #24]	; (800d884 <LoRaMacIsBusy+0x28>)
 800d86c:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d870:	2b01      	cmp	r3, #1
 800d872:	d101      	bne.n	800d878 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800d874:	2300      	movs	r3, #0
 800d876:	e000      	b.n	800d87a <LoRaMacIsBusy+0x1e>
    }
    return true;
 800d878:	2301      	movs	r3, #1
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bc80      	pop	{r7}
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000644 	.word	0x20000644

0800d888 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800d892:	4a04      	ldr	r2, [pc, #16]	; (800d8a4 <LoRaMacEnableRequests+0x1c>)
 800d894:	79fb      	ldrb	r3, [r7, #7]
 800d896:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800d89a:	bf00      	nop
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bc80      	pop	{r7}
 800d8a2:	4770      	bx	lr
 800d8a4:	20000644 	.word	0x20000644

0800d8a8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800d8ae:	4b2c      	ldr	r3, [pc, #176]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d8b0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d8b4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800d8b6:	4b2a      	ldr	r3, [pc, #168]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d8b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d14a      	bne.n	800d956 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d8c0:	4b27      	ldr	r3, [pc, #156]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d8c2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d006      	beq.n	800d8de <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d8d0:	4a23      	ldr	r2, [pc, #140]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d8d2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d8d6:	f36f 0300 	bfc	r3, #0, #1
 800d8da:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d8de:	4b20      	ldr	r3, [pc, #128]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d8e0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d8e4:	f003 0304 	and.w	r3, r3, #4
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d006      	beq.n	800d8fc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d8ee:	4a1c      	ldr	r2, [pc, #112]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d8f0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d8f4:	f36f 0382 	bfc	r3, #2, #1
 800d8f8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d8fc:	2001      	movs	r0, #1
 800d8fe:	f7ff ffc3 	bl	800d888 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800d902:	793b      	ldrb	r3, [r7, #4]
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d005      	beq.n	800d91a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d90e:	4b14      	ldr	r3, [pc, #80]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d910:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4813      	ldr	r0, [pc, #76]	; (800d964 <LoRaMacHandleRequestEvents+0xbc>)
 800d918:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800d91a:	793b      	ldrb	r3, [r7, #4]
 800d91c:	f003 0304 	and.w	r3, r3, #4
 800d920:	b2db      	uxtb	r3, r3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00e      	beq.n	800d944 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d926:	4810      	ldr	r0, [pc, #64]	; (800d968 <LoRaMacHandleRequestEvents+0xc0>)
 800d928:	f004 fb44 	bl	8011fb4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d92c:	f004 fb8e 	bl	801204c <LoRaMacConfirmQueueGetCnt>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d006      	beq.n	800d944 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d936:	4a0a      	ldr	r2, [pc, #40]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d938:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d93c:	f043 0304 	orr.w	r3, r3, #4
 800d940:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800d944:	f003 fe75 	bl	8011632 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d948:	4a05      	ldr	r2, [pc, #20]	; (800d960 <LoRaMacHandleRequestEvents+0xb8>)
 800d94a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d94e:	f36f 1345 	bfc	r3, #5, #1
 800d952:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 800d956:	bf00      	nop
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000644 	.word	0x20000644
 800d964:	20000a7c 	.word	0x20000a7c
 800d968:	20000a90 	.word	0x20000a90

0800d96c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d972:	4b07      	ldr	r3, [pc, #28]	; (800d990 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800d974:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d105      	bne.n	800d988 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800d97c:	2300      	movs	r3, #0
 800d97e:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800d980:	1dfb      	adds	r3, r7, #7
 800d982:	4618      	mov	r0, r3
 800d984:	f004 f8fc 	bl	8011b80 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000644 	.word	0x20000644

0800d994 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800d998:	4b16      	ldr	r3, [pc, #88]	; (800d9f4 <LoRaMacHandleIndicationEvents+0x60>)
 800d99a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d99e:	f003 0308 	and.w	r3, r3, #8
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00d      	beq.n	800d9c4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800d9a8:	4a12      	ldr	r2, [pc, #72]	; (800d9f4 <LoRaMacHandleIndicationEvents+0x60>)
 800d9aa:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d9ae:	f36f 03c3 	bfc	r3, #3, #1
 800d9b2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <LoRaMacHandleIndicationEvents+0x60>)
 800d9b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	490e      	ldr	r1, [pc, #56]	; (800d9f8 <LoRaMacHandleIndicationEvents+0x64>)
 800d9c0:	480e      	ldr	r0, [pc, #56]	; (800d9fc <LoRaMacHandleIndicationEvents+0x68>)
 800d9c2:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d9c4:	4b0b      	ldr	r3, [pc, #44]	; (800d9f4 <LoRaMacHandleIndicationEvents+0x60>)
 800d9c6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800d9ca:	f003 0302 	and.w	r3, r3, #2
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00d      	beq.n	800d9f0 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800d9d4:	4a07      	ldr	r2, [pc, #28]	; (800d9f4 <LoRaMacHandleIndicationEvents+0x60>)
 800d9d6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d9da:	f36f 0341 	bfc	r3, #1, #1
 800d9de:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800d9e2:	4b04      	ldr	r3, [pc, #16]	; (800d9f4 <LoRaMacHandleIndicationEvents+0x60>)
 800d9e4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	4903      	ldr	r1, [pc, #12]	; (800d9f8 <LoRaMacHandleIndicationEvents+0x64>)
 800d9ec:	4804      	ldr	r0, [pc, #16]	; (800da00 <LoRaMacHandleIndicationEvents+0x6c>)
 800d9ee:	4798      	blx	r3
    }
}
 800d9f0:	bf00      	nop
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	20000644 	.word	0x20000644
 800d9f8:	20000ac4 	.word	0x20000ac4
 800d9fc:	20000aa4 	.word	0x20000aa4
 800da00:	20000a60 	.word	0x20000a60

0800da04 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800da0a:	4b32      	ldr	r3, [pc, #200]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da0c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d058      	beq.n	800dacc <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800da1a:	2300      	movs	r3, #0
 800da1c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800da1e:	2300      	movs	r3, #0
 800da20:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800da22:	4b2c      	ldr	r3, [pc, #176]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da24:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800da2c:	4b29      	ldr	r3, [pc, #164]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da2e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800da32:	2b03      	cmp	r3, #3
 800da34:	d104      	bne.n	800da40 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800da36:	f002 f87b 	bl	800fb30 <CheckRetransUnconfirmedUplink>
 800da3a:	4603      	mov	r3, r0
 800da3c:	71fb      	strb	r3, [r7, #7]
 800da3e:	e020      	b.n	800da82 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800da40:	4b24      	ldr	r3, [pc, #144]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da42:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800da46:	2b01      	cmp	r3, #1
 800da48:	d11b      	bne.n	800da82 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800da4a:	4b22      	ldr	r3, [pc, #136]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da4c:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800da50:	2b00      	cmp	r3, #0
 800da52:	d014      	beq.n	800da7e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800da54:	f002 f898 	bl	800fb88 <CheckRetransConfirmedUplink>
 800da58:	4603      	mov	r3, r0
 800da5a:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800da5c:	4b1e      	ldr	r3, [pc, #120]	; (800dad8 <LoRaMacHandleMcpsRequest+0xd4>)
 800da5e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10d      	bne.n	800da82 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	f083 0301 	eor.w	r3, r3, #1
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800da72:	f002 f905 	bl	800fc80 <AckTimeoutRetriesProcess>
 800da76:	e004      	b.n	800da82 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800da78:	f002 f940 	bl	800fcfc <AckTimeoutRetriesFinalize>
 800da7c:	e001      	b.n	800da82 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800da7e:	2301      	movs	r3, #1
 800da80:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00d      	beq.n	800daa4 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800da88:	4814      	ldr	r0, [pc, #80]	; (800dadc <LoRaMacHandleMcpsRequest+0xd8>)
 800da8a:	f00c f95b 	bl	8019d44 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800da8e:	4b11      	ldr	r3, [pc, #68]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da94:	f023 0320 	bic.w	r3, r3, #32
 800da98:	4a0e      	ldr	r2, [pc, #56]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800da9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800da9e:	f002 f895 	bl	800fbcc <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800daa2:	e013      	b.n	800dacc <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800daa4:	79bb      	ldrb	r3, [r7, #6]
 800daa6:	f083 0301 	eor.w	r3, r3, #1
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00d      	beq.n	800dacc <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800dab0:	4a08      	ldr	r2, [pc, #32]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800dab2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800dab6:	f36f 1345 	bfc	r3, #5, #1
 800daba:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800dabe:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <LoRaMacHandleMcpsRequest+0xd0>)
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800dac6:	2000      	movs	r0, #0
 800dac8:	f000 f994 	bl	800ddf4 <OnTxDelayedTimerEvent>
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20000644 	.word	0x20000644
 800dad8:	20000b50 	.word	0x20000b50
 800dadc:	200009ac 	.word	0x200009ac

0800dae0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dae4:	4b1b      	ldr	r3, [pc, #108]	; (800db54 <LoRaMacHandleMlmeRequest+0x74>)
 800dae6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800daea:	f003 0304 	and.w	r3, r3, #4
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d02c      	beq.n	800db4e <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800daf4:	2001      	movs	r0, #1
 800daf6:	f004 fa43 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d012      	beq.n	800db26 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800db00:	2001      	movs	r0, #1
 800db02:	f004 f9df 	bl	8011ec4 <LoRaMacConfirmQueueGetStatus>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d103      	bne.n	800db14 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800db0c:	4b11      	ldr	r3, [pc, #68]	; (800db54 <LoRaMacHandleMlmeRequest+0x74>)
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800db14:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <LoRaMacHandleMlmeRequest+0x74>)
 800db16:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db1a:	f023 0302 	bic.w	r3, r3, #2
 800db1e:	4a0d      	ldr	r2, [pc, #52]	; (800db54 <LoRaMacHandleMlmeRequest+0x74>)
 800db20:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800db24:	e013      	b.n	800db4e <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800db26:	2005      	movs	r0, #5
 800db28:	f004 fa2a 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d105      	bne.n	800db3e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800db32:	2006      	movs	r0, #6
 800db34:	f004 fa24 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800db38:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d007      	beq.n	800db4e <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800db3e:	4b05      	ldr	r3, [pc, #20]	; (800db54 <LoRaMacHandleMlmeRequest+0x74>)
 800db40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db44:	f023 0302 	bic.w	r3, r3, #2
 800db48:	4a02      	ldr	r2, [pc, #8]	; (800db54 <LoRaMacHandleMlmeRequest+0x74>)
 800db4a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800db4e:	bf00      	nop
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	20000644 	.word	0x20000644

0800db58 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800db5c:	200c      	movs	r0, #12
 800db5e:	f004 fa0f 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d019      	beq.n	800db9c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800db68:	4b0e      	ldr	r3, [pc, #56]	; (800dba4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800db6a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800db74:	2b00      	cmp	r3, #0
 800db76:	d111      	bne.n	800db9c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800db78:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800db7a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800db7e:	f003 0304 	and.w	r3, r3, #4
 800db82:	b2db      	uxtb	r3, r3
 800db84:	2b00      	cmp	r3, #0
 800db86:	d009      	beq.n	800db9c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800db88:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800db8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db8e:	f023 0302 	bic.w	r3, r3, #2
 800db92:	4a04      	ldr	r2, [pc, #16]	; (800dba4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800db94:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	20000644 	.word	0x20000644

0800dba8 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800dba8:	b480      	push	{r7}
 800dbaa:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800dbac:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <LoRaMacCheckForRxAbort+0x3c>)
 800dbae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00f      	beq.n	800dbda <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800dbba:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <LoRaMacCheckForRxAbort+0x3c>)
 800dbbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dbc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbc4:	4a07      	ldr	r2, [pc, #28]	; (800dbe4 <LoRaMacCheckForRxAbort+0x3c>)
 800dbc6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dbca:	4b06      	ldr	r3, [pc, #24]	; (800dbe4 <LoRaMacCheckForRxAbort+0x3c>)
 800dbcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dbd0:	f023 0302 	bic.w	r3, r3, #2
 800dbd4:	4a03      	ldr	r2, [pc, #12]	; (800dbe4 <LoRaMacCheckForRxAbort+0x3c>)
 800dbd6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800dbda:	bf00      	nop
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bc80      	pop	{r7}
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	20000644 	.word	0x20000644

0800dbe8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800dbf8:	4b50      	ldr	r3, [pc, #320]	; (800dd3c <LoRaMacHandleNvm+0x154>)
 800dbfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f040 8098 	bne.w	800dd34 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2124      	movs	r1, #36	; 0x24
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f007 ffa5 	bl	8015b58 <Crc32>
 800dc0e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d006      	beq.n	800dc28 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800dc20:	89fb      	ldrh	r3, [r7, #14]
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3328      	adds	r3, #40	; 0x28
 800dc2c:	2114      	movs	r1, #20
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f007 ff92 	bl	8015b58 <Crc32>
 800dc34:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d006      	beq.n	800dc4e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800dc46:	89fb      	ldrh	r3, [r7, #14]
 800dc48:	f043 0302 	orr.w	r3, r3, #2
 800dc4c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	3340      	adds	r3, #64	; 0x40
 800dc52:	21dc      	movs	r1, #220	; 0xdc
 800dc54:	4618      	mov	r0, r3
 800dc56:	f007 ff7f 	bl	8015b58 <Crc32>
 800dc5a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d007      	beq.n	800dc78 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800dc70:	89fb      	ldrh	r3, [r7, #14]
 800dc72:	f043 0304 	orr.w	r3, r3, #4
 800dc76:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800dc7e:	21bc      	movs	r1, #188	; 0xbc
 800dc80:	4618      	mov	r0, r3
 800dc82:	f007 ff69 	bl	8015b58 <Crc32>
 800dc86:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d007      	beq.n	800dca4 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800dc9c:	89fb      	ldrh	r3, [r7, #14]
 800dc9e:	f043 0308 	orr.w	r3, r3, #8
 800dca2:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800dcaa:	2190      	movs	r1, #144	; 0x90
 800dcac:	4618      	mov	r0, r3
 800dcae:	f007 ff53 	bl	8015b58 <Crc32>
 800dcb2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d007      	beq.n	800dcd0 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800dcc8:	89fb      	ldrh	r3, [r7, #14]
 800dcca:	f043 0310 	orr.w	r3, r3, #16
 800dcce:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800dcd6:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f007 ff3c 	bl	8015b58 <Crc32>
 800dce0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800dce8:	68ba      	ldr	r2, [r7, #8]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d007      	beq.n	800dcfe <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800dcf6:	89fb      	ldrh	r3, [r7, #14]
 800dcf8:	f043 0320 	orr.w	r3, r3, #32
 800dcfc:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800dd04:	2114      	movs	r1, #20
 800dd06:	4618      	mov	r0, r3
 800dd08:	f007 ff26 	bl	8015b58 <Crc32>
 800dd0c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d007      	beq.n	800dd2a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800dd22:	89fb      	ldrh	r3, [r7, #14]
 800dd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd28:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800dd2a:	89fb      	ldrh	r3, [r7, #14]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f001 ff89 	bl	800fc44 <CallNvmDataChangeCallback>
 800dd32:	e000      	b.n	800dd36 <LoRaMacHandleNvm+0x14e>
        return;
 800dd34:	bf00      	nop
}
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20000644 	.word	0x20000644

0800dd40 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800dd46:	2300      	movs	r3, #0
 800dd48:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800dd4a:	f7ff fd3f 	bl	800d7cc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800dd4e:	f003 fcd4 	bl	80116fa <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800dd52:	4b26      	ldr	r3, [pc, #152]	; (800ddec <LoRaMacProcess+0xac>)
 800dd54:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800dd58:	f003 0320 	and.w	r3, r3, #32
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d025      	beq.n	800ddae <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800dd62:	2000      	movs	r0, #0
 800dd64:	f7ff fd90 	bl	800d888 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800dd68:	f7ff ff1e 	bl	800dba8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800dd6c:	f001 fffa 	bl	800fd64 <IsRequestPending>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d006      	beq.n	800dd84 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800dd76:	f7ff feef 	bl	800db58 <LoRaMacCheckForBeaconAcquisition>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	79fb      	ldrb	r3, [r7, #7]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800dd84:	79fb      	ldrb	r3, [r7, #7]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d103      	bne.n	800dd92 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800dd8a:	f7ff fea9 	bl	800dae0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800dd8e:	f7ff fe39 	bl	800da04 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800dd92:	f7ff fd89 	bl	800d8a8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800dd96:	f7ff fde9 	bl	800d96c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dd9a:	2001      	movs	r0, #1
 800dd9c:	f7ff fd74 	bl	800d888 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800dda0:	4a12      	ldr	r2, [pc, #72]	; (800ddec <LoRaMacProcess+0xac>)
 800dda2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800dda6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddaa:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 800ddae:	f7ff fdf1 	bl	800d994 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ddb2:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <LoRaMacProcess+0xac>)
 800ddb4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d101      	bne.n	800ddc0 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ddbc:	f001 fb7e 	bl	800f4bc <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <LoRaMacProcess+0xac>)
 800ddc2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ddc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d009      	beq.n	800dde4 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ddd0:	4a06      	ldr	r2, [pc, #24]	; (800ddec <LoRaMacProcess+0xac>)
 800ddd2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ddd6:	f36f 1386 	bfc	r3, #6, #1
 800ddda:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800ddde:	4804      	ldr	r0, [pc, #16]	; (800ddf0 <LoRaMacProcess+0xb0>)
 800dde0:	f7ff ff02 	bl	800dbe8 <LoRaMacHandleNvm>
    }
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20000644 	.word	0x20000644
 800ddf0:	20000b50 	.word	0x20000b50

0800ddf4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ddfc:	4817      	ldr	r0, [pc, #92]	; (800de5c <OnTxDelayedTimerEvent+0x68>)
 800ddfe:	f00b ffa1 	bl	8019d44 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800de02:	4b17      	ldr	r3, [pc, #92]	; (800de60 <OnTxDelayedTimerEvent+0x6c>)
 800de04:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800de08:	f023 0320 	bic.w	r3, r3, #32
 800de0c:	4a14      	ldr	r2, [pc, #80]	; (800de60 <OnTxDelayedTimerEvent+0x6c>)
 800de0e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800de12:	2001      	movs	r0, #1
 800de14:	f001 f8e6 	bl	800efe4 <ScheduleTx>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d018      	beq.n	800de50 <OnTxDelayedTimerEvent+0x5c>
 800de1e:	2b0b      	cmp	r3, #11
 800de20:	d016      	beq.n	800de50 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800de22:	4b10      	ldr	r3, [pc, #64]	; (800de64 <OnTxDelayedTimerEvent+0x70>)
 800de24:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	4b0d      	ldr	r3, [pc, #52]	; (800de60 <OnTxDelayedTimerEvent+0x6c>)
 800de2c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <OnTxDelayedTimerEvent+0x6c>)
 800de32:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800de36:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <OnTxDelayedTimerEvent+0x6c>)
 800de38:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800de3c:	4b08      	ldr	r3, [pc, #32]	; (800de60 <OnTxDelayedTimerEvent+0x6c>)
 800de3e:	2209      	movs	r2, #9
 800de40:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800de44:	2009      	movs	r0, #9
 800de46:	f004 f867 	bl	8011f18 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800de4a:	f001 febf 	bl	800fbcc <StopRetransmission>
            break;
 800de4e:	e000      	b.n	800de52 <OnTxDelayedTimerEvent+0x5e>
            break;
 800de50:	bf00      	nop
        }
    }
}
 800de52:	bf00      	nop
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	200009ac 	.word	0x200009ac
 800de60:	20000644 	.word	0x20000644
 800de64:	20000b50 	.word	0x20000b50

0800de68 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800de70:	4b14      	ldr	r3, [pc, #80]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800de72:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800de76:	4b13      	ldr	r3, [pc, #76]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800de78:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800de7c:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <OnRxWindow1TimerEvent+0x60>)
 800de7e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800de82:	b25a      	sxtb	r2, r3
 800de84:	4b0f      	ldr	r3, [pc, #60]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800de86:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de8a:	4b0f      	ldr	r3, [pc, #60]	; (800dec8 <OnRxWindow1TimerEvent+0x60>)
 800de8c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800de90:	4b0c      	ldr	r3, [pc, #48]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800de92:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800de96:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <OnRxWindow1TimerEvent+0x60>)
 800de98:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800de9c:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800de9e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800dea2:	4b08      	ldr	r3, [pc, #32]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800deaa:	4b06      	ldr	r3, [pc, #24]	; (800dec4 <OnRxWindow1TimerEvent+0x5c>)
 800deac:	2200      	movs	r2, #0
 800deae:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800deb2:	4906      	ldr	r1, [pc, #24]	; (800decc <OnRxWindow1TimerEvent+0x64>)
 800deb4:	4806      	ldr	r0, [pc, #24]	; (800ded0 <OnRxWindow1TimerEvent+0x68>)
 800deb6:	f001 facd 	bl	800f454 <RxWindowSetup>
}
 800deba:	bf00      	nop
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20000644 	.word	0x20000644
 800dec8:	20000b50 	.word	0x20000b50
 800decc:	200009fc 	.word	0x200009fc
 800ded0:	200009c4 	.word	0x200009c4

0800ded4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800dedc:	4b16      	ldr	r3, [pc, #88]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800dede:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d023      	beq.n	800df2e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800dee6:	4b14      	ldr	r3, [pc, #80]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800dee8:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800deec:	4b12      	ldr	r3, [pc, #72]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800deee:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800def2:	4b12      	ldr	r3, [pc, #72]	; (800df3c <OnRxWindow2TimerEvent+0x68>)
 800def4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def6:	4a10      	ldr	r2, [pc, #64]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800def8:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800defc:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <OnRxWindow2TimerEvent+0x68>)
 800defe:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800df02:	4b0d      	ldr	r3, [pc, #52]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800df04:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800df08:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <OnRxWindow2TimerEvent+0x68>)
 800df0a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800df0e:	4b0a      	ldr	r3, [pc, #40]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800df10:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800df14:	4b08      	ldr	r3, [pc, #32]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800df16:	2200      	movs	r2, #0
 800df18:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800df1c:	4b06      	ldr	r3, [pc, #24]	; (800df38 <OnRxWindow2TimerEvent+0x64>)
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800df24:	4906      	ldr	r1, [pc, #24]	; (800df40 <OnRxWindow2TimerEvent+0x6c>)
 800df26:	4807      	ldr	r0, [pc, #28]	; (800df44 <OnRxWindow2TimerEvent+0x70>)
 800df28:	f001 fa94 	bl	800f454 <RxWindowSetup>
 800df2c:	e000      	b.n	800df30 <OnRxWindow2TimerEvent+0x5c>
        return;
 800df2e:	bf00      	nop
}
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20000644 	.word	0x20000644
 800df3c:	20000b50 	.word	0x20000b50
 800df40:	20000a10 	.word	0x20000a10
 800df44:	200009dc 	.word	0x200009dc

0800df48 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800df50:	4815      	ldr	r0, [pc, #84]	; (800dfa8 <OnAckTimeoutTimerEvent+0x60>)
 800df52:	f00b fef7 	bl	8019d44 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800df56:	4b15      	ldr	r3, [pc, #84]	; (800dfac <OnAckTimeoutTimerEvent+0x64>)
 800df58:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d003      	beq.n	800df68 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800df60:	4b12      	ldr	r3, [pc, #72]	; (800dfac <OnAckTimeoutTimerEvent+0x64>)
 800df62:	2201      	movs	r2, #1
 800df64:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800df68:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <OnAckTimeoutTimerEvent+0x68>)
 800df6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800df6e:	2b02      	cmp	r3, #2
 800df70:	d106      	bne.n	800df80 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800df72:	4a0e      	ldr	r2, [pc, #56]	; (800dfac <OnAckTimeoutTimerEvent+0x64>)
 800df74:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800df78:	f043 0320 	orr.w	r3, r3, #32
 800df7c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800df80:	4b0a      	ldr	r3, [pc, #40]	; (800dfac <OnAckTimeoutTimerEvent+0x64>)
 800df82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00a      	beq.n	800dfa0 <OnAckTimeoutTimerEvent+0x58>
 800df8a:	4b08      	ldr	r3, [pc, #32]	; (800dfac <OnAckTimeoutTimerEvent+0x64>)
 800df8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d004      	beq.n	800dfa0 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800df96:	4b05      	ldr	r3, [pc, #20]	; (800dfac <OnAckTimeoutTimerEvent+0x64>)
 800df98:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800df9c:	691b      	ldr	r3, [r3, #16]
 800df9e:	4798      	blx	r3
    }
}
 800dfa0:	bf00      	nop
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20000a3c 	.word	0x20000a3c
 800dfac:	20000644 	.word	0x20000644
 800dfb0:	20000b50 	.word	0x20000b50

0800dfb4 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60ba      	str	r2, [r7, #8]
 800dfbc:	607b      	str	r3, [r7, #4]
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	73fb      	strb	r3, [r7, #15]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <GetFCntDown+0x24>
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <GetFCntDown+0x24>
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dfd8:	230a      	movs	r3, #10
 800dfda:	e029      	b.n	800e030 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d016      	beq.n	800e010 <GetFCntDown+0x5c>
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d118      	bne.n	800e018 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800dfe6:	79bb      	ldrb	r3, [r7, #6]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d10d      	bne.n	800e008 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800dfec:	7bbb      	ldrb	r3, [r7, #14]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d002      	beq.n	800dff8 <GetFCntDown+0x44>
 800dff2:	7bbb      	ldrb	r3, [r7, #14]
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d103      	bne.n	800e000 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	2202      	movs	r2, #2
 800dffc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800dffe:	e00d      	b.n	800e01c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	2201      	movs	r2, #1
 800e004:	701a      	strb	r2, [r3, #0]
            break;
 800e006:	e009      	b.n	800e01c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2203      	movs	r2, #3
 800e00c:	701a      	strb	r2, [r3, #0]
            break;
 800e00e:	e005      	b.n	800e01c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	2204      	movs	r2, #4
 800e014:	701a      	strb	r2, [r3, #0]
            break;
 800e016:	e001      	b.n	800e01c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e018:	2305      	movs	r3, #5
 800e01a:	e009      	b.n	800e030 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	7818      	ldrb	r0, [r3, #0]
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	89db      	ldrh	r3, [r3, #14]
 800e024:	461a      	mov	r2, r3
 800e026:	8b39      	ldrh	r1, [r7, #24]
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	f004 fb9f 	bl	801276c <LoRaMacCryptoGetFCntDown>
 800e02e:	4603      	mov	r3, r0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e038:	b5b0      	push	{r4, r5, r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e042:	2303      	movs	r3, #3
 800e044:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e046:	4b61      	ldr	r3, [pc, #388]	; (800e1cc <SwitchClass+0x194>)
 800e048:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	f000 80a5 	beq.w	800e19c <SwitchClass+0x164>
 800e052:	2b02      	cmp	r3, #2
 800e054:	f300 80b4 	bgt.w	800e1c0 <SwitchClass+0x188>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d003      	beq.n	800e064 <SwitchClass+0x2c>
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	f000 808f 	beq.w	800e180 <SwitchClass+0x148>
 800e062:	e0ad      	b.n	800e1c0 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d107      	bne.n	800e07a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e06a:	4b58      	ldr	r3, [pc, #352]	; (800e1cc <SwitchClass+0x194>)
 800e06c:	4a57      	ldr	r2, [pc, #348]	; (800e1cc <SwitchClass+0x194>)
 800e06e:	336c      	adds	r3, #108	; 0x6c
 800e070:	3264      	adds	r2, #100	; 0x64
 800e072:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e076:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d10c      	bne.n	800e09a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	4618      	mov	r0, r3
 800e084:	f003 fadb 	bl	801163e <LoRaMacClassBSwitchClass>
 800e088:	4603      	mov	r3, r0
 800e08a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d103      	bne.n	800e09a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e092:	4a4e      	ldr	r2, [pc, #312]	; (800e1cc <SwitchClass+0x194>)
 800e094:	79fb      	ldrb	r3, [r7, #7]
 800e096:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800e09a:	79fb      	ldrb	r3, [r7, #7]
 800e09c:	2b02      	cmp	r3, #2
 800e09e:	f040 808a 	bne.w	800e1b6 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e0a2:	4a4a      	ldr	r2, [pc, #296]	; (800e1cc <SwitchClass+0x194>)
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e0aa:	4a49      	ldr	r2, [pc, #292]	; (800e1d0 <SwitchClass+0x198>)
 800e0ac:	4b48      	ldr	r3, [pc, #288]	; (800e1d0 <SwitchClass+0x198>)
 800e0ae:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800e0b2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800e0b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e0be:	4b44      	ldr	r3, [pc, #272]	; (800e1d0 <SwitchClass+0x198>)
 800e0c0:	2202      	movs	r2, #2
 800e0c2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	73bb      	strb	r3, [r7, #14]
 800e0ca:	e049      	b.n	800e160 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800e0cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0d0:	4a3e      	ldr	r2, [pc, #248]	; (800e1cc <SwitchClass+0x194>)
 800e0d2:	212c      	movs	r1, #44	; 0x2c
 800e0d4:	fb01 f303 	mul.w	r3, r1, r3
 800e0d8:	4413      	add	r3, r2
 800e0da:	33da      	adds	r3, #218	; 0xda
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d038      	beq.n	800e154 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800e0e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0e6:	4a39      	ldr	r2, [pc, #228]	; (800e1cc <SwitchClass+0x194>)
 800e0e8:	212c      	movs	r1, #44	; 0x2c
 800e0ea:	fb01 f303 	mul.w	r3, r1, r3
 800e0ee:	4413      	add	r3, r2
 800e0f0:	33f0      	adds	r3, #240	; 0xf0
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a35      	ldr	r2, [pc, #212]	; (800e1cc <SwitchClass+0x194>)
 800e0f6:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800e0f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0fc:	4a33      	ldr	r2, [pc, #204]	; (800e1cc <SwitchClass+0x194>)
 800e0fe:	212c      	movs	r1, #44	; 0x2c
 800e100:	fb01 f303 	mul.w	r3, r1, r3
 800e104:	4413      	add	r3, r2
 800e106:	33f4      	adds	r3, #244	; 0xf4
 800e108:	f993 3000 	ldrsb.w	r3, [r3]
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	4b2f      	ldr	r3, [pc, #188]	; (800e1cc <SwitchClass+0x194>)
 800e110:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e114:	4b2e      	ldr	r3, [pc, #184]	; (800e1d0 <SwitchClass+0x198>)
 800e116:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e11a:	4b2d      	ldr	r3, [pc, #180]	; (800e1d0 <SwitchClass+0x198>)
 800e11c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e120:	4b2a      	ldr	r3, [pc, #168]	; (800e1cc <SwitchClass+0x194>)
 800e122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e124:	4a2a      	ldr	r2, [pc, #168]	; (800e1d0 <SwitchClass+0x198>)
 800e126:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e12a:	4b28      	ldr	r3, [pc, #160]	; (800e1cc <SwitchClass+0x194>)
 800e12c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e130:	4b27      	ldr	r3, [pc, #156]	; (800e1d0 <SwitchClass+0x198>)
 800e132:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e136:	4b25      	ldr	r3, [pc, #148]	; (800e1cc <SwitchClass+0x194>)
 800e138:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e13c:	4b24      	ldr	r3, [pc, #144]	; (800e1d0 <SwitchClass+0x198>)
 800e13e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e142:	4b23      	ldr	r3, [pc, #140]	; (800e1d0 <SwitchClass+0x198>)
 800e144:	2203      	movs	r2, #3
 800e146:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e14a:	4b21      	ldr	r3, [pc, #132]	; (800e1d0 <SwitchClass+0x198>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800e152:	e009      	b.n	800e168 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	3301      	adds	r3, #1
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	73bb      	strb	r3, [r7, #14]
 800e160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e164:	2b00      	cmp	r3, #0
 800e166:	ddb1      	ble.n	800e0cc <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800e168:	4b19      	ldr	r3, [pc, #100]	; (800e1d0 <SwitchClass+0x198>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800e170:	4b18      	ldr	r3, [pc, #96]	; (800e1d4 <SwitchClass+0x19c>)
 800e172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e174:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800e176:	f001 f9a1 	bl	800f4bc <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e17e:	e01a      	b.n	800e1b6 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e180:	79fb      	ldrb	r3, [r7, #7]
 800e182:	4618      	mov	r0, r3
 800e184:	f003 fa5b 	bl	801163e <LoRaMacClassBSwitchClass>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d113      	bne.n	800e1ba <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e192:	4a0e      	ldr	r2, [pc, #56]	; (800e1cc <SwitchClass+0x194>)
 800e194:	79fb      	ldrb	r3, [r7, #7]
 800e196:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800e19a:	e00e      	b.n	800e1ba <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800e19c:	79fb      	ldrb	r3, [r7, #7]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10d      	bne.n	800e1be <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e1a2:	4a0a      	ldr	r2, [pc, #40]	; (800e1cc <SwitchClass+0x194>)
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <SwitchClass+0x19c>)
 800e1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ae:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e1b4:	e003      	b.n	800e1be <SwitchClass+0x186>
            break;
 800e1b6:	bf00      	nop
 800e1b8:	e002      	b.n	800e1c0 <SwitchClass+0x188>
            break;
 800e1ba:	bf00      	nop
 800e1bc:	e000      	b.n	800e1c0 <SwitchClass+0x188>
            break;
 800e1be:	bf00      	nop
        }
    }

    return status;
 800e1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20000b50 	.word	0x20000b50
 800e1d0:	20000644 	.word	0x20000644
 800e1d4:	0801ba18 	.word	0x0801ba18

0800e1d8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	4603      	mov	r3, r0
 800e1e0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e1e2:	4b10      	ldr	r3, [pc, #64]	; (800e224 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e1e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e1e8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800e1ea:	79fb      	ldrb	r3, [r7, #7]
 800e1ec:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e1ee:	230d      	movs	r3, #13
 800e1f0:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e1f2:	4b0c      	ldr	r3, [pc, #48]	; (800e224 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e1f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e1fc:	230e      	movs	r3, #14
 800e1fe:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e200:	4b08      	ldr	r3, [pc, #32]	; (800e224 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e206:	f107 0210 	add.w	r2, r7, #16
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f005 f93b 	bl	8013488 <RegionGetPhyParam>
 800e212:	4603      	mov	r3, r0
 800e214:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	b2db      	uxtb	r3, r3
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3718      	adds	r7, #24
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20000b50 	.word	0x20000b50

0800e228 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	4603      	mov	r3, r0
 800e230:	71fb      	strb	r3, [r7, #7]
 800e232:	460b      	mov	r3, r1
 800e234:	71bb      	strb	r3, [r7, #6]
 800e236:	4613      	mov	r3, r2
 800e238:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e242:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff ffc6 	bl	800e1d8 <GetMaxAppPayloadWithoutFOptsLength>
 800e24c:	4603      	mov	r3, r0
 800e24e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	b29a      	uxth	r2, r3
 800e254:	797b      	ldrb	r3, [r7, #5]
 800e256:	b29b      	uxth	r3, r3
 800e258:	4413      	add	r3, r2
 800e25a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e25c:	89ba      	ldrh	r2, [r7, #12]
 800e25e:	89fb      	ldrh	r3, [r7, #14]
 800e260:	429a      	cmp	r2, r3
 800e262:	d804      	bhi.n	800e26e <ValidatePayloadLength+0x46>
 800e264:	89bb      	ldrh	r3, [r7, #12]
 800e266:	2bff      	cmp	r3, #255	; 0xff
 800e268:	d801      	bhi.n	800e26e <ValidatePayloadLength+0x46>
    {
        return true;
 800e26a:	2301      	movs	r3, #1
 800e26c:	e000      	b.n	800e270 <ValidatePayloadLength+0x48>
    }
    return false;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800e278:	b590      	push	{r4, r7, lr}
 800e27a:	b0a5      	sub	sp, #148	; 0x94
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	4608      	mov	r0, r1
 800e282:	4611      	mov	r1, r2
 800e284:	461a      	mov	r2, r3
 800e286:	4603      	mov	r3, r0
 800e288:	70fb      	strb	r3, [r7, #3]
 800e28a:	460b      	mov	r3, r1
 800e28c:	70bb      	strb	r3, [r7, #2]
 800e28e:	4613      	mov	r3, r2
 800e290:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800e298:	2300      	movs	r3, #0
 800e29a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800e2a4:	f000 bc6d 	b.w	800eb82 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f003 fc8d 	bl	8011bd0 <LoRaMacCommandsGetCmdSize>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	78fb      	ldrb	r3, [r7, #3]
 800e2bc:	441a      	add	r2, r3
 800e2be:	78bb      	ldrb	r3, [r7, #2]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	f300 8464 	bgt.w	800eb8e <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800e2c6:	78fb      	ldrb	r3, [r7, #3]
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	70fa      	strb	r2, [r7, #3]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	3b02      	subs	r3, #2
 800e2d6:	2b11      	cmp	r3, #17
 800e2d8:	f200 845b 	bhi.w	800eb92 <ProcessMacCommands+0x91a>
 800e2dc:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <ProcessMacCommands+0x6c>)
 800e2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e2:	bf00      	nop
 800e2e4:	0800e32d 	.word	0x0800e32d
 800e2e8:	0800e36f 	.word	0x0800e36f
 800e2ec:	0800e48b 	.word	0x0800e48b
 800e2f0:	0800e4c9 	.word	0x0800e4c9
 800e2f4:	0800e5b5 	.word	0x0800e5b5
 800e2f8:	0800e611 	.word	0x0800e611
 800e2fc:	0800e6cd 	.word	0x0800e6cd
 800e300:	0800e723 	.word	0x0800e723
 800e304:	0800e807 	.word	0x0800e807
 800e308:	0800eb93 	.word	0x0800eb93
 800e30c:	0800eb93 	.word	0x0800eb93
 800e310:	0800e8ad 	.word	0x0800e8ad
 800e314:	0800eb93 	.word	0x0800eb93
 800e318:	0800eb93 	.word	0x0800eb93
 800e31c:	0800e9c3 	.word	0x0800e9c3
 800e320:	0800e9f7 	.word	0x0800e9f7
 800e324:	0800ea87 	.word	0x0800ea87
 800e328:	0800eafd 	.word	0x0800eafd
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e32c:	2004      	movs	r0, #4
 800e32e:	f003 fe27 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 8424 	beq.w	800eb82 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e33a:	2104      	movs	r1, #4
 800e33c:	2000      	movs	r0, #0
 800e33e:	f003 fd93 	bl	8011e68 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e342:	78fb      	ldrb	r3, [r7, #3]
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	70fa      	strb	r2, [r7, #3]
 800e348:	461a      	mov	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4413      	add	r3, r2
 800e34e:	781a      	ldrb	r2, [r3, #0]
 800e350:	4bac      	ldr	r3, [pc, #688]	; (800e604 <ProcessMacCommands+0x38c>)
 800e352:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e356:	78fb      	ldrb	r3, [r7, #3]
 800e358:	1c5a      	adds	r2, r3, #1
 800e35a:	70fa      	strb	r2, [r7, #3]
 800e35c:	461a      	mov	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4413      	add	r3, r2
 800e362:	781a      	ldrb	r2, [r3, #0]
 800e364:	4ba7      	ldr	r3, [pc, #668]	; (800e604 <ProcessMacCommands+0x38c>)
 800e366:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800e36a:	f000 bc0a 	b.w	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800e36e:	2300      	movs	r3, #0
 800e370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e374:	2300      	movs	r3, #0
 800e376:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800e386:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e38a:	f083 0301 	eor.w	r3, r3, #1
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d078      	beq.n	800e486 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800e394:	2301      	movs	r3, #1
 800e396:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e39a:	78fb      	ldrb	r3, [r7, #3]
 800e39c:	3b01      	subs	r3, #1
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e3a4:	78ba      	ldrb	r2, [r7, #2]
 800e3a6:	78fb      	ldrb	r3, [r7, #3]
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e3b4:	4b94      	ldr	r3, [pc, #592]	; (800e608 <ProcessMacCommands+0x390>)
 800e3b6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800e3ba:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e3be:	4b92      	ldr	r3, [pc, #584]	; (800e608 <ProcessMacCommands+0x390>)
 800e3c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e3c4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e3c8:	4b8f      	ldr	r3, [pc, #572]	; (800e608 <ProcessMacCommands+0x390>)
 800e3ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e3ce:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e3d2:	4b8d      	ldr	r3, [pc, #564]	; (800e608 <ProcessMacCommands+0x390>)
 800e3d4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e3d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e3dc:	4b8a      	ldr	r3, [pc, #552]	; (800e608 <ProcessMacCommands+0x390>)
 800e3de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e3e2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e3e6:	4b88      	ldr	r3, [pc, #544]	; (800e608 <ProcessMacCommands+0x390>)
 800e3e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e3ec:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e3ee:	4b86      	ldr	r3, [pc, #536]	; (800e608 <ProcessMacCommands+0x390>)
 800e3f0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e3f4:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800e3f8:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800e3fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	4623      	mov	r3, r4
 800e40e:	f005 f8f8 	bl	8013602 <RegionLinkAdrReq>
 800e412:	4603      	mov	r3, r0
 800e414:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e418:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e41c:	f003 0307 	and.w	r3, r3, #7
 800e420:	2b07      	cmp	r3, #7
 800e422:	d10e      	bne.n	800e442 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e424:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800e428:	4b77      	ldr	r3, [pc, #476]	; (800e608 <ProcessMacCommands+0x390>)
 800e42a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e42e:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800e432:	4b75      	ldr	r3, [pc, #468]	; (800e608 <ProcessMacCommands+0x390>)
 800e434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e438:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800e43c:	4b72      	ldr	r3, [pc, #456]	; (800e608 <ProcessMacCommands+0x390>)
 800e43e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e442:	2300      	movs	r3, #0
 800e444:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e448:	e00b      	b.n	800e462 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e44a:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800e44e:	2201      	movs	r2, #1
 800e450:	4619      	mov	r1, r3
 800e452:	2003      	movs	r0, #3
 800e454:	f003 fa6c 	bl	8011930 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e458:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800e45c:	3301      	adds	r3, #1
 800e45e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e462:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e466:	4a69      	ldr	r2, [pc, #420]	; (800e60c <ProcessMacCommands+0x394>)
 800e468:	fba2 2303 	umull	r2, r3, r2, r3
 800e46c:	089b      	lsrs	r3, r3, #2
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e474:	429a      	cmp	r2, r3
 800e476:	d3e8      	bcc.n	800e44a <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e478:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e47c:	78fb      	ldrb	r3, [r7, #3]
 800e47e:	4413      	add	r3, r2
 800e480:	b2db      	uxtb	r3, r3
 800e482:	3b01      	subs	r3, #1
 800e484:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800e486:	bf00      	nop
 800e488:	e37b      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e48a:	78fb      	ldrb	r3, [r7, #3]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	70fa      	strb	r2, [r7, #3]
 800e490:	461a      	mov	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4413      	add	r3, r2
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	f003 030f 	and.w	r3, r3, #15
 800e49c:	b2da      	uxtb	r2, r3
 800e49e:	4b5a      	ldr	r3, [pc, #360]	; (800e608 <ProcessMacCommands+0x390>)
 800e4a0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e4a4:	4b58      	ldr	r3, [pc, #352]	; (800e608 <ProcessMacCommands+0x390>)
 800e4a6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	4093      	lsls	r3, r2
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	4b55      	ldr	r3, [pc, #340]	; (800e608 <ProcessMacCommands+0x390>)
 800e4b4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e4b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4619      	mov	r1, r3
 800e4c0:	2004      	movs	r0, #4
 800e4c2:	f003 fa35 	bl	8011930 <LoRaMacCommandsAddCmd>
                break;
 800e4c6:	e35c      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e4c8:	2307      	movs	r3, #7
 800e4ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e4ce:	78fb      	ldrb	r3, [r7, #3]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	091b      	lsrs	r3, r3, #4
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	b25b      	sxtb	r3, r3
 800e4dc:	f003 0307 	and.w	r3, r3, #7
 800e4e0:	b25b      	sxtb	r3, r3
 800e4e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e4e6:	78fb      	ldrb	r3, [r7, #3]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	b25b      	sxtb	r3, r3
 800e4f0:	f003 030f 	and.w	r3, r3, #15
 800e4f4:	b25b      	sxtb	r3, r3
 800e4f6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800e4fa:	78fb      	ldrb	r3, [r7, #3]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	70fa      	strb	r2, [r7, #3]
 800e506:	461a      	mov	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4413      	add	r3, r2
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	1c5a      	adds	r2, r3, #1
 800e514:	70fa      	strb	r2, [r7, #3]
 800e516:	461a      	mov	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4413      	add	r3, r2
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	021a      	lsls	r2, r3, #8
 800e520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e522:	4313      	orrs	r3, r2
 800e524:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e526:	78fb      	ldrb	r3, [r7, #3]
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	70fa      	strb	r2, [r7, #3]
 800e52c:	461a      	mov	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4413      	add	r3, r2
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	041a      	lsls	r2, r3, #16
 800e536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e538:	4313      	orrs	r3, r2
 800e53a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800e53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e53e:	2264      	movs	r2, #100	; 0x64
 800e540:	fb02 f303 	mul.w	r3, r2, r3
 800e544:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e546:	4b30      	ldr	r3, [pc, #192]	; (800e608 <ProcessMacCommands+0x390>)
 800e548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e54c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f005 f86f 	bl	8013636 <RegionRxParamSetupReq>
 800e558:	4603      	mov	r3, r0
 800e55a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e55e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e562:	f003 0307 	and.w	r3, r3, #7
 800e566:	2b07      	cmp	r3, #7
 800e568:	d117      	bne.n	800e59a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e56a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	4b25      	ldr	r3, [pc, #148]	; (800e608 <ProcessMacCommands+0x390>)
 800e572:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e576:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e57a:	b2da      	uxtb	r2, r3
 800e57c:	4b22      	ldr	r3, [pc, #136]	; (800e608 <ProcessMacCommands+0x390>)
 800e57e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e584:	4a20      	ldr	r2, [pc, #128]	; (800e608 <ProcessMacCommands+0x390>)
 800e586:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e58a:	4a1f      	ldr	r2, [pc, #124]	; (800e608 <ProcessMacCommands+0x390>)
 800e58c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e58e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800e592:	b2da      	uxtb	r2, r3
 800e594:	4b1c      	ldr	r3, [pc, #112]	; (800e608 <ProcessMacCommands+0x390>)
 800e596:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800e59a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e59e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e5a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	2005      	movs	r0, #5
 800e5ac:	f003 f9c0 	bl	8011930 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800e5b0:	bf00      	nop
 800e5b2:	e2e6      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e5b4:	23ff      	movs	r3, #255	; 0xff
 800e5b6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <ProcessMacCommands+0x38c>)
 800e5bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00d      	beq.n	800e5e0 <ProcessMacCommands+0x368>
 800e5c4:	4b0f      	ldr	r3, [pc, #60]	; (800e604 <ProcessMacCommands+0x38c>)
 800e5c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d007      	beq.n	800e5e0 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e5d0:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <ProcessMacCommands+0x38c>)
 800e5d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4798      	blx	r3
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800e5e0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800e5e4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e5e8:	787b      	ldrb	r3, [r7, #1]
 800e5ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e5f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	2006      	movs	r0, #6
 800e5fe:	f003 f997 	bl	8011930 <LoRaMacCommandsAddCmd>
                break;
 800e602:	e2be      	b.n	800eb82 <ProcessMacCommands+0x90a>
 800e604:	20000644 	.word	0x20000644
 800e608:	20000b50 	.word	0x20000b50
 800e60c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800e610:	2303      	movs	r3, #3
 800e612:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800e616:	78fb      	ldrb	r3, [r7, #3]
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	70fa      	strb	r2, [r7, #3]
 800e61c:	461a      	mov	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4413      	add	r3, r2
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	b25b      	sxtb	r3, r3
 800e626:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800e62a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e62e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e630:	78fb      	ldrb	r3, [r7, #3]
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	70fa      	strb	r2, [r7, #3]
 800e636:	461a      	mov	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4413      	add	r3, r2
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e640:	78fb      	ldrb	r3, [r7, #3]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	70fa      	strb	r2, [r7, #3]
 800e646:	461a      	mov	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4413      	add	r3, r2
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	021a      	lsls	r2, r3, #8
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	4313      	orrs	r3, r2
 800e654:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e656:	78fb      	ldrb	r3, [r7, #3]
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	70fa      	strb	r2, [r7, #3]
 800e65c:	461a      	mov	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4413      	add	r3, r2
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	041a      	lsls	r2, r3, #16
 800e666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e668:	4313      	orrs	r3, r2
 800e66a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	2264      	movs	r2, #100	; 0x64
 800e670:	fb02 f303 	mul.w	r3, r2, r3
 800e674:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800e67a:	78fb      	ldrb	r3, [r7, #3]
 800e67c:	1c5a      	adds	r2, r3, #1
 800e67e:	70fa      	strb	r2, [r7, #3]
 800e680:	461a      	mov	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4413      	add	r3, r2
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	b25b      	sxtb	r3, r3
 800e68a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800e68e:	4b85      	ldr	r3, [pc, #532]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e694:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e698:	4611      	mov	r1, r2
 800e69a:	4618      	mov	r0, r3
 800e69c:	f004 ffde 	bl	801365c <RegionNewChannelReq>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e6a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	db0a      	blt.n	800e6c8 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 800e6b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e6b6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800e6ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e6be:	2201      	movs	r2, #1
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	2007      	movs	r0, #7
 800e6c4:	f003 f934 	bl	8011930 <LoRaMacCommandsAddCmd>
                }
                break;
 800e6c8:	bf00      	nop
 800e6ca:	e25a      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800e6cc:	78fb      	ldrb	r3, [r7, #3]
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	70fa      	strb	r2, [r7, #3]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	f003 030f 	and.w	r3, r3, #15
 800e6de:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800e6e2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d104      	bne.n	800e6f4 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800e6ea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800e6f4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e6f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6fc:	fb02 f303 	mul.w	r3, r2, r3
 800e700:	461a      	mov	r2, r3
 800e702:	4b68      	ldr	r3, [pc, #416]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e704:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e706:	4b67      	ldr	r3, [pc, #412]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e70a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e70e:	4a65      	ldr	r2, [pc, #404]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e710:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800e712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e716:	2200      	movs	r2, #0
 800e718:	4619      	mov	r1, r3
 800e71a:	2008      	movs	r0, #8
 800e71c:	f003 f908 	bl	8011930 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800e720:	e22f      	b.n	800eb82 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800e722:	78fb      	ldrb	r3, [r7, #3]
 800e724:	1c5a      	adds	r2, r3, #1
 800e726:	70fa      	strb	r2, [r7, #3]
 800e728:	461a      	mov	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4413      	add	r3, r2
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800e740:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e744:	f003 0320 	and.w	r3, r3, #32
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d002      	beq.n	800e752 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800e74c:	2301      	movs	r3, #1
 800e74e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800e752:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e756:	f003 0310 	and.w	r3, r3, #16
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800e75e:	2301      	movs	r3, #1
 800e760:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800e764:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e768:	f003 030f 	and.w	r3, r3, #15
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800e772:	4b4c      	ldr	r3, [pc, #304]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e778:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e77c:	4611      	mov	r1, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 ff7f 	bl	8013682 <RegionTxParamSetupReq>
 800e784:	4603      	mov	r3, r0
 800e786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78a:	d03a      	beq.n	800e802 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800e78c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e790:	4b44      	ldr	r3, [pc, #272]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e792:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800e796:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e79a:	4b42      	ldr	r3, [pc, #264]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e79c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800e7a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4b40      	ldr	r3, [pc, #256]	; (800e8a8 <ProcessMacCommands+0x630>)
 800e7a8:	5c9b      	ldrb	r3, [r3, r2]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f2 f862 	bl	8000874 <__aeabi_ui2f>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	4a3c      	ldr	r2, [pc, #240]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e7b4:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e7bc:	4b39      	ldr	r3, [pc, #228]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e7be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e7c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e7c6:	4b37      	ldr	r3, [pc, #220]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f004 fe58 	bl	8013488 <RegionGetPhyParam>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	b25a      	sxtb	r2, r3
 800e7e0:	4b30      	ldr	r3, [pc, #192]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e7e2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	bfb8      	it	lt
 800e7ea:	4613      	movlt	r3, r2
 800e7ec:	b25a      	sxtb	r2, r3
 800e7ee:	4b2d      	ldr	r3, [pc, #180]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e7f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800e7f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	2009      	movs	r0, #9
 800e7fe:	f003 f897 	bl	8011930 <LoRaMacCommandsAddCmd>
                }
                break;
 800e802:	bf00      	nop
 800e804:	e1bd      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800e806:	2303      	movs	r3, #3
 800e808:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800e80c:	78fb      	ldrb	r3, [r7, #3]
 800e80e:	1c5a      	adds	r2, r3, #1
 800e810:	70fa      	strb	r2, [r7, #3]
 800e812:	461a      	mov	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4413      	add	r3, r2
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	70fa      	strb	r2, [r7, #3]
 800e824:	461a      	mov	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4413      	add	r3, r2
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e82e:	78fb      	ldrb	r3, [r7, #3]
 800e830:	1c5a      	adds	r2, r3, #1
 800e832:	70fa      	strb	r2, [r7, #3]
 800e834:	461a      	mov	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	4413      	add	r3, r2
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	021a      	lsls	r2, r3, #8
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	4313      	orrs	r3, r2
 800e842:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e844:	78fb      	ldrb	r3, [r7, #3]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	70fa      	strb	r2, [r7, #3]
 800e84a:	461a      	mov	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4413      	add	r3, r2
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	041a      	lsls	r2, r3, #16
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	4313      	orrs	r3, r2
 800e858:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	2264      	movs	r2, #100	; 0x64
 800e85e:	fb02 f303 	mul.w	r3, r2, r3
 800e862:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800e864:	4b0f      	ldr	r3, [pc, #60]	; (800e8a4 <ProcessMacCommands+0x62c>)
 800e866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e86a:	f107 0220 	add.w	r2, r7, #32
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f004 ff19 	bl	80136a8 <RegionDlChannelReq>
 800e876:	4603      	mov	r3, r0
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e87e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e882:	b25b      	sxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	db0a      	blt.n	800e89e <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 800e888:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e88c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800e890:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e894:	2201      	movs	r2, #1
 800e896:	4619      	mov	r1, r3
 800e898:	200a      	movs	r0, #10
 800e89a:	f003 f849 	bl	8011930 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800e89e:	bf00      	nop
 800e8a0:	e16f      	b.n	800eb82 <ProcessMacCommands+0x90a>
 800e8a2:	bf00      	nop
 800e8a4:	20000b50 	.word	0x20000b50
 800e8a8:	0801b9d0 	.word	0x0801b9d0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800e8ac:	200a      	movs	r0, #10
 800e8ae:	f003 fb67 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 8164 	beq.w	800eb82 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800e8ba:	210a      	movs	r1, #10
 800e8bc:	2000      	movs	r0, #0
 800e8be:	f003 fad3 	bl	8011e68 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800e8c2:	f107 0318 	add.w	r3, r7, #24
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800e8cc:	f107 0310 	add.w	r3, r7, #16
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800e8d6:	f107 0308 	add.w	r3, r7, #8
 800e8da:	2200      	movs	r2, #0
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	70fa      	strb	r2, [r7, #3]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	1c5a      	adds	r2, r3, #1
 800e8f4:	70fa      	strb	r2, [r7, #3]
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	021a      	lsls	r2, r3, #8
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	4313      	orrs	r3, r2
 800e904:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800e906:	78fb      	ldrb	r3, [r7, #3]
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	70fa      	strb	r2, [r7, #3]
 800e90c:	461a      	mov	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4413      	add	r3, r2
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	041a      	lsls	r2, r3, #16
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	4313      	orrs	r3, r2
 800e91a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800e91c:	78fb      	ldrb	r3, [r7, #3]
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	70fa      	strb	r2, [r7, #3]
 800e922:	461a      	mov	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4413      	add	r3, r2
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	061a      	lsls	r2, r3, #24
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	4313      	orrs	r3, r2
 800e930:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800e932:	78fb      	ldrb	r3, [r7, #3]
 800e934:	1c5a      	adds	r2, r3, #1
 800e936:	70fa      	strb	r2, [r7, #3]
 800e938:	461a      	mov	r2, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4413      	add	r3, r2
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	b21b      	sxth	r3, r3
 800e942:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800e944:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e948:	461a      	mov	r2, r3
 800e94a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e94e:	fb02 f303 	mul.w	r3, r2, r3
 800e952:	121b      	asrs	r3, r3, #8
 800e954:	b21b      	sxth	r3, r3
 800e956:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800e958:	f107 0310 	add.w	r3, r7, #16
 800e95c:	f107 0218 	add.w	r2, r7, #24
 800e960:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e964:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800e968:	693a      	ldr	r2, [r7, #16]
 800e96a:	4b8c      	ldr	r3, [pc, #560]	; (800eb9c <ProcessMacCommands+0x924>)
 800e96c:	4413      	add	r3, r2
 800e96e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800e970:	f107 0308 	add.w	r3, r7, #8
 800e974:	4618      	mov	r0, r3
 800e976:	f00a fc79 	bl	801926c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800e97a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e97e:	4b88      	ldr	r3, [pc, #544]	; (800eba0 <ProcessMacCommands+0x928>)
 800e980:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800e984:	9200      	str	r2, [sp, #0]
 800e986:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800e98a:	f107 0210 	add.w	r2, r7, #16
 800e98e:	ca06      	ldmia	r2, {r1, r2}
 800e990:	f00a fc05 	bl	801919e <SysTimeSub>
 800e994:	f107 0010 	add.w	r0, r7, #16
 800e998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e99e:	f107 0208 	add.w	r2, r7, #8
 800e9a2:	ca06      	ldmia	r2, {r1, r2}
 800e9a4:	f00a fbc2 	bl	801912c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800e9a8:	f107 0310 	add.w	r3, r7, #16
 800e9ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9b0:	f00a fc2e 	bl	8019210 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800e9b4:	f002 fe81 	bl	80116ba <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800e9b8:	4b79      	ldr	r3, [pc, #484]	; (800eba0 <ProcessMacCommands+0x928>)
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800e9c0:	e0df      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800e9c2:	200d      	movs	r0, #13
 800e9c4:	f003 fadc 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f000 80d9 	beq.w	800eb82 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800e9d0:	210d      	movs	r1, #13
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	f003 fa48 	bl	8011e68 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800e9d8:	4b71      	ldr	r3, [pc, #452]	; (800eba0 <ProcessMacCommands+0x928>)
 800e9da:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	f000 80cf 	beq.w	800eb82 <ProcessMacCommands+0x90a>
 800e9e4:	4b6e      	ldr	r3, [pc, #440]	; (800eba0 <ProcessMacCommands+0x928>)
 800e9e6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e9ea:	2b05      	cmp	r3, #5
 800e9ec:	f000 80c9 	beq.w	800eb82 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800e9f0:	f002 fe44 	bl	801167c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800e9f4:	e0c5      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ea00:	78fb      	ldrb	r3, [r7, #3]
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	70fa      	strb	r2, [r7, #3]
 800ea06:	461a      	mov	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ea10:	78fb      	ldrb	r3, [r7, #3]
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	70fa      	strb	r2, [r7, #3]
 800ea16:	461a      	mov	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	021b      	lsls	r3, r3, #8
 800ea20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ea22:	4313      	orrs	r3, r2
 800ea24:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ea26:	78fb      	ldrb	r3, [r7, #3]
 800ea28:	1c5a      	adds	r2, r3, #1
 800ea2a:	70fa      	strb	r2, [r7, #3]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4413      	add	r3, r2
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	041b      	lsls	r3, r3, #16
 800ea36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800ea3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea3e:	2264      	movs	r2, #100	; 0x64
 800ea40:	fb02 f303 	mul.w	r3, r2, r3
 800ea44:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ea46:	78fb      	ldrb	r3, [r7, #3]
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	70fa      	strb	r2, [r7, #3]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4413      	add	r3, r2
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	f003 030f 	and.w	r3, r3, #15
 800ea58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ea5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ea60:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ea62:	4618      	mov	r0, r3
 800ea64:	f002 fe10 	bl	8011688 <LoRaMacClassBPingSlotChannelReq>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800ea6e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800ea72:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800ea76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	2011      	movs	r0, #17
 800ea80:	f002 ff56 	bl	8011930 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800ea84:	e07d      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ea86:	200e      	movs	r0, #14
 800ea88:	f003 fa7a 	bl	8011f80 <LoRaMacConfirmQueueIsCmdActive>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d077      	beq.n	800eb82 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ea92:	210e      	movs	r1, #14
 800ea94:	2000      	movs	r0, #0
 800ea96:	f003 f9e7 	bl	8011e68 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800eaa6:	78fb      	ldrb	r3, [r7, #3]
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	70fa      	strb	r2, [r7, #3]
 800eaac:	461a      	mov	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4413      	add	r3, r2
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800eab8:	78fb      	ldrb	r3, [r7, #3]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	70fa      	strb	r2, [r7, #3]
 800eabe:	461a      	mov	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	4413      	add	r3, r2
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	021b      	lsls	r3, r3, #8
 800eac8:	b21a      	sxth	r2, r3
 800eaca:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800eace:	4313      	orrs	r3, r2
 800ead0:	b21b      	sxth	r3, r3
 800ead2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	70fa      	strb	r2, [r7, #3]
 800eadc:	461a      	mov	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4413      	add	r3, r2
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800eae8:	4b2e      	ldr	r3, [pc, #184]	; (800eba4 <ProcessMacCommands+0x92c>)
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800eaf0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f002 fdd3 	bl	80116a0 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800eafa:	e042      	b.n	800eb82 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800eb02:	78fb      	ldrb	r3, [r7, #3]
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	70fa      	strb	r2, [r7, #3]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800eb14:	78fb      	ldrb	r3, [r7, #3]
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	70fa      	strb	r2, [r7, #3]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4413      	add	r3, r2
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	021b      	lsls	r3, r3, #8
 800eb24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800eb2e:	78fb      	ldrb	r3, [r7, #3]
 800eb30:	1c5a      	adds	r2, r3, #1
 800eb32:	70fa      	strb	r2, [r7, #3]
 800eb34:	461a      	mov	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4413      	add	r3, r2
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	041b      	lsls	r3, r3, #16
 800eb3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb42:	4313      	orrs	r3, r2
 800eb44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800eb48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb4c:	2264      	movs	r2, #100	; 0x64
 800eb4e:	fb02 f303 	mul.w	r3, r2, r3
 800eb52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800eb56:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800eb5a:	f002 fdb4 	bl	80116c6 <LoRaMacClassBBeaconFreqReq>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d003      	beq.n	800eb6c <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 800eb64:	2301      	movs	r3, #1
 800eb66:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800eb6a:	e002      	b.n	800eb72 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800eb72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb76:	2201      	movs	r2, #1
 800eb78:	4619      	mov	r1, r3
 800eb7a:	2013      	movs	r0, #19
 800eb7c:	f002 fed8 	bl	8011930 <LoRaMacCommandsAddCmd>
                }
                break;
 800eb80:	bf00      	nop
    while( macIndex < commandsSize )
 800eb82:	78fa      	ldrb	r2, [r7, #3]
 800eb84:	78bb      	ldrb	r3, [r7, #2]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	f4ff ab8e 	bcc.w	800e2a8 <ProcessMacCommands+0x30>
 800eb8c:	e002      	b.n	800eb94 <ProcessMacCommands+0x91c>
            return;
 800eb8e:	bf00      	nop
 800eb90:	e000      	b.n	800eb94 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800eb92:	bf00      	nop
        }
    }
}
 800eb94:	378c      	adds	r7, #140	; 0x8c
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd90      	pop	{r4, r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	12d53d80 	.word	0x12d53d80
 800eba0:	20000644 	.word	0x20000644
 800eba4:	200019a8 	.word	0x200019a8

0800eba8 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b08e      	sub	sp, #56	; 0x38
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	607a      	str	r2, [r7, #4]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	72fb      	strb	r3, [r7, #11]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebc2:	4b65      	ldr	r3, [pc, #404]	; (800ed58 <Send+0x1b0>)
 800ebc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ebcc:	4b62      	ldr	r3, [pc, #392]	; (800ed58 <Send+0x1b0>)
 800ebce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ebd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ebd6:	4b60      	ldr	r3, [pc, #384]	; (800ed58 <Send+0x1b0>)
 800ebd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebda:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ebdc:	4b5e      	ldr	r3, [pc, #376]	; (800ed58 <Send+0x1b0>)
 800ebde:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800ebe6:	2307      	movs	r3, #7
 800ebe8:	e0b1      	b.n	800ed4e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ebea:	4b5b      	ldr	r3, [pc, #364]	; (800ed58 <Send+0x1b0>)
 800ebec:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d102      	bne.n	800ebfa <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ebf4:	4b58      	ldr	r3, [pc, #352]	; (800ed58 <Send+0x1b0>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800ec00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec04:	f36f 0303 	bfc	r3, #0, #4
 800ec08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ec0c:	4b52      	ldr	r3, [pc, #328]	; (800ed58 <Send+0x1b0>)
 800ec0e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800ec12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec16:	f362 13c7 	bfi	r3, r2, #7, #1
 800ec1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec1e:	4b4e      	ldr	r3, [pc, #312]	; (800ed58 <Send+0x1b0>)
 800ec20:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d106      	bne.n	800ec36 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800ec28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec2c:	f043 0310 	orr.w	r3, r3, #16
 800ec30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800ec34:	e005      	b.n	800ec42 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800ec36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec3a:	f36f 1304 	bfc	r3, #4, #1
 800ec3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800ec42:	4b45      	ldr	r3, [pc, #276]	; (800ed58 <Send+0x1b0>)
 800ec44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d005      	beq.n	800ec58 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800ec4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec50:	f043 0320 	orr.w	r3, r3, #32
 800ec54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800ec58:	4b3f      	ldr	r3, [pc, #252]	; (800ed58 <Send+0x1b0>)
 800ec5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ec5e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800ec60:	2301      	movs	r3, #1
 800ec62:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ec64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	bf14      	ite	ne
 800ec72:	2301      	movne	r3, #1
 800ec74:	2300      	moveq	r3, #0
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ec7a:	4b37      	ldr	r3, [pc, #220]	; (800ed58 <Send+0x1b0>)
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ec80:	4b36      	ldr	r3, [pc, #216]	; (800ed5c <Send+0x1b4>)
 800ec82:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800ec86:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800ec88:	4b34      	ldr	r3, [pc, #208]	; (800ed5c <Send+0x1b4>)
 800ec8a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800ec8e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ec90:	4b31      	ldr	r3, [pc, #196]	; (800ed58 <Send+0x1b0>)
 800ec92:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ec96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ec9a:	4b2f      	ldr	r3, [pc, #188]	; (800ed58 <Send+0x1b0>)
 800ec9c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800eca0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eca4:	4b2c      	ldr	r3, [pc, #176]	; (800ed58 <Send+0x1b0>)
 800eca6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ecaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800ecae:	4b2a      	ldr	r3, [pc, #168]	; (800ed58 <Send+0x1b0>)
 800ecb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ecb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800ecb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ecbc:	f107 0014 	add.w	r0, r7, #20
 800ecc0:	4a27      	ldr	r2, [pc, #156]	; (800ed60 <Send+0x1b8>)
 800ecc2:	4928      	ldr	r1, [pc, #160]	; (800ed64 <Send+0x1bc>)
 800ecc4:	f002 fc1a 	bl	80114fc <LoRaMacAdrCalcNext>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ecd0:	f362 1386 	bfi	r3, r2, #6, #1
 800ecd4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800ecd8:	7afa      	ldrb	r2, [r7, #11]
 800ecda:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ecde:	893b      	ldrh	r3, [r7, #8]
 800ece0:	9300      	str	r3, [sp, #0]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f000 fc2d 	bl	800f544 <PrepareFrame>
 800ecea:	4603      	mov	r3, r0
 800ecec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ecf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d003      	beq.n	800ed00 <Send+0x158>
 800ecf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecfc:	2b0a      	cmp	r3, #10
 800ecfe:	d107      	bne.n	800ed10 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800ed00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 f96d 	bl	800efe4 <ScheduleTx>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800ed10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00a      	beq.n	800ed2e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800ed18:	4a0f      	ldr	r2, [pc, #60]	; (800ed58 <Send+0x1b0>)
 800ed1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ed1e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800ed22:	4a0d      	ldr	r2, [pc, #52]	; (800ed58 <Send+0x1b0>)
 800ed24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ed28:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800ed2c:	e00d      	b.n	800ed4a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800ed2e:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <Send+0x1b0>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	4a07      	ldr	r2, [pc, #28]	; (800ed58 <Send+0x1b0>)
 800ed3a:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ed3c:	f002 fe70 	bl	8011a20 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ed46:	2313      	movs	r3, #19
 800ed48:	e001      	b.n	800ed4e <Send+0x1a6>
        }
    }
    return status;
 800ed4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3730      	adds	r7, #48	; 0x30
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20000b50 	.word	0x20000b50
 800ed5c:	20000644 	.word	0x20000644
 800ed60:	20000b88 	.word	0x20000b88
 800ed64:	20000b89 	.word	0x20000b89

0800ed68 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800ed7e:	79fb      	ldrb	r3, [r7, #7]
 800ed80:	2bff      	cmp	r3, #255	; 0xff
 800ed82:	d129      	bne.n	800edd8 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800ed84:	2000      	movs	r0, #0
 800ed86:	f7ff f957 	bl	800e038 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ed8a:	4b1a      	ldr	r3, [pc, #104]	; (800edf4 <SendReJoinReq+0x8c>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ed92:	4b18      	ldr	r3, [pc, #96]	; (800edf4 <SendReJoinReq+0x8c>)
 800ed94:	4a18      	ldr	r2, [pc, #96]	; (800edf8 <SendReJoinReq+0x90>)
 800ed96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ed9a:	4b16      	ldr	r3, [pc, #88]	; (800edf4 <SendReJoinReq+0x8c>)
 800ed9c:	22ff      	movs	r2, #255	; 0xff
 800ed9e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800eda2:	7b3b      	ldrb	r3, [r7, #12]
 800eda4:	f36f 1347 	bfc	r3, #5, #3
 800eda8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800edaa:	7b3a      	ldrb	r2, [r7, #12]
 800edac:	4b11      	ldr	r3, [pc, #68]	; (800edf4 <SendReJoinReq+0x8c>)
 800edae:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800edb2:	f7fc fb99 	bl	800b4e8 <SecureElementGetJoinEui>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2208      	movs	r2, #8
 800edba:	4619      	mov	r1, r3
 800edbc:	480f      	ldr	r0, [pc, #60]	; (800edfc <SendReJoinReq+0x94>)
 800edbe:	f006 fe76 	bl	8015aae <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800edc2:	f7fc fb6f 	bl	800b4a4 <SecureElementGetDevEui>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2208      	movs	r2, #8
 800edca:	4619      	mov	r1, r3
 800edcc:	480c      	ldr	r0, [pc, #48]	; (800ee00 <SendReJoinReq+0x98>)
 800edce:	f006 fe6e 	bl	8015aae <memcpy1>

            allowDelayedTx = false;
 800edd2:	2300      	movs	r3, #0
 800edd4:	73fb      	strb	r3, [r7, #15]

            break;
 800edd6:	e002      	b.n	800edde <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800edd8:	2302      	movs	r3, #2
 800edda:	73bb      	strb	r3, [r7, #14]
            break;
 800eddc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 f8ff 	bl	800efe4 <ScheduleTx>
 800ede6:	4603      	mov	r3, r0
 800ede8:	73bb      	strb	r3, [r7, #14]
    return status;
 800edea:	7bbb      	ldrb	r3, [r7, #14]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	20000644 	.word	0x20000644
 800edf8:	20000646 	.word	0x20000646
 800edfc:	20000752 	.word	0x20000752
 800ee00:	2000075a 	.word	0x2000075a

0800ee04 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ee08:	f002 fbe7 	bl	80115da <LoRaMacClassBIsBeaconExpected>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d001      	beq.n	800ee16 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ee12:	230e      	movs	r3, #14
 800ee14:	e013      	b.n	800ee3e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ee16:	4b0b      	ldr	r3, [pc, #44]	; (800ee44 <CheckForClassBCollision+0x40>)
 800ee18:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d10d      	bne.n	800ee3c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ee20:	f002 fbe2 	bl	80115e8 <LoRaMacClassBIsPingExpected>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ee2a:	230f      	movs	r3, #15
 800ee2c:	e007      	b.n	800ee3e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ee2e:	f002 fbe2 	bl	80115f6 <LoRaMacClassBIsMulticastExpected>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ee38:	230f      	movs	r3, #15
 800ee3a:	e000      	b.n	800ee3e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	20000b50 	.word	0x20000b50

0800ee48 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800ee48:	b590      	push	{r4, r7, lr}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee4e:	4b2d      	ldr	r3, [pc, #180]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee50:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ee54:	4b2b      	ldr	r3, [pc, #172]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee56:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee5a:	4b2a      	ldr	r3, [pc, #168]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee5c:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800ee60:	4b28      	ldr	r3, [pc, #160]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee62:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800ee66:	4b27      	ldr	r3, [pc, #156]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ee6c:	b25b      	sxtb	r3, r3
 800ee6e:	f004 fc72 	bl	8013756 <RegionApplyDrOffset>
 800ee72:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee74:	b259      	sxtb	r1, r3
 800ee76:	4b23      	ldr	r3, [pc, #140]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee78:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ee7c:	4b21      	ldr	r3, [pc, #132]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee80:	4821      	ldr	r0, [pc, #132]	; (800ef08 <ComputeRxWindowParameters+0xc0>)
 800ee82:	9000      	str	r0, [sp, #0]
 800ee84:	4620      	mov	r0, r4
 800ee86:	f004 fb76 	bl	8013576 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee8a:	4b1e      	ldr	r3, [pc, #120]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee8c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800ee90:	4b1c      	ldr	r3, [pc, #112]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee92:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee96:	b259      	sxtb	r1, r3
 800ee98:	4b1a      	ldr	r3, [pc, #104]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800ee9a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ee9e:	4b19      	ldr	r3, [pc, #100]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800eea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eea2:	4c1a      	ldr	r4, [pc, #104]	; (800ef0c <ComputeRxWindowParameters+0xc4>)
 800eea4:	9400      	str	r4, [sp, #0]
 800eea6:	f004 fb66 	bl	8013576 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800eeaa:	4b16      	ldr	r3, [pc, #88]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800eeac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeae:	4a18      	ldr	r2, [pc, #96]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eeb0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800eeb4:	4413      	add	r3, r2
 800eeb6:	4a16      	ldr	r2, [pc, #88]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eeb8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800eebc:	4b11      	ldr	r3, [pc, #68]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800eebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eec0:	4a13      	ldr	r2, [pc, #76]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eec2:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800eec6:	4413      	add	r3, r2
 800eec8:	4a11      	ldr	r2, [pc, #68]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eeca:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800eece:	4b0d      	ldr	r3, [pc, #52]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800eed0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d111      	bne.n	800eefc <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800eed8:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800eeda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eedc:	4a0c      	ldr	r2, [pc, #48]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eede:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800eee2:	4413      	add	r3, r2
 800eee4:	4a0a      	ldr	r2, [pc, #40]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eee6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800eeea:	4b06      	ldr	r3, [pc, #24]	; (800ef04 <ComputeRxWindowParameters+0xbc>)
 800eeec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeee:	4a08      	ldr	r2, [pc, #32]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eef0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800eef4:	4413      	add	r3, r2
 800eef6:	4a06      	ldr	r2, [pc, #24]	; (800ef10 <ComputeRxWindowParameters+0xc8>)
 800eef8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800eefc:	bf00      	nop
 800eefe:	3704      	adds	r7, #4
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd90      	pop	{r4, r7, pc}
 800ef04:	20000b50 	.word	0x20000b50
 800ef08:	200009fc 	.word	0x200009fc
 800ef0c:	20000a10 	.word	0x20000a10
 800ef10:	20000644 	.word	0x20000644

0800ef14 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ef1e:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <VerifyTxFrame+0x58>)
 800ef20:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01b      	beq.n	800ef60 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ef28:	1d3b      	adds	r3, r7, #4
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f002 fdbe 	bl	8011aac <LoRaMacCommandsGetSizeSerializedCmds>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d001      	beq.n	800ef3a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ef36:	2313      	movs	r3, #19
 800ef38:	e013      	b.n	800ef62 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ef3a:	4b0d      	ldr	r3, [pc, #52]	; (800ef70 <VerifyTxFrame+0x5c>)
 800ef3c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ef40:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <VerifyTxFrame+0x58>)
 800ef42:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	b2d2      	uxtb	r2, r2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff f96c 	bl	800e228 <ValidatePayloadLength>
 800ef50:	4603      	mov	r3, r0
 800ef52:	f083 0301 	eor.w	r3, r3, #1
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ef5c:	2308      	movs	r3, #8
 800ef5e:	e000      	b.n	800ef62 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20000b50 	.word	0x20000b50
 800ef70:	20000644 	.word	0x20000644

0800ef74 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ef7a:	4b18      	ldr	r3, [pc, #96]	; (800efdc <SerializeTxFrame+0x68>)
 800ef7c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <SerializeTxFrame+0x16>
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d011      	beq.n	800efac <SerializeTxFrame+0x38>
 800ef88:	e021      	b.n	800efce <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ef8a:	4815      	ldr	r0, [pc, #84]	; (800efe0 <SerializeTxFrame+0x6c>)
 800ef8c:	f004 f8f3 	bl	8013176 <LoRaMacSerializerJoinRequest>
 800ef90:	4603      	mov	r3, r0
 800ef92:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef9a:	2311      	movs	r3, #17
 800ef9c:	e01a      	b.n	800efd4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ef9e:	4b0f      	ldr	r3, [pc, #60]	; (800efdc <SerializeTxFrame+0x68>)
 800efa0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <SerializeTxFrame+0x68>)
 800efa8:	801a      	strh	r2, [r3, #0]
            break;
 800efaa:	e012      	b.n	800efd2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800efac:	480c      	ldr	r0, [pc, #48]	; (800efe0 <SerializeTxFrame+0x6c>)
 800efae:	f004 f964 	bl	801327a <LoRaMacSerializerData>
 800efb2:	4603      	mov	r3, r0
 800efb4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800efbc:	2311      	movs	r3, #17
 800efbe:	e009      	b.n	800efd4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800efc0:	4b06      	ldr	r3, [pc, #24]	; (800efdc <SerializeTxFrame+0x68>)
 800efc2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	4b04      	ldr	r3, [pc, #16]	; (800efdc <SerializeTxFrame+0x68>)
 800efca:	801a      	strh	r2, [r3, #0]
            break;
 800efcc:	e001      	b.n	800efd2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800efce:	2303      	movs	r3, #3
 800efd0:	e000      	b.n	800efd4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	20000644 	.word	0x20000644
 800efe0:	2000074c 	.word	0x2000074c

0800efe4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b090      	sub	sp, #64	; 0x40
 800efe8:	af02      	add	r7, sp, #8
 800efea:	4603      	mov	r3, r0
 800efec:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efee:	2303      	movs	r3, #3
 800eff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800eff4:	f7ff ff06 	bl	800ee04 <CheckForClassBCollision>
 800eff8:	4603      	mov	r3, r0
 800effa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800effe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <ScheduleTx+0x28>
    {
        return status;
 800f006:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f00a:	e08f      	b.n	800f12c <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800f00c:	f000 f8fa 	bl	800f204 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f010:	f7ff ffb0 	bl	800ef74 <SerializeTxFrame>
 800f014:	4603      	mov	r3, r0
 800f016:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f01a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d002      	beq.n	800f028 <ScheduleTx+0x44>
    {
        return status;
 800f022:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f026:	e081      	b.n	800f12c <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f028:	4b42      	ldr	r3, [pc, #264]	; (800f134 <ScheduleTx+0x150>)
 800f02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f02c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f02e:	4b41      	ldr	r3, [pc, #260]	; (800f134 <ScheduleTx+0x150>)
 800f030:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f034:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f036:	4b3f      	ldr	r3, [pc, #252]	; (800f134 <ScheduleTx+0x150>)
 800f038:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800f03c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f03e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f042:	4618      	mov	r0, r3
 800f044:	f00a f94a 	bl	80192dc <SysTimeGetMcuTime>
 800f048:	4638      	mov	r0, r7
 800f04a:	4b3a      	ldr	r3, [pc, #232]	; (800f134 <ScheduleTx+0x150>)
 800f04c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800f050:	9200      	str	r2, [sp, #0]
 800f052:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f056:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f05a:	ca06      	ldmia	r2, {r1, r2}
 800f05c:	f00a f89f 	bl	801919e <SysTimeSub>
 800f060:	f107 0320 	add.w	r3, r7, #32
 800f064:	463a      	mov	r2, r7
 800f066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f06a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f06e:	4b31      	ldr	r3, [pc, #196]	; (800f134 <ScheduleTx+0x150>)
 800f070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f072:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800f074:	2300      	movs	r3, #0
 800f076:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800f07a:	2301      	movs	r3, #1
 800f07c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f07e:	4b2e      	ldr	r3, [pc, #184]	; (800f138 <ScheduleTx+0x154>)
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f084:	4b2b      	ldr	r3, [pc, #172]	; (800f134 <ScheduleTx+0x150>)
 800f086:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d104      	bne.n	800f098 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800f08e:	2301      	movs	r3, #1
 800f090:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800f094:	2300      	movs	r3, #0
 800f096:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f098:	4b26      	ldr	r3, [pc, #152]	; (800f134 <ScheduleTx+0x150>)
 800f09a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f09e:	f107 0114 	add.w	r1, r7, #20
 800f0a2:	4b26      	ldr	r3, [pc, #152]	; (800f13c <ScheduleTx+0x158>)
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	4b26      	ldr	r3, [pc, #152]	; (800f140 <ScheduleTx+0x15c>)
 800f0a8:	4a26      	ldr	r2, [pc, #152]	; (800f144 <ScheduleTx+0x160>)
 800f0aa:	f004 fb2a 	bl	8013702 <RegionNextChannel>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800f0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d022      	beq.n	800f102 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800f0bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0c0:	2b0b      	cmp	r3, #11
 800f0c2:	d11b      	bne.n	800f0fc <ScheduleTx+0x118>
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d018      	beq.n	800f0fc <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f0ca:	4b1b      	ldr	r3, [pc, #108]	; (800f138 <ScheduleTx+0x154>)
 800f0cc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d011      	beq.n	800f0f8 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f0d4:	4b18      	ldr	r3, [pc, #96]	; (800f138 <ScheduleTx+0x154>)
 800f0d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f0da:	f043 0320 	orr.w	r3, r3, #32
 800f0de:	4a16      	ldr	r2, [pc, #88]	; (800f138 <ScheduleTx+0x154>)
 800f0e0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f0e4:	4b14      	ldr	r3, [pc, #80]	; (800f138 <ScheduleTx+0x154>)
 800f0e6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	4816      	ldr	r0, [pc, #88]	; (800f148 <ScheduleTx+0x164>)
 800f0ee:	f00a fe99 	bl	8019e24 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800f0f2:	4815      	ldr	r0, [pc, #84]	; (800f148 <ScheduleTx+0x164>)
 800f0f4:	f00a fdb8 	bl	8019c68 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	e017      	b.n	800f12c <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f0fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f100:	e014      	b.n	800f12c <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800f102:	f7ff fea1 	bl	800ee48 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800f106:	f7ff ff05 	bl	800ef14 <VerifyTxFrame>
 800f10a:	4603      	mov	r3, r0
 800f10c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f114:	2b00      	cmp	r3, #0
 800f116:	d002      	beq.n	800f11e <ScheduleTx+0x13a>
    {
        return status;
 800f118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f11c:	e006      	b.n	800f12c <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800f11e:	4b06      	ldr	r3, [pc, #24]	; (800f138 <ScheduleTx+0x154>)
 800f120:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f124:	4618      	mov	r0, r3
 800f126:	f000 fb29 	bl	800f77c <SendFrameOnChannel>
 800f12a:	4603      	mov	r3, r0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3738      	adds	r7, #56	; 0x38
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	20000b50 	.word	0x20000b50
 800f138:	20000644 	.word	0x20000644
 800f13c:	20000b80 	.word	0x20000b80
 800f140:	20000acc 	.word	0x20000acc
 800f144:	20000a59 	.word	0x20000a59
 800f148:	200009ac 	.word	0x200009ac

0800f14c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	460a      	mov	r2, r1
 800f156:	71fb      	strb	r3, [r7, #7]
 800f158:	4613      	mov	r3, r2
 800f15a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f15c:	2313      	movs	r3, #19
 800f15e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800f164:	4b25      	ldr	r3, [pc, #148]	; (800f1fc <SecureFrame+0xb0>)
 800f166:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <SecureFrame+0x28>
 800f16e:	2b04      	cmp	r3, #4
 800f170:	d011      	beq.n	800f196 <SecureFrame+0x4a>
 800f172:	e03b      	b.n	800f1ec <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f174:	4822      	ldr	r0, [pc, #136]	; (800f200 <SecureFrame+0xb4>)
 800f176:	f003 fbc7 	bl	8012908 <LoRaMacCryptoPrepareJoinRequest>
 800f17a:	4603      	mov	r3, r0
 800f17c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d001      	beq.n	800f188 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f184:	2311      	movs	r3, #17
 800f186:	e034      	b.n	800f1f2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f188:	4b1c      	ldr	r3, [pc, #112]	; (800f1fc <SecureFrame+0xb0>)
 800f18a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f18e:	b29a      	uxth	r2, r3
 800f190:	4b1a      	ldr	r3, [pc, #104]	; (800f1fc <SecureFrame+0xb0>)
 800f192:	801a      	strh	r2, [r3, #0]
            break;
 800f194:	e02c      	b.n	800f1f0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f196:	f107 0308 	add.w	r3, r7, #8
 800f19a:	4618      	mov	r0, r3
 800f19c:	f003 face 	bl	801273c <LoRaMacCryptoGetFCntUp>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f1a6:	2312      	movs	r3, #18
 800f1a8:	e023      	b.n	800f1f2 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800f1aa:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <SecureFrame+0xb0>)
 800f1ac:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d104      	bne.n	800f1be <SecureFrame+0x72>
 800f1b4:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <SecureFrame+0xb0>)
 800f1b6:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d902      	bls.n	800f1c4 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f1c4:	68b8      	ldr	r0, [r7, #8]
 800f1c6:	79ba      	ldrb	r2, [r7, #6]
 800f1c8:	79f9      	ldrb	r1, [r7, #7]
 800f1ca:	4b0d      	ldr	r3, [pc, #52]	; (800f200 <SecureFrame+0xb4>)
 800f1cc:	f003 fcb4 	bl	8012b38 <LoRaMacCryptoSecureMessage>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d001      	beq.n	800f1de <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f1da:	2311      	movs	r3, #17
 800f1dc:	e009      	b.n	800f1f2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f1de:	4b07      	ldr	r3, [pc, #28]	; (800f1fc <SecureFrame+0xb0>)
 800f1e0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <SecureFrame+0xb0>)
 800f1e8:	801a      	strh	r2, [r3, #0]
            break;
 800f1ea:	e001      	b.n	800f1f0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	e000      	b.n	800f1f2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20000644 	.word	0x20000644
 800f200:	2000074c 	.word	0x2000074c

0800f204 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800f204:	b480      	push	{r7}
 800f206:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800f208:	4b09      	ldr	r3, [pc, #36]	; (800f230 <CalculateBackOff+0x2c>)
 800f20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10a      	bne.n	800f226 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800f210:	4b07      	ldr	r3, [pc, #28]	; (800f230 <CalculateBackOff+0x2c>)
 800f212:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800f216:	3b01      	subs	r3, #1
 800f218:	4a06      	ldr	r2, [pc, #24]	; (800f234 <CalculateBackOff+0x30>)
 800f21a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800f21e:	fb02 f303 	mul.w	r3, r2, r3
 800f222:	4a03      	ldr	r2, [pc, #12]	; (800f230 <CalculateBackOff+0x2c>)
 800f224:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800f226:	bf00      	nop
 800f228:	46bd      	mov	sp, r7
 800f22a:	bc80      	pop	{r7}
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	20000b50 	.word	0x20000b50
 800f234:	20000644 	.word	0x20000644

0800f238 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	4603      	mov	r3, r0
 800f240:	7139      	strb	r1, [r7, #4]
 800f242:	71fb      	strb	r3, [r7, #7]
 800f244:	4613      	mov	r3, r2
 800f246:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d002      	beq.n	800f254 <RemoveMacCommands+0x1c>
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d10d      	bne.n	800f270 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800f254:	79bb      	ldrb	r3, [r7, #6]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d108      	bne.n	800f26c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800f25a:	793b      	ldrb	r3, [r7, #4]
 800f25c:	f003 0320 	and.w	r3, r3, #32
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	d004      	beq.n	800f270 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800f266:	f002 fbff 	bl	8011a68 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800f26a:	e001      	b.n	800f270 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800f26c:	f002 fbfc 	bl	8011a68 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800f270:	bf00      	nop
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 800f278:	b5b0      	push	{r4, r5, r7, lr}
 800f27a:	b08e      	sub	sp, #56	; 0x38
 800f27c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f27e:	4b68      	ldr	r3, [pc, #416]	; (800f420 <ResetMacParameters+0x1a8>)
 800f280:	2200      	movs	r2, #0
 800f282:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f286:	4b66      	ldr	r3, [pc, #408]	; (800f420 <ResetMacParameters+0x1a8>)
 800f288:	2200      	movs	r2, #0
 800f28a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800f28c:	4b65      	ldr	r3, [pc, #404]	; (800f424 <ResetMacParameters+0x1ac>)
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800f294:	4b63      	ldr	r3, [pc, #396]	; (800f424 <ResetMacParameters+0x1ac>)
 800f296:	2201      	movs	r2, #1
 800f298:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f29c:	4b61      	ldr	r3, [pc, #388]	; (800f424 <ResetMacParameters+0x1ac>)
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800f2a4:	4b5f      	ldr	r3, [pc, #380]	; (800f424 <ResetMacParameters+0x1ac>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800f2ac:	4b5c      	ldr	r3, [pc, #368]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f2b4:	4b5a      	ldr	r3, [pc, #360]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f2bc:	4b58      	ldr	r3, [pc, #352]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2be:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 800f2c2:	4b57      	ldr	r3, [pc, #348]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f2c8:	4b55      	ldr	r3, [pc, #340]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2ca:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800f2ce:	4b54      	ldr	r3, [pc, #336]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f2d4:	4b52      	ldr	r3, [pc, #328]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2d6:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 800f2da:	4b51      	ldr	r3, [pc, #324]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f2e0:	4b4f      	ldr	r3, [pc, #316]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2e2:	4a4f      	ldr	r2, [pc, #316]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2e4:	3364      	adds	r3, #100	; 0x64
 800f2e6:	32a8      	adds	r2, #168	; 0xa8
 800f2e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2ec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f2f0:	4b4b      	ldr	r3, [pc, #300]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2f2:	4a4b      	ldr	r2, [pc, #300]	; (800f420 <ResetMacParameters+0x1a8>)
 800f2f4:	336c      	adds	r3, #108	; 0x6c
 800f2f6:	32b0      	adds	r2, #176	; 0xb0
 800f2f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2fc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f300:	4b47      	ldr	r3, [pc, #284]	; (800f420 <ResetMacParameters+0x1a8>)
 800f302:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800f306:	4b46      	ldr	r3, [pc, #280]	; (800f420 <ResetMacParameters+0x1a8>)
 800f308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f30c:	4b44      	ldr	r3, [pc, #272]	; (800f420 <ResetMacParameters+0x1a8>)
 800f30e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 800f312:	4b43      	ldr	r3, [pc, #268]	; (800f420 <ResetMacParameters+0x1a8>)
 800f314:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f318:	4b41      	ldr	r3, [pc, #260]	; (800f420 <ResetMacParameters+0x1a8>)
 800f31a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f31e:	4a40      	ldr	r2, [pc, #256]	; (800f420 <ResetMacParameters+0x1a8>)
 800f320:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f322:	4b3f      	ldr	r3, [pc, #252]	; (800f420 <ResetMacParameters+0x1a8>)
 800f324:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f328:	4a3d      	ldr	r2, [pc, #244]	; (800f420 <ResetMacParameters+0x1a8>)
 800f32a:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800f32c:	4b3d      	ldr	r3, [pc, #244]	; (800f424 <ResetMacParameters+0x1ac>)
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800f334:	4b3a      	ldr	r3, [pc, #232]	; (800f420 <ResetMacParameters+0x1a8>)
 800f336:	2200      	movs	r2, #0
 800f338:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f33c:	2301      	movs	r3, #1
 800f33e:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f340:	4b39      	ldr	r3, [pc, #228]	; (800f428 <ResetMacParameters+0x1b0>)
 800f342:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f344:	4b39      	ldr	r3, [pc, #228]	; (800f42c <ResetMacParameters+0x1b4>)
 800f346:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f348:	4b35      	ldr	r3, [pc, #212]	; (800f420 <ResetMacParameters+0x1a8>)
 800f34a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f34e:	1d3a      	adds	r2, r7, #4
 800f350:	4611      	mov	r1, r2
 800f352:	4618      	mov	r0, r3
 800f354:	f004 f8c1 	bl	80134da <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800f358:	4b32      	ldr	r3, [pc, #200]	; (800f424 <ResetMacParameters+0x1ac>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f360:	4b30      	ldr	r3, [pc, #192]	; (800f424 <ResetMacParameters+0x1ac>)
 800f362:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f366:	4b2f      	ldr	r3, [pc, #188]	; (800f424 <ResetMacParameters+0x1ac>)
 800f368:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f36c:	4b2c      	ldr	r3, [pc, #176]	; (800f420 <ResetMacParameters+0x1a8>)
 800f36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f370:	4a2c      	ldr	r2, [pc, #176]	; (800f424 <ResetMacParameters+0x1ac>)
 800f372:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f376:	4b2a      	ldr	r3, [pc, #168]	; (800f420 <ResetMacParameters+0x1a8>)
 800f378:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f37c:	4b29      	ldr	r3, [pc, #164]	; (800f424 <ResetMacParameters+0x1ac>)
 800f37e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f382:	4b27      	ldr	r3, [pc, #156]	; (800f420 <ResetMacParameters+0x1a8>)
 800f384:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f388:	4b26      	ldr	r3, [pc, #152]	; (800f424 <ResetMacParameters+0x1ac>)
 800f38a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f38e:	4b25      	ldr	r3, [pc, #148]	; (800f424 <ResetMacParameters+0x1ac>)
 800f390:	2200      	movs	r2, #0
 800f392:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f396:	4b23      	ldr	r3, [pc, #140]	; (800f424 <ResetMacParameters+0x1ac>)
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f39e:	4a21      	ldr	r2, [pc, #132]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3a0:	4b20      	ldr	r3, [pc, #128]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3a2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800f3a6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800f3aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3ae:	682b      	ldr	r3, [r5, #0]
 800f3b0:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f3b2:	4b1c      	ldr	r3, [pc, #112]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f3ba:	4b1a      	ldr	r3, [pc, #104]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3bc:	2202      	movs	r2, #2
 800f3be:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800f3ca:	4b16      	ldr	r3, [pc, #88]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d009      	beq.n	800f3e8 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f3d4:	4b13      	ldr	r3, [pc, #76]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f3de:	4b11      	ldr	r3, [pc, #68]	; (800f424 <ResetMacParameters+0x1ac>)
 800f3e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f3e8:	4b11      	ldr	r3, [pc, #68]	; (800f430 <ResetMacParameters+0x1b8>)
 800f3ea:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f3ec:	4b11      	ldr	r3, [pc, #68]	; (800f434 <ResetMacParameters+0x1bc>)
 800f3ee:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f3f0:	4b11      	ldr	r3, [pc, #68]	; (800f438 <ResetMacParameters+0x1c0>)
 800f3f2:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f3f4:	4b11      	ldr	r3, [pc, #68]	; (800f43c <ResetMacParameters+0x1c4>)
 800f3f6:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f3f8:	4b11      	ldr	r3, [pc, #68]	; (800f440 <ResetMacParameters+0x1c8>)
 800f3fa:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f3fc:	4b11      	ldr	r3, [pc, #68]	; (800f444 <ResetMacParameters+0x1cc>)
 800f3fe:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f400:	4b11      	ldr	r3, [pc, #68]	; (800f448 <ResetMacParameters+0x1d0>)
 800f402:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f404:	4b11      	ldr	r3, [pc, #68]	; (800f44c <ResetMacParameters+0x1d4>)
 800f406:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f408:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f40c:	f107 0310 	add.w	r3, r7, #16
 800f410:	4a0f      	ldr	r2, [pc, #60]	; (800f450 <ResetMacParameters+0x1d8>)
 800f412:	4618      	mov	r0, r3
 800f414:	f002 f88a 	bl	801152c <LoRaMacClassBInit>
}
 800f418:	bf00      	nop
 800f41a:	3738      	adds	r7, #56	; 0x38
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bdb0      	pop	{r4, r5, r7, pc}
 800f420:	20000b50 	.word	0x20000b50
 800f424:	20000644 	.word	0x20000644
 800f428:	20000d30 	.word	0x20000d30
 800f42c:	20000dc4 	.word	0x20000dc4
 800f430:	20000aa4 	.word	0x20000aa4
 800f434:	20000a60 	.word	0x20000a60
 800f438:	20000a90 	.word	0x20000a90
 800f43c:	20000ac9 	.word	0x20000ac9
 800f440:	20000c24 	.word	0x20000c24
 800f444:	20000b90 	.word	0x20000b90
 800f448:	20000b94 	.word	0x20000b94
 800f44c:	20000c28 	.word	0x20000c28
 800f450:	20001260 	.word	0x20001260

0800f454 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f00a fc70 	bl	8019d44 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f464:	4b11      	ldr	r3, [pc, #68]	; (800f4ac <RxWindowSetup+0x58>)
 800f466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f468:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f46a:	4b11      	ldr	r3, [pc, #68]	; (800f4b0 <RxWindowSetup+0x5c>)
 800f46c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f470:	4a10      	ldr	r2, [pc, #64]	; (800f4b4 <RxWindowSetup+0x60>)
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f004 f898 	bl	80135aa <RegionRxConfig>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d010      	beq.n	800f4a2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f480:	4b0d      	ldr	r3, [pc, #52]	; (800f4b8 <RxWindowSetup+0x64>)
 800f482:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 800f486:	4b0c      	ldr	r3, [pc, #48]	; (800f4b8 <RxWindowSetup+0x64>)
 800f488:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f48c:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <RxWindowSetup+0x58>)
 800f48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f490:	4a07      	ldr	r2, [pc, #28]	; (800f4b0 <RxWindowSetup+0x5c>)
 800f492:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f494:	4610      	mov	r0, r2
 800f496:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	7cda      	ldrb	r2, [r3, #19]
 800f49c:	4b06      	ldr	r3, [pc, #24]	; (800f4b8 <RxWindowSetup+0x64>)
 800f49e:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800f4a2:	bf00      	nop
 800f4a4:	3708      	adds	r7, #8
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	0801ba18 	.word	0x0801ba18
 800f4b0:	20000b50 	.word	0x20000b50
 800f4b4:	20000a64 	.word	0x20000a64
 800f4b8:	20000644 	.word	0x20000644

0800f4bc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f4bc:	b590      	push	{r4, r7, lr}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f4c2:	4b1b      	ldr	r3, [pc, #108]	; (800f530 <OpenContinuousRxCWindow+0x74>)
 800f4c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f4c8:	4b19      	ldr	r3, [pc, #100]	; (800f530 <OpenContinuousRxCWindow+0x74>)
 800f4ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f4ce:	b259      	sxtb	r1, r3
 800f4d0:	4b17      	ldr	r3, [pc, #92]	; (800f530 <OpenContinuousRxCWindow+0x74>)
 800f4d2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f4d6:	4b16      	ldr	r3, [pc, #88]	; (800f530 <OpenContinuousRxCWindow+0x74>)
 800f4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4da:	4c16      	ldr	r4, [pc, #88]	; (800f534 <OpenContinuousRxCWindow+0x78>)
 800f4dc:	9400      	str	r4, [sp, #0]
 800f4de:	f004 f84a 	bl	8013576 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f4e2:	4b15      	ldr	r3, [pc, #84]	; (800f538 <OpenContinuousRxCWindow+0x7c>)
 800f4e4:	2202      	movs	r2, #2
 800f4e6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f4ea:	4b13      	ldr	r3, [pc, #76]	; (800f538 <OpenContinuousRxCWindow+0x7c>)
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f4f2:	4b0f      	ldr	r3, [pc, #60]	; (800f530 <OpenContinuousRxCWindow+0x74>)
 800f4f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4f8:	4a10      	ldr	r2, [pc, #64]	; (800f53c <OpenContinuousRxCWindow+0x80>)
 800f4fa:	490e      	ldr	r1, [pc, #56]	; (800f534 <OpenContinuousRxCWindow+0x78>)
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f004 f854 	bl	80135aa <RegionRxConfig>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00f      	beq.n	800f528 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f508:	4b0b      	ldr	r3, [pc, #44]	; (800f538 <OpenContinuousRxCWindow+0x7c>)
 800f50a:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 800f50e:	4b0a      	ldr	r3, [pc, #40]	; (800f538 <OpenContinuousRxCWindow+0x7c>)
 800f510:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 800f514:	4b0a      	ldr	r3, [pc, #40]	; (800f540 <OpenContinuousRxCWindow+0x84>)
 800f516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f518:	2000      	movs	r0, #0
 800f51a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f51c:	4b06      	ldr	r3, [pc, #24]	; (800f538 <OpenContinuousRxCWindow+0x7c>)
 800f51e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800f522:	4b05      	ldr	r3, [pc, #20]	; (800f538 <OpenContinuousRxCWindow+0x7c>)
 800f524:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800f528:	bf00      	nop
 800f52a:	3704      	adds	r7, #4
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd90      	pop	{r4, r7, pc}
 800f530:	20000b50 	.word	0x20000b50
 800f534:	20000a24 	.word	0x20000a24
 800f538:	20000644 	.word	0x20000644
 800f53c:	20000a64 	.word	0x20000a64
 800f540:	0801ba18 	.word	0x0801ba18

0800f544 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	603b      	str	r3, [r7, #0]
 800f550:	4613      	mov	r3, r2
 800f552:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f554:	4b82      	ldr	r3, [pc, #520]	; (800f760 <PrepareFrame+0x21c>)
 800f556:	2200      	movs	r2, #0
 800f558:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f55a:	4b81      	ldr	r3, [pc, #516]	; (800f760 <PrepareFrame+0x21c>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f574:	2300      	movs	r3, #0
 800f576:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f578:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f57a:	461a      	mov	r2, r3
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	4879      	ldr	r0, [pc, #484]	; (800f764 <PrepareFrame+0x220>)
 800f580:	f006 fa95 	bl	8015aae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f586:	b2da      	uxtb	r2, r3
 800f588:	4b75      	ldr	r3, [pc, #468]	; (800f760 <PrepareFrame+0x21c>)
 800f58a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	781a      	ldrb	r2, [r3, #0]
 800f592:	4b73      	ldr	r3, [pc, #460]	; (800f760 <PrepareFrame+0x21c>)
 800f594:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b07      	cmp	r3, #7
 800f5a2:	f000 80b9 	beq.w	800f718 <PrepareFrame+0x1d4>
 800f5a6:	2b07      	cmp	r3, #7
 800f5a8:	f300 80d0 	bgt.w	800f74c <PrepareFrame+0x208>
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d006      	beq.n	800f5be <PrepareFrame+0x7a>
 800f5b0:	2b04      	cmp	r3, #4
 800f5b2:	f040 80cb 	bne.w	800f74c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f5b6:	4b6a      	ldr	r3, [pc, #424]	; (800f760 <PrepareFrame+0x21c>)
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f5be:	4b68      	ldr	r3, [pc, #416]	; (800f760 <PrepareFrame+0x21c>)
 800f5c0:	2204      	movs	r2, #4
 800f5c2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f5c6:	4b66      	ldr	r3, [pc, #408]	; (800f760 <PrepareFrame+0x21c>)
 800f5c8:	4a67      	ldr	r2, [pc, #412]	; (800f768 <PrepareFrame+0x224>)
 800f5ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f5ce:	4b64      	ldr	r3, [pc, #400]	; (800f760 <PrepareFrame+0x21c>)
 800f5d0:	22ff      	movs	r2, #255	; 0xff
 800f5d2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	781a      	ldrb	r2, [r3, #0]
 800f5da:	4b61      	ldr	r3, [pc, #388]	; (800f760 <PrepareFrame+0x21c>)
 800f5dc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f5e0:	4a5f      	ldr	r2, [pc, #380]	; (800f760 <PrepareFrame+0x21c>)
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800f5e8:	4b60      	ldr	r3, [pc, #384]	; (800f76c <PrepareFrame+0x228>)
 800f5ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f5ee:	4a5c      	ldr	r2, [pc, #368]	; (800f760 <PrepareFrame+0x21c>)
 800f5f0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	781a      	ldrb	r2, [r3, #0]
 800f5f8:	4b59      	ldr	r3, [pc, #356]	; (800f760 <PrepareFrame+0x21c>)
 800f5fa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800f5fe:	4b58      	ldr	r3, [pc, #352]	; (800f760 <PrepareFrame+0x21c>)
 800f600:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800f604:	4b56      	ldr	r3, [pc, #344]	; (800f760 <PrepareFrame+0x21c>)
 800f606:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800f60a:	4b55      	ldr	r3, [pc, #340]	; (800f760 <PrepareFrame+0x21c>)
 800f60c:	4a55      	ldr	r2, [pc, #340]	; (800f764 <PrepareFrame+0x220>)
 800f60e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f612:	f107 0318 	add.w	r3, r7, #24
 800f616:	4618      	mov	r0, r3
 800f618:	f003 f890 	bl	801273c <LoRaMacCryptoGetFCntUp>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f622:	2312      	movs	r3, #18
 800f624:	e098      	b.n	800f758 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	b29a      	uxth	r2, r3
 800f62a:	4b4d      	ldr	r3, [pc, #308]	; (800f760 <PrepareFrame+0x21c>)
 800f62c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800f630:	4b4b      	ldr	r3, [pc, #300]	; (800f760 <PrepareFrame+0x21c>)
 800f632:	2200      	movs	r2, #0
 800f634:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800f638:	4b49      	ldr	r3, [pc, #292]	; (800f760 <PrepareFrame+0x21c>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	4a47      	ldr	r2, [pc, #284]	; (800f760 <PrepareFrame+0x21c>)
 800f644:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f648:	f107 0314 	add.w	r3, r7, #20
 800f64c:	4618      	mov	r0, r3
 800f64e:	f002 fa2d 	bl	8011aac <LoRaMacCommandsGetSizeSerializedCmds>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f658:	2313      	movs	r3, #19
 800f65a:	e07d      	b.n	800f758 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d076      	beq.n	800f750 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800f662:	4b42      	ldr	r3, [pc, #264]	; (800f76c <PrepareFrame+0x228>)
 800f664:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe fdb5 	bl	800e1d8 <GetMaxAppPayloadWithoutFOptsLength>
 800f66e:	4603      	mov	r3, r0
 800f670:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f672:	4b3b      	ldr	r3, [pc, #236]	; (800f760 <PrepareFrame+0x21c>)
 800f674:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d01d      	beq.n	800f6b8 <PrepareFrame+0x174>
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b0f      	cmp	r3, #15
 800f680:	d81a      	bhi.n	800f6b8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800f682:	f107 0314 	add.w	r3, r7, #20
 800f686:	4a3a      	ldr	r2, [pc, #232]	; (800f770 <PrepareFrame+0x22c>)
 800f688:	4619      	mov	r1, r3
 800f68a:	200f      	movs	r0, #15
 800f68c:	f002 fa24 	bl	8011ad8 <LoRaMacCommandsSerializeCmds>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f696:	2313      	movs	r3, #19
 800f698:	e05e      	b.n	800f758 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	f003 030f 	and.w	r3, r3, #15
 800f6a0:	b2d9      	uxtb	r1, r3
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	7813      	ldrb	r3, [r2, #0]
 800f6a6:	f361 0303 	bfi	r3, r1, #0, #4
 800f6aa:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	781a      	ldrb	r2, [r3, #0]
 800f6b0:	4b2b      	ldr	r3, [pc, #172]	; (800f760 <PrepareFrame+0x21c>)
 800f6b2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800f6b6:	e04b      	b.n	800f750 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f6b8:	4b29      	ldr	r3, [pc, #164]	; (800f760 <PrepareFrame+0x21c>)
 800f6ba:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d010      	beq.n	800f6e4 <PrepareFrame+0x1a0>
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	2b0f      	cmp	r3, #15
 800f6c6:	d90d      	bls.n	800f6e4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f6c8:	7ffb      	ldrb	r3, [r7, #31]
 800f6ca:	f107 0114 	add.w	r1, r7, #20
 800f6ce:	4a29      	ldr	r2, [pc, #164]	; (800f774 <PrepareFrame+0x230>)
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f002 fa01 	bl	8011ad8 <LoRaMacCommandsSerializeCmds>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f6dc:	2313      	movs	r3, #19
 800f6de:	e03b      	b.n	800f758 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800f6e0:	230a      	movs	r3, #10
 800f6e2:	e039      	b.n	800f758 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f6e4:	7ffb      	ldrb	r3, [r7, #31]
 800f6e6:	f107 0114 	add.w	r1, r7, #20
 800f6ea:	4a22      	ldr	r2, [pc, #136]	; (800f774 <PrepareFrame+0x230>)
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f002 f9f3 	bl	8011ad8 <LoRaMacCommandsSerializeCmds>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f6f8:	2313      	movs	r3, #19
 800f6fa:	e02d      	b.n	800f758 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800f6fc:	4b18      	ldr	r3, [pc, #96]	; (800f760 <PrepareFrame+0x21c>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800f704:	4b16      	ldr	r3, [pc, #88]	; (800f760 <PrepareFrame+0x21c>)
 800f706:	4a1b      	ldr	r2, [pc, #108]	; (800f774 <PrepareFrame+0x230>)
 800f708:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	4b13      	ldr	r3, [pc, #76]	; (800f760 <PrepareFrame+0x21c>)
 800f712:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800f716:	e01b      	b.n	800f750 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d01a      	beq.n	800f754 <PrepareFrame+0x210>
 800f71e:	4b10      	ldr	r3, [pc, #64]	; (800f760 <PrepareFrame+0x21c>)
 800f720:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f724:	2b00      	cmp	r3, #0
 800f726:	d015      	beq.n	800f754 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800f728:	4813      	ldr	r0, [pc, #76]	; (800f778 <PrepareFrame+0x234>)
 800f72a:	4b0d      	ldr	r3, [pc, #52]	; (800f760 <PrepareFrame+0x21c>)
 800f72c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f730:	b29b      	uxth	r3, r3
 800f732:	461a      	mov	r2, r3
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	f006 f9ba 	bl	8015aae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800f73a:	4b09      	ldr	r3, [pc, #36]	; (800f760 <PrepareFrame+0x21c>)
 800f73c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f740:	b29b      	uxth	r3, r3
 800f742:	3301      	adds	r3, #1
 800f744:	b29a      	uxth	r2, r3
 800f746:	4b06      	ldr	r3, [pc, #24]	; (800f760 <PrepareFrame+0x21c>)
 800f748:	801a      	strh	r2, [r3, #0]
            }
            break;
 800f74a:	e003      	b.n	800f754 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f74c:	2302      	movs	r3, #2
 800f74e:	e003      	b.n	800f758 <PrepareFrame+0x214>
            break;
 800f750:	bf00      	nop
 800f752:	e000      	b.n	800f756 <PrepareFrame+0x212>
            break;
 800f754:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3720      	adds	r7, #32
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	20000644 	.word	0x20000644
 800f764:	2000077c 	.word	0x2000077c
 800f768:	20000646 	.word	0x20000646
 800f76c:	20000b50 	.word	0x20000b50
 800f770:	2000075c 	.word	0x2000075c
 800f774:	20000ad0 	.word	0x20000ad0
 800f778:	20000647 	.word	0x20000647

0800f77c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08a      	sub	sp, #40	; 0x28
 800f780:	af00      	add	r7, sp, #0
 800f782:	4603      	mov	r3, r0
 800f784:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f786:	2303      	movs	r3, #3
 800f788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800f790:	79fb      	ldrb	r3, [r7, #7]
 800f792:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f794:	4b47      	ldr	r3, [pc, #284]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f796:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f79a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f79c:	4b45      	ldr	r3, [pc, #276]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f79e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f7a2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f7a4:	4b43      	ldr	r3, [pc, #268]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7a8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f7aa:	4b42      	ldr	r3, [pc, #264]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ae:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800f7b0:	4b41      	ldr	r3, [pc, #260]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800f7b6:	4b3f      	ldr	r3, [pc, #252]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f7b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f7bc:	f107 020f 	add.w	r2, r7, #15
 800f7c0:	f107 0110 	add.w	r1, r7, #16
 800f7c4:	4b3d      	ldr	r3, [pc, #244]	; (800f8bc <SendFrameOnChannel+0x140>)
 800f7c6:	f003 ff05 	bl	80135d4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7ca:	4b3b      	ldr	r3, [pc, #236]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f7d2:	4b38      	ldr	r3, [pc, #224]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f7d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	4b37      	ldr	r3, [pc, #220]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7dc:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800f7e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800f7e4:	4b34      	ldr	r3, [pc, #208]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7e6:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	4a32      	ldr	r2, [pc, #200]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7ee:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f7f2:	4b31      	ldr	r3, [pc, #196]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7f4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f7f8:	4a2f      	ldr	r2, [pc, #188]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f7fa:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f7fe:	4b2e      	ldr	r3, [pc, #184]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f800:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f804:	4a2c      	ldr	r2, [pc, #176]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f806:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800f80a:	f001 fefb 	bl	8011604 <LoRaMacClassBIsBeaconModeActive>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00b      	beq.n	800f82c <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f814:	4b28      	ldr	r3, [pc, #160]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f816:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 ff5d 	bl	80116da <LoRaMacClassBIsUplinkCollision>
 800f820:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f828:	2310      	movs	r3, #16
 800f82a:	e03e      	b.n	800f8aa <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f82c:	4b21      	ldr	r3, [pc, #132]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f82e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f832:	2b01      	cmp	r3, #1
 800f834:	d101      	bne.n	800f83a <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800f836:	f001 ff5a 	bl	80116ee <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800f83a:	f001 fef4 	bl	8011626 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800f83e:	4b1d      	ldr	r3, [pc, #116]	; (800f8b4 <SendFrameOnChannel+0x138>)
 800f840:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f844:	b2db      	uxtb	r3, r3
 800f846:	4a1c      	ldr	r2, [pc, #112]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f848:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800f84c:	4611      	mov	r1, r2
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff fc7c 	bl	800f14c <SecureFrame>
 800f854:	4603      	mov	r3, r0
 800f856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800f85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d002      	beq.n	800f868 <SendFrameOnChannel+0xec>
    {
        return status;
 800f862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f866:	e020      	b.n	800f8aa <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f868:	4b13      	ldr	r3, [pc, #76]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f86a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f86e:	f043 0302 	orr.w	r3, r3, #2
 800f872:	4a11      	ldr	r2, [pc, #68]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f874:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800f878:	4b0f      	ldr	r3, [pc, #60]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f87a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f87e:	f083 0301 	eor.w	r3, r3, #1
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b00      	cmp	r3, #0
 800f886:	d007      	beq.n	800f898 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800f888:	4b0b      	ldr	r3, [pc, #44]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f88a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f88e:	3301      	adds	r3, #1
 800f890:	b2da      	uxtb	r2, r3
 800f892:	4b09      	ldr	r3, [pc, #36]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f894:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f898:	4b09      	ldr	r3, [pc, #36]	; (800f8c0 <SendFrameOnChannel+0x144>)
 800f89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f89c:	4a06      	ldr	r2, [pc, #24]	; (800f8b8 <SendFrameOnChannel+0x13c>)
 800f89e:	8812      	ldrh	r2, [r2, #0]
 800f8a0:	b2d2      	uxtb	r2, r2
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4807      	ldr	r0, [pc, #28]	; (800f8c4 <SendFrameOnChannel+0x148>)
 800f8a6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3728      	adds	r7, #40	; 0x28
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	20000b50 	.word	0x20000b50
 800f8b8:	20000644 	.word	0x20000644
 800f8bc:	20000a5c 	.word	0x20000a5c
 800f8c0:	0801ba18 	.word	0x0801ba18
 800f8c4:	20000646 	.word	0x20000646

0800f8c8 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800f8d2:	4b15      	ldr	r3, [pc, #84]	; (800f928 <SetTxContinuousWave+0x60>)
 800f8d4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f8d8:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f8da:	4b14      	ldr	r3, [pc, #80]	; (800f92c <SetTxContinuousWave+0x64>)
 800f8dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f8e0:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f8e2:	4b12      	ldr	r3, [pc, #72]	; (800f92c <SetTxContinuousWave+0x64>)
 800f8e4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f8e8:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f8ea:	4b10      	ldr	r3, [pc, #64]	; (800f92c <SetTxContinuousWave+0x64>)
 800f8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ee:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f8f0:	4b0e      	ldr	r3, [pc, #56]	; (800f92c <SetTxContinuousWave+0x64>)
 800f8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8f4:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800f8f6:	88fb      	ldrh	r3, [r7, #6]
 800f8f8:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800f8fa:	4b0c      	ldr	r3, [pc, #48]	; (800f92c <SetTxContinuousWave+0x64>)
 800f8fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f900:	f107 0208 	add.w	r2, r7, #8
 800f904:	4611      	mov	r1, r2
 800f906:	4618      	mov	r0, r3
 800f908:	f003 ff13 	bl	8013732 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f90c:	4b06      	ldr	r3, [pc, #24]	; (800f928 <SetTxContinuousWave+0x60>)
 800f90e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f912:	f043 0302 	orr.w	r3, r3, #2
 800f916:	4a04      	ldr	r2, [pc, #16]	; (800f928 <SetTxContinuousWave+0x60>)
 800f918:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f91c:	2300      	movs	r3, #0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3718      	adds	r7, #24
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	20000644 	.word	0x20000644
 800f92c:	20000b50 	.word	0x20000b50

0800f930 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	4603      	mov	r3, r0
 800f938:	6039      	str	r1, [r7, #0]
 800f93a:	80fb      	strh	r3, [r7, #6]
 800f93c:	4613      	mov	r3, r2
 800f93e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800f940:	4b09      	ldr	r3, [pc, #36]	; (800f968 <SetTxContinuousWave1+0x38>)
 800f942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f944:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800f948:	88fa      	ldrh	r2, [r7, #6]
 800f94a:	6838      	ldr	r0, [r7, #0]
 800f94c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f94e:	4b07      	ldr	r3, [pc, #28]	; (800f96c <SetTxContinuousWave1+0x3c>)
 800f950:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f954:	f043 0302 	orr.w	r3, r3, #2
 800f958:	4a04      	ldr	r2, [pc, #16]	; (800f96c <SetTxContinuousWave1+0x3c>)
 800f95a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	0801ba18 	.word	0x0801ba18
 800f96c:	20000644 	.word	0x20000644

0800f970 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 800f976:	2300      	movs	r3, #0
 800f978:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800f97a:	4b3e      	ldr	r3, [pc, #248]	; (800fa74 <RestoreNvmData+0x104>)
 800f97c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f980:	2b01      	cmp	r3, #1
 800f982:	d001      	beq.n	800f988 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800f984:	2301      	movs	r3, #1
 800f986:	e071      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800f988:	2124      	movs	r1, #36	; 0x24
 800f98a:	483b      	ldr	r0, [pc, #236]	; (800fa78 <RestoreNvmData+0x108>)
 800f98c:	f006 f8e4 	bl	8015b58 <Crc32>
 800f990:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800f992:	4b39      	ldr	r3, [pc, #228]	; (800fa78 <RestoreNvmData+0x108>)
 800f994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d001      	beq.n	800f9a0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f99c:	2317      	movs	r3, #23
 800f99e:	e065      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800f9a0:	2114      	movs	r1, #20
 800f9a2:	4836      	ldr	r0, [pc, #216]	; (800fa7c <RestoreNvmData+0x10c>)
 800f9a4:	f006 f8d8 	bl	8015b58 <Crc32>
 800f9a8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800f9aa:	4b33      	ldr	r3, [pc, #204]	; (800fa78 <RestoreNvmData+0x108>)
 800f9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d001      	beq.n	800f9b8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f9b4:	2317      	movs	r3, #23
 800f9b6:	e059      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800f9b8:	21dc      	movs	r1, #220	; 0xdc
 800f9ba:	4831      	ldr	r0, [pc, #196]	; (800fa80 <RestoreNvmData+0x110>)
 800f9bc:	f006 f8cc 	bl	8015b58 <Crc32>
 800f9c0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800f9c2:	4b2d      	ldr	r3, [pc, #180]	; (800fa78 <RestoreNvmData+0x108>)
 800f9c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d001      	beq.n	800f9d2 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f9ce:	2317      	movs	r3, #23
 800f9d0:	e04c      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800f9d2:	21bc      	movs	r1, #188	; 0xbc
 800f9d4:	482b      	ldr	r0, [pc, #172]	; (800fa84 <RestoreNvmData+0x114>)
 800f9d6:	f006 f8bf 	bl	8015b58 <Crc32>
 800f9da:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800f9dc:	4b26      	ldr	r3, [pc, #152]	; (800fa78 <RestoreNvmData+0x108>)
 800f9de:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d001      	beq.n	800f9ec <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f9e8:	2317      	movs	r3, #23
 800f9ea:	e03f      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800f9ec:	2190      	movs	r1, #144	; 0x90
 800f9ee:	4826      	ldr	r0, [pc, #152]	; (800fa88 <RestoreNvmData+0x118>)
 800f9f0:	f006 f8b2 	bl	8015b58 <Crc32>
 800f9f4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800f9f6:	4b20      	ldr	r3, [pc, #128]	; (800fa78 <RestoreNvmData+0x108>)
 800f9f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d001      	beq.n	800fa06 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fa02:	2317      	movs	r3, #23
 800fa04:	e032      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800fa06:	2114      	movs	r1, #20
 800fa08:	4820      	ldr	r0, [pc, #128]	; (800fa8c <RestoreNvmData+0x11c>)
 800fa0a:	f006 f8a5 	bl	8015b58 <Crc32>
 800fa0e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800fa10:	4b19      	ldr	r3, [pc, #100]	; (800fa78 <RestoreNvmData+0x108>)
 800fa12:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d001      	beq.n	800fa20 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fa1c:	2317      	movs	r3, #23
 800fa1e:	e025      	b.n	800fa6c <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800fa20:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fa24:	4914      	ldr	r1, [pc, #80]	; (800fa78 <RestoreNvmData+0x108>)
 800fa26:	481a      	ldr	r0, [pc, #104]	; (800fa90 <RestoreNvmData+0x120>)
 800fa28:	f006 f841 	bl	8015aae <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800fa2c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fa30:	2100      	movs	r1, #0
 800fa32:	4811      	ldr	r0, [pc, #68]	; (800fa78 <RestoreNvmData+0x108>)
 800fa34:	f006 f876 	bl	8015b24 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fa38:	4b0e      	ldr	r3, [pc, #56]	; (800fa74 <RestoreNvmData+0x104>)
 800fa3a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fa3e:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <RestoreNvmData+0x104>)
 800fa40:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fa44:	4b12      	ldr	r3, [pc, #72]	; (800fa90 <RestoreNvmData+0x120>)
 800fa46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa48:	4a0a      	ldr	r2, [pc, #40]	; (800fa74 <RestoreNvmData+0x104>)
 800fa4a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa4e:	4b10      	ldr	r3, [pc, #64]	; (800fa90 <RestoreNvmData+0x120>)
 800fa50:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fa54:	4b07      	ldr	r3, [pc, #28]	; (800fa74 <RestoreNvmData+0x104>)
 800fa56:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fa5a:	4b06      	ldr	r3, [pc, #24]	; (800fa74 <RestoreNvmData+0x104>)
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fa62:	4b04      	ldr	r3, [pc, #16]	; (800fa74 <RestoreNvmData+0x104>)
 800fa64:	2202      	movs	r2, #2
 800fa66:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	20000644 	.word	0x20000644
 800fa78:	20001278 	.word	0x20001278
 800fa7c:	200012a0 	.word	0x200012a0
 800fa80:	200012b8 	.word	0x200012b8
 800fa84:	20001398 	.word	0x20001398
 800fa88:	20001458 	.word	0x20001458
 800fa8c:	20001988 	.word	0x20001988
 800fa90:	20000b50 	.word	0x20000b50

0800fa94 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d002      	beq.n	800faaa <DetermineFrameType+0x16>
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d101      	bne.n	800faae <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800faaa:	2303      	movs	r3, #3
 800faac:	e03b      	b.n	800fb26 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	7b1b      	ldrb	r3, [r3, #12]
 800fab2:	f003 030f 	and.w	r3, r3, #15
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d008      	beq.n	800face <DetermineFrameType+0x3a>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d003      	beq.n	800face <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	2200      	movs	r2, #0
 800faca:	701a      	strb	r2, [r3, #0]
 800facc:	e02a      	b.n	800fb24 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d103      	bne.n	800fae0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2201      	movs	r2, #1
 800fadc:	701a      	strb	r2, [r3, #0]
 800fade:	e021      	b.n	800fb24 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	7b1b      	ldrb	r3, [r3, #12]
 800fae4:	f003 030f 	and.w	r3, r3, #15
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d108      	bne.n	800fb00 <DetermineFrameType+0x6c>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d103      	bne.n	800fb00 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	2202      	movs	r2, #2
 800fafc:	701a      	strb	r2, [r3, #0]
 800fafe:	e011      	b.n	800fb24 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7b1b      	ldrb	r3, [r3, #12]
 800fb04:	f003 030f 	and.w	r3, r3, #15
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d108      	bne.n	800fb20 <DetermineFrameType+0x8c>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d003      	beq.n	800fb20 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2203      	movs	r2, #3
 800fb1c:	701a      	strb	r2, [r3, #0]
 800fb1e:	e001      	b.n	800fb24 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800fb20:	2318      	movs	r3, #24
 800fb22:	e000      	b.n	800fb26 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	370c      	adds	r7, #12
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bc80      	pop	{r7}
 800fb2e:	4770      	bx	lr

0800fb30 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 800fb30:	b480      	push	{r7}
 800fb32:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800fb34:	4b12      	ldr	r3, [pc, #72]	; (800fb80 <CheckRetransUnconfirmedUplink+0x50>)
 800fb36:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800fb3a:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <CheckRetransUnconfirmedUplink+0x54>)
 800fb3c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d301      	bcc.n	800fb48 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800fb44:	2301      	movs	r3, #1
 800fb46:	e016      	b.n	800fb76 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fb48:	4b0d      	ldr	r3, [pc, #52]	; (800fb80 <CheckRetransUnconfirmedUplink+0x50>)
 800fb4a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fb4e:	f003 0302 	and.w	r3, r3, #2
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00d      	beq.n	800fb74 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800fb58:	4b0a      	ldr	r3, [pc, #40]	; (800fb84 <CheckRetransUnconfirmedUplink+0x54>)
 800fb5a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d101      	bne.n	800fb66 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800fb62:	2301      	movs	r3, #1
 800fb64:	e007      	b.n	800fb76 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800fb66:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <CheckRetransUnconfirmedUplink+0x50>)
 800fb68:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800fb70:	2301      	movs	r3, #1
 800fb72:	e000      	b.n	800fb76 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bc80      	pop	{r7}
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	20000644 	.word	0x20000644
 800fb84:	20000b50 	.word	0x20000b50

0800fb88 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800fb88:	b480      	push	{r7}
 800fb8a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800fb8c:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <CheckRetransConfirmedUplink+0x40>)
 800fb8e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800fb92:	4b0d      	ldr	r3, [pc, #52]	; (800fbc8 <CheckRetransConfirmedUplink+0x40>)
 800fb94:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d301      	bcc.n	800fba0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e00f      	b.n	800fbc0 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fba0:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <CheckRetransConfirmedUplink+0x40>)
 800fba2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fba6:	f003 0302 	and.w	r3, r3, #2
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d006      	beq.n	800fbbe <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fbb0:	4b05      	ldr	r3, [pc, #20]	; (800fbc8 <CheckRetransConfirmedUplink+0x40>)
 800fbb2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e000      	b.n	800fbc0 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bc80      	pop	{r7}
 800fbc6:	4770      	bx	lr
 800fbc8:	20000644 	.word	0x20000644

0800fbcc <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800fbcc:	b480      	push	{r7}
 800fbce:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fbd0:	4b1a      	ldr	r3, [pc, #104]	; (800fc3c <StopRetransmission+0x70>)
 800fbd2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fbd6:	f003 0302 	and.w	r3, r3, #2
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d009      	beq.n	800fbf4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fbe0:	4b16      	ldr	r3, [pc, #88]	; (800fc3c <StopRetransmission+0x70>)
 800fbe2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00e      	beq.n	800fc08 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800fbea:	4b14      	ldr	r3, [pc, #80]	; (800fc3c <StopRetransmission+0x70>)
 800fbec:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d009      	beq.n	800fc08 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800fbf4:	4b12      	ldr	r3, [pc, #72]	; (800fc40 <StopRetransmission+0x74>)
 800fbf6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d004      	beq.n	800fc08 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800fbfe:	4b10      	ldr	r3, [pc, #64]	; (800fc40 <StopRetransmission+0x74>)
 800fc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc02:	3301      	adds	r3, #1
 800fc04:	4a0e      	ldr	r2, [pc, #56]	; (800fc40 <StopRetransmission+0x74>)
 800fc06:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800fc08:	4b0c      	ldr	r3, [pc, #48]	; (800fc3c <StopRetransmission+0x70>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 800fc10:	4b0a      	ldr	r3, [pc, #40]	; (800fc3c <StopRetransmission+0x70>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800fc18:	4b08      	ldr	r3, [pc, #32]	; (800fc3c <StopRetransmission+0x70>)
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fc20:	4b06      	ldr	r3, [pc, #24]	; (800fc3c <StopRetransmission+0x70>)
 800fc22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc26:	f023 0302 	bic.w	r3, r3, #2
 800fc2a:	4a04      	ldr	r2, [pc, #16]	; (800fc3c <StopRetransmission+0x70>)
 800fc2c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 800fc30:	2301      	movs	r3, #1
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bc80      	pop	{r7}
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	20000644 	.word	0x20000644
 800fc40:	20000b50 	.word	0x20000b50

0800fc44 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800fc4e:	4b0b      	ldr	r3, [pc, #44]	; (800fc7c <CallNvmDataChangeCallback+0x38>)
 800fc50:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00c      	beq.n	800fc72 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800fc58:	4b08      	ldr	r3, [pc, #32]	; (800fc7c <CallNvmDataChangeCallback+0x38>)
 800fc5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fc5e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d006      	beq.n	800fc72 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800fc64:	4b05      	ldr	r3, [pc, #20]	; (800fc7c <CallNvmDataChangeCallback+0x38>)
 800fc66:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	88fa      	ldrh	r2, [r7, #6]
 800fc6e:	4610      	mov	r0, r2
 800fc70:	4798      	blx	r3
    }
}
 800fc72:	bf00      	nop
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	20000644 	.word	0x20000644

0800fc80 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800fc86:	4b1b      	ldr	r3, [pc, #108]	; (800fcf4 <AckTimeoutRetriesProcess+0x74>)
 800fc88:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fc8c:	4b19      	ldr	r3, [pc, #100]	; (800fcf4 <AckTimeoutRetriesProcess+0x74>)
 800fc8e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d229      	bcs.n	800fcea <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800fc96:	4b17      	ldr	r3, [pc, #92]	; (800fcf4 <AckTimeoutRetriesProcess+0x74>)
 800fc98:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	4b14      	ldr	r3, [pc, #80]	; (800fcf4 <AckTimeoutRetriesProcess+0x74>)
 800fca2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800fca6:	4b13      	ldr	r3, [pc, #76]	; (800fcf4 <AckTimeoutRetriesProcess+0x74>)
 800fca8:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fcac:	f003 0301 	and.w	r3, r3, #1
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d019      	beq.n	800fcea <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fcb6:	2322      	movs	r3, #34	; 0x22
 800fcb8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fcba:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <AckTimeoutRetriesProcess+0x78>)
 800fcbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fcc0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcc2:	4b0d      	ldr	r3, [pc, #52]	; (800fcf8 <AckTimeoutRetriesProcess+0x78>)
 800fcc4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fcc8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fcca:	4b0b      	ldr	r3, [pc, #44]	; (800fcf8 <AckTimeoutRetriesProcess+0x78>)
 800fccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcd0:	f107 0208 	add.w	r2, r7, #8
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f003 fbd6 	bl	8013488 <RegionGetPhyParam>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	b25a      	sxtb	r2, r3
 800fce4:	4b04      	ldr	r3, [pc, #16]	; (800fcf8 <AckTimeoutRetriesProcess+0x78>)
 800fce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 800fcea:	bf00      	nop
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	20000644 	.word	0x20000644
 800fcf8:	20000b50 	.word	0x20000b50

0800fcfc <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800fd02:	4b14      	ldr	r3, [pc, #80]	; (800fd54 <AckTimeoutRetriesFinalize+0x58>)
 800fd04:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800fd08:	f083 0301 	eor.w	r3, r3, #1
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d015      	beq.n	800fd3e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800fd12:	2302      	movs	r3, #2
 800fd14:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800fd16:	4b10      	ldr	r3, [pc, #64]	; (800fd58 <AckTimeoutRetriesFinalize+0x5c>)
 800fd18:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800fd1a:	4b10      	ldr	r3, [pc, #64]	; (800fd5c <AckTimeoutRetriesFinalize+0x60>)
 800fd1c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fd1e:	4b10      	ldr	r3, [pc, #64]	; (800fd60 <AckTimeoutRetriesFinalize+0x64>)
 800fd20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd24:	1d3a      	adds	r2, r7, #4
 800fd26:	4611      	mov	r1, r2
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f003 fbd6 	bl	80134da <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800fd2e:	4b09      	ldr	r3, [pc, #36]	; (800fd54 <AckTimeoutRetriesFinalize+0x58>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800fd36:	4b07      	ldr	r3, [pc, #28]	; (800fd54 <AckTimeoutRetriesFinalize+0x58>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fd3e:	4b05      	ldr	r3, [pc, #20]	; (800fd54 <AckTimeoutRetriesFinalize+0x58>)
 800fd40:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fd44:	4b03      	ldr	r3, [pc, #12]	; (800fd54 <AckTimeoutRetriesFinalize+0x58>)
 800fd46:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800fd4a:	bf00      	nop
 800fd4c:	3710      	adds	r7, #16
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	20000644 	.word	0x20000644
 800fd58:	20000d30 	.word	0x20000d30
 800fd5c:	20000dc4 	.word	0x20000dc4
 800fd60:	20000b50 	.word	0x20000b50

0800fd64 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800fd64:	b480      	push	{r7}
 800fd66:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fd68:	4b0b      	ldr	r3, [pc, #44]	; (800fd98 <IsRequestPending+0x34>)
 800fd6a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fd6e:	f003 0304 	and.w	r3, r3, #4
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d107      	bne.n	800fd88 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800fd78:	4b07      	ldr	r3, [pc, #28]	; (800fd98 <IsRequestPending+0x34>)
 800fd7a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d001      	beq.n	800fd8c <IsRequestPending+0x28>
    {
        return 1;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e000      	b.n	800fd8e <IsRequestPending+0x2a>
    }
    return 0;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bc80      	pop	{r7}
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	20000644 	.word	0x20000644

0800fd9c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800fd9c:	b590      	push	{r4, r7, lr}
 800fd9e:	b08f      	sub	sp, #60	; 0x3c
 800fda0:	af02      	add	r7, sp, #8
 800fda2:	6178      	str	r0, [r7, #20]
 800fda4:	6139      	str	r1, [r7, #16]
 800fda6:	4613      	mov	r3, r2
 800fda8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <LoRaMacInitialization+0x1a>
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d101      	bne.n	800fdba <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	e275      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d00b      	beq.n	800fdda <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d007      	beq.n	800fdda <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d003      	beq.n	800fdda <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdda:	2303      	movs	r3, #3
 800fddc:	e263      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f003 fb41 	bl	8013468 <RegionIsActive>
 800fde6:	4603      	mov	r3, r0
 800fde8:	f083 0301 	eor.w	r3, r3, #1
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800fdf2:	2309      	movs	r3, #9
 800fdf4:	e257      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800fdf6:	6978      	ldr	r0, [r7, #20]
 800fdf8:	f001 ffb8 	bl	8011d6c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800fdfc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fe00:	2100      	movs	r1, #0
 800fe02:	48c7      	ldr	r0, [pc, #796]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe04:	f005 fe8e 	bl	8015b24 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800fe08:	f240 520c 	movw	r2, #1292	; 0x50c
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	48c5      	ldr	r0, [pc, #788]	; (8010124 <LoRaMacInitialization+0x388>)
 800fe10:	f005 fe88 	bl	8015b24 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fe14:	4bc3      	ldr	r3, [pc, #780]	; (8010124 <LoRaMacInitialization+0x388>)
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800fe1c:	4bc1      	ldr	r3, [pc, #772]	; (8010124 <LoRaMacInitialization+0x388>)
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800fe24:	4abe      	ldr	r2, [pc, #760]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe26:	7bfb      	ldrb	r3, [r7, #15]
 800fe28:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800fe2c:	4bbc      	ldr	r3, [pc, #752]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800fe34:	4bba      	ldr	r3, [pc, #744]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800fe3c:	4bb8      	ldr	r3, [pc, #736]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe3e:	4aba      	ldr	r2, [pc, #744]	; (8010128 <LoRaMacInitialization+0x38c>)
 800fe40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800fe44:	230f      	movs	r3, #15
 800fe46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe4a:	4bb5      	ldr	r3, [pc, #724]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe54:	4611      	mov	r1, r2
 800fe56:	4618      	mov	r0, r3
 800fe58:	f003 fb16 	bl	8013488 <RegionGetPhyParam>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800fe60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	bf14      	ite	ne
 800fe66:	2301      	movne	r3, #1
 800fe68:	2300      	moveq	r3, #0
 800fe6a:	b2da      	uxtb	r2, r3
 800fe6c:	4bac      	ldr	r3, [pc, #688]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe6e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800fe72:	230a      	movs	r3, #10
 800fe74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe78:	4ba9      	ldr	r3, [pc, #676]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f003 faff 	bl	8013488 <RegionGetPhyParam>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe90:	b25a      	sxtb	r2, r3
 800fe92:	4ba3      	ldr	r3, [pc, #652]	; (8010120 <LoRaMacInitialization+0x384>)
 800fe94:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800fe98:	2306      	movs	r3, #6
 800fe9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe9e:	4ba0      	ldr	r3, [pc, #640]	; (8010120 <LoRaMacInitialization+0x384>)
 800fea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fea4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fea8:	4611      	mov	r1, r2
 800feaa:	4618      	mov	r0, r3
 800feac:	f003 faec 	bl	8013488 <RegionGetPhyParam>
 800feb0:	4603      	mov	r3, r0
 800feb2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	b25a      	sxtb	r2, r3
 800feb8:	4b99      	ldr	r3, [pc, #612]	; (8010120 <LoRaMacInitialization+0x384>)
 800feba:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800febe:	2310      	movs	r3, #16
 800fec0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fec4:	4b96      	ldr	r3, [pc, #600]	; (8010120 <LoRaMacInitialization+0x384>)
 800fec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fece:	4611      	mov	r1, r2
 800fed0:	4618      	mov	r0, r3
 800fed2:	f003 fad9 	bl	8013488 <RegionGetPhyParam>
 800fed6:	4603      	mov	r3, r0
 800fed8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	4a90      	ldr	r2, [pc, #576]	; (8010120 <LoRaMacInitialization+0x384>)
 800fede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800fee2:	2311      	movs	r3, #17
 800fee4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fee8:	4b8d      	ldr	r3, [pc, #564]	; (8010120 <LoRaMacInitialization+0x384>)
 800feea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fef2:	4611      	mov	r1, r2
 800fef4:	4618      	mov	r0, r3
 800fef6:	f003 fac7 	bl	8013488 <RegionGetPhyParam>
 800fefa:	4603      	mov	r3, r0
 800fefc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800fefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff00:	4a87      	ldr	r2, [pc, #540]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ff06:	2312      	movs	r3, #18
 800ff08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff0c:	4b84      	ldr	r3, [pc, #528]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff16:	4611      	mov	r1, r2
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f003 fab5 	bl	8013488 <RegionGetPhyParam>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	4a7e      	ldr	r2, [pc, #504]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ff2a:	2313      	movs	r3, #19
 800ff2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff30:	4b7b      	ldr	r3, [pc, #492]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff3a:	4611      	mov	r1, r2
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f003 faa3 	bl	8013488 <RegionGetPhyParam>
 800ff42:	4603      	mov	r3, r0
 800ff44:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	4a75      	ldr	r2, [pc, #468]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ff4e:	2314      	movs	r3, #20
 800ff50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff54:	4b72      	ldr	r3, [pc, #456]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff5e:	4611      	mov	r1, r2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f003 fa91 	bl	8013488 <RegionGetPhyParam>
 800ff66:	4603      	mov	r3, r0
 800ff68:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6c:	4a6c      	ldr	r2, [pc, #432]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff6e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ff72:	2317      	movs	r3, #23
 800ff74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff78:	4b69      	ldr	r3, [pc, #420]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff82:	4611      	mov	r1, r2
 800ff84:	4618      	mov	r0, r3
 800ff86:	f003 fa7f 	bl	8013488 <RegionGetPhyParam>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	4b63      	ldr	r3, [pc, #396]	; (8010120 <LoRaMacInitialization+0x384>)
 800ff94:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ff98:	2318      	movs	r3, #24
 800ff9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff9e:	4b60      	ldr	r3, [pc, #384]	; (8010120 <LoRaMacInitialization+0x384>)
 800ffa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f003 fa6c 	bl	8013488 <RegionGetPhyParam>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	4a5a      	ldr	r2, [pc, #360]	; (8010120 <LoRaMacInitialization+0x384>)
 800ffb8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	4a58      	ldr	r2, [pc, #352]	; (8010120 <LoRaMacInitialization+0x384>)
 800ffc0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ffc4:	2319      	movs	r3, #25
 800ffc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffca:	4b55      	ldr	r3, [pc, #340]	; (8010120 <LoRaMacInitialization+0x384>)
 800ffcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f003 fa56 	bl	8013488 <RegionGetPhyParam>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	4b4e      	ldr	r3, [pc, #312]	; (8010120 <LoRaMacInitialization+0x384>)
 800ffe6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	4b4c      	ldr	r3, [pc, #304]	; (8010120 <LoRaMacInitialization+0x384>)
 800fff0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800fff4:	231e      	movs	r3, #30
 800fff6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fffa:	4b49      	ldr	r3, [pc, #292]	; (8010120 <LoRaMacInitialization+0x384>)
 800fffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010000:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010004:	4611      	mov	r1, r2
 8010006:	4618      	mov	r0, r3
 8010008:	f003 fa3e 	bl	8013488 <RegionGetPhyParam>
 801000c:	4603      	mov	r3, r0
 801000e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010012:	b2da      	uxtb	r2, r3
 8010014:	4b42      	ldr	r3, [pc, #264]	; (8010120 <LoRaMacInitialization+0x384>)
 8010016:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801001a:	231f      	movs	r3, #31
 801001c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010020:	4b3f      	ldr	r3, [pc, #252]	; (8010120 <LoRaMacInitialization+0x384>)
 8010022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010026:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801002a:	4611      	mov	r1, r2
 801002c:	4618      	mov	r0, r3
 801002e:	f003 fa2b 	bl	8013488 <RegionGetPhyParam>
 8010032:	4603      	mov	r3, r0
 8010034:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010038:	b2da      	uxtb	r2, r3
 801003a:	4b39      	ldr	r3, [pc, #228]	; (8010120 <LoRaMacInitialization+0x384>)
 801003c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010040:	2320      	movs	r3, #32
 8010042:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010046:	4b36      	ldr	r3, [pc, #216]	; (8010120 <LoRaMacInitialization+0x384>)
 8010048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801004c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010050:	4611      	mov	r1, r2
 8010052:	4618      	mov	r0, r3
 8010054:	f003 fa18 	bl	8013488 <RegionGetPhyParam>
 8010058:	4603      	mov	r3, r0
 801005a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	4a30      	ldr	r2, [pc, #192]	; (8010120 <LoRaMacInitialization+0x384>)
 8010060:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010064:	2321      	movs	r3, #33	; 0x21
 8010066:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801006a:	4b2d      	ldr	r3, [pc, #180]	; (8010120 <LoRaMacInitialization+0x384>)
 801006c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010070:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f003 fa06 	bl	8013488 <RegionGetPhyParam>
 801007c:	4603      	mov	r3, r0
 801007e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	4a27      	ldr	r2, [pc, #156]	; (8010120 <LoRaMacInitialization+0x384>)
 8010084:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010088:	230b      	movs	r3, #11
 801008a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801008e:	4b24      	ldr	r3, [pc, #144]	; (8010120 <LoRaMacInitialization+0x384>)
 8010090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010094:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f003 f9f4 	bl	8013488 <RegionGetPhyParam>
 80100a0:	4603      	mov	r3, r0
 80100a2:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <LoRaMacInitialization+0x388>)
 80100aa:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80100ae:	230c      	movs	r3, #12
 80100b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80100b4:	4b1a      	ldr	r3, [pc, #104]	; (8010120 <LoRaMacInitialization+0x384>)
 80100b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80100be:	4611      	mov	r1, r2
 80100c0:	4618      	mov	r0, r3
 80100c2:	f003 f9e1 	bl	8013488 <RegionGetPhyParam>
 80100c6:	4603      	mov	r3, r0
 80100c8:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 80100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	4b15      	ldr	r3, [pc, #84]	; (8010124 <LoRaMacInitialization+0x388>)
 80100d0:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80100d4:	4b12      	ldr	r3, [pc, #72]	; (8010120 <LoRaMacInitialization+0x384>)
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80100dc:	4b10      	ldr	r3, [pc, #64]	; (8010120 <LoRaMacInitialization+0x384>)
 80100de:	220a      	movs	r2, #10
 80100e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80100e4:	4b0e      	ldr	r3, [pc, #56]	; (8010120 <LoRaMacInitialization+0x384>)
 80100e6:	2206      	movs	r2, #6
 80100e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80100ec:	4b0c      	ldr	r3, [pc, #48]	; (8010120 <LoRaMacInitialization+0x384>)
 80100ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100f2:	4a0b      	ldr	r2, [pc, #44]	; (8010120 <LoRaMacInitialization+0x384>)
 80100f4:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80100f6:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <LoRaMacInitialization+0x384>)
 80100f8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80100fc:	4b08      	ldr	r3, [pc, #32]	; (8010120 <LoRaMacInitialization+0x384>)
 80100fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010102:	4b07      	ldr	r3, [pc, #28]	; (8010120 <LoRaMacInitialization+0x384>)
 8010104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010108:	4a05      	ldr	r2, [pc, #20]	; (8010120 <LoRaMacInitialization+0x384>)
 801010a:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801010c:	4b04      	ldr	r3, [pc, #16]	; (8010120 <LoRaMacInitialization+0x384>)
 801010e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010112:	4a03      	ldr	r2, [pc, #12]	; (8010120 <LoRaMacInitialization+0x384>)
 8010114:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010116:	4b02      	ldr	r3, [pc, #8]	; (8010120 <LoRaMacInitialization+0x384>)
 8010118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801011c:	e006      	b.n	801012c <LoRaMacInitialization+0x390>
 801011e:	bf00      	nop
 8010120:	20000b50 	.word	0x20000b50
 8010124:	20000644 	.word	0x20000644
 8010128:	01000300 	.word	0x01000300
 801012c:	4a60      	ldr	r2, [pc, #384]	; (80102b0 <LoRaMacInitialization+0x514>)
 801012e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010130:	4b5f      	ldr	r3, [pc, #380]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010136:	4a5e      	ldr	r2, [pc, #376]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010138:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801013a:	4b5d      	ldr	r3, [pc, #372]	; (80102b0 <LoRaMacInitialization+0x514>)
 801013c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010140:	4a5b      	ldr	r2, [pc, #364]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010142:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010144:	4b5a      	ldr	r3, [pc, #360]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010146:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801014a:	4b59      	ldr	r3, [pc, #356]	; (80102b0 <LoRaMacInitialization+0x514>)
 801014c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010150:	2300      	movs	r3, #0
 8010152:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010156:	4b57      	ldr	r3, [pc, #348]	; (80102b4 <LoRaMacInitialization+0x518>)
 8010158:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801015a:	4b57      	ldr	r3, [pc, #348]	; (80102b8 <LoRaMacInitialization+0x51c>)
 801015c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801015e:	4b54      	ldr	r3, [pc, #336]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010164:	f107 0218 	add.w	r2, r7, #24
 8010168:	4611      	mov	r1, r2
 801016a:	4618      	mov	r0, r3
 801016c:	f003 f9b5 	bl	80134da <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010170:	4a52      	ldr	r2, [pc, #328]	; (80102bc <LoRaMacInitialization+0x520>)
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010178:	f7ff f87e 	bl	800f278 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801017c:	4b4c      	ldr	r3, [pc, #304]	; (80102b0 <LoRaMacInitialization+0x514>)
 801017e:	2201      	movs	r2, #1
 8010180:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8010184:	4a4d      	ldr	r2, [pc, #308]	; (80102bc <LoRaMacInitialization+0x520>)
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801018c:	4b4b      	ldr	r3, [pc, #300]	; (80102bc <LoRaMacInitialization+0x520>)
 801018e:	2200      	movs	r2, #0
 8010190:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8010194:	4b49      	ldr	r3, [pc, #292]	; (80102bc <LoRaMacInitialization+0x520>)
 8010196:	2201      	movs	r2, #1
 8010198:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801019c:	4b44      	ldr	r3, [pc, #272]	; (80102b0 <LoRaMacInitialization+0x514>)
 801019e:	2200      	movs	r2, #0
 80101a0:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80101a2:	4b43      	ldr	r3, [pc, #268]	; (80102b0 <LoRaMacInitialization+0x514>)
 80101a4:	2200      	movs	r2, #0
 80101a6:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80101a8:	2300      	movs	r3, #0
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	4b44      	ldr	r3, [pc, #272]	; (80102c0 <LoRaMacInitialization+0x524>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	f04f 31ff 	mov.w	r1, #4294967295
 80101b4:	4843      	ldr	r0, [pc, #268]	; (80102c4 <LoRaMacInitialization+0x528>)
 80101b6:	f009 fd21 	bl	8019bfc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80101ba:	2300      	movs	r3, #0
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	4b42      	ldr	r3, [pc, #264]	; (80102c8 <LoRaMacInitialization+0x52c>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	f04f 31ff 	mov.w	r1, #4294967295
 80101c6:	4841      	ldr	r0, [pc, #260]	; (80102cc <LoRaMacInitialization+0x530>)
 80101c8:	f009 fd18 	bl	8019bfc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80101cc:	2300      	movs	r3, #0
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4b3f      	ldr	r3, [pc, #252]	; (80102d0 <LoRaMacInitialization+0x534>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	f04f 31ff 	mov.w	r1, #4294967295
 80101d8:	483e      	ldr	r0, [pc, #248]	; (80102d4 <LoRaMacInitialization+0x538>)
 80101da:	f009 fd0f 	bl	8019bfc <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80101de:	2300      	movs	r3, #0
 80101e0:	9300      	str	r3, [sp, #0]
 80101e2:	4b3d      	ldr	r3, [pc, #244]	; (80102d8 <LoRaMacInitialization+0x53c>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	f04f 31ff 	mov.w	r1, #4294967295
 80101ea:	483c      	ldr	r0, [pc, #240]	; (80102dc <LoRaMacInitialization+0x540>)
 80101ec:	f009 fd06 	bl	8019bfc <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80101f0:	4c2f      	ldr	r4, [pc, #188]	; (80102b0 <LoRaMacInitialization+0x514>)
 80101f2:	463b      	mov	r3, r7
 80101f4:	4618      	mov	r0, r3
 80101f6:	f009 f871 	bl	80192dc <SysTimeGetMcuTime>
 80101fa:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80101fe:	463a      	mov	r2, r7
 8010200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010204:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010208:	4b2c      	ldr	r3, [pc, #176]	; (80102bc <LoRaMacInitialization+0x520>)
 801020a:	4a35      	ldr	r2, [pc, #212]	; (80102e0 <LoRaMacInitialization+0x544>)
 801020c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010210:	4b2a      	ldr	r3, [pc, #168]	; (80102bc <LoRaMacInitialization+0x520>)
 8010212:	4a34      	ldr	r2, [pc, #208]	; (80102e4 <LoRaMacInitialization+0x548>)
 8010214:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010218:	4b28      	ldr	r3, [pc, #160]	; (80102bc <LoRaMacInitialization+0x520>)
 801021a:	4a33      	ldr	r2, [pc, #204]	; (80102e8 <LoRaMacInitialization+0x54c>)
 801021c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010220:	4b26      	ldr	r3, [pc, #152]	; (80102bc <LoRaMacInitialization+0x520>)
 8010222:	4a32      	ldr	r2, [pc, #200]	; (80102ec <LoRaMacInitialization+0x550>)
 8010224:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010228:	4b24      	ldr	r3, [pc, #144]	; (80102bc <LoRaMacInitialization+0x520>)
 801022a:	4a31      	ldr	r2, [pc, #196]	; (80102f0 <LoRaMacInitialization+0x554>)
 801022c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010230:	4b30      	ldr	r3, [pc, #192]	; (80102f4 <LoRaMacInitialization+0x558>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4830      	ldr	r0, [pc, #192]	; (80102f8 <LoRaMacInitialization+0x55c>)
 8010236:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	4619      	mov	r1, r3
 801023e:	482f      	ldr	r0, [pc, #188]	; (80102fc <LoRaMacInitialization+0x560>)
 8010240:	f7fa fe44 	bl	800aecc <SecureElementInit>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d001      	beq.n	801024e <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801024a:	2311      	movs	r3, #17
 801024c:	e02b      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801024e:	4818      	ldr	r0, [pc, #96]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010250:	f002 fa38 	bl	80126c4 <LoRaMacCryptoInit>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801025a:	2311      	movs	r3, #17
 801025c:	e023      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801025e:	f001 fb57 	bl	8011910 <LoRaMacCommandsInit>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d001      	beq.n	801026c <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010268:	2313      	movs	r3, #19
 801026a:	e01c      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801026c:	4824      	ldr	r0, [pc, #144]	; (8010300 <LoRaMacInitialization+0x564>)
 801026e:	f002 faf3 	bl	8012858 <LoRaMacCryptoSetMulticastReference>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d001      	beq.n	801027c <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010278:	2311      	movs	r3, #17
 801027a:	e014      	b.n	80102a6 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801027c:	4b1d      	ldr	r3, [pc, #116]	; (80102f4 <LoRaMacInitialization+0x558>)
 801027e:	695b      	ldr	r3, [r3, #20]
 8010280:	4798      	blx	r3
 8010282:	4603      	mov	r3, r0
 8010284:	4618      	mov	r0, r3
 8010286:	f005 fbed 	bl	8015a64 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801028a:	4b1a      	ldr	r3, [pc, #104]	; (80102f4 <LoRaMacInitialization+0x558>)
 801028c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801028e:	4a08      	ldr	r2, [pc, #32]	; (80102b0 <LoRaMacInitialization+0x514>)
 8010290:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8010294:	4610      	mov	r0, r2
 8010296:	4798      	blx	r3
    Radio.Sleep( );
 8010298:	4b16      	ldr	r3, [pc, #88]	; (80102f4 <LoRaMacInitialization+0x558>)
 801029a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801029c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801029e:	2001      	movs	r0, #1
 80102a0:	f7fd faf2 	bl	800d888 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80102a4:	2300      	movs	r3, #0
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3734      	adds	r7, #52	; 0x34
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd90      	pop	{r4, r7, pc}
 80102ae:	bf00      	nop
 80102b0:	20000b50 	.word	0x20000b50
 80102b4:	20000d30 	.word	0x20000d30
 80102b8:	20000dc4 	.word	0x20000dc4
 80102bc:	20000644 	.word	0x20000644
 80102c0:	0800ddf5 	.word	0x0800ddf5
 80102c4:	200009ac 	.word	0x200009ac
 80102c8:	0800de69 	.word	0x0800de69
 80102cc:	200009c4 	.word	0x200009c4
 80102d0:	0800ded5 	.word	0x0800ded5
 80102d4:	200009dc 	.word	0x200009dc
 80102d8:	0800df49 	.word	0x0800df49
 80102dc:	20000a3c 	.word	0x20000a3c
 80102e0:	0800ca05 	.word	0x0800ca05
 80102e4:	0800ca7d 	.word	0x0800ca7d
 80102e8:	0800cb55 	.word	0x0800cb55
 80102ec:	0800cb09 	.word	0x0800cb09
 80102f0:	0800cb91 	.word	0x0800cb91
 80102f4:	0801ba18 	.word	0x0801ba18
 80102f8:	20000990 	.word	0x20000990
 80102fc:	20000c70 	.word	0x20000c70
 8010300:	20000c28 	.word	0x20000c28

08010304 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010304:	b480      	push	{r7}
 8010306:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010308:	4b04      	ldr	r3, [pc, #16]	; (801031c <LoRaMacStart+0x18>)
 801030a:	2200      	movs	r2, #0
 801030c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	46bd      	mov	sp, r7
 8010316:	bc80      	pop	{r7}
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	20000644 	.word	0x20000644

08010320 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010320:	b580      	push	{r7, lr}
 8010322:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010324:	f7fd fa9a 	bl	800d85c <LoRaMacIsBusy>
 8010328:	4603      	mov	r3, r0
 801032a:	f083 0301 	eor.w	r3, r3, #1
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d005      	beq.n	8010340 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8010334:	4b07      	ldr	r3, [pc, #28]	; (8010354 <LoRaMacStop+0x34>)
 8010336:	2201      	movs	r2, #1
 8010338:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 801033c:	2300      	movs	r3, #0
 801033e:	e007      	b.n	8010350 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010340:	4b04      	ldr	r3, [pc, #16]	; (8010354 <LoRaMacStop+0x34>)
 8010342:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010346:	2b01      	cmp	r3, #1
 8010348:	d101      	bne.n	801034e <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 801034a:	2300      	movs	r3, #0
 801034c:	e000      	b.n	8010350 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801034e:	2301      	movs	r3, #1
}
 8010350:	4618      	mov	r0, r3
 8010352:	bd80      	pop	{r7, pc}
 8010354:	20000644 	.word	0x20000644

08010358 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 801035c:	4812      	ldr	r0, [pc, #72]	; (80103a8 <LoRaMacHalt+0x50>)
 801035e:	f009 fcf1 	bl	8019d44 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8010362:	4812      	ldr	r0, [pc, #72]	; (80103ac <LoRaMacHalt+0x54>)
 8010364:	f009 fcee 	bl	8019d44 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010368:	4811      	ldr	r0, [pc, #68]	; (80103b0 <LoRaMacHalt+0x58>)
 801036a:	f009 fceb 	bl	8019d44 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 801036e:	4811      	ldr	r0, [pc, #68]	; (80103b4 <LoRaMacHalt+0x5c>)
 8010370:	f009 fce8 	bl	8019d44 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8010374:	f001 f957 	bl	8011626 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8010378:	4b0f      	ldr	r3, [pc, #60]	; (80103b8 <LoRaMacHalt+0x60>)
 801037a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801037e:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <LoRaMacHalt+0x64>)
 8010380:	2200      	movs	r2, #0
 8010382:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8010386:	480e      	ldr	r0, [pc, #56]	; (80103c0 <LoRaMacHalt+0x68>)
 8010388:	f7fd fc2e 	bl	800dbe8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 801038c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010390:	490b      	ldr	r1, [pc, #44]	; (80103c0 <LoRaMacHalt+0x68>)
 8010392:	480c      	ldr	r0, [pc, #48]	; (80103c4 <LoRaMacHalt+0x6c>)
 8010394:	f005 fb8b 	bl	8015aae <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8010398:	4b08      	ldr	r3, [pc, #32]	; (80103bc <LoRaMacHalt+0x64>)
 801039a:	2201      	movs	r2, #1
 801039c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80103a0:	2300      	movs	r3, #0
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	200009ac 	.word	0x200009ac
 80103ac:	200009c4 	.word	0x200009c4
 80103b0:	200009dc 	.word	0x200009dc
 80103b4:	20000a3c 	.word	0x20000a3c
 80103b8:	0801ba18 	.word	0x0801ba18
 80103bc:	20000644 	.word	0x20000644
 80103c0:	20000b50 	.word	0x20000b50
 80103c4:	20001278 	.word	0x20001278

080103c8 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b08a      	sub	sp, #40	; 0x28
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	4603      	mov	r3, r0
 80103d0:	6039      	str	r1, [r7, #0]
 80103d2:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80103d4:	4b3e      	ldr	r3, [pc, #248]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80103da:	4b3d      	ldr	r3, [pc, #244]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 80103dc:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80103e0:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80103e2:	4b3b      	ldr	r3, [pc, #236]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 80103e4:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 80103e8:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80103f4:	2303      	movs	r3, #3
 80103f6:	e066      	b.n	80104c6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80103f8:	4b35      	ldr	r3, [pc, #212]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 80103fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80103fe:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8010400:	2300      	movs	r3, #0
 8010402:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010404:	4b32      	ldr	r3, [pc, #200]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 8010406:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801040a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801040c:	4b30      	ldr	r3, [pc, #192]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 801040e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010410:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010412:	4b30      	ldr	r3, [pc, #192]	; (80104d4 <LoRaMacQueryTxPossible+0x10c>)
 8010414:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010418:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801041a:	4b2e      	ldr	r3, [pc, #184]	; (80104d4 <LoRaMacQueryTxPossible+0x10c>)
 801041c:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010420:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010422:	4b2b      	ldr	r3, [pc, #172]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 8010424:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010428:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801042c:	4b28      	ldr	r3, [pc, #160]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 801042e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010432:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010436:	4b26      	ldr	r3, [pc, #152]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 8010438:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801043c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010440:	4b23      	ldr	r3, [pc, #140]	; (80104d0 <LoRaMacQueryTxPossible+0x108>)
 8010442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801044a:	f107 0310 	add.w	r3, r7, #16
 801044e:	f107 020e 	add.w	r2, r7, #14
 8010452:	f107 010f 	add.w	r1, r7, #15
 8010456:	f107 0014 	add.w	r0, r7, #20
 801045a:	f001 f84f 	bl	80114fc <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801045e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010462:	4618      	mov	r0, r3
 8010464:	f7fd feb8 	bl	800e1d8 <GetMaxAppPayloadWithoutFOptsLength>
 8010468:	4603      	mov	r3, r0
 801046a:	461a      	mov	r2, r3
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010470:	f107 0308 	add.w	r3, r7, #8
 8010474:	4618      	mov	r0, r3
 8010476:	f001 fb19 	bl	8011aac <LoRaMacCommandsGetSizeSerializedCmds>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d001      	beq.n	8010484 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010480:	2313      	movs	r3, #19
 8010482:	e020      	b.n	80104c6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	2b0f      	cmp	r3, #15
 8010488:	d819      	bhi.n	80104be <LoRaMacQueryTxPossible+0xf6>
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	785b      	ldrb	r3, [r3, #1]
 801048e:	461a      	mov	r2, r3
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	429a      	cmp	r2, r3
 8010494:	d313      	bcc.n	80104be <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	785a      	ldrb	r2, [r3, #1]
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	b2db      	uxtb	r3, r3
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	b2da      	uxtb	r2, r3
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	785b      	ldrb	r3, [r3, #1]
 80104aa:	4619      	mov	r1, r3
 80104ac:	79fa      	ldrb	r2, [r7, #7]
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	4413      	add	r3, r2
 80104b2:	4299      	cmp	r1, r3
 80104b4:	d301      	bcc.n	80104ba <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80104b6:	2300      	movs	r3, #0
 80104b8:	e005      	b.n	80104c6 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80104ba:	2308      	movs	r3, #8
 80104bc:	e003      	b.n	80104c6 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	2200      	movs	r2, #0
 80104c2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80104c4:	2308      	movs	r3, #8
    }
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3728      	adds	r7, #40	; 0x28
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	20000b50 	.word	0x20000b50
 80104d4:	20000644 	.word	0x20000644

080104d8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80104d8:	b590      	push	{r4, r7, lr}
 80104da:	b087      	sub	sp, #28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80104ea:	2303      	movs	r3, #3
 80104ec:	e171      	b.n	80107d2 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	2b37      	cmp	r3, #55	; 0x37
 80104f4:	f200 8166 	bhi.w	80107c4 <LoRaMacMibGetRequestConfirm+0x2ec>
 80104f8:	a201      	add	r2, pc, #4	; (adr r2, 8010500 <LoRaMacMibGetRequestConfirm+0x28>)
 80104fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104fe:	bf00      	nop
 8010500:	080105e1 	.word	0x080105e1
 8010504:	080105ed 	.word	0x080105ed
 8010508:	080105f9 	.word	0x080105f9
 801050c:	08010605 	.word	0x08010605
 8010510:	08010611 	.word	0x08010611
 8010514:	0801061d 	.word	0x0801061d
 8010518:	08010629 	.word	0x08010629
 801051c:	080107c5 	.word	0x080107c5
 8010520:	080107c5 	.word	0x080107c5
 8010524:	080107c5 	.word	0x080107c5
 8010528:	080107c5 	.word	0x080107c5
 801052c:	080107c5 	.word	0x080107c5
 8010530:	080107c5 	.word	0x080107c5
 8010534:	080107c5 	.word	0x080107c5
 8010538:	080107c5 	.word	0x080107c5
 801053c:	08010635 	.word	0x08010635
 8010540:	08010641 	.word	0x08010641
 8010544:	0801064d 	.word	0x0801064d
 8010548:	0801066f 	.word	0x0801066f
 801054c:	08010681 	.word	0x08010681
 8010550:	08010693 	.word	0x08010693
 8010554:	080106a5 	.word	0x080106a5
 8010558:	080106d9 	.word	0x080106d9
 801055c:	080106b7 	.word	0x080106b7
 8010560:	080106fb 	.word	0x080106fb
 8010564:	08010707 	.word	0x08010707
 8010568:	08010711 	.word	0x08010711
 801056c:	0801071b 	.word	0x0801071b
 8010570:	08010725 	.word	0x08010725
 8010574:	0801072f 	.word	0x0801072f
 8010578:	08010739 	.word	0x08010739
 801057c:	08010745 	.word	0x08010745
 8010580:	0801075d 	.word	0x0801075d
 8010584:	08010751 	.word	0x08010751
 8010588:	08010769 	.word	0x08010769
 801058c:	08010773 	.word	0x08010773
 8010590:	0801077f 	.word	0x0801077f
 8010594:	08010799 	.word	0x08010799
 8010598:	08010789 	.word	0x08010789
 801059c:	08010791 	.word	0x08010791
 80105a0:	080107c5 	.word	0x080107c5
 80105a4:	080107a5 	.word	0x080107a5
 80105a8:	080107c5 	.word	0x080107c5
 80105ac:	080107c5 	.word	0x080107c5
 80105b0:	080107c5 	.word	0x080107c5
 80105b4:	080107c5 	.word	0x080107c5
 80105b8:	080107c5 	.word	0x080107c5
 80105bc:	080107c5 	.word	0x080107c5
 80105c0:	080107c5 	.word	0x080107c5
 80105c4:	080107c5 	.word	0x080107c5
 80105c8:	080107c5 	.word	0x080107c5
 80105cc:	080107c5 	.word	0x080107c5
 80105d0:	080107c5 	.word	0x080107c5
 80105d4:	080107c5 	.word	0x080107c5
 80105d8:	080107c5 	.word	0x080107c5
 80105dc:	080107b9 	.word	0x080107b9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80105e0:	4b7e      	ldr	r3, [pc, #504]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80105e2:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	711a      	strb	r2, [r3, #4]
            break;
 80105ea:	e0f1      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80105ec:	4b7b      	ldr	r3, [pc, #492]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80105ee:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	711a      	strb	r2, [r3, #4]
            break;
 80105f6:	e0eb      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80105f8:	f7fa ff54 	bl	800b4a4 <SecureElementGetDevEui>
 80105fc:	4602      	mov	r2, r0
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	605a      	str	r2, [r3, #4]
            break;
 8010602:	e0e5      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010604:	f7fa ff70 	bl	800b4e8 <SecureElementGetJoinEui>
 8010608:	4602      	mov	r2, r0
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	605a      	str	r2, [r3, #4]
            break;
 801060e:	e0df      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010610:	4b72      	ldr	r3, [pc, #456]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010612:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	711a      	strb	r2, [r3, #4]
            break;
 801061a:	e0d9      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801061c:	4b6f      	ldr	r3, [pc, #444]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801061e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	605a      	str	r2, [r3, #4]
            break;
 8010626:	e0d3      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8010628:	4b6c      	ldr	r3, [pc, #432]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801062a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	605a      	str	r2, [r3, #4]
            break;
 8010632:	e0cd      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010634:	4b69      	ldr	r3, [pc, #420]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010636:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	711a      	strb	r2, [r3, #4]
            break;
 801063e:	e0c7      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010640:	4b66      	ldr	r3, [pc, #408]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010642:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	711a      	strb	r2, [r3, #4]
            break;
 801064a:	e0c1      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801064c:	231d      	movs	r3, #29
 801064e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010650:	4b62      	ldr	r3, [pc, #392]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010656:	f107 0210 	add.w	r2, r7, #16
 801065a:	4611      	mov	r1, r2
 801065c:	4618      	mov	r0, r3
 801065e:	f002 ff13 	bl	8013488 <RegionGetPhyParam>
 8010662:	4603      	mov	r3, r0
 8010664:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010666:	68fa      	ldr	r2, [r7, #12]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	605a      	str	r2, [r3, #4]
            break;
 801066c:	e0b0      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a5a      	ldr	r2, [pc, #360]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010672:	3304      	adds	r3, #4
 8010674:	3264      	adds	r2, #100	; 0x64
 8010676:	e892 0003 	ldmia.w	r2, {r0, r1}
 801067a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801067e:	e0a7      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4a56      	ldr	r2, [pc, #344]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010684:	3304      	adds	r3, #4
 8010686:	32a8      	adds	r2, #168	; 0xa8
 8010688:	e892 0003 	ldmia.w	r2, {r0, r1}
 801068c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010690:	e09e      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a51      	ldr	r2, [pc, #324]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010696:	3304      	adds	r3, #4
 8010698:	326c      	adds	r2, #108	; 0x6c
 801069a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801069e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80106a2:	e095      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4a4d      	ldr	r2, [pc, #308]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80106a8:	3304      	adds	r3, #4
 80106aa:	32b0      	adds	r2, #176	; 0xb0
 80106ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106b0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80106b4:	e08c      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80106b6:	231b      	movs	r3, #27
 80106b8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80106ba:	4b48      	ldr	r3, [pc, #288]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80106bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106c0:	f107 0210 	add.w	r2, r7, #16
 80106c4:	4611      	mov	r1, r2
 80106c6:	4618      	mov	r0, r3
 80106c8:	f002 fede 	bl	8013488 <RegionGetPhyParam>
 80106cc:	4603      	mov	r3, r0
 80106ce:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80106d0:	68fa      	ldr	r2, [r7, #12]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	605a      	str	r2, [r3, #4]
            break;
 80106d6:	e07b      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80106d8:	231a      	movs	r3, #26
 80106da:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80106dc:	4b3f      	ldr	r3, [pc, #252]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80106de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106e2:	f107 0210 	add.w	r2, r7, #16
 80106e6:	4611      	mov	r1, r2
 80106e8:	4618      	mov	r0, r3
 80106ea:	f002 fecd 	bl	8013488 <RegionGetPhyParam>
 80106ee:	4603      	mov	r3, r0
 80106f0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	605a      	str	r2, [r3, #4]
            break;
 80106f8:	e06a      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80106fa:	4b38      	ldr	r3, [pc, #224]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80106fc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	711a      	strb	r2, [r3, #4]
            break;
 8010704:	e064      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010706:	4b35      	ldr	r3, [pc, #212]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	605a      	str	r2, [r3, #4]
            break;
 801070e:	e05f      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010710:	4b32      	ldr	r3, [pc, #200]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	605a      	str	r2, [r3, #4]
            break;
 8010718:	e05a      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801071a:	4b30      	ldr	r3, [pc, #192]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801071c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	605a      	str	r2, [r3, #4]
            break;
 8010722:	e055      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010724:	4b2d      	ldr	r3, [pc, #180]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010726:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	605a      	str	r2, [r3, #4]
            break;
 801072c:	e050      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801072e:	4b2b      	ldr	r3, [pc, #172]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	605a      	str	r2, [r3, #4]
            break;
 8010736:	e04b      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010738:	4b28      	ldr	r3, [pc, #160]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801073a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	711a      	strb	r2, [r3, #4]
            break;
 8010742:	e045      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010744:	4b25      	ldr	r3, [pc, #148]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010746:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	711a      	strb	r2, [r3, #4]
            break;
 801074e:	e03f      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010750:	4b22      	ldr	r3, [pc, #136]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010752:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	711a      	strb	r2, [r3, #4]
            break;
 801075a:	e039      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801075c:	4b1f      	ldr	r3, [pc, #124]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801075e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	711a      	strb	r2, [r3, #4]
            break;
 8010766:	e033      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010768:	4b1c      	ldr	r3, [pc, #112]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801076a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	605a      	str	r2, [r3, #4]
            break;
 8010770:	e02e      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010772:	4b1a      	ldr	r3, [pc, #104]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010774:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	711a      	strb	r2, [r3, #4]
            break;
 801077c:	e028      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801077e:	4b17      	ldr	r3, [pc, #92]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010780:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	605a      	str	r2, [r3, #4]
            break;
 8010786:	e023      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4a14      	ldr	r2, [pc, #80]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801078c:	605a      	str	r2, [r3, #4]
            break;
 801078e:	e01f      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4a13      	ldr	r2, [pc, #76]	; (80107e0 <LoRaMacMibGetRequestConfirm+0x308>)
 8010794:	605a      	str	r2, [r3, #4]
            break;
 8010796:	e01b      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010798:	4b10      	ldr	r3, [pc, #64]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 801079a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	605a      	str	r2, [r3, #4]
            break;
 80107a2:	e015      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a0d      	ldr	r2, [pc, #52]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80107a8:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80107ac:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80107ae:	687c      	ldr	r4, [r7, #4]
 80107b0:	f002 fff2 	bl	8013798 <RegionGetVersion>
 80107b4:	60a0      	str	r0, [r4, #8]
            break;
 80107b6:	e00b      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80107b8:	4b08      	ldr	r3, [pc, #32]	; (80107dc <LoRaMacMibGetRequestConfirm+0x304>)
 80107ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	605a      	str	r2, [r3, #4]
            break;
 80107c2:	e005      	b.n	80107d0 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 ff45 	bl	8011654 <LoRaMacClassBMibGetRequestConfirm>
 80107ca:	4603      	mov	r3, r0
 80107cc:	75fb      	strb	r3, [r7, #23]
            break;
 80107ce:	bf00      	nop
        }
    }
    return status;
 80107d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	371c      	adds	r7, #28
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd90      	pop	{r4, r7, pc}
 80107da:	bf00      	nop
 80107dc:	20000b50 	.word	0x20000b50
 80107e0:	20001278 	.word	0x20001278

080107e4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b086      	sub	sp, #24
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107f6:	2303      	movs	r3, #3
 80107f8:	e348      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80107fa:	4bb7      	ldr	r3, [pc, #732]	; (8010ad8 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80107fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010800:	f003 0302 	and.w	r3, r3, #2
 8010804:	2b00      	cmp	r3, #0
 8010806:	d001      	beq.n	801080c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010808:	2301      	movs	r3, #1
 801080a:	e33f      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	2b37      	cmp	r3, #55	; 0x37
 8010812:	f200 8319 	bhi.w	8010e48 <LoRaMacMibSetRequestConfirm+0x664>
 8010816:	a201      	add	r2, pc, #4	; (adr r2, 801081c <LoRaMacMibSetRequestConfirm+0x38>)
 8010818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801081c:	080108fd 	.word	0x080108fd
 8010820:	0801090d 	.word	0x0801090d
 8010824:	08010927 	.word	0x08010927
 8010828:	0801093f 	.word	0x0801093f
 801082c:	08010957 	.word	0x08010957
 8010830:	08010963 	.word	0x08010963
 8010834:	0801096f 	.word	0x0801096f
 8010838:	0801097b 	.word	0x0801097b
 801083c:	080109a1 	.word	0x080109a1
 8010840:	080109c7 	.word	0x080109c7
 8010844:	080109ed 	.word	0x080109ed
 8010848:	08010a13 	.word	0x08010a13
 801084c:	08010a39 	.word	0x08010a39
 8010850:	08010a5f 	.word	0x08010a5f
 8010854:	08010a85 	.word	0x08010a85
 8010858:	08010aab 	.word	0x08010aab
 801085c:	08010acb 	.word	0x08010acb
 8010860:	08010e49 	.word	0x08010e49
 8010864:	08010ae5 	.word	0x08010ae5
 8010868:	08010b55 	.word	0x08010b55
 801086c:	08010b95 	.word	0x08010b95
 8010870:	08010bf7 	.word	0x08010bf7
 8010874:	08010c67 	.word	0x08010c67
 8010878:	08010c37 	.word	0x08010c37
 801087c:	08010c97 	.word	0x08010c97
 8010880:	08010cb9 	.word	0x08010cb9
 8010884:	08010cc3 	.word	0x08010cc3
 8010888:	08010ccd 	.word	0x08010ccd
 801088c:	08010cd7 	.word	0x08010cd7
 8010890:	08010ce1 	.word	0x08010ce1
 8010894:	08010ceb 	.word	0x08010ceb
 8010898:	08010d1d 	.word	0x08010d1d
 801089c:	08010d89 	.word	0x08010d89
 80108a0:	08010d57 	.word	0x08010d57
 80108a4:	08010dc5 	.word	0x08010dc5
 80108a8:	08010ddb 	.word	0x08010ddb
 80108ac:	08010df3 	.word	0x08010df3
 80108b0:	08010dfd 	.word	0x08010dfd
 80108b4:	08010e09 	.word	0x08010e09
 80108b8:	08010e49 	.word	0x08010e49
 80108bc:	08010e13 	.word	0x08010e13
 80108c0:	08010e49 	.word	0x08010e49
 80108c4:	08010e49 	.word	0x08010e49
 80108c8:	08010e49 	.word	0x08010e49
 80108cc:	08010e49 	.word	0x08010e49
 80108d0:	08010e49 	.word	0x08010e49
 80108d4:	08010e49 	.word	0x08010e49
 80108d8:	08010e49 	.word	0x08010e49
 80108dc:	08010e49 	.word	0x08010e49
 80108e0:	08010e49 	.word	0x08010e49
 80108e4:	08010e49 	.word	0x08010e49
 80108e8:	08010e49 	.word	0x08010e49
 80108ec:	08010e49 	.word	0x08010e49
 80108f0:	08010e49 	.word	0x08010e49
 80108f4:	08010e49 	.word	0x08010e49
 80108f8:	08010e3d 	.word	0x08010e3d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	791b      	ldrb	r3, [r3, #4]
 8010900:	4618      	mov	r0, r3
 8010902:	f7fd fb99 	bl	800e038 <SwitchClass>
 8010906:	4603      	mov	r3, r0
 8010908:	75fb      	strb	r3, [r7, #23]
            break;
 801090a:	e2be      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	791b      	ldrb	r3, [r3, #4]
 8010910:	2b02      	cmp	r3, #2
 8010912:	d005      	beq.n	8010920 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	791a      	ldrb	r2, [r3, #4]
 8010918:	4b70      	ldr	r3, [pc, #448]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 801091a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801091e:	e2b4      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010920:	2303      	movs	r3, #3
 8010922:	75fb      	strb	r3, [r7, #23]
            break;
 8010924:	e2b1      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	4618      	mov	r0, r3
 801092c:	f7fa fda2 	bl	800b474 <SecureElementSetDevEui>
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 828e 	beq.w	8010e54 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010938:	2303      	movs	r3, #3
 801093a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801093c:	e28a      	b.n	8010e54 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	4618      	mov	r0, r3
 8010944:	f7fa fdb8 	bl	800b4b8 <SecureElementSetJoinEui>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	f000 8284 	beq.w	8010e58 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010950:	2303      	movs	r3, #3
 8010952:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010954:	e280      	b.n	8010e58 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	791a      	ldrb	r2, [r3, #4]
 801095a:	4b60      	ldr	r3, [pc, #384]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 801095c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8010960:	e293      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	4a5d      	ldr	r2, [pc, #372]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010968:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 801096c:	e28d      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	4a5a      	ldr	r2, [pc, #360]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010974:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8010978:	e287      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00b      	beq.n	801099a <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	4619      	mov	r1, r3
 8010988:	2000      	movs	r0, #0
 801098a:	f001 ff8d 	bl	80128a8 <LoRaMacCryptoSetKey>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	f000 8263 	beq.w	8010e5c <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010996:	2311      	movs	r3, #17
 8010998:	e278      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801099a:	2303      	movs	r3, #3
 801099c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801099e:	e25d      	b.n	8010e5c <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00b      	beq.n	80109c0 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	4619      	mov	r1, r3
 80109ae:	2001      	movs	r0, #1
 80109b0:	f001 ff7a 	bl	80128a8 <LoRaMacCryptoSetKey>
 80109b4:	4603      	mov	r3, r0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 8252 	beq.w	8010e60 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80109bc:	2311      	movs	r3, #17
 80109be:	e265      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109c0:	2303      	movs	r3, #3
 80109c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80109c4:	e24c      	b.n	8010e60 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00b      	beq.n	80109e6 <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	4619      	mov	r1, r3
 80109d4:	2002      	movs	r0, #2
 80109d6:	f001 ff67 	bl	80128a8 <LoRaMacCryptoSetKey>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f000 8241 	beq.w	8010e64 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80109e2:	2311      	movs	r3, #17
 80109e4:	e252      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109e6:	2303      	movs	r3, #3
 80109e8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80109ea:	e23b      	b.n	8010e64 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00b      	beq.n	8010a0c <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	4619      	mov	r1, r3
 80109fa:	2003      	movs	r0, #3
 80109fc:	f001 ff54 	bl	80128a8 <LoRaMacCryptoSetKey>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f000 8230 	beq.w	8010e68 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010a08:	2311      	movs	r3, #17
 8010a0a:	e23f      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010a10:	e22a      	b.n	8010e68 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00b      	beq.n	8010a32 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	207f      	movs	r0, #127	; 0x7f
 8010a22:	f001 ff41 	bl	80128a8 <LoRaMacCryptoSetKey>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f000 821f 	beq.w	8010e6c <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010a2e:	2311      	movs	r3, #17
 8010a30:	e22c      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a32:	2303      	movs	r3, #3
 8010a34:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010a36:	e219      	b.n	8010e6c <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d00b      	beq.n	8010a58 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	4619      	mov	r1, r3
 8010a46:	2080      	movs	r0, #128	; 0x80
 8010a48:	f001 ff2e 	bl	80128a8 <LoRaMacCryptoSetKey>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f000 820e 	beq.w	8010e70 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010a54:	2311      	movs	r3, #17
 8010a56:	e219      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010a5c:	e208      	b.n	8010e70 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00b      	beq.n	8010a7e <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	2081      	movs	r0, #129	; 0x81
 8010a6e:	f001 ff1b 	bl	80128a8 <LoRaMacCryptoSetKey>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f000 81fd 	beq.w	8010e74 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010a7a:	2311      	movs	r3, #17
 8010a7c:	e206      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010a7e:	2303      	movs	r3, #3
 8010a80:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010a82:	e1f7      	b.n	8010e74 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00b      	beq.n	8010aa4 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	4619      	mov	r1, r3
 8010a92:	2082      	movs	r0, #130	; 0x82
 8010a94:	f001 ff08 	bl	80128a8 <LoRaMacCryptoSetKey>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 81ec 	beq.w	8010e78 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010aa0:	2311      	movs	r3, #17
 8010aa2:	e1f3      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010aa8:	e1e6      	b.n	8010e78 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	791a      	ldrb	r2, [r3, #4]
 8010aae:	4b0b      	ldr	r3, [pc, #44]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010ab0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010ab4:	4b0a      	ldr	r3, [pc, #40]	; (8010ae0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8010ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ab8:	4a08      	ldr	r2, [pc, #32]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010aba:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8010abe:	4610      	mov	r0, r2
 8010ac0:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8010ac2:	4b07      	ldr	r3, [pc, #28]	; (8010ae0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8010ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac6:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8010ac8:	e1df      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	791a      	ldrb	r2, [r3, #4]
 8010ace:	4b03      	ldr	r3, [pc, #12]	; (8010adc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8010ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8010ad4:	e1d9      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
 8010ad6:	bf00      	nop
 8010ad8:	20000644 	.word	0x20000644
 8010adc:	20000b50 	.word	0x20000b50
 8010ae0:	0801ba18 	.word	0x0801ba18
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	7a1b      	ldrb	r3, [r3, #8]
 8010ae8:	b25b      	sxtb	r3, r3
 8010aea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010aec:	4bb3      	ldr	r3, [pc, #716]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010aee:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010af2:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010af4:	4bb1      	ldr	r3, [pc, #708]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010afa:	f107 0108 	add.w	r1, r7, #8
 8010afe:	2207      	movs	r2, #7
 8010b00:	4618      	mov	r0, r3
 8010b02:	f002 fcfc 	bl	80134fe <RegionVerify>
 8010b06:	4603      	mov	r3, r0
 8010b08:	f083 0301 	eor.w	r3, r3, #1
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b12:	2303      	movs	r3, #3
 8010b14:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8010b16:	e1b8      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010b1e:	4ba7      	ldr	r3, [pc, #668]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b24:	f107 0108 	add.w	r1, r7, #8
 8010b28:	2200      	movs	r2, #0
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f002 fce7 	bl	80134fe <RegionVerify>
 8010b30:	4603      	mov	r3, r0
 8010b32:	f083 0301 	eor.w	r3, r3, #1
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d002      	beq.n	8010b42 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b3c:	2303      	movs	r3, #3
 8010b3e:	75fb      	strb	r3, [r7, #23]
            break;
 8010b40:	e1a3      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010b42:	4b9e      	ldr	r3, [pc, #632]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	3364      	adds	r3, #100	; 0x64
 8010b48:	3204      	adds	r2, #4
 8010b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b4e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010b52:	e19a      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7a1b      	ldrb	r3, [r3, #8]
 8010b58:	b25b      	sxtb	r3, r3
 8010b5a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b5c:	4b97      	ldr	r3, [pc, #604]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b5e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010b62:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010b64:	4b95      	ldr	r3, [pc, #596]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b6a:	f107 0108 	add.w	r1, r7, #8
 8010b6e:	2207      	movs	r2, #7
 8010b70:	4618      	mov	r0, r3
 8010b72:	f002 fcc4 	bl	80134fe <RegionVerify>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d008      	beq.n	8010b8e <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010b7c:	4b8f      	ldr	r3, [pc, #572]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	33a8      	adds	r3, #168	; 0xa8
 8010b82:	3204      	adds	r2, #4
 8010b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b88:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010b8c:	e17d      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b8e:	2303      	movs	r3, #3
 8010b90:	75fb      	strb	r3, [r7, #23]
            break;
 8010b92:	e17a      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	7a1b      	ldrb	r3, [r3, #8]
 8010b98:	b25b      	sxtb	r3, r3
 8010b9a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b9c:	4b87      	ldr	r3, [pc, #540]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010b9e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010ba2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010ba4:	4b85      	ldr	r3, [pc, #532]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010baa:	f107 0108 	add.w	r1, r7, #8
 8010bae:	2207      	movs	r2, #7
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f002 fca4 	bl	80134fe <RegionVerify>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d019      	beq.n	8010bf0 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010bbc:	4b7f      	ldr	r3, [pc, #508]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	336c      	adds	r3, #108	; 0x6c
 8010bc2:	3204      	adds	r2, #4
 8010bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bc8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010bcc:	4b7b      	ldr	r3, [pc, #492]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010bce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	f040 8152 	bne.w	8010e7c <LoRaMacMibSetRequestConfirm+0x698>
 8010bd8:	4b78      	ldr	r3, [pc, #480]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010bda:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f000 814c 	beq.w	8010e7c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8010be4:	4b76      	ldr	r3, [pc, #472]	; (8010dc0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8010bea:	f7fe fc67 	bl	800f4bc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010bee:	e145      	b.n	8010e7c <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bf0:	2303      	movs	r3, #3
 8010bf2:	75fb      	strb	r3, [r7, #23]
            break;
 8010bf4:	e142      	b.n	8010e7c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	7a1b      	ldrb	r3, [r3, #8]
 8010bfa:	b25b      	sxtb	r3, r3
 8010bfc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010bfe:	4b6f      	ldr	r3, [pc, #444]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c00:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010c04:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010c06:	4b6d      	ldr	r3, [pc, #436]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c0c:	f107 0108 	add.w	r1, r7, #8
 8010c10:	2207      	movs	r2, #7
 8010c12:	4618      	mov	r0, r3
 8010c14:	f002 fc73 	bl	80134fe <RegionVerify>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d008      	beq.n	8010c30 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8010c1e:	4b67      	ldr	r3, [pc, #412]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	33b0      	adds	r3, #176	; 0xb0
 8010c24:	3204      	adds	r2, #4
 8010c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c2a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010c2e:	e12c      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c30:	2303      	movs	r3, #3
 8010c32:	75fb      	strb	r3, [r7, #23]
            break;
 8010c34:	e129      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010c40:	4b5e      	ldr	r3, [pc, #376]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c46:	f107 020c 	add.w	r2, r7, #12
 8010c4a:	4611      	mov	r1, r2
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f002 fc7f 	bl	8013550 <RegionChanMaskSet>
 8010c52:	4603      	mov	r3, r0
 8010c54:	f083 0301 	eor.w	r3, r3, #1
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	f000 8110 	beq.w	8010e80 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c60:	2303      	movs	r3, #3
 8010c62:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010c64:	e10c      	b.n	8010e80 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010c70:	4b52      	ldr	r3, [pc, #328]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c76:	f107 020c 	add.w	r2, r7, #12
 8010c7a:	4611      	mov	r1, r2
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f002 fc67 	bl	8013550 <RegionChanMaskSet>
 8010c82:	4603      	mov	r3, r0
 8010c84:	f083 0301 	eor.w	r3, r3, #1
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f000 80fa 	beq.w	8010e84 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c90:	2303      	movs	r3, #3
 8010c92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010c94:	e0f6      	b.n	8010e84 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	791b      	ldrb	r3, [r3, #4]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d009      	beq.n	8010cb2 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010ca2:	2b0f      	cmp	r3, #15
 8010ca4:	d805      	bhi.n	8010cb2 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	791a      	ldrb	r2, [r3, #4]
 8010caa:	4b44      	ldr	r3, [pc, #272]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010cb0:	e0eb      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010cb2:	2303      	movs	r3, #3
 8010cb4:	75fb      	strb	r3, [r7, #23]
            break;
 8010cb6:	e0e8      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	4a3f      	ldr	r2, [pc, #252]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8010cc0:	e0e3      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	4a3d      	ldr	r2, [pc, #244]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cc8:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8010cca:	e0de      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	4a3a      	ldr	r2, [pc, #232]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cd2:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8010cd4:	e0d9      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	4a38      	ldr	r2, [pc, #224]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cdc:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8010cde:	e0d4      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	4a35      	ldr	r2, [pc, #212]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010ce6:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8010ce8:	e0cf      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010cf0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8010cf2:	4b32      	ldr	r3, [pc, #200]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cf8:	f107 0108 	add.w	r1, r7, #8
 8010cfc:	2206      	movs	r2, #6
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f002 fbfd 	bl	80134fe <RegionVerify>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d005      	beq.n	8010d16 <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8010d0a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010d0e:	4b2b      	ldr	r3, [pc, #172]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d10:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010d14:	e0b9      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d16:	2303      	movs	r3, #3
 8010d18:	75fb      	strb	r3, [r7, #23]
            break;
 8010d1a:	e0b6      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010d22:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010d24:	4b25      	ldr	r3, [pc, #148]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010d2a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010d2c:	4b23      	ldr	r3, [pc, #140]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d32:	f107 0108 	add.w	r1, r7, #8
 8010d36:	2205      	movs	r2, #5
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f002 fbe0 	bl	80134fe <RegionVerify>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d005      	beq.n	8010d50 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010d44:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010d48:	4b1c      	ldr	r3, [pc, #112]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010d4e:	e09c      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d50:	2303      	movs	r3, #3
 8010d52:	75fb      	strb	r3, [r7, #23]
            break;
 8010d54:	e099      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010d5c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8010d5e:	4b17      	ldr	r3, [pc, #92]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d64:	f107 0108 	add.w	r1, r7, #8
 8010d68:	220a      	movs	r2, #10
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f002 fbc7 	bl	80134fe <RegionVerify>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d005      	beq.n	8010d82 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8010d76:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010d7a:	4b10      	ldr	r3, [pc, #64]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d7c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010d80:	e083      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d82:	2303      	movs	r3, #3
 8010d84:	75fb      	strb	r3, [r7, #23]
            break;
 8010d86:	e080      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010d8e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8010d90:	4b0a      	ldr	r3, [pc, #40]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d96:	f107 0108 	add.w	r1, r7, #8
 8010d9a:	2209      	movs	r2, #9
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f002 fbae 	bl	80134fe <RegionVerify>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d005      	beq.n	8010db4 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8010da8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010dac:	4b03      	ldr	r3, [pc, #12]	; (8010dbc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8010dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010db2:	e06a      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010db4:	2303      	movs	r3, #3
 8010db6:	75fb      	strb	r3, [r7, #23]
            break;
 8010db8:	e067      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
 8010dba:	bf00      	nop
 8010dbc:	20000b50 	.word	0x20000b50
 8010dc0:	0801ba18 	.word	0x0801ba18
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	4a32      	ldr	r2, [pc, #200]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010dca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8010dce:	4b31      	ldr	r3, [pc, #196]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dd4:	4a2f      	ldr	r2, [pc, #188]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010dd6:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8010dd8:	e057      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	791a      	ldrb	r2, [r3, #4]
 8010dde:	4b2d      	ldr	r3, [pc, #180]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010de0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8010de4:	4b2b      	ldr	r3, [pc, #172]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010de6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010dea:	4b2a      	ldr	r3, [pc, #168]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8010df0:	e04b      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	4a27      	ldr	r2, [pc, #156]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010df8:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8010dfa:	e046      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	4a24      	ldr	r2, [pc, #144]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010e02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8010e06:	e040      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8010e08:	f7fe fdb2 	bl	800f970 <RestoreNvmData>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	75fb      	strb	r3, [r7, #23]
            break;
 8010e10:	e03b      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	799b      	ldrb	r3, [r3, #6]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d80d      	bhi.n	8010e36 <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8010e1a:	4a1e      	ldr	r2, [pc, #120]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6858      	ldr	r0, [r3, #4]
 8010e28:	f001 fc78 	bl	801271c <LoRaMacCryptoSetLrWanVersion>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d02a      	beq.n	8010e88 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e32:	2311      	movs	r3, #17
 8010e34:	e02a      	b.n	8010e8c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e36:	2303      	movs	r3, #3
 8010e38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e3a:	e025      	b.n	8010e88 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	4a14      	ldr	r2, [pc, #80]	; (8010e94 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8010e42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8010e46:	e020      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 fc0d 	bl	8011668 <LoRaMacMibClassBSetRequestConfirm>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	75fb      	strb	r3, [r7, #23]
            break;
 8010e52:	e01a      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e54:	bf00      	nop
 8010e56:	e018      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e58:	bf00      	nop
 8010e5a:	e016      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e5c:	bf00      	nop
 8010e5e:	e014      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e60:	bf00      	nop
 8010e62:	e012      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e64:	bf00      	nop
 8010e66:	e010      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e68:	bf00      	nop
 8010e6a:	e00e      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e6c:	bf00      	nop
 8010e6e:	e00c      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e70:	bf00      	nop
 8010e72:	e00a      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e74:	bf00      	nop
 8010e76:	e008      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e78:	bf00      	nop
 8010e7a:	e006      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e7c:	bf00      	nop
 8010e7e:	e004      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e80:	bf00      	nop
 8010e82:	e002      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e84:	bf00      	nop
 8010e86:	e000      	b.n	8010e8a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8010e88:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3718      	adds	r7, #24
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	20000b50 	.word	0x20000b50

08010e98 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010ea0:	2302      	movs	r3, #2
 8010ea2:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d101      	bne.n	8010eb2 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010eae:	2303      	movs	r3, #3
 8010eb0:	e127      	b.n	8011102 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8010eb2:	f7fc fcd3 	bl	800d85c <LoRaMacIsBusy>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d001      	beq.n	8010ec0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	e120      	b.n	8011102 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8010ec0:	f001 f8d0 	bl	8012064 <LoRaMacConfirmQueueIsFull>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d001      	beq.n	8010ece <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e119      	b.n	8011102 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010ece:	f001 f8bd 	bl	801204c <LoRaMacConfirmQueueGetCnt>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d104      	bne.n	8010ee2 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8010ed8:	2214      	movs	r2, #20
 8010eda:	2100      	movs	r1, #0
 8010edc:	488b      	ldr	r0, [pc, #556]	; (801110c <LoRaMacMlmeRequest+0x274>)
 8010ede:	f004 fe21 	bl	8015b24 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ee2:	4b8b      	ldr	r3, [pc, #556]	; (8011110 <LoRaMacMlmeRequest+0x278>)
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010eea:	4a89      	ldr	r2, [pc, #548]	; (8011110 <LoRaMacMlmeRequest+0x278>)
 8010eec:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010ef0:	f043 0304 	orr.w	r3, r3, #4
 8010ef4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010efe:	2301      	movs	r3, #1
 8010f00:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8010f02:	2300      	movs	r3, #0
 8010f04:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	2b0d      	cmp	r3, #13
 8010f0e:	f200 80ce 	bhi.w	80110ae <LoRaMacMlmeRequest+0x216>
 8010f12:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <LoRaMacMlmeRequest+0x80>)
 8010f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f18:	08010f51 	.word	0x08010f51
 8010f1c:	080110af 	.word	0x080110af
 8010f20:	080110af 	.word	0x080110af
 8010f24:	08010fbb 	.word	0x08010fbb
 8010f28:	08010fd9 	.word	0x08010fd9
 8010f2c:	08010fe9 	.word	0x08010fe9
 8010f30:	080110af 	.word	0x080110af
 8010f34:	080110af 	.word	0x080110af
 8010f38:	080110af 	.word	0x080110af
 8010f3c:	08011005 	.word	0x08011005
 8010f40:	080110af 	.word	0x080110af
 8010f44:	08011083 	.word	0x08011083
 8010f48:	08011023 	.word	0x08011023
 8010f4c:	08011065 	.word	0x08011065
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8010f50:	4b6f      	ldr	r3, [pc, #444]	; (8011110 <LoRaMacMlmeRequest+0x278>)
 8010f52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010f56:	f003 0320 	and.w	r3, r3, #32
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e0cf      	b.n	8011102 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8010f62:	f7fe f989 	bl	800f278 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8010f66:	4b6b      	ldr	r3, [pc, #428]	; (8011114 <LoRaMacMlmeRequest+0x27c>)
 8010f68:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	795b      	ldrb	r3, [r3, #5]
 8010f70:	b25b      	sxtb	r3, r3
 8010f72:	2200      	movs	r2, #0
 8010f74:	4619      	mov	r1, r3
 8010f76:	f002 fbaa 	bl	80136ce <RegionAlternateDr>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	4b65      	ldr	r3, [pc, #404]	; (8011114 <LoRaMacMlmeRequest+0x27c>)
 8010f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8010f84:	2307      	movs	r3, #7
 8010f86:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8010f88:	20ff      	movs	r0, #255	; 0xff
 8010f8a:	f7fd feed 	bl	800ed68 <SendReJoinReq>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8010f92:	7dfb      	ldrb	r3, [r7, #23]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 808c 	beq.w	80110b2 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8010f9a:	4b5e      	ldr	r3, [pc, #376]	; (8011114 <LoRaMacMlmeRequest+0x27c>)
 8010f9c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	795b      	ldrb	r3, [r3, #5]
 8010fa4:	b25b      	sxtb	r3, r3
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	4619      	mov	r1, r3
 8010faa:	f002 fb90 	bl	80136ce <RegionAlternateDr>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	4b58      	ldr	r3, [pc, #352]	; (8011114 <LoRaMacMlmeRequest+0x27c>)
 8010fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8010fb8:	e07b      	b.n	80110b2 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010fbe:	f107 030c 	add.w	r3, r7, #12
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	2002      	movs	r0, #2
 8010fc8:	f000 fcb2 	bl	8011930 <LoRaMacCommandsAddCmd>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d071      	beq.n	80110b6 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010fd2:	2313      	movs	r3, #19
 8010fd4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010fd6:	e06e      	b.n	80110b6 <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	889b      	ldrh	r3, [r3, #4]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fe fc73 	bl	800f8c8 <SetTxContinuousWave>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	75fb      	strb	r3, [r7, #23]
            break;
 8010fe6:	e06d      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	8898      	ldrh	r0, [r3, #4]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6899      	ldr	r1, [r3, #8]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f7fe fc99 	bl	800f930 <SetTxContinuousWave1>
 8010ffe:	4603      	mov	r3, r0
 8011000:	75fb      	strb	r3, [r7, #23]
            break;
 8011002:	e05f      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011008:	f107 030c 	add.w	r3, r7, #12
 801100c:	2200      	movs	r2, #0
 801100e:	4619      	mov	r1, r3
 8011010:	200d      	movs	r0, #13
 8011012:	f000 fc8d 	bl	8011930 <LoRaMacCommandsAddCmd>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d04e      	beq.n	80110ba <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801101c:	2313      	movs	r3, #19
 801101e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011020:	e04b      	b.n	80110ba <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011022:	4b3c      	ldr	r3, [pc, #240]	; (8011114 <LoRaMacMlmeRequest+0x27c>)
 8011024:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011028:	2b00      	cmp	r3, #0
 801102a:	d148      	bne.n	80110be <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	791b      	ldrb	r3, [r3, #4]
 8011030:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	791b      	ldrb	r3, [r3, #4]
 8011036:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801103a:	b2db      	uxtb	r3, r3
 801103c:	4618      	mov	r0, r3
 801103e:	f000 fae8 	bl	8011612 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011042:	7dbb      	ldrb	r3, [r7, #22]
 8011044:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011046:	2300      	movs	r3, #0
 8011048:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801104a:	f107 030c 	add.w	r3, r7, #12
 801104e:	2201      	movs	r2, #1
 8011050:	4619      	mov	r1, r3
 8011052:	2010      	movs	r0, #16
 8011054:	f000 fc6c 	bl	8011930 <LoRaMacCommandsAddCmd>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d02f      	beq.n	80110be <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801105e:	2313      	movs	r3, #19
 8011060:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011062:	e02c      	b.n	80110be <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011068:	f107 030c 	add.w	r3, r7, #12
 801106c:	2200      	movs	r2, #0
 801106e:	4619      	mov	r1, r3
 8011070:	2012      	movs	r0, #18
 8011072:	f000 fc5d 	bl	8011930 <LoRaMacCommandsAddCmd>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d022      	beq.n	80110c2 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801107c:	2313      	movs	r3, #19
 801107e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011080:	e01f      	b.n	80110c2 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011082:	2301      	movs	r3, #1
 8011084:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011086:	f000 fa7a 	bl	801157e <LoRaMacClassBIsAcquisitionInProgress>
 801108a:	4603      	mov	r3, r0
 801108c:	f083 0301 	eor.w	r3, r3, #1
 8011090:	b2db      	uxtb	r3, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	d008      	beq.n	80110a8 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011096:	2000      	movs	r0, #0
 8011098:	f000 fa53 	bl	8011542 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801109c:	2000      	movs	r0, #0
 801109e:	f000 fa75 	bl	801158c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80110a2:	2300      	movs	r3, #0
 80110a4:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80110a6:	e00d      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80110a8:	2301      	movs	r3, #1
 80110aa:	75fb      	strb	r3, [r7, #23]
            break;
 80110ac:	e00a      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 80110ae:	bf00      	nop
 80110b0:	e008      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80110b2:	bf00      	nop
 80110b4:	e006      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80110b6:	bf00      	nop
 80110b8:	e004      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80110ba:	bf00      	nop
 80110bc:	e002      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80110be:	bf00      	nop
 80110c0:	e000      	b.n	80110c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80110c2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80110c4:	4b12      	ldr	r3, [pc, #72]	; (8011110 <LoRaMacMlmeRequest+0x278>)
 80110c6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d010      	beq.n	80110f6 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80110d4:	f000 ffba 	bl	801204c <LoRaMacConfirmQueueGetCnt>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d110      	bne.n	8011100 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 80110de:	4b0c      	ldr	r3, [pc, #48]	; (8011110 <LoRaMacMlmeRequest+0x278>)
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80110e6:	4a0a      	ldr	r2, [pc, #40]	; (8011110 <LoRaMacMlmeRequest+0x278>)
 80110e8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80110ec:	f36f 0382 	bfc	r3, #2, #1
 80110f0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80110f4:	e004      	b.n	8011100 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80110f6:	f107 0310 	add.w	r3, r7, #16
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 fe58 	bl	8011db0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011100:	7dfb      	ldrb	r3, [r7, #23]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	20000a90 	.word	0x20000a90
 8011110:	20000644 	.word	0x20000644
 8011114:	20000b50 	.word	0x20000b50

08011118 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b08c      	sub	sp, #48	; 0x30
 801111c:	af02      	add	r7, sp, #8
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	460b      	mov	r3, r1
 8011122:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011124:	2302      	movs	r3, #2
 8011126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801112a:	2300      	movs	r3, #0
 801112c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011130:	2300      	movs	r3, #0
 8011132:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011134:	2300      	movs	r3, #0
 8011136:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011138:	2300      	movs	r3, #0
 801113a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d101      	bne.n	8011146 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011142:	2303      	movs	r3, #3
 8011144:	e0d4      	b.n	80112f0 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8011146:	f7fc fb89 	bl	800d85c <LoRaMacIsBusy>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d001      	beq.n	8011154 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011150:	2301      	movs	r3, #1
 8011152:	e0cd      	b.n	80112f0 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011154:	2300      	movs	r3, #0
 8011156:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011158:	2214      	movs	r2, #20
 801115a:	2100      	movs	r1, #0
 801115c:	4866      	ldr	r0, [pc, #408]	; (80112f8 <LoRaMacMcpsRequest+0x1e0>)
 801115e:	f004 fce1 	bl	8015b24 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011162:	4b66      	ldr	r3, [pc, #408]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 8011164:	2201      	movs	r2, #1
 8011166:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801116a:	4b64      	ldr	r3, [pc, #400]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 801116c:	2201      	movs	r2, #1
 801116e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	2b03      	cmp	r3, #3
 8011178:	d03d      	beq.n	80111f6 <LoRaMacMcpsRequest+0xde>
 801117a:	2b03      	cmp	r3, #3
 801117c:	dc4f      	bgt.n	801121e <LoRaMacMcpsRequest+0x106>
 801117e:	2b00      	cmp	r3, #0
 8011180:	d002      	beq.n	8011188 <LoRaMacMcpsRequest+0x70>
 8011182:	2b01      	cmp	r3, #1
 8011184:	d019      	beq.n	80111ba <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011186:	e04a      	b.n	801121e <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011188:	2301      	movs	r3, #1
 801118a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801118c:	4b5b      	ldr	r3, [pc, #364]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 801118e:	2201      	movs	r2, #1
 8011190:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011194:	7b3b      	ldrb	r3, [r7, #12]
 8011196:	2202      	movs	r2, #2
 8011198:	f362 1347 	bfi	r3, r2, #5, #3
 801119c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	791b      	ldrb	r3, [r3, #4]
 80111a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	899b      	ldrh	r3, [r3, #12]
 80111b0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	7b9b      	ldrb	r3, [r3, #14]
 80111b6:	777b      	strb	r3, [r7, #29]
            break;
 80111b8:	e032      	b.n	8011220 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80111ba:	2301      	movs	r3, #1
 80111bc:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	7bdb      	ldrb	r3, [r3, #15]
 80111c2:	2b08      	cmp	r3, #8
 80111c4:	bf28      	it	cs
 80111c6:	2308      	movcs	r3, #8
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	4b4c      	ldr	r3, [pc, #304]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 80111cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80111d0:	7b3b      	ldrb	r3, [r7, #12]
 80111d2:	2204      	movs	r2, #4
 80111d4:	f362 1347 	bfi	r3, r2, #5, #3
 80111d8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	791b      	ldrb	r3, [r3, #4]
 80111de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	899b      	ldrh	r3, [r3, #12]
 80111ec:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	7b9b      	ldrb	r3, [r3, #14]
 80111f2:	777b      	strb	r3, [r7, #29]
            break;
 80111f4:	e014      	b.n	8011220 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80111f6:	2301      	movs	r3, #1
 80111f8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80111fa:	4b40      	ldr	r3, [pc, #256]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 80111fc:	2201      	movs	r2, #1
 80111fe:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011202:	7b3b      	ldrb	r3, [r7, #12]
 8011204:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011208:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	891b      	ldrh	r3, [r3, #8]
 8011214:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	7a9b      	ldrb	r3, [r3, #10]
 801121a:	777b      	strb	r3, [r7, #29]
            break;
 801121c:	e000      	b.n	8011220 <LoRaMacMcpsRequest+0x108>
            break;
 801121e:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011220:	2302      	movs	r3, #2
 8011222:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011224:	4b36      	ldr	r3, [pc, #216]	; (8011300 <LoRaMacMcpsRequest+0x1e8>)
 8011226:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801122a:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801122c:	4b34      	ldr	r3, [pc, #208]	; (8011300 <LoRaMacMcpsRequest+0x1e8>)
 801122e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011232:	f107 0214 	add.w	r2, r7, #20
 8011236:	4611      	mov	r1, r2
 8011238:	4618      	mov	r0, r3
 801123a:	f002 f925 	bl	8013488 <RegionGetPhyParam>
 801123e:	4603      	mov	r3, r0
 8011240:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	b25b      	sxtb	r3, r3
 8011246:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801124a:	4293      	cmp	r3, r2
 801124c:	bfb8      	it	lt
 801124e:	4613      	movlt	r3, r2
 8011250:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011252:	7f3b      	ldrb	r3, [r7, #28]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d044      	beq.n	80112e2 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011258:	4b29      	ldr	r3, [pc, #164]	; (8011300 <LoRaMacMcpsRequest+0x1e8>)
 801125a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801125e:	f083 0301 	eor.w	r3, r3, #1
 8011262:	b2db      	uxtb	r3, r3
 8011264:	2b00      	cmp	r3, #0
 8011266:	d019      	beq.n	801129c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011268:	7f7b      	ldrb	r3, [r7, #29]
 801126a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801126c:	4b24      	ldr	r3, [pc, #144]	; (8011300 <LoRaMacMcpsRequest+0x1e8>)
 801126e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011272:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011274:	4b22      	ldr	r3, [pc, #136]	; (8011300 <LoRaMacMcpsRequest+0x1e8>)
 8011276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801127a:	f107 0108 	add.w	r1, r7, #8
 801127e:	2205      	movs	r2, #5
 8011280:	4618      	mov	r0, r3
 8011282:	f002 f93c 	bl	80134fe <RegionVerify>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d005      	beq.n	8011298 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801128c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011290:	4b1b      	ldr	r3, [pc, #108]	; (8011300 <LoRaMacMcpsRequest+0x1e8>)
 8011292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011296:	e001      	b.n	801129c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011298:	2303      	movs	r3, #3
 801129a:	e029      	b.n	80112f0 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801129c:	8bfa      	ldrh	r2, [r7, #30]
 801129e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80112a2:	f107 000c 	add.w	r0, r7, #12
 80112a6:	78fb      	ldrb	r3, [r7, #3]
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	4613      	mov	r3, r2
 80112ac:	6a3a      	ldr	r2, [r7, #32]
 80112ae:	f7fd fc7b 	bl	800eba8 <Send>
 80112b2:	4603      	mov	r3, r0
 80112b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80112b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10c      	bne.n	80112da <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	781a      	ldrb	r2, [r3, #0]
 80112c4:	4b0d      	ldr	r3, [pc, #52]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 80112c6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80112ca:	4a0c      	ldr	r2, [pc, #48]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 80112cc:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80112d0:	f043 0301 	orr.w	r3, r3, #1
 80112d4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80112d8:	e003      	b.n	80112e2 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80112da:	4b08      	ldr	r3, [pc, #32]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80112e2:	4b06      	ldr	r3, [pc, #24]	; (80112fc <LoRaMacMcpsRequest+0x1e4>)
 80112e4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	611a      	str	r2, [r3, #16]

    return status;
 80112ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3728      	adds	r7, #40	; 0x28
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	20000a7c 	.word	0x20000a7c
 80112fc:	20000644 	.word	0x20000644
 8011300:	20000b50 	.word	0x20000b50

08011304 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	4603      	mov	r3, r0
 801130c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801130e:	79fb      	ldrb	r3, [r7, #7]
 8011310:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011312:	4b0a      	ldr	r3, [pc, #40]	; (801133c <LoRaMacTestSetDutyCycleOn+0x38>)
 8011314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011318:	f107 010c 	add.w	r1, r7, #12
 801131c:	220f      	movs	r2, #15
 801131e:	4618      	mov	r0, r3
 8011320:	f002 f8ed 	bl	80134fe <RegionVerify>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d003      	beq.n	8011332 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801132a:	4a04      	ldr	r2, [pc, #16]	; (801133c <LoRaMacTestSetDutyCycleOn+0x38>)
 801132c:	79fb      	ldrb	r3, [r7, #7]
 801132e:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8011332:	bf00      	nop
 8011334:	3710      	adds	r7, #16
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	20000b50 	.word	0x20000b50

08011340 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8011340:	b580      	push	{r7, lr}
 8011342:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8011344:	f7fe ffec 	bl	8010320 <LoRaMacStop>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d114      	bne.n	8011378 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801134e:	480c      	ldr	r0, [pc, #48]	; (8011380 <LoRaMacDeInitialization+0x40>)
 8011350:	f008 fcf8 	bl	8019d44 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8011354:	480b      	ldr	r0, [pc, #44]	; (8011384 <LoRaMacDeInitialization+0x44>)
 8011356:	f008 fcf5 	bl	8019d44 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801135a:	480b      	ldr	r0, [pc, #44]	; (8011388 <LoRaMacDeInitialization+0x48>)
 801135c:	f008 fcf2 	bl	8019d44 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8011360:	480a      	ldr	r0, [pc, #40]	; (801138c <LoRaMacDeInitialization+0x4c>)
 8011362:	f008 fcef 	bl	8019d44 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8011366:	f000 f95e 	bl	8011626 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 801136a:	f7fd ff85 	bl	800f278 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801136e:	4b08      	ldr	r3, [pc, #32]	; (8011390 <LoRaMacDeInitialization+0x50>)
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	e000      	b.n	801137a <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8011378:	2301      	movs	r3, #1
    }
}
 801137a:	4618      	mov	r0, r3
 801137c:	bd80      	pop	{r7, pc}
 801137e:	bf00      	nop
 8011380:	200009ac 	.word	0x200009ac
 8011384:	200009c4 	.word	0x200009c4
 8011388:	200009dc 	.word	0x200009dc
 801138c:	20000a3c 	.word	0x20000a3c
 8011390:	0801ba18 	.word	0x0801ba18

08011394 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b08c      	sub	sp, #48	; 0x30
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
 80113a0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80113a2:	2300      	movs	r3, #0
 80113a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	7c1b      	ldrb	r3, [r3, #16]
 80113ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	7c5b      	ldrb	r3, [r3, #17]
 80113b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	689a      	ldr	r2, [r3, #8]
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	795b      	ldrb	r3, [r3, #5]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f000 808b 	beq.w	80114e0 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80113ca:	2302      	movs	r3, #2
 80113cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	7c9b      	ldrb	r3, [r3, #18]
 80113d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	7cdb      	ldrb	r3, [r3, #19]
 80113dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80113e0:	4611      	mov	r1, r2
 80113e2:	4618      	mov	r0, r3
 80113e4:	f002 f850 	bl	8013488 <RegionGetPhyParam>
 80113e8:	4603      	mov	r3, r0
 80113ea:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80113f2:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80113f6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80113fa:	4293      	cmp	r3, r2
 80113fc:	bfb8      	it	lt
 80113fe:	4613      	movlt	r3, r2
 8011400:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011404:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011408:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801140c:	429a      	cmp	r2, r3
 801140e:	d106      	bne.n	801141e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	2200      	movs	r2, #0
 8011414:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011416:	2300      	movs	r3, #0
 8011418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801141c:	e060      	b.n	80114e0 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	68fa      	ldr	r2, [r7, #12]
 8011424:	8992      	ldrh	r2, [r2, #12]
 8011426:	4293      	cmp	r3, r2
 8011428:	d303      	bcc.n	8011432 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801142a:	2301      	movs	r3, #1
 801142c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011430:	e002      	b.n	8011438 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011432:	2300      	movs	r3, #0
 8011434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	8992      	ldrh	r2, [r2, #12]
 8011440:	4611      	mov	r1, r2
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	89d2      	ldrh	r2, [r2, #14]
 8011446:	440a      	add	r2, r1
 8011448:	4293      	cmp	r3, r2
 801144a:	d349      	bcc.n	80114e0 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801144c:	2308      	movs	r3, #8
 801144e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	7cdb      	ldrb	r3, [r3, #19]
 8011456:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801145a:	4611      	mov	r1, r2
 801145c:	4618      	mov	r0, r3
 801145e:	f002 f813 	bl	8013488 <RegionGetPhyParam>
 8011462:	4603      	mov	r3, r0
 8011464:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011466:	6a3b      	ldr	r3, [r7, #32]
 8011468:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	89d2      	ldrh	r2, [r2, #14]
 8011474:	fbb3 f1f2 	udiv	r1, r3, r2
 8011478:	fb01 f202 	mul.w	r2, r1, r2
 801147c:	1a9b      	subs	r3, r3, r2
 801147e:	2b01      	cmp	r3, #1
 8011480:	d12e      	bne.n	80114e0 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011482:	2322      	movs	r3, #34	; 0x22
 8011484:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011488:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801148c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	7c9b      	ldrb	r3, [r3, #18]
 8011494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	7cdb      	ldrb	r3, [r3, #19]
 801149c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f001 fff0 	bl	8013488 <RegionGetPhyParam>
 80114a8:	4603      	mov	r3, r0
 80114aa:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80114ac:	6a3b      	ldr	r3, [r7, #32]
 80114ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80114b2:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80114b6:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d110      	bne.n	80114e0 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80114be:	2300      	movs	r3, #0
 80114c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	791b      	ldrb	r3, [r3, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d009      	beq.n	80114e0 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80114cc:	2302      	movs	r3, #2
 80114ce:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	7cdb      	ldrb	r3, [r3, #19]
 80114d4:	f107 0214 	add.w	r2, r7, #20
 80114d8:	4611      	mov	r1, r2
 80114da:	4618      	mov	r0, r3
 80114dc:	f001 fffd 	bl	80134da <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80114e6:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114ee:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80114f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3730      	adds	r7, #48	; 0x30
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
 8011508:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	789b      	ldrb	r3, [r3, #2]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d107      	bne.n	8011522 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	68b9      	ldr	r1, [r7, #8]
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7ff ff3b 	bl	8011394 <CalcNextV10X>
 801151e:	4603      	mov	r3, r0
 8011520:	e000      	b.n	8011524 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011522:	2300      	movs	r3, #0
}
 8011524:	4618      	mov	r0, r3
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011538:	bf00      	nop
 801153a:	3714      	adds	r7, #20
 801153c:	46bd      	mov	sp, r7
 801153e:	bc80      	pop	{r7}
 8011540:	4770      	bx	lr

08011542 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011542:	b480      	push	{r7}
 8011544:	b083      	sub	sp, #12
 8011546:	af00      	add	r7, sp, #0
 8011548:	4603      	mov	r3, r0
 801154a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801154c:	bf00      	nop
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	bc80      	pop	{r7}
 8011554:	4770      	bx	lr

08011556 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011556:	b480      	push	{r7}
 8011558:	b083      	sub	sp, #12
 801155a:	af00      	add	r7, sp, #0
 801155c:	4603      	mov	r3, r0
 801155e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011560:	bf00      	nop
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	bc80      	pop	{r7}
 8011568:	4770      	bx	lr

0801156a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801156a:	b480      	push	{r7}
 801156c:	b083      	sub	sp, #12
 801156e:	af00      	add	r7, sp, #0
 8011570:	4603      	mov	r3, r0
 8011572:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011574:	bf00      	nop
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	bc80      	pop	{r7}
 801157c:	4770      	bx	lr

0801157e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801157e:	b480      	push	{r7}
 8011580:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011582:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011584:	4618      	mov	r0, r3
 8011586:	46bd      	mov	sp, r7
 8011588:	bc80      	pop	{r7}
 801158a:	4770      	bx	lr

0801158c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011594:	bf00      	nop
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	bc80      	pop	{r7}
 801159c:	4770      	bx	lr

0801159e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801159e:	b480      	push	{r7}
 80115a0:	b083      	sub	sp, #12
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115a6:	bf00      	nop
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bc80      	pop	{r7}
 80115ae:	4770      	bx	lr

080115b0 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	bc80      	pop	{r7}
 80115c0:	4770      	bx	lr

080115c2 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80115c2:	b480      	push	{r7}
 80115c4:	b083      	sub	sp, #12
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
 80115ca:	460b      	mov	r3, r1
 80115cc:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80115ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bc80      	pop	{r7}
 80115d8:	4770      	bx	lr

080115da <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80115da:	b480      	push	{r7}
 80115dc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80115de:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bc80      	pop	{r7}
 80115e6:	4770      	bx	lr

080115e8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80115e8:	b480      	push	{r7}
 80115ea:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80115ec:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bc80      	pop	{r7}
 80115f4:	4770      	bx	lr

080115f6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80115f6:	b480      	push	{r7}
 80115f8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80115fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	46bd      	mov	sp, r7
 8011600:	bc80      	pop	{r7}
 8011602:	4770      	bx	lr

08011604 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011604:	b480      	push	{r7}
 8011606:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011608:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801160a:	4618      	mov	r0, r3
 801160c:	46bd      	mov	sp, r7
 801160e:	bc80      	pop	{r7}
 8011610:	4770      	bx	lr

08011612 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011612:	b480      	push	{r7}
 8011614:	b083      	sub	sp, #12
 8011616:	af00      	add	r7, sp, #0
 8011618:	4603      	mov	r3, r0
 801161a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801161c:	bf00      	nop
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	bc80      	pop	{r7}
 8011624:	4770      	bx	lr

08011626 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011626:	b480      	push	{r7}
 8011628:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801162a:	bf00      	nop
 801162c:	46bd      	mov	sp, r7
 801162e:	bc80      	pop	{r7}
 8011630:	4770      	bx	lr

08011632 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011632:	b480      	push	{r7}
 8011634:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011636:	bf00      	nop
 8011638:	46bd      	mov	sp, r7
 801163a:	bc80      	pop	{r7}
 801163c:	4770      	bx	lr

0801163e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801163e:	b480      	push	{r7}
 8011640:	b083      	sub	sp, #12
 8011642:	af00      	add	r7, sp, #0
 8011644:	4603      	mov	r3, r0
 8011646:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011648:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801164a:	4618      	mov	r0, r3
 801164c:	370c      	adds	r7, #12
 801164e:	46bd      	mov	sp, r7
 8011650:	bc80      	pop	{r7}
 8011652:	4770      	bx	lr

08011654 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801165c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801165e:	4618      	mov	r0, r3
 8011660:	370c      	adds	r7, #12
 8011662:	46bd      	mov	sp, r7
 8011664:	bc80      	pop	{r7}
 8011666:	4770      	bx	lr

08011668 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011670:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	bc80      	pop	{r7}
 801167a:	4770      	bx	lr

0801167c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801167c:	b480      	push	{r7}
 801167e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011680:	bf00      	nop
 8011682:	46bd      	mov	sp, r7
 8011684:	bc80      	pop	{r7}
 8011686:	4770      	bx	lr

08011688 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	6039      	str	r1, [r7, #0]
 8011692:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011694:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011696:	4618      	mov	r0, r3
 8011698:	370c      	adds	r7, #12
 801169a:	46bd      	mov	sp, r7
 801169c:	bc80      	pop	{r7}
 801169e:	4770      	bx	lr

080116a0 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	4603      	mov	r3, r0
 80116a8:	603a      	str	r2, [r7, #0]
 80116aa:	80fb      	strh	r3, [r7, #6]
 80116ac:	460b      	mov	r3, r1
 80116ae:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bc80      	pop	{r7}
 80116b8:	4770      	bx	lr

080116ba <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80116ba:	b480      	push	{r7}
 80116bc:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80116be:	bf00      	nop
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bc80      	pop	{r7}
 80116c4:	4770      	bx	lr

080116c6 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80116c6:	b480      	push	{r7}
 80116c8:	b083      	sub	sp, #12
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80116ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bc80      	pop	{r7}
 80116d8:	4770      	bx	lr

080116da <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80116da:	b480      	push	{r7}
 80116dc:	b083      	sub	sp, #12
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80116e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bc80      	pop	{r7}
 80116ec:	4770      	bx	lr

080116ee <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80116ee:	b480      	push	{r7}
 80116f0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80116f2:	bf00      	nop
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bc80      	pop	{r7}
 80116f8:	4770      	bx	lr

080116fa <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80116fa:	b480      	push	{r7}
 80116fc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80116fe:	bf00      	nop
 8011700:	46bd      	mov	sp, r7
 8011702:	bc80      	pop	{r7}
 8011704:	4770      	bx	lr

08011706 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011706:	b480      	push	{r7}
 8011708:	b085      	sub	sp, #20
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011712:	2300      	movs	r3, #0
 8011714:	81fb      	strh	r3, [r7, #14]
 8011716:	e00a      	b.n	801172e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011718:	89fb      	ldrh	r3, [r7, #14]
 801171a:	68ba      	ldr	r2, [r7, #8]
 801171c:	4413      	add	r3, r2
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <IsSlotFree+0x22>
        {
            return false;
 8011724:	2300      	movs	r3, #0
 8011726:	e006      	b.n	8011736 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011728:	89fb      	ldrh	r3, [r7, #14]
 801172a:	3301      	adds	r3, #1
 801172c:	81fb      	strh	r3, [r7, #14]
 801172e:	89fb      	ldrh	r3, [r7, #14]
 8011730:	2b0f      	cmp	r3, #15
 8011732:	d9f1      	bls.n	8011718 <IsSlotFree+0x12>
        }
    }
    return true;
 8011734:	2301      	movs	r3, #1
}
 8011736:	4618      	mov	r0, r3
 8011738:	3714      	adds	r7, #20
 801173a:	46bd      	mov	sp, r7
 801173c:	bc80      	pop	{r7}
 801173e:	4770      	bx	lr

08011740 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801174a:	e007      	b.n	801175c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801174c:	79fb      	ldrb	r3, [r7, #7]
 801174e:	3301      	adds	r3, #1
 8011750:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011752:	79fb      	ldrb	r3, [r7, #7]
 8011754:	2b0f      	cmp	r3, #15
 8011756:	d101      	bne.n	801175c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011758:	2300      	movs	r3, #0
 801175a:	e012      	b.n	8011782 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801175c:	79fb      	ldrb	r3, [r7, #7]
 801175e:	011b      	lsls	r3, r3, #4
 8011760:	3308      	adds	r3, #8
 8011762:	4a0a      	ldr	r2, [pc, #40]	; (801178c <MallocNewMacCommandSlot+0x4c>)
 8011764:	4413      	add	r3, r2
 8011766:	4618      	mov	r0, r3
 8011768:	f7ff ffcd 	bl	8011706 <IsSlotFree>
 801176c:	4603      	mov	r3, r0
 801176e:	f083 0301 	eor.w	r3, r3, #1
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d1e9      	bne.n	801174c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8011778:	79fb      	ldrb	r3, [r7, #7]
 801177a:	011b      	lsls	r3, r3, #4
 801177c:	3308      	adds	r3, #8
 801177e:	4a03      	ldr	r2, [pc, #12]	; (801178c <MallocNewMacCommandSlot+0x4c>)
 8011780:	4413      	add	r3, r2
}
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	200019b8 	.word	0x200019b8

08011790 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d101      	bne.n	80117a2 <FreeMacCommandSlot+0x12>
    {
        return false;
 801179e:	2300      	movs	r3, #0
 80117a0:	e005      	b.n	80117ae <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80117a2:	2210      	movs	r2, #16
 80117a4:	2100      	movs	r1, #0
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f004 f9bc 	bl	8015b24 <memset1>

    return true;
 80117ac:	2301      	movs	r3, #1
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80117b6:	b480      	push	{r7}
 80117b8:	b083      	sub	sp, #12
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d101      	bne.n	80117c8 <LinkedListInit+0x12>
    {
        return false;
 80117c4:	2300      	movs	r3, #0
 80117c6:	e006      	b.n	80117d6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2200      	movs	r2, #0
 80117cc:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2200      	movs	r2, #0
 80117d2:	605a      	str	r2, [r3, #4]

    return true;
 80117d4:	2301      	movs	r3, #1
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	bc80      	pop	{r7}
 80117de:	4770      	bx	lr

080117e0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <LinkedListAdd+0x16>
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d101      	bne.n	80117fa <LinkedListAdd+0x1a>
    {
        return false;
 80117f6:	2300      	movs	r3, #0
 80117f8:	e015      	b.n	8011826 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d102      	bne.n	8011808 <LinkedListAdd+0x28>
    {
        list->First = element;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	683a      	ldr	r2, [r7, #0]
 8011806:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d003      	beq.n	8011818 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	2200      	movs	r2, #0
 801181c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	683a      	ldr	r2, [r7, #0]
 8011822:	605a      	str	r2, [r3, #4]

    return true;
 8011824:	2301      	movs	r3, #1
}
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	bc80      	pop	{r7}
 801182e:	4770      	bx	lr

08011830 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <LinkedListGetPrevious+0x16>
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d101      	bne.n	801184a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8011846:	2300      	movs	r3, #0
 8011848:	e016      	b.n	8011878 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011850:	683a      	ldr	r2, [r7, #0]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	429a      	cmp	r2, r3
 8011856:	d00c      	beq.n	8011872 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011858:	e002      	b.n	8011860 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d007      	beq.n	8011876 <LinkedListGetPrevious+0x46>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	683a      	ldr	r2, [r7, #0]
 801186c:	429a      	cmp	r2, r3
 801186e:	d1f4      	bne.n	801185a <LinkedListGetPrevious+0x2a>
 8011870:	e001      	b.n	8011876 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8011872:	2300      	movs	r3, #0
 8011874:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8011876:	68fb      	ldr	r3, [r7, #12]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	bc80      	pop	{r7}
 8011880:	4770      	bx	lr

08011882 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b084      	sub	sp, #16
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d002      	beq.n	8011898 <LinkedListRemove+0x16>
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d101      	bne.n	801189c <LinkedListRemove+0x1a>
    {
        return false;
 8011898:	2300      	movs	r3, #0
 801189a:	e020      	b.n	80118de <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff ffc6 	bl	8011830 <LinkedListGetPrevious>
 80118a4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	683a      	ldr	r2, [r7, #0]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d103      	bne.n	80118b8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	683a      	ldr	r2, [r7, #0]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d102      	bne.n	80118c8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d003      	beq.n	80118d6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	2200      	movs	r2, #0
 80118da:	601a      	str	r2, [r3, #0]

    return true;
 80118dc:	2301      	movs	r3, #1
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80118e6:	b480      	push	{r7}
 80118e8:	b083      	sub	sp, #12
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	4603      	mov	r3, r0
 80118ee:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80118f0:	79fb      	ldrb	r3, [r7, #7]
 80118f2:	2b05      	cmp	r3, #5
 80118f4:	d004      	beq.n	8011900 <IsSticky+0x1a>
 80118f6:	2b05      	cmp	r3, #5
 80118f8:	db04      	blt.n	8011904 <IsSticky+0x1e>
 80118fa:	3b08      	subs	r3, #8
 80118fc:	2b02      	cmp	r3, #2
 80118fe:	d801      	bhi.n	8011904 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8011900:	2301      	movs	r3, #1
 8011902:	e000      	b.n	8011906 <IsSticky+0x20>
        default:
            return false;
 8011904:	2300      	movs	r3, #0
    }
}
 8011906:	4618      	mov	r0, r3
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	bc80      	pop	{r7}
 801190e:	4770      	bx	lr

08011910 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011914:	22fc      	movs	r2, #252	; 0xfc
 8011916:	2100      	movs	r1, #0
 8011918:	4804      	ldr	r0, [pc, #16]	; (801192c <LoRaMacCommandsInit+0x1c>)
 801191a:	f004 f903 	bl	8015b24 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801191e:	4803      	ldr	r0, [pc, #12]	; (801192c <LoRaMacCommandsInit+0x1c>)
 8011920:	f7ff ff49 	bl	80117b6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011924:	2300      	movs	r3, #0
}
 8011926:	4618      	mov	r0, r3
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	200019b8 	.word	0x200019b8

08011930 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b086      	sub	sp, #24
 8011934:	af00      	add	r7, sp, #0
 8011936:	4603      	mov	r3, r0
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	607a      	str	r2, [r7, #4]
 801193c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d101      	bne.n	8011948 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011944:	2301      	movs	r3, #1
 8011946:	e033      	b.n	80119b0 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8011948:	f7ff fefa 	bl	8011740 <MallocNewMacCommandSlot>
 801194c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d101      	bne.n	8011958 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011954:	2302      	movs	r3, #2
 8011956:	e02b      	b.n	80119b0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011958:	6979      	ldr	r1, [r7, #20]
 801195a:	4817      	ldr	r0, [pc, #92]	; (80119b8 <LoRaMacCommandsAddCmd+0x88>)
 801195c:	f7ff ff40 	bl	80117e0 <LinkedListAdd>
 8011960:	4603      	mov	r3, r0
 8011962:	f083 0301 	eor.w	r3, r3, #1
 8011966:	b2db      	uxtb	r3, r3
 8011968:	2b00      	cmp	r3, #0
 801196a:	d001      	beq.n	8011970 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801196c:	2305      	movs	r3, #5
 801196e:	e01f      	b.n	80119b0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	7bfa      	ldrb	r2, [r7, #15]
 8011974:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	3305      	adds	r3, #5
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	b292      	uxth	r2, r2
 8011984:	68b9      	ldr	r1, [r7, #8]
 8011986:	4618      	mov	r0, r3
 8011988:	f004 f891 	bl	8015aae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801198c:	7bfb      	ldrb	r3, [r7, #15]
 801198e:	4618      	mov	r0, r3
 8011990:	f7ff ffa9 	bl	80118e6 <IsSticky>
 8011994:	4603      	mov	r3, r0
 8011996:	461a      	mov	r2, r3
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801199c:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <LoRaMacCommandsAddCmd+0x88>)
 801199e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4413      	add	r3, r2
 80119a6:	3301      	adds	r3, #1
 80119a8:	4a03      	ldr	r2, [pc, #12]	; (80119b8 <LoRaMacCommandsAddCmd+0x88>)
 80119aa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3718      	adds	r7, #24
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	200019b8 	.word	0x200019b8

080119bc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d101      	bne.n	80119ce <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80119ca:	2301      	movs	r3, #1
 80119cc:	e021      	b.n	8011a12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	4812      	ldr	r0, [pc, #72]	; (8011a1c <LoRaMacCommandsRemoveCmd+0x60>)
 80119d2:	f7ff ff56 	bl	8011882 <LinkedListRemove>
 80119d6:	4603      	mov	r3, r0
 80119d8:	f083 0301 	eor.w	r3, r3, #1
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80119e2:	2303      	movs	r3, #3
 80119e4:	e015      	b.n	8011a12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80119e6:	4b0d      	ldr	r3, [pc, #52]	; (8011a1c <LoRaMacCommandsRemoveCmd+0x60>)
 80119e8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	3b01      	subs	r3, #1
 80119f4:	4a09      	ldr	r2, [pc, #36]	; (8011a1c <LoRaMacCommandsRemoveCmd+0x60>)
 80119f6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff fec8 	bl	8011790 <FreeMacCommandSlot>
 8011a00:	4603      	mov	r3, r0
 8011a02:	f083 0301 	eor.w	r3, r3, #1
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d001      	beq.n	8011a10 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011a0c:	2305      	movs	r3, #5
 8011a0e:	e000      	b.n	8011a12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011a10:	2300      	movs	r3, #0
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	200019b8 	.word	0x200019b8

08011a20 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011a26:	4b0f      	ldr	r3, [pc, #60]	; (8011a64 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011a2c:	e012      	b.n	8011a54 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	7b1b      	ldrb	r3, [r3, #12]
 8011a32:	f083 0301 	eor.w	r3, r3, #1
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d008      	beq.n	8011a4e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7ff ffba 	bl	80119bc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	607b      	str	r3, [r7, #4]
 8011a4c:	e002      	b.n	8011a54 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1e9      	bne.n	8011a2e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	200019b8 	.word	0x200019b8

08011a68 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011a6e:	4b0e      	ldr	r3, [pc, #56]	; (8011aa8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011a74:	e00f      	b.n	8011a96 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	791b      	ldrb	r3, [r3, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff ff30 	bl	80118e6 <IsSticky>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d002      	beq.n	8011a92 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff ff95 	bl	80119bc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1ec      	bne.n	8011a76 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011a9c:	2300      	movs	r3, #0
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3708      	adds	r7, #8
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	200019b8 	.word	0x200019b8

08011aac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d101      	bne.n	8011abe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011aba:	2301      	movs	r3, #1
 8011abc:	e005      	b.n	8011aca <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8011abe:	4b05      	ldr	r3, [pc, #20]	; (8011ad4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8011ac0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bc80      	pop	{r7}
 8011ad2:	4770      	bx	lr
 8011ad4:	200019b8 	.word	0x200019b8

08011ad8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b088      	sub	sp, #32
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011ae4:	4b25      	ldr	r3, [pc, #148]	; (8011b7c <LoRaMacCommandsSerializeCmds+0xa4>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8011aea:	2300      	movs	r3, #0
 8011aec:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d002      	beq.n	8011afa <LoRaMacCommandsSerializeCmds+0x22>
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d126      	bne.n	8011b48 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011afa:	2301      	movs	r3, #1
 8011afc:	e039      	b.n	8011b72 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8011afe:	7efb      	ldrb	r3, [r7, #27]
 8011b00:	68fa      	ldr	r2, [r7, #12]
 8011b02:	1ad2      	subs	r2, r2, r3
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	689b      	ldr	r3, [r3, #8]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d320      	bcc.n	8011b50 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8011b0e:	7efb      	ldrb	r3, [r7, #27]
 8011b10:	1c5a      	adds	r2, r3, #1
 8011b12:	76fa      	strb	r2, [r7, #27]
 8011b14:	461a      	mov	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4413      	add	r3, r2
 8011b1a:	69fa      	ldr	r2, [r7, #28]
 8011b1c:	7912      	ldrb	r2, [r2, #4]
 8011b1e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8011b20:	7efb      	ldrb	r3, [r7, #27]
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	18d0      	adds	r0, r2, r3
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	1d59      	adds	r1, r3, #5
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	461a      	mov	r2, r3
 8011b32:	f003 ffbc 	bl	8015aae <memcpy1>
            itr += curElement->PayloadSize;
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	689b      	ldr	r3, [r3, #8]
 8011b3a:	b2da      	uxtb	r2, r3
 8011b3c:	7efb      	ldrb	r3, [r7, #27]
 8011b3e:	4413      	add	r3, r2
 8011b40:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d1d7      	bne.n	8011afe <LoRaMacCommandsSerializeCmds+0x26>
 8011b4e:	e009      	b.n	8011b64 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8011b50:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8011b52:	e007      	b.n	8011b64 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8011b5a:	69f8      	ldr	r0, [r7, #28]
 8011b5c:	f7ff ff2e 	bl	80119bc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1f4      	bne.n	8011b54 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8011b6a:	68b8      	ldr	r0, [r7, #8]
 8011b6c:	f7ff ff9e 	bl	8011aac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3720      	adds	r7, #32
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	200019b8 	.word	0x200019b8

08011b80 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e016      	b.n	8011bc0 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8011b92:	4b0e      	ldr	r3, [pc, #56]	; (8011bcc <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8011b9e:	e00b      	b.n	8011bb8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	7b1b      	ldrb	r3, [r3, #12]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d004      	beq.n	8011bb2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2201      	movs	r2, #1
 8011bac:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e006      	b.n	8011bc0 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d1f0      	bne.n	8011ba0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3714      	adds	r7, #20
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bc80      	pop	{r7}
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop
 8011bcc:	200019b8 	.word	0x200019b8

08011bd0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8011bde:	79fb      	ldrb	r3, [r7, #7]
 8011be0:	3b02      	subs	r3, #2
 8011be2:	2b11      	cmp	r3, #17
 8011be4:	d850      	bhi.n	8011c88 <LoRaMacCommandsGetCmdSize+0xb8>
 8011be6:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <LoRaMacCommandsGetCmdSize+0x1c>)
 8011be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bec:	08011c35 	.word	0x08011c35
 8011bf0:	08011c3b 	.word	0x08011c3b
 8011bf4:	08011c41 	.word	0x08011c41
 8011bf8:	08011c47 	.word	0x08011c47
 8011bfc:	08011c4d 	.word	0x08011c4d
 8011c00:	08011c53 	.word	0x08011c53
 8011c04:	08011c59 	.word	0x08011c59
 8011c08:	08011c5f 	.word	0x08011c5f
 8011c0c:	08011c65 	.word	0x08011c65
 8011c10:	08011c89 	.word	0x08011c89
 8011c14:	08011c89 	.word	0x08011c89
 8011c18:	08011c6b 	.word	0x08011c6b
 8011c1c:	08011c89 	.word	0x08011c89
 8011c20:	08011c89 	.word	0x08011c89
 8011c24:	08011c71 	.word	0x08011c71
 8011c28:	08011c77 	.word	0x08011c77
 8011c2c:	08011c7d 	.word	0x08011c7d
 8011c30:	08011c83 	.word	0x08011c83
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8011c34:	2303      	movs	r3, #3
 8011c36:	73fb      	strb	r3, [r7, #15]
            break;
 8011c38:	e027      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8011c3a:	2305      	movs	r3, #5
 8011c3c:	73fb      	strb	r3, [r7, #15]
            break;
 8011c3e:	e024      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8011c40:	2302      	movs	r3, #2
 8011c42:	73fb      	strb	r3, [r7, #15]
            break;
 8011c44:	e021      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8011c46:	2305      	movs	r3, #5
 8011c48:	73fb      	strb	r3, [r7, #15]
            break;
 8011c4a:	e01e      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	73fb      	strb	r3, [r7, #15]
            break;
 8011c50:	e01b      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8011c52:	2306      	movs	r3, #6
 8011c54:	73fb      	strb	r3, [r7, #15]
            break;
 8011c56:	e018      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8011c58:	2302      	movs	r3, #2
 8011c5a:	73fb      	strb	r3, [r7, #15]
            break;
 8011c5c:	e015      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8011c5e:	2302      	movs	r3, #2
 8011c60:	73fb      	strb	r3, [r7, #15]
            break;
 8011c62:	e012      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8011c64:	2305      	movs	r3, #5
 8011c66:	73fb      	strb	r3, [r7, #15]
            break;
 8011c68:	e00f      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8011c6a:	2306      	movs	r3, #6
 8011c6c:	73fb      	strb	r3, [r7, #15]
            break;
 8011c6e:	e00c      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8011c70:	2301      	movs	r3, #1
 8011c72:	73fb      	strb	r3, [r7, #15]
            break;
 8011c74:	e009      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8011c76:	2305      	movs	r3, #5
 8011c78:	73fb      	strb	r3, [r7, #15]
            break;
 8011c7a:	e006      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8011c7c:	2304      	movs	r3, #4
 8011c7e:	73fb      	strb	r3, [r7, #15]
            break;
 8011c80:	e003      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8011c82:	2304      	movs	r3, #4
 8011c84:	73fb      	strb	r3, [r7, #15]
            break;
 8011c86:	e000      	b.n	8011c8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8011c88:	bf00      	nop
        }
    }
    return cidSize;
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bc80      	pop	{r7}
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop

08011c98 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a07      	ldr	r2, [pc, #28]	; (8011cc0 <IncreaseBufferPointer+0x28>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d102      	bne.n	8011cae <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <IncreaseBufferPointer+0x2c>)
 8011caa:	607b      	str	r3, [r7, #4]
 8011cac:	e002      	b.n	8011cb4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3304      	adds	r3, #4
 8011cb2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8011cb4:	687b      	ldr	r3, [r7, #4]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	370c      	adds	r7, #12
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bc80      	pop	{r7}
 8011cbe:	4770      	bx	lr
 8011cc0:	20001ad0 	.word	0x20001ad0
 8011cc4:	20001ac0 	.word	0x20001ac0

08011cc8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	4603      	mov	r3, r0
 8011cd0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8011cd2:	79fb      	ldrb	r3, [r7, #7]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d101      	bne.n	8011cdc <IsListEmpty+0x14>
    {
        return true;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	e000      	b.n	8011cde <IsListEmpty+0x16>
    }
    return false;
 8011cdc:	2300      	movs	r3, #0
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	370c      	adds	r7, #12
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bc80      	pop	{r7}
 8011ce6:	4770      	bx	lr

08011ce8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	4603      	mov	r3, r0
 8011cf0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8011cf2:	79fb      	ldrb	r3, [r7, #7]
 8011cf4:	2b04      	cmp	r3, #4
 8011cf6:	d901      	bls.n	8011cfc <IsListFull+0x14>
    {
        return true;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e000      	b.n	8011cfe <IsListFull+0x16>
    }
    return false;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	370c      	adds	r7, #12
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bc80      	pop	{r7}
 8011d06:	4770      	bx	lr

08011d08 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	4603      	mov	r3, r0
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011d1a:	4b13      	ldr	r3, [pc, #76]	; (8011d68 <GetElement+0x60>)
 8011d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff ffd1 	bl	8011cc8 <IsListEmpty>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <GetElement+0x28>
    {
        return NULL;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	e017      	b.n	8011d60 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011d30:	2300      	movs	r3, #0
 8011d32:	74fb      	strb	r3, [r7, #19]
 8011d34:	e00d      	b.n	8011d52 <GetElement+0x4a>
    {
        if( element->Request == request )
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	7bfa      	ldrb	r2, [r7, #15]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d101      	bne.n	8011d44 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	e00d      	b.n	8011d60 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8011d44:	6978      	ldr	r0, [r7, #20]
 8011d46:	f7ff ffa7 	bl	8011c98 <IncreaseBufferPointer>
 8011d4a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011d4c:	7cfb      	ldrb	r3, [r7, #19]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	74fb      	strb	r3, [r7, #19]
 8011d52:	4b05      	ldr	r3, [pc, #20]	; (8011d68 <GetElement+0x60>)
 8011d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d58:	7cfa      	ldrb	r2, [r7, #19]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d3eb      	bcc.n	8011d36 <GetElement+0x2e>
    }

    return NULL;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3718      	adds	r7, #24
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	20001ab4 	.word	0x20001ab4

08011d6c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8011d74:	4a0c      	ldr	r2, [pc, #48]	; (8011da8 <LoRaMacConfirmQueueInit+0x3c>)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8011d7a:	4b0b      	ldr	r3, [pc, #44]	; (8011da8 <LoRaMacConfirmQueueInit+0x3c>)
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011d82:	4b09      	ldr	r3, [pc, #36]	; (8011da8 <LoRaMacConfirmQueueInit+0x3c>)
 8011d84:	4a09      	ldr	r2, [pc, #36]	; (8011dac <LoRaMacConfirmQueueInit+0x40>)
 8011d86:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011d88:	4b07      	ldr	r3, [pc, #28]	; (8011da8 <LoRaMacConfirmQueueInit+0x3c>)
 8011d8a:	4a08      	ldr	r2, [pc, #32]	; (8011dac <LoRaMacConfirmQueueInit+0x40>)
 8011d8c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8011d8e:	2214      	movs	r2, #20
 8011d90:	21ff      	movs	r1, #255	; 0xff
 8011d92:	4806      	ldr	r0, [pc, #24]	; (8011dac <LoRaMacConfirmQueueInit+0x40>)
 8011d94:	f003 fec6 	bl	8015b24 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011d98:	4b03      	ldr	r3, [pc, #12]	; (8011da8 <LoRaMacConfirmQueueInit+0x3c>)
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8011da0:	bf00      	nop
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	20001ab4 	.word	0x20001ab4
 8011dac:	20001ac0 	.word	0x20001ac0

08011db0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011db8:	4b19      	ldr	r3, [pc, #100]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7ff ff92 	bl	8011ce8 <IsListFull>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d001      	beq.n	8011dce <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e023      	b.n	8011e16 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8011dce:	4b14      	ldr	r3, [pc, #80]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	7812      	ldrb	r2, [r2, #0]
 8011dd6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8011dd8:	4b11      	ldr	r3, [pc, #68]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	7852      	ldrb	r2, [r2, #1]
 8011de0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8011de2:	4b0f      	ldr	r3, [pc, #60]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	78d2      	ldrb	r2, [r2, #3]
 8011dea:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8011dec:	4b0c      	ldr	r3, [pc, #48]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	2200      	movs	r2, #0
 8011df2:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8011df4:	4b0a      	ldr	r3, [pc, #40]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	4b08      	ldr	r3, [pc, #32]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011e00:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8011e04:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7ff ff45 	bl	8011c98 <IncreaseBufferPointer>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	4a03      	ldr	r2, [pc, #12]	; (8011e20 <LoRaMacConfirmQueueAdd+0x70>)
 8011e12:	6093      	str	r3, [r2, #8]

    return true;
 8011e14:	2301      	movs	r3, #1
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3708      	adds	r7, #8
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	20001ab4 	.word	0x20001ab4

08011e24 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011e28:	4b0e      	ldr	r3, [pc, #56]	; (8011e64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff ff4a 	bl	8011cc8 <IsListEmpty>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d001      	beq.n	8011e3e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	e010      	b.n	8011e60 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8011e3e:	4b09      	ldr	r3, [pc, #36]	; (8011e64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	b2da      	uxtb	r2, r3
 8011e48:	4b06      	ldr	r3, [pc, #24]	; (8011e64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011e4a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8011e4e:	4b05      	ldr	r3, [pc, #20]	; (8011e64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7ff ff20 	bl	8011c98 <IncreaseBufferPointer>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	4a02      	ldr	r2, [pc, #8]	; (8011e64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011e5c:	6053      	str	r3, [r2, #4]

    return true;
 8011e5e:	2301      	movs	r3, #1
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	20001ab4 	.word	0x20001ab4

08011e68 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	4603      	mov	r3, r0
 8011e70:	460a      	mov	r2, r1
 8011e72:	71fb      	strb	r3, [r7, #7]
 8011e74:	4613      	mov	r3, r2
 8011e76:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011e7c:	4b10      	ldr	r3, [pc, #64]	; (8011ec0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8011e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7ff ff20 	bl	8011cc8 <IsListEmpty>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	f083 0301 	eor.w	r3, r3, #1
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d011      	beq.n	8011eb8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011e94:	4b0a      	ldr	r3, [pc, #40]	; (8011ec0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8011e96:	6859      	ldr	r1, [r3, #4]
 8011e98:	4b09      	ldr	r3, [pc, #36]	; (8011ec0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8011e9a:	689a      	ldr	r2, [r3, #8]
 8011e9c:	79bb      	ldrb	r3, [r7, #6]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ff ff32 	bl	8011d08 <GetElement>
 8011ea4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d005      	beq.n	8011eb8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	79fa      	ldrb	r2, [r7, #7]
 8011eb0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8011eb8:	bf00      	nop
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	20001ab4 	.word	0x20001ab4

08011ec4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011ed2:	4b10      	ldr	r3, [pc, #64]	; (8011f14 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7ff fef5 	bl	8011cc8 <IsListEmpty>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	f083 0301 	eor.w	r3, r3, #1
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00e      	beq.n	8011f08 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011eea:	4b0a      	ldr	r3, [pc, #40]	; (8011f14 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011eec:	6859      	ldr	r1, [r3, #4]
 8011eee:	4b09      	ldr	r3, [pc, #36]	; (8011f14 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011ef0:	689a      	ldr	r2, [r3, #8]
 8011ef2:	79fb      	ldrb	r3, [r7, #7]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7ff ff07 	bl	8011d08 <GetElement>
 8011efa:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d002      	beq.n	8011f08 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	785b      	ldrb	r3, [r3, #1]
 8011f06:	e000      	b.n	8011f0a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f08:	2301      	movs	r3, #1
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3710      	adds	r7, #16
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20001ab4 	.word	0x20001ab4

08011f18 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	4603      	mov	r3, r0
 8011f20:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8011f22:	4b16      	ldr	r3, [pc, #88]	; (8011f7c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8011f28:	4a14      	ldr	r2, [pc, #80]	; (8011f7c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011f2a:	79fb      	ldrb	r3, [r7, #7]
 8011f2c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011f30:	4b12      	ldr	r3, [pc, #72]	; (8011f7c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7ff fec6 	bl	8011cc8 <IsListEmpty>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	f083 0301 	eor.w	r3, r3, #1
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d015      	beq.n	8011f74 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	79fa      	ldrb	r2, [r7, #7]
 8011f4c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	78db      	ldrb	r3, [r3, #3]
 8011f52:	f083 0301 	eor.w	r3, r3, #1
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f7ff fe98 	bl	8011c98 <IncreaseBufferPointer>
 8011f68:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8011f6a:	4b04      	ldr	r3, [pc, #16]	; (8011f7c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d1e9      	bne.n	8011f48 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8011f74:	bf00      	nop
 8011f76:	3710      	adds	r7, #16
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	20001ab4 	.word	0x20001ab4

08011f80 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	4603      	mov	r3, r0
 8011f88:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011f8a:	4b09      	ldr	r3, [pc, #36]	; (8011fb0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011f8c:	6859      	ldr	r1, [r3, #4]
 8011f8e:	4b08      	ldr	r3, [pc, #32]	; (8011fb0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011f90:	689a      	ldr	r2, [r3, #8]
 8011f92:	79fb      	ldrb	r3, [r7, #7]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7ff feb7 	bl	8011d08 <GetElement>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d001      	beq.n	8011fa4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e000      	b.n	8011fa6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3708      	adds	r7, #8
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	20001ab4 	.word	0x20001ab4

08011fb4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011fbc:	4b22      	ldr	r3, [pc, #136]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011fc2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8011fc8:	2300      	movs	r3, #0
 8011fca:	73fb      	strb	r3, [r7, #15]
 8011fcc:	e032      	b.n	8012034 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8011fce:	4b1e      	ldr	r3, [pc, #120]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	781a      	ldrb	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8011fd8:	4b1b      	ldr	r3, [pc, #108]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	785a      	ldrb	r2, [r3, #1]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8011fe2:	4b19      	ldr	r3, [pc, #100]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	789b      	ldrb	r3, [r3, #2]
 8011fe8:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8011fea:	7b7b      	ldrb	r3, [r7, #13]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d005      	beq.n	8011ffc <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8011ff0:	4b15      	ldr	r3, [pc, #84]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	4798      	blx	r3
 8011ffa:	e00b      	b.n	8012014 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8011ffc:	4b12      	ldr	r3, [pc, #72]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012004:	4b10      	ldr	r3, [pc, #64]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	785b      	ldrb	r3, [r3, #1]
 801200a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801200c:	4b0e      	ldr	r3, [pc, #56]	; (8012048 <LoRaMacConfirmQueueHandleCb+0x94>)
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	78db      	ldrb	r3, [r3, #3]
 8012012:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012014:	f7ff ff06 	bl	8011e24 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012018:	7b7b      	ldrb	r3, [r7, #13]
 801201a:	f083 0301 	eor.w	r3, r3, #1
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	d004      	beq.n	801202e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012024:	f107 0308 	add.w	r3, r7, #8
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff fec1 	bl	8011db0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801202e:	7bfb      	ldrb	r3, [r7, #15]
 8012030:	3301      	adds	r3, #1
 8012032:	73fb      	strb	r3, [r7, #15]
 8012034:	7bfa      	ldrb	r2, [r7, #15]
 8012036:	7bbb      	ldrb	r3, [r7, #14]
 8012038:	429a      	cmp	r2, r3
 801203a:	d3c8      	bcc.n	8011fce <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 801203c:	bf00      	nop
 801203e:	bf00      	nop
 8012040:	3710      	adds	r7, #16
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	20001ab4 	.word	0x20001ab4

0801204c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801204c:	b480      	push	{r7}
 801204e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012050:	4b03      	ldr	r3, [pc, #12]	; (8012060 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012052:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012056:	4618      	mov	r0, r3
 8012058:	46bd      	mov	sp, r7
 801205a:	bc80      	pop	{r7}
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	20001ab4 	.word	0x20001ab4

08012064 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012064:	b580      	push	{r7, lr}
 8012066:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012068:	4b06      	ldr	r3, [pc, #24]	; (8012084 <LoRaMacConfirmQueueIsFull+0x20>)
 801206a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff fe3a 	bl	8011ce8 <IsListFull>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d001      	beq.n	801207e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801207a:	2301      	movs	r3, #1
 801207c:	e000      	b.n	8012080 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801207e:	2300      	movs	r3, #0
    }
}
 8012080:	4618      	mov	r0, r3
 8012082:	bd80      	pop	{r7, pc}
 8012084:	20001ab4 	.word	0x20001ab4

08012088 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b08e      	sub	sp, #56	; 0x38
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	607b      	str	r3, [r7, #4]
 8012092:	460b      	mov	r3, r1
 8012094:	817b      	strh	r3, [r7, #10]
 8012096:	4613      	mov	r3, r2
 8012098:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d101      	bne.n	80120a4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80120a0:	230a      	movs	r3, #10
 80120a2:	e086      	b.n	80121b2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80120a4:	2300      	movs	r3, #0
 80120a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80120aa:	2301      	movs	r3, #1
 80120ac:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80120ae:	2300      	movs	r3, #0
 80120b0:	623b      	str	r3, [r7, #32]
 80120b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120b6:	2200      	movs	r2, #0
 80120b8:	601a      	str	r2, [r3, #0]
 80120ba:	605a      	str	r2, [r3, #4]
 80120bc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80120be:	2300      	movs	r3, #0
 80120c0:	613b      	str	r3, [r7, #16]
 80120c2:	f107 0314 	add.w	r3, r7, #20
 80120c6:	2200      	movs	r2, #0
 80120c8:	601a      	str	r2, [r3, #0]
 80120ca:	605a      	str	r2, [r3, #4]
 80120cc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80120ce:	2301      	movs	r3, #1
 80120d0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80120d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80120d6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	0a1b      	lsrs	r3, r3, #8
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	0c1b      	lsrs	r3, r3, #16
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	0e1b      	lsrs	r3, r3, #24
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80120f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80120fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120fe:	0a1b      	lsrs	r3, r3, #8
 8012100:	b2db      	uxtb	r3, r3
 8012102:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012106:	0c1b      	lsrs	r3, r3, #16
 8012108:	b2db      	uxtb	r3, r3
 801210a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801210e:	0e1b      	lsrs	r3, r3, #24
 8012110:	b2db      	uxtb	r3, r3
 8012112:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012114:	e048      	b.n	80121a8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012116:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012118:	b2db      	uxtb	r3, r3
 801211a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801211c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801211e:	3301      	adds	r3, #1
 8012120:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012122:	f107 0320 	add.w	r3, r7, #32
 8012126:	7a7a      	ldrb	r2, [r7, #9]
 8012128:	f107 0010 	add.w	r0, r7, #16
 801212c:	2110      	movs	r1, #16
 801212e:	f7f9 f866 	bl	800b1fe <SecureElementAesEncrypt>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d001      	beq.n	801213c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012138:	230f      	movs	r3, #15
 801213a:	e03a      	b.n	80121b2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801213c:	2300      	movs	r3, #0
 801213e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012142:	e01e      	b.n	8012182 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012144:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012148:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801214c:	4413      	add	r3, r2
 801214e:	461a      	mov	r2, r3
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	4413      	add	r3, r2
 8012154:	7819      	ldrb	r1, [r3, #0]
 8012156:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801215a:	3338      	adds	r3, #56	; 0x38
 801215c:	443b      	add	r3, r7
 801215e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012162:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801216a:	4403      	add	r3, r0
 801216c:	4618      	mov	r0, r3
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	4403      	add	r3, r0
 8012172:	404a      	eors	r2, r1
 8012174:	b2d2      	uxtb	r2, r2
 8012176:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012178:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801217c:	3301      	adds	r3, #1
 801217e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012186:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801218a:	2a10      	cmp	r2, #16
 801218c:	bfa8      	it	ge
 801218e:	2210      	movge	r2, #16
 8012190:	b212      	sxth	r2, r2
 8012192:	4293      	cmp	r3, r2
 8012194:	dbd6      	blt.n	8012144 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012196:	897b      	ldrh	r3, [r7, #10]
 8012198:	3b10      	subs	r3, #16
 801219a:	b29b      	uxth	r3, r3
 801219c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801219e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121a2:	3310      	adds	r3, #16
 80121a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80121a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	dcb2      	bgt.n	8012116 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80121b0:	2300      	movs	r3, #0
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3738      	adds	r7, #56	; 0x38
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80121ba:	b490      	push	{r4, r7}
 80121bc:	b082      	sub	sp, #8
 80121be:	af00      	add	r7, sp, #0
 80121c0:	4604      	mov	r4, r0
 80121c2:	4608      	mov	r0, r1
 80121c4:	4611      	mov	r1, r2
 80121c6:	461a      	mov	r2, r3
 80121c8:	4623      	mov	r3, r4
 80121ca:	80fb      	strh	r3, [r7, #6]
 80121cc:	4603      	mov	r3, r0
 80121ce:	717b      	strb	r3, [r7, #5]
 80121d0:	460b      	mov	r3, r1
 80121d2:	713b      	strb	r3, [r7, #4]
 80121d4:	4613      	mov	r3, r2
 80121d6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d101      	bne.n	80121e2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80121de:	230a      	movs	r3, #10
 80121e0:	e04e      	b.n	8012280 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	2249      	movs	r2, #73	; 0x49
 80121e6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	3301      	adds	r3, #1
 80121ec:	2200      	movs	r2, #0
 80121ee:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	3302      	adds	r3, #2
 80121f4:	2200      	movs	r2, #0
 80121f6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80121f8:	69bb      	ldr	r3, [r7, #24]
 80121fa:	3303      	adds	r3, #3
 80121fc:	2200      	movs	r2, #0
 80121fe:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012200:	69bb      	ldr	r3, [r7, #24]
 8012202:	3304      	adds	r3, #4
 8012204:	2200      	movs	r2, #0
 8012206:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	3305      	adds	r3, #5
 801220c:	78fa      	ldrb	r2, [r7, #3]
 801220e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	3306      	adds	r3, #6
 8012214:	693a      	ldr	r2, [r7, #16]
 8012216:	b2d2      	uxtb	r2, r2
 8012218:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	0a1a      	lsrs	r2, r3, #8
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	3307      	adds	r3, #7
 8012222:	b2d2      	uxtb	r2, r2
 8012224:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	0c1a      	lsrs	r2, r3, #16
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	3308      	adds	r3, #8
 801222e:	b2d2      	uxtb	r2, r2
 8012230:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	0e1a      	lsrs	r2, r3, #24
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	3309      	adds	r3, #9
 801223a:	b2d2      	uxtb	r2, r2
 801223c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	330a      	adds	r3, #10
 8012242:	697a      	ldr	r2, [r7, #20]
 8012244:	b2d2      	uxtb	r2, r2
 8012246:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	0a1a      	lsrs	r2, r3, #8
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	330b      	adds	r3, #11
 8012250:	b2d2      	uxtb	r2, r2
 8012252:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	0c1a      	lsrs	r2, r3, #16
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	330c      	adds	r3, #12
 801225c:	b2d2      	uxtb	r2, r2
 801225e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	0e1a      	lsrs	r2, r3, #24
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	330d      	adds	r3, #13
 8012268:	b2d2      	uxtb	r2, r2
 801226a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	330e      	adds	r3, #14
 8012270:	2200      	movs	r2, #0
 8012272:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	330f      	adds	r3, #15
 8012278:	88fa      	ldrh	r2, [r7, #6]
 801227a:	b2d2      	uxtb	r2, r2
 801227c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801227e:	2300      	movs	r3, #0
}
 8012280:	4618      	mov	r0, r3
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bc90      	pop	{r4, r7}
 8012288:	4770      	bx	lr

0801228a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801228a:	b590      	push	{r4, r7, lr}
 801228c:	b08b      	sub	sp, #44	; 0x2c
 801228e:	af04      	add	r7, sp, #16
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	4608      	mov	r0, r1
 8012294:	4611      	mov	r1, r2
 8012296:	461a      	mov	r2, r3
 8012298:	4603      	mov	r3, r0
 801229a:	807b      	strh	r3, [r7, #2]
 801229c:	460b      	mov	r3, r1
 801229e:	707b      	strb	r3, [r7, #1]
 80122a0:	4613      	mov	r3, r2
 80122a2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d002      	beq.n	80122b0 <ComputeCmacB0+0x26>
 80122aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d101      	bne.n	80122b4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80122b0:	230a      	movs	r3, #10
 80122b2:	e024      	b.n	80122fe <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80122b4:	887b      	ldrh	r3, [r7, #2]
 80122b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122ba:	d901      	bls.n	80122c0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80122bc:	230e      	movs	r3, #14
 80122be:	e01e      	b.n	80122fe <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80122c0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80122c4:	783a      	ldrb	r2, [r7, #0]
 80122c6:	7879      	ldrb	r1, [r7, #1]
 80122c8:	8878      	ldrh	r0, [r7, #2]
 80122ca:	f107 0308 	add.w	r3, r7, #8
 80122ce:	9302      	str	r3, [sp, #8]
 80122d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d2:	9301      	str	r3, [sp, #4]
 80122d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	4623      	mov	r3, r4
 80122da:	f7ff ff6e 	bl	80121ba <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80122de:	7879      	ldrb	r1, [r7, #1]
 80122e0:	887a      	ldrh	r2, [r7, #2]
 80122e2:	f107 0008 	add.w	r0, r7, #8
 80122e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	460b      	mov	r3, r1
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	f7f8 ff39 	bl	800b164 <SecureElementComputeAesCmac>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80122f8:	230f      	movs	r3, #15
 80122fa:	e000      	b.n	80122fe <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	371c      	adds	r7, #28
 8012302:	46bd      	mov	sp, r7
 8012304:	bd90      	pop	{r4, r7, pc}

08012306 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012306:	b590      	push	{r4, r7, lr}
 8012308:	b0cd      	sub	sp, #308	; 0x134
 801230a:	af04      	add	r7, sp, #16
 801230c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8012310:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8012314:	6020      	str	r0, [r4, #0]
 8012316:	460c      	mov	r4, r1
 8012318:	4610      	mov	r0, r2
 801231a:	4619      	mov	r1, r3
 801231c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012320:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012324:	4622      	mov	r2, r4
 8012326:	801a      	strh	r2, [r3, #0]
 8012328:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801232c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012330:	4602      	mov	r2, r0
 8012332:	701a      	strb	r2, [r3, #0]
 8012334:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012338:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801233c:	460a      	mov	r2, r1
 801233e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012340:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012344:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801234e:	230a      	movs	r3, #10
 8012350:	e063      	b.n	801241a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012352:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012356:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801235a:	881b      	ldrh	r3, [r3, #0]
 801235c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012360:	d901      	bls.n	8012366 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012362:	230e      	movs	r3, #14
 8012364:	e059      	b.n	801241a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012366:	f107 030c 	add.w	r3, r7, #12
 801236a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801236e:	2100      	movs	r1, #0
 8012370:	4618      	mov	r0, r3
 8012372:	f003 fbd7 	bl	8015b24 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012376:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801237a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801237e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012382:	781a      	ldrb	r2, [r3, #0]
 8012384:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012388:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801238c:	7819      	ldrb	r1, [r3, #0]
 801238e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012392:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012396:	8818      	ldrh	r0, [r3, #0]
 8012398:	f107 030c 	add.w	r3, r7, #12
 801239c:	9302      	str	r3, [sp, #8]
 801239e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80123a2:	9301      	str	r3, [sp, #4]
 80123a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	4623      	mov	r3, r4
 80123ac:	f7ff ff05 	bl	80121ba <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80123b0:	f107 030c 	add.w	r3, r7, #12
 80123b4:	3310      	adds	r3, #16
 80123b6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80123ba:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80123be:	8812      	ldrh	r2, [r2, #0]
 80123c0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80123c4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80123c8:	6809      	ldr	r1, [r1, #0]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f003 fb6f 	bl	8015aae <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80123d0:	2306      	movs	r3, #6
 80123d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80123d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80123da:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	3310      	adds	r3, #16
 80123e2:	b299      	uxth	r1, r3
 80123e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80123e8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	f107 000c 	add.w	r0, r7, #12
 80123f2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80123f6:	f7f8 fed3 	bl	800b1a0 <SecureElementVerifyAesCmac>
 80123fa:	4603      	mov	r3, r0
 80123fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012404:	2b00      	cmp	r3, #0
 8012406:	d101      	bne.n	801240c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012408:	2300      	movs	r3, #0
 801240a:	e006      	b.n	801241a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801240c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012410:	2b01      	cmp	r3, #1
 8012412:	d101      	bne.n	8012418 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012414:	2301      	movs	r3, #1
 8012416:	e000      	b.n	801241a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012418:	230f      	movs	r3, #15
}
 801241a:	4618      	mov	r0, r3
 801241c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012420:	46bd      	mov	sp, r7
 8012422:	bd90      	pop	{r4, r7, pc}

08012424 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	4603      	mov	r3, r0
 801242c:	6039      	str	r1, [r7, #0]
 801242e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012430:	2300      	movs	r3, #0
 8012432:	73fb      	strb	r3, [r7, #15]
 8012434:	e011      	b.n	801245a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012436:	7bfb      	ldrb	r3, [r7, #15]
 8012438:	4a0c      	ldr	r2, [pc, #48]	; (801246c <GetKeyAddrItem+0x48>)
 801243a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801243e:	79fa      	ldrb	r2, [r7, #7]
 8012440:	429a      	cmp	r2, r3
 8012442:	d107      	bne.n	8012454 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012444:	7bfb      	ldrb	r3, [r7, #15]
 8012446:	009b      	lsls	r3, r3, #2
 8012448:	4a08      	ldr	r2, [pc, #32]	; (801246c <GetKeyAddrItem+0x48>)
 801244a:	441a      	add	r2, r3
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012450:	2300      	movs	r3, #0
 8012452:	e006      	b.n	8012462 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012454:	7bfb      	ldrb	r3, [r7, #15]
 8012456:	3301      	adds	r3, #1
 8012458:	73fb      	strb	r3, [r7, #15]
 801245a:	7bfb      	ldrb	r3, [r7, #15]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d9ea      	bls.n	8012436 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012460:	230c      	movs	r3, #12
}
 8012462:	4618      	mov	r0, r3
 8012464:	3714      	adds	r7, #20
 8012466:	46bd      	mov	sp, r7
 8012468:	bc80      	pop	{r7}
 801246a:	4770      	bx	lr
 801246c:	20000114 	.word	0x20000114

08012470 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b088      	sub	sp, #32
 8012474:	af00      	add	r7, sp, #0
 8012476:	60b9      	str	r1, [r7, #8]
 8012478:	607a      	str	r2, [r7, #4]
 801247a:	461a      	mov	r2, r3
 801247c:	4603      	mov	r3, r0
 801247e:	73fb      	strb	r3, [r7, #15]
 8012480:	4613      	mov	r3, r2
 8012482:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012484:	2300      	movs	r3, #0
 8012486:	613b      	str	r3, [r7, #16]
 8012488:	f107 0314 	add.w	r3, r7, #20
 801248c:	2200      	movs	r2, #0
 801248e:	601a      	str	r2, [r3, #0]
 8012490:	605a      	str	r2, [r3, #4]
 8012492:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	2b02      	cmp	r3, #2
 8012498:	d002      	beq.n	80124a0 <DeriveSessionKey10x+0x30>
 801249a:	2b03      	cmp	r3, #3
 801249c:	d003      	beq.n	80124a6 <DeriveSessionKey10x+0x36>
 801249e:	e005      	b.n	80124ac <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80124a0:	2301      	movs	r3, #1
 80124a2:	743b      	strb	r3, [r7, #16]
            break;
 80124a4:	e004      	b.n	80124b0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80124a6:	2302      	movs	r3, #2
 80124a8:	743b      	strb	r3, [r7, #16]
            break;
 80124aa:	e001      	b.n	80124b0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80124ac:	230b      	movs	r3, #11
 80124ae:	e02a      	b.n	8012506 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	0a1b      	lsrs	r3, r3, #8
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	0c1b      	lsrs	r3, r3, #16
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	0a1b      	lsrs	r3, r3, #8
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	0c1b      	lsrs	r3, r3, #16
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80124dc:	89bb      	ldrh	r3, [r7, #12]
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80124e2:	89bb      	ldrh	r3, [r7, #12]
 80124e4:	0a1b      	lsrs	r3, r3, #8
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80124ec:	7bfa      	ldrb	r2, [r7, #15]
 80124ee:	f107 0310 	add.w	r3, r7, #16
 80124f2:	2101      	movs	r1, #1
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7f8 fee9 	bl	800b2cc <SecureElementDeriveAndStoreKey>
 80124fa:	4603      	mov	r3, r0
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d001      	beq.n	8012504 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012500:	230f      	movs	r3, #15
 8012502:	e000      	b.n	8012506 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012504:	2300      	movs	r3, #0
}
 8012506:	4618      	mov	r0, r3
 8012508:	3720      	adds	r7, #32
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
	...

08012510 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	6039      	str	r1, [r7, #0]
 801251a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d101      	bne.n	8012526 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012522:	230a      	movs	r3, #10
 8012524:	e03b      	b.n	801259e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012526:	79fb      	ldrb	r3, [r7, #7]
 8012528:	3b01      	subs	r3, #1
 801252a:	2b03      	cmp	r3, #3
 801252c:	d834      	bhi.n	8012598 <GetLastFcntDown+0x88>
 801252e:	a201      	add	r2, pc, #4	; (adr r2, 8012534 <GetLastFcntDown+0x24>)
 8012530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012534:	08012545 	.word	0x08012545
 8012538:	0801255d 	.word	0x0801255d
 801253c:	08012575 	.word	0x08012575
 8012540:	0801258d 	.word	0x0801258d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012544:	4b18      	ldr	r3, [pc, #96]	; (80125a8 <GetLastFcntDown+0x98>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	691a      	ldr	r2, [r3, #16]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801254e:	4b16      	ldr	r3, [pc, #88]	; (80125a8 <GetLastFcntDown+0x98>)
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	4b15      	ldr	r3, [pc, #84]	; (80125a8 <GetLastFcntDown+0x98>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	6912      	ldr	r2, [r2, #16]
 8012558:	621a      	str	r2, [r3, #32]
            break;
 801255a:	e01f      	b.n	801259c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801255c:	4b12      	ldr	r3, [pc, #72]	; (80125a8 <GetLastFcntDown+0x98>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	695a      	ldr	r2, [r3, #20]
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012566:	4b10      	ldr	r3, [pc, #64]	; (80125a8 <GetLastFcntDown+0x98>)
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	4b0f      	ldr	r3, [pc, #60]	; (80125a8 <GetLastFcntDown+0x98>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	6952      	ldr	r2, [r2, #20]
 8012570:	621a      	str	r2, [r3, #32]
            break;
 8012572:	e013      	b.n	801259c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012574:	4b0c      	ldr	r3, [pc, #48]	; (80125a8 <GetLastFcntDown+0x98>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	699a      	ldr	r2, [r3, #24]
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801257e:	4b0a      	ldr	r3, [pc, #40]	; (80125a8 <GetLastFcntDown+0x98>)
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	4b09      	ldr	r3, [pc, #36]	; (80125a8 <GetLastFcntDown+0x98>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	6992      	ldr	r2, [r2, #24]
 8012588:	621a      	str	r2, [r3, #32]
            break;
 801258a:	e007      	b.n	801259c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801258c:	4b06      	ldr	r3, [pc, #24]	; (80125a8 <GetLastFcntDown+0x98>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	69da      	ldr	r2, [r3, #28]
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	601a      	str	r2, [r3, #0]
            break;
 8012596:	e001      	b.n	801259c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012598:	2305      	movs	r3, #5
 801259a:	e000      	b.n	801259e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bc80      	pop	{r7}
 80125a6:	4770      	bx	lr
 80125a8:	20001ad8 	.word	0x20001ad8

080125ac <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	4603      	mov	r3, r0
 80125b4:	6039      	str	r1, [r7, #0]
 80125b6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80125bc:	f107 020c 	add.w	r2, r7, #12
 80125c0:	79fb      	ldrb	r3, [r7, #7]
 80125c2:	4611      	mov	r1, r2
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7ff ffa3 	bl	8012510 <GetLastFcntDown>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <CheckFCntDown+0x28>
    {
        return false;
 80125d0:	2300      	movs	r3, #0
 80125d2:	e00a      	b.n	80125ea <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d803      	bhi.n	80125e4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80125dc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80125de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e2:	d101      	bne.n	80125e8 <CheckFCntDown+0x3c>
    {
        return true;
 80125e4:	2301      	movs	r3, #1
 80125e6:	e000      	b.n	80125ea <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80125e8:	2300      	movs	r3, #0
    }
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3710      	adds	r7, #16
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
	...

080125f4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	4603      	mov	r3, r0
 80125fc:	6039      	str	r1, [r7, #0]
 80125fe:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012600:	79fb      	ldrb	r3, [r7, #7]
 8012602:	3b01      	subs	r3, #1
 8012604:	2b03      	cmp	r3, #3
 8012606:	d81f      	bhi.n	8012648 <UpdateFCntDown+0x54>
 8012608:	a201      	add	r2, pc, #4	; (adr r2, 8012610 <UpdateFCntDown+0x1c>)
 801260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801260e:	bf00      	nop
 8012610:	08012621 	.word	0x08012621
 8012614:	0801262b 	.word	0x0801262b
 8012618:	08012635 	.word	0x08012635
 801261c:	0801263f 	.word	0x0801263f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012620:	4b0c      	ldr	r3, [pc, #48]	; (8012654 <UpdateFCntDown+0x60>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	611a      	str	r2, [r3, #16]
            break;
 8012628:	e00f      	b.n	801264a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801262a:	4b0a      	ldr	r3, [pc, #40]	; (8012654 <UpdateFCntDown+0x60>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	683a      	ldr	r2, [r7, #0]
 8012630:	615a      	str	r2, [r3, #20]
            break;
 8012632:	e00a      	b.n	801264a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012634:	4b07      	ldr	r3, [pc, #28]	; (8012654 <UpdateFCntDown+0x60>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	683a      	ldr	r2, [r7, #0]
 801263a:	619a      	str	r2, [r3, #24]
            break;
 801263c:	e005      	b.n	801264a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801263e:	4b05      	ldr	r3, [pc, #20]	; (8012654 <UpdateFCntDown+0x60>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	683a      	ldr	r2, [r7, #0]
 8012644:	61da      	str	r2, [r3, #28]
            break;
 8012646:	e000      	b.n	801264a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012648:	bf00      	nop
    }
}
 801264a:	bf00      	nop
 801264c:	370c      	adds	r7, #12
 801264e:	46bd      	mov	sp, r7
 8012650:	bc80      	pop	{r7}
 8012652:	4770      	bx	lr
 8012654:	20001ad8 	.word	0x20001ad8

08012658 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801265e:	4b18      	ldr	r3, [pc, #96]	; (80126c0 <ResetFCnts+0x68>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2200      	movs	r2, #0
 8012664:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012666:	4b16      	ldr	r3, [pc, #88]	; (80126c0 <ResetFCnts+0x68>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f04f 32ff 	mov.w	r2, #4294967295
 801266e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012670:	4b13      	ldr	r3, [pc, #76]	; (80126c0 <ResetFCnts+0x68>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f04f 32ff 	mov.w	r2, #4294967295
 8012678:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801267a:	4b11      	ldr	r3, [pc, #68]	; (80126c0 <ResetFCnts+0x68>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f04f 32ff 	mov.w	r2, #4294967295
 8012682:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012684:	4b0e      	ldr	r3, [pc, #56]	; (80126c0 <ResetFCnts+0x68>)
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	4b0d      	ldr	r3, [pc, #52]	; (80126c0 <ResetFCnts+0x68>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	6992      	ldr	r2, [r2, #24]
 801268e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012690:	2300      	movs	r3, #0
 8012692:	607b      	str	r3, [r7, #4]
 8012694:	e00b      	b.n	80126ae <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8012696:	4b0a      	ldr	r3, [pc, #40]	; (80126c0 <ResetFCnts+0x68>)
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	3306      	adds	r3, #6
 801269e:	009b      	lsls	r3, r3, #2
 80126a0:	4413      	add	r3, r2
 80126a2:	f04f 32ff 	mov.w	r2, #4294967295
 80126a6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	3301      	adds	r3, #1
 80126ac:	607b      	str	r3, [r7, #4]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	ddf0      	ble.n	8012696 <ResetFCnts+0x3e>
    }
}
 80126b4:	bf00      	nop
 80126b6:	bf00      	nop
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bc80      	pop	{r7}
 80126be:	4770      	bx	lr
 80126c0:	20001ad8 	.word	0x20001ad8

080126c4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d101      	bne.n	80126d6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80126d2:	2309      	movs	r3, #9
 80126d4:	e01c      	b.n	8012710 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80126d6:	4a10      	ldr	r2, [pc, #64]	; (8012718 <LoRaMacCryptoInit+0x54>)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80126dc:	4b0e      	ldr	r3, [pc, #56]	; (8012718 <LoRaMacCryptoInit+0x54>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2228      	movs	r2, #40	; 0x28
 80126e2:	2100      	movs	r1, #0
 80126e4:	4618      	mov	r0, r3
 80126e6:	f003 fa1d 	bl	8015b24 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80126ea:	4b0b      	ldr	r3, [pc, #44]	; (8012718 <LoRaMacCryptoInit+0x54>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2201      	movs	r2, #1
 80126f0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80126f2:	4b09      	ldr	r3, [pc, #36]	; (8012718 <LoRaMacCryptoInit+0x54>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2201      	movs	r2, #1
 80126f8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80126fa:	4b07      	ldr	r3, [pc, #28]	; (8012718 <LoRaMacCryptoInit+0x54>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	2201      	movs	r2, #1
 8012700:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012702:	4b05      	ldr	r3, [pc, #20]	; (8012718 <LoRaMacCryptoInit+0x54>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2200      	movs	r2, #0
 8012708:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801270a:	f7ff ffa5 	bl	8012658 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20001ad8 	.word	0x20001ad8

0801271c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012724:	4b04      	ldr	r3, [pc, #16]	; (8012738 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801272c:	2300      	movs	r3, #0
}
 801272e:	4618      	mov	r0, r3
 8012730:	370c      	adds	r7, #12
 8012732:	46bd      	mov	sp, r7
 8012734:	bc80      	pop	{r7}
 8012736:	4770      	bx	lr
 8012738:	20001ad8 	.word	0x20001ad8

0801273c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801273c:	b480      	push	{r7}
 801273e:	b083      	sub	sp, #12
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d101      	bne.n	801274e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801274a:	230a      	movs	r3, #10
 801274c:	e006      	b.n	801275c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801274e:	4b06      	ldr	r3, [pc, #24]	; (8012768 <LoRaMacCryptoGetFCntUp+0x2c>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	1c5a      	adds	r2, r3, #1
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	bc80      	pop	{r7}
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	20001ad8 	.word	0x20001ad8

0801276c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012770:	b08a      	sub	sp, #40	; 0x28
 8012772:	af00      	add	r7, sp, #0
 8012774:	613a      	str	r2, [r7, #16]
 8012776:	60fb      	str	r3, [r7, #12]
 8012778:	4603      	mov	r3, r0
 801277a:	75fb      	strb	r3, [r7, #23]
 801277c:	460b      	mov	r3, r1
 801277e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8012780:	2300      	movs	r3, #0
 8012782:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012788:	2313      	movs	r3, #19
 801278a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d101      	bne.n	8012798 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012794:	230a      	movs	r3, #10
 8012796:	e057      	b.n	8012848 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012798:	f107 021c 	add.w	r2, r7, #28
 801279c:	7dfb      	ldrb	r3, [r7, #23]
 801279e:	4611      	mov	r1, r2
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7ff feb5 	bl	8012510 <GetLastFcntDown>
 80127a6:	4603      	mov	r3, r0
 80127a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80127ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80127b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127b8:	e046      	b.n	8012848 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c0:	d103      	bne.n	80127ca <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	601a      	str	r2, [r3, #0]
 80127c8:	e01e      	b.n	8012808 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	693a      	ldr	r2, [r7, #16]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	dd05      	ble.n	80127e6 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80127da:	69fa      	ldr	r2, [r7, #28]
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	441a      	add	r2, r3
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	601a      	str	r2, [r3, #0]
 80127e4:	e010      	b.n	8012808 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 80127e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d104      	bne.n	80127f6 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80127ec:	69fa      	ldr	r2, [r7, #28]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80127f2:	2307      	movs	r3, #7
 80127f4:	e028      	b.n	8012848 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	0c1b      	lsrs	r3, r3, #16
 80127fa:	041b      	lsls	r3, r3, #16
 80127fc:	693a      	ldr	r2, [r7, #16]
 80127fe:	4413      	add	r3, r2
 8012800:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012808:	4b12      	ldr	r3, [pc, #72]	; (8012854 <LoRaMacCryptoGetFCntDown+0xe8>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	789b      	ldrb	r3, [r3, #2]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d119      	bne.n	8012846 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2200      	movs	r2, #0
 8012818:	603b      	str	r3, [r7, #0]
 801281a:	607a      	str	r2, [r7, #4]
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	2200      	movs	r2, #0
 8012820:	469a      	mov	sl, r3
 8012822:	4693      	mov	fp, r2
 8012824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012828:	4611      	mov	r1, r2
 801282a:	ebb1 040a 	subs.w	r4, r1, sl
 801282e:	eb63 050b 	sbc.w	r5, r3, fp
 8012832:	8abb      	ldrh	r3, [r7, #20]
 8012834:	2200      	movs	r2, #0
 8012836:	4698      	mov	r8, r3
 8012838:	4691      	mov	r9, r2
 801283a:	4544      	cmp	r4, r8
 801283c:	eb75 0309 	sbcs.w	r3, r5, r9
 8012840:	db01      	blt.n	8012846 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012842:	2308      	movs	r3, #8
 8012844:	e000      	b.n	8012848 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012846:	2300      	movs	r3, #0
}
 8012848:	4618      	mov	r0, r3
 801284a:	3728      	adds	r7, #40	; 0x28
 801284c:	46bd      	mov	sp, r7
 801284e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012852:	bf00      	nop
 8012854:	20001ad8 	.word	0x20001ad8

08012858 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012858:	b480      	push	{r7}
 801285a:	b085      	sub	sp, #20
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012866:	230a      	movs	r3, #10
 8012868:	e017      	b.n	801289a <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801286a:	2300      	movs	r3, #0
 801286c:	60fb      	str	r3, [r7, #12]
 801286e:	e010      	b.n	8012892 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8012870:	4b0c      	ldr	r3, [pc, #48]	; (80128a4 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8012872:	6819      	ldr	r1, [r3, #0]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	222c      	movs	r2, #44	; 0x2c
 8012878:	fb02 f303 	mul.w	r3, r2, r3
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	4413      	add	r3, r2
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	3206      	adds	r2, #6
 8012884:	0092      	lsls	r2, r2, #2
 8012886:	440a      	add	r2, r1
 8012888:	3204      	adds	r2, #4
 801288a:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	3301      	adds	r3, #1
 8012890:	60fb      	str	r3, [r7, #12]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2b00      	cmp	r3, #0
 8012896:	ddeb      	ble.n	8012870 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012898:	2300      	movs	r3, #0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	bc80      	pop	{r7}
 80128a2:	4770      	bx	lr
 80128a4:	20001ad8 	.word	0x20001ad8

080128a8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	6039      	str	r1, [r7, #0]
 80128b2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80128b4:	79fb      	ldrb	r3, [r7, #7]
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7f8 fbf5 	bl	800b0a8 <SecureElementSetKey>
 80128be:	4603      	mov	r3, r0
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d001      	beq.n	80128c8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128c4:	230f      	movs	r3, #15
 80128c6:	e018      	b.n	80128fa <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80128c8:	79fb      	ldrb	r3, [r7, #7]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d114      	bne.n	80128f8 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80128ce:	4b0d      	ldr	r3, [pc, #52]	; (8012904 <LoRaMacCryptoSetKey+0x5c>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	789b      	ldrb	r3, [r3, #2]
 80128d4:	79fa      	ldrb	r2, [r7, #7]
 80128d6:	4611      	mov	r1, r2
 80128d8:	4618      	mov	r0, r3
 80128da:	f000 fa3f 	bl	8012d5c <LoRaMacCryptoDeriveMcRootKey>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d001      	beq.n	80128e8 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128e4:	230f      	movs	r3, #15
 80128e6:	e008      	b.n	80128fa <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80128e8:	2004      	movs	r0, #4
 80128ea:	f000 fa62 	bl	8012db2 <LoRaMacCryptoDeriveMcKEKey>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128f4:	230f      	movs	r3, #15
 80128f6:	e000      	b.n	80128fa <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80128f8:	2300      	movs	r3, #0
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3708      	adds	r7, #8
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	20001ad8 	.word	0x20001ad8

08012908 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b086      	sub	sp, #24
 801290c:	af02      	add	r7, sp, #8
 801290e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d101      	bne.n	801291a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012916:	230a      	movs	r3, #10
 8012918:	e033      	b.n	8012982 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801291a:	2301      	movs	r3, #1
 801291c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8012922:	f107 0308 	add.w	r3, r7, #8
 8012926:	4618      	mov	r0, r3
 8012928:	f7f8 fd8e 	bl	800b448 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 801292c:	68ba      	ldr	r2, [r7, #8]
 801292e:	4b17      	ldr	r3, [pc, #92]	; (801298c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	b292      	uxth	r2, r2
 8012934:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8012936:	4b15      	ldr	r3, [pc, #84]	; (801298c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	889a      	ldrh	r2, [r3, #4]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 fc18 	bl	8013176 <LoRaMacSerializerJoinRequest>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d001      	beq.n	8012950 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801294c:	2311      	movs	r3, #17
 801294e:	e018      	b.n	8012982 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6819      	ldr	r1, [r3, #0]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	3318      	adds	r3, #24
 8012958:	7bfa      	ldrb	r2, [r7, #15]
 801295a:	9300      	str	r3, [sp, #0]
 801295c:	4613      	mov	r3, r2
 801295e:	2213      	movs	r2, #19
 8012960:	2000      	movs	r0, #0
 8012962:	f7f8 fbff 	bl	800b164 <SecureElementComputeAesCmac>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d001      	beq.n	8012970 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801296c:	230f      	movs	r3, #15
 801296e:	e008      	b.n	8012982 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f000 fc00 	bl	8013176 <LoRaMacSerializerJoinRequest>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d001      	beq.n	8012980 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801297c:	2311      	movs	r3, #17
 801297e:	e000      	b.n	8012982 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012980:	2300      	movs	r3, #0
}
 8012982:	4618      	mov	r0, r3
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	bf00      	nop
 801298c:	20001ad8 	.word	0x20001ad8

08012990 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8012990:	b590      	push	{r4, r7, lr}
 8012992:	b097      	sub	sp, #92	; 0x5c
 8012994:	af04      	add	r7, sp, #16
 8012996:	4603      	mov	r3, r0
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]
 801299c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d002      	beq.n	80129aa <LoRaMacCryptoHandleJoinAccept+0x1a>
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d101      	bne.n	80129ae <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80129aa:	230a      	movs	r3, #10
 80129ac:	e0bd      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80129ae:	2313      	movs	r3, #19
 80129b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80129b4:	2300      	movs	r3, #0
 80129b6:	61bb      	str	r3, [r7, #24]
 80129b8:	f107 031c 	add.w	r3, r7, #28
 80129bc:	221d      	movs	r2, #29
 80129be:	2100      	movs	r1, #0
 80129c0:	4618      	mov	r0, r3
 80129c2:	f007 fe65 	bl	801a690 <memset>
    uint8_t versionMinor         = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80129ca:	4b5a      	ldr	r3, [pc, #360]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	889b      	ldrh	r3, [r3, #4]
 80129d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681c      	ldr	r4, [r3, #0]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	791b      	ldrb	r3, [r3, #4]
 80129dc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80129e0:	7bf8      	ldrb	r0, [r7, #15]
 80129e2:	f107 0217 	add.w	r2, r7, #23
 80129e6:	9202      	str	r2, [sp, #8]
 80129e8:	f107 0218 	add.w	r2, r7, #24
 80129ec:	9201      	str	r2, [sp, #4]
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	4623      	mov	r3, r4
 80129f2:	460a      	mov	r2, r1
 80129f4:	68b9      	ldr	r1, [r7, #8]
 80129f6:	f7f8 fca9 	bl	800b34c <SecureElementProcessJoinAccept>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012a00:	230f      	movs	r3, #15
 8012a02:	e092      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6818      	ldr	r0, [r3, #0]
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	791b      	ldrb	r3, [r3, #4]
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	f107 0318 	add.w	r3, r7, #24
 8012a12:	4619      	mov	r1, r3
 8012a14:	f003 f84b 	bl	8015aae <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 f9ed 	bl	8012df8 <LoRaMacParserJoinAccept>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d001      	beq.n	8012a28 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012a24:	2310      	movs	r3, #16
 8012a26:	e080      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	799b      	ldrb	r3, [r3, #6]
 8012a2c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	79db      	ldrb	r3, [r3, #7]
 8012a32:	021b      	lsls	r3, r3, #8
 8012a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a36:	4313      	orrs	r3, r2
 8012a38:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	7a1b      	ldrb	r3, [r3, #8]
 8012a3e:	041b      	lsls	r3, r3, #16
 8012a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a42:	4313      	orrs	r3, r2
 8012a44:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8012a46:	4b3b      	ldr	r3, [pc, #236]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	689b      	ldr	r3, [r3, #8]
 8012a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d010      	beq.n	8012a74 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8012a52:	4b38      	ldr	r3, [pc, #224]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a58:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8012a5a:	7dfb      	ldrb	r3, [r7, #23]
 8012a5c:	2100      	movs	r1, #0
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f000 f97c 	bl	8012d5c <LoRaMacCryptoDeriveMcRootKey>
 8012a64:	4603      	mov	r3, r0
 8012a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012a6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d005      	beq.n	8012a7e <LoRaMacCryptoHandleJoinAccept+0xee>
 8012a72:	e001      	b.n	8012a78 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012a74:	2303      	movs	r3, #3
 8012a76:	e058      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8012a78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a7c:	e055      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8012a7e:	2004      	movs	r0, #4
 8012a80:	f000 f997 	bl	8012db2 <LoRaMacCryptoDeriveMcKEKey>
 8012a84:	4603      	mov	r3, r0
 8012a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012a8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d002      	beq.n	8012a98 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8012a92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012a96:	e048      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	7a5b      	ldrb	r3, [r3, #9]
 8012a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	7a9b      	ldrb	r3, [r3, #10]
 8012aa2:	021b      	lsls	r3, r3, #8
 8012aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aa6:	4313      	orrs	r3, r2
 8012aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	7adb      	ldrb	r3, [r3, #11]
 8012aae:	041b      	lsls	r3, r3, #16
 8012ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8012ab6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012abe:	2003      	movs	r0, #3
 8012ac0:	f7ff fcd6 	bl	8012470 <DeriveSessionKey10x>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012aca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8012ad2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012ad6:	e028      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8012ad8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012ae0:	2002      	movs	r0, #2
 8012ae2:	f7ff fcc5 	bl	8012470 <DeriveSessionKey10x>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d002      	beq.n	8012afa <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8012af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012af8:	e017      	b.n	8012b2a <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8012afa:	4b0e      	ldr	r3, [pc, #56]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	7dfa      	ldrb	r2, [r7, #23]
 8012b00:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8012b02:	4b0c      	ldr	r3, [pc, #48]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2200      	movs	r2, #0
 8012b08:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012b0a:	4b0a      	ldr	r3, [pc, #40]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b12:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012b14:	4b07      	ldr	r3, [pc, #28]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f04f 32ff 	mov.w	r2, #4294967295
 8012b1c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012b1e:	4b05      	ldr	r3, [pc, #20]	; (8012b34 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f04f 32ff 	mov.w	r2, #4294967295
 8012b26:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	374c      	adds	r7, #76	; 0x4c
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd90      	pop	{r4, r7, pc}
 8012b32:	bf00      	nop
 8012b34:	20001ad8 	.word	0x20001ad8

08012b38 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b08b      	sub	sp, #44	; 0x2c
 8012b3c:	af04      	add	r7, sp, #16
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	607b      	str	r3, [r7, #4]
 8012b42:	460b      	mov	r3, r1
 8012b44:	72fb      	strb	r3, [r7, #11]
 8012b46:	4613      	mov	r3, r2
 8012b48:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012b4a:	2313      	movs	r3, #19
 8012b4c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012b4e:	2303      	movs	r3, #3
 8012b50:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012b58:	230a      	movs	r3, #10
 8012b5a:	e05f      	b.n	8012c1c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8012b5c:	4b31      	ldr	r3, [pc, #196]	; (8012c24 <LoRaMacCryptoSecureMessage+0xec>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	68fa      	ldr	r2, [r7, #12]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d201      	bcs.n	8012b6c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012b68:	2306      	movs	r3, #6
 8012b6a:	e057      	b.n	8012c1c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d101      	bne.n	8012b7a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012b76:	2302      	movs	r3, #2
 8012b78:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8012b7a:	4b2a      	ldr	r3, [pc, #168]	; (8012c24 <LoRaMacCryptoSecureMessage+0xec>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	68db      	ldr	r3, [r3, #12]
 8012b80:	68fa      	ldr	r2, [r7, #12]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d916      	bls.n	8012bb4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b90:	b219      	sxth	r1, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	689c      	ldr	r4, [r3, #8]
 8012b96:	7dfa      	ldrb	r2, [r7, #23]
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	9301      	str	r3, [sp, #4]
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	9300      	str	r3, [sp, #0]
 8012ba0:	4623      	mov	r3, r4
 8012ba2:	f7ff fa71 	bl	8012088 <PayloadEncrypt>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012baa:	7dbb      	ldrb	r3, [r7, #22]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d001      	beq.n	8012bb4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8012bb0:	7dbb      	ldrb	r3, [r7, #22]
 8012bb2:	e033      	b.n	8012c1c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 fb60 	bl	801327a <LoRaMacSerializerData>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d001      	beq.n	8012bc4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012bc0:	2311      	movs	r3, #17
 8012bc2:	e02b      	b.n	8012c1c <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012bc4:	2302      	movs	r3, #2
 8012bc6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6818      	ldr	r0, [r3, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	791b      	ldrb	r3, [r3, #4]
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	3b04      	subs	r3, #4
 8012bd4:	b299      	uxth	r1, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	689b      	ldr	r3, [r3, #8]
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	322c      	adds	r2, #44	; 0x2c
 8012bde:	7dfc      	ldrb	r4, [r7, #23]
 8012be0:	9203      	str	r2, [sp, #12]
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	9202      	str	r2, [sp, #8]
 8012be6:	9301      	str	r3, [sp, #4]
 8012be8:	2300      	movs	r3, #0
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	2300      	movs	r3, #0
 8012bee:	4622      	mov	r2, r4
 8012bf0:	f7ff fb4b 	bl	801228a <ComputeCmacB0>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012bf8:	7dbb      	ldrb	r3, [r7, #22]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d001      	beq.n	8012c02 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8012bfe:	7dbb      	ldrb	r3, [r7, #22]
 8012c00:	e00c      	b.n	8012c1c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 fb39 	bl	801327a <LoRaMacSerializerData>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d001      	beq.n	8012c12 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012c0e:	2311      	movs	r3, #17
 8012c10:	e004      	b.n	8012c1c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8012c12:	4b04      	ldr	r3, [pc, #16]	; (8012c24 <LoRaMacCryptoSecureMessage+0xec>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8012c1a:	2300      	movs	r3, #0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	371c      	adds	r7, #28
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd90      	pop	{r4, r7, pc}
 8012c24:	20001ad8 	.word	0x20001ad8

08012c28 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8012c28:	b590      	push	{r4, r7, lr}
 8012c2a:	b08b      	sub	sp, #44	; 0x2c
 8012c2c:	af04      	add	r7, sp, #16
 8012c2e:	60b9      	str	r1, [r7, #8]
 8012c30:	607b      	str	r3, [r7, #4]
 8012c32:	4603      	mov	r3, r0
 8012c34:	73fb      	strb	r3, [r7, #15]
 8012c36:	4613      	mov	r3, r2
 8012c38:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8012c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d101      	bne.n	8012c44 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c40:	230a      	movs	r3, #10
 8012c42:	e084      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8012c44:	7bbb      	ldrb	r3, [r7, #14]
 8012c46:	6879      	ldr	r1, [r7, #4]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fcaf 	bl	80125ac <CheckFCntDown>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	f083 0301 	eor.w	r3, r3, #1
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d001      	beq.n	8012c5e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012c5a:	2306      	movs	r3, #6
 8012c5c:	e077      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012c5e:	2313      	movs	r3, #19
 8012c60:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012c62:	2303      	movs	r3, #3
 8012c64:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8012c66:	2302      	movs	r3, #2
 8012c68:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c6c:	f000 f98f 	bl	8012f8e <LoRaMacParserData>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d001      	beq.n	8012c7a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012c76:	2310      	movs	r3, #16
 8012c78:	e069      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012c7a:	f107 0210 	add.w	r2, r7, #16
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
 8012c80:	4611      	mov	r1, r2
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7ff fbce 	bl	8012424 <GetKeyAddrItem>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012c8c:	7d7b      	ldrb	r3, [r7, #21]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d001      	beq.n	8012c96 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8012c92:	7d7b      	ldrb	r3, [r7, #21]
 8012c94:	e05b      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	785b      	ldrb	r3, [r3, #1]
 8012c9a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	789b      	ldrb	r3, [r3, #2]
 8012ca0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8012ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	68ba      	ldr	r2, [r7, #8]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d001      	beq.n	8012cb0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012cac:	2302      	movs	r3, #2
 8012cae:	e04e      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb2:	7b1b      	ldrb	r3, [r3, #12]
 8012cb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	bf14      	ite	ne
 8012cbe:	2301      	movne	r3, #1
 8012cc0:	2300      	moveq	r3, #0
 8012cc2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012cc4:	4b24      	ldr	r3, [pc, #144]	; (8012d58 <LoRaMacCryptoUnsecureMessage+0x130>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	789b      	ldrb	r3, [r3, #2]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d101      	bne.n	8012cd2 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8012cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd4:	6818      	ldr	r0, [r3, #0]
 8012cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd8:	791b      	ldrb	r3, [r3, #4]
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	3b04      	subs	r3, #4
 8012cde:	b299      	uxth	r1, r3
 8012ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce4:	7dbc      	ldrb	r4, [r7, #22]
 8012ce6:	7d3a      	ldrb	r2, [r7, #20]
 8012ce8:	9303      	str	r3, [sp, #12]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	9302      	str	r3, [sp, #8]
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	9301      	str	r3, [sp, #4]
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	4623      	mov	r3, r4
 8012cf8:	f7ff fb05 	bl	8012306 <VerifyCmacB0>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012d00:	7d7b      	ldrb	r3, [r7, #21]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d001      	beq.n	8012d0a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8012d06:	7d7b      	ldrb	r3, [r7, #21]
 8012d08:	e021      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d101      	bne.n	8012d18 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012d14:	2302      	movs	r3, #2
 8012d16:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8012d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d22:	b219      	sxth	r1, r3
 8012d24:	7dfa      	ldrb	r2, [r7, #23]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	9301      	str	r3, [sp, #4]
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	9300      	str	r3, [sp, #0]
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	f7ff f9aa 	bl	8012088 <PayloadEncrypt>
 8012d34:	4603      	mov	r3, r0
 8012d36:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012d38:	7d7b      	ldrb	r3, [r7, #21]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d001      	beq.n	8012d42 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8012d3e:	7d7b      	ldrb	r3, [r7, #21]
 8012d40:	e005      	b.n	8012d4e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8012d42:	7bbb      	ldrb	r3, [r7, #14]
 8012d44:	6879      	ldr	r1, [r7, #4]
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7ff fc54 	bl	80125f4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012d4c:	2300      	movs	r3, #0
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	371c      	adds	r7, #28
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd90      	pop	{r4, r7, pc}
 8012d56:	bf00      	nop
 8012d58:	20001ad8 	.word	0x20001ad8

08012d5c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	460a      	mov	r2, r1
 8012d66:	71fb      	strb	r3, [r7, #7]
 8012d68:	4613      	mov	r3, r2
 8012d6a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8012d6c:	79bb      	ldrb	r3, [r7, #6]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d001      	beq.n	8012d76 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012d72:	230b      	movs	r3, #11
 8012d74:	e019      	b.n	8012daa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8012d76:	2300      	movs	r3, #0
 8012d78:	60bb      	str	r3, [r7, #8]
 8012d7a:	f107 030c 	add.w	r3, r7, #12
 8012d7e:	2200      	movs	r2, #0
 8012d80:	601a      	str	r2, [r3, #0]
 8012d82:	605a      	str	r2, [r3, #4]
 8012d84:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8012d86:	79fb      	ldrb	r3, [r7, #7]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d101      	bne.n	8012d90 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8012d8c:	2320      	movs	r3, #32
 8012d8e:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8012d90:	79b9      	ldrb	r1, [r7, #6]
 8012d92:	f107 0308 	add.w	r3, r7, #8
 8012d96:	2204      	movs	r2, #4
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7f8 fa97 	bl	800b2cc <SecureElementDeriveAndStoreKey>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d001      	beq.n	8012da8 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012da4:	230f      	movs	r3, #15
 8012da6:	e000      	b.n	8012daa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012da8:	2300      	movs	r3, #0
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}

08012db2 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8012db2:	b580      	push	{r7, lr}
 8012db4:	b086      	sub	sp, #24
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	4603      	mov	r3, r0
 8012dba:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8012dbc:	79fb      	ldrb	r3, [r7, #7]
 8012dbe:	2b04      	cmp	r3, #4
 8012dc0:	d001      	beq.n	8012dc6 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012dc2:	230b      	movs	r3, #11
 8012dc4:	e014      	b.n	8012df0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	60bb      	str	r3, [r7, #8]
 8012dca:	f107 030c 	add.w	r3, r7, #12
 8012dce:	2200      	movs	r2, #0
 8012dd0:	601a      	str	r2, [r3, #0]
 8012dd2:	605a      	str	r2, [r3, #4]
 8012dd4:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8012dd6:	79f9      	ldrb	r1, [r7, #7]
 8012dd8:	f107 0308 	add.w	r3, r7, #8
 8012ddc:	227f      	movs	r2, #127	; 0x7f
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7f8 fa74 	bl	800b2cc <SecureElementDeriveAndStoreKey>
 8012de4:	4603      	mov	r3, r0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d001      	beq.n	8012dee <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012dea:	230f      	movs	r3, #15
 8012dec:	e000      	b.n	8012df0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012dee:	2300      	movs	r3, #0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d003      	beq.n	8012e0e <LoRaMacParserJoinAccept+0x16>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d101      	bne.n	8012e12 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012e0e:	2302      	movs	r3, #2
 8012e10:	e0b9      	b.n	8012f86 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8012e12:	2300      	movs	r3, #0
 8012e14:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	89fb      	ldrh	r3, [r7, #14]
 8012e1c:	1c59      	adds	r1, r3, #1
 8012e1e:	81f9      	strh	r1, [r7, #14]
 8012e20:	4413      	add	r3, r2
 8012e22:	781a      	ldrb	r2, [r3, #0]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	1d98      	adds	r0, r3, #6
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	89fb      	ldrh	r3, [r7, #14]
 8012e32:	4413      	add	r3, r2
 8012e34:	2203      	movs	r2, #3
 8012e36:	4619      	mov	r1, r3
 8012e38:	f002 fe39 	bl	8015aae <memcpy1>
    bufItr = bufItr + 3;
 8012e3c:	89fb      	ldrh	r3, [r7, #14]
 8012e3e:	3303      	adds	r3, #3
 8012e40:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f103 0009 	add.w	r0, r3, #9
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681a      	ldr	r2, [r3, #0]
 8012e4c:	89fb      	ldrh	r3, [r7, #14]
 8012e4e:	4413      	add	r3, r2
 8012e50:	2203      	movs	r2, #3
 8012e52:	4619      	mov	r1, r3
 8012e54:	f002 fe2b 	bl	8015aae <memcpy1>
    bufItr = bufItr + 3;
 8012e58:	89fb      	ldrh	r3, [r7, #14]
 8012e5a:	3303      	adds	r3, #3
 8012e5c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	89fb      	ldrh	r3, [r7, #14]
 8012e64:	1c59      	adds	r1, r3, #1
 8012e66:	81f9      	strh	r1, [r7, #14]
 8012e68:	4413      	add	r3, r2
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	89fb      	ldrh	r3, [r7, #14]
 8012e78:	1c59      	adds	r1, r3, #1
 8012e7a:	81f9      	strh	r1, [r7, #14]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	021a      	lsls	r2, r3, #8
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	431a      	orrs	r2, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	89fb      	ldrh	r3, [r7, #14]
 8012e92:	1c59      	adds	r1, r3, #1
 8012e94:	81f9      	strh	r1, [r7, #14]
 8012e96:	4413      	add	r3, r2
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	041a      	lsls	r2, r3, #16
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	431a      	orrs	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681a      	ldr	r2, [r3, #0]
 8012eaa:	89fb      	ldrh	r3, [r7, #14]
 8012eac:	1c59      	adds	r1, r3, #1
 8012eae:	81f9      	strh	r1, [r7, #14]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	061a      	lsls	r2, r3, #24
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	431a      	orrs	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	1c59      	adds	r1, r3, #1
 8012ec8:	81f9      	strh	r1, [r7, #14]
 8012eca:	4413      	add	r3, r2
 8012ecc:	781a      	ldrb	r2, [r3, #0]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	89fb      	ldrh	r3, [r7, #14]
 8012ed8:	1c59      	adds	r1, r3, #1
 8012eda:	81f9      	strh	r1, [r7, #14]
 8012edc:	4413      	add	r3, r2
 8012ede:	781a      	ldrb	r2, [r3, #0]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	791b      	ldrb	r3, [r3, #4]
 8012ee8:	1f1a      	subs	r2, r3, #4
 8012eea:	89fb      	ldrh	r3, [r7, #14]
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	2b10      	cmp	r3, #16
 8012ef0:	d10e      	bne.n	8012f10 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f103 0012 	add.w	r0, r3, #18
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	89fb      	ldrh	r3, [r7, #14]
 8012efe:	4413      	add	r3, r2
 8012f00:	2210      	movs	r2, #16
 8012f02:	4619      	mov	r1, r3
 8012f04:	f002 fdd3 	bl	8015aae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8012f08:	89fb      	ldrh	r3, [r7, #14]
 8012f0a:	3310      	adds	r3, #16
 8012f0c:	81fb      	strh	r3, [r7, #14]
 8012f0e:	e008      	b.n	8012f22 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	791b      	ldrb	r3, [r3, #4]
 8012f14:	1f1a      	subs	r2, r3, #4
 8012f16:	89fb      	ldrh	r3, [r7, #14]
 8012f18:	1ad3      	subs	r3, r2, r3
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	dd01      	ble.n	8012f22 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e031      	b.n	8012f86 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	89fb      	ldrh	r3, [r7, #14]
 8012f28:	1c59      	adds	r1, r3, #1
 8012f2a:	81f9      	strh	r1, [r7, #14]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	461a      	mov	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	89fb      	ldrh	r3, [r7, #14]
 8012f3c:	1c59      	adds	r1, r3, #1
 8012f3e:	81f9      	strh	r1, [r7, #14]
 8012f40:	4413      	add	r3, r2
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	021a      	lsls	r2, r3, #8
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4a:	431a      	orrs	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	89fb      	ldrh	r3, [r7, #14]
 8012f56:	1c59      	adds	r1, r3, #1
 8012f58:	81f9      	strh	r1, [r7, #14]
 8012f5a:	4413      	add	r3, r2
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	041a      	lsls	r2, r3, #16
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f64:	431a      	orrs	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	89fb      	ldrh	r3, [r7, #14]
 8012f70:	1c59      	adds	r1, r3, #1
 8012f72:	81f9      	strh	r1, [r7, #14]
 8012f74:	4413      	add	r3, r2
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	061a      	lsls	r2, r3, #24
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f7e:	431a      	orrs	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3710      	adds	r7, #16
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}

08012f8e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b084      	sub	sp, #16
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d003      	beq.n	8012fa4 <LoRaMacParserData+0x16>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d101      	bne.n	8012fa8 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	e0e2      	b.n	801316e <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	89fb      	ldrh	r3, [r7, #14]
 8012fb2:	1c59      	adds	r1, r3, #1
 8012fb4:	81f9      	strh	r1, [r7, #14]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	781a      	ldrb	r2, [r3, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681a      	ldr	r2, [r3, #0]
 8012fc2:	89fb      	ldrh	r3, [r7, #14]
 8012fc4:	1c59      	adds	r1, r3, #1
 8012fc6:	81f9      	strh	r1, [r7, #14]
 8012fc8:	4413      	add	r3, r2
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	461a      	mov	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	89fb      	ldrh	r3, [r7, #14]
 8012fd8:	1c59      	adds	r1, r3, #1
 8012fda:	81f9      	strh	r1, [r7, #14]
 8012fdc:	4413      	add	r3, r2
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	021a      	lsls	r2, r3, #8
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	689b      	ldr	r3, [r3, #8]
 8012fe6:	431a      	orrs	r2, r3
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	89fb      	ldrh	r3, [r7, #14]
 8012ff2:	1c59      	adds	r1, r3, #1
 8012ff4:	81f9      	strh	r1, [r7, #14]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	041a      	lsls	r2, r3, #16
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	431a      	orrs	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	89fb      	ldrh	r3, [r7, #14]
 801300c:	1c59      	adds	r1, r3, #1
 801300e:	81f9      	strh	r1, [r7, #14]
 8013010:	4413      	add	r3, r2
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	061a      	lsls	r2, r3, #24
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	689b      	ldr	r3, [r3, #8]
 801301a:	431a      	orrs	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681a      	ldr	r2, [r3, #0]
 8013024:	89fb      	ldrh	r3, [r7, #14]
 8013026:	1c59      	adds	r1, r3, #1
 8013028:	81f9      	strh	r1, [r7, #14]
 801302a:	4413      	add	r3, r2
 801302c:	781a      	ldrb	r2, [r3, #0]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	89fb      	ldrh	r3, [r7, #14]
 8013038:	1c59      	adds	r1, r3, #1
 801303a:	81f9      	strh	r1, [r7, #14]
 801303c:	4413      	add	r3, r2
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	b29a      	uxth	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	89fb      	ldrh	r3, [r7, #14]
 801304c:	1c59      	adds	r1, r3, #1
 801304e:	81f9      	strh	r1, [r7, #14]
 8013050:	4413      	add	r3, r2
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	0219      	lsls	r1, r3, #8
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	89db      	ldrh	r3, [r3, #14]
 801305a:	b21a      	sxth	r2, r3
 801305c:	b20b      	sxth	r3, r1
 801305e:	4313      	orrs	r3, r2
 8013060:	b21b      	sxth	r3, r3
 8013062:	b29a      	uxth	r2, r3
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f103 0010 	add.w	r0, r3, #16
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	89fb      	ldrh	r3, [r7, #14]
 8013074:	18d1      	adds	r1, r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	7b1b      	ldrb	r3, [r3, #12]
 801307a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801307e:	b2db      	uxtb	r3, r3
 8013080:	b29b      	uxth	r3, r3
 8013082:	461a      	mov	r2, r3
 8013084:	f002 fd13 	bl	8015aae <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	7b1b      	ldrb	r3, [r3, #12]
 801308c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013090:	b2db      	uxtb	r3, r3
 8013092:	b29a      	uxth	r2, r3
 8013094:	89fb      	ldrh	r3, [r7, #14]
 8013096:	4413      	add	r3, r2
 8013098:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2200      	movs	r2, #0
 801309e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	791b      	ldrb	r3, [r3, #4]
 80130ae:	461a      	mov	r2, r3
 80130b0:	89fb      	ldrh	r3, [r7, #14]
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	2b04      	cmp	r3, #4
 80130b6:	dd28      	ble.n	801310a <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	89fb      	ldrh	r3, [r7, #14]
 80130be:	1c59      	adds	r1, r3, #1
 80130c0:	81f9      	strh	r1, [r7, #14]
 80130c2:	4413      	add	r3, r2
 80130c4:	781a      	ldrb	r2, [r3, #0]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	791a      	ldrb	r2, [r3, #4]
 80130d0:	89fb      	ldrh	r3, [r7, #14]
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	1ad3      	subs	r3, r2, r3
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	3b04      	subs	r3, #4
 80130da:	b2da      	uxtb	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	89fb      	ldrh	r3, [r7, #14]
 80130ec:	18d1      	adds	r1, r2, r3
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	461a      	mov	r2, r3
 80130f8:	f002 fcd9 	bl	8015aae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013102:	b29a      	uxth	r2, r3
 8013104:	89fb      	ldrh	r3, [r7, #14]
 8013106:	4413      	add	r3, r2
 8013108:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	791b      	ldrb	r3, [r3, #4]
 8013112:	3b04      	subs	r3, #4
 8013114:	4413      	add	r3, r2
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	461a      	mov	r2, r3
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6819      	ldr	r1, [r3, #0]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	791b      	ldrb	r3, [r3, #4]
 801312a:	3b03      	subs	r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	021b      	lsls	r3, r3, #8
 8013132:	431a      	orrs	r2, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6819      	ldr	r1, [r3, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	791b      	ldrb	r3, [r3, #4]
 8013144:	3b02      	subs	r3, #2
 8013146:	440b      	add	r3, r1
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	041b      	lsls	r3, r3, #16
 801314c:	431a      	orrs	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6819      	ldr	r1, [r3, #0]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	791b      	ldrb	r3, [r3, #4]
 801315e:	3b01      	subs	r3, #1
 8013160:	440b      	add	r3, r1
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	061b      	lsls	r3, r3, #24
 8013166:	431a      	orrs	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3710      	adds	r7, #16
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b084      	sub	sp, #16
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d003      	beq.n	801318c <LoRaMacSerializerJoinRequest+0x16>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d101      	bne.n	8013190 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801318c:	2301      	movs	r3, #1
 801318e:	e070      	b.n	8013272 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013190:	2300      	movs	r3, #0
 8013192:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	791b      	ldrb	r3, [r3, #4]
 8013198:	2b16      	cmp	r3, #22
 801319a:	d801      	bhi.n	80131a0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801319c:	2302      	movs	r3, #2
 801319e:	e068      	b.n	8013272 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	89fb      	ldrh	r3, [r7, #14]
 80131a6:	1c59      	adds	r1, r3, #1
 80131a8:	81f9      	strh	r1, [r7, #14]
 80131aa:	4413      	add	r3, r2
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	7952      	ldrb	r2, [r2, #5]
 80131b0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	89fb      	ldrh	r3, [r7, #14]
 80131b8:	18d0      	adds	r0, r2, r3
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	3306      	adds	r3, #6
 80131be:	2208      	movs	r2, #8
 80131c0:	4619      	mov	r1, r3
 80131c2:	f002 fc8f 	bl	8015ae4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80131c6:	89fb      	ldrh	r3, [r7, #14]
 80131c8:	3308      	adds	r3, #8
 80131ca:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	89fb      	ldrh	r3, [r7, #14]
 80131d2:	18d0      	adds	r0, r2, r3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	330e      	adds	r3, #14
 80131d8:	2208      	movs	r2, #8
 80131da:	4619      	mov	r1, r3
 80131dc:	f002 fc82 	bl	8015ae4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80131e0:	89fb      	ldrh	r3, [r7, #14]
 80131e2:	3308      	adds	r3, #8
 80131e4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	8ad9      	ldrh	r1, [r3, #22]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	89fb      	ldrh	r3, [r7, #14]
 80131f0:	1c58      	adds	r0, r3, #1
 80131f2:	81f8      	strh	r0, [r7, #14]
 80131f4:	4413      	add	r3, r2
 80131f6:	b2ca      	uxtb	r2, r1
 80131f8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	8adb      	ldrh	r3, [r3, #22]
 80131fe:	0a1b      	lsrs	r3, r3, #8
 8013200:	b299      	uxth	r1, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	89fb      	ldrh	r3, [r7, #14]
 8013208:	1c58      	adds	r0, r3, #1
 801320a:	81f8      	strh	r0, [r7, #14]
 801320c:	4413      	add	r3, r2
 801320e:	b2ca      	uxtb	r2, r1
 8013210:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6999      	ldr	r1, [r3, #24]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	89fb      	ldrh	r3, [r7, #14]
 801321c:	1c58      	adds	r0, r3, #1
 801321e:	81f8      	strh	r0, [r7, #14]
 8013220:	4413      	add	r3, r2
 8013222:	b2ca      	uxtb	r2, r1
 8013224:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	699b      	ldr	r3, [r3, #24]
 801322a:	0a19      	lsrs	r1, r3, #8
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	89fb      	ldrh	r3, [r7, #14]
 8013232:	1c58      	adds	r0, r3, #1
 8013234:	81f8      	strh	r0, [r7, #14]
 8013236:	4413      	add	r3, r2
 8013238:	b2ca      	uxtb	r2, r1
 801323a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	699b      	ldr	r3, [r3, #24]
 8013240:	0c19      	lsrs	r1, r3, #16
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681a      	ldr	r2, [r3, #0]
 8013246:	89fb      	ldrh	r3, [r7, #14]
 8013248:	1c58      	adds	r0, r3, #1
 801324a:	81f8      	strh	r0, [r7, #14]
 801324c:	4413      	add	r3, r2
 801324e:	b2ca      	uxtb	r2, r1
 8013250:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	699b      	ldr	r3, [r3, #24]
 8013256:	0e19      	lsrs	r1, r3, #24
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	89fb      	ldrh	r3, [r7, #14]
 801325e:	1c58      	adds	r0, r3, #1
 8013260:	81f8      	strh	r0, [r7, #14]
 8013262:	4413      	add	r3, r2
 8013264:	b2ca      	uxtb	r2, r1
 8013266:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013268:	89fb      	ldrh	r3, [r7, #14]
 801326a:	b2da      	uxtb	r2, r3
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013270:	2300      	movs	r3, #0
}
 8013272:	4618      	mov	r0, r3
 8013274:	3710      	adds	r7, #16
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <LoRaMacSerializerData+0x16>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013290:	2301      	movs	r3, #1
 8013292:	e0e5      	b.n	8013460 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013294:	2300      	movs	r3, #0
 8013296:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013298:	2308      	movs	r3, #8
 801329a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	7b1b      	ldrb	r3, [r3, #12]
 80132a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	89bb      	ldrh	r3, [r7, #12]
 80132aa:	4413      	add	r3, r2
 80132ac:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80132b8:	89bb      	ldrh	r3, [r7, #12]
 80132ba:	3301      	adds	r3, #1
 80132bc:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	89bb      	ldrh	r3, [r7, #12]
 80132c8:	4413      	add	r3, r2
 80132ca:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80132cc:	89bb      	ldrh	r3, [r7, #12]
 80132ce:	3304      	adds	r3, #4
 80132d0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	791b      	ldrb	r3, [r3, #4]
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	89ba      	ldrh	r2, [r7, #12]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d901      	bls.n	80132e2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80132de:	2302      	movs	r3, #2
 80132e0:	e0be      	b.n	8013460 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	89fb      	ldrh	r3, [r7, #14]
 80132e8:	1c59      	adds	r1, r3, #1
 80132ea:	81f9      	strh	r1, [r7, #14]
 80132ec:	4413      	add	r3, r2
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	7952      	ldrb	r2, [r2, #5]
 80132f2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6899      	ldr	r1, [r3, #8]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	89fb      	ldrh	r3, [r7, #14]
 80132fe:	1c58      	adds	r0, r3, #1
 8013300:	81f8      	strh	r0, [r7, #14]
 8013302:	4413      	add	r3, r2
 8013304:	b2ca      	uxtb	r2, r1
 8013306:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	689b      	ldr	r3, [r3, #8]
 801330c:	0a19      	lsrs	r1, r3, #8
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	89fb      	ldrh	r3, [r7, #14]
 8013314:	1c58      	adds	r0, r3, #1
 8013316:	81f8      	strh	r0, [r7, #14]
 8013318:	4413      	add	r3, r2
 801331a:	b2ca      	uxtb	r2, r1
 801331c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	689b      	ldr	r3, [r3, #8]
 8013322:	0c19      	lsrs	r1, r3, #16
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681a      	ldr	r2, [r3, #0]
 8013328:	89fb      	ldrh	r3, [r7, #14]
 801332a:	1c58      	adds	r0, r3, #1
 801332c:	81f8      	strh	r0, [r7, #14]
 801332e:	4413      	add	r3, r2
 8013330:	b2ca      	uxtb	r2, r1
 8013332:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	689b      	ldr	r3, [r3, #8]
 8013338:	0e19      	lsrs	r1, r3, #24
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	89fb      	ldrh	r3, [r7, #14]
 8013340:	1c58      	adds	r0, r3, #1
 8013342:	81f8      	strh	r0, [r7, #14]
 8013344:	4413      	add	r3, r2
 8013346:	b2ca      	uxtb	r2, r1
 8013348:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	89fb      	ldrh	r3, [r7, #14]
 8013350:	1c59      	adds	r1, r3, #1
 8013352:	81f9      	strh	r1, [r7, #14]
 8013354:	4413      	add	r3, r2
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	7b12      	ldrb	r2, [r2, #12]
 801335a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	89d9      	ldrh	r1, [r3, #14]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	89fb      	ldrh	r3, [r7, #14]
 8013366:	1c58      	adds	r0, r3, #1
 8013368:	81f8      	strh	r0, [r7, #14]
 801336a:	4413      	add	r3, r2
 801336c:	b2ca      	uxtb	r2, r1
 801336e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	89db      	ldrh	r3, [r3, #14]
 8013374:	0a1b      	lsrs	r3, r3, #8
 8013376:	b299      	uxth	r1, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	89fb      	ldrh	r3, [r7, #14]
 801337e:	1c58      	adds	r0, r3, #1
 8013380:	81f8      	strh	r0, [r7, #14]
 8013382:	4413      	add	r3, r2
 8013384:	b2ca      	uxtb	r2, r1
 8013386:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	89fb      	ldrh	r3, [r7, #14]
 801338e:	18d0      	adds	r0, r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f103 0110 	add.w	r1, r3, #16
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	7b1b      	ldrb	r3, [r3, #12]
 801339a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801339e:	b2db      	uxtb	r3, r3
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	461a      	mov	r2, r3
 80133a4:	f002 fb83 	bl	8015aae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	7b1b      	ldrb	r3, [r3, #12]
 80133ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80133b0:	b2db      	uxtb	r3, r3
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	89fb      	ldrh	r3, [r7, #14]
 80133b6:	4413      	add	r3, r2
 80133b8:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d009      	beq.n	80133d8 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	89fb      	ldrh	r3, [r7, #14]
 80133ca:	1c59      	adds	r1, r3, #1
 80133cc:	81f9      	strh	r1, [r7, #14]
 80133ce:	4413      	add	r3, r2
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80133d6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	89fb      	ldrh	r3, [r7, #14]
 80133de:	18d0      	adds	r0, r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	461a      	mov	r2, r3
 80133ee:	f002 fb5e 	bl	8015aae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	89fb      	ldrh	r3, [r7, #14]
 80133fc:	4413      	add	r3, r2
 80133fe:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	89fb      	ldrh	r3, [r7, #14]
 801340a:	1c58      	adds	r0, r3, #1
 801340c:	81f8      	strh	r0, [r7, #14]
 801340e:	4413      	add	r3, r2
 8013410:	b2ca      	uxtb	r2, r1
 8013412:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013418:	0a19      	lsrs	r1, r3, #8
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	89fb      	ldrh	r3, [r7, #14]
 8013420:	1c58      	adds	r0, r3, #1
 8013422:	81f8      	strh	r0, [r7, #14]
 8013424:	4413      	add	r3, r2
 8013426:	b2ca      	uxtb	r2, r1
 8013428:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801342e:	0c19      	lsrs	r1, r3, #16
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681a      	ldr	r2, [r3, #0]
 8013434:	89fb      	ldrh	r3, [r7, #14]
 8013436:	1c58      	adds	r0, r3, #1
 8013438:	81f8      	strh	r0, [r7, #14]
 801343a:	4413      	add	r3, r2
 801343c:	b2ca      	uxtb	r2, r1
 801343e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013444:	0e19      	lsrs	r1, r3, #24
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	89fb      	ldrh	r3, [r7, #14]
 801344c:	1c58      	adds	r0, r3, #1
 801344e:	81f8      	strh	r0, [r7, #14]
 8013450:	4413      	add	r3, r2
 8013452:	b2ca      	uxtb	r2, r1
 8013454:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013456:	89fb      	ldrh	r3, [r7, #14]
 8013458:	b2da      	uxtb	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801345e:	2300      	movs	r3, #0
}
 8013460:	4618      	mov	r0, r3
 8013462:	3710      	adds	r7, #16
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013468:	b480      	push	{r7}
 801346a:	b083      	sub	sp, #12
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013472:	79fb      	ldrb	r3, [r7, #7]
 8013474:	2b05      	cmp	r3, #5
 8013476:	d101      	bne.n	801347c <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013478:	2301      	movs	r3, #1
 801347a:	e000      	b.n	801347e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801347c:	2300      	movs	r3, #0
        }
    }
}
 801347e:	4618      	mov	r0, r3
 8013480:	370c      	adds	r7, #12
 8013482:	46bd      	mov	sp, r7
 8013484:	bc80      	pop	{r7}
 8013486:	4770      	bx	lr

08013488 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	4603      	mov	r3, r0
 8013490:	6039      	str	r1, [r7, #0]
 8013492:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013494:	2300      	movs	r3, #0
 8013496:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013498:	79fb      	ldrb	r3, [r7, #7]
 801349a:	2b05      	cmp	r3, #5
 801349c:	d105      	bne.n	80134aa <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801349e:	6838      	ldr	r0, [r7, #0]
 80134a0:	f001 f994 	bl	80147cc <RegionEU868GetPhyParam>
 80134a4:	4603      	mov	r3, r0
 80134a6:	60fb      	str	r3, [r7, #12]
 80134a8:	e001      	b.n	80134ae <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	4618      	mov	r0, r3
 80134b2:	3710      	adds	r7, #16
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	4603      	mov	r3, r0
 80134c0:	6039      	str	r1, [r7, #0]
 80134c2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80134c4:	79fb      	ldrb	r3, [r7, #7]
 80134c6:	2b05      	cmp	r3, #5
 80134c8:	d103      	bne.n	80134d2 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80134ca:	6838      	ldr	r0, [r7, #0]
 80134cc:	f001 faca 	bl	8014a64 <RegionEU868SetBandTxDone>
 80134d0:	e000      	b.n	80134d4 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80134d2:	bf00      	nop
        }
    }
}
 80134d4:	3708      	adds	r7, #8
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}

080134da <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80134da:	b580      	push	{r7, lr}
 80134dc:	b082      	sub	sp, #8
 80134de:	af00      	add	r7, sp, #0
 80134e0:	4603      	mov	r3, r0
 80134e2:	6039      	str	r1, [r7, #0]
 80134e4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80134e6:	79fb      	ldrb	r3, [r7, #7]
 80134e8:	2b05      	cmp	r3, #5
 80134ea:	d103      	bne.n	80134f4 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80134ec:	6838      	ldr	r0, [r7, #0]
 80134ee:	f001 fae5 	bl	8014abc <RegionEU868InitDefaults>
 80134f2:	e000      	b.n	80134f6 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80134f4:	bf00      	nop
        }
    }
}
 80134f6:	bf00      	nop
 80134f8:	3708      	adds	r7, #8
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b082      	sub	sp, #8
 8013502:	af00      	add	r7, sp, #0
 8013504:	4603      	mov	r3, r0
 8013506:	6039      	str	r1, [r7, #0]
 8013508:	71fb      	strb	r3, [r7, #7]
 801350a:	4613      	mov	r3, r2
 801350c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801350e:	79fb      	ldrb	r3, [r7, #7]
 8013510:	2b05      	cmp	r3, #5
 8013512:	d106      	bne.n	8013522 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013514:	79bb      	ldrb	r3, [r7, #6]
 8013516:	4619      	mov	r1, r3
 8013518:	6838      	ldr	r0, [r7, #0]
 801351a:	f001 fb6d 	bl	8014bf8 <RegionEU868Verify>
 801351e:	4603      	mov	r3, r0
 8013520:	e000      	b.n	8013524 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013522:	2300      	movs	r3, #0
        }
    }
}
 8013524:	4618      	mov	r0, r3
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	4603      	mov	r3, r0
 8013534:	6039      	str	r1, [r7, #0]
 8013536:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013538:	79fb      	ldrb	r3, [r7, #7]
 801353a:	2b05      	cmp	r3, #5
 801353c:	d103      	bne.n	8013546 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801353e:	6838      	ldr	r0, [r7, #0]
 8013540:	f001 fbd6 	bl	8014cf0 <RegionEU868ApplyCFList>
 8013544:	e000      	b.n	8013548 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013546:	bf00      	nop
        }
    }
}
 8013548:	bf00      	nop
 801354a:	3708      	adds	r7, #8
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	4603      	mov	r3, r0
 8013558:	6039      	str	r1, [r7, #0]
 801355a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801355c:	79fb      	ldrb	r3, [r7, #7]
 801355e:	2b05      	cmp	r3, #5
 8013560:	d104      	bne.n	801356c <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013562:	6838      	ldr	r0, [r7, #0]
 8013564:	f001 fc38 	bl	8014dd8 <RegionEU868ChanMaskSet>
 8013568:	4603      	mov	r3, r0
 801356a:	e000      	b.n	801356e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801356c:	2300      	movs	r3, #0
        }
    }
}
 801356e:	4618      	mov	r0, r3
 8013570:	3708      	adds	r7, #8
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}

08013576 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013576:	b580      	push	{r7, lr}
 8013578:	b082      	sub	sp, #8
 801357a:	af00      	add	r7, sp, #0
 801357c:	603b      	str	r3, [r7, #0]
 801357e:	4603      	mov	r3, r0
 8013580:	71fb      	strb	r3, [r7, #7]
 8013582:	460b      	mov	r3, r1
 8013584:	71bb      	strb	r3, [r7, #6]
 8013586:	4613      	mov	r3, r2
 8013588:	717b      	strb	r3, [r7, #5]
    switch( region )
 801358a:	79fb      	ldrb	r3, [r7, #7]
 801358c:	2b05      	cmp	r3, #5
 801358e:	d107      	bne.n	80135a0 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013590:	7979      	ldrb	r1, [r7, #5]
 8013592:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	683a      	ldr	r2, [r7, #0]
 801359a:	f001 fc47 	bl	8014e2c <RegionEU868ComputeRxWindowParameters>
 801359e:	e000      	b.n	80135a2 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80135a0:	bf00      	nop
        }
    }
}
 80135a2:	bf00      	nop
 80135a4:	3708      	adds	r7, #8
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b084      	sub	sp, #16
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	4603      	mov	r3, r0
 80135b2:	60b9      	str	r1, [r7, #8]
 80135b4:	607a      	str	r2, [r7, #4]
 80135b6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80135b8:	7bfb      	ldrb	r3, [r7, #15]
 80135ba:	2b05      	cmp	r3, #5
 80135bc:	d105      	bne.n	80135ca <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80135be:	6879      	ldr	r1, [r7, #4]
 80135c0:	68b8      	ldr	r0, [r7, #8]
 80135c2:	f001 fc8d 	bl	8014ee0 <RegionEU868RxConfig>
 80135c6:	4603      	mov	r3, r0
 80135c8:	e000      	b.n	80135cc <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80135ca:	2300      	movs	r3, #0
        }
    }
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3710      	adds	r7, #16
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
 80135de:	603b      	str	r3, [r7, #0]
 80135e0:	4603      	mov	r3, r0
 80135e2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80135e4:	7bfb      	ldrb	r3, [r7, #15]
 80135e6:	2b05      	cmp	r3, #5
 80135e8:	d106      	bne.n	80135f8 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	6879      	ldr	r1, [r7, #4]
 80135ee:	68b8      	ldr	r0, [r7, #8]
 80135f0:	f001 fd46 	bl	8015080 <RegionEU868TxConfig>
 80135f4:	4603      	mov	r3, r0
 80135f6:	e000      	b.n	80135fa <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80135f8:	2300      	movs	r3, #0
        }
    }
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3710      	adds	r7, #16
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013602:	b580      	push	{r7, lr}
 8013604:	b086      	sub	sp, #24
 8013606:	af02      	add	r7, sp, #8
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	607a      	str	r2, [r7, #4]
 801360c:	603b      	str	r3, [r7, #0]
 801360e:	4603      	mov	r3, r0
 8013610:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013612:	7bfb      	ldrb	r3, [r7, #15]
 8013614:	2b05      	cmp	r3, #5
 8013616:	d109      	bne.n	801362c <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013618:	69fb      	ldr	r3, [r7, #28]
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	683a      	ldr	r2, [r7, #0]
 8013620:	6879      	ldr	r1, [r7, #4]
 8013622:	68b8      	ldr	r0, [r7, #8]
 8013624:	f001 fdfc 	bl	8015220 <RegionEU868LinkAdrReq>
 8013628:	4603      	mov	r3, r0
 801362a:	e000      	b.n	801362e <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801362c:	2300      	movs	r3, #0
        }
    }
}
 801362e:	4618      	mov	r0, r3
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b082      	sub	sp, #8
 801363a:	af00      	add	r7, sp, #0
 801363c:	4603      	mov	r3, r0
 801363e:	6039      	str	r1, [r7, #0]
 8013640:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013642:	79fb      	ldrb	r3, [r7, #7]
 8013644:	2b05      	cmp	r3, #5
 8013646:	d104      	bne.n	8013652 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013648:	6838      	ldr	r0, [r7, #0]
 801364a:	f001 ff0b 	bl	8015464 <RegionEU868RxParamSetupReq>
 801364e:	4603      	mov	r3, r0
 8013650:	e000      	b.n	8013654 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013652:	2300      	movs	r3, #0
        }
    }
}
 8013654:	4618      	mov	r0, r3
 8013656:	3708      	adds	r7, #8
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	4603      	mov	r3, r0
 8013664:	6039      	str	r1, [r7, #0]
 8013666:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013668:	79fb      	ldrb	r3, [r7, #7]
 801366a:	2b05      	cmp	r3, #5
 801366c:	d104      	bne.n	8013678 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801366e:	6838      	ldr	r0, [r7, #0]
 8013670:	f001 ff36 	bl	80154e0 <RegionEU868NewChannelReq>
 8013674:	4603      	mov	r3, r0
 8013676:	e000      	b.n	801367a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013678:	2300      	movs	r3, #0
        }
    }
}
 801367a:	4618      	mov	r0, r3
 801367c:	3708      	adds	r7, #8
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}

08013682 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013682:	b580      	push	{r7, lr}
 8013684:	b082      	sub	sp, #8
 8013686:	af00      	add	r7, sp, #0
 8013688:	4603      	mov	r3, r0
 801368a:	6039      	str	r1, [r7, #0]
 801368c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801368e:	79fb      	ldrb	r3, [r7, #7]
 8013690:	2b05      	cmp	r3, #5
 8013692:	d104      	bne.n	801369e <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013694:	6838      	ldr	r0, [r7, #0]
 8013696:	f001 ff81 	bl	801559c <RegionEU868TxParamSetupReq>
 801369a:	4603      	mov	r3, r0
 801369c:	e000      	b.n	80136a0 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801369e:	2300      	movs	r3, #0
        }
    }
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	4603      	mov	r3, r0
 80136b0:	6039      	str	r1, [r7, #0]
 80136b2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	2b05      	cmp	r3, #5
 80136b8:	d104      	bne.n	80136c4 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80136ba:	6838      	ldr	r0, [r7, #0]
 80136bc:	f001 ff7a 	bl	80155b4 <RegionEU868DlChannelReq>
 80136c0:	4603      	mov	r3, r0
 80136c2:	e000      	b.n	80136c6 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80136c4:	2300      	movs	r3, #0
        }
    }
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3708      	adds	r7, #8
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}

080136ce <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80136ce:	b580      	push	{r7, lr}
 80136d0:	b082      	sub	sp, #8
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	4603      	mov	r3, r0
 80136d6:	71fb      	strb	r3, [r7, #7]
 80136d8:	460b      	mov	r3, r1
 80136da:	71bb      	strb	r3, [r7, #6]
 80136dc:	4613      	mov	r3, r2
 80136de:	717b      	strb	r3, [r7, #5]
    switch( region )
 80136e0:	79fb      	ldrb	r3, [r7, #7]
 80136e2:	2b05      	cmp	r3, #5
 80136e4:	d108      	bne.n	80136f8 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80136e6:	797a      	ldrb	r2, [r7, #5]
 80136e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80136ec:	4611      	mov	r1, r2
 80136ee:	4618      	mov	r0, r3
 80136f0:	f001 ffa4 	bl	801563c <RegionEU868AlternateDr>
 80136f4:	4603      	mov	r3, r0
 80136f6:	e000      	b.n	80136fa <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80136f8:	2300      	movs	r3, #0
        }
    }
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}

08013702 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013702:	b580      	push	{r7, lr}
 8013704:	b084      	sub	sp, #16
 8013706:	af00      	add	r7, sp, #0
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
 801370c:	603b      	str	r3, [r7, #0]
 801370e:	4603      	mov	r3, r0
 8013710:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013712:	7bfb      	ldrb	r3, [r7, #15]
 8013714:	2b05      	cmp	r3, #5
 8013716:	d107      	bne.n	8013728 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	6879      	ldr	r1, [r7, #4]
 801371e:	68b8      	ldr	r0, [r7, #8]
 8013720:	f001 ff9c 	bl	801565c <RegionEU868NextChannel>
 8013724:	4603      	mov	r3, r0
 8013726:	e000      	b.n	801372a <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013728:	2309      	movs	r3, #9
        }
    }
}
 801372a:	4618      	mov	r0, r3
 801372c:	3710      	adds	r7, #16
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}

08013732 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013732:	b580      	push	{r7, lr}
 8013734:	b082      	sub	sp, #8
 8013736:	af00      	add	r7, sp, #0
 8013738:	4603      	mov	r3, r0
 801373a:	6039      	str	r1, [r7, #0]
 801373c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801373e:	79fb      	ldrb	r3, [r7, #7]
 8013740:	2b05      	cmp	r3, #5
 8013742:	d103      	bne.n	801374c <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8013744:	6838      	ldr	r0, [r7, #0]
 8013746:	f002 f903 	bl	8015950 <RegionEU868SetContinuousWave>
 801374a:	e000      	b.n	801374e <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801374c:	bf00      	nop
        }
    }
}
 801374e:	bf00      	nop
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013756:	b590      	push	{r4, r7, lr}
 8013758:	b083      	sub	sp, #12
 801375a:	af00      	add	r7, sp, #0
 801375c:	4604      	mov	r4, r0
 801375e:	4608      	mov	r0, r1
 8013760:	4611      	mov	r1, r2
 8013762:	461a      	mov	r2, r3
 8013764:	4623      	mov	r3, r4
 8013766:	71fb      	strb	r3, [r7, #7]
 8013768:	4603      	mov	r3, r0
 801376a:	71bb      	strb	r3, [r7, #6]
 801376c:	460b      	mov	r3, r1
 801376e:	717b      	strb	r3, [r7, #5]
 8013770:	4613      	mov	r3, r2
 8013772:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013774:	79fb      	ldrb	r3, [r7, #7]
 8013776:	2b05      	cmp	r3, #5
 8013778:	d109      	bne.n	801378e <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801377a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801377e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013782:	79bb      	ldrb	r3, [r7, #6]
 8013784:	4618      	mov	r0, r3
 8013786:	f002 f931 	bl	80159ec <RegionEU868ApplyDrOffset>
 801378a:	4603      	mov	r3, r0
 801378c:	e000      	b.n	8013790 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801378e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8013790:	4618      	mov	r0, r3
 8013792:	370c      	adds	r7, #12
 8013794:	46bd      	mov	sp, r7
 8013796:	bd90      	pop	{r4, r7, pc}

08013798 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801379e:	4b04      	ldr	r3, [pc, #16]	; (80137b0 <RegionGetVersion+0x18>)
 80137a0:	607b      	str	r3, [r7, #4]

    return version;
 80137a2:	687b      	ldr	r3, [r7, #4]
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bc80      	pop	{r7}
 80137ac:	4770      	bx	lr
 80137ae:	bf00      	nop
 80137b0:	01010003 	.word	0x01010003

080137b4 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80137b4:	b480      	push	{r7}
 80137b6:	b087      	sub	sp, #28
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	4608      	mov	r0, r1
 80137be:	4639      	mov	r1, r7
 80137c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80137c4:	4603      	mov	r3, r0
 80137c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80137ce:	7afb      	ldrb	r3, [r7, #11]
 80137d0:	f083 0301 	eor.w	r3, r3, #1
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d01b      	beq.n	8013812 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80137da:	f242 7310 	movw	r3, #10000	; 0x2710
 80137de:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80137e6:	d202      	bcs.n	80137ee <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80137e8:	2364      	movs	r3, #100	; 0x64
 80137ea:	82bb      	strh	r3, [r7, #20]
 80137ec:	e00b      	b.n	8013806 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d803      	bhi.n	8013800 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80137f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80137fc:	82bb      	strh	r3, [r7, #20]
 80137fe:	e002      	b.n	8013806 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013800:	f242 7310 	movw	r3, #10000	; 0x2710
 8013804:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013806:	8aba      	ldrh	r2, [r7, #20]
 8013808:	8afb      	ldrh	r3, [r7, #22]
 801380a:	4293      	cmp	r3, r2
 801380c:	bf38      	it	cc
 801380e:	4613      	movcc	r3, r2
 8013810:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8013812:	8afb      	ldrh	r3, [r7, #22]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d101      	bne.n	801381c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8013818:	2301      	movs	r3, #1
 801381a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801381c:	8afb      	ldrh	r3, [r7, #22]
}
 801381e:	4618      	mov	r0, r3
 8013820:	371c      	adds	r7, #28
 8013822:	46bd      	mov	sp, r7
 8013824:	bc80      	pop	{r7}
 8013826:	4770      	bx	lr

08013828 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b08e      	sub	sp, #56	; 0x38
 801382c:	af02      	add	r7, sp, #8
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	4608      	mov	r0, r1
 8013832:	4639      	mov	r1, r7
 8013834:	e881 000c 	stmia.w	r1, {r2, r3}
 8013838:	4603      	mov	r3, r0
 801383a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013842:	4b4b      	ldr	r3, [pc, #300]	; (8013970 <SetMaxTimeCredits+0x148>)
 8013844:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8013846:	463b      	mov	r3, r7
 8013848:	e893 0003 	ldmia.w	r3, {r0, r1}
 801384c:	f005 fd66 	bl	801931c <SysTimeToMs>
 8013850:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8013852:	f107 0314 	add.w	r3, r7, #20
 8013856:	2200      	movs	r2, #0
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801385c:	7af9      	ldrb	r1, [r7, #11]
 801385e:	463b      	mov	r3, r7
 8013860:	cb0c      	ldmia	r3, {r2, r3}
 8013862:	68f8      	ldr	r0, [r7, #12]
 8013864:	f7ff ffa6 	bl	80137b4 <GetDutyCycle>
 8013868:	4603      	mov	r3, r0
 801386a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801386c:	7afb      	ldrb	r3, [r7, #11]
 801386e:	f083 0301 	eor.w	r3, r3, #1
 8013872:	b2db      	uxtb	r3, r3
 8013874:	2b00      	cmp	r3, #0
 8013876:	d062      	beq.n	801393e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801387a:	2b64      	cmp	r3, #100	; 0x64
 801387c:	d105      	bne.n	801388a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801387e:	4b3c      	ldr	r3, [pc, #240]	; (8013970 <SetMaxTimeCredits+0x148>)
 8013880:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013886:	609a      	str	r2, [r3, #8]
 8013888:	e00b      	b.n	80138a2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801388a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801388c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013890:	d105      	bne.n	801389e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8013892:	4b38      	ldr	r3, [pc, #224]	; (8013974 <SetMaxTimeCredits+0x14c>)
 8013894:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801389a:	609a      	str	r2, [r3, #8]
 801389c:	e001      	b.n	80138a2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801389e:	4b36      	ldr	r3, [pc, #216]	; (8013978 <SetMaxTimeCredits+0x150>)
 80138a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	689a      	ldr	r2, [r3, #8]
 80138a6:	f107 031c 	add.w	r3, r7, #28
 80138aa:	4611      	mov	r1, r2
 80138ac:	4618      	mov	r0, r3
 80138ae:	f005 fd5d 	bl	801936c <SysTimeFromMs>
 80138b2:	f107 0014 	add.w	r0, r7, #20
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	9300      	str	r3, [sp, #0]
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	463a      	mov	r2, r7
 80138be:	ca06      	ldmia	r2, {r1, r2}
 80138c0:	f005 fc6d 	bl	801919e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80138c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80138c8:	f083 0301 	eor.w	r3, r3, #1
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d006      	beq.n	80138e0 <SetMaxTimeCredits+0xb8>
 80138d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80138d6:	f083 0301 	eor.w	r3, r3, #1
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d108      	bne.n	80138f2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80138e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d103      	bne.n	80138f2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80138ea:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80138ec:	4a23      	ldr	r2, [pc, #140]	; (801397c <SetMaxTimeCredits+0x154>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d92f      	bls.n	8013952 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138f6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	4a21      	ldr	r2, [pc, #132]	; (8013980 <SetMaxTimeCredits+0x158>)
 80138fc:	4293      	cmp	r3, r2
 80138fe:	d928      	bls.n	8013952 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013906:	3b30      	subs	r3, #48	; 0x30
 8013908:	4a1e      	ldr	r2, [pc, #120]	; (8013984 <SetMaxTimeCredits+0x15c>)
 801390a:	fba2 2303 	umull	r2, r3, r2, r3
 801390e:	0c1b      	lsrs	r3, r3, #16
 8013910:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	4a1c      	ldr	r2, [pc, #112]	; (8013988 <SetMaxTimeCredits+0x160>)
 8013916:	fb02 f303 	mul.w	r3, r2, r3
 801391a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8013922:	3330      	adds	r3, #48	; 0x30
 8013924:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8013926:	2300      	movs	r3, #0
 8013928:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801392a:	f107 0314 	add.w	r3, r7, #20
 801392e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013932:	f005 fcf3 	bl	801931c <SysTimeToMs>
 8013936:	4602      	mov	r2, r0
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	609a      	str	r2, [r3, #8]
 801393c:	e009      	b.n	8013952 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801393e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013942:	f083 0301 	eor.w	r3, r3, #1
 8013946:	b2db      	uxtb	r3, r3
 8013948:	2b00      	cmp	r3, #0
 801394a:	d002      	beq.n	8013952 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013950:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d102      	bne.n	8013960 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801395e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013964:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8013966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8013968:	4618      	mov	r0, r3
 801396a:	3730      	adds	r7, #48	; 0x30
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	001b7740 	.word	0x001b7740
 8013974:	0112a880 	.word	0x0112a880
 8013978:	02932e00 	.word	0x02932e00
 801397c:	0001517f 	.word	0x0001517f
 8013980:	0001ec2f 	.word	0x0001ec2f
 8013984:	c22e4507 	.word	0xc22e4507
 8013988:	00015180 	.word	0x00015180

0801398c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b086      	sub	sp, #24
 8013990:	af02      	add	r7, sp, #8
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	4608      	mov	r0, r1
 8013996:	4611      	mov	r1, r2
 8013998:	461a      	mov	r2, r3
 801399a:	4603      	mov	r3, r0
 801399c:	70fb      	strb	r3, [r7, #3]
 801399e:	460b      	mov	r3, r1
 80139a0:	70bb      	strb	r3, [r7, #2]
 80139a2:	4613      	mov	r3, r2
 80139a4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80139a6:	78f9      	ldrb	r1, [r7, #3]
 80139a8:	787b      	ldrb	r3, [r7, #1]
 80139aa:	9301      	str	r3, [sp, #4]
 80139ac:	78bb      	ldrb	r3, [r7, #2]
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	f107 0318 	add.w	r3, r7, #24
 80139b4:	cb0c      	ldmia	r3, {r2, r3}
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7ff ff36 	bl	8013828 <SetMaxTimeCredits>
 80139bc:	4603      	mov	r3, r0
 80139be:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80139c0:	78fb      	ldrb	r3, [r7, #3]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d00a      	beq.n	80139dc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f006 fae6 	bl	8019f9c <UTIL_TIMER_GetElapsedTime>
 80139d0:	4602      	mov	r2, r0
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	441a      	add	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	68da      	ldr	r2, [r3, #12]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	691b      	ldr	r3, [r3, #16]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d903      	bls.n	80139f0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	691a      	ldr	r2, [r3, #16]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6a3a      	ldr	r2, [r7, #32]
 80139f4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80139f6:	89fb      	ldrh	r3, [r7, #14]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8013a00:	b480      	push	{r7}
 8013a02:	b085      	sub	sp, #20
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	4603      	mov	r3, r0
 8013a08:	460a      	mov	r2, r1
 8013a0a:	80fb      	strh	r3, [r7, #6]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8013a14:	2300      	movs	r3, #0
 8013a16:	73bb      	strb	r3, [r7, #14]
 8013a18:	e011      	b.n	8013a3e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8013a1a:	88fa      	ldrh	r2, [r7, #6]
 8013a1c:	7bbb      	ldrb	r3, [r7, #14]
 8013a1e:	2101      	movs	r1, #1
 8013a20:	fa01 f303 	lsl.w	r3, r1, r3
 8013a24:	401a      	ands	r2, r3
 8013a26:	7bbb      	ldrb	r3, [r7, #14]
 8013a28:	2101      	movs	r1, #1
 8013a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d102      	bne.n	8013a38 <CountChannels+0x38>
        {
            nbActiveBits++;
 8013a32:	7bfb      	ldrb	r3, [r7, #15]
 8013a34:	3301      	adds	r3, #1
 8013a36:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8013a38:	7bbb      	ldrb	r3, [r7, #14]
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	73bb      	strb	r3, [r7, #14]
 8013a3e:	7bba      	ldrb	r2, [r7, #14]
 8013a40:	797b      	ldrb	r3, [r7, #5]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d3e9      	bcc.n	8013a1a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8013a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3714      	adds	r7, #20
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bc80      	pop	{r7}
 8013a50:	4770      	bx	lr

08013a52 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b084      	sub	sp, #16
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6039      	str	r1, [r7, #0]
 8013a5a:	4611      	mov	r1, r2
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	4603      	mov	r3, r0
 8013a60:	71fb      	strb	r3, [r7, #7]
 8013a62:	460b      	mov	r3, r1
 8013a64:	71bb      	strb	r3, [r7, #6]
 8013a66:	4613      	mov	r3, r2
 8013a68:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8013a6a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8013a6e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013a72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 f85d 	bl	8013b36 <RegionCommonValueInRange>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d101      	bne.n	8013a86 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8013a82:	2300      	movs	r3, #0
 8013a84:	e053      	b.n	8013b2e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013a86:	2300      	movs	r3, #0
 8013a88:	73fb      	strb	r3, [r7, #15]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	73bb      	strb	r3, [r7, #14]
 8013a8e:	e049      	b.n	8013b24 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013a90:	2300      	movs	r3, #0
 8013a92:	737b      	strb	r3, [r7, #13]
 8013a94:	e03d      	b.n	8013b12 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8013a96:	7bbb      	ldrb	r3, [r7, #14]
 8013a98:	005b      	lsls	r3, r3, #1
 8013a9a:	683a      	ldr	r2, [r7, #0]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	7b7b      	ldrb	r3, [r7, #13]
 8013aa4:	fa42 f303 	asr.w	r3, r2, r3
 8013aa8:	f003 0301 	and.w	r3, r3, #1
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d02d      	beq.n	8013b0c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013ab0:	7bfa      	ldrb	r2, [r7, #15]
 8013ab2:	7b7b      	ldrb	r3, [r7, #13]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	4613      	mov	r3, r2
 8013aba:	005b      	lsls	r3, r3, #1
 8013abc:	4413      	add	r3, r2
 8013abe:	009b      	lsls	r3, r3, #2
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	7a1b      	ldrb	r3, [r3, #8]
 8013ac8:	f343 0303 	sbfx	r3, r3, #0, #4
 8013acc:	b25b      	sxtb	r3, r3
 8013ace:	f003 030f 	and.w	r3, r3, #15
 8013ad2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013ad4:	7bfa      	ldrb	r2, [r7, #15]
 8013ad6:	7b7b      	ldrb	r3, [r7, #13]
 8013ad8:	4413      	add	r3, r2
 8013ada:	461a      	mov	r2, r3
 8013adc:	4613      	mov	r3, r2
 8013ade:	005b      	lsls	r3, r3, #1
 8013ae0:	4413      	add	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	4413      	add	r3, r2
 8013aea:	7a1b      	ldrb	r3, [r3, #8]
 8013aec:	f343 1303 	sbfx	r3, r3, #4, #4
 8013af0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013af2:	f003 030f 	and.w	r3, r3, #15
 8013af6:	b25a      	sxtb	r2, r3
 8013af8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f000 f81a 	bl	8013b36 <RegionCommonValueInRange>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d101      	bne.n	8013b0c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e010      	b.n	8013b2e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8013b0c:	7b7b      	ldrb	r3, [r7, #13]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	737b      	strb	r3, [r7, #13]
 8013b12:	7b7b      	ldrb	r3, [r7, #13]
 8013b14:	2b0f      	cmp	r3, #15
 8013b16:	d9be      	bls.n	8013a96 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013b18:	7bfb      	ldrb	r3, [r7, #15]
 8013b1a:	3310      	adds	r3, #16
 8013b1c:	73fb      	strb	r3, [r7, #15]
 8013b1e:	7bbb      	ldrb	r3, [r7, #14]
 8013b20:	3301      	adds	r3, #1
 8013b22:	73bb      	strb	r3, [r7, #14]
 8013b24:	7bfa      	ldrb	r2, [r7, #15]
 8013b26:	79fb      	ldrb	r3, [r7, #7]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d3b1      	bcc.n	8013a90 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3710      	adds	r7, #16
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}

08013b36 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8013b36:	b480      	push	{r7}
 8013b38:	b083      	sub	sp, #12
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	71fb      	strb	r3, [r7, #7]
 8013b40:	460b      	mov	r3, r1
 8013b42:	71bb      	strb	r3, [r7, #6]
 8013b44:	4613      	mov	r3, r2
 8013b46:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8013b48:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013b4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	db07      	blt.n	8013b64 <RegionCommonValueInRange+0x2e>
 8013b54:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013b58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	dc01      	bgt.n	8013b64 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8013b60:	2301      	movs	r3, #1
 8013b62:	e000      	b.n	8013b66 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8013b64:	2300      	movs	r3, #0
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	370c      	adds	r7, #12
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bc80      	pop	{r7}
 8013b6e:	4770      	bx	lr

08013b70 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013b70:	b480      	push	{r7}
 8013b72:	b085      	sub	sp, #20
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	460b      	mov	r3, r1
 8013b7a:	70fb      	strb	r3, [r7, #3]
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8013b80:	78fb      	ldrb	r3, [r7, #3]
 8013b82:	091b      	lsrs	r3, r3, #4
 8013b84:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013b86:	78bb      	ldrb	r3, [r7, #2]
 8013b88:	091b      	lsrs	r3, r3, #4
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	7bfa      	ldrb	r2, [r7, #15]
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d803      	bhi.n	8013b9a <RegionCommonChanDisable+0x2a>
 8013b92:	78fa      	ldrb	r2, [r7, #3]
 8013b94:	78bb      	ldrb	r3, [r7, #2]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d301      	bcc.n	8013b9e <RegionCommonChanDisable+0x2e>
    {
        return false;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	e017      	b.n	8013bce <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013b9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ba0:	005b      	lsls	r3, r3, #1
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	881b      	ldrh	r3, [r3, #0]
 8013ba8:	b21a      	sxth	r2, r3
 8013baa:	78fb      	ldrb	r3, [r7, #3]
 8013bac:	f003 030f 	and.w	r3, r3, #15
 8013bb0:	2101      	movs	r1, #1
 8013bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8013bb6:	b21b      	sxth	r3, r3
 8013bb8:	43db      	mvns	r3, r3
 8013bba:	b21b      	sxth	r3, r3
 8013bbc:	4013      	ands	r3, r2
 8013bbe:	b219      	sxth	r1, r3
 8013bc0:	7bfb      	ldrb	r3, [r7, #15]
 8013bc2:	005b      	lsls	r3, r3, #1
 8013bc4:	687a      	ldr	r2, [r7, #4]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b28a      	uxth	r2, r1
 8013bca:	801a      	strh	r2, [r3, #0]

    return true;
 8013bcc:	2301      	movs	r3, #1
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3714      	adds	r7, #20
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bc80      	pop	{r7}
 8013bd6:	4770      	bx	lr

08013bd8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	460b      	mov	r3, r1
 8013be2:	70fb      	strb	r3, [r7, #3]
 8013be4:	4613      	mov	r3, r2
 8013be6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8013be8:	2300      	movs	r3, #0
 8013bea:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d101      	bne.n	8013bf6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	e018      	b.n	8013c28 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013bf6:	78fb      	ldrb	r3, [r7, #3]
 8013bf8:	73bb      	strb	r3, [r7, #14]
 8013bfa:	e010      	b.n	8013c1e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013bfc:	7bbb      	ldrb	r3, [r7, #14]
 8013bfe:	005b      	lsls	r3, r3, #1
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	4413      	add	r3, r2
 8013c04:	881b      	ldrh	r3, [r3, #0]
 8013c06:	2110      	movs	r1, #16
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7ff fef9 	bl	8013a00 <CountChannels>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	461a      	mov	r2, r3
 8013c12:	7bfb      	ldrb	r3, [r7, #15]
 8013c14:	4413      	add	r3, r2
 8013c16:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013c18:	7bbb      	ldrb	r3, [r7, #14]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	73bb      	strb	r3, [r7, #14]
 8013c1e:	7bba      	ldrb	r2, [r7, #14]
 8013c20:	78bb      	ldrb	r3, [r7, #2]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d3ea      	bcc.n	8013bfc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8013c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8013c30:	b480      	push	{r7}
 8013c32:	b087      	sub	sp, #28
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	60b9      	str	r1, [r7, #8]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d016      	beq.n	8013c72 <RegionCommonChanMaskCopy+0x42>
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d013      	beq.n	8013c72 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	75fb      	strb	r3, [r7, #23]
 8013c4e:	e00c      	b.n	8013c6a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013c50:	7dfb      	ldrb	r3, [r7, #23]
 8013c52:	005b      	lsls	r3, r3, #1
 8013c54:	68ba      	ldr	r2, [r7, #8]
 8013c56:	441a      	add	r2, r3
 8013c58:	7dfb      	ldrb	r3, [r7, #23]
 8013c5a:	005b      	lsls	r3, r3, #1
 8013c5c:	68f9      	ldr	r1, [r7, #12]
 8013c5e:	440b      	add	r3, r1
 8013c60:	8812      	ldrh	r2, [r2, #0]
 8013c62:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013c64:	7dfb      	ldrb	r3, [r7, #23]
 8013c66:	3301      	adds	r3, #1
 8013c68:	75fb      	strb	r3, [r7, #23]
 8013c6a:	7dfa      	ldrb	r2, [r7, #23]
 8013c6c:	79fb      	ldrb	r3, [r7, #7]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d3ee      	bcc.n	8013c50 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8013c72:	bf00      	nop
 8013c74:	371c      	adds	r7, #28
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bc80      	pop	{r7}
 8013c7a:	4770      	bx	lr

08013c7c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013c7c:	b082      	sub	sp, #8
 8013c7e:	b580      	push	{r7, lr}
 8013c80:	b086      	sub	sp, #24
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	60f8      	str	r0, [r7, #12]
 8013c86:	60b9      	str	r1, [r7, #8]
 8013c88:	627b      	str	r3, [r7, #36]	; 0x24
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013c8e:	79f9      	ldrb	r1, [r7, #7]
 8013c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c94:	cb0c      	ldmia	r3, {r2, r3}
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f7ff fd8c 	bl	80137b4 <GetDutyCycle>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	68da      	ldr	r2, [r3, #12]
 8013ca4:	8afb      	ldrh	r3, [r7, #22]
 8013ca6:	68b9      	ldr	r1, [r7, #8]
 8013ca8:	fb01 f303 	mul.w	r3, r1, r3
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d909      	bls.n	8013cc4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	68da      	ldr	r2, [r3, #12]
 8013cb4:	8afb      	ldrh	r3, [r7, #22]
 8013cb6:	68b9      	ldr	r1, [r7, #8]
 8013cb8:	fb01 f303 	mul.w	r3, r1, r3
 8013cbc:	1ad2      	subs	r2, r2, r3
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8013cc2:	e002      	b.n	8013cca <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	60da      	str	r2, [r3, #12]
}
 8013cca:	bf00      	nop
 8013ccc:	3718      	adds	r7, #24
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013cd4:	b002      	add	sp, #8
 8013cd6:	4770      	bx	lr

08013cd8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8013cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cda:	b08f      	sub	sp, #60	; 0x3c
 8013cdc:	af04      	add	r7, sp, #16
 8013cde:	6039      	str	r1, [r7, #0]
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	71fb      	strb	r3, [r7, #7]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	71bb      	strb	r3, [r7, #6]
 8013cec:	4613      	mov	r3, r2
 8013cee:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8013cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8013cf4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8013cf6:	f006 f93f 	bl	8019f78 <UTIL_TIMER_GetCurrentTime>
 8013cfa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8013d00:	2301      	movs	r3, #1
 8013d02:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8013d04:	2300      	movs	r3, #0
 8013d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013d10:	e0ba      	b.n	8013e88 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8013d12:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013d16:	4613      	mov	r3, r2
 8013d18:	005b      	lsls	r3, r3, #1
 8013d1a:	4413      	add	r3, r2
 8013d1c:	00db      	lsls	r3, r3, #3
 8013d1e:	461a      	mov	r2, r3
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	189c      	adds	r4, r3, r2
 8013d24:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8013d28:	797a      	ldrb	r2, [r7, #5]
 8013d2a:	79fd      	ldrb	r5, [r7, #7]
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	9302      	str	r3, [sp, #8]
 8013d30:	46ec      	mov	ip, sp
 8013d32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013d36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013d3a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d3e:	4633      	mov	r3, r6
 8013d40:	4629      	mov	r1, r5
 8013d42:	4620      	mov	r0, r4
 8013d44:	f7ff fe22 	bl	801398c <UpdateTimeCredits>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8013d4c:	8afa      	ldrh	r2, [r7, #22]
 8013d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d50:	fb02 f303 	mul.w	r3, r2, r3
 8013d54:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013d56:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	005b      	lsls	r3, r3, #1
 8013d5e:	4413      	add	r3, r2
 8013d60:	00db      	lsls	r3, r3, #3
 8013d62:	461a      	mov	r2, r3
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	4413      	add	r3, r2
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	69ba      	ldr	r2, [r7, #24]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d308      	bcc.n	8013d82 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013d70:	797b      	ldrb	r3, [r7, #5]
 8013d72:	f083 0301 	eor.w	r3, r3, #1
 8013d76:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d013      	beq.n	8013da4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013d7c:	79fb      	ldrb	r3, [r7, #7]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d010      	beq.n	8013da4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8013d82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013d86:	4613      	mov	r3, r2
 8013d88:	005b      	lsls	r3, r3, #1
 8013d8a:	4413      	add	r3, r2
 8013d8c:	00db      	lsls	r3, r3, #3
 8013d8e:	461a      	mov	r2, r3
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	4413      	add	r3, r2
 8013d94:	2201      	movs	r2, #1
 8013d96:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8013d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013da2:	e06c      	b.n	8013e7e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8013da4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013da8:	4613      	mov	r3, r2
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	4413      	add	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	461a      	mov	r2, r3
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	4413      	add	r3, r2
 8013db6:	2200      	movs	r2, #0
 8013db8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8013dba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	4413      	add	r3, r2
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	4413      	add	r3, r2
 8013dcc:	691b      	ldr	r3, [r3, #16]
 8013dce:	69ba      	ldr	r2, [r7, #24]
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d215      	bcs.n	8013e00 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8013dd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013dd8:	4613      	mov	r3, r2
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4413      	add	r3, r2
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	461a      	mov	r2, r3
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	4413      	add	r3, r2
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	69ba      	ldr	r2, [r7, #24]
 8013dea:	1ad3      	subs	r3, r2, r3
 8013dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dee:	4293      	cmp	r3, r2
 8013df0:	bf28      	it	cs
 8013df2:	4613      	movcs	r3, r2
 8013df4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8013df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8013e00:	79fb      	ldrb	r3, [r7, #7]
 8013e02:	f083 0301 	eor.w	r3, r3, #1
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d038      	beq.n	8013e7e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	60fb      	str	r3, [r7, #12]
 8013e10:	2300      	movs	r3, #0
 8013e12:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013e14:	8afb      	ldrh	r3, [r7, #22]
 8013e16:	2b64      	cmp	r3, #100	; 0x64
 8013e18:	d103      	bne.n	8013e22 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8013e1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013e1e:	60fb      	str	r3, [r7, #12]
 8013e20:	e009      	b.n	8013e36 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013e22:	8afb      	ldrh	r3, [r7, #22]
 8013e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013e28:	d103      	bne.n	8013e32 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8013e2a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8013e2e:	60fb      	str	r3, [r7, #12]
 8013e30:	e001      	b.n	8013e36 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013e32:	4b1e      	ldr	r3, [pc, #120]	; (8013eac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013e34:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8013e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e38:	4a1c      	ldr	r2, [pc, #112]	; (8013eac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d90e      	bls.n	8013e5c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8013e3e:	68fa      	ldr	r2, [r7, #12]
 8013e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e42:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013e46:	3b30      	subs	r3, #48	; 0x30
 8013e48:	4919      	ldr	r1, [pc, #100]	; (8013eb0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8013e4a:	fba1 1303 	umull	r1, r3, r1, r3
 8013e4e:	0c1b      	lsrs	r3, r3, #16
 8013e50:	3301      	adds	r3, #1
 8013e52:	4918      	ldr	r1, [pc, #96]	; (8013eb4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8013e54:	fb01 f303 	mul.w	r3, r1, r3
 8013e58:	4413      	add	r3, r2
 8013e5a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8013e5c:	f107 000c 	add.w	r0, r7, #12
 8013e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e66:	f107 020c 	add.w	r2, r7, #12
 8013e6a:	ca06      	ldmia	r2, {r1, r2}
 8013e6c:	f005 f997 	bl	801919e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8013e70:	f107 030c 	add.w	r3, r7, #12
 8013e74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013e78:	f005 fa50 	bl	801931c <SysTimeToMs>
 8013e7c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8013e7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013e82:	3301      	adds	r3, #1
 8013e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013e88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013e8c:	79bb      	ldrb	r3, [r7, #6]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	f4ff af3f 	bcc.w	8013d12 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8013e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d102      	bne.n	8013ea2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8013e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea0:	e000      	b.n	8013ea4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	372c      	adds	r7, #44	; 0x2c
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eac:	0001ec30 	.word	0x0001ec30
 8013eb0:	c22e4507 	.word	0xc22e4507
 8013eb4:	00015180 	.word	0x00015180

08013eb8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b085      	sub	sp, #20
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	2b03      	cmp	r3, #3
 8013ecc:	d13f      	bne.n	8013f4e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	b25a      	sxtb	r2, r3
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013ee0:	f003 030f 	and.w	r3, r3, #15
 8013ee4:	b25a      	sxtb	r2, r3
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	091b      	lsrs	r3, r3, #4
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	b25a      	sxtb	r2, r3
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	3302      	adds	r3, #2
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	889b      	ldrh	r3, [r3, #4]
 8013f0c:	b21a      	sxth	r2, r3
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	3303      	adds	r3, #3
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	021b      	lsls	r3, r3, #8
 8013f16:	b21b      	sxth	r3, r3
 8013f18:	4313      	orrs	r3, r2
 8013f1a:	b21b      	sxth	r3, r3
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	791a      	ldrb	r2, [r3, #4]
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	091b      	lsrs	r3, r3, #4
 8013f30:	b2db      	uxtb	r3, r3
 8013f32:	f003 0307 	and.w	r3, r3, #7
 8013f36:	b2da      	uxtb	r2, r3
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013f3c:	683b      	ldr	r3, [r7, #0]
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	f003 030f 	and.w	r3, r3, #15
 8013f44:	b2da      	uxtb	r2, r3
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013f4a:	2305      	movs	r3, #5
 8013f4c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8013f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3714      	adds	r7, #20
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bc80      	pop	{r7}
 8013f58:	4770      	bx	lr

08013f5a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013f5a:	b5b0      	push	{r4, r5, r7, lr}
 8013f5c:	b088      	sub	sp, #32
 8013f5e:	af02      	add	r7, sp, #8
 8013f60:	60f8      	str	r0, [r7, #12]
 8013f62:	60b9      	str	r1, [r7, #8]
 8013f64:	607a      	str	r2, [r7, #4]
 8013f66:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	791b      	ldrb	r3, [r3, #4]
 8013f6c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	799b      	ldrb	r3, [r3, #6]
 8013f72:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	79db      	ldrb	r3, [r3, #7]
 8013f78:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	7a1b      	ldrb	r3, [r3, #8]
 8013f7e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	795b      	ldrb	r3, [r3, #5]
 8013f84:	f083 0301 	eor.w	r3, r3, #1
 8013f88:	b2db      	uxtb	r3, r3
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d008      	beq.n	8013fa0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	7adb      	ldrb	r3, [r3, #11]
 8013f92:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	7a5b      	ldrb	r3, [r3, #9]
 8013f98:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	7a9b      	ldrb	r3, [r3, #10]
 8013f9e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8013fa0:	7dfb      	ldrb	r3, [r7, #23]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d04a      	beq.n	801403c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8013fa6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8013faa:	2b0f      	cmp	r3, #15
 8013fac:	d103      	bne.n	8013fb6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	7a5b      	ldrb	r3, [r3, #9]
 8013fb2:	75bb      	strb	r3, [r7, #22]
 8013fb4:	e01d      	b.n	8013ff2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	7b18      	ldrb	r0, [r3, #12]
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6919      	ldr	r1, [r3, #16]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8013fca:	68fa      	ldr	r2, [r7, #12]
 8013fcc:	6992      	ldr	r2, [r2, #24]
 8013fce:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8013fd2:	9201      	str	r2, [sp, #4]
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	462b      	mov	r3, r5
 8013fd8:	4622      	mov	r2, r4
 8013fda:	f7ff fd3a 	bl	8013a52 <RegionCommonChanVerifyDr>
 8013fde:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8013fe0:	f083 0301 	eor.w	r3, r3, #1
 8013fe4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d003      	beq.n	8013ff2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8013fea:	7dfb      	ldrb	r3, [r7, #23]
 8013fec:	f023 0302 	bic.w	r3, r3, #2
 8013ff0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8013ff2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013ff6:	2b0f      	cmp	r3, #15
 8013ff8:	d103      	bne.n	8014002 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	7a9b      	ldrb	r3, [r3, #10]
 8013ffe:	757b      	strb	r3, [r7, #21]
 8014000:	e01c      	b.n	801403c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801400e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014012:	4618      	mov	r0, r3
 8014014:	f7ff fd8f 	bl	8013b36 <RegionCommonValueInRange>
 8014018:	4603      	mov	r3, r0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d10e      	bne.n	801403c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014024:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014028:	429a      	cmp	r2, r3
 801402a:	da03      	bge.n	8014034 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	7f5b      	ldrb	r3, [r3, #29]
 8014030:	757b      	strb	r3, [r7, #21]
 8014032:	e003      	b.n	801403c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014034:	7dfb      	ldrb	r3, [r7, #23]
 8014036:	f023 0304 	bic.w	r3, r3, #4
 801403a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801403c:	7dfb      	ldrb	r3, [r7, #23]
 801403e:	2b07      	cmp	r3, #7
 8014040:	d105      	bne.n	801404e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8014042:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d101      	bne.n	801404e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801404a:	2301      	movs	r3, #1
 801404c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	7dba      	ldrb	r2, [r7, #22]
 8014052:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	7d7a      	ldrb	r2, [r7, #21]
 8014058:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801405a:	7d3a      	ldrb	r2, [r7, #20]
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	701a      	strb	r2, [r3, #0]

    return status;
 8014060:	7dfb      	ldrb	r3, [r7, #23]
}
 8014062:	4618      	mov	r0, r3
 8014064:	3718      	adds	r7, #24
 8014066:	46bd      	mov	sp, r7
 8014068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801406c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801406c:	b480      	push	{r7}
 801406e:	b083      	sub	sp, #12
 8014070:	af00      	add	r7, sp, #0
 8014072:	4603      	mov	r3, r0
 8014074:	6039      	str	r1, [r7, #0]
 8014076:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014078:	79fb      	ldrb	r3, [r7, #7]
 801407a:	4a06      	ldr	r2, [pc, #24]	; (8014094 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801407c:	fa02 f303 	lsl.w	r3, r2, r3
 8014080:	461a      	mov	r2, r3
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014088:	4618      	mov	r0, r3
 801408a:	370c      	adds	r7, #12
 801408c:	46bd      	mov	sp, r7
 801408e:	bc80      	pop	{r7}
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	000f4240 	.word	0x000f4240

08014098 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	4603      	mov	r3, r0
 80140a0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80140a2:	79fb      	ldrb	r3, [r7, #7]
 80140a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80140a8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	370c      	adds	r7, #12
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bc80      	pop	{r7}
 80140b4:	4770      	bx	lr
	...

080140b8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80140b8:	b480      	push	{r7}
 80140ba:	b085      	sub	sp, #20
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	607a      	str	r2, [r7, #4]
 80140c2:	603b      	str	r3, [r7, #0]
 80140c4:	460b      	mov	r3, r1
 80140c6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80140c8:	7afa      	ldrb	r2, [r7, #11]
 80140ca:	7afb      	ldrb	r3, [r7, #11]
 80140cc:	3b04      	subs	r3, #4
 80140ce:	4619      	mov	r1, r3
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	fb03 f101 	mul.w	r1, r3, r1
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80140dc:	fb00 f303 	mul.w	r3, r0, r3
 80140e0:	440b      	add	r3, r1
 80140e2:	005b      	lsls	r3, r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d013      	beq.n	8014110 <RegionCommonComputeRxWindowParameters+0x58>
 80140e8:	7afb      	ldrb	r3, [r7, #11]
 80140ea:	3b04      	subs	r3, #4
 80140ec:	4619      	mov	r1, r3
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	fb03 f101 	mul.w	r1, r3, r1
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80140fa:	fb00 f303 	mul.w	r3, r0, r3
 80140fe:	440b      	add	r3, r1
 8014100:	0059      	lsls	r1, r3, #1
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	440b      	add	r3, r1
 8014106:	1e59      	subs	r1, r3, #1
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	fbb1 f3f3 	udiv	r3, r1, r3
 801410e:	e00f      	b.n	8014130 <RegionCommonComputeRxWindowParameters+0x78>
 8014110:	7afb      	ldrb	r3, [r7, #11]
 8014112:	3b04      	subs	r3, #4
 8014114:	4619      	mov	r1, r3
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	fb03 f101 	mul.w	r1, r3, r1
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014122:	fb00 f303 	mul.w	r3, r0, r3
 8014126:	440b      	add	r3, r1
 8014128:	0059      	lsls	r1, r3, #1
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014130:	429a      	cmp	r2, r3
 8014132:	bf38      	it	cc
 8014134:	461a      	movcc	r2, r3
 8014136:	69bb      	ldr	r3, [r7, #24]
 8014138:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	4619      	mov	r1, r3
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	68fa      	ldr	r2, [r7, #12]
 8014146:	fb02 f303 	mul.w	r3, r2, r3
 801414a:	2b00      	cmp	r3, #0
 801414c:	d007      	beq.n	801415e <RegionCommonComputeRxWindowParameters+0xa6>
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	68fa      	ldr	r2, [r7, #12]
 8014154:	fb02 f303 	mul.w	r3, r2, r3
 8014158:	3301      	adds	r3, #1
 801415a:	085b      	lsrs	r3, r3, #1
 801415c:	e005      	b.n	801416a <RegionCommonComputeRxWindowParameters+0xb2>
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	68fa      	ldr	r2, [r7, #12]
 8014164:	fb02 f303 	mul.w	r3, r2, r3
 8014168:	085b      	lsrs	r3, r3, #1
 801416a:	1acb      	subs	r3, r1, r3
 801416c:	683a      	ldr	r2, [r7, #0]
 801416e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014172:	fb01 f202 	mul.w	r2, r1, r2
 8014176:	1a9b      	subs	r3, r3, r2
 8014178:	2b00      	cmp	r3, #0
 801417a:	dd27      	ble.n	80141cc <RegionCommonComputeRxWindowParameters+0x114>
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	4619      	mov	r1, r3
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	68fa      	ldr	r2, [r7, #12]
 8014188:	fb02 f303 	mul.w	r3, r2, r3
 801418c:	2b00      	cmp	r3, #0
 801418e:	d007      	beq.n	80141a0 <RegionCommonComputeRxWindowParameters+0xe8>
 8014190:	69bb      	ldr	r3, [r7, #24]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	fb02 f303 	mul.w	r3, r2, r3
 801419a:	3301      	adds	r3, #1
 801419c:	085b      	lsrs	r3, r3, #1
 801419e:	e005      	b.n	80141ac <RegionCommonComputeRxWindowParameters+0xf4>
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	fb02 f303 	mul.w	r3, r2, r3
 80141aa:	085b      	lsrs	r3, r3, #1
 80141ac:	1acb      	subs	r3, r1, r3
 80141ae:	683a      	ldr	r2, [r7, #0]
 80141b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80141b4:	fb01 f202 	mul.w	r2, r1, r2
 80141b8:	1a9b      	subs	r3, r3, r2
 80141ba:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80141be:	4a19      	ldr	r2, [pc, #100]	; (8014224 <RegionCommonComputeRxWindowParameters+0x16c>)
 80141c0:	fb82 1203 	smull	r1, r2, r2, r3
 80141c4:	1192      	asrs	r2, r2, #6
 80141c6:	17db      	asrs	r3, r3, #31
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	e024      	b.n	8014216 <RegionCommonComputeRxWindowParameters+0x15e>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	009b      	lsls	r3, r3, #2
 80141d0:	4619      	mov	r1, r3
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	68fa      	ldr	r2, [r7, #12]
 80141d8:	fb02 f303 	mul.w	r3, r2, r3
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d007      	beq.n	80141f0 <RegionCommonComputeRxWindowParameters+0x138>
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	fb02 f303 	mul.w	r3, r2, r3
 80141ea:	3301      	adds	r3, #1
 80141ec:	085b      	lsrs	r3, r3, #1
 80141ee:	e005      	b.n	80141fc <RegionCommonComputeRxWindowParameters+0x144>
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	68fa      	ldr	r2, [r7, #12]
 80141f6:	fb02 f303 	mul.w	r3, r2, r3
 80141fa:	085b      	lsrs	r3, r3, #1
 80141fc:	1acb      	subs	r3, r1, r3
 80141fe:	683a      	ldr	r2, [r7, #0]
 8014200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014204:	fb01 f202 	mul.w	r2, r1, r2
 8014208:	1a9b      	subs	r3, r3, r2
 801420a:	4a06      	ldr	r2, [pc, #24]	; (8014224 <RegionCommonComputeRxWindowParameters+0x16c>)
 801420c:	fb82 1203 	smull	r1, r2, r2, r3
 8014210:	1192      	asrs	r2, r2, #6
 8014212:	17db      	asrs	r3, r3, #31
 8014214:	1ad3      	subs	r3, r2, r3
 8014216:	69fa      	ldr	r2, [r7, #28]
 8014218:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801421a:	bf00      	nop
 801421c:	3714      	adds	r7, #20
 801421e:	46bd      	mov	sp, r7
 8014220:	bc80      	pop	{r7}
 8014222:	4770      	bx	lr
 8014224:	10624dd3 	.word	0x10624dd3

08014228 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b086      	sub	sp, #24
 801422c:	af00      	add	r7, sp, #0
 801422e:	4603      	mov	r3, r0
 8014230:	60b9      	str	r1, [r7, #8]
 8014232:	607a      	str	r2, [r7, #4]
 8014234:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014236:	2300      	movs	r3, #0
 8014238:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801423e:	005b      	lsls	r3, r3, #1
 8014240:	4618      	mov	r0, r3
 8014242:	f7ec fb17 	bl	8000874 <__aeabi_ui2f>
 8014246:	4603      	mov	r3, r0
 8014248:	4619      	mov	r1, r3
 801424a:	68b8      	ldr	r0, [r7, #8]
 801424c:	f7ec fa60 	bl	8000710 <__aeabi_fsub>
 8014250:	4603      	mov	r3, r0
 8014252:	6879      	ldr	r1, [r7, #4]
 8014254:	4618      	mov	r0, r3
 8014256:	f7ec fa5b 	bl	8000710 <__aeabi_fsub>
 801425a:	4603      	mov	r3, r0
 801425c:	4618      	mov	r0, r3
 801425e:	f7ec f94b 	bl	80004f8 <__aeabi_f2d>
 8014262:	4602      	mov	r2, r0
 8014264:	460b      	mov	r3, r1
 8014266:	4610      	mov	r0, r2
 8014268:	4619      	mov	r1, r3
 801426a:	f006 fe99 	bl	801afa0 <floor>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	4610      	mov	r0, r2
 8014274:	4619      	mov	r1, r3
 8014276:	f7ec fa1f 	bl	80006b8 <__aeabi_d2iz>
 801427a:	4603      	mov	r3, r0
 801427c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801427e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014282:	4618      	mov	r0, r3
 8014284:	3718      	adds	r7, #24
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}

0801428a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801428a:	b590      	push	{r4, r7, lr}
 801428c:	b087      	sub	sp, #28
 801428e:	af00      	add	r7, sp, #0
 8014290:	60f8      	str	r0, [r7, #12]
 8014292:	60b9      	str	r1, [r7, #8]
 8014294:	607a      	str	r2, [r7, #4]
 8014296:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014298:	2300      	movs	r3, #0
 801429a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80142a0:	2300      	movs	r3, #0
 80142a2:	757b      	strb	r3, [r7, #21]
 80142a4:	2300      	movs	r3, #0
 80142a6:	753b      	strb	r3, [r7, #20]
 80142a8:	e09c      	b.n	80143e4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80142aa:	2300      	movs	r3, #0
 80142ac:	74fb      	strb	r3, [r7, #19]
 80142ae:	e08f      	b.n	80143d0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	685a      	ldr	r2, [r3, #4]
 80142b4:	7d3b      	ldrb	r3, [r7, #20]
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	4413      	add	r3, r2
 80142ba:	881b      	ldrh	r3, [r3, #0]
 80142bc:	461a      	mov	r2, r3
 80142be:	7cfb      	ldrb	r3, [r7, #19]
 80142c0:	fa42 f303 	asr.w	r3, r2, r3
 80142c4:	f003 0301 	and.w	r3, r3, #1
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d07e      	beq.n	80143ca <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	689a      	ldr	r2, [r3, #8]
 80142d0:	7d79      	ldrb	r1, [r7, #21]
 80142d2:	7cfb      	ldrb	r3, [r7, #19]
 80142d4:	440b      	add	r3, r1
 80142d6:	4619      	mov	r1, r3
 80142d8:	460b      	mov	r3, r1
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	440b      	add	r3, r1
 80142de:	009b      	lsls	r3, r3, #2
 80142e0:	4413      	add	r3, r2
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d06b      	beq.n	80143c0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	f083 0301 	eor.w	r3, r3, #1
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d011      	beq.n	801431a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00d      	beq.n	801431a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	695a      	ldr	r2, [r3, #20]
 8014302:	7d3b      	ldrb	r3, [r7, #20]
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	7cfb      	ldrb	r3, [r7, #19]
 801430e:	fa42 f303 	asr.w	r3, r2, r3
 8014312:	f003 0301 	and.w	r3, r3, #1
 8014316:	2b00      	cmp	r3, #0
 8014318:	d054      	beq.n	80143c4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	785b      	ldrb	r3, [r3, #1]
 801431e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	689a      	ldr	r2, [r3, #8]
 8014324:	7d79      	ldrb	r1, [r7, #21]
 8014326:	7cfb      	ldrb	r3, [r7, #19]
 8014328:	440b      	add	r3, r1
 801432a:	4619      	mov	r1, r3
 801432c:	460b      	mov	r3, r1
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	440b      	add	r3, r1
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	4413      	add	r3, r2
 8014336:	7a1b      	ldrb	r3, [r3, #8]
 8014338:	f343 0303 	sbfx	r3, r3, #0, #4
 801433c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801433e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	689a      	ldr	r2, [r3, #8]
 8014344:	7d79      	ldrb	r1, [r7, #21]
 8014346:	7cfb      	ldrb	r3, [r7, #19]
 8014348:	440b      	add	r3, r1
 801434a:	4619      	mov	r1, r3
 801434c:	460b      	mov	r3, r1
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	440b      	add	r3, r1
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4413      	add	r3, r2
 8014356:	7a1b      	ldrb	r3, [r3, #8]
 8014358:	f343 1303 	sbfx	r3, r3, #4, #4
 801435c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801435e:	461a      	mov	r2, r3
 8014360:	4621      	mov	r1, r4
 8014362:	f7ff fbe8 	bl	8013b36 <RegionCommonValueInRange>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d02d      	beq.n	80143c8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	68da      	ldr	r2, [r3, #12]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	6899      	ldr	r1, [r3, #8]
 8014374:	7d78      	ldrb	r0, [r7, #21]
 8014376:	7cfb      	ldrb	r3, [r7, #19]
 8014378:	4403      	add	r3, r0
 801437a:	4618      	mov	r0, r3
 801437c:	4603      	mov	r3, r0
 801437e:	005b      	lsls	r3, r3, #1
 8014380:	4403      	add	r3, r0
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	440b      	add	r3, r1
 8014386:	7a5b      	ldrb	r3, [r3, #9]
 8014388:	4619      	mov	r1, r3
 801438a:	460b      	mov	r3, r1
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	440b      	add	r3, r1
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	4413      	add	r3, r2
 8014394:	7d1b      	ldrb	r3, [r3, #20]
 8014396:	f083 0301 	eor.w	r3, r3, #1
 801439a:	b2db      	uxtb	r3, r3
 801439c:	2b00      	cmp	r3, #0
 801439e:	d003      	beq.n	80143a8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80143a0:	7dbb      	ldrb	r3, [r7, #22]
 80143a2:	3301      	adds	r3, #1
 80143a4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80143a6:	e010      	b.n	80143ca <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80143a8:	7dfb      	ldrb	r3, [r7, #23]
 80143aa:	1c5a      	adds	r2, r3, #1
 80143ac:	75fa      	strb	r2, [r7, #23]
 80143ae:	461a      	mov	r2, r3
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	4413      	add	r3, r2
 80143b4:	7d79      	ldrb	r1, [r7, #21]
 80143b6:	7cfa      	ldrb	r2, [r7, #19]
 80143b8:	440a      	add	r2, r1
 80143ba:	b2d2      	uxtb	r2, r2
 80143bc:	701a      	strb	r2, [r3, #0]
 80143be:	e004      	b.n	80143ca <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80143c0:	bf00      	nop
 80143c2:	e002      	b.n	80143ca <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80143c4:	bf00      	nop
 80143c6:	e000      	b.n	80143ca <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80143c8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80143ca:	7cfb      	ldrb	r3, [r7, #19]
 80143cc:	3301      	adds	r3, #1
 80143ce:	74fb      	strb	r3, [r7, #19]
 80143d0:	7cfb      	ldrb	r3, [r7, #19]
 80143d2:	2b0f      	cmp	r3, #15
 80143d4:	f67f af6c 	bls.w	80142b0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80143d8:	7d7b      	ldrb	r3, [r7, #21]
 80143da:	3310      	adds	r3, #16
 80143dc:	757b      	strb	r3, [r7, #21]
 80143de:	7d3b      	ldrb	r3, [r7, #20]
 80143e0:	3301      	adds	r3, #1
 80143e2:	753b      	strb	r3, [r7, #20]
 80143e4:	7d7b      	ldrb	r3, [r7, #21]
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	8a1b      	ldrh	r3, [r3, #16]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	f4ff af5c 	bcc.w	80142aa <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	7dfa      	ldrb	r2, [r7, #23]
 80143f6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	7dba      	ldrb	r2, [r7, #22]
 80143fc:	701a      	strb	r2, [r3, #0]
}
 80143fe:	bf00      	nop
 8014400:	371c      	adds	r7, #28
 8014402:	46bd      	mov	sp, r7
 8014404:	bd90      	pop	{r4, r7, pc}

08014406 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014408:	b08b      	sub	sp, #44	; 0x2c
 801440a:	af04      	add	r7, sp, #16
 801440c:	60f8      	str	r0, [r7, #12]
 801440e:	60b9      	str	r1, [r7, #8]
 8014410:	607a      	str	r2, [r7, #4]
 8014412:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	4618      	mov	r0, r3
 801441a:	f005 fdbf 	bl	8019f9c <UTIL_TIMER_GetElapsedTime>
 801441e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	1ad2      	subs	r2, r2, r3
 8014428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801442a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801442e:	2201      	movs	r2, #1
 8014430:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	2200      	movs	r2, #0
 8014436:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d004      	beq.n	801444a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014444:	697a      	ldr	r2, [r7, #20]
 8014446:	429a      	cmp	r2, r3
 8014448:	d32b      	bcc.n	80144a2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	2200      	movs	r2, #0
 801444e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	69db      	ldr	r3, [r3, #28]
 8014454:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801445a:	68dd      	ldr	r5, [r3, #12]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	7a5e      	ldrb	r6, [r3, #9]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	7d1b      	ldrb	r3, [r3, #20]
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	6992      	ldr	r2, [r2, #24]
 801446e:	9203      	str	r2, [sp, #12]
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	f10d 0e04 	add.w	lr, sp, #4
 8014476:	320c      	adds	r2, #12
 8014478:	e892 0003 	ldmia.w	r2, {r0, r1}
 801447c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014480:	9300      	str	r3, [sp, #0]
 8014482:	4663      	mov	r3, ip
 8014484:	4632      	mov	r2, r6
 8014486:	4629      	mov	r1, r5
 8014488:	4620      	mov	r0, r4
 801448a:	f7ff fc25 	bl	8013cd8 <RegionCommonUpdateBandTimeOff>
 801448e:	4602      	mov	r2, r0
 8014490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014492:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	69d8      	ldr	r0, [r3, #28]
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449a:	683a      	ldr	r2, [r7, #0]
 801449c:	6879      	ldr	r1, [r7, #4]
 801449e:	f7ff fef4 	bl	801428a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d004      	beq.n	80144b4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80144aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144ac:	2200      	movs	r2, #0
 80144ae:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80144b0:	2300      	movs	r3, #0
 80144b2:	e006      	b.n	80144c2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80144b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d001      	beq.n	80144c0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80144bc:	230b      	movs	r3, #11
 80144be:	e000      	b.n	80144c2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80144c0:	230c      	movs	r3, #12
    }
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	371c      	adds	r7, #28
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144ca <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80144ca:	b5b0      	push	{r4, r5, r7, lr}
 80144cc:	b086      	sub	sp, #24
 80144ce:	af02      	add	r7, sp, #8
 80144d0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f993 2000 	ldrsb.w	r2, [r3]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d103      	bne.n	80144f0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80144ee:	e026      	b.n	801453e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80144f0:	7bfb      	ldrb	r3, [r7, #15]
 80144f2:	3b01      	subs	r3, #1
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80144fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014502:	429a      	cmp	r2, r3
 8014504:	d019      	beq.n	801453a <RegionCommonGetNextLowerTxDr+0x70>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	78d8      	ldrb	r0, [r3, #3]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6859      	ldr	r1, [r3, #4]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	6892      	ldr	r2, [r2, #8]
 801451e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014522:	9201      	str	r2, [sp, #4]
 8014524:	9300      	str	r3, [sp, #0]
 8014526:	462b      	mov	r3, r5
 8014528:	4622      	mov	r2, r4
 801452a:	f7ff fa92 	bl	8013a52 <RegionCommonChanVerifyDr>
 801452e:	4603      	mov	r3, r0
 8014530:	f083 0301 	eor.w	r3, r3, #1
 8014534:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014536:	2b00      	cmp	r3, #0
 8014538:	d1da      	bne.n	80144f0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801453e:	4618      	mov	r0, r3
 8014540:	3710      	adds	r7, #16
 8014542:	46bd      	mov	sp, r7
 8014544:	bdb0      	pop	{r4, r5, r7, pc}

08014546 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014546:	b480      	push	{r7}
 8014548:	b083      	sub	sp, #12
 801454a:	af00      	add	r7, sp, #0
 801454c:	4603      	mov	r3, r0
 801454e:	460a      	mov	r2, r1
 8014550:	71fb      	strb	r3, [r7, #7]
 8014552:	4613      	mov	r3, r2
 8014554:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014556:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801455e:	4293      	cmp	r3, r2
 8014560:	bfb8      	it	lt
 8014562:	4613      	movlt	r3, r2
 8014564:	b25b      	sxtb	r3, r3
}
 8014566:	4618      	mov	r0, r3
 8014568:	370c      	adds	r7, #12
 801456a:	46bd      	mov	sp, r7
 801456c:	bc80      	pop	{r7}
 801456e:	4770      	bx	lr

08014570 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	683a      	ldr	r2, [r7, #0]
 8014580:	4413      	add	r3, r2
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4a07      	ldr	r2, [pc, #28]	; (80145a4 <RegionCommonGetBandwidth+0x34>)
 8014586:	4293      	cmp	r3, r2
 8014588:	d004      	beq.n	8014594 <RegionCommonGetBandwidth+0x24>
 801458a:	4a07      	ldr	r2, [pc, #28]	; (80145a8 <RegionCommonGetBandwidth+0x38>)
 801458c:	4293      	cmp	r3, r2
 801458e:	d003      	beq.n	8014598 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014590:	2300      	movs	r3, #0
 8014592:	e002      	b.n	801459a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014594:	2301      	movs	r3, #1
 8014596:	e000      	b.n	801459a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014598:	2302      	movs	r3, #2
    }
}
 801459a:	4618      	mov	r0, r3
 801459c:	370c      	adds	r7, #12
 801459e:	46bd      	mov	sp, r7
 80145a0:	bc80      	pop	{r7}
 80145a2:	4770      	bx	lr
 80145a4:	0003d090 	.word	0x0003d090
 80145a8:	0007a120 	.word	0x0007a120

080145ac <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af04      	add	r7, sp, #16
 80145b2:	4603      	mov	r3, r0
 80145b4:	6039      	str	r1, [r7, #0]
 80145b6:	71fb      	strb	r3, [r7, #7]
 80145b8:	4613      	mov	r3, r2
 80145ba:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80145bc:	79fb      	ldrb	r3, [r7, #7]
 80145be:	2b05      	cmp	r3, #5
 80145c0:	d810      	bhi.n	80145e4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80145c2:	79fb      	ldrb	r3, [r7, #7]
 80145c4:	4a0f      	ldr	r2, [pc, #60]	; (8014604 <RegionCommonRxConfigPrint+0x58>)
 80145c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145ca:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80145ce:	9202      	str	r2, [sp, #8]
 80145d0:	683a      	ldr	r2, [r7, #0]
 80145d2:	9201      	str	r2, [sp, #4]
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	4b0c      	ldr	r3, [pc, #48]	; (8014608 <RegionCommonRxConfigPrint+0x5c>)
 80145d8:	2201      	movs	r2, #1
 80145da:	2100      	movs	r1, #0
 80145dc:	2002      	movs	r0, #2
 80145de:	f005 fdbb 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80145e2:	e00a      	b.n	80145fa <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80145e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80145e8:	9301      	str	r3, [sp, #4]
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	4b07      	ldr	r3, [pc, #28]	; (801460c <RegionCommonRxConfigPrint+0x60>)
 80145f0:	2201      	movs	r2, #1
 80145f2:	2100      	movs	r1, #0
 80145f4:	2002      	movs	r0, #2
 80145f6:	f005 fdaf 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
}
 80145fa:	bf00      	nop
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	2000011c 	.word	0x2000011c
 8014608:	0801b43c 	.word	0x0801b43c
 801460c:	0801b45c 	.word	0x0801b45c

08014610 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af02      	add	r7, sp, #8
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	460b      	mov	r3, r1
 801461a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801461c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014620:	9301      	str	r3, [sp, #4]
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	4b05      	ldr	r3, [pc, #20]	; (801463c <RegionCommonTxConfigPrint+0x2c>)
 8014628:	2201      	movs	r2, #1
 801462a:	2100      	movs	r1, #0
 801462c:	2002      	movs	r0, #2
 801462e:	f005 fd93 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
}
 8014632:	bf00      	nop
 8014634:	3708      	adds	r7, #8
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	0801b478 	.word	0x0801b478

08014640 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801464a:	4b2d      	ldr	r3, [pc, #180]	; (8014700 <VerifyRfFreq+0xc0>)
 801464c:	6a1b      	ldr	r3, [r3, #32]
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	4798      	blx	r3
 8014652:	4603      	mov	r3, r0
 8014654:	f083 0301 	eor.w	r3, r3, #1
 8014658:	b2db      	uxtb	r3, r3
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <VerifyRfFreq+0x22>
    {
        return false;
 801465e:	2300      	movs	r3, #0
 8014660:	e04a      	b.n	80146f8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4a27      	ldr	r2, [pc, #156]	; (8014704 <VerifyRfFreq+0xc4>)
 8014666:	4293      	cmp	r3, r2
 8014668:	d307      	bcc.n	801467a <VerifyRfFreq+0x3a>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4a26      	ldr	r2, [pc, #152]	; (8014708 <VerifyRfFreq+0xc8>)
 801466e:	4293      	cmp	r3, r2
 8014670:	d803      	bhi.n	801467a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	2202      	movs	r2, #2
 8014676:	701a      	strb	r2, [r3, #0]
 8014678:	e03d      	b.n	80146f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4a22      	ldr	r2, [pc, #136]	; (8014708 <VerifyRfFreq+0xc8>)
 801467e:	4293      	cmp	r3, r2
 8014680:	d907      	bls.n	8014692 <VerifyRfFreq+0x52>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	4a21      	ldr	r2, [pc, #132]	; (801470c <VerifyRfFreq+0xcc>)
 8014686:	4293      	cmp	r3, r2
 8014688:	d803      	bhi.n	8014692 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	2200      	movs	r2, #0
 801468e:	701a      	strb	r2, [r3, #0]
 8014690:	e031      	b.n	80146f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	4a1d      	ldr	r2, [pc, #116]	; (801470c <VerifyRfFreq+0xcc>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d907      	bls.n	80146aa <VerifyRfFreq+0x6a>
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	4a1c      	ldr	r2, [pc, #112]	; (8014710 <VerifyRfFreq+0xd0>)
 801469e:	4293      	cmp	r3, r2
 80146a0:	d803      	bhi.n	80146aa <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	2201      	movs	r2, #1
 80146a6:	701a      	strb	r2, [r3, #0]
 80146a8:	e025      	b.n	80146f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4a19      	ldr	r2, [pc, #100]	; (8014714 <VerifyRfFreq+0xd4>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d907      	bls.n	80146c2 <VerifyRfFreq+0x82>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	4a18      	ldr	r2, [pc, #96]	; (8014718 <VerifyRfFreq+0xd8>)
 80146b6:	4293      	cmp	r3, r2
 80146b8:	d803      	bhi.n	80146c2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	2205      	movs	r2, #5
 80146be:	701a      	strb	r2, [r3, #0]
 80146c0:	e019      	b.n	80146f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	4a15      	ldr	r2, [pc, #84]	; (801471c <VerifyRfFreq+0xdc>)
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d907      	bls.n	80146da <VerifyRfFreq+0x9a>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4a14      	ldr	r2, [pc, #80]	; (8014720 <VerifyRfFreq+0xe0>)
 80146ce:	4293      	cmp	r3, r2
 80146d0:	d803      	bhi.n	80146da <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	2203      	movs	r2, #3
 80146d6:	701a      	strb	r2, [r3, #0]
 80146d8:	e00d      	b.n	80146f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	4a11      	ldr	r2, [pc, #68]	; (8014724 <VerifyRfFreq+0xe4>)
 80146de:	4293      	cmp	r3, r2
 80146e0:	d307      	bcc.n	80146f2 <VerifyRfFreq+0xb2>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4a10      	ldr	r2, [pc, #64]	; (8014728 <VerifyRfFreq+0xe8>)
 80146e6:	4293      	cmp	r3, r2
 80146e8:	d803      	bhi.n	80146f2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	2204      	movs	r2, #4
 80146ee:	701a      	strb	r2, [r3, #0]
 80146f0:	e001      	b.n	80146f6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80146f2:	2300      	movs	r3, #0
 80146f4:	e000      	b.n	80146f8 <VerifyRfFreq+0xb8>
    }
    return true;
 80146f6:	2301      	movs	r3, #1
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	0801ba18 	.word	0x0801ba18
 8014704:	337055c0 	.word	0x337055c0
 8014708:	338eda3f 	.word	0x338eda3f
 801470c:	33bca100 	.word	0x33bca100
 8014710:	33c5c8c0 	.word	0x33c5c8c0
 8014714:	33c74f5f 	.word	0x33c74f5f
 8014718:	33cef080 	.word	0x33cef080
 801471c:	33d1fdbf 	.word	0x33d1fdbf
 8014720:	33d5ce50 	.word	0x33d5ce50
 8014724:	33d691a0 	.word	0x33d691a0
 8014728:	33db2580 	.word	0x33db2580

0801472c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801472c:	b590      	push	{r4, r7, lr}
 801472e:	b08b      	sub	sp, #44	; 0x2c
 8014730:	af04      	add	r7, sp, #16
 8014732:	4603      	mov	r3, r0
 8014734:	460a      	mov	r2, r1
 8014736:	71fb      	strb	r3, [r7, #7]
 8014738:	4613      	mov	r3, r2
 801473a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014740:	4a1f      	ldr	r2, [pc, #124]	; (80147c0 <GetTimeOnAir+0x94>)
 8014742:	5cd3      	ldrb	r3, [r2, r3]
 8014744:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8014746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801474a:	491e      	ldr	r1, [pc, #120]	; (80147c4 <GetTimeOnAir+0x98>)
 801474c:	4618      	mov	r0, r3
 801474e:	f7ff ff0f 	bl	8014570 <RegionCommonGetBandwidth>
 8014752:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014754:	2300      	movs	r3, #0
 8014756:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801475c:	2b07      	cmp	r3, #7
 801475e:	d118      	bne.n	8014792 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014760:	4b19      	ldr	r3, [pc, #100]	; (80147c8 <GetTimeOnAir+0x9c>)
 8014762:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801476c:	fb02 f303 	mul.w	r3, r2, r3
 8014770:	4619      	mov	r1, r3
 8014772:	88bb      	ldrh	r3, [r7, #4]
 8014774:	b2db      	uxtb	r3, r3
 8014776:	2201      	movs	r2, #1
 8014778:	9203      	str	r2, [sp, #12]
 801477a:	9302      	str	r3, [sp, #8]
 801477c:	2300      	movs	r3, #0
 801477e:	9301      	str	r3, [sp, #4]
 8014780:	2305      	movs	r3, #5
 8014782:	9300      	str	r3, [sp, #0]
 8014784:	2300      	movs	r3, #0
 8014786:	460a      	mov	r2, r1
 8014788:	68f9      	ldr	r1, [r7, #12]
 801478a:	2000      	movs	r0, #0
 801478c:	47a0      	blx	r4
 801478e:	6178      	str	r0, [r7, #20]
 8014790:	e011      	b.n	80147b6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014792:	4b0d      	ldr	r3, [pc, #52]	; (80147c8 <GetTimeOnAir+0x9c>)
 8014794:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014796:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801479a:	88bb      	ldrh	r3, [r7, #4]
 801479c:	b2db      	uxtb	r3, r3
 801479e:	2101      	movs	r1, #1
 80147a0:	9103      	str	r1, [sp, #12]
 80147a2:	9302      	str	r3, [sp, #8]
 80147a4:	2300      	movs	r3, #0
 80147a6:	9301      	str	r3, [sp, #4]
 80147a8:	2308      	movs	r3, #8
 80147aa:	9300      	str	r3, [sp, #0]
 80147ac:	2301      	movs	r3, #1
 80147ae:	68f9      	ldr	r1, [r7, #12]
 80147b0:	2001      	movs	r0, #1
 80147b2:	47a0      	blx	r4
 80147b4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80147b6:	697b      	ldr	r3, [r7, #20]
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	371c      	adds	r7, #28
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd90      	pop	{r4, r7, pc}
 80147c0:	0801b9e0 	.word	0x0801b9e0
 80147c4:	0801b9e8 	.word	0x0801b9e8
 80147c8:	0801ba18 	.word	0x0801ba18

080147cc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b088      	sub	sp, #32
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80147d4:	2300      	movs	r3, #0
 80147d6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	3b01      	subs	r3, #1
 80147de:	2b38      	cmp	r3, #56	; 0x38
 80147e0:	f200 8128 	bhi.w	8014a34 <RegionEU868GetPhyParam+0x268>
 80147e4:	a201      	add	r2, pc, #4	; (adr r2, 80147ec <RegionEU868GetPhyParam+0x20>)
 80147e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147ea:	bf00      	nop
 80147ec:	080148d1 	.word	0x080148d1
 80147f0:	080148d7 	.word	0x080148d7
 80147f4:	08014a35 	.word	0x08014a35
 80147f8:	08014a35 	.word	0x08014a35
 80147fc:	08014a35 	.word	0x08014a35
 8014800:	080148dd 	.word	0x080148dd
 8014804:	08014a35 	.word	0x08014a35
 8014808:	08014917 	.word	0x08014917
 801480c:	08014a35 	.word	0x08014a35
 8014810:	0801491d 	.word	0x0801491d
 8014814:	08014923 	.word	0x08014923
 8014818:	08014929 	.word	0x08014929
 801481c:	0801492f 	.word	0x0801492f
 8014820:	0801493f 	.word	0x0801493f
 8014824:	0801494f 	.word	0x0801494f
 8014828:	08014955 	.word	0x08014955
 801482c:	0801495d 	.word	0x0801495d
 8014830:	08014965 	.word	0x08014965
 8014834:	0801496d 	.word	0x0801496d
 8014838:	08014975 	.word	0x08014975
 801483c:	0801497d 	.word	0x0801497d
 8014840:	08014985 	.word	0x08014985
 8014844:	08014999 	.word	0x08014999
 8014848:	0801499f 	.word	0x0801499f
 801484c:	080149a5 	.word	0x080149a5
 8014850:	080149ab 	.word	0x080149ab
 8014854:	080149b7 	.word	0x080149b7
 8014858:	080149c3 	.word	0x080149c3
 801485c:	080149c9 	.word	0x080149c9
 8014860:	080149d1 	.word	0x080149d1
 8014864:	080149d7 	.word	0x080149d7
 8014868:	080149dd 	.word	0x080149dd
 801486c:	080149e5 	.word	0x080149e5
 8014870:	080148e3 	.word	0x080148e3
 8014874:	08014a35 	.word	0x08014a35
 8014878:	08014a35 	.word	0x08014a35
 801487c:	08014a35 	.word	0x08014a35
 8014880:	08014a35 	.word	0x08014a35
 8014884:	08014a35 	.word	0x08014a35
 8014888:	08014a35 	.word	0x08014a35
 801488c:	08014a35 	.word	0x08014a35
 8014890:	08014a35 	.word	0x08014a35
 8014894:	08014a35 	.word	0x08014a35
 8014898:	08014a35 	.word	0x08014a35
 801489c:	08014a35 	.word	0x08014a35
 80148a0:	08014a35 	.word	0x08014a35
 80148a4:	08014a35 	.word	0x08014a35
 80148a8:	080149eb 	.word	0x080149eb
 80148ac:	080149f1 	.word	0x080149f1
 80148b0:	080149ff 	.word	0x080149ff
 80148b4:	08014a35 	.word	0x08014a35
 80148b8:	08014a35 	.word	0x08014a35
 80148bc:	08014a05 	.word	0x08014a05
 80148c0:	08014a0b 	.word	0x08014a0b
 80148c4:	08014a35 	.word	0x08014a35
 80148c8:	08014a11 	.word	0x08014a11
 80148cc:	08014a21 	.word	0x08014a21
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80148d0:	2300      	movs	r3, #0
 80148d2:	61bb      	str	r3, [r7, #24]
            break;
 80148d4:	e0af      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80148d6:	2300      	movs	r3, #0
 80148d8:	61bb      	str	r3, [r7, #24]
            break;
 80148da:	e0ac      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80148dc:	2300      	movs	r3, #0
 80148de:	61bb      	str	r3, [r7, #24]
            break;
 80148e0:	e0a9      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80148e8:	733b      	strb	r3, [r7, #12]
 80148ea:	2307      	movs	r3, #7
 80148ec:	737b      	strb	r3, [r7, #13]
 80148ee:	2300      	movs	r3, #0
 80148f0:	73bb      	strb	r3, [r7, #14]
 80148f2:	2310      	movs	r3, #16
 80148f4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80148f6:	4b53      	ldr	r3, [pc, #332]	; (8014a44 <RegionEU868GetPhyParam+0x278>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80148fe:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014900:	4b50      	ldr	r3, [pc, #320]	; (8014a44 <RegionEU868GetPhyParam+0x278>)
 8014902:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014904:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014906:	f107 030c 	add.w	r3, r7, #12
 801490a:	4618      	mov	r0, r3
 801490c:	f7ff fddd 	bl	80144ca <RegionCommonGetNextLowerTxDr>
 8014910:	4603      	mov	r3, r0
 8014912:	61bb      	str	r3, [r7, #24]
            break;
 8014914:	e08f      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8014916:	2300      	movs	r3, #0
 8014918:	61bb      	str	r3, [r7, #24]
            break;
 801491a:	e08c      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801491c:	2300      	movs	r3, #0
 801491e:	61bb      	str	r3, [r7, #24]
            break;
 8014920:	e089      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014922:	2340      	movs	r3, #64	; 0x40
 8014924:	61bb      	str	r3, [r7, #24]
            break;
 8014926:	e086      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014928:	2320      	movs	r3, #32
 801492a:	61bb      	str	r3, [r7, #24]
            break;
 801492c:	e083      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014934:	461a      	mov	r2, r3
 8014936:	4b44      	ldr	r3, [pc, #272]	; (8014a48 <RegionEU868GetPhyParam+0x27c>)
 8014938:	5c9b      	ldrb	r3, [r3, r2]
 801493a:	61bb      	str	r3, [r7, #24]
            break;
 801493c:	e07b      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014944:	461a      	mov	r2, r3
 8014946:	4b41      	ldr	r3, [pc, #260]	; (8014a4c <RegionEU868GetPhyParam+0x280>)
 8014948:	5c9b      	ldrb	r3, [r3, r2]
 801494a:	61bb      	str	r3, [r7, #24]
            break;
 801494c:	e073      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801494e:	2301      	movs	r3, #1
 8014950:	61bb      	str	r3, [r7, #24]
            break;
 8014952:	e070      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8014954:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8014958:	61bb      	str	r3, [r7, #24]
            break;
 801495a:	e06c      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801495c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014960:	61bb      	str	r3, [r7, #24]
            break;
 8014962:	e068      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014964:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8014968:	61bb      	str	r3, [r7, #24]
            break;
 801496a:	e064      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801496c:	f241 3388 	movw	r3, #5000	; 0x1388
 8014970:	61bb      	str	r3, [r7, #24]
            break;
 8014972:	e060      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014974:	f241 7370 	movw	r3, #6000	; 0x1770
 8014978:	61bb      	str	r3, [r7, #24]
            break;
 801497a:	e05c      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801497c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014980:	61bb      	str	r3, [r7, #24]
            break;
 8014982:	e058      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8014984:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014988:	4831      	ldr	r0, [pc, #196]	; (8014a50 <RegionEU868GetPhyParam+0x284>)
 801498a:	f001 f879 	bl	8015a80 <randr>
 801498e:	4603      	mov	r3, r0
 8014990:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8014994:	61bb      	str	r3, [r7, #24]
            break;
 8014996:	e04e      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014998:	2300      	movs	r3, #0
 801499a:	61bb      	str	r3, [r7, #24]
            break;
 801499c:	e04b      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801499e:	4b2d      	ldr	r3, [pc, #180]	; (8014a54 <RegionEU868GetPhyParam+0x288>)
 80149a0:	61bb      	str	r3, [r7, #24]
            break;
 80149a2:	e048      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80149a4:	2300      	movs	r3, #0
 80149a6:	61bb      	str	r3, [r7, #24]
            break;
 80149a8:	e045      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80149aa:	4b26      	ldr	r3, [pc, #152]	; (8014a44 <RegionEU868GetPhyParam+0x278>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80149b2:	61bb      	str	r3, [r7, #24]
            break;
 80149b4:	e03f      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80149b6:	4b23      	ldr	r3, [pc, #140]	; (8014a44 <RegionEU868GetPhyParam+0x278>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80149be:	61bb      	str	r3, [r7, #24]
            break;
 80149c0:	e039      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80149c2:	2310      	movs	r3, #16
 80149c4:	61bb      	str	r3, [r7, #24]
            break;
 80149c6:	e036      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80149c8:	4b1e      	ldr	r3, [pc, #120]	; (8014a44 <RegionEU868GetPhyParam+0x278>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	61bb      	str	r3, [r7, #24]
            break;
 80149ce:	e032      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80149d0:	2300      	movs	r3, #0
 80149d2:	61bb      	str	r3, [r7, #24]
            break;
 80149d4:	e02f      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80149d6:	2300      	movs	r3, #0
 80149d8:	61bb      	str	r3, [r7, #24]
            break;
 80149da:	e02c      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80149dc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80149e0:	61bb      	str	r3, [r7, #24]
            break;
 80149e2:	e028      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80149e4:	4b1c      	ldr	r3, [pc, #112]	; (8014a58 <RegionEU868GetPhyParam+0x28c>)
 80149e6:	61bb      	str	r3, [r7, #24]
            break;
 80149e8:	e025      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80149ea:	4b1a      	ldr	r3, [pc, #104]	; (8014a54 <RegionEU868GetPhyParam+0x288>)
 80149ec:	61bb      	str	r3, [r7, #24]
            break;
 80149ee:	e022      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80149f0:	2311      	movs	r3, #17
 80149f2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80149f4:	2302      	movs	r3, #2
 80149f6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80149f8:	2300      	movs	r3, #0
 80149fa:	76bb      	strb	r3, [r7, #26]
            break;
 80149fc:	e01b      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80149fe:	2303      	movs	r3, #3
 8014a00:	61bb      	str	r3, [r7, #24]
            break;
 8014a02:	e018      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8014a04:	4b13      	ldr	r3, [pc, #76]	; (8014a54 <RegionEU868GetPhyParam+0x288>)
 8014a06:	61bb      	str	r3, [r7, #24]
            break;
 8014a08:	e015      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	61bb      	str	r3, [r7, #24]
            break;
 8014a0e:	e012      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014a16:	461a      	mov	r2, r3
 8014a18:	4b10      	ldr	r3, [pc, #64]	; (8014a5c <RegionEU868GetPhyParam+0x290>)
 8014a1a:	5c9b      	ldrb	r3, [r3, r2]
 8014a1c:	61bb      	str	r3, [r7, #24]
            break;
 8014a1e:	e00a      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014a26:	490e      	ldr	r1, [pc, #56]	; (8014a60 <RegionEU868GetPhyParam+0x294>)
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7ff fda1 	bl	8014570 <RegionCommonGetBandwidth>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	61bb      	str	r3, [r7, #24]
            break;
 8014a32:	e000      	b.n	8014a36 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8014a34:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8014a36:	69bb      	ldr	r3, [r7, #24]
 8014a38:	61fb      	str	r3, [r7, #28]
 8014a3a:	69fb      	ldr	r3, [r7, #28]
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3720      	adds	r7, #32
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}
 8014a44:	20001ae0 	.word	0x20001ae0
 8014a48:	0801ba08 	.word	0x0801ba08
 8014a4c:	0801ba10 	.word	0x0801ba10
 8014a50:	fffffc18 	.word	0xfffffc18
 8014a54:	33d3e608 	.word	0x33d3e608
 8014a58:	4009999a 	.word	0x4009999a
 8014a5c:	0801b9e0 	.word	0x0801b9e0
 8014a60:	0801b9e8 	.word	0x0801b9e8

08014a64 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014a64:	b590      	push	{r4, r7, lr}
 8014a66:	b085      	sub	sp, #20
 8014a68:	af02      	add	r7, sp, #8
 8014a6a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014a6c:	4b11      	ldr	r3, [pc, #68]	; (8014ab4 <RegionEU868SetBandTxDone+0x50>)
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	4b11      	ldr	r3, [pc, #68]	; (8014ab8 <RegionEU868SetBandTxDone+0x54>)
 8014a72:	6819      	ldr	r1, [r3, #0]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	005b      	lsls	r3, r3, #1
 8014a7e:	4403      	add	r3, r0
 8014a80:	009b      	lsls	r3, r3, #2
 8014a82:	440b      	add	r3, r1
 8014a84:	3309      	adds	r3, #9
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	4619      	mov	r1, r3
 8014a8a:	460b      	mov	r3, r1
 8014a8c:	005b      	lsls	r3, r3, #1
 8014a8e:	440b      	add	r3, r1
 8014a90:	00db      	lsls	r3, r3, #3
 8014a92:	18d0      	adds	r0, r2, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6899      	ldr	r1, [r3, #8]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	785c      	ldrb	r4, [r3, #1]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	691a      	ldr	r2, [r3, #16]
 8014aa0:	9200      	str	r2, [sp, #0]
 8014aa2:	68db      	ldr	r3, [r3, #12]
 8014aa4:	4622      	mov	r2, r4
 8014aa6:	f7ff f8e9 	bl	8013c7c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8014aaa:	bf00      	nop
 8014aac:	370c      	adds	r7, #12
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd90      	pop	{r4, r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	20001adc 	.word	0x20001adc
 8014ab8:	20001ae0 	.word	0x20001ae0

08014abc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b0b0      	sub	sp, #192	; 0xc0
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8014ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014ac8:	2290      	movs	r2, #144	; 0x90
 8014aca:	2100      	movs	r1, #0
 8014acc:	4618      	mov	r0, r3
 8014ace:	f005 fddf 	bl	801a690 <memset>
 8014ad2:	2364      	movs	r3, #100	; 0x64
 8014ad4:	863b      	strh	r3, [r7, #48]	; 0x30
 8014ad6:	2364      	movs	r3, #100	; 0x64
 8014ad8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8014adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014ae0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8014ae4:	230a      	movs	r3, #10
 8014ae6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8014aea:	2364      	movs	r3, #100	; 0x64
 8014aec:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8014af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014af4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	7a1b      	ldrb	r3, [r3, #8]
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d05e      	beq.n	8014bbe <RegionEU868InitDefaults+0x102>
 8014b00:	2b02      	cmp	r3, #2
 8014b02:	dc6b      	bgt.n	8014bdc <RegionEU868InitDefaults+0x120>
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d002      	beq.n	8014b0e <RegionEU868InitDefaults+0x52>
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d03f      	beq.n	8014b8c <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8014b0c:	e066      	b.n	8014bdc <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d063      	beq.n	8014bde <RegionEU868InitDefaults+0x122>
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d05f      	beq.n	8014bde <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4a30      	ldr	r2, [pc, #192]	; (8014be4 <RegionEU868InitDefaults+0x128>)
 8014b24:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	4a2f      	ldr	r2, [pc, #188]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b2c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8014b2e:	4b2d      	ldr	r3, [pc, #180]	; (8014be4 <RegionEU868InitDefaults+0x128>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	4618      	mov	r0, r3
 8014b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014b38:	2290      	movs	r2, #144	; 0x90
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	f000 ffb7 	bl	8015aae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8014b40:	4b29      	ldr	r3, [pc, #164]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4a29      	ldr	r2, [pc, #164]	; (8014bec <RegionEU868InitDefaults+0x130>)
 8014b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8014b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8014b4c:	4b26      	ldr	r3, [pc, #152]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	4a27      	ldr	r2, [pc, #156]	; (8014bf0 <RegionEU868InitDefaults+0x134>)
 8014b52:	330c      	adds	r3, #12
 8014b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8014b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8014b5a:	4b23      	ldr	r3, [pc, #140]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	4a25      	ldr	r2, [pc, #148]	; (8014bf4 <RegionEU868InitDefaults+0x138>)
 8014b60:	3318      	adds	r3, #24
 8014b62:	ca07      	ldmia	r2, {r0, r1, r2}
 8014b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8014b68:	4b1f      	ldr	r3, [pc, #124]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2207      	movs	r2, #7
 8014b6e:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014b72:	4b1d      	ldr	r3, [pc, #116]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8014b7a:	4b1b      	ldr	r3, [pc, #108]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8014b82:	2201      	movs	r2, #1
 8014b84:	4619      	mov	r1, r3
 8014b86:	f7ff f853 	bl	8013c30 <RegionCommonChanMaskCopy>
 8014b8a:	e028      	b.n	8014bde <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014b8c:	4b16      	ldr	r3, [pc, #88]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	2200      	movs	r2, #0
 8014b92:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014b94:	4b14      	ldr	r3, [pc, #80]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8014b9c:	4b12      	ldr	r3, [pc, #72]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014ba4:	4b10      	ldr	r3, [pc, #64]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8014bac:	4b0e      	ldr	r3, [pc, #56]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	f7ff f83a 	bl	8013c30 <RegionCommonChanMaskCopy>
            break;
 8014bbc:	e00f      	b.n	8014bde <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014bbe:	4b0a      	ldr	r3, [pc, #40]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8014bc6:	4b08      	ldr	r3, [pc, #32]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8014bce:	4b06      	ldr	r3, [pc, #24]	; (8014be8 <RegionEU868InitDefaults+0x12c>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	430a      	orrs	r2, r1
 8014bd4:	b292      	uxth	r2, r2
 8014bd6:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8014bda:	e000      	b.n	8014bde <RegionEU868InitDefaults+0x122>
            break;
 8014bdc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014bde:	37c0      	adds	r7, #192	; 0xc0
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}
 8014be4:	20001adc 	.word	0x20001adc
 8014be8:	20001ae0 	.word	0x20001ae0
 8014bec:	0801b494 	.word	0x0801b494
 8014bf0:	0801b4a0 	.word	0x0801b4a0
 8014bf4:	0801b4ac 	.word	0x0801b4ac

08014bf8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	460b      	mov	r3, r1
 8014c02:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8014c04:	78fb      	ldrb	r3, [r7, #3]
 8014c06:	2b0f      	cmp	r3, #15
 8014c08:	d86c      	bhi.n	8014ce4 <RegionEU868Verify+0xec>
 8014c0a:	a201      	add	r2, pc, #4	; (adr r2, 8014c10 <RegionEU868Verify+0x18>)
 8014c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c10:	08014c51 	.word	0x08014c51
 8014c14:	08014ce5 	.word	0x08014ce5
 8014c18:	08014ce5 	.word	0x08014ce5
 8014c1c:	08014ce5 	.word	0x08014ce5
 8014c20:	08014ce5 	.word	0x08014ce5
 8014c24:	08014c69 	.word	0x08014c69
 8014c28:	08014c87 	.word	0x08014c87
 8014c2c:	08014ca5 	.word	0x08014ca5
 8014c30:	08014ce5 	.word	0x08014ce5
 8014c34:	08014cc3 	.word	0x08014cc3
 8014c38:	08014cc3 	.word	0x08014cc3
 8014c3c:	08014ce5 	.word	0x08014ce5
 8014c40:	08014ce5 	.word	0x08014ce5
 8014c44:	08014ce5 	.word	0x08014ce5
 8014c48:	08014ce5 	.word	0x08014ce5
 8014c4c:	08014ce1 	.word	0x08014ce1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8014c50:	2300      	movs	r3, #0
 8014c52:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	f107 020f 	add.w	r2, r7, #15
 8014c5c:	4611      	mov	r1, r2
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7ff fcee 	bl	8014640 <VerifyRfFreq>
 8014c64:	4603      	mov	r3, r0
 8014c66:	e03e      	b.n	8014ce6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f993 3000 	ldrsb.w	r3, [r3]
 8014c6e:	2207      	movs	r2, #7
 8014c70:	2100      	movs	r1, #0
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7fe ff5f 	bl	8013b36 <RegionCommonValueInRange>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	bf14      	ite	ne
 8014c7e:	2301      	movne	r3, #1
 8014c80:	2300      	moveq	r3, #0
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	e02f      	b.n	8014ce6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f993 3000 	ldrsb.w	r3, [r3]
 8014c8c:	2205      	movs	r2, #5
 8014c8e:	2100      	movs	r1, #0
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7fe ff50 	bl	8013b36 <RegionCommonValueInRange>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	bf14      	ite	ne
 8014c9c:	2301      	movne	r3, #1
 8014c9e:	2300      	moveq	r3, #0
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	e020      	b.n	8014ce6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8014caa:	2207      	movs	r2, #7
 8014cac:	2100      	movs	r1, #0
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fe ff41 	bl	8013b36 <RegionCommonValueInRange>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	bf14      	ite	ne
 8014cba:	2301      	movne	r3, #1
 8014cbc:	2300      	moveq	r3, #0
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	e011      	b.n	8014ce6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8014cc8:	2207      	movs	r2, #7
 8014cca:	2100      	movs	r1, #0
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fe ff32 	bl	8013b36 <RegionCommonValueInRange>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	bf14      	ite	ne
 8014cd8:	2301      	movne	r3, #1
 8014cda:	2300      	moveq	r3, #0
 8014cdc:	b2db      	uxtb	r3, r3
 8014cde:	e002      	b.n	8014ce6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	e000      	b.n	8014ce6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8014ce4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3710      	adds	r7, #16
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop

08014cf0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b08a      	sub	sp, #40	; 0x28
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014cf8:	2350      	movs	r3, #80	; 0x50
 8014cfa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	791b      	ldrb	r3, [r3, #4]
 8014d02:	2b10      	cmp	r3, #16
 8014d04:	d162      	bne.n	8014dcc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	330f      	adds	r3, #15
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d15e      	bne.n	8014dd0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014d12:	2300      	movs	r3, #0
 8014d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d18:	2303      	movs	r3, #3
 8014d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014d1e:	e050      	b.n	8014dc2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8014d20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d24:	2b07      	cmp	r3, #7
 8014d26:	d824      	bhi.n	8014d72 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d30:	4413      	add	r3, r2
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014d36:	69ba      	ldr	r2, [r7, #24]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6819      	ldr	r1, [r3, #0]
 8014d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d40:	3301      	adds	r3, #1
 8014d42:	440b      	add	r3, r1
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	021b      	lsls	r3, r3, #8
 8014d48:	4313      	orrs	r3, r2
 8014d4a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014d4c:	69ba      	ldr	r2, [r7, #24]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6819      	ldr	r1, [r3, #0]
 8014d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d56:	3302      	adds	r3, #2
 8014d58:	440b      	add	r3, r1
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	041b      	lsls	r3, r3, #16
 8014d5e:	4313      	orrs	r3, r2
 8014d60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	2264      	movs	r2, #100	; 0x64
 8014d66:	fb02 f303 	mul.w	r3, r2, r3
 8014d6a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	61fb      	str	r3, [r7, #28]
 8014d70:	e006      	b.n	8014d80 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014d72:	2300      	movs	r3, #0
 8014d74:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014d76:	2300      	movs	r3, #0
 8014d78:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014d80:	69bb      	ldr	r3, [r7, #24]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d00b      	beq.n	8014d9e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014d86:	f107 0318 	add.w	r3, r7, #24
 8014d8a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d90:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014d92:	f107 0310 	add.w	r3, r7, #16
 8014d96:	4618      	mov	r0, r3
 8014d98:	f000 fd0e 	bl	80157b8 <RegionEU868ChannelAdd>
 8014d9c:	e007      	b.n	8014dae <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014da2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8014da4:	f107 030c 	add.w	r3, r7, #12
 8014da8:	4618      	mov	r0, r3
 8014daa:	f000 fda7 	bl	80158fc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014db2:	3303      	adds	r3, #3
 8014db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014dc6:	2b0f      	cmp	r3, #15
 8014dc8:	d9aa      	bls.n	8014d20 <RegionEU868ApplyCFList+0x30>
 8014dca:	e002      	b.n	8014dd2 <RegionEU868ApplyCFList+0xe2>
        return;
 8014dcc:	bf00      	nop
 8014dce:	e000      	b.n	8014dd2 <RegionEU868ApplyCFList+0xe2>
        return;
 8014dd0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014dd2:	3728      	adds	r7, #40	; 0x28
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	791b      	ldrb	r3, [r3, #4]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d002      	beq.n	8014dee <RegionEU868ChanMaskSet+0x16>
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d00b      	beq.n	8014e04 <RegionEU868ChanMaskSet+0x2c>
 8014dec:	e015      	b.n	8014e1a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014dee:	4b0e      	ldr	r3, [pc, #56]	; (8014e28 <RegionEU868ChanMaskSet+0x50>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	f7fe ff17 	bl	8013c30 <RegionCommonChanMaskCopy>
            break;
 8014e02:	e00c      	b.n	8014e1e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014e04:	4b08      	ldr	r3, [pc, #32]	; (8014e28 <RegionEU868ChanMaskSet+0x50>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2201      	movs	r2, #1
 8014e12:	4619      	mov	r1, r3
 8014e14:	f7fe ff0c 	bl	8013c30 <RegionCommonChanMaskCopy>
            break;
 8014e18:	e001      	b.n	8014e1e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	e000      	b.n	8014e20 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8014e1e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	3708      	adds	r7, #8
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	20001ae0 	.word	0x20001ae0

08014e2c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b088      	sub	sp, #32
 8014e30:	af02      	add	r7, sp, #8
 8014e32:	60ba      	str	r2, [r7, #8]
 8014e34:	607b      	str	r3, [r7, #4]
 8014e36:	4603      	mov	r3, r0
 8014e38:	73fb      	strb	r3, [r7, #15]
 8014e3a:	460b      	mov	r3, r1
 8014e3c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8014e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e46:	2b07      	cmp	r3, #7
 8014e48:	bfa8      	it	ge
 8014e4a:	2307      	movge	r3, #7
 8014e4c:	b25a      	sxtb	r2, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e58:	491e      	ldr	r1, [pc, #120]	; (8014ed4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7ff fb88 	bl	8014570 <RegionCommonGetBandwidth>
 8014e60:	4603      	mov	r3, r0
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e6e:	2b07      	cmp	r3, #7
 8014e70:	d10a      	bne.n	8014e88 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e78:	461a      	mov	r2, r3
 8014e7a:	4b17      	ldr	r3, [pc, #92]	; (8014ed8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8014e7c:	5c9b      	ldrb	r3, [r3, r2]
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7ff f90a 	bl	8014098 <RegionCommonComputeSymbolTimeFsk>
 8014e84:	6178      	str	r0, [r7, #20]
 8014e86:	e011      	b.n	8014eac <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e8e:	461a      	mov	r2, r3
 8014e90:	4b11      	ldr	r3, [pc, #68]	; (8014ed8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8014e92:	5c9a      	ldrb	r2, [r3, r2]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	4b0d      	ldr	r3, [pc, #52]	; (8014ed4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8014e9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	4610      	mov	r0, r2
 8014ea6:	f7ff f8e1 	bl	801406c <RegionCommonComputeSymbolTimeLoRa>
 8014eaa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014eac:	4b0b      	ldr	r3, [pc, #44]	; (8014edc <RegionEU868ComputeRxWindowParameters+0xb0>)
 8014eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014eb0:	4798      	blx	r3
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	3308      	adds	r3, #8
 8014eb6:	687a      	ldr	r2, [r7, #4]
 8014eb8:	320c      	adds	r2, #12
 8014eba:	7bb9      	ldrb	r1, [r7, #14]
 8014ebc:	9201      	str	r2, [sp, #4]
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	68ba      	ldr	r2, [r7, #8]
 8014ec4:	6978      	ldr	r0, [r7, #20]
 8014ec6:	f7ff f8f7 	bl	80140b8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8014eca:	bf00      	nop
 8014ecc:	3718      	adds	r7, #24
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	0801b9e8 	.word	0x0801b9e8
 8014ed8:	0801b9e0 	.word	0x0801b9e0
 8014edc:	0801ba18 	.word	0x0801ba18

08014ee0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014ee0:	b5b0      	push	{r4, r5, r7, lr}
 8014ee2:	b090      	sub	sp, #64	; 0x40
 8014ee4:	af0a      	add	r7, sp, #40	; 0x28
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	785b      	ldrb	r3, [r3, #1]
 8014eee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014efe:	4b5a      	ldr	r3, [pc, #360]	; (8015068 <RegionEU868RxConfig+0x188>)
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	4798      	blx	r3
 8014f04:	4603      	mov	r3, r0
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d001      	beq.n	8014f0e <RegionEU868RxConfig+0x2e>
    {
        return false;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e0a8      	b.n	8015060 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	7cdb      	ldrb	r3, [r3, #19]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d126      	bne.n	8014f64 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014f16:	4b55      	ldr	r3, [pc, #340]	; (801506c <RegionEU868RxConfig+0x18c>)
 8014f18:	681a      	ldr	r2, [r3, #0]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	4619      	mov	r1, r3
 8014f20:	460b      	mov	r3, r1
 8014f22:	005b      	lsls	r3, r3, #1
 8014f24:	440b      	add	r3, r1
 8014f26:	009b      	lsls	r3, r3, #2
 8014f28:	4413      	add	r3, r2
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014f2e:	4b4f      	ldr	r3, [pc, #316]	; (801506c <RegionEU868RxConfig+0x18c>)
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	4619      	mov	r1, r3
 8014f38:	460b      	mov	r3, r1
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	440b      	add	r3, r1
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	4413      	add	r3, r2
 8014f42:	3304      	adds	r3, #4
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d00c      	beq.n	8014f64 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014f4a:	4b48      	ldr	r3, [pc, #288]	; (801506c <RegionEU868RxConfig+0x18c>)
 8014f4c:	681a      	ldr	r2, [r3, #0]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	4619      	mov	r1, r3
 8014f54:	460b      	mov	r3, r1
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	440b      	add	r3, r1
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	4413      	add	r3, r2
 8014f5e:	3304      	adds	r3, #4
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f68:	4a41      	ldr	r2, [pc, #260]	; (8015070 <RegionEU868RxConfig+0x190>)
 8014f6a:	5cd3      	ldrb	r3, [r2, r3]
 8014f6c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014f6e:	4b3e      	ldr	r3, [pc, #248]	; (8015068 <RegionEU868RxConfig+0x188>)
 8014f70:	68db      	ldr	r3, [r3, #12]
 8014f72:	6938      	ldr	r0, [r7, #16]
 8014f74:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f7a:	2b07      	cmp	r3, #7
 8014f7c:	d128      	bne.n	8014fd0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014f82:	4b39      	ldr	r3, [pc, #228]	; (8015068 <RegionEU868RxConfig+0x188>)
 8014f84:	699c      	ldr	r4, [r3, #24]
 8014f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014f8e:	fb02 f303 	mul.w	r3, r2, r3
 8014f92:	4619      	mov	r1, r3
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	689b      	ldr	r3, [r3, #8]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	7c92      	ldrb	r2, [r2, #18]
 8014f9e:	7df8      	ldrb	r0, [r7, #23]
 8014fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	9208      	str	r2, [sp, #32]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	9207      	str	r2, [sp, #28]
 8014faa:	2200      	movs	r2, #0
 8014fac:	9206      	str	r2, [sp, #24]
 8014fae:	2201      	movs	r2, #1
 8014fb0:	9205      	str	r2, [sp, #20]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	9204      	str	r2, [sp, #16]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	9203      	str	r2, [sp, #12]
 8014fba:	9302      	str	r3, [sp, #8]
 8014fbc:	2305      	movs	r3, #5
 8014fbe:	9301      	str	r3, [sp, #4]
 8014fc0:	4b2c      	ldr	r3, [pc, #176]	; (8015074 <RegionEU868RxConfig+0x194>)
 8014fc2:	9300      	str	r3, [sp, #0]
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	460a      	mov	r2, r1
 8014fc8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014fcc:	47a0      	blx	r4
 8014fce:	e024      	b.n	801501a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014fd4:	4b24      	ldr	r3, [pc, #144]	; (8015068 <RegionEU868RxConfig+0x188>)
 8014fd6:	699c      	ldr	r4, [r3, #24]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	789b      	ldrb	r3, [r3, #2]
 8014fdc:	461d      	mov	r5, r3
 8014fde:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	689b      	ldr	r3, [r3, #8]
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	687a      	ldr	r2, [r7, #4]
 8014fea:	7c92      	ldrb	r2, [r2, #18]
 8014fec:	7df8      	ldrb	r0, [r7, #23]
 8014fee:	9209      	str	r2, [sp, #36]	; 0x24
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	9208      	str	r2, [sp, #32]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	9207      	str	r2, [sp, #28]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	9206      	str	r2, [sp, #24]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	9205      	str	r2, [sp, #20]
 8015000:	2200      	movs	r2, #0
 8015002:	9204      	str	r2, [sp, #16]
 8015004:	2200      	movs	r2, #0
 8015006:	9203      	str	r2, [sp, #12]
 8015008:	9302      	str	r3, [sp, #8]
 801500a:	2308      	movs	r3, #8
 801500c:	9301      	str	r3, [sp, #4]
 801500e:	2300      	movs	r3, #0
 8015010:	9300      	str	r3, [sp, #0]
 8015012:	2301      	movs	r3, #1
 8015014:	460a      	mov	r2, r1
 8015016:	4629      	mov	r1, r5
 8015018:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	7c5b      	ldrb	r3, [r3, #17]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d005      	beq.n	801502e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015026:	4a14      	ldr	r2, [pc, #80]	; (8015078 <RegionEU868RxConfig+0x198>)
 8015028:	5cd3      	ldrb	r3, [r2, r3]
 801502a:	75bb      	strb	r3, [r7, #22]
 801502c:	e004      	b.n	8015038 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015032:	4a12      	ldr	r2, [pc, #72]	; (801507c <RegionEU868RxConfig+0x19c>)
 8015034:	5cd3      	ldrb	r3, [r2, r3]
 8015036:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015038:	4b0b      	ldr	r3, [pc, #44]	; (8015068 <RegionEU868RxConfig+0x188>)
 801503a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801503c:	7dba      	ldrb	r2, [r7, #22]
 801503e:	320d      	adds	r2, #13
 8015040:	b2d1      	uxtb	r1, r2
 8015042:	7dfa      	ldrb	r2, [r7, #23]
 8015044:	4610      	mov	r0, r2
 8015046:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	7cdb      	ldrb	r3, [r3, #19]
 801504c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015050:	6939      	ldr	r1, [r7, #16]
 8015052:	4618      	mov	r0, r3
 8015054:	f7ff faaa 	bl	80145ac <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	7bfa      	ldrb	r2, [r7, #15]
 801505c:	701a      	strb	r2, [r3, #0]
    return true;
 801505e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015060:	4618      	mov	r0, r3
 8015062:	3718      	adds	r7, #24
 8015064:	46bd      	mov	sp, r7
 8015066:	bdb0      	pop	{r4, r5, r7, pc}
 8015068:	0801ba18 	.word	0x0801ba18
 801506c:	20001ae0 	.word	0x20001ae0
 8015070:	0801b9e0 	.word	0x0801b9e0
 8015074:	00014585 	.word	0x00014585
 8015078:	0801ba10 	.word	0x0801ba10
 801507c:	0801ba08 	.word	0x0801ba08

08015080 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015080:	b590      	push	{r4, r7, lr}
 8015082:	b093      	sub	sp, #76	; 0x4c
 8015084:	af0a      	add	r7, sp, #40	; 0x28
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015092:	461a      	mov	r2, r3
 8015094:	4b5d      	ldr	r3, [pc, #372]	; (801520c <RegionEU868TxConfig+0x18c>)
 8015096:	5c9b      	ldrb	r3, [r3, r2]
 8015098:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80150a0:	4b5b      	ldr	r3, [pc, #364]	; (8015210 <RegionEU868TxConfig+0x190>)
 80150a2:	681a      	ldr	r2, [r3, #0]
 80150a4:	4b5b      	ldr	r3, [pc, #364]	; (8015214 <RegionEU868TxConfig+0x194>)
 80150a6:	6819      	ldr	r1, [r3, #0]
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	781b      	ldrb	r3, [r3, #0]
 80150ac:	461c      	mov	r4, r3
 80150ae:	4623      	mov	r3, r4
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	4423      	add	r3, r4
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	440b      	add	r3, r1
 80150b8:	3309      	adds	r3, #9
 80150ba:	781b      	ldrb	r3, [r3, #0]
 80150bc:	4619      	mov	r1, r3
 80150be:	460b      	mov	r3, r1
 80150c0:	005b      	lsls	r3, r3, #1
 80150c2:	440b      	add	r3, r1
 80150c4:	00db      	lsls	r3, r3, #3
 80150c6:	4413      	add	r3, r2
 80150c8:	3302      	adds	r3, #2
 80150ca:	f993 3000 	ldrsb.w	r3, [r3]
 80150ce:	4619      	mov	r1, r3
 80150d0:	f7ff fa39 	bl	8014546 <RegionCommonLimitTxPower>
 80150d4:	4603      	mov	r3, r0
 80150d6:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150de:	494e      	ldr	r1, [pc, #312]	; (8015218 <RegionEU868TxConfig+0x198>)
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7ff fa45 	bl	8014570 <RegionCommonGetBandwidth>
 80150e6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80150e8:	2300      	movs	r3, #0
 80150ea:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	6859      	ldr	r1, [r3, #4]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	689a      	ldr	r2, [r3, #8]
 80150f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7ff f895 	bl	8014228 <RegionCommonComputeTxPower>
 80150fe:	4603      	mov	r3, r0
 8015100:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015102:	4b46      	ldr	r3, [pc, #280]	; (801521c <RegionEU868TxConfig+0x19c>)
 8015104:	68da      	ldr	r2, [r3, #12]
 8015106:	4b43      	ldr	r3, [pc, #268]	; (8015214 <RegionEU868TxConfig+0x194>)
 8015108:	6819      	ldr	r1, [r3, #0]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	4618      	mov	r0, r3
 8015110:	4603      	mov	r3, r0
 8015112:	005b      	lsls	r3, r3, #1
 8015114:	4403      	add	r3, r0
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	440b      	add	r3, r1
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4618      	mov	r0, r3
 801511e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015126:	2b07      	cmp	r3, #7
 8015128:	d124      	bne.n	8015174 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801512a:	2300      	movs	r3, #0
 801512c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801512e:	4b3b      	ldr	r3, [pc, #236]	; (801521c <RegionEU868TxConfig+0x19c>)
 8015130:	69dc      	ldr	r4, [r3, #28]
 8015132:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801513a:	fb02 f303 	mul.w	r3, r2, r3
 801513e:	461a      	mov	r2, r3
 8015140:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015144:	7ff8      	ldrb	r0, [r7, #31]
 8015146:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801514a:	9308      	str	r3, [sp, #32]
 801514c:	2300      	movs	r3, #0
 801514e:	9307      	str	r3, [sp, #28]
 8015150:	2300      	movs	r3, #0
 8015152:	9306      	str	r3, [sp, #24]
 8015154:	2300      	movs	r3, #0
 8015156:	9305      	str	r3, [sp, #20]
 8015158:	2301      	movs	r3, #1
 801515a:	9304      	str	r3, [sp, #16]
 801515c:	2300      	movs	r3, #0
 801515e:	9303      	str	r3, [sp, #12]
 8015160:	2305      	movs	r3, #5
 8015162:	9302      	str	r3, [sp, #8]
 8015164:	2300      	movs	r3, #0
 8015166:	9301      	str	r3, [sp, #4]
 8015168:	9200      	str	r2, [sp, #0]
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015170:	47a0      	blx	r4
 8015172:	e01d      	b.n	80151b0 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015174:	2301      	movs	r3, #1
 8015176:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015178:	4b28      	ldr	r3, [pc, #160]	; (801521c <RegionEU868TxConfig+0x19c>)
 801517a:	69dc      	ldr	r4, [r3, #28]
 801517c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015180:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015184:	7ff8      	ldrb	r0, [r7, #31]
 8015186:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801518a:	9208      	str	r2, [sp, #32]
 801518c:	2200      	movs	r2, #0
 801518e:	9207      	str	r2, [sp, #28]
 8015190:	2200      	movs	r2, #0
 8015192:	9206      	str	r2, [sp, #24]
 8015194:	2200      	movs	r2, #0
 8015196:	9205      	str	r2, [sp, #20]
 8015198:	2201      	movs	r2, #1
 801519a:	9204      	str	r2, [sp, #16]
 801519c:	2200      	movs	r2, #0
 801519e:	9203      	str	r2, [sp, #12]
 80151a0:	2208      	movs	r2, #8
 80151a2:	9202      	str	r2, [sp, #8]
 80151a4:	2201      	movs	r2, #1
 80151a6:	9201      	str	r2, [sp, #4]
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	69bb      	ldr	r3, [r7, #24]
 80151ac:	2200      	movs	r2, #0
 80151ae:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80151b0:	4b18      	ldr	r3, [pc, #96]	; (8015214 <RegionEU868TxConfig+0x194>)
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	4619      	mov	r1, r3
 80151ba:	460b      	mov	r3, r1
 80151bc:	005b      	lsls	r3, r3, #1
 80151be:	440b      	add	r3, r1
 80151c0:	009b      	lsls	r3, r3, #2
 80151c2:	4413      	add	r3, r2
 80151c4:	681a      	ldr	r2, [r3, #0]
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151cc:	4619      	mov	r1, r3
 80151ce:	4610      	mov	r0, r2
 80151d0:	f7ff fa1e 	bl	8014610 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	899b      	ldrh	r3, [r3, #12]
 80151de:	4619      	mov	r1, r3
 80151e0:	4610      	mov	r0, r2
 80151e2:	f7ff faa3 	bl	801472c <GetTimeOnAir>
 80151e6:	4602      	mov	r2, r0
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80151ec:	4b0b      	ldr	r3, [pc, #44]	; (801521c <RegionEU868TxConfig+0x19c>)
 80151ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	8992      	ldrh	r2, [r2, #12]
 80151f4:	b2d1      	uxtb	r1, r2
 80151f6:	7ffa      	ldrb	r2, [r7, #31]
 80151f8:	4610      	mov	r0, r2
 80151fa:	4798      	blx	r3

    *txPower = txPowerLimited;
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	7f7a      	ldrb	r2, [r7, #29]
 8015200:	701a      	strb	r2, [r3, #0]
    return true;
 8015202:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015204:	4618      	mov	r0, r3
 8015206:	3724      	adds	r7, #36	; 0x24
 8015208:	46bd      	mov	sp, r7
 801520a:	bd90      	pop	{r4, r7, pc}
 801520c:	0801b9e0 	.word	0x0801b9e0
 8015210:	20001adc 	.word	0x20001adc
 8015214:	20001ae0 	.word	0x20001ae0
 8015218:	0801b9e8 	.word	0x0801b9e8
 801521c:	0801ba18 	.word	0x0801ba18

08015220 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015220:	b590      	push	{r4, r7, lr}
 8015222:	b093      	sub	sp, #76	; 0x4c
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	607a      	str	r2, [r7, #4]
 801522c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801522e:	2307      	movs	r3, #7
 8015230:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015238:	2200      	movs	r2, #0
 801523a:	601a      	str	r2, [r3, #0]
 801523c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801523e:	2300      	movs	r3, #0
 8015240:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015244:	2300      	movs	r3, #0
 8015246:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801524a:	2300      	movs	r3, #0
 801524c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801524e:	e085      	b.n	801535c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	685a      	ldr	r2, [r3, #4]
 8015254:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015258:	4413      	add	r3, r2
 801525a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801525e:	4611      	mov	r1, r2
 8015260:	4618      	mov	r0, r3
 8015262:	f7fe fe29 	bl	8013eb8 <RegionCommonParseLinkAdrReq>
 8015266:	4603      	mov	r3, r0
 8015268:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 801526c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015270:	2b00      	cmp	r3, #0
 8015272:	d07b      	beq.n	801536c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015274:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015278:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801527c:	4413      	add	r3, r2
 801527e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015282:	2307      	movs	r3, #7
 8015284:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015288:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801528c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801528e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015292:	2b00      	cmp	r3, #0
 8015294:	d109      	bne.n	80152aa <RegionEU868LinkAdrReq+0x8a>
 8015296:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015298:	2b00      	cmp	r3, #0
 801529a:	d106      	bne.n	80152aa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801529c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80152a0:	f023 0301 	bic.w	r3, r3, #1
 80152a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80152a8:	e058      	b.n	801535c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80152aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d003      	beq.n	80152ba <RegionEU868LinkAdrReq+0x9a>
 80152b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80152b6:	2b05      	cmp	r3, #5
 80152b8:	d903      	bls.n	80152c2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80152ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80152be:	2b06      	cmp	r3, #6
 80152c0:	d906      	bls.n	80152d0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80152c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80152c6:	f023 0301 	bic.w	r3, r3, #1
 80152ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80152ce:	e045      	b.n	801535c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80152d0:	2300      	movs	r3, #0
 80152d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80152d6:	e03d      	b.n	8015354 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80152d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80152dc:	2b06      	cmp	r3, #6
 80152de:	d118      	bne.n	8015312 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80152e0:	4b5f      	ldr	r3, [pc, #380]	; (8015460 <RegionEU868LinkAdrReq+0x240>)
 80152e2:	6819      	ldr	r1, [r3, #0]
 80152e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	440b      	add	r3, r1
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d028      	beq.n	801534a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80152f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80152fc:	2201      	movs	r2, #1
 80152fe:	fa02 f303 	lsl.w	r3, r2, r3
 8015302:	b21a      	sxth	r2, r3
 8015304:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015306:	b21b      	sxth	r3, r3
 8015308:	4313      	orrs	r3, r2
 801530a:	b21b      	sxth	r3, r3
 801530c:	b29b      	uxth	r3, r3
 801530e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015310:	e01b      	b.n	801534a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015312:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015314:	461a      	mov	r2, r3
 8015316:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801531a:	fa42 f303 	asr.w	r3, r2, r3
 801531e:	f003 0301 	and.w	r3, r3, #1
 8015322:	2b00      	cmp	r3, #0
 8015324:	d011      	beq.n	801534a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015326:	4b4e      	ldr	r3, [pc, #312]	; (8015460 <RegionEU868LinkAdrReq+0x240>)
 8015328:	6819      	ldr	r1, [r3, #0]
 801532a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801532e:	4613      	mov	r3, r2
 8015330:	005b      	lsls	r3, r3, #1
 8015332:	4413      	add	r3, r2
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	440b      	add	r3, r1
 8015338:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801533a:	2b00      	cmp	r3, #0
 801533c:	d105      	bne.n	801534a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801533e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015342:	f023 0301 	bic.w	r3, r3, #1
 8015346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801534a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801534e:	3301      	adds	r3, #1
 8015350:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015354:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015358:	2b0f      	cmp	r3, #15
 801535a:	d9bd      	bls.n	80152d8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	7a1b      	ldrb	r3, [r3, #8]
 8015360:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015364:	429a      	cmp	r2, r3
 8015366:	f4ff af73 	bcc.w	8015250 <RegionEU868LinkAdrReq+0x30>
 801536a:	e000      	b.n	801536e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801536c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801536e:	2302      	movs	r3, #2
 8015370:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	7a5b      	ldrb	r3, [r3, #9]
 8015378:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801537c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fa23 	bl	80147cc <RegionEU868GetPhyParam>
 8015386:	4603      	mov	r3, r0
 8015388:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801538a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801538e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	7a9b      	ldrb	r3, [r3, #10]
 8015394:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015396:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801539a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801539c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80153a0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80153a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80153a6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80153ae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80153b6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	7b5b      	ldrb	r3, [r3, #13]
 80153bc:	b25b      	sxtb	r3, r3
 80153be:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80153c0:	2310      	movs	r3, #16
 80153c2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80153c4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80153c8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80153ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153cc:	b25b      	sxtb	r3, r3
 80153ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80153d2:	2307      	movs	r3, #7
 80153d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80153d8:	4b21      	ldr	r3, [pc, #132]	; (8015460 <RegionEU868LinkAdrReq+0x240>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80153de:	2307      	movs	r3, #7
 80153e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80153e4:	2300      	movs	r3, #0
 80153e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80153f0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80153f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80153f8:	1c9a      	adds	r2, r3, #2
 80153fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80153fe:	1c59      	adds	r1, r3, #1
 8015400:	f107 0010 	add.w	r0, r7, #16
 8015404:	4623      	mov	r3, r4
 8015406:	f7fe fda8 	bl	8013f5a <RegionCommonLinkAdrReqVerifyParams>
 801540a:	4603      	mov	r3, r0
 801540c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015414:	2b07      	cmp	r3, #7
 8015416:	d10d      	bne.n	8015434 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015418:	4b11      	ldr	r3, [pc, #68]	; (8015460 <RegionEU868LinkAdrReq+0x240>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015420:	220c      	movs	r2, #12
 8015422:	2100      	movs	r1, #0
 8015424:	4618      	mov	r0, r3
 8015426:	f000 fb7d 	bl	8015b24 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801542a:	4b0d      	ldr	r3, [pc, #52]	; (8015460 <RegionEU868LinkAdrReq+0x240>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015430:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015434:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801543c:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015444:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801544c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801544e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015452:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015458:	4618      	mov	r0, r3
 801545a:	374c      	adds	r7, #76	; 0x4c
 801545c:	46bd      	mov	sp, r7
 801545e:	bd90      	pop	{r4, r7, pc}
 8015460:	20001ae0 	.word	0x20001ae0

08015464 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801546c:	2307      	movs	r3, #7
 801546e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015470:	2300      	movs	r3, #0
 8015472:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	f107 020e 	add.w	r2, r7, #14
 801547c:	4611      	mov	r1, r2
 801547e:	4618      	mov	r0, r3
 8015480:	f7ff f8de 	bl	8014640 <VerifyRfFreq>
 8015484:	4603      	mov	r3, r0
 8015486:	f083 0301 	eor.w	r3, r3, #1
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b00      	cmp	r3, #0
 801548e:	d003      	beq.n	8015498 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015490:	7bfb      	ldrb	r3, [r7, #15]
 8015492:	f023 0301 	bic.w	r3, r3, #1
 8015496:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f993 3000 	ldrsb.w	r3, [r3]
 801549e:	2207      	movs	r2, #7
 80154a0:	2100      	movs	r1, #0
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7fe fb47 	bl	8013b36 <RegionCommonValueInRange>
 80154a8:	4603      	mov	r3, r0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d103      	bne.n	80154b6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80154ae:	7bfb      	ldrb	r3, [r7, #15]
 80154b0:	f023 0302 	bic.w	r3, r3, #2
 80154b4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80154bc:	2205      	movs	r2, #5
 80154be:	2100      	movs	r1, #0
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7fe fb38 	bl	8013b36 <RegionCommonValueInRange>
 80154c6:	4603      	mov	r3, r0
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d103      	bne.n	80154d4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80154cc:	7bfb      	ldrb	r3, [r7, #15]
 80154ce:	f023 0304 	bic.w	r3, r3, #4
 80154d2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80154d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3710      	adds	r7, #16
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
	...

080154e0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b086      	sub	sp, #24
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80154e8:	2303      	movs	r3, #3
 80154ea:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d114      	bne.n	8015520 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015500:	f107 0308 	add.w	r3, r7, #8
 8015504:	4618      	mov	r0, r3
 8015506:	f000 f9f9 	bl	80158fc <RegionEU868ChannelsRemove>
 801550a:	4603      	mov	r3, r0
 801550c:	f083 0301 	eor.w	r3, r3, #1
 8015510:	b2db      	uxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	d03b      	beq.n	801558e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015516:	7dfb      	ldrb	r3, [r7, #23]
 8015518:	f023 0303 	bic.w	r3, r3, #3
 801551c:	75fb      	strb	r3, [r7, #23]
 801551e:	e036      	b.n	801558e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801552c:	b2db      	uxtb	r3, r3
 801552e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015530:	f107 030c 	add.w	r3, r7, #12
 8015534:	4618      	mov	r0, r3
 8015536:	f000 f93f 	bl	80157b8 <RegionEU868ChannelAdd>
 801553a:	4603      	mov	r3, r0
 801553c:	2b06      	cmp	r3, #6
 801553e:	d820      	bhi.n	8015582 <RegionEU868NewChannelReq+0xa2>
 8015540:	a201      	add	r2, pc, #4	; (adr r2, 8015548 <RegionEU868NewChannelReq+0x68>)
 8015542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015546:	bf00      	nop
 8015548:	0801558d 	.word	0x0801558d
 801554c:	08015583 	.word	0x08015583
 8015550:	08015583 	.word	0x08015583
 8015554:	08015583 	.word	0x08015583
 8015558:	08015565 	.word	0x08015565
 801555c:	0801556f 	.word	0x0801556f
 8015560:	08015579 	.word	0x08015579
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015564:	7dfb      	ldrb	r3, [r7, #23]
 8015566:	f023 0301 	bic.w	r3, r3, #1
 801556a:	75fb      	strb	r3, [r7, #23]
                break;
 801556c:	e00f      	b.n	801558e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801556e:	7dfb      	ldrb	r3, [r7, #23]
 8015570:	f023 0302 	bic.w	r3, r3, #2
 8015574:	75fb      	strb	r3, [r7, #23]
                break;
 8015576:	e00a      	b.n	801558e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015578:	7dfb      	ldrb	r3, [r7, #23]
 801557a:	f023 0303 	bic.w	r3, r3, #3
 801557e:	75fb      	strb	r3, [r7, #23]
                break;
 8015580:	e005      	b.n	801558e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015582:	7dfb      	ldrb	r3, [r7, #23]
 8015584:	f023 0303 	bic.w	r3, r3, #3
 8015588:	75fb      	strb	r3, [r7, #23]
                break;
 801558a:	e000      	b.n	801558e <RegionEU868NewChannelReq+0xae>
                break;
 801558c:	bf00      	nop
            }
        }
    }

    return status;
 801558e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015592:	4618      	mov	r0, r3
 8015594:	3718      	adds	r7, #24
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop

0801559c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80155a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	370c      	adds	r7, #12
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bc80      	pop	{r7}
 80155b0:	4770      	bx	lr
	...

080155b4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b084      	sub	sp, #16
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80155bc:	2303      	movs	r3, #3
 80155be:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80155c0:	2300      	movs	r3, #0
 80155c2:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	685b      	ldr	r3, [r3, #4]
 80155c8:	f107 020e 	add.w	r2, r7, #14
 80155cc:	4611      	mov	r1, r2
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7ff f836 	bl	8014640 <VerifyRfFreq>
 80155d4:	4603      	mov	r3, r0
 80155d6:	f083 0301 	eor.w	r3, r3, #1
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d003      	beq.n	80155e8 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80155e0:	7bfb      	ldrb	r3, [r7, #15]
 80155e2:	f023 0301 	bic.w	r3, r3, #1
 80155e6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80155e8:	4b13      	ldr	r3, [pc, #76]	; (8015638 <RegionEU868DlChannelReq+0x84>)
 80155ea:	681a      	ldr	r2, [r3, #0]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	4619      	mov	r1, r3
 80155f2:	460b      	mov	r3, r1
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	440b      	add	r3, r1
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	4413      	add	r3, r2
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d103      	bne.n	801560a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015602:	7bfb      	ldrb	r3, [r7, #15]
 8015604:	f023 0302 	bic.w	r3, r3, #2
 8015608:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801560a:	7bfb      	ldrb	r3, [r7, #15]
 801560c:	2b03      	cmp	r3, #3
 801560e:	d10d      	bne.n	801562c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015610:	4b09      	ldr	r3, [pc, #36]	; (8015638 <RegionEU868DlChannelReq+0x84>)
 8015612:	6819      	ldr	r1, [r3, #0]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	4618      	mov	r0, r3
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	685a      	ldr	r2, [r3, #4]
 801561e:	4603      	mov	r3, r0
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	4403      	add	r3, r0
 8015624:	009b      	lsls	r3, r3, #2
 8015626:	440b      	add	r3, r1
 8015628:	3304      	adds	r3, #4
 801562a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801562c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3710      	adds	r7, #16
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	20001ae0 	.word	0x20001ae0

0801563c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801563c:	b480      	push	{r7}
 801563e:	b083      	sub	sp, #12
 8015640:	af00      	add	r7, sp, #0
 8015642:	4603      	mov	r3, r0
 8015644:	460a      	mov	r2, r1
 8015646:	71fb      	strb	r3, [r7, #7]
 8015648:	4613      	mov	r3, r2
 801564a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015650:	4618      	mov	r0, r3
 8015652:	370c      	adds	r7, #12
 8015654:	46bd      	mov	sp, r7
 8015656:	bc80      	pop	{r7}
 8015658:	4770      	bx	lr
	...

0801565c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b09a      	sub	sp, #104	; 0x68
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801566a:	2300      	movs	r3, #0
 801566c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015670:	2300      	movs	r3, #0
 8015672:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015676:	2300      	movs	r3, #0
 8015678:	64fb      	str	r3, [r7, #76]	; 0x4c
 801567a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801567e:	2200      	movs	r2, #0
 8015680:	601a      	str	r2, [r3, #0]
 8015682:	605a      	str	r2, [r3, #4]
 8015684:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015686:	230c      	movs	r3, #12
 8015688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801568c:	2307      	movs	r3, #7
 801568e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015690:	4b47      	ldr	r3, [pc, #284]	; (80157b0 <RegionEU868NextChannel+0x154>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015698:	2201      	movs	r2, #1
 801569a:	2100      	movs	r1, #0
 801569c:	4618      	mov	r0, r3
 801569e:	f7fe fa9b 	bl	8013bd8 <RegionCommonCountChannels>
 80156a2:	4603      	mov	r3, r0
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d10a      	bne.n	80156be <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80156a8:	4b41      	ldr	r3, [pc, #260]	; (80157b0 <RegionEU868NextChannel+0x154>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80156b0:	4b3f      	ldr	r3, [pc, #252]	; (80157b0 <RegionEU868NextChannel+0x154>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f042 0207 	orr.w	r2, r2, #7
 80156b8:	b292      	uxth	r2, r2
 80156ba:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	7a5b      	ldrb	r3, [r3, #9]
 80156c2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80156ce:	4b38      	ldr	r3, [pc, #224]	; (80157b0 <RegionEU868NextChannel+0x154>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80156d6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80156d8:	4b35      	ldr	r3, [pc, #212]	; (80157b0 <RegionEU868NextChannel+0x154>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80156de:	4b35      	ldr	r3, [pc, #212]	; (80157b4 <RegionEU868NextChannel+0x158>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80156e4:	2310      	movs	r3, #16
 80156e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80156e8:	f107 0312 	add.w	r3, r7, #18
 80156ec:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	7a9b      	ldrb	r3, [r3, #10]
 80156fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015702:	2306      	movs	r3, #6
 8015704:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015708:	68fa      	ldr	r2, [r7, #12]
 801570a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801570e:	320c      	adds	r2, #12
 8015710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015714:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	7d1b      	ldrb	r3, [r3, #20]
 801571c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	8adb      	ldrh	r3, [r3, #22]
 801572a:	4619      	mov	r1, r3
 801572c:	4610      	mov	r0, r2
 801572e:	f7fe fffd 	bl	801472c <GetTimeOnAir>
 8015732:	4603      	mov	r3, r0
 8015734:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015736:	f107 0314 	add.w	r3, r7, #20
 801573a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801573c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8015740:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015744:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	9301      	str	r3, [sp, #4]
 801574c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8015750:	9300      	str	r3, [sp, #0]
 8015752:	460b      	mov	r3, r1
 8015754:	6839      	ldr	r1, [r7, #0]
 8015756:	f7fe fe56 	bl	8014406 <RegionCommonIdentifyChannels>
 801575a:	4603      	mov	r3, r0
 801575c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015764:	2b00      	cmp	r3, #0
 8015766:	d10e      	bne.n	8015786 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015768:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801576c:	3b01      	subs	r3, #1
 801576e:	4619      	mov	r1, r3
 8015770:	2000      	movs	r0, #0
 8015772:	f000 f985 	bl	8015a80 <randr>
 8015776:	4603      	mov	r3, r0
 8015778:	3360      	adds	r3, #96	; 0x60
 801577a:	443b      	add	r3, r7
 801577c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	701a      	strb	r2, [r3, #0]
 8015784:	e00e      	b.n	80157a4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801578a:	2b0c      	cmp	r3, #12
 801578c:	d10a      	bne.n	80157a4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801578e:	4b08      	ldr	r3, [pc, #32]	; (80157b0 <RegionEU868NextChannel+0x154>)
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8015796:	4b06      	ldr	r3, [pc, #24]	; (80157b0 <RegionEU868NextChannel+0x154>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f042 0207 	orr.w	r2, r2, #7
 801579e:	b292      	uxth	r2, r2
 80157a0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 80157a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3760      	adds	r7, #96	; 0x60
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	20001ae0 	.word	0x20001ae0
 80157b4:	20001adc 	.word	0x20001adc

080157b8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80157c0:	2300      	movs	r3, #0
 80157c2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80157c4:	2300      	movs	r3, #0
 80157c6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80157c8:	2300      	movs	r3, #0
 80157ca:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	791b      	ldrb	r3, [r3, #4]
 80157d0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80157d2:	7b7b      	ldrb	r3, [r7, #13]
 80157d4:	2b02      	cmp	r3, #2
 80157d6:	d801      	bhi.n	80157dc <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80157d8:	2306      	movs	r3, #6
 80157da:	e089      	b.n	80158f0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80157dc:	7b7b      	ldrb	r3, [r7, #13]
 80157de:	2b0f      	cmp	r3, #15
 80157e0:	d901      	bls.n	80157e6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80157e2:	2303      	movs	r3, #3
 80157e4:	e084      	b.n	80158f0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	7a1b      	ldrb	r3, [r3, #8]
 80157ec:	f343 0303 	sbfx	r3, r3, #0, #4
 80157f0:	b25b      	sxtb	r3, r3
 80157f2:	2207      	movs	r2, #7
 80157f4:	2100      	movs	r1, #0
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fe f99d 	bl	8013b36 <RegionCommonValueInRange>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d101      	bne.n	8015806 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8015802:	2301      	movs	r3, #1
 8015804:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	7a1b      	ldrb	r3, [r3, #8]
 801580c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015810:	b25b      	sxtb	r3, r3
 8015812:	2207      	movs	r2, #7
 8015814:	2100      	movs	r1, #0
 8015816:	4618      	mov	r0, r3
 8015818:	f7fe f98d 	bl	8013b36 <RegionCommonValueInRange>
 801581c:	4603      	mov	r3, r0
 801581e:	2b00      	cmp	r3, #0
 8015820:	d101      	bne.n	8015826 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8015822:	2301      	movs	r3, #1
 8015824:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	7a1b      	ldrb	r3, [r3, #8]
 801582c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015830:	b25a      	sxtb	r2, r3
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	7a1b      	ldrb	r3, [r3, #8]
 8015838:	f343 1303 	sbfx	r3, r3, #4, #4
 801583c:	b25b      	sxtb	r3, r3
 801583e:	429a      	cmp	r2, r3
 8015840:	dd01      	ble.n	8015846 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8015842:	2301      	movs	r3, #1
 8015844:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015846:	7bbb      	ldrb	r3, [r7, #14]
 8015848:	f083 0301 	eor.w	r3, r3, #1
 801584c:	b2db      	uxtb	r3, r3
 801584e:	2b00      	cmp	r3, #0
 8015850:	d010      	beq.n	8015874 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f107 020c 	add.w	r2, r7, #12
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7fe feee 	bl	8014640 <VerifyRfFreq>
 8015864:	4603      	mov	r3, r0
 8015866:	f083 0301 	eor.w	r3, r3, #1
 801586a:	b2db      	uxtb	r3, r3
 801586c:	2b00      	cmp	r3, #0
 801586e:	d001      	beq.n	8015874 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8015870:	2301      	movs	r3, #1
 8015872:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015874:	7bfb      	ldrb	r3, [r7, #15]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d004      	beq.n	8015884 <RegionEU868ChannelAdd+0xcc>
 801587a:	7bbb      	ldrb	r3, [r7, #14]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d001      	beq.n	8015884 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015880:	2306      	movs	r3, #6
 8015882:	e035      	b.n	80158f0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8015884:	7bfb      	ldrb	r3, [r7, #15]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d001      	beq.n	801588e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801588a:	2305      	movs	r3, #5
 801588c:	e030      	b.n	80158f0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801588e:	7bbb      	ldrb	r3, [r7, #14]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d001      	beq.n	8015898 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015894:	2304      	movs	r3, #4
 8015896:	e02b      	b.n	80158f0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015898:	4b17      	ldr	r3, [pc, #92]	; (80158f8 <RegionEU868ChannelAdd+0x140>)
 801589a:	6819      	ldr	r1, [r3, #0]
 801589c:	7b7a      	ldrb	r2, [r7, #13]
 801589e:	4613      	mov	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	4413      	add	r3, r2
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	18c8      	adds	r0, r1, r3
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	220c      	movs	r2, #12
 80158ae:	4619      	mov	r1, r3
 80158b0:	f000 f8fd 	bl	8015aae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80158b4:	4b10      	ldr	r3, [pc, #64]	; (80158f8 <RegionEU868ChannelAdd+0x140>)
 80158b6:	6819      	ldr	r1, [r3, #0]
 80158b8:	7b7a      	ldrb	r2, [r7, #13]
 80158ba:	7b38      	ldrb	r0, [r7, #12]
 80158bc:	4613      	mov	r3, r2
 80158be:	005b      	lsls	r3, r3, #1
 80158c0:	4413      	add	r3, r2
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	440b      	add	r3, r1
 80158c6:	3309      	adds	r3, #9
 80158c8:	4602      	mov	r2, r0
 80158ca:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80158cc:	4b0a      	ldr	r3, [pc, #40]	; (80158f8 <RegionEU868ChannelAdd+0x140>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 80158d4:	b21a      	sxth	r2, r3
 80158d6:	7b7b      	ldrb	r3, [r7, #13]
 80158d8:	2101      	movs	r1, #1
 80158da:	fa01 f303 	lsl.w	r3, r1, r3
 80158de:	b21b      	sxth	r3, r3
 80158e0:	4313      	orrs	r3, r2
 80158e2:	b21a      	sxth	r2, r3
 80158e4:	4b04      	ldr	r3, [pc, #16]	; (80158f8 <RegionEU868ChannelAdd+0x140>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	b292      	uxth	r2, r2
 80158ea:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80158ee:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3710      	adds	r7, #16
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	20001ae0 	.word	0x20001ae0

080158fc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b086      	sub	sp, #24
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801590a:	7dfb      	ldrb	r3, [r7, #23]
 801590c:	2b02      	cmp	r3, #2
 801590e:	d801      	bhi.n	8015914 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8015910:	2300      	movs	r3, #0
 8015912:	e016      	b.n	8015942 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015914:	4b0d      	ldr	r3, [pc, #52]	; (801594c <RegionEU868ChannelsRemove+0x50>)
 8015916:	6819      	ldr	r1, [r3, #0]
 8015918:	7dfa      	ldrb	r2, [r7, #23]
 801591a:	4613      	mov	r3, r2
 801591c:	005b      	lsls	r3, r3, #1
 801591e:	4413      	add	r3, r2
 8015920:	009b      	lsls	r3, r3, #2
 8015922:	440b      	add	r3, r1
 8015924:	461a      	mov	r2, r3
 8015926:	2300      	movs	r3, #0
 8015928:	6013      	str	r3, [r2, #0]
 801592a:	6053      	str	r3, [r2, #4]
 801592c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801592e:	4b07      	ldr	r3, [pc, #28]	; (801594c <RegionEU868ChannelsRemove+0x50>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015936:	7df9      	ldrb	r1, [r7, #23]
 8015938:	2210      	movs	r2, #16
 801593a:	4618      	mov	r0, r3
 801593c:	f7fe f918 	bl	8013b70 <RegionCommonChanDisable>
 8015940:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8015942:	4618      	mov	r0, r3
 8015944:	3718      	adds	r7, #24
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
 801594a:	bf00      	nop
 801594c:	20001ae0 	.word	0x20001ae0

08015950 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015950:	b590      	push	{r4, r7, lr}
 8015952:	b085      	sub	sp, #20
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801595e:	4b20      	ldr	r3, [pc, #128]	; (80159e0 <RegionEU868SetContinuousWave+0x90>)
 8015960:	681a      	ldr	r2, [r3, #0]
 8015962:	4b20      	ldr	r3, [pc, #128]	; (80159e4 <RegionEU868SetContinuousWave+0x94>)
 8015964:	6819      	ldr	r1, [r3, #0]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	461c      	mov	r4, r3
 801596c:	4623      	mov	r3, r4
 801596e:	005b      	lsls	r3, r3, #1
 8015970:	4423      	add	r3, r4
 8015972:	009b      	lsls	r3, r3, #2
 8015974:	440b      	add	r3, r1
 8015976:	3309      	adds	r3, #9
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	4619      	mov	r1, r3
 801597c:	460b      	mov	r3, r1
 801597e:	005b      	lsls	r3, r3, #1
 8015980:	440b      	add	r3, r1
 8015982:	00db      	lsls	r3, r3, #3
 8015984:	4413      	add	r3, r2
 8015986:	3302      	adds	r3, #2
 8015988:	f993 3000 	ldrsb.w	r3, [r3]
 801598c:	4619      	mov	r1, r3
 801598e:	f7fe fdda 	bl	8014546 <RegionCommonLimitTxPower>
 8015992:	4603      	mov	r3, r0
 8015994:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015996:	2300      	movs	r3, #0
 8015998:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801599a:	4b12      	ldr	r3, [pc, #72]	; (80159e4 <RegionEU868SetContinuousWave+0x94>)
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	4619      	mov	r1, r3
 80159a4:	460b      	mov	r3, r1
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	440b      	add	r3, r1
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	4413      	add	r3, r2
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6859      	ldr	r1, [r3, #4]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	689a      	ldr	r2, [r3, #8]
 80159ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159be:	4618      	mov	r0, r3
 80159c0:	f7fe fc32 	bl	8014228 <RegionCommonComputeTxPower>
 80159c4:	4603      	mov	r3, r0
 80159c6:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80159c8:	4b07      	ldr	r3, [pc, #28]	; (80159e8 <RegionEU868SetContinuousWave+0x98>)
 80159ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159cc:	687a      	ldr	r2, [r7, #4]
 80159ce:	8992      	ldrh	r2, [r2, #12]
 80159d0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80159d4:	68b8      	ldr	r0, [r7, #8]
 80159d6:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80159d8:	bf00      	nop
 80159da:	3714      	adds	r7, #20
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd90      	pop	{r4, r7, pc}
 80159e0:	20001adc 	.word	0x20001adc
 80159e4:	20001ae0 	.word	0x20001ae0
 80159e8:	0801ba18 	.word	0x0801ba18

080159ec <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80159ec:	b480      	push	{r7}
 80159ee:	b085      	sub	sp, #20
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	4603      	mov	r3, r0
 80159f4:	71fb      	strb	r3, [r7, #7]
 80159f6:	460b      	mov	r3, r1
 80159f8:	71bb      	strb	r3, [r7, #6]
 80159fa:	4613      	mov	r3, r2
 80159fc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80159fe:	79ba      	ldrb	r2, [r7, #6]
 8015a00:	797b      	ldrb	r3, [r7, #5]
 8015a02:	1ad3      	subs	r3, r2, r3
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8015a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	da01      	bge.n	8015a14 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8015a10:	2300      	movs	r3, #0
 8015a12:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3714      	adds	r7, #20
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bc80      	pop	{r7}
 8015a1e:	4770      	bx	lr

08015a20 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8015a20:	b480      	push	{r7}
 8015a22:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015a24:	4b0d      	ldr	r3, [pc, #52]	; (8015a5c <rand1+0x3c>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	4a0d      	ldr	r2, [pc, #52]	; (8015a60 <rand1+0x40>)
 8015a2a:	fb02 f303 	mul.w	r3, r2, r3
 8015a2e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015a32:	3339      	adds	r3, #57	; 0x39
 8015a34:	4a09      	ldr	r2, [pc, #36]	; (8015a5c <rand1+0x3c>)
 8015a36:	6013      	str	r3, [r2, #0]
 8015a38:	4b08      	ldr	r3, [pc, #32]	; (8015a5c <rand1+0x3c>)
 8015a3a:	681a      	ldr	r2, [r3, #0]
 8015a3c:	2303      	movs	r3, #3
 8015a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8015a42:	1ad1      	subs	r1, r2, r3
 8015a44:	0849      	lsrs	r1, r1, #1
 8015a46:	440b      	add	r3, r1
 8015a48:	0f99      	lsrs	r1, r3, #30
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	07db      	lsls	r3, r3, #31
 8015a4e:	1a5b      	subs	r3, r3, r1
 8015a50:	1ad1      	subs	r1, r2, r3
 8015a52:	460b      	mov	r3, r1
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bc80      	pop	{r7}
 8015a5a:	4770      	bx	lr
 8015a5c:	20000134 	.word	0x20000134
 8015a60:	41c64e6d 	.word	0x41c64e6d

08015a64 <srand1>:

void srand1( uint32_t seed )
{
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
    next = seed;
 8015a6c:	4a03      	ldr	r2, [pc, #12]	; (8015a7c <srand1+0x18>)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6013      	str	r3, [r2, #0]
}
 8015a72:	bf00      	nop
 8015a74:	370c      	adds	r7, #12
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bc80      	pop	{r7}
 8015a7a:	4770      	bx	lr
 8015a7c:	20000134 	.word	0x20000134

08015a80 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8015a8a:	f7ff ffc9 	bl	8015a20 <rand1>
 8015a8e:	4602      	mov	r2, r0
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	1acb      	subs	r3, r1, r3
 8015a96:	3301      	adds	r3, #1
 8015a98:	fb92 f1f3 	sdiv	r1, r2, r3
 8015a9c:	fb01 f303 	mul.w	r3, r1, r3
 8015aa0:	1ad2      	subs	r2, r2, r3
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	4413      	add	r3, r2
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3708      	adds	r7, #8
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}

08015aae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015aae:	b480      	push	{r7}
 8015ab0:	b085      	sub	sp, #20
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	60f8      	str	r0, [r7, #12]
 8015ab6:	60b9      	str	r1, [r7, #8]
 8015ab8:	4613      	mov	r3, r2
 8015aba:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8015abc:	e007      	b.n	8015ace <memcpy1+0x20>
    {
        *dst++ = *src++;
 8015abe:	68ba      	ldr	r2, [r7, #8]
 8015ac0:	1c53      	adds	r3, r2, #1
 8015ac2:	60bb      	str	r3, [r7, #8]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	1c59      	adds	r1, r3, #1
 8015ac8:	60f9      	str	r1, [r7, #12]
 8015aca:	7812      	ldrb	r2, [r2, #0]
 8015acc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015ace:	88fb      	ldrh	r3, [r7, #6]
 8015ad0:	1e5a      	subs	r2, r3, #1
 8015ad2:	80fa      	strh	r2, [r7, #6]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d1f2      	bne.n	8015abe <memcpy1+0x10>
    }
}
 8015ad8:	bf00      	nop
 8015ada:	bf00      	nop
 8015adc:	3714      	adds	r7, #20
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bc80      	pop	{r7}
 8015ae2:	4770      	bx	lr

08015ae4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	b085      	sub	sp, #20
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	60f8      	str	r0, [r7, #12]
 8015aec:	60b9      	str	r1, [r7, #8]
 8015aee:	4613      	mov	r3, r2
 8015af0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8015af2:	88fb      	ldrh	r3, [r7, #6]
 8015af4:	3b01      	subs	r3, #1
 8015af6:	68fa      	ldr	r2, [r7, #12]
 8015af8:	4413      	add	r3, r2
 8015afa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8015afc:	e007      	b.n	8015b0e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8015afe:	68ba      	ldr	r2, [r7, #8]
 8015b00:	1c53      	adds	r3, r2, #1
 8015b02:	60bb      	str	r3, [r7, #8]
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	1e59      	subs	r1, r3, #1
 8015b08:	60f9      	str	r1, [r7, #12]
 8015b0a:	7812      	ldrb	r2, [r2, #0]
 8015b0c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015b0e:	88fb      	ldrh	r3, [r7, #6]
 8015b10:	1e5a      	subs	r2, r3, #1
 8015b12:	80fa      	strh	r2, [r7, #6]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d1f2      	bne.n	8015afe <memcpyr+0x1a>
    }
}
 8015b18:	bf00      	nop
 8015b1a:	bf00      	nop
 8015b1c:	3714      	adds	r7, #20
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bc80      	pop	{r7}
 8015b22:	4770      	bx	lr

08015b24 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	460b      	mov	r3, r1
 8015b2e:	70fb      	strb	r3, [r7, #3]
 8015b30:	4613      	mov	r3, r2
 8015b32:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8015b34:	e004      	b.n	8015b40 <memset1+0x1c>
    {
        *dst++ = value;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	1c5a      	adds	r2, r3, #1
 8015b3a:	607a      	str	r2, [r7, #4]
 8015b3c:	78fa      	ldrb	r2, [r7, #3]
 8015b3e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015b40:	883b      	ldrh	r3, [r7, #0]
 8015b42:	1e5a      	subs	r2, r3, #1
 8015b44:	803a      	strh	r2, [r7, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d1f5      	bne.n	8015b36 <memset1+0x12>
    }
}
 8015b4a:	bf00      	nop
 8015b4c:	bf00      	nop
 8015b4e:	370c      	adds	r7, #12
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bc80      	pop	{r7}
 8015b54:	4770      	bx	lr
	...

08015b58 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8015b58:	b480      	push	{r7}
 8015b5a:	b085      	sub	sp, #20
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
 8015b60:	460b      	mov	r3, r1
 8015b62:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8015b64:	f04f 33ff 	mov.w	r3, #4294967295
 8015b68:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d101      	bne.n	8015b74 <Crc32+0x1c>
    {
        return 0;
 8015b70:	2300      	movs	r3, #0
 8015b72:	e026      	b.n	8015bc2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8015b74:	2300      	movs	r3, #0
 8015b76:	817b      	strh	r3, [r7, #10]
 8015b78:	e01d      	b.n	8015bb6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8015b7a:	897b      	ldrh	r3, [r7, #10]
 8015b7c:	687a      	ldr	r2, [r7, #4]
 8015b7e:	4413      	add	r3, r2
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	461a      	mov	r2, r3
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	4053      	eors	r3, r2
 8015b88:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	813b      	strh	r3, [r7, #8]
 8015b8e:	e00c      	b.n	8015baa <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	085a      	lsrs	r2, r3, #1
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	f003 0301 	and.w	r3, r3, #1
 8015b9a:	425b      	negs	r3, r3
 8015b9c:	490b      	ldr	r1, [pc, #44]	; (8015bcc <Crc32+0x74>)
 8015b9e:	400b      	ands	r3, r1
 8015ba0:	4053      	eors	r3, r2
 8015ba2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8015ba4:	893b      	ldrh	r3, [r7, #8]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	813b      	strh	r3, [r7, #8]
 8015baa:	893b      	ldrh	r3, [r7, #8]
 8015bac:	2b07      	cmp	r3, #7
 8015bae:	d9ef      	bls.n	8015b90 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8015bb0:	897b      	ldrh	r3, [r7, #10]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	817b      	strh	r3, [r7, #10]
 8015bb6:	897a      	ldrh	r2, [r7, #10]
 8015bb8:	887b      	ldrh	r3, [r7, #2]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d3dd      	bcc.n	8015b7a <Crc32+0x22>
        }
    }

    return ~crc;
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	43db      	mvns	r3, r3
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3714      	adds	r7, #20
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bc80      	pop	{r7}
 8015bca:	4770      	bx	lr
 8015bcc:	edb88320 	.word	0xedb88320

08015bd0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af02      	add	r7, sp, #8
 8015bd6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8015bd8:	4a24      	ldr	r2, [pc, #144]	; (8015c6c <RadioInit+0x9c>)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8015bde:	4b24      	ldr	r3, [pc, #144]	; (8015c70 <RadioInit+0xa0>)
 8015be0:	2200      	movs	r2, #0
 8015be2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8015be4:	4b22      	ldr	r3, [pc, #136]	; (8015c70 <RadioInit+0xa0>)
 8015be6:	2200      	movs	r2, #0
 8015be8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8015bea:	4b21      	ldr	r3, [pc, #132]	; (8015c70 <RadioInit+0xa0>)
 8015bec:	2200      	movs	r2, #0
 8015bee:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8015bf0:	4b1f      	ldr	r3, [pc, #124]	; (8015c70 <RadioInit+0xa0>)
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8015bf6:	481f      	ldr	r0, [pc, #124]	; (8015c74 <RadioInit+0xa4>)
 8015bf8:	f001 ff88 	bl	8017b0c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8015bfc:	4b1c      	ldr	r3, [pc, #112]	; (8015c70 <RadioInit+0xa0>)
 8015bfe:	2200      	movs	r2, #0
 8015c00:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8015c02:	4b1b      	ldr	r3, [pc, #108]	; (8015c70 <RadioInit+0xa0>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8015c08:	f002 fa16 	bl	8018038 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8015c0c:	2100      	movs	r1, #0
 8015c0e:	2000      	movs	r0, #0
 8015c10:	f002 fdde 	bl	80187d0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8015c14:	2204      	movs	r2, #4
 8015c16:	2100      	movs	r1, #0
 8015c18:	2001      	movs	r0, #1
 8015c1a:	f002 fb9b 	bl	8018354 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015c1e:	2300      	movs	r3, #0
 8015c20:	2200      	movs	r2, #0
 8015c22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015c2a:	f002 facb 	bl	80181c4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8015c2e:	f000 fe83 	bl	8016938 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8015c32:	2300      	movs	r3, #0
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	4b10      	ldr	r3, [pc, #64]	; (8015c78 <RadioInit+0xa8>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8015c3e:	480f      	ldr	r0, [pc, #60]	; (8015c7c <RadioInit+0xac>)
 8015c40:	f003 ffdc 	bl	8019bfc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8015c44:	2300      	movs	r3, #0
 8015c46:	9300      	str	r3, [sp, #0]
 8015c48:	4b0d      	ldr	r3, [pc, #52]	; (8015c80 <RadioInit+0xb0>)
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8015c50:	480c      	ldr	r0, [pc, #48]	; (8015c84 <RadioInit+0xb4>)
 8015c52:	f003 ffd3 	bl	8019bfc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8015c56:	4809      	ldr	r0, [pc, #36]	; (8015c7c <RadioInit+0xac>)
 8015c58:	f004 f874 	bl	8019d44 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8015c5c:	4809      	ldr	r0, [pc, #36]	; (8015c84 <RadioInit+0xb4>)
 8015c5e:	f004 f871 	bl	8019d44 <UTIL_TIMER_Stop>
}
 8015c62:	bf00      	nop
 8015c64:	3708      	adds	r7, #8
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	20001be4 	.word	0x20001be4
 8015c70:	20001be8 	.word	0x20001be8
 8015c74:	08016d25 	.word	0x08016d25
 8015c78:	08016cad 	.word	0x08016cad
 8015c7c:	20001c44 	.word	0x20001c44
 8015c80:	08016cc1 	.word	0x08016cc1
 8015c84:	20001c5c 	.word	0x20001c5c

08015c88 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8015c8c:	f001 ff80 	bl	8017b90 <SUBGRF_GetOperatingMode>
 8015c90:	4603      	mov	r3, r0
 8015c92:	2b07      	cmp	r3, #7
 8015c94:	d00a      	beq.n	8015cac <RadioGetStatus+0x24>
 8015c96:	2b07      	cmp	r3, #7
 8015c98:	dc0a      	bgt.n	8015cb0 <RadioGetStatus+0x28>
 8015c9a:	2b04      	cmp	r3, #4
 8015c9c:	d002      	beq.n	8015ca4 <RadioGetStatus+0x1c>
 8015c9e:	2b05      	cmp	r3, #5
 8015ca0:	d002      	beq.n	8015ca8 <RadioGetStatus+0x20>
 8015ca2:	e005      	b.n	8015cb0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8015ca4:	2302      	movs	r3, #2
 8015ca6:	e004      	b.n	8015cb2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8015ca8:	2301      	movs	r3, #1
 8015caa:	e002      	b.n	8015cb2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8015cac:	2303      	movs	r3, #3
 8015cae:	e000      	b.n	8015cb2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8015cb0:	2300      	movs	r3, #0
    }
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	bd80      	pop	{r7, pc}
	...

08015cb8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8015cc2:	4a2a      	ldr	r2, [pc, #168]	; (8015d6c <RadioSetModem+0xb4>)
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8015cc8:	79fb      	ldrb	r3, [r7, #7]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f003 f943 	bl	8018f56 <RFW_SetRadioModem>
    switch( modem )
 8015cd0:	79fb      	ldrb	r3, [r7, #7]
 8015cd2:	2b05      	cmp	r3, #5
 8015cd4:	d80e      	bhi.n	8015cf4 <RadioSetModem+0x3c>
 8015cd6:	a201      	add	r2, pc, #4	; (adr r2, 8015cdc <RadioSetModem+0x24>)
 8015cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cdc:	08015d03 	.word	0x08015d03
 8015ce0:	08015d11 	.word	0x08015d11
 8015ce4:	08015cf5 	.word	0x08015cf5
 8015ce8:	08015d37 	.word	0x08015d37
 8015cec:	08015d45 	.word	0x08015d45
 8015cf0:	08015d53 	.word	0x08015d53
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8015cf4:	2003      	movs	r0, #3
 8015cf6:	f002 fb07 	bl	8018308 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015cfa:	4b1c      	ldr	r3, [pc, #112]	; (8015d6c <RadioSetModem+0xb4>)
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	735a      	strb	r2, [r3, #13]
        break;
 8015d00:	e02f      	b.n	8015d62 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015d02:	2000      	movs	r0, #0
 8015d04:	f002 fb00 	bl	8018308 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015d08:	4b18      	ldr	r3, [pc, #96]	; (8015d6c <RadioSetModem+0xb4>)
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	735a      	strb	r2, [r3, #13]
        break;
 8015d0e:	e028      	b.n	8015d62 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8015d10:	2001      	movs	r0, #1
 8015d12:	f002 faf9 	bl	8018308 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8015d16:	4b15      	ldr	r3, [pc, #84]	; (8015d6c <RadioSetModem+0xb4>)
 8015d18:	7b5a      	ldrb	r2, [r3, #13]
 8015d1a:	4b14      	ldr	r3, [pc, #80]	; (8015d6c <RadioSetModem+0xb4>)
 8015d1c:	7b1b      	ldrb	r3, [r3, #12]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d01e      	beq.n	8015d60 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8015d22:	4b12      	ldr	r3, [pc, #72]	; (8015d6c <RadioSetModem+0xb4>)
 8015d24:	7b1a      	ldrb	r2, [r3, #12]
 8015d26:	4b11      	ldr	r3, [pc, #68]	; (8015d6c <RadioSetModem+0xb4>)
 8015d28:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8015d2a:	4b10      	ldr	r3, [pc, #64]	; (8015d6c <RadioSetModem+0xb4>)
 8015d2c:	7b5b      	ldrb	r3, [r3, #13]
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f000 ff86 	bl	8016c40 <RadioSetPublicNetwork>
        }
        break;
 8015d34:	e014      	b.n	8015d60 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8015d36:	2002      	movs	r0, #2
 8015d38:	f002 fae6 	bl	8018308 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015d3c:	4b0b      	ldr	r3, [pc, #44]	; (8015d6c <RadioSetModem+0xb4>)
 8015d3e:	2200      	movs	r2, #0
 8015d40:	735a      	strb	r2, [r3, #13]
        break;
 8015d42:	e00e      	b.n	8015d62 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8015d44:	2002      	movs	r0, #2
 8015d46:	f002 fadf 	bl	8018308 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015d4a:	4b08      	ldr	r3, [pc, #32]	; (8015d6c <RadioSetModem+0xb4>)
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	735a      	strb	r2, [r3, #13]
        break;
 8015d50:	e007      	b.n	8015d62 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015d52:	2000      	movs	r0, #0
 8015d54:	f002 fad8 	bl	8018308 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015d58:	4b04      	ldr	r3, [pc, #16]	; (8015d6c <RadioSetModem+0xb4>)
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	735a      	strb	r2, [r3, #13]
        break;
 8015d5e:	e000      	b.n	8015d62 <RadioSetModem+0xaa>
        break;
 8015d60:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8015d62:	bf00      	nop
 8015d64:	3708      	adds	r7, #8
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	20001be8 	.word	0x20001be8

08015d70 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f002 fa7f 	bl	801827c <SUBGRF_SetRfFrequency>
}
 8015d7e:	bf00      	nop
 8015d80:	3708      	adds	r7, #8
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}

08015d86 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8015d86:	b580      	push	{r7, lr}
 8015d88:	b090      	sub	sp, #64	; 0x40
 8015d8a:	af0a      	add	r7, sp, #40	; 0x28
 8015d8c:	60f8      	str	r0, [r7, #12]
 8015d8e:	60b9      	str	r1, [r7, #8]
 8015d90:	603b      	str	r3, [r7, #0]
 8015d92:	4613      	mov	r3, r2
 8015d94:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8015d96:	2301      	movs	r3, #1
 8015d98:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8015da2:	f000 fddc 	bl	801695e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8015da6:	2000      	movs	r0, #0
 8015da8:	f7ff ff86 	bl	8015cb8 <RadioSetModem>

    RadioSetChannel( freq );
 8015dac:	68f8      	ldr	r0, [r7, #12]
 8015dae:	f7ff ffdf 	bl	8015d70 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8015db2:	2301      	movs	r3, #1
 8015db4:	9309      	str	r3, [sp, #36]	; 0x24
 8015db6:	2300      	movs	r3, #0
 8015db8:	9308      	str	r3, [sp, #32]
 8015dba:	2300      	movs	r3, #0
 8015dbc:	9307      	str	r3, [sp, #28]
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	9306      	str	r3, [sp, #24]
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	9305      	str	r3, [sp, #20]
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	9304      	str	r3, [sp, #16]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	9303      	str	r3, [sp, #12]
 8015dce:	2300      	movs	r3, #0
 8015dd0:	9302      	str	r3, [sp, #8]
 8015dd2:	2303      	movs	r3, #3
 8015dd4:	9301      	str	r3, [sp, #4]
 8015dd6:	68bb      	ldr	r3, [r7, #8]
 8015dd8:	9300      	str	r3, [sp, #0]
 8015dda:	2300      	movs	r3, #0
 8015ddc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8015de0:	68b9      	ldr	r1, [r7, #8]
 8015de2:	2000      	movs	r0, #0
 8015de4:	f000 f83c 	bl	8015e60 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8015de8:	2000      	movs	r0, #0
 8015dea:	f000 fdbf 	bl	801696c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8015dee:	f000 ff55 	bl	8016c9c <RadioGetWakeupTime>
 8015df2:	4603      	mov	r3, r0
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7eb ff05 	bl	8001c04 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8015dfa:	f004 f8bd 	bl	8019f78 <UTIL_TIMER_GetCurrentTime>
 8015dfe:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015e00:	e00d      	b.n	8015e1e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8015e02:	2000      	movs	r0, #0
 8015e04:	f000 fe9a 	bl	8016b3c <RadioRssi>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8015e0c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	dd02      	ble.n	8015e1e <RadioIsChannelFree+0x98>
        {
            status = false;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	75fb      	strb	r3, [r7, #23]
            break;
 8015e1c:	e006      	b.n	8015e2c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015e1e:	6938      	ldr	r0, [r7, #16]
 8015e20:	f004 f8bc 	bl	8019f9c <UTIL_TIMER_GetElapsedTime>
 8015e24:	4602      	mov	r2, r0
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d8ea      	bhi.n	8015e02 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8015e2c:	f000 fd97 	bl	801695e <RadioStandby>

    return status;
 8015e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3718      	adds	r7, #24
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}

08015e3a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8015e3a:	b580      	push	{r7, lr}
 8015e3c:	b082      	sub	sp, #8
 8015e3e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8015e40:	2300      	movs	r3, #0
 8015e42:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015e44:	2300      	movs	r3, #0
 8015e46:	2200      	movs	r2, #0
 8015e48:	2100      	movs	r1, #0
 8015e4a:	2000      	movs	r0, #0
 8015e4c:	f002 f9ba 	bl	80181c4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8015e50:	f001 ff6f 	bl	8017d32 <SUBGRF_GetRandom>
 8015e54:	6078      	str	r0, [r7, #4]

    return rnd;
 8015e56:	687b      	ldr	r3, [r7, #4]
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3708      	adds	r7, #8
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}

08015e60 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b08a      	sub	sp, #40	; 0x28
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	60b9      	str	r1, [r7, #8]
 8015e68:	607a      	str	r2, [r7, #4]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	73fb      	strb	r3, [r7, #15]
 8015e70:	4613      	mov	r3, r2
 8015e72:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8015e74:	4ab9      	ldr	r2, [pc, #740]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015e76:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8015e7a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8015e7c:	f003 f829 	bl	8018ed2 <RFW_DeInit>
    if( rxContinuous == true )
 8015e80:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d001      	beq.n	8015e8c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8015e8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d004      	beq.n	8015e9e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8015e94:	4ab2      	ldr	r2, [pc, #712]	; (8016160 <RadioSetRxConfig+0x300>)
 8015e96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015e9a:	7013      	strb	r3, [r2, #0]
 8015e9c:	e002      	b.n	8015ea4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8015e9e:	4bb0      	ldr	r3, [pc, #704]	; (8016160 <RadioSetRxConfig+0x300>)
 8015ea0:	22ff      	movs	r2, #255	; 0xff
 8015ea2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8015ea4:	7bfb      	ldrb	r3, [r7, #15]
 8015ea6:	2b05      	cmp	r3, #5
 8015ea8:	d009      	beq.n	8015ebe <RadioSetRxConfig+0x5e>
 8015eaa:	2b05      	cmp	r3, #5
 8015eac:	f300 81ca 	bgt.w	8016244 <RadioSetRxConfig+0x3e4>
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f000 80bf 	beq.w	8016034 <RadioSetRxConfig+0x1d4>
 8015eb6:	2b01      	cmp	r3, #1
 8015eb8:	f000 8124 	beq.w	8016104 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8015ebc:	e1c2      	b.n	8016244 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8015ebe:	2001      	movs	r0, #1
 8015ec0:	f002 f87c 	bl	8017fbc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015ec4:	4ba5      	ldr	r3, [pc, #660]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015ecc:	4aa3      	ldr	r2, [pc, #652]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8015ed2:	4ba2      	ldr	r3, [pc, #648]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015ed4:	2209      	movs	r2, #9
 8015ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8015eda:	4ba0      	ldr	r3, [pc, #640]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015edc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015ee0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8015ee2:	68b8      	ldr	r0, [r7, #8]
 8015ee4:	f002 ff28 	bl	8018d38 <SUBGRF_GetFskBandwidthRegValue>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	461a      	mov	r2, r3
 8015eec:	4b9b      	ldr	r3, [pc, #620]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015ef2:	4b9a      	ldr	r3, [pc, #616]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015ef8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015efa:	00db      	lsls	r3, r3, #3
 8015efc:	b29a      	uxth	r2, r3
 8015efe:	4b97      	ldr	r3, [pc, #604]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f00:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8015f02:	4b96      	ldr	r3, [pc, #600]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f04:	2200      	movs	r2, #0
 8015f06:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8015f08:	4b94      	ldr	r3, [pc, #592]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f0a:	2210      	movs	r2, #16
 8015f0c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015f0e:	4b93      	ldr	r3, [pc, #588]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f10:	2200      	movs	r2, #0
 8015f12:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8015f14:	4b91      	ldr	r3, [pc, #580]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f16:	2200      	movs	r2, #0
 8015f18:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015f1a:	4b91      	ldr	r3, [pc, #580]	; (8016160 <RadioSetRxConfig+0x300>)
 8015f1c:	781a      	ldrb	r2, [r3, #0]
 8015f1e:	4b8f      	ldr	r3, [pc, #572]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f20:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015f22:	4b8e      	ldr	r3, [pc, #568]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f24:	2201      	movs	r2, #1
 8015f26:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8015f28:	4b8c      	ldr	r3, [pc, #560]	; (801615c <RadioSetRxConfig+0x2fc>)
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8015f2e:	2005      	movs	r0, #5
 8015f30:	f7ff fec2 	bl	8015cb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015f34:	488b      	ldr	r0, [pc, #556]	; (8016164 <RadioSetRxConfig+0x304>)
 8015f36:	f002 fadb 	bl	80184f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015f3a:	488b      	ldr	r0, [pc, #556]	; (8016168 <RadioSetRxConfig+0x308>)
 8015f3c:	f002 fbaa 	bl	8018694 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015f40:	4a8a      	ldr	r2, [pc, #552]	; (801616c <RadioSetRxConfig+0x30c>)
 8015f42:	f107 031c 	add.w	r3, r7, #28
 8015f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f4e:	f107 031c 	add.w	r3, r7, #28
 8015f52:	4618      	mov	r0, r3
 8015f54:	f001 fe6b 	bl	8017c2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015f58:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015f5c:	f001 feb6 	bl	8017ccc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8015f60:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015f64:	f000 fe09 	bl	8016b7a <RadioRead>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8015f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f72:	f023 0310 	bic.w	r3, r3, #16
 8015f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8015f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f7e:	4619      	mov	r1, r3
 8015f80:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015f84:	f000 fde7 	bl	8016b56 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8015f88:	2104      	movs	r1, #4
 8015f8a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8015f8e:	f000 fde2 	bl	8016b56 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8015f92:	f640 009b 	movw	r0, #2203	; 0x89b
 8015f96:	f000 fdf0 	bl	8016b7a <RadioRead>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fa4:	f023 031c 	bic.w	r3, r3, #28
 8015fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8015fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb0:	f043 0308 	orr.w	r3, r3, #8
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	f640 009b 	movw	r0, #2203	; 0x89b
 8015fbc:	f000 fdcb 	bl	8016b56 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8015fc0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015fc4:	f000 fdd9 	bl	8016b7a <RadioRead>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fd2:	f023 0318 	bic.w	r3, r3, #24
 8015fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8015fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fde:	f043 0318 	orr.w	r3, r3, #24
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015fea:	f000 fdb4 	bl	8016b56 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8015fee:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015ff2:	f000 fdc2 	bl	8016b7a <RadioRead>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8015ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801600c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016010:	b2db      	uxtb	r3, r3
 8016012:	4619      	mov	r1, r3
 8016014:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016018:	f000 fd9d 	bl	8016b56 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801601c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801601e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016022:	fb02 f303 	mul.w	r3, r2, r3
 8016026:	461a      	mov	r2, r3
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	fbb2 f3f3 	udiv	r3, r2, r3
 801602e:	4a4b      	ldr	r2, [pc, #300]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016030:	6093      	str	r3, [r2, #8]
            break;
 8016032:	e108      	b.n	8016246 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016034:	2000      	movs	r0, #0
 8016036:	f001 ffc1 	bl	8017fbc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801603a:	4b48      	ldr	r3, [pc, #288]	; (801615c <RadioSetRxConfig+0x2fc>)
 801603c:	2200      	movs	r2, #0
 801603e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016042:	4a46      	ldr	r2, [pc, #280]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016048:	4b44      	ldr	r3, [pc, #272]	; (801615c <RadioSetRxConfig+0x2fc>)
 801604a:	220b      	movs	r2, #11
 801604c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016050:	68b8      	ldr	r0, [r7, #8]
 8016052:	f002 fe71 	bl	8018d38 <SUBGRF_GetFskBandwidthRegValue>
 8016056:	4603      	mov	r3, r0
 8016058:	461a      	mov	r2, r3
 801605a:	4b40      	ldr	r3, [pc, #256]	; (801615c <RadioSetRxConfig+0x2fc>)
 801605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016060:	4b3e      	ldr	r3, [pc, #248]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016062:	2200      	movs	r2, #0
 8016064:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016068:	00db      	lsls	r3, r3, #3
 801606a:	b29a      	uxth	r2, r3
 801606c:	4b3b      	ldr	r3, [pc, #236]	; (801615c <RadioSetRxConfig+0x2fc>)
 801606e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016070:	4b3a      	ldr	r3, [pc, #232]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016072:	2204      	movs	r2, #4
 8016074:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016076:	4b39      	ldr	r3, [pc, #228]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016078:	2218      	movs	r2, #24
 801607a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801607c:	4b37      	ldr	r3, [pc, #220]	; (801615c <RadioSetRxConfig+0x2fc>)
 801607e:	2200      	movs	r2, #0
 8016080:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016082:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016086:	f083 0301 	eor.w	r3, r3, #1
 801608a:	b2db      	uxtb	r3, r3
 801608c:	461a      	mov	r2, r3
 801608e:	4b33      	ldr	r3, [pc, #204]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016090:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016092:	4b33      	ldr	r3, [pc, #204]	; (8016160 <RadioSetRxConfig+0x300>)
 8016094:	781a      	ldrb	r2, [r3, #0]
 8016096:	4b31      	ldr	r3, [pc, #196]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016098:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801609a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d003      	beq.n	80160aa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80160a2:	4b2e      	ldr	r3, [pc, #184]	; (801615c <RadioSetRxConfig+0x2fc>)
 80160a4:	22f2      	movs	r2, #242	; 0xf2
 80160a6:	75da      	strb	r2, [r3, #23]
 80160a8:	e002      	b.n	80160b0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80160aa:	4b2c      	ldr	r3, [pc, #176]	; (801615c <RadioSetRxConfig+0x2fc>)
 80160ac:	2201      	movs	r2, #1
 80160ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80160b0:	4b2a      	ldr	r3, [pc, #168]	; (801615c <RadioSetRxConfig+0x2fc>)
 80160b2:	2201      	movs	r2, #1
 80160b4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80160b6:	f000 fc52 	bl	801695e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80160ba:	2000      	movs	r0, #0
 80160bc:	f7ff fdfc 	bl	8015cb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80160c0:	4828      	ldr	r0, [pc, #160]	; (8016164 <RadioSetRxConfig+0x304>)
 80160c2:	f002 fa15 	bl	80184f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80160c6:	4828      	ldr	r0, [pc, #160]	; (8016168 <RadioSetRxConfig+0x308>)
 80160c8:	f002 fae4 	bl	8018694 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80160cc:	4a28      	ldr	r2, [pc, #160]	; (8016170 <RadioSetRxConfig+0x310>)
 80160ce:	f107 0314 	add.w	r3, r7, #20
 80160d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80160da:	f107 0314 	add.w	r3, r7, #20
 80160de:	4618      	mov	r0, r3
 80160e0:	f001 fda5 	bl	8017c2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80160e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80160e8:	f001 fdf0 	bl	8017ccc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80160ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80160ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80160f2:	fb02 f303 	mul.w	r3, r2, r3
 80160f6:	461a      	mov	r2, r3
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80160fe:	4a17      	ldr	r2, [pc, #92]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016100:	6093      	str	r3, [r2, #8]
            break;
 8016102:	e0a0      	b.n	8016246 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016104:	2000      	movs	r0, #0
 8016106:	f001 ff59 	bl	8017fbc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801610a:	4b14      	ldr	r3, [pc, #80]	; (801615c <RadioSetRxConfig+0x2fc>)
 801610c:	2201      	movs	r2, #1
 801610e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	b2da      	uxtb	r2, r3
 8016116:	4b11      	ldr	r3, [pc, #68]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801611c:	4a15      	ldr	r2, [pc, #84]	; (8016174 <RadioSetRxConfig+0x314>)
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	4413      	add	r3, r2
 8016122:	781a      	ldrb	r2, [r3, #0]
 8016124:	4b0d      	ldr	r3, [pc, #52]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801612a:	4a0c      	ldr	r2, [pc, #48]	; (801615c <RadioSetRxConfig+0x2fc>)
 801612c:	7bbb      	ldrb	r3, [r7, #14]
 801612e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d105      	bne.n	8016144 <RadioSetRxConfig+0x2e4>
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2b0b      	cmp	r3, #11
 801613c:	d008      	beq.n	8016150 <RadioSetRxConfig+0x2f0>
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2b0c      	cmp	r3, #12
 8016142:	d005      	beq.n	8016150 <RadioSetRxConfig+0x2f0>
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	2b01      	cmp	r3, #1
 8016148:	d116      	bne.n	8016178 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b0c      	cmp	r3, #12
 801614e:	d113      	bne.n	8016178 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016150:	4b02      	ldr	r3, [pc, #8]	; (801615c <RadioSetRxConfig+0x2fc>)
 8016152:	2201      	movs	r2, #1
 8016154:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016158:	e012      	b.n	8016180 <RadioSetRxConfig+0x320>
 801615a:	bf00      	nop
 801615c:	20001be8 	.word	0x20001be8
 8016160:	20000138 	.word	0x20000138
 8016164:	20001c20 	.word	0x20001c20
 8016168:	20001bf6 	.word	0x20001bf6
 801616c:	0801b4b8 	.word	0x0801b4b8
 8016170:	0801b4c0 	.word	0x0801b4c0
 8016174:	0801ba9c 	.word	0x0801ba9c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016178:	4b35      	ldr	r3, [pc, #212]	; (8016250 <RadioSetRxConfig+0x3f0>)
 801617a:	2200      	movs	r2, #0
 801617c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016180:	4b33      	ldr	r3, [pc, #204]	; (8016250 <RadioSetRxConfig+0x3f0>)
 8016182:	2201      	movs	r2, #1
 8016184:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016186:	4b32      	ldr	r3, [pc, #200]	; (8016250 <RadioSetRxConfig+0x3f0>)
 8016188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801618c:	2b05      	cmp	r3, #5
 801618e:	d004      	beq.n	801619a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016190:	4b2f      	ldr	r3, [pc, #188]	; (8016250 <RadioSetRxConfig+0x3f0>)
 8016192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016196:	2b06      	cmp	r3, #6
 8016198:	d10a      	bne.n	80161b0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801619a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801619c:	2b0b      	cmp	r3, #11
 801619e:	d803      	bhi.n	80161a8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80161a0:	4b2b      	ldr	r3, [pc, #172]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161a2:	220c      	movs	r2, #12
 80161a4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80161a6:	e006      	b.n	80161b6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80161a8:	4a29      	ldr	r2, [pc, #164]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80161ac:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80161ae:	e002      	b.n	80161b6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80161b0:	4a27      	ldr	r2, [pc, #156]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80161b4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80161b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80161ba:	4b25      	ldr	r3, [pc, #148]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161bc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80161be:	4b25      	ldr	r3, [pc, #148]	; (8016254 <RadioSetRxConfig+0x3f4>)
 80161c0:	781a      	ldrb	r2, [r3, #0]
 80161c2:	4b23      	ldr	r3, [pc, #140]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161c4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80161c6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80161ca:	4b21      	ldr	r3, [pc, #132]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161cc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80161d0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80161d4:	4b1e      	ldr	r3, [pc, #120]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80161da:	f000 fbc0 	bl	801695e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80161de:	2001      	movs	r0, #1
 80161e0:	f7ff fd6a 	bl	8015cb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80161e4:	481c      	ldr	r0, [pc, #112]	; (8016258 <RadioSetRxConfig+0x3f8>)
 80161e6:	f002 f983 	bl	80184f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80161ea:	481c      	ldr	r0, [pc, #112]	; (801625c <RadioSetRxConfig+0x3fc>)
 80161ec:	f002 fa52 	bl	8018694 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80161f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	4618      	mov	r0, r3
 80161f6:	f001 fef0 	bl	8017fda <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80161fa:	4b15      	ldr	r3, [pc, #84]	; (8016250 <RadioSetRxConfig+0x3f0>)
 80161fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016200:	2b01      	cmp	r3, #1
 8016202:	d10d      	bne.n	8016220 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016204:	f240 7036 	movw	r0, #1846	; 0x736
 8016208:	f002 fba0 	bl	801894c <SUBGRF_ReadRegister>
 801620c:	4603      	mov	r3, r0
 801620e:	f023 0304 	bic.w	r3, r3, #4
 8016212:	b2db      	uxtb	r3, r3
 8016214:	4619      	mov	r1, r3
 8016216:	f240 7036 	movw	r0, #1846	; 0x736
 801621a:	f002 fb83 	bl	8018924 <SUBGRF_WriteRegister>
 801621e:	e00c      	b.n	801623a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016220:	f240 7036 	movw	r0, #1846	; 0x736
 8016224:	f002 fb92 	bl	801894c <SUBGRF_ReadRegister>
 8016228:	4603      	mov	r3, r0
 801622a:	f043 0304 	orr.w	r3, r3, #4
 801622e:	b2db      	uxtb	r3, r3
 8016230:	4619      	mov	r1, r3
 8016232:	f240 7036 	movw	r0, #1846	; 0x736
 8016236:	f002 fb75 	bl	8018924 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801623a:	4b05      	ldr	r3, [pc, #20]	; (8016250 <RadioSetRxConfig+0x3f0>)
 801623c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016240:	609a      	str	r2, [r3, #8]
            break;
 8016242:	e000      	b.n	8016246 <RadioSetRxConfig+0x3e6>
            break;
 8016244:	bf00      	nop
    }
}
 8016246:	bf00      	nop
 8016248:	3728      	adds	r7, #40	; 0x28
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	20001be8 	.word	0x20001be8
 8016254:	20000138 	.word	0x20000138
 8016258:	20001c20 	.word	0x20001c20
 801625c:	20001bf6 	.word	0x20001bf6

08016260 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b086      	sub	sp, #24
 8016264:	af00      	add	r7, sp, #0
 8016266:	60ba      	str	r2, [r7, #8]
 8016268:	607b      	str	r3, [r7, #4]
 801626a:	4603      	mov	r3, r0
 801626c:	73fb      	strb	r3, [r7, #15]
 801626e:	460b      	mov	r3, r1
 8016270:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016272:	f002 fe2e 	bl	8018ed2 <RFW_DeInit>
    switch( modem )
 8016276:	7bfb      	ldrb	r3, [r7, #15]
 8016278:	2b04      	cmp	r3, #4
 801627a:	f000 80c7 	beq.w	801640c <RadioSetTxConfig+0x1ac>
 801627e:	2b04      	cmp	r3, #4
 8016280:	f300 80d6 	bgt.w	8016430 <RadioSetTxConfig+0x1d0>
 8016284:	2b00      	cmp	r3, #0
 8016286:	d002      	beq.n	801628e <RadioSetTxConfig+0x2e>
 8016288:	2b01      	cmp	r3, #1
 801628a:	d059      	beq.n	8016340 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801628c:	e0d0      	b.n	8016430 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801628e:	4b74      	ldr	r3, [pc, #464]	; (8016460 <RadioSetTxConfig+0x200>)
 8016290:	2200      	movs	r2, #0
 8016292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016296:	4a72      	ldr	r2, [pc, #456]	; (8016460 <RadioSetTxConfig+0x200>)
 8016298:	6a3b      	ldr	r3, [r7, #32]
 801629a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801629c:	4b70      	ldr	r3, [pc, #448]	; (8016460 <RadioSetTxConfig+0x200>)
 801629e:	220b      	movs	r2, #11
 80162a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f002 fd47 	bl	8018d38 <SUBGRF_GetFskBandwidthRegValue>
 80162aa:	4603      	mov	r3, r0
 80162ac:	461a      	mov	r2, r3
 80162ae:	4b6c      	ldr	r3, [pc, #432]	; (8016460 <RadioSetTxConfig+0x200>)
 80162b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80162b4:	4a6a      	ldr	r2, [pc, #424]	; (8016460 <RadioSetTxConfig+0x200>)
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80162ba:	4b69      	ldr	r3, [pc, #420]	; (8016460 <RadioSetTxConfig+0x200>)
 80162bc:	2200      	movs	r2, #0
 80162be:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80162c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	b29a      	uxth	r2, r3
 80162c6:	4b66      	ldr	r3, [pc, #408]	; (8016460 <RadioSetTxConfig+0x200>)
 80162c8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80162ca:	4b65      	ldr	r3, [pc, #404]	; (8016460 <RadioSetTxConfig+0x200>)
 80162cc:	2204      	movs	r2, #4
 80162ce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80162d0:	4b63      	ldr	r3, [pc, #396]	; (8016460 <RadioSetTxConfig+0x200>)
 80162d2:	2218      	movs	r2, #24
 80162d4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80162d6:	4b62      	ldr	r3, [pc, #392]	; (8016460 <RadioSetTxConfig+0x200>)
 80162d8:	2200      	movs	r2, #0
 80162da:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80162dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80162e0:	f083 0301 	eor.w	r3, r3, #1
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	461a      	mov	r2, r3
 80162e8:	4b5d      	ldr	r3, [pc, #372]	; (8016460 <RadioSetTxConfig+0x200>)
 80162ea:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80162ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d003      	beq.n	80162fc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80162f4:	4b5a      	ldr	r3, [pc, #360]	; (8016460 <RadioSetTxConfig+0x200>)
 80162f6:	22f2      	movs	r2, #242	; 0xf2
 80162f8:	75da      	strb	r2, [r3, #23]
 80162fa:	e002      	b.n	8016302 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80162fc:	4b58      	ldr	r3, [pc, #352]	; (8016460 <RadioSetTxConfig+0x200>)
 80162fe:	2201      	movs	r2, #1
 8016300:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016302:	4b57      	ldr	r3, [pc, #348]	; (8016460 <RadioSetTxConfig+0x200>)
 8016304:	2201      	movs	r2, #1
 8016306:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016308:	f000 fb29 	bl	801695e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801630c:	2000      	movs	r0, #0
 801630e:	f7ff fcd3 	bl	8015cb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016312:	4854      	ldr	r0, [pc, #336]	; (8016464 <RadioSetTxConfig+0x204>)
 8016314:	f002 f8ec 	bl	80184f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016318:	4853      	ldr	r0, [pc, #332]	; (8016468 <RadioSetTxConfig+0x208>)
 801631a:	f002 f9bb 	bl	8018694 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801631e:	4a53      	ldr	r2, [pc, #332]	; (801646c <RadioSetTxConfig+0x20c>)
 8016320:	f107 0310 	add.w	r3, r7, #16
 8016324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016328:	e883 0003 	stmia.w	r3, {r0, r1}
 801632c:	f107 0310 	add.w	r3, r7, #16
 8016330:	4618      	mov	r0, r3
 8016332:	f001 fc7c 	bl	8017c2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016336:	f240 10ff 	movw	r0, #511	; 0x1ff
 801633a:	f001 fcc7 	bl	8017ccc <SUBGRF_SetWhiteningSeed>
            break;
 801633e:	e078      	b.n	8016432 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016340:	4b47      	ldr	r3, [pc, #284]	; (8016460 <RadioSetTxConfig+0x200>)
 8016342:	2201      	movs	r2, #1
 8016344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016348:	6a3b      	ldr	r3, [r7, #32]
 801634a:	b2da      	uxtb	r2, r3
 801634c:	4b44      	ldr	r3, [pc, #272]	; (8016460 <RadioSetTxConfig+0x200>)
 801634e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016352:	4a47      	ldr	r2, [pc, #284]	; (8016470 <RadioSetTxConfig+0x210>)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	4413      	add	r3, r2
 8016358:	781a      	ldrb	r2, [r3, #0]
 801635a:	4b41      	ldr	r3, [pc, #260]	; (8016460 <RadioSetTxConfig+0x200>)
 801635c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016360:	4a3f      	ldr	r2, [pc, #252]	; (8016460 <RadioSetTxConfig+0x200>)
 8016362:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016366:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d105      	bne.n	801637c <RadioSetTxConfig+0x11c>
 8016370:	6a3b      	ldr	r3, [r7, #32]
 8016372:	2b0b      	cmp	r3, #11
 8016374:	d008      	beq.n	8016388 <RadioSetTxConfig+0x128>
 8016376:	6a3b      	ldr	r3, [r7, #32]
 8016378:	2b0c      	cmp	r3, #12
 801637a:	d005      	beq.n	8016388 <RadioSetTxConfig+0x128>
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b01      	cmp	r3, #1
 8016380:	d107      	bne.n	8016392 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016382:	6a3b      	ldr	r3, [r7, #32]
 8016384:	2b0c      	cmp	r3, #12
 8016386:	d104      	bne.n	8016392 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016388:	4b35      	ldr	r3, [pc, #212]	; (8016460 <RadioSetTxConfig+0x200>)
 801638a:	2201      	movs	r2, #1
 801638c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016390:	e003      	b.n	801639a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016392:	4b33      	ldr	r3, [pc, #204]	; (8016460 <RadioSetTxConfig+0x200>)
 8016394:	2200      	movs	r2, #0
 8016396:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801639a:	4b31      	ldr	r3, [pc, #196]	; (8016460 <RadioSetTxConfig+0x200>)
 801639c:	2201      	movs	r2, #1
 801639e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80163a0:	4b2f      	ldr	r3, [pc, #188]	; (8016460 <RadioSetTxConfig+0x200>)
 80163a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80163a6:	2b05      	cmp	r3, #5
 80163a8:	d004      	beq.n	80163b4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80163aa:	4b2d      	ldr	r3, [pc, #180]	; (8016460 <RadioSetTxConfig+0x200>)
 80163ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80163b0:	2b06      	cmp	r3, #6
 80163b2:	d10a      	bne.n	80163ca <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80163b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80163b6:	2b0b      	cmp	r3, #11
 80163b8:	d803      	bhi.n	80163c2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80163ba:	4b29      	ldr	r3, [pc, #164]	; (8016460 <RadioSetTxConfig+0x200>)
 80163bc:	220c      	movs	r2, #12
 80163be:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80163c0:	e006      	b.n	80163d0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80163c2:	4a27      	ldr	r2, [pc, #156]	; (8016460 <RadioSetTxConfig+0x200>)
 80163c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80163c6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80163c8:	e002      	b.n	80163d0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80163ca:	4a25      	ldr	r2, [pc, #148]	; (8016460 <RadioSetTxConfig+0x200>)
 80163cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80163ce:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80163d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80163d4:	4b22      	ldr	r3, [pc, #136]	; (8016460 <RadioSetTxConfig+0x200>)
 80163d6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80163d8:	4b26      	ldr	r3, [pc, #152]	; (8016474 <RadioSetTxConfig+0x214>)
 80163da:	781a      	ldrb	r2, [r3, #0]
 80163dc:	4b20      	ldr	r3, [pc, #128]	; (8016460 <RadioSetTxConfig+0x200>)
 80163de:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80163e0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80163e4:	4b1e      	ldr	r3, [pc, #120]	; (8016460 <RadioSetTxConfig+0x200>)
 80163e6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80163ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80163ee:	4b1c      	ldr	r3, [pc, #112]	; (8016460 <RadioSetTxConfig+0x200>)
 80163f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80163f4:	f000 fab3 	bl	801695e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80163f8:	2001      	movs	r0, #1
 80163fa:	f7ff fc5d 	bl	8015cb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80163fe:	4819      	ldr	r0, [pc, #100]	; (8016464 <RadioSetTxConfig+0x204>)
 8016400:	f002 f876 	bl	80184f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016404:	4818      	ldr	r0, [pc, #96]	; (8016468 <RadioSetTxConfig+0x208>)
 8016406:	f002 f945 	bl	8018694 <SUBGRF_SetPacketParams>
            break;
 801640a:	e012      	b.n	8016432 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801640c:	2004      	movs	r0, #4
 801640e:	f7ff fc53 	bl	8015cb8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016412:	4b13      	ldr	r3, [pc, #76]	; (8016460 <RadioSetTxConfig+0x200>)
 8016414:	2202      	movs	r2, #2
 8016416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801641a:	4a11      	ldr	r2, [pc, #68]	; (8016460 <RadioSetTxConfig+0x200>)
 801641c:	6a3b      	ldr	r3, [r7, #32]
 801641e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016420:	4b0f      	ldr	r3, [pc, #60]	; (8016460 <RadioSetTxConfig+0x200>)
 8016422:	2216      	movs	r2, #22
 8016424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016428:	480e      	ldr	r0, [pc, #56]	; (8016464 <RadioSetTxConfig+0x204>)
 801642a:	f002 f861 	bl	80184f0 <SUBGRF_SetModulationParams>
            break;
 801642e:	e000      	b.n	8016432 <RadioSetTxConfig+0x1d2>
            break;
 8016430:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016436:	4618      	mov	r0, r3
 8016438:	f002 fb90 	bl	8018b5c <SUBGRF_SetRfTxPower>
 801643c:	4603      	mov	r3, r0
 801643e:	461a      	mov	r2, r3
 8016440:	4b07      	ldr	r3, [pc, #28]	; (8016460 <RadioSetTxConfig+0x200>)
 8016442:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016446:	4b06      	ldr	r3, [pc, #24]	; (8016460 <RadioSetTxConfig+0x200>)
 8016448:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801644c:	4618      	mov	r0, r3
 801644e:	f002 fd54 	bl	8018efa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016452:	4a03      	ldr	r2, [pc, #12]	; (8016460 <RadioSetTxConfig+0x200>)
 8016454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016456:	6053      	str	r3, [r2, #4]
}
 8016458:	bf00      	nop
 801645a:	3718      	adds	r7, #24
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	20001be8 	.word	0x20001be8
 8016464:	20001c20 	.word	0x20001c20
 8016468:	20001bf6 	.word	0x20001bf6
 801646c:	0801b4c0 	.word	0x0801b4c0
 8016470:	0801ba9c 	.word	0x0801ba9c
 8016474:	20000138 	.word	0x20000138

08016478 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
    return true;
 8016480:	2301      	movs	r3, #1
}
 8016482:	4618      	mov	r0, r3
 8016484:	370c      	adds	r7, #12
 8016486:	46bd      	mov	sp, r7
 8016488:	bc80      	pop	{r7}
 801648a:	4770      	bx	lr

0801648c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801648c:	b480      	push	{r7}
 801648e:	b085      	sub	sp, #20
 8016490:	af00      	add	r7, sp, #0
 8016492:	4603      	mov	r3, r0
 8016494:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016496:	2300      	movs	r3, #0
 8016498:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801649a:	79fb      	ldrb	r3, [r7, #7]
 801649c:	2b0a      	cmp	r3, #10
 801649e:	d83e      	bhi.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
 80164a0:	a201      	add	r2, pc, #4	; (adr r2, 80164a8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80164a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164a6:	bf00      	nop
 80164a8:	080164d5 	.word	0x080164d5
 80164ac:	080164e5 	.word	0x080164e5
 80164b0:	080164f5 	.word	0x080164f5
 80164b4:	08016505 	.word	0x08016505
 80164b8:	0801650d 	.word	0x0801650d
 80164bc:	08016513 	.word	0x08016513
 80164c0:	08016519 	.word	0x08016519
 80164c4:	0801651f 	.word	0x0801651f
 80164c8:	080164dd 	.word	0x080164dd
 80164cc:	080164ed 	.word	0x080164ed
 80164d0:	080164fd 	.word	0x080164fd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80164d4:	f641 6384 	movw	r3, #7812	; 0x1e84
 80164d8:	60fb      	str	r3, [r7, #12]
        break;
 80164da:	e020      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80164dc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80164e0:	60fb      	str	r3, [r7, #12]
        break;
 80164e2:	e01c      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80164e4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80164e8:	60fb      	str	r3, [r7, #12]
        break;
 80164ea:	e018      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80164ec:	f245 1361 	movw	r3, #20833	; 0x5161
 80164f0:	60fb      	str	r3, [r7, #12]
        break;
 80164f2:	e014      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80164f4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80164f8:	60fb      	str	r3, [r7, #12]
        break;
 80164fa:	e010      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80164fc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016500:	60fb      	str	r3, [r7, #12]
        break;
 8016502:	e00c      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016504:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016508:	60fb      	str	r3, [r7, #12]
        break;
 801650a:	e008      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801650c:	4b07      	ldr	r3, [pc, #28]	; (801652c <RadioGetLoRaBandwidthInHz+0xa0>)
 801650e:	60fb      	str	r3, [r7, #12]
        break;
 8016510:	e005      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016512:	4b07      	ldr	r3, [pc, #28]	; (8016530 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016514:	60fb      	str	r3, [r7, #12]
        break;
 8016516:	e002      	b.n	801651e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016518:	4b06      	ldr	r3, [pc, #24]	; (8016534 <RadioGetLoRaBandwidthInHz+0xa8>)
 801651a:	60fb      	str	r3, [r7, #12]
        break;
 801651c:	bf00      	nop
    }

    return bandwidthInHz;
 801651e:	68fb      	ldr	r3, [r7, #12]
}
 8016520:	4618      	mov	r0, r3
 8016522:	3714      	adds	r7, #20
 8016524:	46bd      	mov	sp, r7
 8016526:	bc80      	pop	{r7}
 8016528:	4770      	bx	lr
 801652a:	bf00      	nop
 801652c:	0001e848 	.word	0x0001e848
 8016530:	0003d090 	.word	0x0003d090
 8016534:	0007a120 	.word	0x0007a120

08016538 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016538:	b480      	push	{r7}
 801653a:	b083      	sub	sp, #12
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	4608      	mov	r0, r1
 8016542:	4611      	mov	r1, r2
 8016544:	461a      	mov	r2, r3
 8016546:	4603      	mov	r3, r0
 8016548:	70fb      	strb	r3, [r7, #3]
 801654a:	460b      	mov	r3, r1
 801654c:	803b      	strh	r3, [r7, #0]
 801654e:	4613      	mov	r3, r2
 8016550:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016552:	883b      	ldrh	r3, [r7, #0]
 8016554:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016556:	78ba      	ldrb	r2, [r7, #2]
 8016558:	f082 0201 	eor.w	r2, r2, #1
 801655c:	b2d2      	uxtb	r2, r2
 801655e:	2a00      	cmp	r2, #0
 8016560:	d001      	beq.n	8016566 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016562:	2208      	movs	r2, #8
 8016564:	e000      	b.n	8016568 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016566:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016568:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801656a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801656e:	7c3b      	ldrb	r3, [r7, #16]
 8016570:	7d39      	ldrb	r1, [r7, #20]
 8016572:	2900      	cmp	r1, #0
 8016574:	d001      	beq.n	801657a <RadioGetGfskTimeOnAirNumerator+0x42>
 8016576:	2102      	movs	r1, #2
 8016578:	e000      	b.n	801657c <RadioGetGfskTimeOnAirNumerator+0x44>
 801657a:	2100      	movs	r1, #0
 801657c:	440b      	add	r3, r1
 801657e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016580:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016582:	4618      	mov	r0, r3
 8016584:	370c      	adds	r7, #12
 8016586:	46bd      	mov	sp, r7
 8016588:	bc80      	pop	{r7}
 801658a:	4770      	bx	lr

0801658c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801658c:	b480      	push	{r7}
 801658e:	b08b      	sub	sp, #44	; 0x2c
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	4611      	mov	r1, r2
 8016598:	461a      	mov	r2, r3
 801659a:	460b      	mov	r3, r1
 801659c:	71fb      	strb	r3, [r7, #7]
 801659e:	4613      	mov	r3, r2
 80165a0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80165a2:	79fb      	ldrb	r3, [r7, #7]
 80165a4:	3304      	adds	r3, #4
 80165a6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80165a8:	2300      	movs	r3, #0
 80165aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	2b05      	cmp	r3, #5
 80165b2:	d002      	beq.n	80165ba <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	2b06      	cmp	r3, #6
 80165b8:	d104      	bne.n	80165c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80165ba:	88bb      	ldrh	r3, [r7, #4]
 80165bc:	2b0b      	cmp	r3, #11
 80165be:	d801      	bhi.n	80165c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80165c0:	230c      	movs	r3, #12
 80165c2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d105      	bne.n	80165d6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	2b0b      	cmp	r3, #11
 80165ce:	d008      	beq.n	80165e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	2b0c      	cmp	r3, #12
 80165d4:	d005      	beq.n	80165e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	2b01      	cmp	r3, #1
 80165da:	d105      	bne.n	80165e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	2b0c      	cmp	r3, #12
 80165e0:	d102      	bne.n	80165e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80165e2:	2301      	movs	r3, #1
 80165e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80165e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80165ec:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80165ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80165f2:	2a00      	cmp	r2, #0
 80165f4:	d001      	beq.n	80165fa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80165f6:	2210      	movs	r2, #16
 80165f8:	e000      	b.n	80165fc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80165fa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80165fc:	4413      	add	r3, r2
 80165fe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016604:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016606:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801660a:	2a00      	cmp	r2, #0
 801660c:	d001      	beq.n	8016612 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801660e:	2200      	movs	r2, #0
 8016610:	e000      	b.n	8016614 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016612:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016614:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016616:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	2b06      	cmp	r3, #6
 801661c:	d803      	bhi.n	8016626 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	009b      	lsls	r3, r3, #2
 8016622:	623b      	str	r3, [r7, #32]
 8016624:	e00e      	b.n	8016644 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	3308      	adds	r3, #8
 801662a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801662c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016630:	2b00      	cmp	r3, #0
 8016632:	d004      	beq.n	801663e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	3b02      	subs	r3, #2
 8016638:	009b      	lsls	r3, r3, #2
 801663a:	623b      	str	r3, [r7, #32]
 801663c:	e002      	b.n	8016644 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	009b      	lsls	r3, r3, #2
 8016642:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016644:	69fb      	ldr	r3, [r7, #28]
 8016646:	2b00      	cmp	r3, #0
 8016648:	da01      	bge.n	801664e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801664a:	2300      	movs	r3, #0
 801664c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801664e:	69fa      	ldr	r2, [r7, #28]
 8016650:	6a3b      	ldr	r3, [r7, #32]
 8016652:	4413      	add	r3, r2
 8016654:	1e5a      	subs	r2, r3, #1
 8016656:	6a3b      	ldr	r3, [r7, #32]
 8016658:	fb92 f3f3 	sdiv	r3, r2, r3
 801665c:	697a      	ldr	r2, [r7, #20]
 801665e:	fb03 f202 	mul.w	r2, r3, r2
 8016662:	88bb      	ldrh	r3, [r7, #4]
 8016664:	4413      	add	r3, r2
    int32_t intermediate =
 8016666:	330c      	adds	r3, #12
 8016668:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	2b06      	cmp	r3, #6
 801666e:	d802      	bhi.n	8016676 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	3302      	adds	r3, #2
 8016674:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	1c5a      	adds	r2, r3, #1
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	3b02      	subs	r3, #2
 8016680:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016684:	4618      	mov	r0, r3
 8016686:	372c      	adds	r7, #44	; 0x2c
 8016688:	46bd      	mov	sp, r7
 801668a:	bc80      	pop	{r7}
 801668c:	4770      	bx	lr
	...

08016690 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b08a      	sub	sp, #40	; 0x28
 8016694:	af04      	add	r7, sp, #16
 8016696:	60b9      	str	r1, [r7, #8]
 8016698:	607a      	str	r2, [r7, #4]
 801669a:	461a      	mov	r2, r3
 801669c:	4603      	mov	r3, r0
 801669e:	73fb      	strb	r3, [r7, #15]
 80166a0:	4613      	mov	r3, r2
 80166a2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80166a4:	2300      	movs	r3, #0
 80166a6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80166a8:	2301      	movs	r3, #1
 80166aa:	613b      	str	r3, [r7, #16]

    switch( modem )
 80166ac:	7bfb      	ldrb	r3, [r7, #15]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d002      	beq.n	80166b8 <RadioTimeOnAir+0x28>
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	d017      	beq.n	80166e6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80166b6:	e035      	b.n	8016724 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80166b8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80166bc:	8c3a      	ldrh	r2, [r7, #32]
 80166be:	7bb9      	ldrb	r1, [r7, #14]
 80166c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80166c4:	9301      	str	r3, [sp, #4]
 80166c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	4603      	mov	r3, r0
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f7ff ff32 	bl	8016538 <RadioGetGfskTimeOnAirNumerator>
 80166d4:	4603      	mov	r3, r0
 80166d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80166da:	fb02 f303 	mul.w	r3, r2, r3
 80166de:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	613b      	str	r3, [r7, #16]
        break;
 80166e4:	e01e      	b.n	8016724 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80166e6:	8c39      	ldrh	r1, [r7, #32]
 80166e8:	7bba      	ldrb	r2, [r7, #14]
 80166ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80166ee:	9302      	str	r3, [sp, #8]
 80166f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80166f4:	9301      	str	r3, [sp, #4]
 80166f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80166fa:	9300      	str	r3, [sp, #0]
 80166fc:	460b      	mov	r3, r1
 80166fe:	6879      	ldr	r1, [r7, #4]
 8016700:	68b8      	ldr	r0, [r7, #8]
 8016702:	f7ff ff43 	bl	801658c <RadioGetLoRaTimeOnAirNumerator>
 8016706:	4603      	mov	r3, r0
 8016708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801670c:	fb02 f303 	mul.w	r3, r2, r3
 8016710:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8016712:	4a0a      	ldr	r2, [pc, #40]	; (801673c <RadioTimeOnAir+0xac>)
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	4413      	add	r3, r2
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	4618      	mov	r0, r3
 801671c:	f7ff feb6 	bl	801648c <RadioGetLoRaBandwidthInHz>
 8016720:	6138      	str	r0, [r7, #16]
        break;
 8016722:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8016724:	697a      	ldr	r2, [r7, #20]
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	4413      	add	r3, r2
 801672a:	1e5a      	subs	r2, r3, #1
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016732:	4618      	mov	r0, r3
 8016734:	3718      	adds	r7, #24
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	0801ba9c 	.word	0x0801ba9c

08016740 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	460b      	mov	r3, r1
 801674a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801674c:	2300      	movs	r3, #0
 801674e:	2200      	movs	r2, #0
 8016750:	f240 2101 	movw	r1, #513	; 0x201
 8016754:	f240 2001 	movw	r0, #513	; 0x201
 8016758:	f001 fd34 	bl	80181c4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801675c:	4b71      	ldr	r3, [pc, #452]	; (8016924 <RadioSend+0x1e4>)
 801675e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016762:	2101      	movs	r1, #1
 8016764:	4618      	mov	r0, r3
 8016766:	f002 f9d1 	bl	8018b0c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801676a:	4b6e      	ldr	r3, [pc, #440]	; (8016924 <RadioSend+0x1e4>)
 801676c:	781b      	ldrb	r3, [r3, #0]
 801676e:	2b01      	cmp	r3, #1
 8016770:	d112      	bne.n	8016798 <RadioSend+0x58>
 8016772:	4b6c      	ldr	r3, [pc, #432]	; (8016924 <RadioSend+0x1e4>)
 8016774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016778:	2b06      	cmp	r3, #6
 801677a:	d10d      	bne.n	8016798 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801677c:	f640 0089 	movw	r0, #2185	; 0x889
 8016780:	f002 f8e4 	bl	801894c <SUBGRF_ReadRegister>
 8016784:	4603      	mov	r3, r0
 8016786:	f023 0304 	bic.w	r3, r3, #4
 801678a:	b2db      	uxtb	r3, r3
 801678c:	4619      	mov	r1, r3
 801678e:	f640 0089 	movw	r0, #2185	; 0x889
 8016792:	f002 f8c7 	bl	8018924 <SUBGRF_WriteRegister>
 8016796:	e00c      	b.n	80167b2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8016798:	f640 0089 	movw	r0, #2185	; 0x889
 801679c:	f002 f8d6 	bl	801894c <SUBGRF_ReadRegister>
 80167a0:	4603      	mov	r3, r0
 80167a2:	f043 0304 	orr.w	r3, r3, #4
 80167a6:	b2db      	uxtb	r3, r3
 80167a8:	4619      	mov	r1, r3
 80167aa:	f640 0089 	movw	r0, #2185	; 0x889
 80167ae:	f002 f8b9 	bl	8018924 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80167b2:	4b5c      	ldr	r3, [pc, #368]	; (8016924 <RadioSend+0x1e4>)
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	2b04      	cmp	r3, #4
 80167b8:	f200 80a7 	bhi.w	801690a <RadioSend+0x1ca>
 80167bc:	a201      	add	r2, pc, #4	; (adr r2, 80167c4 <RadioSend+0x84>)
 80167be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167c2:	bf00      	nop
 80167c4:	080167f3 	.word	0x080167f3
 80167c8:	080167d9 	.word	0x080167d9
 80167cc:	080167f3 	.word	0x080167f3
 80167d0:	08016853 	.word	0x08016853
 80167d4:	08016873 	.word	0x08016873
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80167d8:	4a52      	ldr	r2, [pc, #328]	; (8016924 <RadioSend+0x1e4>)
 80167da:	78fb      	ldrb	r3, [r7, #3]
 80167dc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80167de:	4852      	ldr	r0, [pc, #328]	; (8016928 <RadioSend+0x1e8>)
 80167e0:	f001 ff58 	bl	8018694 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80167e4:	78fb      	ldrb	r3, [r7, #3]
 80167e6:	2200      	movs	r2, #0
 80167e8:	4619      	mov	r1, r3
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f001 fa0c 	bl	8017c08 <SUBGRF_SendPayload>
            break;
 80167f0:	e08c      	b.n	801690c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80167f2:	f002 fb74 	bl	8018ede <RFW_Is_Init>
 80167f6:	4603      	mov	r3, r0
 80167f8:	2b01      	cmp	r3, #1
 80167fa:	d11d      	bne.n	8016838 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80167fc:	f107 020d 	add.w	r2, r7, #13
 8016800:	78fb      	ldrb	r3, [r7, #3]
 8016802:	4619      	mov	r1, r3
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f002 fb82 	bl	8018f0e <RFW_TransmitInit>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d10c      	bne.n	801682a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8016810:	7b7a      	ldrb	r2, [r7, #13]
 8016812:	4b44      	ldr	r3, [pc, #272]	; (8016924 <RadioSend+0x1e4>)
 8016814:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016816:	4844      	ldr	r0, [pc, #272]	; (8016928 <RadioSend+0x1e8>)
 8016818:	f001 ff3c 	bl	8018694 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801681c:	7b7b      	ldrb	r3, [r7, #13]
 801681e:	2200      	movs	r2, #0
 8016820:	4619      	mov	r1, r3
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f001 f9f0 	bl	8017c08 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8016828:	e070      	b.n	801690c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801682a:	4b40      	ldr	r3, [pc, #256]	; (801692c <RadioSend+0x1ec>)
 801682c:	2201      	movs	r2, #1
 801682e:	2100      	movs	r1, #0
 8016830:	2002      	movs	r0, #2
 8016832:	f003 fc91 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
 8016836:	e072      	b.n	801691e <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8016838:	4a3a      	ldr	r2, [pc, #232]	; (8016924 <RadioSend+0x1e4>)
 801683a:	78fb      	ldrb	r3, [r7, #3]
 801683c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801683e:	483a      	ldr	r0, [pc, #232]	; (8016928 <RadioSend+0x1e8>)
 8016840:	f001 ff28 	bl	8018694 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8016844:	78fb      	ldrb	r3, [r7, #3]
 8016846:	2200      	movs	r2, #0
 8016848:	4619      	mov	r1, r3
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	f001 f9dc 	bl	8017c08 <SUBGRF_SendPayload>
            break;
 8016850:	e05c      	b.n	801690c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8016852:	4b34      	ldr	r3, [pc, #208]	; (8016924 <RadioSend+0x1e4>)
 8016854:	2202      	movs	r2, #2
 8016856:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8016858:	4a32      	ldr	r2, [pc, #200]	; (8016924 <RadioSend+0x1e4>)
 801685a:	78fb      	ldrb	r3, [r7, #3]
 801685c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801685e:	4832      	ldr	r0, [pc, #200]	; (8016928 <RadioSend+0x1e8>)
 8016860:	f001 ff18 	bl	8018694 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8016864:	78fb      	ldrb	r3, [r7, #3]
 8016866:	2200      	movs	r2, #0
 8016868:	4619      	mov	r1, r3
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f001 f9cc 	bl	8017c08 <SUBGRF_SendPayload>
            break;
 8016870:	e04c      	b.n	801690c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8016872:	78fb      	ldrb	r3, [r7, #3]
 8016874:	461a      	mov	r2, r3
 8016876:	6879      	ldr	r1, [r7, #4]
 8016878:	482d      	ldr	r0, [pc, #180]	; (8016930 <RadioSend+0x1f0>)
 801687a:	f000 fcbc 	bl	80171f6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801687e:	4b29      	ldr	r3, [pc, #164]	; (8016924 <RadioSend+0x1e4>)
 8016880:	2202      	movs	r2, #2
 8016882:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8016884:	78fb      	ldrb	r3, [r7, #3]
 8016886:	3301      	adds	r3, #1
 8016888:	b2da      	uxtb	r2, r3
 801688a:	4b26      	ldr	r3, [pc, #152]	; (8016924 <RadioSend+0x1e4>)
 801688c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801688e:	4826      	ldr	r0, [pc, #152]	; (8016928 <RadioSend+0x1e8>)
 8016890:	f001 ff00 	bl	8018694 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8016894:	2100      	movs	r1, #0
 8016896:	20f1      	movs	r0, #241	; 0xf1
 8016898:	f000 f95d 	bl	8016b56 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801689c:	2100      	movs	r1, #0
 801689e:	20f0      	movs	r0, #240	; 0xf0
 80168a0:	f000 f959 	bl	8016b56 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80168a4:	4b1f      	ldr	r3, [pc, #124]	; (8016924 <RadioSend+0x1e4>)
 80168a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80168a8:	2b64      	cmp	r3, #100	; 0x64
 80168aa:	d108      	bne.n	80168be <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80168ac:	2170      	movs	r1, #112	; 0x70
 80168ae:	20f3      	movs	r0, #243	; 0xf3
 80168b0:	f000 f951 	bl	8016b56 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80168b4:	211d      	movs	r1, #29
 80168b6:	20f2      	movs	r0, #242	; 0xf2
 80168b8:	f000 f94d 	bl	8016b56 <RadioWrite>
 80168bc:	e007      	b.n	80168ce <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80168be:	21e1      	movs	r1, #225	; 0xe1
 80168c0:	20f3      	movs	r0, #243	; 0xf3
 80168c2:	f000 f948 	bl	8016b56 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80168c6:	2104      	movs	r1, #4
 80168c8:	20f2      	movs	r0, #242	; 0xf2
 80168ca:	f000 f944 	bl	8016b56 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80168ce:	78fb      	ldrb	r3, [r7, #3]
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	00db      	lsls	r3, r3, #3
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	3302      	adds	r3, #2
 80168d8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80168da:	89fb      	ldrh	r3, [r7, #14]
 80168dc:	0a1b      	lsrs	r3, r3, #8
 80168de:	b29b      	uxth	r3, r3
 80168e0:	b2db      	uxtb	r3, r3
 80168e2:	4619      	mov	r1, r3
 80168e4:	20f4      	movs	r0, #244	; 0xf4
 80168e6:	f000 f936 	bl	8016b56 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80168ea:	89fb      	ldrh	r3, [r7, #14]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	4619      	mov	r1, r3
 80168f0:	20f5      	movs	r0, #245	; 0xf5
 80168f2:	f000 f930 	bl	8016b56 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80168f6:	78fb      	ldrb	r3, [r7, #3]
 80168f8:	3301      	adds	r3, #1
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8016900:	4619      	mov	r1, r3
 8016902:	480b      	ldr	r0, [pc, #44]	; (8016930 <RadioSend+0x1f0>)
 8016904:	f001 f980 	bl	8017c08 <SUBGRF_SendPayload>
            break;
 8016908:	e000      	b.n	801690c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801690a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801690c:	4b05      	ldr	r3, [pc, #20]	; (8016924 <RadioSend+0x1e4>)
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	4619      	mov	r1, r3
 8016912:	4808      	ldr	r0, [pc, #32]	; (8016934 <RadioSend+0x1f4>)
 8016914:	f003 fa86 	bl	8019e24 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8016918:	4806      	ldr	r0, [pc, #24]	; (8016934 <RadioSend+0x1f4>)
 801691a:	f003 f9a5 	bl	8019c68 <UTIL_TIMER_Start>
}
 801691e:	3710      	adds	r7, #16
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}
 8016924:	20001be8 	.word	0x20001be8
 8016928:	20001bf6 	.word	0x20001bf6
 801692c:	0801b4c8 	.word	0x0801b4c8
 8016930:	20001ae4 	.word	0x20001ae4
 8016934:	20001c44 	.word	0x20001c44

08016938 <RadioSleep>:

static void RadioSleep( void )
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801693e:	2300      	movs	r3, #0
 8016940:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8016942:	793b      	ldrb	r3, [r7, #4]
 8016944:	f043 0304 	orr.w	r3, r3, #4
 8016948:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801694a:	7938      	ldrb	r0, [r7, #4]
 801694c:	f001 fa38 	bl	8017dc0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8016950:	2002      	movs	r0, #2
 8016952:	f7eb f957 	bl	8001c04 <HAL_Delay>
}
 8016956:	bf00      	nop
 8016958:	3708      	adds	r7, #8
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <RadioStandby>:

static void RadioStandby( void )
{
 801695e:	b580      	push	{r7, lr}
 8016960:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8016962:	2000      	movs	r0, #0
 8016964:	f001 fa5e 	bl	8017e24 <SUBGRF_SetStandby>
}
 8016968:	bf00      	nop
 801696a:	bd80      	pop	{r7, pc}

0801696c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8016974:	f002 fab3 	bl	8018ede <RFW_Is_Init>
 8016978:	4603      	mov	r3, r0
 801697a:	2b01      	cmp	r3, #1
 801697c:	d102      	bne.n	8016984 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801697e:	f002 fad6 	bl	8018f2e <RFW_ReceiveInit>
 8016982:	e007      	b.n	8016994 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8016984:	2300      	movs	r3, #0
 8016986:	2200      	movs	r2, #0
 8016988:	f240 2162 	movw	r1, #610	; 0x262
 801698c:	f240 2062 	movw	r0, #610	; 0x262
 8016990:	f001 fc18 	bl	80181c4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d006      	beq.n	80169a8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801699a:	6879      	ldr	r1, [r7, #4]
 801699c:	4811      	ldr	r0, [pc, #68]	; (80169e4 <RadioRx+0x78>)
 801699e:	f003 fa41 	bl	8019e24 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80169a2:	4810      	ldr	r0, [pc, #64]	; (80169e4 <RadioRx+0x78>)
 80169a4:	f003 f960 	bl	8019c68 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80169a8:	4b0f      	ldr	r3, [pc, #60]	; (80169e8 <RadioRx+0x7c>)
 80169aa:	2200      	movs	r2, #0
 80169ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80169ae:	4b0e      	ldr	r3, [pc, #56]	; (80169e8 <RadioRx+0x7c>)
 80169b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80169b4:	2100      	movs	r1, #0
 80169b6:	4618      	mov	r0, r3
 80169b8:	f002 f8a8 	bl	8018b0c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80169bc:	4b0a      	ldr	r3, [pc, #40]	; (80169e8 <RadioRx+0x7c>)
 80169be:	785b      	ldrb	r3, [r3, #1]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d004      	beq.n	80169ce <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80169c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80169c8:	f001 fa68 	bl	8017e9c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80169cc:	e005      	b.n	80169da <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80169ce:	4b06      	ldr	r3, [pc, #24]	; (80169e8 <RadioRx+0x7c>)
 80169d0:	689b      	ldr	r3, [r3, #8]
 80169d2:	019b      	lsls	r3, r3, #6
 80169d4:	4618      	mov	r0, r3
 80169d6:	f001 fa61 	bl	8017e9c <SUBGRF_SetRx>
}
 80169da:	bf00      	nop
 80169dc:	3708      	adds	r7, #8
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	20001c5c 	.word	0x20001c5c
 80169e8:	20001be8 	.word	0x20001be8

080169ec <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80169f4:	f002 fa73 	bl	8018ede <RFW_Is_Init>
 80169f8:	4603      	mov	r3, r0
 80169fa:	2b01      	cmp	r3, #1
 80169fc:	d102      	bne.n	8016a04 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80169fe:	f002 fa96 	bl	8018f2e <RFW_ReceiveInit>
 8016a02:	e007      	b.n	8016a14 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8016a04:	2300      	movs	r3, #0
 8016a06:	2200      	movs	r2, #0
 8016a08:	f240 2162 	movw	r1, #610	; 0x262
 8016a0c:	f240 2062 	movw	r0, #610	; 0x262
 8016a10:	f001 fbd8 	bl	80181c4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d006      	beq.n	8016a28 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8016a1a:	6879      	ldr	r1, [r7, #4]
 8016a1c:	4811      	ldr	r0, [pc, #68]	; (8016a64 <RadioRxBoosted+0x78>)
 8016a1e:	f003 fa01 	bl	8019e24 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8016a22:	4810      	ldr	r0, [pc, #64]	; (8016a64 <RadioRxBoosted+0x78>)
 8016a24:	f003 f920 	bl	8019c68 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016a28:	4b0f      	ldr	r3, [pc, #60]	; (8016a68 <RadioRxBoosted+0x7c>)
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8016a2e:	4b0e      	ldr	r3, [pc, #56]	; (8016a68 <RadioRxBoosted+0x7c>)
 8016a30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016a34:	2100      	movs	r1, #0
 8016a36:	4618      	mov	r0, r3
 8016a38:	f002 f868 	bl	8018b0c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8016a3c:	4b0a      	ldr	r3, [pc, #40]	; (8016a68 <RadioRxBoosted+0x7c>)
 8016a3e:	785b      	ldrb	r3, [r3, #1]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d004      	beq.n	8016a4e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8016a44:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016a48:	f001 fa48 	bl	8017edc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8016a4c:	e005      	b.n	8016a5a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8016a4e:	4b06      	ldr	r3, [pc, #24]	; (8016a68 <RadioRxBoosted+0x7c>)
 8016a50:	689b      	ldr	r3, [r3, #8]
 8016a52:	019b      	lsls	r3, r3, #6
 8016a54:	4618      	mov	r0, r3
 8016a56:	f001 fa41 	bl	8017edc <SUBGRF_SetRxBoosted>
}
 8016a5a:	bf00      	nop
 8016a5c:	3708      	adds	r7, #8
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}
 8016a62:	bf00      	nop
 8016a64:	20001c5c 	.word	0x20001c5c
 8016a68:	20001be8 	.word	0x20001be8

08016a6c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	005a      	lsls	r2, r3, #1
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	4413      	add	r3, r2
 8016a7e:	4a0c      	ldr	r2, [pc, #48]	; (8016ab0 <RadioSetRxDutyCycle+0x44>)
 8016a80:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016a82:	2300      	movs	r3, #0
 8016a84:	2200      	movs	r2, #0
 8016a86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016a8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016a8e:	f001 fb99 	bl	80181c4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8016a92:	4b07      	ldr	r3, [pc, #28]	; (8016ab0 <RadioSetRxDutyCycle+0x44>)
 8016a94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016a98:	2100      	movs	r1, #0
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f002 f836 	bl	8018b0c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f001 fa3e 	bl	8017f24 <SUBGRF_SetRxDutyCycle>
}
 8016aa8:	bf00      	nop
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	20001be8 	.word	0x20001be8

08016ab4 <RadioStartCad>:

static void RadioStartCad( void )
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8016ab8:	4b09      	ldr	r3, [pc, #36]	; (8016ae0 <RadioStartCad+0x2c>)
 8016aba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016abe:	2100      	movs	r1, #0
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f002 f823 	bl	8018b0c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	2200      	movs	r2, #0
 8016aca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8016ace:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8016ad2:	f001 fb77 	bl	80181c4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8016ad6:	f001 fa51 	bl	8017f7c <SUBGRF_SetCad>
}
 8016ada:	bf00      	nop
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	20001be8 	.word	0x20001be8

08016ae4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	460b      	mov	r3, r1
 8016aee:	70fb      	strb	r3, [r7, #3]
 8016af0:	4613      	mov	r3, r2
 8016af2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8016af4:	883b      	ldrh	r3, [r7, #0]
 8016af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016afa:	fb02 f303 	mul.w	r3, r2, r3
 8016afe:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f001 fbbb 	bl	801827c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8016b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f002 f826 	bl	8018b5c <SUBGRF_SetRfTxPower>
 8016b10:	4603      	mov	r3, r0
 8016b12:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8016b14:	7afb      	ldrb	r3, [r7, #11]
 8016b16:	2101      	movs	r1, #1
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f001 fff7 	bl	8018b0c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8016b1e:	f001 fa3b 	bl	8017f98 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8016b22:	68f9      	ldr	r1, [r7, #12]
 8016b24:	4804      	ldr	r0, [pc, #16]	; (8016b38 <RadioSetTxContinuousWave+0x54>)
 8016b26:	f003 f97d 	bl	8019e24 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8016b2a:	4803      	ldr	r0, [pc, #12]	; (8016b38 <RadioSetTxContinuousWave+0x54>)
 8016b2c:	f003 f89c 	bl	8019c68 <UTIL_TIMER_Start>
}
 8016b30:	bf00      	nop
 8016b32:	3710      	adds	r7, #16
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}
 8016b38:	20001c44 	.word	0x20001c44

08016b3c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	4603      	mov	r3, r0
 8016b44:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8016b46:	f001 fe5a 	bl	80187fe <SUBGRF_GetRssiInst>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	b21b      	sxth	r3, r3
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3708      	adds	r7, #8
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}

08016b56 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8016b56:	b580      	push	{r7, lr}
 8016b58:	b082      	sub	sp, #8
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	460a      	mov	r2, r1
 8016b60:	80fb      	strh	r3, [r7, #6]
 8016b62:	4613      	mov	r3, r2
 8016b64:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8016b66:	797a      	ldrb	r2, [r7, #5]
 8016b68:	88fb      	ldrh	r3, [r7, #6]
 8016b6a:	4611      	mov	r1, r2
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f001 fed9 	bl	8018924 <SUBGRF_WriteRegister>
}
 8016b72:	bf00      	nop
 8016b74:	3708      	adds	r7, #8
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}

08016b7a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8016b7a:	b580      	push	{r7, lr}
 8016b7c:	b082      	sub	sp, #8
 8016b7e:	af00      	add	r7, sp, #0
 8016b80:	4603      	mov	r3, r0
 8016b82:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8016b84:	88fb      	ldrh	r3, [r7, #6]
 8016b86:	4618      	mov	r0, r3
 8016b88:	f001 fee0 	bl	801894c <SUBGRF_ReadRegister>
 8016b8c:	4603      	mov	r3, r0
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b082      	sub	sp, #8
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	6039      	str	r1, [r7, #0]
 8016ba0:	80fb      	strh	r3, [r7, #6]
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8016ba6:	797b      	ldrb	r3, [r7, #5]
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	88fb      	ldrh	r3, [r7, #6]
 8016bac:	6839      	ldr	r1, [r7, #0]
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f001 fee0 	bl	8018974 <SUBGRF_WriteRegisters>
}
 8016bb4:	bf00      	nop
 8016bb6:	3708      	adds	r7, #8
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	6039      	str	r1, [r7, #0]
 8016bc6:	80fb      	strh	r3, [r7, #6]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8016bcc:	797b      	ldrb	r3, [r7, #5]
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	88fb      	ldrh	r3, [r7, #6]
 8016bd2:	6839      	ldr	r1, [r7, #0]
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f001 feef 	bl	80189b8 <SUBGRF_ReadRegisters>
}
 8016bda:	bf00      	nop
 8016bdc:	3708      	adds	r7, #8
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
	...

08016be4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	4603      	mov	r3, r0
 8016bec:	460a      	mov	r2, r1
 8016bee:	71fb      	strb	r3, [r7, #7]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	2b01      	cmp	r3, #1
 8016bf8:	d10a      	bne.n	8016c10 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8016bfa:	4a0e      	ldr	r2, [pc, #56]	; (8016c34 <RadioSetMaxPayloadLength+0x50>)
 8016bfc:	79bb      	ldrb	r3, [r7, #6]
 8016bfe:	7013      	strb	r3, [r2, #0]
 8016c00:	4b0c      	ldr	r3, [pc, #48]	; (8016c34 <RadioSetMaxPayloadLength+0x50>)
 8016c02:	781a      	ldrb	r2, [r3, #0]
 8016c04:	4b0c      	ldr	r3, [pc, #48]	; (8016c38 <RadioSetMaxPayloadLength+0x54>)
 8016c06:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c08:	480c      	ldr	r0, [pc, #48]	; (8016c3c <RadioSetMaxPayloadLength+0x58>)
 8016c0a:	f001 fd43 	bl	8018694 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8016c0e:	e00d      	b.n	8016c2c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8016c10:	4b09      	ldr	r3, [pc, #36]	; (8016c38 <RadioSetMaxPayloadLength+0x54>)
 8016c12:	7d5b      	ldrb	r3, [r3, #21]
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d109      	bne.n	8016c2c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8016c18:	4a06      	ldr	r2, [pc, #24]	; (8016c34 <RadioSetMaxPayloadLength+0x50>)
 8016c1a:	79bb      	ldrb	r3, [r7, #6]
 8016c1c:	7013      	strb	r3, [r2, #0]
 8016c1e:	4b05      	ldr	r3, [pc, #20]	; (8016c34 <RadioSetMaxPayloadLength+0x50>)
 8016c20:	781a      	ldrb	r2, [r3, #0]
 8016c22:	4b05      	ldr	r3, [pc, #20]	; (8016c38 <RadioSetMaxPayloadLength+0x54>)
 8016c24:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c26:	4805      	ldr	r0, [pc, #20]	; (8016c3c <RadioSetMaxPayloadLength+0x58>)
 8016c28:	f001 fd34 	bl	8018694 <SUBGRF_SetPacketParams>
}
 8016c2c:	bf00      	nop
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	20000138 	.word	0x20000138
 8016c38:	20001be8 	.word	0x20001be8
 8016c3c:	20001bf6 	.word	0x20001bf6

08016c40 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	4603      	mov	r3, r0
 8016c48:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8016c4a:	4a13      	ldr	r2, [pc, #76]	; (8016c98 <RadioSetPublicNetwork+0x58>)
 8016c4c:	79fb      	ldrb	r3, [r7, #7]
 8016c4e:	7313      	strb	r3, [r2, #12]
 8016c50:	4b11      	ldr	r3, [pc, #68]	; (8016c98 <RadioSetPublicNetwork+0x58>)
 8016c52:	7b1a      	ldrb	r2, [r3, #12]
 8016c54:	4b10      	ldr	r3, [pc, #64]	; (8016c98 <RadioSetPublicNetwork+0x58>)
 8016c56:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8016c58:	2001      	movs	r0, #1
 8016c5a:	f7ff f82d 	bl	8015cb8 <RadioSetModem>
    if( enable == true )
 8016c5e:	79fb      	ldrb	r3, [r7, #7]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d00a      	beq.n	8016c7a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8016c64:	2134      	movs	r1, #52	; 0x34
 8016c66:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8016c6a:	f001 fe5b 	bl	8018924 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8016c6e:	2144      	movs	r1, #68	; 0x44
 8016c70:	f240 7041 	movw	r0, #1857	; 0x741
 8016c74:	f001 fe56 	bl	8018924 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8016c78:	e009      	b.n	8016c8e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8016c7a:	2114      	movs	r1, #20
 8016c7c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8016c80:	f001 fe50 	bl	8018924 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8016c84:	2124      	movs	r1, #36	; 0x24
 8016c86:	f240 7041 	movw	r0, #1857	; 0x741
 8016c8a:	f001 fe4b 	bl	8018924 <SUBGRF_WriteRegister>
}
 8016c8e:	bf00      	nop
 8016c90:	3708      	adds	r7, #8
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}
 8016c96:	bf00      	nop
 8016c98:	20001be8 	.word	0x20001be8

08016c9c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8016ca0:	f001 ff90 	bl	8018bc4 <SUBGRF_GetRadioWakeUpTime>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	3303      	adds	r3, #3
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	bd80      	pop	{r7, pc}

08016cac <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8016cb4:	f000 f80e 	bl	8016cd4 <RadioOnTxTimeoutProcess>
}
 8016cb8:	bf00      	nop
 8016cba:	3708      	adds	r7, #8
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}

08016cc0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8016cc8:	f000 f818 	bl	8016cfc <RadioOnRxTimeoutProcess>
}
 8016ccc:	bf00      	nop
 8016cce:	3708      	adds	r7, #8
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016cd8:	4b07      	ldr	r3, [pc, #28]	; (8016cf8 <RadioOnTxTimeoutProcess+0x24>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d008      	beq.n	8016cf2 <RadioOnTxTimeoutProcess+0x1e>
 8016ce0:	4b05      	ldr	r3, [pc, #20]	; (8016cf8 <RadioOnTxTimeoutProcess+0x24>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d003      	beq.n	8016cf2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8016cea:	4b03      	ldr	r3, [pc, #12]	; (8016cf8 <RadioOnTxTimeoutProcess+0x24>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	4798      	blx	r3
    }
}
 8016cf2:	bf00      	nop
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	20001be4 	.word	0x20001be4

08016cfc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016d00:	4b07      	ldr	r3, [pc, #28]	; (8016d20 <RadioOnRxTimeoutProcess+0x24>)
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d008      	beq.n	8016d1a <RadioOnRxTimeoutProcess+0x1e>
 8016d08:	4b05      	ldr	r3, [pc, #20]	; (8016d20 <RadioOnRxTimeoutProcess+0x24>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8016d12:	4b03      	ldr	r3, [pc, #12]	; (8016d20 <RadioOnRxTimeoutProcess+0x24>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	68db      	ldr	r3, [r3, #12]
 8016d18:	4798      	blx	r3
    }
}
 8016d1a:	bf00      	nop
 8016d1c:	bd80      	pop	{r7, pc}
 8016d1e:	bf00      	nop
 8016d20:	20001be4 	.word	0x20001be4

08016d24 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b082      	sub	sp, #8
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8016d2e:	4a05      	ldr	r2, [pc, #20]	; (8016d44 <RadioOnDioIrq+0x20>)
 8016d30:	88fb      	ldrh	r3, [r7, #6]
 8016d32:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8016d36:	f000 f807 	bl	8016d48 <RadioIrqProcess>
}
 8016d3a:	bf00      	nop
 8016d3c:	3708      	adds	r7, #8
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	20001be8 	.word	0x20001be8

08016d48 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8016d48:	b590      	push	{r4, r7, lr}
 8016d4a:	b083      	sub	sp, #12
 8016d4c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8016d52:	2300      	movs	r3, #0
 8016d54:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8016d56:	4ba8      	ldr	r3, [pc, #672]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016d58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d60:	f000 810c 	beq.w	8016f7c <RadioIrqProcess+0x234>
 8016d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d68:	f300 81e8 	bgt.w	801713c <RadioIrqProcess+0x3f4>
 8016d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d70:	f000 80f0 	beq.w	8016f54 <RadioIrqProcess+0x20c>
 8016d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d78:	f300 81e0 	bgt.w	801713c <RadioIrqProcess+0x3f4>
 8016d7c:	2b80      	cmp	r3, #128	; 0x80
 8016d7e:	f000 80d5 	beq.w	8016f2c <RadioIrqProcess+0x1e4>
 8016d82:	2b80      	cmp	r3, #128	; 0x80
 8016d84:	f300 81da 	bgt.w	801713c <RadioIrqProcess+0x3f4>
 8016d88:	2b20      	cmp	r3, #32
 8016d8a:	dc49      	bgt.n	8016e20 <RadioIrqProcess+0xd8>
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	f340 81d5 	ble.w	801713c <RadioIrqProcess+0x3f4>
 8016d92:	3b01      	subs	r3, #1
 8016d94:	2b1f      	cmp	r3, #31
 8016d96:	f200 81d1 	bhi.w	801713c <RadioIrqProcess+0x3f4>
 8016d9a:	a201      	add	r2, pc, #4	; (adr r2, 8016da0 <RadioIrqProcess+0x58>)
 8016d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016da0:	08016e29 	.word	0x08016e29
 8016da4:	08016e63 	.word	0x08016e63
 8016da8:	0801713d 	.word	0x0801713d
 8016dac:	08017019 	.word	0x08017019
 8016db0:	0801713d 	.word	0x0801713d
 8016db4:	0801713d 	.word	0x0801713d
 8016db8:	0801713d 	.word	0x0801713d
 8016dbc:	08017095 	.word	0x08017095
 8016dc0:	0801713d 	.word	0x0801713d
 8016dc4:	0801713d 	.word	0x0801713d
 8016dc8:	0801713d 	.word	0x0801713d
 8016dcc:	0801713d 	.word	0x0801713d
 8016dd0:	0801713d 	.word	0x0801713d
 8016dd4:	0801713d 	.word	0x0801713d
 8016dd8:	0801713d 	.word	0x0801713d
 8016ddc:	080170b1 	.word	0x080170b1
 8016de0:	0801713d 	.word	0x0801713d
 8016de4:	0801713d 	.word	0x0801713d
 8016de8:	0801713d 	.word	0x0801713d
 8016dec:	0801713d 	.word	0x0801713d
 8016df0:	0801713d 	.word	0x0801713d
 8016df4:	0801713d 	.word	0x0801713d
 8016df8:	0801713d 	.word	0x0801713d
 8016dfc:	0801713d 	.word	0x0801713d
 8016e00:	0801713d 	.word	0x0801713d
 8016e04:	0801713d 	.word	0x0801713d
 8016e08:	0801713d 	.word	0x0801713d
 8016e0c:	0801713d 	.word	0x0801713d
 8016e10:	0801713d 	.word	0x0801713d
 8016e14:	0801713d 	.word	0x0801713d
 8016e18:	0801713d 	.word	0x0801713d
 8016e1c:	080170bf 	.word	0x080170bf
 8016e20:	2b40      	cmp	r3, #64	; 0x40
 8016e22:	f000 816d 	beq.w	8017100 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8016e26:	e189      	b.n	801713c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8016e28:	4874      	ldr	r0, [pc, #464]	; (8016ffc <RadioIrqProcess+0x2b4>)
 8016e2a:	f002 ff8b 	bl	8019d44 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8016e2e:	2000      	movs	r0, #0
 8016e30:	f000 fff8 	bl	8017e24 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8016e34:	f002 f85a 	bl	8018eec <RFW_Is_LongPacketModeEnabled>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	2b01      	cmp	r3, #1
 8016e3c:	d101      	bne.n	8016e42 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8016e3e:	f002 f87e 	bl	8018f3e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8016e42:	4b6f      	ldr	r3, [pc, #444]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	f000 817a 	beq.w	8017140 <RadioIrqProcess+0x3f8>
 8016e4c:	4b6c      	ldr	r3, [pc, #432]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f000 8174 	beq.w	8017140 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8016e58:	4b69      	ldr	r3, [pc, #420]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	4798      	blx	r3
        break;
 8016e60:	e16e      	b.n	8017140 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8016e62:	4868      	ldr	r0, [pc, #416]	; (8017004 <RadioIrqProcess+0x2bc>)
 8016e64:	f002 ff6e 	bl	8019d44 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8016e68:	4b63      	ldr	r3, [pc, #396]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016e6a:	785b      	ldrb	r3, [r3, #1]
 8016e6c:	f083 0301 	eor.w	r3, r3, #1
 8016e70:	b2db      	uxtb	r3, r3
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d014      	beq.n	8016ea0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8016e76:	2000      	movs	r0, #0
 8016e78:	f000 ffd4 	bl	8017e24 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8016e7c:	2100      	movs	r1, #0
 8016e7e:	f640 1002 	movw	r0, #2306	; 0x902
 8016e82:	f001 fd4f 	bl	8018924 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8016e86:	f640 1044 	movw	r0, #2372	; 0x944
 8016e8a:	f001 fd5f 	bl	801894c <SUBGRF_ReadRegister>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	f043 0302 	orr.w	r3, r3, #2
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	4619      	mov	r1, r3
 8016e98:	f640 1044 	movw	r0, #2372	; 0x944
 8016e9c:	f001 fd42 	bl	8018924 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8016ea0:	1dfb      	adds	r3, r7, #7
 8016ea2:	22ff      	movs	r2, #255	; 0xff
 8016ea4:	4619      	mov	r1, r3
 8016ea6:	4858      	ldr	r0, [pc, #352]	; (8017008 <RadioIrqProcess+0x2c0>)
 8016ea8:	f000 fe8c 	bl	8017bc4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8016eac:	4857      	ldr	r0, [pc, #348]	; (801700c <RadioIrqProcess+0x2c4>)
 8016eae:	f001 fce7 	bl	8018880 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8016eb2:	4b53      	ldr	r3, [pc, #332]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d036      	beq.n	8016f28 <RadioIrqProcess+0x1e0>
 8016eba:	4b51      	ldr	r3, [pc, #324]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	689b      	ldr	r3, [r3, #8]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d031      	beq.n	8016f28 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8016ec4:	4b4c      	ldr	r3, [pc, #304]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016eca:	2b01      	cmp	r3, #1
 8016ecc:	d10e      	bne.n	8016eec <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8016ece:	4b4c      	ldr	r3, [pc, #304]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	689c      	ldr	r4, [r3, #8]
 8016ed4:	79fb      	ldrb	r3, [r7, #7]
 8016ed6:	b299      	uxth	r1, r3
 8016ed8:	4b47      	ldr	r3, [pc, #284]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016eda:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8016ede:	b21a      	sxth	r2, r3
 8016ee0:	4b45      	ldr	r3, [pc, #276]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016ee2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8016ee6:	4848      	ldr	r0, [pc, #288]	; (8017008 <RadioIrqProcess+0x2c0>)
 8016ee8:	47a0      	blx	r4
                break;
 8016eea:	e01e      	b.n	8016f2a <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8016eec:	4b42      	ldr	r3, [pc, #264]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ef0:	463a      	mov	r2, r7
 8016ef2:	4611      	mov	r1, r2
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f001 ff47 	bl	8018d88 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8016efa:	4b41      	ldr	r3, [pc, #260]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	689c      	ldr	r4, [r3, #8]
 8016f00:	79fb      	ldrb	r3, [r7, #7]
 8016f02:	b299      	uxth	r1, r3
 8016f04:	4b3c      	ldr	r3, [pc, #240]	; (8016ff8 <RadioIrqProcess+0x2b0>)
 8016f06:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8016f0a:	b218      	sxth	r0, r3
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016f12:	4a3f      	ldr	r2, [pc, #252]	; (8017010 <RadioIrqProcess+0x2c8>)
 8016f14:	fb82 c203 	smull	ip, r2, r2, r3
 8016f18:	1192      	asrs	r2, r2, #6
 8016f1a:	17db      	asrs	r3, r3, #31
 8016f1c:	1ad3      	subs	r3, r2, r3
 8016f1e:	b25b      	sxtb	r3, r3
 8016f20:	4602      	mov	r2, r0
 8016f22:	4839      	ldr	r0, [pc, #228]	; (8017008 <RadioIrqProcess+0x2c0>)
 8016f24:	47a0      	blx	r4
                break;
 8016f26:	e000      	b.n	8016f2a <RadioIrqProcess+0x1e2>
        }
 8016f28:	bf00      	nop
        break;
 8016f2a:	e118      	b.n	801715e <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	f000 ff79 	bl	8017e24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016f32:	4b33      	ldr	r3, [pc, #204]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f000 8104 	beq.w	8017144 <RadioIrqProcess+0x3fc>
 8016f3c:	4b30      	ldr	r3, [pc, #192]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	699b      	ldr	r3, [r3, #24]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	f000 80fe 	beq.w	8017144 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8016f48:	4b2d      	ldr	r3, [pc, #180]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	699b      	ldr	r3, [r3, #24]
 8016f4e:	2000      	movs	r0, #0
 8016f50:	4798      	blx	r3
        break;
 8016f52:	e0f7      	b.n	8017144 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8016f54:	2000      	movs	r0, #0
 8016f56:	f000 ff65 	bl	8017e24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016f5a:	4b29      	ldr	r3, [pc, #164]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	f000 80f2 	beq.w	8017148 <RadioIrqProcess+0x400>
 8016f64:	4b26      	ldr	r3, [pc, #152]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	699b      	ldr	r3, [r3, #24]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	f000 80ec 	beq.w	8017148 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8016f70:	4b23      	ldr	r3, [pc, #140]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	699b      	ldr	r3, [r3, #24]
 8016f76:	2001      	movs	r0, #1
 8016f78:	4798      	blx	r3
        break;
 8016f7a:	e0e5      	b.n	8017148 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8016f7c:	4b25      	ldr	r3, [pc, #148]	; (8017014 <RadioIrqProcess+0x2cc>)
 8016f7e:	2201      	movs	r2, #1
 8016f80:	2100      	movs	r1, #0
 8016f82:	2002      	movs	r0, #2
 8016f84:	f003 f8e8 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8016f88:	f000 fe02 	bl	8017b90 <SUBGRF_GetOperatingMode>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	2b04      	cmp	r3, #4
 8016f90:	d115      	bne.n	8016fbe <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8016f92:	481a      	ldr	r0, [pc, #104]	; (8016ffc <RadioIrqProcess+0x2b4>)
 8016f94:	f002 fed6 	bl	8019d44 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8016f98:	2000      	movs	r0, #0
 8016f9a:	f000 ff43 	bl	8017e24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016f9e:	4b18      	ldr	r3, [pc, #96]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	f000 80d2 	beq.w	801714c <RadioIrqProcess+0x404>
 8016fa8:	4b15      	ldr	r3, [pc, #84]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	f000 80cc 	beq.w	801714c <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8016fb4:	4b12      	ldr	r3, [pc, #72]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	4798      	blx	r3
        break;
 8016fbc:	e0c6      	b.n	801714c <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8016fbe:	f000 fde7 	bl	8017b90 <SUBGRF_GetOperatingMode>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b05      	cmp	r3, #5
 8016fc6:	f040 80c1 	bne.w	801714c <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8016fca:	480e      	ldr	r0, [pc, #56]	; (8017004 <RadioIrqProcess+0x2bc>)
 8016fcc:	f002 feba 	bl	8019d44 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	f000 ff27 	bl	8017e24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016fd6:	4b0a      	ldr	r3, [pc, #40]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	f000 80b6 	beq.w	801714c <RadioIrqProcess+0x404>
 8016fe0:	4b07      	ldr	r3, [pc, #28]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	f000 80b0 	beq.w	801714c <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8016fec:	4b04      	ldr	r3, [pc, #16]	; (8017000 <RadioIrqProcess+0x2b8>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	68db      	ldr	r3, [r3, #12]
 8016ff2:	4798      	blx	r3
        break;
 8016ff4:	e0aa      	b.n	801714c <RadioIrqProcess+0x404>
 8016ff6:	bf00      	nop
 8016ff8:	20001be8 	.word	0x20001be8
 8016ffc:	20001c44 	.word	0x20001c44
 8017000:	20001be4 	.word	0x20001be4
 8017004:	20001c5c 	.word	0x20001c5c
 8017008:	20001ae4 	.word	0x20001ae4
 801700c:	20001c0c 	.word	0x20001c0c
 8017010:	10624dd3 	.word	0x10624dd3
 8017014:	0801b4e0 	.word	0x0801b4e0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017018:	4b53      	ldr	r3, [pc, #332]	; (8017168 <RadioIrqProcess+0x420>)
 801701a:	2201      	movs	r2, #1
 801701c:	2100      	movs	r1, #0
 801701e:	2002      	movs	r0, #2
 8017020:	f003 f89a 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017024:	4b51      	ldr	r3, [pc, #324]	; (801716c <RadioIrqProcess+0x424>)
 8017026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017028:	2b00      	cmp	r3, #0
 801702a:	f000 8091 	beq.w	8017150 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801702e:	4a50      	ldr	r2, [pc, #320]	; (8017170 <RadioIrqProcess+0x428>)
 8017030:	4b4e      	ldr	r3, [pc, #312]	; (801716c <RadioIrqProcess+0x424>)
 8017032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017034:	0c1b      	lsrs	r3, r3, #16
 8017036:	b2db      	uxtb	r3, r3
 8017038:	4619      	mov	r1, r3
 801703a:	f640 1003 	movw	r0, #2307	; 0x903
 801703e:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8017040:	4a4b      	ldr	r2, [pc, #300]	; (8017170 <RadioIrqProcess+0x428>)
 8017042:	4b4a      	ldr	r3, [pc, #296]	; (801716c <RadioIrqProcess+0x424>)
 8017044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017046:	0a1b      	lsrs	r3, r3, #8
 8017048:	b2db      	uxtb	r3, r3
 801704a:	4619      	mov	r1, r3
 801704c:	f640 1004 	movw	r0, #2308	; 0x904
 8017050:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8017052:	4a47      	ldr	r2, [pc, #284]	; (8017170 <RadioIrqProcess+0x428>)
 8017054:	4b45      	ldr	r3, [pc, #276]	; (801716c <RadioIrqProcess+0x424>)
 8017056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017058:	b2db      	uxtb	r3, r3
 801705a:	4619      	mov	r1, r3
 801705c:	f640 1005 	movw	r0, #2309	; 0x905
 8017060:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8017062:	4c43      	ldr	r4, [pc, #268]	; (8017170 <RadioIrqProcess+0x428>)
 8017064:	4b43      	ldr	r3, [pc, #268]	; (8017174 <RadioIrqProcess+0x42c>)
 8017066:	f640 1002 	movw	r0, #2306	; 0x902
 801706a:	4798      	blx	r3
 801706c:	4603      	mov	r3, r0
 801706e:	f043 0301 	orr.w	r3, r3, #1
 8017072:	b2db      	uxtb	r3, r3
 8017074:	4619      	mov	r1, r3
 8017076:	f640 1002 	movw	r0, #2306	; 0x902
 801707a:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801707c:	4b3b      	ldr	r3, [pc, #236]	; (801716c <RadioIrqProcess+0x424>)
 801707e:	2200      	movs	r2, #0
 8017080:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017082:	2300      	movs	r3, #0
 8017084:	2200      	movs	r2, #0
 8017086:	f240 2162 	movw	r1, #610	; 0x262
 801708a:	f240 2062 	movw	r0, #610	; 0x262
 801708e:	f001 f899 	bl	80181c4 <SUBGRF_SetDioIrqParams>
        break;
 8017092:	e05d      	b.n	8017150 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017094:	4b38      	ldr	r3, [pc, #224]	; (8017178 <RadioIrqProcess+0x430>)
 8017096:	2201      	movs	r2, #1
 8017098:	2100      	movs	r1, #0
 801709a:	2002      	movs	r0, #2
 801709c:	f003 f85c 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80170a0:	f001 ff1d 	bl	8018ede <RFW_Is_Init>
 80170a4:	4603      	mov	r3, r0
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d154      	bne.n	8017154 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80170aa:	f001 ff4e 	bl	8018f4a <RFW_ReceivePayload>
        break;
 80170ae:	e051      	b.n	8017154 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80170b0:	4b32      	ldr	r3, [pc, #200]	; (801717c <RadioIrqProcess+0x434>)
 80170b2:	2201      	movs	r2, #1
 80170b4:	2100      	movs	r1, #0
 80170b6:	2002      	movs	r0, #2
 80170b8:	f003 f84e 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80170bc:	e04f      	b.n	801715e <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 80170be:	4830      	ldr	r0, [pc, #192]	; (8017180 <RadioIrqProcess+0x438>)
 80170c0:	f002 fe40 	bl	8019d44 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80170c4:	4b29      	ldr	r3, [pc, #164]	; (801716c <RadioIrqProcess+0x424>)
 80170c6:	785b      	ldrb	r3, [r3, #1]
 80170c8:	f083 0301 	eor.w	r3, r3, #1
 80170cc:	b2db      	uxtb	r3, r3
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d002      	beq.n	80170d8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80170d2:	2000      	movs	r0, #0
 80170d4:	f000 fea6 	bl	8017e24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80170d8:	4b2a      	ldr	r3, [pc, #168]	; (8017184 <RadioIrqProcess+0x43c>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d03b      	beq.n	8017158 <RadioIrqProcess+0x410>
 80170e0:	4b28      	ldr	r3, [pc, #160]	; (8017184 <RadioIrqProcess+0x43c>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	68db      	ldr	r3, [r3, #12]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d036      	beq.n	8017158 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 80170ea:	4b26      	ldr	r3, [pc, #152]	; (8017184 <RadioIrqProcess+0x43c>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	68db      	ldr	r3, [r3, #12]
 80170f0:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80170f2:	4b25      	ldr	r3, [pc, #148]	; (8017188 <RadioIrqProcess+0x440>)
 80170f4:	2201      	movs	r2, #1
 80170f6:	2100      	movs	r1, #0
 80170f8:	2002      	movs	r0, #2
 80170fa:	f003 f82d 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80170fe:	e02b      	b.n	8017158 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017100:	4b22      	ldr	r3, [pc, #136]	; (801718c <RadioIrqProcess+0x444>)
 8017102:	2201      	movs	r2, #1
 8017104:	2100      	movs	r1, #0
 8017106:	2002      	movs	r0, #2
 8017108:	f003 f826 	bl	801a158 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801710c:	4b17      	ldr	r3, [pc, #92]	; (801716c <RadioIrqProcess+0x424>)
 801710e:	785b      	ldrb	r3, [r3, #1]
 8017110:	f083 0301 	eor.w	r3, r3, #1
 8017114:	b2db      	uxtb	r3, r3
 8017116:	2b00      	cmp	r3, #0
 8017118:	d002      	beq.n	8017120 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801711a:	2000      	movs	r0, #0
 801711c:	f000 fe82 	bl	8017e24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017120:	4b18      	ldr	r3, [pc, #96]	; (8017184 <RadioIrqProcess+0x43c>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d019      	beq.n	801715c <RadioIrqProcess+0x414>
 8017128:	4b16      	ldr	r3, [pc, #88]	; (8017184 <RadioIrqProcess+0x43c>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	691b      	ldr	r3, [r3, #16]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d014      	beq.n	801715c <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8017132:	4b14      	ldr	r3, [pc, #80]	; (8017184 <RadioIrqProcess+0x43c>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	691b      	ldr	r3, [r3, #16]
 8017138:	4798      	blx	r3
        break;
 801713a:	e00f      	b.n	801715c <RadioIrqProcess+0x414>
        break;
 801713c:	bf00      	nop
 801713e:	e00e      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 8017140:	bf00      	nop
 8017142:	e00c      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 8017144:	bf00      	nop
 8017146:	e00a      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 8017148:	bf00      	nop
 801714a:	e008      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 801714c:	bf00      	nop
 801714e:	e006      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 8017150:	bf00      	nop
 8017152:	e004      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 8017154:	bf00      	nop
 8017156:	e002      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 8017158:	bf00      	nop
 801715a:	e000      	b.n	801715e <RadioIrqProcess+0x416>
        break;
 801715c:	bf00      	nop
    }
}
 801715e:	bf00      	nop
 8017160:	370c      	adds	r7, #12
 8017162:	46bd      	mov	sp, r7
 8017164:	bd90      	pop	{r4, r7, pc}
 8017166:	bf00      	nop
 8017168:	0801b4f4 	.word	0x0801b4f4
 801716c:	20001be8 	.word	0x20001be8
 8017170:	08016b57 	.word	0x08016b57
 8017174:	08016b7b 	.word	0x08016b7b
 8017178:	0801b500 	.word	0x0801b500
 801717c:	0801b50c 	.word	0x0801b50c
 8017180:	20001c5c 	.word	0x20001c5c
 8017184:	20001be4 	.word	0x20001be4
 8017188:	0801b518 	.word	0x0801b518
 801718c:	0801b524 	.word	0x0801b524

08017190 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017194:	4b09      	ldr	r3, [pc, #36]	; (80171bc <RadioTxPrbs+0x2c>)
 8017196:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801719a:	2101      	movs	r1, #1
 801719c:	4618      	mov	r0, r3
 801719e:	f001 fcb5 	bl	8018b0c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80171a2:	4b07      	ldr	r3, [pc, #28]	; (80171c0 <RadioTxPrbs+0x30>)
 80171a4:	212d      	movs	r1, #45	; 0x2d
 80171a6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80171aa:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80171ac:	f000 fefd 	bl	8017faa <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80171b0:	4804      	ldr	r0, [pc, #16]	; (80171c4 <RadioTxPrbs+0x34>)
 80171b2:	f000 fe53 	bl	8017e5c <SUBGRF_SetTx>
}
 80171b6:	bf00      	nop
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	20001be8 	.word	0x20001be8
 80171c0:	08016b57 	.word	0x08016b57
 80171c4:	000fffff 	.word	0x000fffff

080171c8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b084      	sub	sp, #16
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	4603      	mov	r3, r0
 80171d0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80171d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f001 fcc0 	bl	8018b5c <SUBGRF_SetRfTxPower>
 80171dc:	4603      	mov	r3, r0
 80171de:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80171e0:	7bfb      	ldrb	r3, [r7, #15]
 80171e2:	2101      	movs	r1, #1
 80171e4:	4618      	mov	r0, r3
 80171e6:	f001 fc91 	bl	8018b0c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80171ea:	f000 fed5 	bl	8017f98 <SUBGRF_SetTxContinuousWave>
}
 80171ee:	bf00      	nop
 80171f0:	3710      	adds	r7, #16
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}

080171f6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80171f6:	b480      	push	{r7}
 80171f8:	b089      	sub	sp, #36	; 0x24
 80171fa:	af00      	add	r7, sp, #0
 80171fc:	60f8      	str	r0, [r7, #12]
 80171fe:	60b9      	str	r1, [r7, #8]
 8017200:	4613      	mov	r3, r2
 8017202:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017204:	2300      	movs	r3, #0
 8017206:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8017208:	2300      	movs	r3, #0
 801720a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801720c:	2300      	movs	r3, #0
 801720e:	61bb      	str	r3, [r7, #24]
 8017210:	e011      	b.n	8017236 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	68ba      	ldr	r2, [r7, #8]
 8017216:	4413      	add	r3, r2
 8017218:	781a      	ldrb	r2, [r3, #0]
 801721a:	69bb      	ldr	r3, [r7, #24]
 801721c:	68b9      	ldr	r1, [r7, #8]
 801721e:	440b      	add	r3, r1
 8017220:	43d2      	mvns	r2, r2
 8017222:	b2d2      	uxtb	r2, r2
 8017224:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017226:	69bb      	ldr	r3, [r7, #24]
 8017228:	68fa      	ldr	r2, [r7, #12]
 801722a:	4413      	add	r3, r2
 801722c:	2200      	movs	r2, #0
 801722e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017230:	69bb      	ldr	r3, [r7, #24]
 8017232:	3301      	adds	r3, #1
 8017234:	61bb      	str	r3, [r7, #24]
 8017236:	79fb      	ldrb	r3, [r7, #7]
 8017238:	69ba      	ldr	r2, [r7, #24]
 801723a:	429a      	cmp	r2, r3
 801723c:	dbe9      	blt.n	8017212 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801723e:	2300      	movs	r3, #0
 8017240:	61bb      	str	r3, [r7, #24]
 8017242:	e049      	b.n	80172d8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	425a      	negs	r2, r3
 8017248:	f003 0307 	and.w	r3, r3, #7
 801724c:	f002 0207 	and.w	r2, r2, #7
 8017250:	bf58      	it	pl
 8017252:	4253      	negpl	r3, r2
 8017254:	b2db      	uxtb	r3, r3
 8017256:	f1c3 0307 	rsb	r3, r3, #7
 801725a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801725c:	69bb      	ldr	r3, [r7, #24]
 801725e:	2b00      	cmp	r3, #0
 8017260:	da00      	bge.n	8017264 <payload_integration+0x6e>
 8017262:	3307      	adds	r3, #7
 8017264:	10db      	asrs	r3, r3, #3
 8017266:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017268:	69bb      	ldr	r3, [r7, #24]
 801726a:	3301      	adds	r3, #1
 801726c:	425a      	negs	r2, r3
 801726e:	f003 0307 	and.w	r3, r3, #7
 8017272:	f002 0207 	and.w	r2, r2, #7
 8017276:	bf58      	it	pl
 8017278:	4253      	negpl	r3, r2
 801727a:	b2db      	uxtb	r3, r3
 801727c:	f1c3 0307 	rsb	r3, r3, #7
 8017280:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017282:	69bb      	ldr	r3, [r7, #24]
 8017284:	3301      	adds	r3, #1
 8017286:	2b00      	cmp	r3, #0
 8017288:	da00      	bge.n	801728c <payload_integration+0x96>
 801728a:	3307      	adds	r3, #7
 801728c:	10db      	asrs	r3, r3, #3
 801728e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017290:	7dbb      	ldrb	r3, [r7, #22]
 8017292:	68ba      	ldr	r2, [r7, #8]
 8017294:	4413      	add	r3, r2
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	461a      	mov	r2, r3
 801729a:	7dfb      	ldrb	r3, [r7, #23]
 801729c:	fa42 f303 	asr.w	r3, r2, r3
 80172a0:	b2db      	uxtb	r3, r3
 80172a2:	f003 0301 	and.w	r3, r3, #1
 80172a6:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80172a8:	7ffa      	ldrb	r2, [r7, #31]
 80172aa:	7cfb      	ldrb	r3, [r7, #19]
 80172ac:	4053      	eors	r3, r2
 80172ae:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80172b0:	7d3b      	ldrb	r3, [r7, #20]
 80172b2:	68fa      	ldr	r2, [r7, #12]
 80172b4:	4413      	add	r3, r2
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	b25a      	sxtb	r2, r3
 80172ba:	7ff9      	ldrb	r1, [r7, #31]
 80172bc:	7d7b      	ldrb	r3, [r7, #21]
 80172be:	fa01 f303 	lsl.w	r3, r1, r3
 80172c2:	b25b      	sxtb	r3, r3
 80172c4:	4313      	orrs	r3, r2
 80172c6:	b259      	sxtb	r1, r3
 80172c8:	7d3b      	ldrb	r3, [r7, #20]
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	4413      	add	r3, r2
 80172ce:	b2ca      	uxtb	r2, r1
 80172d0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80172d2:	69bb      	ldr	r3, [r7, #24]
 80172d4:	3301      	adds	r3, #1
 80172d6:	61bb      	str	r3, [r7, #24]
 80172d8:	79fb      	ldrb	r3, [r7, #7]
 80172da:	00db      	lsls	r3, r3, #3
 80172dc:	69ba      	ldr	r2, [r7, #24]
 80172de:	429a      	cmp	r2, r3
 80172e0:	dbb0      	blt.n	8017244 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80172e2:	7ffb      	ldrb	r3, [r7, #31]
 80172e4:	01db      	lsls	r3, r3, #7
 80172e6:	b25a      	sxtb	r2, r3
 80172e8:	7ffb      	ldrb	r3, [r7, #31]
 80172ea:	019b      	lsls	r3, r3, #6
 80172ec:	b25b      	sxtb	r3, r3
 80172ee:	4313      	orrs	r3, r2
 80172f0:	b25b      	sxtb	r3, r3
 80172f2:	7ffa      	ldrb	r2, [r7, #31]
 80172f4:	2a00      	cmp	r2, #0
 80172f6:	d101      	bne.n	80172fc <payload_integration+0x106>
 80172f8:	2220      	movs	r2, #32
 80172fa:	e000      	b.n	80172fe <payload_integration+0x108>
 80172fc:	2200      	movs	r2, #0
 80172fe:	4313      	orrs	r3, r2
 8017300:	b259      	sxtb	r1, r3
 8017302:	79fb      	ldrb	r3, [r7, #7]
 8017304:	68fa      	ldr	r2, [r7, #12]
 8017306:	4413      	add	r3, r2
 8017308:	b2ca      	uxtb	r2, r1
 801730a:	701a      	strb	r2, [r3, #0]
}
 801730c:	bf00      	nop
 801730e:	3724      	adds	r7, #36	; 0x24
 8017310:	46bd      	mov	sp, r7
 8017312:	bc80      	pop	{r7}
 8017314:	4770      	bx	lr
	...

08017318 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b08c      	sub	sp, #48	; 0x30
 801731c:	af00      	add	r7, sp, #0
 801731e:	60b9      	str	r1, [r7, #8]
 8017320:	607a      	str	r2, [r7, #4]
 8017322:	603b      	str	r3, [r7, #0]
 8017324:	4603      	mov	r3, r0
 8017326:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8017328:	2300      	movs	r3, #0
 801732a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801732c:	2300      	movs	r3, #0
 801732e:	623b      	str	r3, [r7, #32]
 8017330:	2300      	movs	r3, #0
 8017332:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017334:	f001 fdcd 	bl	8018ed2 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d001      	beq.n	8017342 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801733e:	2300      	movs	r3, #0
 8017340:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2b00      	cmp	r3, #0
 8017346:	bf14      	ite	ne
 8017348:	2301      	movne	r3, #1
 801734a:	2300      	moveq	r3, #0
 801734c:	b2da      	uxtb	r2, r3
 801734e:	4ba3      	ldr	r3, [pc, #652]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017350:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017352:	7bfb      	ldrb	r3, [r7, #15]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d003      	beq.n	8017360 <RadioSetRxGenericConfig+0x48>
 8017358:	2b01      	cmp	r3, #1
 801735a:	f000 80dc 	beq.w	8017516 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801735e:	e194      	b.n	801768a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	689b      	ldr	r3, [r3, #8]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d003      	beq.n	8017370 <RadioSetRxGenericConfig+0x58>
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	68db      	ldr	r3, [r3, #12]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d102      	bne.n	8017376 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017370:	f04f 33ff 	mov.w	r3, #4294967295
 8017374:	e18a      	b.n	801768c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	7f9b      	ldrb	r3, [r3, #30]
 801737a:	2b08      	cmp	r3, #8
 801737c:	d902      	bls.n	8017384 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801737e:	f04f 33ff 	mov.w	r3, #4294967295
 8017382:	e183      	b.n	801768c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	6919      	ldr	r1, [r3, #16]
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	7f9b      	ldrb	r3, [r3, #30]
 801738c:	b29a      	uxth	r2, r3
 801738e:	f107 0320 	add.w	r3, r7, #32
 8017392:	4618      	mov	r0, r3
 8017394:	f001 fe90 	bl	80190b8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	2b00      	cmp	r3, #0
 801739e:	bf14      	ite	ne
 80173a0:	2301      	movne	r3, #1
 80173a2:	2300      	moveq	r3, #0
 80173a4:	b2db      	uxtb	r3, r3
 80173a6:	4618      	mov	r0, r3
 80173a8:	f000 fe08 	bl	8017fbc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80173ac:	4b8b      	ldr	r3, [pc, #556]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173ae:	2200      	movs	r2, #0
 80173b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	689b      	ldr	r3, [r3, #8]
 80173b8:	4a88      	ldr	r2, [pc, #544]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173ba:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80173bc:	68bb      	ldr	r3, [r7, #8]
 80173be:	f893 2020 	ldrb.w	r2, [r3, #32]
 80173c2:	4b86      	ldr	r3, [pc, #536]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	685b      	ldr	r3, [r3, #4]
 80173cc:	4618      	mov	r0, r3
 80173ce:	f001 fcb3 	bl	8018d38 <SUBGRF_GetFskBandwidthRegValue>
 80173d2:	4603      	mov	r3, r0
 80173d4:	461a      	mov	r2, r3
 80173d6:	4b81      	ldr	r3, [pc, #516]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80173dc:	4b7f      	ldr	r3, [pc, #508]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173de:	2200      	movs	r2, #0
 80173e0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80173e2:	68bb      	ldr	r3, [r7, #8]
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	00db      	lsls	r3, r3, #3
 80173ea:	b29a      	uxth	r2, r3
 80173ec:	4b7b      	ldr	r3, [pc, #492]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173ee:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	7fda      	ldrb	r2, [r3, #31]
 80173f4:	4b79      	ldr	r3, [pc, #484]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80173f6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	7f9b      	ldrb	r3, [r3, #30]
 80173fc:	00db      	lsls	r3, r3, #3
 80173fe:	b2da      	uxtb	r2, r3
 8017400:	4b76      	ldr	r3, [pc, #472]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017402:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017404:	68bb      	ldr	r3, [r7, #8]
 8017406:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801740a:	4b74      	ldr	r3, [pc, #464]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 801740c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017414:	2b00      	cmp	r3, #0
 8017416:	d105      	bne.n	8017424 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	695b      	ldr	r3, [r3, #20]
 801741c:	b2da      	uxtb	r2, r3
 801741e:	4b6f      	ldr	r3, [pc, #444]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017420:	759a      	strb	r2, [r3, #22]
 8017422:	e00b      	b.n	801743c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017424:	68bb      	ldr	r3, [r7, #8]
 8017426:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801742a:	2b02      	cmp	r3, #2
 801742c:	d103      	bne.n	8017436 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801742e:	4b6b      	ldr	r3, [pc, #428]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017430:	22ff      	movs	r2, #255	; 0xff
 8017432:	759a      	strb	r2, [r3, #22]
 8017434:	e002      	b.n	801743c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017436:	4b69      	ldr	r3, [pc, #420]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017438:	22ff      	movs	r2, #255	; 0xff
 801743a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017442:	2b02      	cmp	r3, #2
 8017444:	d004      	beq.n	8017450 <RadioSetRxGenericConfig+0x138>
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801744c:	2b02      	cmp	r3, #2
 801744e:	d12d      	bne.n	80174ac <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017456:	2bf1      	cmp	r3, #241	; 0xf1
 8017458:	d00c      	beq.n	8017474 <RadioSetRxGenericConfig+0x15c>
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017460:	2bf2      	cmp	r3, #242	; 0xf2
 8017462:	d007      	beq.n	8017474 <RadioSetRxGenericConfig+0x15c>
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801746a:	2b01      	cmp	r3, #1
 801746c:	d002      	beq.n	8017474 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801746e:	f04f 33ff 	mov.w	r3, #4294967295
 8017472:	e10b      	b.n	801768c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8017474:	2300      	movs	r3, #0
 8017476:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801747c:	4b58      	ldr	r3, [pc, #352]	; (80175e0 <RadioSetRxGenericConfig+0x2c8>)
 801747e:	6819      	ldr	r1, [r3, #0]
 8017480:	f107 0314 	add.w	r3, r7, #20
 8017484:	4a57      	ldr	r2, [pc, #348]	; (80175e4 <RadioSetRxGenericConfig+0x2cc>)
 8017486:	4618      	mov	r0, r3
 8017488:	f001 fd16 	bl	8018eb8 <RFW_Init>
 801748c:	4603      	mov	r3, r0
 801748e:	2b00      	cmp	r3, #0
 8017490:	d002      	beq.n	8017498 <RadioSetRxGenericConfig+0x180>
            return -1;
 8017492:	f04f 33ff 	mov.w	r3, #4294967295
 8017496:	e0f9      	b.n	801768c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017498:	4b50      	ldr	r3, [pc, #320]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 801749a:	2200      	movs	r2, #0
 801749c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801749e:	4b4f      	ldr	r3, [pc, #316]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80174a0:	2201      	movs	r2, #1
 80174a2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80174a4:	4b4d      	ldr	r3, [pc, #308]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80174a6:	2200      	movs	r2, #0
 80174a8:	755a      	strb	r2, [r3, #21]
        {
 80174aa:	e00e      	b.n	80174ca <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80174b2:	4b4a      	ldr	r3, [pc, #296]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80174b4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80174bc:	4b47      	ldr	r3, [pc, #284]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80174be:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80174c6:	4b45      	ldr	r3, [pc, #276]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80174c8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80174ca:	f7ff fa48 	bl	801695e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80174ce:	2000      	movs	r0, #0
 80174d0:	f7fe fbf2 	bl	8015cb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80174d4:	4844      	ldr	r0, [pc, #272]	; (80175e8 <RadioSetRxGenericConfig+0x2d0>)
 80174d6:	f001 f80b 	bl	80184f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174da:	4844      	ldr	r0, [pc, #272]	; (80175ec <RadioSetRxGenericConfig+0x2d4>)
 80174dc:	f001 f8da 	bl	8018694 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80174e0:	f107 0320 	add.w	r3, r7, #32
 80174e4:	4618      	mov	r0, r3
 80174e6:	f000 fba2 	bl	8017c2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	8b9b      	ldrh	r3, [r3, #28]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 fbec 	bl	8017ccc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	8b1b      	ldrh	r3, [r3, #24]
 80174f8:	4618      	mov	r0, r3
 80174fa:	f000 fbc7 	bl	8017c8c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017504:	fb03 f202 	mul.w	r2, r3, r2
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	689b      	ldr	r3, [r3, #8]
 801750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017510:	4a32      	ldr	r2, [pc, #200]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017512:	6093      	str	r3, [r2, #8]
        break;
 8017514:	e0b9      	b.n	801768a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801751a:	2b00      	cmp	r3, #0
 801751c:	d102      	bne.n	8017524 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801751e:	f04f 33ff 	mov.w	r3, #4294967295
 8017522:	e0b3      	b.n	801768c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801752a:	2b01      	cmp	r3, #1
 801752c:	d104      	bne.n	8017538 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	695b      	ldr	r3, [r3, #20]
 8017532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017536:	e002      	b.n	801753e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8017538:	23ff      	movs	r3, #255	; 0xff
 801753a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017542:	2b00      	cmp	r3, #0
 8017544:	bf14      	ite	ne
 8017546:	2301      	movne	r3, #1
 8017548:	2300      	moveq	r3, #0
 801754a:	b2db      	uxtb	r3, r3
 801754c:	4618      	mov	r0, r3
 801754e:	f000 fd35 	bl	8017fbc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	b2db      	uxtb	r3, r3
 8017556:	4618      	mov	r0, r3
 8017558:	f000 fd3f 	bl	8017fda <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801755c:	4b1f      	ldr	r3, [pc, #124]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 801755e:	2201      	movs	r2, #1
 8017560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801756a:	4b1c      	ldr	r3, [pc, #112]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 801756c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017570:	68bb      	ldr	r3, [r7, #8]
 8017572:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8017576:	4b19      	ldr	r3, [pc, #100]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8017582:	4b16      	ldr	r3, [pc, #88]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 8017584:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801758e:	2b02      	cmp	r3, #2
 8017590:	d010      	beq.n	80175b4 <RadioSetRxGenericConfig+0x29c>
 8017592:	2b02      	cmp	r3, #2
 8017594:	dc2c      	bgt.n	80175f0 <RadioSetRxGenericConfig+0x2d8>
 8017596:	2b00      	cmp	r3, #0
 8017598:	d002      	beq.n	80175a0 <RadioSetRxGenericConfig+0x288>
 801759a:	2b01      	cmp	r3, #1
 801759c:	d005      	beq.n	80175aa <RadioSetRxGenericConfig+0x292>
            break;
 801759e:	e027      	b.n	80175f0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80175a0:	4b0e      	ldr	r3, [pc, #56]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80175a2:	2200      	movs	r2, #0
 80175a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80175a8:	e023      	b.n	80175f2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80175aa:	4b0c      	ldr	r3, [pc, #48]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80175ac:	2201      	movs	r2, #1
 80175ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80175b2:	e01e      	b.n	80175f2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80175ba:	2b0b      	cmp	r3, #11
 80175bc:	d004      	beq.n	80175c8 <RadioSetRxGenericConfig+0x2b0>
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80175c4:	2b0c      	cmp	r3, #12
 80175c6:	d104      	bne.n	80175d2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80175c8:	4b04      	ldr	r3, [pc, #16]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80175ca:	2201      	movs	r2, #1
 80175cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80175d0:	e00f      	b.n	80175f2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80175d2:	4b02      	ldr	r3, [pc, #8]	; (80175dc <RadioSetRxGenericConfig+0x2c4>)
 80175d4:	2200      	movs	r2, #0
 80175d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80175da:	e00a      	b.n	80175f2 <RadioSetRxGenericConfig+0x2da>
 80175dc:	20001be8 	.word	0x20001be8
 80175e0:	20001be4 	.word	0x20001be4
 80175e4:	20001c5c 	.word	0x20001c5c
 80175e8:	20001c20 	.word	0x20001c20
 80175ec:	20001bf6 	.word	0x20001bf6
            break;
 80175f0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80175f2:	4b28      	ldr	r3, [pc, #160]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 80175f4:	2201      	movs	r2, #1
 80175f6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80175fc:	4b25      	ldr	r3, [pc, #148]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 80175fe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017606:	4b23      	ldr	r3, [pc, #140]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 8017608:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801760a:	4a22      	ldr	r2, [pc, #136]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 801760c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017610:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017612:	68bb      	ldr	r3, [r7, #8]
 8017614:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8017618:	4b1e      	ldr	r3, [pc, #120]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 801761a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8017624:	4b1b      	ldr	r3, [pc, #108]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 8017626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801762a:	f7ff f998 	bl	801695e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801762e:	2001      	movs	r0, #1
 8017630:	f7fe fb42 	bl	8015cb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017634:	4818      	ldr	r0, [pc, #96]	; (8017698 <RadioSetRxGenericConfig+0x380>)
 8017636:	f000 ff5b 	bl	80184f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801763a:	4818      	ldr	r0, [pc, #96]	; (801769c <RadioSetRxGenericConfig+0x384>)
 801763c:	f001 f82a 	bl	8018694 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017640:	4b14      	ldr	r3, [pc, #80]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 8017642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017646:	2b01      	cmp	r3, #1
 8017648:	d10d      	bne.n	8017666 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801764a:	f240 7036 	movw	r0, #1846	; 0x736
 801764e:	f001 f97d 	bl	801894c <SUBGRF_ReadRegister>
 8017652:	4603      	mov	r3, r0
 8017654:	f023 0304 	bic.w	r3, r3, #4
 8017658:	b2db      	uxtb	r3, r3
 801765a:	4619      	mov	r1, r3
 801765c:	f240 7036 	movw	r0, #1846	; 0x736
 8017660:	f001 f960 	bl	8018924 <SUBGRF_WriteRegister>
 8017664:	e00c      	b.n	8017680 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017666:	f240 7036 	movw	r0, #1846	; 0x736
 801766a:	f001 f96f 	bl	801894c <SUBGRF_ReadRegister>
 801766e:	4603      	mov	r3, r0
 8017670:	f043 0304 	orr.w	r3, r3, #4
 8017674:	b2db      	uxtb	r3, r3
 8017676:	4619      	mov	r1, r3
 8017678:	f240 7036 	movw	r0, #1846	; 0x736
 801767c:	f001 f952 	bl	8018924 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8017680:	4b04      	ldr	r3, [pc, #16]	; (8017694 <RadioSetRxGenericConfig+0x37c>)
 8017682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017686:	609a      	str	r2, [r3, #8]
        break;
 8017688:	bf00      	nop
    }
    return status;
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801768c:	4618      	mov	r0, r3
 801768e:	3730      	adds	r7, #48	; 0x30
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}
 8017694:	20001be8 	.word	0x20001be8
 8017698:	20001c20 	.word	0x20001c20
 801769c:	20001bf6 	.word	0x20001bf6

080176a0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08e      	sub	sp, #56	; 0x38
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	60b9      	str	r1, [r7, #8]
 80176a8:	607b      	str	r3, [r7, #4]
 80176aa:	4603      	mov	r3, r0
 80176ac:	73fb      	strb	r3, [r7, #15]
 80176ae:	4613      	mov	r3, r2
 80176b0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80176b2:	2300      	movs	r3, #0
 80176b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176b6:	2300      	movs	r3, #0
 80176b8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80176ba:	f001 fc0a 	bl	8018ed2 <RFW_DeInit>
    switch( modem )
 80176be:	7bfb      	ldrb	r3, [r7, #15]
 80176c0:	2b03      	cmp	r3, #3
 80176c2:	f200 8204 	bhi.w	8017ace <RadioSetTxGenericConfig+0x42e>
 80176c6:	a201      	add	r2, pc, #4	; (adr r2, 80176cc <RadioSetTxGenericConfig+0x2c>)
 80176c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176cc:	08017851 	.word	0x08017851
 80176d0:	08017999 	.word	0x08017999
 80176d4:	08017a91 	.word	0x08017a91
 80176d8:	080176dd 	.word	0x080176dd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	7c9b      	ldrb	r3, [r3, #18]
 80176e0:	2b08      	cmp	r3, #8
 80176e2:	d902      	bls.n	80176ea <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80176e4:	f04f 33ff 	mov.w	r3, #4294967295
 80176e8:	e206      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	6899      	ldr	r1, [r3, #8]
 80176ee:	68bb      	ldr	r3, [r7, #8]
 80176f0:	7c9b      	ldrb	r3, [r3, #18]
 80176f2:	b29a      	uxth	r2, r3
 80176f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80176f8:	4618      	mov	r0, r3
 80176fa:	f001 fcdd 	bl	80190b8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d102      	bne.n	801770c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8017706:	f04f 33ff 	mov.w	r3, #4294967295
 801770a:	e1f5      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	f242 7210 	movw	r2, #10000	; 0x2710
 8017714:	4293      	cmp	r3, r2
 8017716:	d813      	bhi.n	8017740 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8017718:	2302      	movs	r3, #2
 801771a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801771e:	4b99      	ldr	r3, [pc, #612]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017720:	2203      	movs	r2, #3
 8017722:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8017724:	4b97      	ldr	r3, [pc, #604]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017726:	2203      	movs	r2, #3
 8017728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	4a94      	ldr	r2, [pc, #592]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017732:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	7cda      	ldrb	r2, [r3, #19]
 8017738:	4b92      	ldr	r3, [pc, #584]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801773a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801773e:	e017      	b.n	8017770 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8017740:	2300      	movs	r3, #0
 8017742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017746:	4b8f      	ldr	r3, [pc, #572]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017748:	2200      	movs	r2, #0
 801774a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801774c:	4b8d      	ldr	r3, [pc, #564]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801774e:	2200      	movs	r2, #0
 8017750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8017754:	68bb      	ldr	r3, [r7, #8]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4a8a      	ldr	r2, [pc, #552]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801775a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	7cda      	ldrb	r2, [r3, #19]
 8017760:	4b88      	ldr	r3, [pc, #544]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	089b      	lsrs	r3, r3, #2
 801776c:	4a85      	ldr	r2, [pc, #532]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801776e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	b29b      	uxth	r3, r3
 8017776:	00db      	lsls	r3, r3, #3
 8017778:	b29a      	uxth	r2, r3
 801777a:	4b82      	ldr	r3, [pc, #520]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801777c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801777e:	4b81      	ldr	r3, [pc, #516]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017780:	2204      	movs	r2, #4
 8017782:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	7c9b      	ldrb	r3, [r3, #18]
 8017788:	00db      	lsls	r3, r3, #3
 801778a:	b2da      	uxtb	r2, r3
 801778c:	4b7d      	ldr	r3, [pc, #500]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801778e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8017790:	4b7c      	ldr	r3, [pc, #496]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017792:	2200      	movs	r2, #0
 8017794:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017796:	68bb      	ldr	r3, [r7, #8]
 8017798:	7d9b      	ldrb	r3, [r3, #22]
 801779a:	2b02      	cmp	r3, #2
 801779c:	d003      	beq.n	80177a6 <RadioSetTxGenericConfig+0x106>
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	7d1b      	ldrb	r3, [r3, #20]
 80177a2:	2b02      	cmp	r3, #2
 80177a4:	d12b      	bne.n	80177fe <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	7d5b      	ldrb	r3, [r3, #21]
 80177aa:	2bf1      	cmp	r3, #241	; 0xf1
 80177ac:	d00a      	beq.n	80177c4 <RadioSetTxGenericConfig+0x124>
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	7d5b      	ldrb	r3, [r3, #21]
 80177b2:	2bf2      	cmp	r3, #242	; 0xf2
 80177b4:	d006      	beq.n	80177c4 <RadioSetTxGenericConfig+0x124>
 80177b6:	68bb      	ldr	r3, [r7, #8]
 80177b8:	7d5b      	ldrb	r3, [r3, #21]
 80177ba:	2b01      	cmp	r3, #1
 80177bc:	d002      	beq.n	80177c4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80177be:	f04f 33ff 	mov.w	r3, #4294967295
 80177c2:	e199      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80177c8:	2301      	movs	r3, #1
 80177ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80177ce:	4b6e      	ldr	r3, [pc, #440]	; (8017988 <RadioSetTxGenericConfig+0x2e8>)
 80177d0:	6819      	ldr	r1, [r3, #0]
 80177d2:	f107 0320 	add.w	r3, r7, #32
 80177d6:	4a6d      	ldr	r2, [pc, #436]	; (801798c <RadioSetTxGenericConfig+0x2ec>)
 80177d8:	4618      	mov	r0, r3
 80177da:	f001 fb6d 	bl	8018eb8 <RFW_Init>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d002      	beq.n	80177ea <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80177e4:	f04f 33ff 	mov.w	r3, #4294967295
 80177e8:	e186      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80177ea:	4b66      	ldr	r3, [pc, #408]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80177ec:	2200      	movs	r2, #0
 80177ee:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80177f0:	4b64      	ldr	r3, [pc, #400]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80177f2:	2201      	movs	r2, #1
 80177f4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80177f6:	4b63      	ldr	r3, [pc, #396]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80177f8:	2200      	movs	r2, #0
 80177fa:	755a      	strb	r2, [r3, #21]
        {
 80177fc:	e00b      	b.n	8017816 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	7d5a      	ldrb	r2, [r3, #21]
 8017802:	4b60      	ldr	r3, [pc, #384]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017804:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	7d9a      	ldrb	r2, [r3, #22]
 801780a:	4b5e      	ldr	r3, [pc, #376]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801780c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	7d1a      	ldrb	r2, [r3, #20]
 8017812:	4b5c      	ldr	r3, [pc, #368]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017814:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8017816:	f7ff f8a2 	bl	801695e <RadioStandby>
        RadioSetModem( radio_modem );
 801781a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801781e:	4618      	mov	r0, r3
 8017820:	f7fe fa4a 	bl	8015cb8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017824:	485a      	ldr	r0, [pc, #360]	; (8017990 <RadioSetTxGenericConfig+0x2f0>)
 8017826:	f000 fe63 	bl	80184f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801782a:	485a      	ldr	r0, [pc, #360]	; (8017994 <RadioSetTxGenericConfig+0x2f4>)
 801782c:	f000 ff32 	bl	8018694 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017834:	4618      	mov	r0, r3
 8017836:	f000 f9fa 	bl	8017c2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801783a:	68bb      	ldr	r3, [r7, #8]
 801783c:	8a1b      	ldrh	r3, [r3, #16]
 801783e:	4618      	mov	r0, r3
 8017840:	f000 fa44 	bl	8017ccc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	899b      	ldrh	r3, [r3, #12]
 8017848:	4618      	mov	r0, r3
 801784a:	f000 fa1f 	bl	8017c8c <SUBGRF_SetCrcPolynomial>
        break;
 801784e:	e13f      	b.n	8017ad0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8017858:	f04f 33ff 	mov.w	r3, #4294967295
 801785c:	e14c      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	7c9b      	ldrb	r3, [r3, #18]
 8017862:	2b08      	cmp	r3, #8
 8017864:	d902      	bls.n	801786c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8017866:	f04f 33ff 	mov.w	r3, #4294967295
 801786a:	e145      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	6899      	ldr	r1, [r3, #8]
 8017870:	68bb      	ldr	r3, [r7, #8]
 8017872:	7c9b      	ldrb	r3, [r3, #18]
 8017874:	b29a      	uxth	r2, r3
 8017876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801787a:	4618      	mov	r0, r3
 801787c:	f001 fc1c 	bl	80190b8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017880:	4b40      	ldr	r3, [pc, #256]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017882:	2200      	movs	r2, #0
 8017884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	4a3d      	ldr	r2, [pc, #244]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801788e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	7cda      	ldrb	r2, [r3, #19]
 8017894:	4b3b      	ldr	r3, [pc, #236]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801789a:	68bb      	ldr	r3, [r7, #8]
 801789c:	699b      	ldr	r3, [r3, #24]
 801789e:	4a39      	ldr	r2, [pc, #228]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80178a0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80178a2:	4b38      	ldr	r3, [pc, #224]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80178a4:	2200      	movs	r2, #0
 80178a6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	685b      	ldr	r3, [r3, #4]
 80178ac:	b29b      	uxth	r3, r3
 80178ae:	00db      	lsls	r3, r3, #3
 80178b0:	b29a      	uxth	r2, r3
 80178b2:	4b34      	ldr	r3, [pc, #208]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80178b4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80178b6:	4b33      	ldr	r3, [pc, #204]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80178b8:	2204      	movs	r2, #4
 80178ba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	7c9b      	ldrb	r3, [r3, #18]
 80178c0:	00db      	lsls	r3, r3, #3
 80178c2:	b2da      	uxtb	r2, r3
 80178c4:	4b2f      	ldr	r3, [pc, #188]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80178c6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80178c8:	4b2e      	ldr	r3, [pc, #184]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 80178ca:	2200      	movs	r2, #0
 80178cc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	7d9b      	ldrb	r3, [r3, #22]
 80178d2:	2b02      	cmp	r3, #2
 80178d4:	d003      	beq.n	80178de <RadioSetTxGenericConfig+0x23e>
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	7d1b      	ldrb	r3, [r3, #20]
 80178da:	2b02      	cmp	r3, #2
 80178dc:	d12a      	bne.n	8017934 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	7d5b      	ldrb	r3, [r3, #21]
 80178e2:	2bf1      	cmp	r3, #241	; 0xf1
 80178e4:	d00a      	beq.n	80178fc <RadioSetTxGenericConfig+0x25c>
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	7d5b      	ldrb	r3, [r3, #21]
 80178ea:	2bf2      	cmp	r3, #242	; 0xf2
 80178ec:	d006      	beq.n	80178fc <RadioSetTxGenericConfig+0x25c>
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	7d5b      	ldrb	r3, [r3, #21]
 80178f2:	2b01      	cmp	r3, #1
 80178f4:	d002      	beq.n	80178fc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80178f6:	f04f 33ff 	mov.w	r3, #4294967295
 80178fa:	e0fd      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80178fc:	2301      	movs	r3, #1
 80178fe:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8017900:	68bb      	ldr	r3, [r7, #8]
 8017902:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8017904:	4b20      	ldr	r3, [pc, #128]	; (8017988 <RadioSetTxGenericConfig+0x2e8>)
 8017906:	6819      	ldr	r1, [r3, #0]
 8017908:	f107 0314 	add.w	r3, r7, #20
 801790c:	4a1f      	ldr	r2, [pc, #124]	; (801798c <RadioSetTxGenericConfig+0x2ec>)
 801790e:	4618      	mov	r0, r3
 8017910:	f001 fad2 	bl	8018eb8 <RFW_Init>
 8017914:	4603      	mov	r3, r0
 8017916:	2b00      	cmp	r3, #0
 8017918:	d002      	beq.n	8017920 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801791a:	f04f 33ff 	mov.w	r3, #4294967295
 801791e:	e0eb      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017920:	4b18      	ldr	r3, [pc, #96]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017922:	2200      	movs	r2, #0
 8017924:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8017926:	4b17      	ldr	r3, [pc, #92]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017928:	2201      	movs	r2, #1
 801792a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801792c:	4b15      	ldr	r3, [pc, #84]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801792e:	2200      	movs	r2, #0
 8017930:	755a      	strb	r2, [r3, #21]
        {
 8017932:	e00b      	b.n	801794c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	7d5a      	ldrb	r2, [r3, #21]
 8017938:	4b12      	ldr	r3, [pc, #72]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801793a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801793c:	68bb      	ldr	r3, [r7, #8]
 801793e:	7d9a      	ldrb	r2, [r3, #22]
 8017940:	4b10      	ldr	r3, [pc, #64]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 8017942:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8017944:	68bb      	ldr	r3, [r7, #8]
 8017946:	7d1a      	ldrb	r2, [r3, #20]
 8017948:	4b0e      	ldr	r3, [pc, #56]	; (8017984 <RadioSetTxGenericConfig+0x2e4>)
 801794a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801794c:	f7ff f807 	bl	801695e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017950:	2000      	movs	r0, #0
 8017952:	f7fe f9b1 	bl	8015cb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017956:	480e      	ldr	r0, [pc, #56]	; (8017990 <RadioSetTxGenericConfig+0x2f0>)
 8017958:	f000 fdca 	bl	80184f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801795c:	480d      	ldr	r0, [pc, #52]	; (8017994 <RadioSetTxGenericConfig+0x2f4>)
 801795e:	f000 fe99 	bl	8018694 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017966:	4618      	mov	r0, r3
 8017968:	f000 f961 	bl	8017c2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	8a1b      	ldrh	r3, [r3, #16]
 8017970:	4618      	mov	r0, r3
 8017972:	f000 f9ab 	bl	8017ccc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	899b      	ldrh	r3, [r3, #12]
 801797a:	4618      	mov	r0, r3
 801797c:	f000 f986 	bl	8017c8c <SUBGRF_SetCrcPolynomial>
        break;
 8017980:	e0a6      	b.n	8017ad0 <RadioSetTxGenericConfig+0x430>
 8017982:	bf00      	nop
 8017984:	20001be8 	.word	0x20001be8
 8017988:	20001be4 	.word	0x20001be4
 801798c:	20001c44 	.word	0x20001c44
 8017990:	20001c20 	.word	0x20001c20
 8017994:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017998:	4b59      	ldr	r3, [pc, #356]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 801799a:	2201      	movs	r2, #1
 801799c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	781a      	ldrb	r2, [r3, #0]
 80179a4:	4b56      	ldr	r3, [pc, #344]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 80179a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	785a      	ldrb	r2, [r3, #1]
 80179ae:	4b54      	ldr	r3, [pc, #336]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 80179b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	789a      	ldrb	r2, [r3, #2]
 80179b8:	4b51      	ldr	r3, [pc, #324]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 80179ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	78db      	ldrb	r3, [r3, #3]
 80179c2:	2b02      	cmp	r3, #2
 80179c4:	d010      	beq.n	80179e8 <RadioSetTxGenericConfig+0x348>
 80179c6:	2b02      	cmp	r3, #2
 80179c8:	dc20      	bgt.n	8017a0c <RadioSetTxGenericConfig+0x36c>
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d002      	beq.n	80179d4 <RadioSetTxGenericConfig+0x334>
 80179ce:	2b01      	cmp	r3, #1
 80179d0:	d005      	beq.n	80179de <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 80179d2:	e01b      	b.n	8017a0c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80179d4:	4b4a      	ldr	r3, [pc, #296]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 80179d6:	2200      	movs	r2, #0
 80179d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80179dc:	e017      	b.n	8017a0e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80179de:	4b48      	ldr	r3, [pc, #288]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 80179e0:	2201      	movs	r2, #1
 80179e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80179e6:	e012      	b.n	8017a0e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80179e8:	68bb      	ldr	r3, [r7, #8]
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	2b0b      	cmp	r3, #11
 80179ee:	d003      	beq.n	80179f8 <RadioSetTxGenericConfig+0x358>
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	781b      	ldrb	r3, [r3, #0]
 80179f4:	2b0c      	cmp	r3, #12
 80179f6:	d104      	bne.n	8017a02 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80179f8:	4b41      	ldr	r3, [pc, #260]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 80179fa:	2201      	movs	r2, #1
 80179fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017a00:	e005      	b.n	8017a0e <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017a02:	4b3f      	ldr	r3, [pc, #252]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a04:	2200      	movs	r2, #0
 8017a06:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017a0a:	e000      	b.n	8017a0e <RadioSetTxGenericConfig+0x36e>
            break;
 8017a0c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017a0e:	4b3c      	ldr	r3, [pc, #240]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a10:	2201      	movs	r2, #1
 8017a12:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	889a      	ldrh	r2, [r3, #4]
 8017a18:	4b39      	ldr	r3, [pc, #228]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a1a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	799a      	ldrb	r2, [r3, #6]
 8017a20:	4b37      	ldr	r3, [pc, #220]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a22:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	79da      	ldrb	r2, [r3, #7]
 8017a28:	4b35      	ldr	r3, [pc, #212]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a2a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	7a1a      	ldrb	r2, [r3, #8]
 8017a32:	4b33      	ldr	r3, [pc, #204]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8017a38:	f7fe ff91 	bl	801695e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017a3c:	2001      	movs	r0, #1
 8017a3e:	f7fe f93b 	bl	8015cb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a42:	4830      	ldr	r0, [pc, #192]	; (8017b04 <RadioSetTxGenericConfig+0x464>)
 8017a44:	f000 fd54 	bl	80184f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017a48:	482f      	ldr	r0, [pc, #188]	; (8017b08 <RadioSetTxGenericConfig+0x468>)
 8017a4a:	f000 fe23 	bl	8018694 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8017a4e:	4b2c      	ldr	r3, [pc, #176]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017a54:	2b06      	cmp	r3, #6
 8017a56:	d10d      	bne.n	8017a74 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017a58:	f640 0089 	movw	r0, #2185	; 0x889
 8017a5c:	f000 ff76 	bl	801894c <SUBGRF_ReadRegister>
 8017a60:	4603      	mov	r3, r0
 8017a62:	f023 0304 	bic.w	r3, r3, #4
 8017a66:	b2db      	uxtb	r3, r3
 8017a68:	4619      	mov	r1, r3
 8017a6a:	f640 0089 	movw	r0, #2185	; 0x889
 8017a6e:	f000 ff59 	bl	8018924 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8017a72:	e02d      	b.n	8017ad0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017a74:	f640 0089 	movw	r0, #2185	; 0x889
 8017a78:	f000 ff68 	bl	801894c <SUBGRF_ReadRegister>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	f043 0304 	orr.w	r3, r3, #4
 8017a82:	b2db      	uxtb	r3, r3
 8017a84:	4619      	mov	r1, r3
 8017a86:	f640 0089 	movw	r0, #2185	; 0x889
 8017a8a:	f000 ff4b 	bl	8018924 <SUBGRF_WriteRegister>
        break;
 8017a8e:	e01f      	b.n	8017ad0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d004      	beq.n	8017aa2 <RadioSetTxGenericConfig+0x402>
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017aa0:	d902      	bls.n	8017aa8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8017aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8017aa6:	e027      	b.n	8017af8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8017aa8:	2003      	movs	r0, #3
 8017aaa:	f7fe f905 	bl	8015cb8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017aae:	4b14      	ldr	r3, [pc, #80]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017ab0:	2202      	movs	r2, #2
 8017ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	4a11      	ldr	r2, [pc, #68]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017abc:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017abe:	4b10      	ldr	r3, [pc, #64]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017ac0:	2216      	movs	r2, #22
 8017ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017ac6:	480f      	ldr	r0, [pc, #60]	; (8017b04 <RadioSetTxGenericConfig+0x464>)
 8017ac8:	f000 fd12 	bl	80184f0 <SUBGRF_SetModulationParams>
        break;
 8017acc:	e000      	b.n	8017ad0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8017ace:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f001 f841 	bl	8018b5c <SUBGRF_SetRfTxPower>
 8017ada:	4603      	mov	r3, r0
 8017adc:	461a      	mov	r2, r3
 8017ade:	4b08      	ldr	r3, [pc, #32]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017ae0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017ae4:	4b06      	ldr	r3, [pc, #24]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017ae6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017aea:	4618      	mov	r0, r3
 8017aec:	f001 fa05 	bl	8018efa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017af0:	4a03      	ldr	r2, [pc, #12]	; (8017b00 <RadioSetTxGenericConfig+0x460>)
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	6053      	str	r3, [r2, #4]
    return 0;
 8017af6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	3738      	adds	r7, #56	; 0x38
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	20001be8 	.word	0x20001be8
 8017b04:	20001c20 	.word	0x20001c20
 8017b08:	20001bf6 	.word	0x20001bf6

08017b0c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b084      	sub	sp, #16
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d002      	beq.n	8017b20 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8017b1a:	4a1a      	ldr	r2, [pc, #104]	; (8017b84 <SUBGRF_Init+0x78>)
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8017b20:	f7e9 fea6 	bl	8001870 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017b24:	2002      	movs	r0, #2
 8017b26:	f001 f8e5 	bl	8018cf4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8017b2a:	4b17      	ldr	r3, [pc, #92]	; (8017b88 <SUBGRF_Init+0x7c>)
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8017b30:	2000      	movs	r0, #0
 8017b32:	f000 f977 	bl	8017e24 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8017b36:	f7f2 f85c 	bl	8009bf2 <RBI_IsTCXO>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d10e      	bne.n	8017b5e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8017b40:	2140      	movs	r1, #64	; 0x40
 8017b42:	2001      	movs	r0, #1
 8017b44:	f000 fb78 	bl	8018238 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8017b48:	2100      	movs	r1, #0
 8017b4a:	f640 1011 	movw	r0, #2321	; 0x911
 8017b4e:	f000 fee9 	bl	8018924 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8017b52:	237f      	movs	r3, #127	; 0x7f
 8017b54:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8017b56:	7b38      	ldrb	r0, [r7, #12]
 8017b58:	f000 fa85 	bl	8018066 <SUBGRF_Calibrate>
 8017b5c:	e009      	b.n	8017b72 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017b5e:	2120      	movs	r1, #32
 8017b60:	f640 1011 	movw	r0, #2321	; 0x911
 8017b64:	f000 fede 	bl	8018924 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017b68:	2120      	movs	r1, #32
 8017b6a:	f640 1012 	movw	r0, #2322	; 0x912
 8017b6e:	f000 fed9 	bl	8018924 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8017b72:	f7f1 ffa7 	bl	8009ac4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8017b76:	4b05      	ldr	r3, [pc, #20]	; (8017b8c <SUBGRF_Init+0x80>)
 8017b78:	2201      	movs	r2, #1
 8017b7a:	701a      	strb	r2, [r3, #0]
}
 8017b7c:	bf00      	nop
 8017b7e:	3710      	adds	r7, #16
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd80      	pop	{r7, pc}
 8017b84:	20001c80 	.word	0x20001c80
 8017b88:	20001c7c 	.word	0x20001c7c
 8017b8c:	20001c74 	.word	0x20001c74

08017b90 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8017b90:	b480      	push	{r7}
 8017b92:	af00      	add	r7, sp, #0
    return OperatingMode;
 8017b94:	4b02      	ldr	r3, [pc, #8]	; (8017ba0 <SUBGRF_GetOperatingMode+0x10>)
 8017b96:	781b      	ldrb	r3, [r3, #0]
}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bc80      	pop	{r7}
 8017b9e:	4770      	bx	lr
 8017ba0:	20001c74 	.word	0x20001c74

08017ba4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b082      	sub	sp, #8
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	460b      	mov	r3, r1
 8017bae:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8017bb0:	78fb      	ldrb	r3, [r7, #3]
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	6879      	ldr	r1, [r7, #4]
 8017bb6:	2000      	movs	r0, #0
 8017bb8:	f000 ff20 	bl	80189fc <SUBGRF_WriteBuffer>
}
 8017bbc:	bf00      	nop
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b086      	sub	sp, #24
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	4613      	mov	r3, r2
 8017bd0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8017bd6:	f107 0317 	add.w	r3, r7, #23
 8017bda:	4619      	mov	r1, r3
 8017bdc:	68b8      	ldr	r0, [r7, #8]
 8017bde:	f000 fe23 	bl	8018828 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	781b      	ldrb	r3, [r3, #0]
 8017be6:	79fa      	ldrb	r2, [r7, #7]
 8017be8:	429a      	cmp	r2, r3
 8017bea:	d201      	bcs.n	8017bf0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8017bec:	2301      	movs	r3, #1
 8017bee:	e007      	b.n	8017c00 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8017bf0:	7df8      	ldrb	r0, [r7, #23]
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	781b      	ldrb	r3, [r3, #0]
 8017bf6:	461a      	mov	r2, r3
 8017bf8:	68f9      	ldr	r1, [r7, #12]
 8017bfa:	f000 ff21 	bl	8018a40 <SUBGRF_ReadBuffer>

    return 0;
 8017bfe:	2300      	movs	r3, #0
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	3718      	adds	r7, #24
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	460b      	mov	r3, r1
 8017c12:	607a      	str	r2, [r7, #4]
 8017c14:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8017c16:	7afb      	ldrb	r3, [r7, #11]
 8017c18:	4619      	mov	r1, r3
 8017c1a:	68f8      	ldr	r0, [r7, #12]
 8017c1c:	f7ff ffc2 	bl	8017ba4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8017c20:	6878      	ldr	r0, [r7, #4]
 8017c22:	f000 f91b 	bl	8017e5c <SUBGRF_SetTx>
}
 8017c26:	bf00      	nop
 8017c28:	3710      	adds	r7, #16
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}

08017c2e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8017c2e:	b580      	push	{r7, lr}
 8017c30:	b082      	sub	sp, #8
 8017c32:	af00      	add	r7, sp, #0
 8017c34:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8017c36:	2208      	movs	r2, #8
 8017c38:	6879      	ldr	r1, [r7, #4]
 8017c3a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8017c3e:	f000 fe99 	bl	8018974 <SUBGRF_WriteRegisters>
    return 0;
 8017c42:	2300      	movs	r3, #0
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3708      	adds	r7, #8
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}

08017c4c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	4603      	mov	r3, r0
 8017c54:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8017c56:	88fb      	ldrh	r3, [r7, #6]
 8017c58:	0a1b      	lsrs	r3, r3, #8
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	b2db      	uxtb	r3, r3
 8017c5e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8017c60:	88fb      	ldrh	r3, [r7, #6]
 8017c62:	b2db      	uxtb	r3, r3
 8017c64:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017c66:	f000 fb6b 	bl	8018340 <SUBGRF_GetPacketType>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d108      	bne.n	8017c82 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8017c70:	f107 030c 	add.w	r3, r7, #12
 8017c74:	2202      	movs	r2, #2
 8017c76:	4619      	mov	r1, r3
 8017c78:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8017c7c:	f000 fe7a 	bl	8018974 <SUBGRF_WriteRegisters>
            break;
 8017c80:	e000      	b.n	8017c84 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8017c82:	bf00      	nop
    }
}
 8017c84:	bf00      	nop
 8017c86:	3710      	adds	r7, #16
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	4603      	mov	r3, r0
 8017c94:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8017c96:	88fb      	ldrh	r3, [r7, #6]
 8017c98:	0a1b      	lsrs	r3, r3, #8
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	b2db      	uxtb	r3, r3
 8017c9e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8017ca0:	88fb      	ldrh	r3, [r7, #6]
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017ca6:	f000 fb4b 	bl	8018340 <SUBGRF_GetPacketType>
 8017caa:	4603      	mov	r3, r0
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d108      	bne.n	8017cc2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8017cb0:	f107 030c 	add.w	r3, r7, #12
 8017cb4:	2202      	movs	r2, #2
 8017cb6:	4619      	mov	r1, r3
 8017cb8:	f240 60be 	movw	r0, #1726	; 0x6be
 8017cbc:	f000 fe5a 	bl	8018974 <SUBGRF_WriteRegisters>
            break;
 8017cc0:	e000      	b.n	8017cc4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8017cc2:	bf00      	nop
    }
}
 8017cc4:	bf00      	nop
 8017cc6:	3710      	adds	r7, #16
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b084      	sub	sp, #16
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8017cda:	f000 fb31 	bl	8018340 <SUBGRF_GetPacketType>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d121      	bne.n	8017d28 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8017ce4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017ce8:	f000 fe30 	bl	801894c <SUBGRF_ReadRegister>
 8017cec:	4603      	mov	r3, r0
 8017cee:	f023 0301 	bic.w	r3, r3, #1
 8017cf2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8017cf4:	88fb      	ldrh	r3, [r7, #6]
 8017cf6:	0a1b      	lsrs	r3, r3, #8
 8017cf8:	b29b      	uxth	r3, r3
 8017cfa:	b25b      	sxtb	r3, r3
 8017cfc:	f003 0301 	and.w	r3, r3, #1
 8017d00:	b25a      	sxtb	r2, r3
 8017d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d06:	4313      	orrs	r3, r2
 8017d08:	b25b      	sxtb	r3, r3
 8017d0a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8017d0c:	7bfb      	ldrb	r3, [r7, #15]
 8017d0e:	4619      	mov	r1, r3
 8017d10:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017d14:	f000 fe06 	bl	8018924 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8017d18:	88fb      	ldrh	r3, [r7, #6]
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	4619      	mov	r1, r3
 8017d1e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8017d22:	f000 fdff 	bl	8018924 <SUBGRF_WriteRegister>
            break;
 8017d26:	e000      	b.n	8017d2a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8017d28:	bf00      	nop
    }
}
 8017d2a:	bf00      	nop
 8017d2c:	3710      	adds	r7, #16
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}

08017d32 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8017d32:	b580      	push	{r7, lr}
 8017d34:	b082      	sub	sp, #8
 8017d36:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8017d40:	2300      	movs	r3, #0
 8017d42:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8017d44:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017d48:	f000 fe00 	bl	801894c <SUBGRF_ReadRegister>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8017d50:	79fb      	ldrb	r3, [r7, #7]
 8017d52:	f023 0301 	bic.w	r3, r3, #1
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	4619      	mov	r1, r3
 8017d5a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017d5e:	f000 fde1 	bl	8018924 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8017d62:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017d66:	f000 fdf1 	bl	801894c <SUBGRF_ReadRegister>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8017d6e:	79bb      	ldrb	r3, [r7, #6]
 8017d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d74:	b2db      	uxtb	r3, r3
 8017d76:	4619      	mov	r1, r3
 8017d78:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017d7c:	f000 fdd2 	bl	8018924 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017d80:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017d84:	f000 f88a 	bl	8017e9c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8017d88:	463b      	mov	r3, r7
 8017d8a:	2204      	movs	r2, #4
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	f640 0019 	movw	r0, #2073	; 0x819
 8017d92:	f000 fe11 	bl	80189b8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8017d96:	2000      	movs	r0, #0
 8017d98:	f000 f844 	bl	8017e24 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8017d9c:	79fb      	ldrb	r3, [r7, #7]
 8017d9e:	4619      	mov	r1, r3
 8017da0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017da4:	f000 fdbe 	bl	8018924 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8017da8:	79bb      	ldrb	r3, [r7, #6]
 8017daa:	4619      	mov	r1, r3
 8017dac:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017db0:	f000 fdb8 	bl	8018924 <SUBGRF_WriteRegister>

    return number;
 8017db4:	683b      	ldr	r3, [r7, #0]
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	3708      	adds	r7, #8
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
	...

08017dc0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8017dc8:	2000      	movs	r0, #0
 8017dca:	f7f1 feb3 	bl	8009b34 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017dce:	2002      	movs	r0, #2
 8017dd0:	f000 ff90 	bl	8018cf4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017dd4:	793b      	ldrb	r3, [r7, #4]
 8017dd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	009b      	lsls	r3, r3, #2
 8017dde:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017de0:	793b      	ldrb	r3, [r7, #4]
 8017de2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017dea:	b25b      	sxtb	r3, r3
 8017dec:	4313      	orrs	r3, r2
 8017dee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8017df0:	793b      	ldrb	r3, [r7, #4]
 8017df2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	b25b      	sxtb	r3, r3
 8017dfe:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017e00:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8017e02:	f107 030f 	add.w	r3, r7, #15
 8017e06:	2201      	movs	r2, #1
 8017e08:	4619      	mov	r1, r3
 8017e0a:	2084      	movs	r0, #132	; 0x84
 8017e0c:	f000 fe3a 	bl	8018a84 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8017e10:	4b03      	ldr	r3, [pc, #12]	; (8017e20 <SUBGRF_SetSleep+0x60>)
 8017e12:	2200      	movs	r2, #0
 8017e14:	701a      	strb	r2, [r3, #0]
}
 8017e16:	bf00      	nop
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	20001c74 	.word	0x20001c74

08017e24 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8017e2e:	1dfb      	adds	r3, r7, #7
 8017e30:	2201      	movs	r2, #1
 8017e32:	4619      	mov	r1, r3
 8017e34:	2080      	movs	r0, #128	; 0x80
 8017e36:	f000 fe25 	bl	8018a84 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8017e3a:	79fb      	ldrb	r3, [r7, #7]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d103      	bne.n	8017e48 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8017e40:	4b05      	ldr	r3, [pc, #20]	; (8017e58 <SUBGRF_SetStandby+0x34>)
 8017e42:	2201      	movs	r2, #1
 8017e44:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8017e46:	e002      	b.n	8017e4e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8017e48:	4b03      	ldr	r3, [pc, #12]	; (8017e58 <SUBGRF_SetStandby+0x34>)
 8017e4a:	2202      	movs	r2, #2
 8017e4c:	701a      	strb	r2, [r3, #0]
}
 8017e4e:	bf00      	nop
 8017e50:	3708      	adds	r7, #8
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	20001c74 	.word	0x20001c74

08017e5c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b084      	sub	sp, #16
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8017e64:	4b0c      	ldr	r3, [pc, #48]	; (8017e98 <SUBGRF_SetTx+0x3c>)
 8017e66:	2204      	movs	r2, #4
 8017e68:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	0c1b      	lsrs	r3, r3, #16
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	0a1b      	lsrs	r3, r3, #8
 8017e76:	b2db      	uxtb	r3, r3
 8017e78:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8017e80:	f107 030c 	add.w	r3, r7, #12
 8017e84:	2203      	movs	r2, #3
 8017e86:	4619      	mov	r1, r3
 8017e88:	2083      	movs	r0, #131	; 0x83
 8017e8a:	f000 fdfb 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8017e8e:	bf00      	nop
 8017e90:	3710      	adds	r7, #16
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	20001c74 	.word	0x20001c74

08017e9c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b084      	sub	sp, #16
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017ea4:	4b0c      	ldr	r3, [pc, #48]	; (8017ed8 <SUBGRF_SetRx+0x3c>)
 8017ea6:	2205      	movs	r2, #5
 8017ea8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	0c1b      	lsrs	r3, r3, #16
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	0a1b      	lsrs	r3, r3, #8
 8017eb6:	b2db      	uxtb	r3, r3
 8017eb8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017ec0:	f107 030c 	add.w	r3, r7, #12
 8017ec4:	2203      	movs	r2, #3
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	2082      	movs	r0, #130	; 0x82
 8017eca:	f000 fddb 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8017ece:	bf00      	nop
 8017ed0:	3710      	adds	r7, #16
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}
 8017ed6:	bf00      	nop
 8017ed8:	20001c74 	.word	0x20001c74

08017edc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017ee4:	4b0e      	ldr	r3, [pc, #56]	; (8017f20 <SUBGRF_SetRxBoosted+0x44>)
 8017ee6:	2205      	movs	r2, #5
 8017ee8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8017eea:	2197      	movs	r1, #151	; 0x97
 8017eec:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8017ef0:	f000 fd18 	bl	8018924 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	0c1b      	lsrs	r3, r3, #16
 8017ef8:	b2db      	uxtb	r3, r3
 8017efa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	0a1b      	lsrs	r3, r3, #8
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017f0a:	f107 030c 	add.w	r3, r7, #12
 8017f0e:	2203      	movs	r2, #3
 8017f10:	4619      	mov	r1, r3
 8017f12:	2082      	movs	r0, #130	; 0x82
 8017f14:	f000 fdb6 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8017f18:	bf00      	nop
 8017f1a:	3710      	adds	r7, #16
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}
 8017f20:	20001c74 	.word	0x20001c74

08017f24 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b084      	sub	sp, #16
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	0c1b      	lsrs	r3, r3, #16
 8017f32:	b2db      	uxtb	r3, r3
 8017f34:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	0a1b      	lsrs	r3, r3, #8
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	0c1b      	lsrs	r3, r3, #16
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	0a1b      	lsrs	r3, r3, #8
 8017f50:	b2db      	uxtb	r3, r3
 8017f52:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8017f5a:	f107 0308 	add.w	r3, r7, #8
 8017f5e:	2206      	movs	r2, #6
 8017f60:	4619      	mov	r1, r3
 8017f62:	2094      	movs	r0, #148	; 0x94
 8017f64:	f000 fd8e 	bl	8018a84 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8017f68:	4b03      	ldr	r3, [pc, #12]	; (8017f78 <SUBGRF_SetRxDutyCycle+0x54>)
 8017f6a:	2206      	movs	r2, #6
 8017f6c:	701a      	strb	r2, [r3, #0]
}
 8017f6e:	bf00      	nop
 8017f70:	3710      	adds	r7, #16
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd80      	pop	{r7, pc}
 8017f76:	bf00      	nop
 8017f78:	20001c74 	.word	0x20001c74

08017f7c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8017f80:	2200      	movs	r2, #0
 8017f82:	2100      	movs	r1, #0
 8017f84:	20c5      	movs	r0, #197	; 0xc5
 8017f86:	f000 fd7d 	bl	8018a84 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8017f8a:	4b02      	ldr	r3, [pc, #8]	; (8017f94 <SUBGRF_SetCad+0x18>)
 8017f8c:	2207      	movs	r2, #7
 8017f8e:	701a      	strb	r2, [r3, #0]
}
 8017f90:	bf00      	nop
 8017f92:	bd80      	pop	{r7, pc}
 8017f94:	20001c74 	.word	0x20001c74

08017f98 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	2100      	movs	r1, #0
 8017fa0:	20d1      	movs	r0, #209	; 0xd1
 8017fa2:	f000 fd6f 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8017fa6:	bf00      	nop
 8017fa8:	bd80      	pop	{r7, pc}

08017faa <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8017faa:	b580      	push	{r7, lr}
 8017fac:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8017fae:	2200      	movs	r2, #0
 8017fb0:	2100      	movs	r1, #0
 8017fb2:	20d2      	movs	r0, #210	; 0xd2
 8017fb4:	f000 fd66 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8017fb8:	bf00      	nop
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8017fc6:	1dfb      	adds	r3, r7, #7
 8017fc8:	2201      	movs	r2, #1
 8017fca:	4619      	mov	r1, r3
 8017fcc:	209f      	movs	r0, #159	; 0x9f
 8017fce:	f000 fd59 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8017fd2:	bf00      	nop
 8017fd4:	3708      	adds	r7, #8
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}

08017fda <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8017fda:	b580      	push	{r7, lr}
 8017fdc:	b084      	sub	sp, #16
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8017fe4:	1dfb      	adds	r3, r7, #7
 8017fe6:	2201      	movs	r2, #1
 8017fe8:	4619      	mov	r1, r3
 8017fea:	20a0      	movs	r0, #160	; 0xa0
 8017fec:	f000 fd4a 	bl	8018a84 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8017ff0:	79fb      	ldrb	r3, [r7, #7]
 8017ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8017ff4:	d91c      	bls.n	8018030 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8017ff6:	79fb      	ldrb	r3, [r7, #7]
 8017ff8:	085b      	lsrs	r3, r3, #1
 8017ffa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018000:	2300      	movs	r3, #0
 8018002:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018004:	e005      	b.n	8018012 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018006:	7bfb      	ldrb	r3, [r7, #15]
 8018008:	089b      	lsrs	r3, r3, #2
 801800a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801800c:	7bbb      	ldrb	r3, [r7, #14]
 801800e:	3301      	adds	r3, #1
 8018010:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018012:	7bfb      	ldrb	r3, [r7, #15]
 8018014:	2b1f      	cmp	r3, #31
 8018016:	d8f6      	bhi.n	8018006 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018018:	7bfb      	ldrb	r3, [r7, #15]
 801801a:	00db      	lsls	r3, r3, #3
 801801c:	b2da      	uxtb	r2, r3
 801801e:	7bbb      	ldrb	r3, [r7, #14]
 8018020:	4413      	add	r3, r2
 8018022:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018024:	7b7b      	ldrb	r3, [r7, #13]
 8018026:	4619      	mov	r1, r3
 8018028:	f240 7006 	movw	r0, #1798	; 0x706
 801802c:	f000 fc7a 	bl	8018924 <SUBGRF_WriteRegister>
    }
}
 8018030:	bf00      	nop
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}

08018038 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801803e:	f7f1 fde3 	bl	8009c08 <RBI_IsDCDC>
 8018042:	4603      	mov	r3, r0
 8018044:	2b01      	cmp	r3, #1
 8018046:	d102      	bne.n	801804e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018048:	2301      	movs	r3, #1
 801804a:	71fb      	strb	r3, [r7, #7]
 801804c:	e001      	b.n	8018052 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801804e:	2300      	movs	r3, #0
 8018050:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018052:	1dfb      	adds	r3, r7, #7
 8018054:	2201      	movs	r2, #1
 8018056:	4619      	mov	r1, r3
 8018058:	2096      	movs	r0, #150	; 0x96
 801805a:	f000 fd13 	bl	8018a84 <SUBGRF_WriteCommand>
}
 801805e:	bf00      	nop
 8018060:	3708      	adds	r7, #8
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}

08018066 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018066:	b580      	push	{r7, lr}
 8018068:	b084      	sub	sp, #16
 801806a:	af00      	add	r7, sp, #0
 801806c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801806e:	793b      	ldrb	r3, [r7, #4]
 8018070:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018074:	b2db      	uxtb	r3, r3
 8018076:	019b      	lsls	r3, r3, #6
 8018078:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801807a:	793b      	ldrb	r3, [r7, #4]
 801807c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018080:	b2db      	uxtb	r3, r3
 8018082:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018084:	b25b      	sxtb	r3, r3
 8018086:	4313      	orrs	r3, r2
 8018088:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801808a:	793b      	ldrb	r3, [r7, #4]
 801808c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018090:	b2db      	uxtb	r3, r3
 8018092:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018094:	b25b      	sxtb	r3, r3
 8018096:	4313      	orrs	r3, r2
 8018098:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801809a:	793b      	ldrb	r3, [r7, #4]
 801809c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80180a0:	b2db      	uxtb	r3, r3
 80180a2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80180a4:	b25b      	sxtb	r3, r3
 80180a6:	4313      	orrs	r3, r2
 80180a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80180aa:	793b      	ldrb	r3, [r7, #4]
 80180ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80180b0:	b2db      	uxtb	r3, r3
 80180b2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80180b4:	b25b      	sxtb	r3, r3
 80180b6:	4313      	orrs	r3, r2
 80180b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80180ba:	793b      	ldrb	r3, [r7, #4]
 80180bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80180c4:	b25b      	sxtb	r3, r3
 80180c6:	4313      	orrs	r3, r2
 80180c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80180ca:	793b      	ldrb	r3, [r7, #4]
 80180cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80180d0:	b2db      	uxtb	r3, r3
 80180d2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80180d4:	4313      	orrs	r3, r2
 80180d6:	b25b      	sxtb	r3, r3
 80180d8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80180da:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80180dc:	f107 030f 	add.w	r3, r7, #15
 80180e0:	2201      	movs	r2, #1
 80180e2:	4619      	mov	r1, r3
 80180e4:	2089      	movs	r0, #137	; 0x89
 80180e6:	f000 fccd 	bl	8018a84 <SUBGRF_WriteCommand>
}
 80180ea:	bf00      	nop
 80180ec:	3710      	adds	r7, #16
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}
	...

080180f4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b084      	sub	sp, #16
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	4a1b      	ldr	r2, [pc, #108]	; (801816c <SUBGRF_CalibrateImage+0x78>)
 8018100:	4293      	cmp	r3, r2
 8018102:	d904      	bls.n	801810e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018104:	23e1      	movs	r3, #225	; 0xe1
 8018106:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018108:	23e9      	movs	r3, #233	; 0xe9
 801810a:	737b      	strb	r3, [r7, #13]
 801810c:	e022      	b.n	8018154 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	4a17      	ldr	r2, [pc, #92]	; (8018170 <SUBGRF_CalibrateImage+0x7c>)
 8018112:	4293      	cmp	r3, r2
 8018114:	d904      	bls.n	8018120 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018116:	23d7      	movs	r3, #215	; 0xd7
 8018118:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801811a:	23db      	movs	r3, #219	; 0xdb
 801811c:	737b      	strb	r3, [r7, #13]
 801811e:	e019      	b.n	8018154 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	4a14      	ldr	r2, [pc, #80]	; (8018174 <SUBGRF_CalibrateImage+0x80>)
 8018124:	4293      	cmp	r3, r2
 8018126:	d904      	bls.n	8018132 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018128:	23c1      	movs	r3, #193	; 0xc1
 801812a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801812c:	23c5      	movs	r3, #197	; 0xc5
 801812e:	737b      	strb	r3, [r7, #13]
 8018130:	e010      	b.n	8018154 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	4a10      	ldr	r2, [pc, #64]	; (8018178 <SUBGRF_CalibrateImage+0x84>)
 8018136:	4293      	cmp	r3, r2
 8018138:	d904      	bls.n	8018144 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801813a:	2375      	movs	r3, #117	; 0x75
 801813c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801813e:	2381      	movs	r3, #129	; 0x81
 8018140:	737b      	strb	r3, [r7, #13]
 8018142:	e007      	b.n	8018154 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	4a0d      	ldr	r2, [pc, #52]	; (801817c <SUBGRF_CalibrateImage+0x88>)
 8018148:	4293      	cmp	r3, r2
 801814a:	d903      	bls.n	8018154 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801814c:	236b      	movs	r3, #107	; 0x6b
 801814e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018150:	236f      	movs	r3, #111	; 0x6f
 8018152:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018154:	f107 030c 	add.w	r3, r7, #12
 8018158:	2202      	movs	r2, #2
 801815a:	4619      	mov	r1, r3
 801815c:	2098      	movs	r0, #152	; 0x98
 801815e:	f000 fc91 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8018162:	bf00      	nop
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	35a4e900 	.word	0x35a4e900
 8018170:	32a9f880 	.word	0x32a9f880
 8018174:	2de54480 	.word	0x2de54480
 8018178:	1b6b0b00 	.word	0x1b6b0b00
 801817c:	1954fc40 	.word	0x1954fc40

08018180 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018180:	b590      	push	{r4, r7, lr}
 8018182:	b085      	sub	sp, #20
 8018184:	af00      	add	r7, sp, #0
 8018186:	4604      	mov	r4, r0
 8018188:	4608      	mov	r0, r1
 801818a:	4611      	mov	r1, r2
 801818c:	461a      	mov	r2, r3
 801818e:	4623      	mov	r3, r4
 8018190:	71fb      	strb	r3, [r7, #7]
 8018192:	4603      	mov	r3, r0
 8018194:	71bb      	strb	r3, [r7, #6]
 8018196:	460b      	mov	r3, r1
 8018198:	717b      	strb	r3, [r7, #5]
 801819a:	4613      	mov	r3, r2
 801819c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801819e:	79fb      	ldrb	r3, [r7, #7]
 80181a0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80181a2:	79bb      	ldrb	r3, [r7, #6]
 80181a4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80181a6:	797b      	ldrb	r3, [r7, #5]
 80181a8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80181aa:	793b      	ldrb	r3, [r7, #4]
 80181ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80181ae:	f107 030c 	add.w	r3, r7, #12
 80181b2:	2204      	movs	r2, #4
 80181b4:	4619      	mov	r1, r3
 80181b6:	2095      	movs	r0, #149	; 0x95
 80181b8:	f000 fc64 	bl	8018a84 <SUBGRF_WriteCommand>
}
 80181bc:	bf00      	nop
 80181be:	3714      	adds	r7, #20
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd90      	pop	{r4, r7, pc}

080181c4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80181c4:	b590      	push	{r4, r7, lr}
 80181c6:	b085      	sub	sp, #20
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	4604      	mov	r4, r0
 80181cc:	4608      	mov	r0, r1
 80181ce:	4611      	mov	r1, r2
 80181d0:	461a      	mov	r2, r3
 80181d2:	4623      	mov	r3, r4
 80181d4:	80fb      	strh	r3, [r7, #6]
 80181d6:	4603      	mov	r3, r0
 80181d8:	80bb      	strh	r3, [r7, #4]
 80181da:	460b      	mov	r3, r1
 80181dc:	807b      	strh	r3, [r7, #2]
 80181de:	4613      	mov	r3, r2
 80181e0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80181e2:	88fb      	ldrh	r3, [r7, #6]
 80181e4:	0a1b      	lsrs	r3, r3, #8
 80181e6:	b29b      	uxth	r3, r3
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80181ec:	88fb      	ldrh	r3, [r7, #6]
 80181ee:	b2db      	uxtb	r3, r3
 80181f0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80181f2:	88bb      	ldrh	r3, [r7, #4]
 80181f4:	0a1b      	lsrs	r3, r3, #8
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	b2db      	uxtb	r3, r3
 80181fa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80181fc:	88bb      	ldrh	r3, [r7, #4]
 80181fe:	b2db      	uxtb	r3, r3
 8018200:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018202:	887b      	ldrh	r3, [r7, #2]
 8018204:	0a1b      	lsrs	r3, r3, #8
 8018206:	b29b      	uxth	r3, r3
 8018208:	b2db      	uxtb	r3, r3
 801820a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801820c:	887b      	ldrh	r3, [r7, #2]
 801820e:	b2db      	uxtb	r3, r3
 8018210:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018212:	883b      	ldrh	r3, [r7, #0]
 8018214:	0a1b      	lsrs	r3, r3, #8
 8018216:	b29b      	uxth	r3, r3
 8018218:	b2db      	uxtb	r3, r3
 801821a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801821c:	883b      	ldrh	r3, [r7, #0]
 801821e:	b2db      	uxtb	r3, r3
 8018220:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018222:	f107 0308 	add.w	r3, r7, #8
 8018226:	2208      	movs	r2, #8
 8018228:	4619      	mov	r1, r3
 801822a:	2008      	movs	r0, #8
 801822c:	f000 fc2a 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8018230:	bf00      	nop
 8018232:	3714      	adds	r7, #20
 8018234:	46bd      	mov	sp, r7
 8018236:	bd90      	pop	{r4, r7, pc}

08018238 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b084      	sub	sp, #16
 801823c:	af00      	add	r7, sp, #0
 801823e:	4603      	mov	r3, r0
 8018240:	6039      	str	r1, [r7, #0]
 8018242:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018244:	79fb      	ldrb	r3, [r7, #7]
 8018246:	f003 0307 	and.w	r3, r3, #7
 801824a:	b2db      	uxtb	r3, r3
 801824c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	0c1b      	lsrs	r3, r3, #16
 8018252:	b2db      	uxtb	r3, r3
 8018254:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	0a1b      	lsrs	r3, r3, #8
 801825a:	b2db      	uxtb	r3, r3
 801825c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801825e:	683b      	ldr	r3, [r7, #0]
 8018260:	b2db      	uxtb	r3, r3
 8018262:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018264:	f107 030c 	add.w	r3, r7, #12
 8018268:	2204      	movs	r2, #4
 801826a:	4619      	mov	r1, r3
 801826c:	2097      	movs	r0, #151	; 0x97
 801826e:	f000 fc09 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8018272:	bf00      	nop
 8018274:	3710      	adds	r7, #16
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
	...

0801827c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801827c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018280:	b084      	sub	sp, #16
 8018282:	af00      	add	r7, sp, #0
 8018284:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018286:	2300      	movs	r3, #0
 8018288:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801828a:	4b1d      	ldr	r3, [pc, #116]	; (8018300 <SUBGRF_SetRfFrequency+0x84>)
 801828c:	781b      	ldrb	r3, [r3, #0]
 801828e:	f083 0301 	eor.w	r3, r3, #1
 8018292:	b2db      	uxtb	r3, r3
 8018294:	2b00      	cmp	r3, #0
 8018296:	d005      	beq.n	80182a4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8018298:	6878      	ldr	r0, [r7, #4]
 801829a:	f7ff ff2b 	bl	80180f4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801829e:	4b18      	ldr	r3, [pc, #96]	; (8018300 <SUBGRF_SetRfFrequency+0x84>)
 80182a0:	2201      	movs	r2, #1
 80182a2:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2200      	movs	r2, #0
 80182a8:	461c      	mov	r4, r3
 80182aa:	4615      	mov	r5, r2
 80182ac:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80182b0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80182b4:	4a13      	ldr	r2, [pc, #76]	; (8018304 <SUBGRF_SetRfFrequency+0x88>)
 80182b6:	f04f 0300 	mov.w	r3, #0
 80182ba:	4640      	mov	r0, r8
 80182bc:	4649      	mov	r1, r9
 80182be:	f7e8 fb57 	bl	8000970 <__aeabi_uldivmod>
 80182c2:	4602      	mov	r2, r0
 80182c4:	460b      	mov	r3, r1
 80182c6:	4613      	mov	r3, r2
 80182c8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	0e1b      	lsrs	r3, r3, #24
 80182ce:	b2db      	uxtb	r3, r3
 80182d0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	0c1b      	lsrs	r3, r3, #16
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	0a1b      	lsrs	r3, r3, #8
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	b2db      	uxtb	r3, r3
 80182e6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80182e8:	f107 0308 	add.w	r3, r7, #8
 80182ec:	2204      	movs	r2, #4
 80182ee:	4619      	mov	r1, r3
 80182f0:	2086      	movs	r0, #134	; 0x86
 80182f2:	f000 fbc7 	bl	8018a84 <SUBGRF_WriteCommand>
}
 80182f6:	bf00      	nop
 80182f8:	3710      	adds	r7, #16
 80182fa:	46bd      	mov	sp, r7
 80182fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018300:	20001c7c 	.word	0x20001c7c
 8018304:	01e84800 	.word	0x01e84800

08018308 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	4603      	mov	r3, r0
 8018310:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018312:	79fa      	ldrb	r2, [r7, #7]
 8018314:	4b09      	ldr	r3, [pc, #36]	; (801833c <SUBGRF_SetPacketType+0x34>)
 8018316:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018318:	79fb      	ldrb	r3, [r7, #7]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d104      	bne.n	8018328 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801831e:	2100      	movs	r1, #0
 8018320:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018324:	f000 fafe 	bl	8018924 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018328:	1dfb      	adds	r3, r7, #7
 801832a:	2201      	movs	r2, #1
 801832c:	4619      	mov	r1, r3
 801832e:	208a      	movs	r0, #138	; 0x8a
 8018330:	f000 fba8 	bl	8018a84 <SUBGRF_WriteCommand>
}
 8018334:	bf00      	nop
 8018336:	3708      	adds	r7, #8
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}
 801833c:	20001c75 	.word	0x20001c75

08018340 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018340:	b480      	push	{r7}
 8018342:	af00      	add	r7, sp, #0
    return PacketType;
 8018344:	4b02      	ldr	r3, [pc, #8]	; (8018350 <SUBGRF_GetPacketType+0x10>)
 8018346:	781b      	ldrb	r3, [r3, #0]
}
 8018348:	4618      	mov	r0, r3
 801834a:	46bd      	mov	sp, r7
 801834c:	bc80      	pop	{r7}
 801834e:	4770      	bx	lr
 8018350:	20001c75 	.word	0x20001c75

08018354 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b084      	sub	sp, #16
 8018358:	af00      	add	r7, sp, #0
 801835a:	4603      	mov	r3, r0
 801835c:	71fb      	strb	r3, [r7, #7]
 801835e:	460b      	mov	r3, r1
 8018360:	71bb      	strb	r3, [r7, #6]
 8018362:	4613      	mov	r3, r2
 8018364:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8018366:	79fb      	ldrb	r3, [r7, #7]
 8018368:	2b01      	cmp	r3, #1
 801836a:	d149      	bne.n	8018400 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801836c:	2000      	movs	r0, #0
 801836e:	f7f1 fc56 	bl	8009c1e <RBI_GetRFOMaxPowerConfig>
 8018372:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8018374:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018378:	68fa      	ldr	r2, [r7, #12]
 801837a:	429a      	cmp	r2, r3
 801837c:	da01      	bge.n	8018382 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	2b0e      	cmp	r3, #14
 8018386:	d10e      	bne.n	80183a6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8018388:	2301      	movs	r3, #1
 801838a:	2201      	movs	r2, #1
 801838c:	2100      	movs	r1, #0
 801838e:	2004      	movs	r0, #4
 8018390:	f7ff fef6 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018394:	79ba      	ldrb	r2, [r7, #6]
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	b2db      	uxtb	r3, r3
 801839a:	1ad3      	subs	r3, r2, r3
 801839c:	b2db      	uxtb	r3, r3
 801839e:	330e      	adds	r3, #14
 80183a0:	b2db      	uxtb	r3, r3
 80183a2:	71bb      	strb	r3, [r7, #6]
 80183a4:	e01f      	b.n	80183e6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	2b0a      	cmp	r3, #10
 80183aa:	d10e      	bne.n	80183ca <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80183ac:	2301      	movs	r3, #1
 80183ae:	2201      	movs	r2, #1
 80183b0:	2100      	movs	r1, #0
 80183b2:	2001      	movs	r0, #1
 80183b4:	f7ff fee4 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80183b8:	79ba      	ldrb	r2, [r7, #6]
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	b2db      	uxtb	r3, r3
 80183be:	1ad3      	subs	r3, r2, r3
 80183c0:	b2db      	uxtb	r3, r3
 80183c2:	330d      	adds	r3, #13
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	71bb      	strb	r3, [r7, #6]
 80183c8:	e00d      	b.n	80183e6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80183ca:	2301      	movs	r3, #1
 80183cc:	2201      	movs	r2, #1
 80183ce:	2100      	movs	r1, #0
 80183d0:	2006      	movs	r0, #6
 80183d2:	f7ff fed5 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80183d6:	79ba      	ldrb	r2, [r7, #6]
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	1ad3      	subs	r3, r2, r3
 80183de:	b2db      	uxtb	r3, r3
 80183e0:	330e      	adds	r3, #14
 80183e2:	b2db      	uxtb	r3, r3
 80183e4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80183e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80183ea:	f113 0f11 	cmn.w	r3, #17
 80183ee:	da01      	bge.n	80183f4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80183f0:	23ef      	movs	r3, #239	; 0xef
 80183f2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80183f4:	2118      	movs	r1, #24
 80183f6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80183fa:	f000 fa93 	bl	8018924 <SUBGRF_WriteRegister>
 80183fe:	e067      	b.n	80184d0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8018400:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018404:	f000 faa2 	bl	801894c <SUBGRF_ReadRegister>
 8018408:	4603      	mov	r3, r0
 801840a:	f043 031e 	orr.w	r3, r3, #30
 801840e:	b2db      	uxtb	r3, r3
 8018410:	4619      	mov	r1, r3
 8018412:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018416:	f000 fa85 	bl	8018924 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801841a:	2001      	movs	r0, #1
 801841c:	f7f1 fbff 	bl	8009c1e <RBI_GetRFOMaxPowerConfig>
 8018420:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8018422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018426:	68fa      	ldr	r2, [r7, #12]
 8018428:	429a      	cmp	r2, r3
 801842a:	da01      	bge.n	8018430 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	2b14      	cmp	r3, #20
 8018434:	d10e      	bne.n	8018454 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8018436:	2301      	movs	r3, #1
 8018438:	2200      	movs	r2, #0
 801843a:	2105      	movs	r1, #5
 801843c:	2003      	movs	r0, #3
 801843e:	f7ff fe9f 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018442:	79ba      	ldrb	r2, [r7, #6]
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	b2db      	uxtb	r3, r3
 8018448:	1ad3      	subs	r3, r2, r3
 801844a:	b2db      	uxtb	r3, r3
 801844c:	3316      	adds	r3, #22
 801844e:	b2db      	uxtb	r3, r3
 8018450:	71bb      	strb	r3, [r7, #6]
 8018452:	e031      	b.n	80184b8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	2b11      	cmp	r3, #17
 8018458:	d10e      	bne.n	8018478 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801845a:	2301      	movs	r3, #1
 801845c:	2200      	movs	r2, #0
 801845e:	2103      	movs	r1, #3
 8018460:	2002      	movs	r0, #2
 8018462:	f7ff fe8d 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018466:	79ba      	ldrb	r2, [r7, #6]
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	b2db      	uxtb	r3, r3
 801846c:	1ad3      	subs	r3, r2, r3
 801846e:	b2db      	uxtb	r3, r3
 8018470:	3316      	adds	r3, #22
 8018472:	b2db      	uxtb	r3, r3
 8018474:	71bb      	strb	r3, [r7, #6]
 8018476:	e01f      	b.n	80184b8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2b0e      	cmp	r3, #14
 801847c:	d10e      	bne.n	801849c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801847e:	2301      	movs	r3, #1
 8018480:	2200      	movs	r2, #0
 8018482:	2102      	movs	r1, #2
 8018484:	2002      	movs	r0, #2
 8018486:	f7ff fe7b 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801848a:	79ba      	ldrb	r2, [r7, #6]
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	b2db      	uxtb	r3, r3
 8018490:	1ad3      	subs	r3, r2, r3
 8018492:	b2db      	uxtb	r3, r3
 8018494:	330e      	adds	r3, #14
 8018496:	b2db      	uxtb	r3, r3
 8018498:	71bb      	strb	r3, [r7, #6]
 801849a:	e00d      	b.n	80184b8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801849c:	2301      	movs	r3, #1
 801849e:	2200      	movs	r2, #0
 80184a0:	2107      	movs	r1, #7
 80184a2:	2004      	movs	r0, #4
 80184a4:	f7ff fe6c 	bl	8018180 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80184a8:	79ba      	ldrb	r2, [r7, #6]
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	b2db      	uxtb	r3, r3
 80184ae:	1ad3      	subs	r3, r2, r3
 80184b0:	b2db      	uxtb	r3, r3
 80184b2:	3316      	adds	r3, #22
 80184b4:	b2db      	uxtb	r3, r3
 80184b6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80184b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184bc:	f113 0f09 	cmn.w	r3, #9
 80184c0:	da01      	bge.n	80184c6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80184c2:	23f7      	movs	r3, #247	; 0xf7
 80184c4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80184c6:	2138      	movs	r1, #56	; 0x38
 80184c8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80184cc:	f000 fa2a 	bl	8018924 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80184d0:	79bb      	ldrb	r3, [r7, #6]
 80184d2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80184d4:	797b      	ldrb	r3, [r7, #5]
 80184d6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80184d8:	f107 0308 	add.w	r3, r7, #8
 80184dc:	2202      	movs	r2, #2
 80184de:	4619      	mov	r1, r3
 80184e0:	208e      	movs	r0, #142	; 0x8e
 80184e2:	f000 facf 	bl	8018a84 <SUBGRF_WriteCommand>
}
 80184e6:	bf00      	nop
 80184e8:	3710      	adds	r7, #16
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd80      	pop	{r7, pc}
	...

080184f0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80184f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80184f4:	b086      	sub	sp, #24
 80184f6:	af00      	add	r7, sp, #0
 80184f8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80184fa:	2300      	movs	r3, #0
 80184fc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80184fe:	4a61      	ldr	r2, [pc, #388]	; (8018684 <SUBGRF_SetModulationParams+0x194>)
 8018500:	f107 0308 	add.w	r3, r7, #8
 8018504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018508:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	781a      	ldrb	r2, [r3, #0]
 8018510:	4b5d      	ldr	r3, [pc, #372]	; (8018688 <SUBGRF_SetModulationParams+0x198>)
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	429a      	cmp	r2, r3
 8018516:	d004      	beq.n	8018522 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	4618      	mov	r0, r3
 801851e:	f7ff fef3 	bl	8018308 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	2b03      	cmp	r3, #3
 8018528:	f200 80a5 	bhi.w	8018676 <SUBGRF_SetModulationParams+0x186>
 801852c:	a201      	add	r2, pc, #4	; (adr r2, 8018534 <SUBGRF_SetModulationParams+0x44>)
 801852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018532:	bf00      	nop
 8018534:	08018545 	.word	0x08018545
 8018538:	08018605 	.word	0x08018605
 801853c:	080185c7 	.word	0x080185c7
 8018540:	08018633 	.word	0x08018633
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018544:	2308      	movs	r3, #8
 8018546:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	685b      	ldr	r3, [r3, #4]
 801854c:	4a4f      	ldr	r2, [pc, #316]	; (801868c <SUBGRF_SetModulationParams+0x19c>)
 801854e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018552:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	0c1b      	lsrs	r3, r3, #16
 8018558:	b2db      	uxtb	r3, r3
 801855a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	0a1b      	lsrs	r3, r3, #8
 8018560:	b2db      	uxtb	r3, r3
 8018562:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018564:	697b      	ldr	r3, [r7, #20]
 8018566:	b2db      	uxtb	r3, r3
 8018568:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	7b1b      	ldrb	r3, [r3, #12]
 801856e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	7b5b      	ldrb	r3, [r3, #13]
 8018574:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	689b      	ldr	r3, [r3, #8]
 801857a:	2200      	movs	r2, #0
 801857c:	461c      	mov	r4, r3
 801857e:	4615      	mov	r5, r2
 8018580:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018584:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018588:	4a41      	ldr	r2, [pc, #260]	; (8018690 <SUBGRF_SetModulationParams+0x1a0>)
 801858a:	f04f 0300 	mov.w	r3, #0
 801858e:	4640      	mov	r0, r8
 8018590:	4649      	mov	r1, r9
 8018592:	f7e8 f9ed 	bl	8000970 <__aeabi_uldivmod>
 8018596:	4602      	mov	r2, r0
 8018598:	460b      	mov	r3, r1
 801859a:	4613      	mov	r3, r2
 801859c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801859e:	697b      	ldr	r3, [r7, #20]
 80185a0:	0c1b      	lsrs	r3, r3, #16
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80185a6:	697b      	ldr	r3, [r7, #20]
 80185a8:	0a1b      	lsrs	r3, r3, #8
 80185aa:	b2db      	uxtb	r3, r3
 80185ac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80185ae:	697b      	ldr	r3, [r7, #20]
 80185b0:	b2db      	uxtb	r3, r3
 80185b2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80185b4:	7cfb      	ldrb	r3, [r7, #19]
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	f107 0308 	add.w	r3, r7, #8
 80185bc:	4619      	mov	r1, r3
 80185be:	208b      	movs	r0, #139	; 0x8b
 80185c0:	f000 fa60 	bl	8018a84 <SUBGRF_WriteCommand>
        break;
 80185c4:	e058      	b.n	8018678 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80185c6:	2304      	movs	r3, #4
 80185c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	691b      	ldr	r3, [r3, #16]
 80185ce:	4a2f      	ldr	r2, [pc, #188]	; (801868c <SUBGRF_SetModulationParams+0x19c>)
 80185d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80185d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	0c1b      	lsrs	r3, r3, #16
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	0a1b      	lsrs	r3, r3, #8
 80185e2:	b2db      	uxtb	r3, r3
 80185e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	b2db      	uxtb	r3, r3
 80185ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	7d1b      	ldrb	r3, [r3, #20]
 80185f0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80185f2:	7cfb      	ldrb	r3, [r7, #19]
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	f107 0308 	add.w	r3, r7, #8
 80185fa:	4619      	mov	r1, r3
 80185fc:	208b      	movs	r0, #139	; 0x8b
 80185fe:	f000 fa41 	bl	8018a84 <SUBGRF_WriteCommand>
        break;
 8018602:	e039      	b.n	8018678 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8018604:	2304      	movs	r3, #4
 8018606:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	7e1b      	ldrb	r3, [r3, #24]
 801860c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	7e5b      	ldrb	r3, [r3, #25]
 8018612:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	7e9b      	ldrb	r3, [r3, #26]
 8018618:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	7edb      	ldrb	r3, [r3, #27]
 801861e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018620:	7cfb      	ldrb	r3, [r7, #19]
 8018622:	b29a      	uxth	r2, r3
 8018624:	f107 0308 	add.w	r3, r7, #8
 8018628:	4619      	mov	r1, r3
 801862a:	208b      	movs	r0, #139	; 0x8b
 801862c:	f000 fa2a 	bl	8018a84 <SUBGRF_WriteCommand>

        break;
 8018630:	e022      	b.n	8018678 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018632:	2305      	movs	r3, #5
 8018634:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	4a14      	ldr	r2, [pc, #80]	; (801868c <SUBGRF_SetModulationParams+0x19c>)
 801863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018640:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	0c1b      	lsrs	r3, r3, #16
 8018646:	b2db      	uxtb	r3, r3
 8018648:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	0a1b      	lsrs	r3, r3, #8
 801864e:	b2db      	uxtb	r3, r3
 8018650:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	b2db      	uxtb	r3, r3
 8018656:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	7b1b      	ldrb	r3, [r3, #12]
 801865c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	7b5b      	ldrb	r3, [r3, #13]
 8018662:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018664:	7cfb      	ldrb	r3, [r7, #19]
 8018666:	b29a      	uxth	r2, r3
 8018668:	f107 0308 	add.w	r3, r7, #8
 801866c:	4619      	mov	r1, r3
 801866e:	208b      	movs	r0, #139	; 0x8b
 8018670:	f000 fa08 	bl	8018a84 <SUBGRF_WriteCommand>
        break;
 8018674:	e000      	b.n	8018678 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018676:	bf00      	nop
    }
}
 8018678:	bf00      	nop
 801867a:	3718      	adds	r7, #24
 801867c:	46bd      	mov	sp, r7
 801867e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018682:	bf00      	nop
 8018684:	0801b534 	.word	0x0801b534
 8018688:	20001c75 	.word	0x20001c75
 801868c:	3d090000 	.word	0x3d090000
 8018690:	01e84800 	.word	0x01e84800

08018694 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b086      	sub	sp, #24
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801869c:	2300      	movs	r3, #0
 801869e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80186a0:	4a48      	ldr	r2, [pc, #288]	; (80187c4 <SUBGRF_SetPacketParams+0x130>)
 80186a2:	f107 030c 	add.w	r3, r7, #12
 80186a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80186a8:	c303      	stmia	r3!, {r0, r1}
 80186aa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	781a      	ldrb	r2, [r3, #0]
 80186b0:	4b45      	ldr	r3, [pc, #276]	; (80187c8 <SUBGRF_SetPacketParams+0x134>)
 80186b2:	781b      	ldrb	r3, [r3, #0]
 80186b4:	429a      	cmp	r2, r3
 80186b6:	d004      	beq.n	80186c2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	4618      	mov	r0, r3
 80186be:	f7ff fe23 	bl	8018308 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	2b03      	cmp	r3, #3
 80186c8:	d878      	bhi.n	80187bc <SUBGRF_SetPacketParams+0x128>
 80186ca:	a201      	add	r2, pc, #4	; (adr r2, 80186d0 <SUBGRF_SetPacketParams+0x3c>)
 80186cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186d0:	080186e1 	.word	0x080186e1
 80186d4:	08018771 	.word	0x08018771
 80186d8:	08018765 	.word	0x08018765
 80186dc:	080186e1 	.word	0x080186e1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	7a5b      	ldrb	r3, [r3, #9]
 80186e4:	2bf1      	cmp	r3, #241	; 0xf1
 80186e6:	d10a      	bne.n	80186fe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80186e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80186ec:	f7ff faae 	bl	8017c4c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80186f0:	f248 0005 	movw	r0, #32773	; 0x8005
 80186f4:	f7ff faca 	bl	8017c8c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80186f8:	2302      	movs	r3, #2
 80186fa:	75bb      	strb	r3, [r7, #22]
 80186fc:	e011      	b.n	8018722 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	7a5b      	ldrb	r3, [r3, #9]
 8018702:	2bf2      	cmp	r3, #242	; 0xf2
 8018704:	d10a      	bne.n	801871c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018706:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801870a:	f7ff fa9f 	bl	8017c4c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801870e:	f241 0021 	movw	r0, #4129	; 0x1021
 8018712:	f7ff fabb 	bl	8017c8c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018716:	2306      	movs	r3, #6
 8018718:	75bb      	strb	r3, [r7, #22]
 801871a:	e002      	b.n	8018722 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	7a5b      	ldrb	r3, [r3, #9]
 8018720:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018722:	2309      	movs	r3, #9
 8018724:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	885b      	ldrh	r3, [r3, #2]
 801872a:	0a1b      	lsrs	r3, r3, #8
 801872c:	b29b      	uxth	r3, r3
 801872e:	b2db      	uxtb	r3, r3
 8018730:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	885b      	ldrh	r3, [r3, #2]
 8018736:	b2db      	uxtb	r3, r3
 8018738:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	791b      	ldrb	r3, [r3, #4]
 801873e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	795b      	ldrb	r3, [r3, #5]
 8018744:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	799b      	ldrb	r3, [r3, #6]
 801874a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	79db      	ldrb	r3, [r3, #7]
 8018750:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	7a1b      	ldrb	r3, [r3, #8]
 8018756:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018758:	7dbb      	ldrb	r3, [r7, #22]
 801875a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	7a9b      	ldrb	r3, [r3, #10]
 8018760:	753b      	strb	r3, [r7, #20]
        break;
 8018762:	e022      	b.n	80187aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018764:	2301      	movs	r3, #1
 8018766:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	7b1b      	ldrb	r3, [r3, #12]
 801876c:	733b      	strb	r3, [r7, #12]
        break;
 801876e:	e01c      	b.n	80187aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018770:	2306      	movs	r3, #6
 8018772:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	89db      	ldrh	r3, [r3, #14]
 8018778:	0a1b      	lsrs	r3, r3, #8
 801877a:	b29b      	uxth	r3, r3
 801877c:	b2db      	uxtb	r3, r3
 801877e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	89db      	ldrh	r3, [r3, #14]
 8018784:	b2db      	uxtb	r3, r3
 8018786:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	7c1a      	ldrb	r2, [r3, #16]
 801878c:	4b0f      	ldr	r3, [pc, #60]	; (80187cc <SUBGRF_SetPacketParams+0x138>)
 801878e:	4611      	mov	r1, r2
 8018790:	7019      	strb	r1, [r3, #0]
 8018792:	4613      	mov	r3, r2
 8018794:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	7c5b      	ldrb	r3, [r3, #17]
 801879a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	7c9b      	ldrb	r3, [r3, #18]
 80187a0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	7cdb      	ldrb	r3, [r3, #19]
 80187a6:	747b      	strb	r3, [r7, #17]
        break;
 80187a8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80187aa:	7dfb      	ldrb	r3, [r7, #23]
 80187ac:	b29a      	uxth	r2, r3
 80187ae:	f107 030c 	add.w	r3, r7, #12
 80187b2:	4619      	mov	r1, r3
 80187b4:	208c      	movs	r0, #140	; 0x8c
 80187b6:	f000 f965 	bl	8018a84 <SUBGRF_WriteCommand>
 80187ba:	e000      	b.n	80187be <SUBGRF_SetPacketParams+0x12a>
        return;
 80187bc:	bf00      	nop
}
 80187be:	3718      	adds	r7, #24
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd80      	pop	{r7, pc}
 80187c4:	0801b53c 	.word	0x0801b53c
 80187c8:	20001c75 	.word	0x20001c75
 80187cc:	20001c76 	.word	0x20001c76

080187d0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b084      	sub	sp, #16
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	4603      	mov	r3, r0
 80187d8:	460a      	mov	r2, r1
 80187da:	71fb      	strb	r3, [r7, #7]
 80187dc:	4613      	mov	r3, r2
 80187de:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80187e0:	79fb      	ldrb	r3, [r7, #7]
 80187e2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80187e4:	79bb      	ldrb	r3, [r7, #6]
 80187e6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80187e8:	f107 030c 	add.w	r3, r7, #12
 80187ec:	2202      	movs	r2, #2
 80187ee:	4619      	mov	r1, r3
 80187f0:	208f      	movs	r0, #143	; 0x8f
 80187f2:	f000 f947 	bl	8018a84 <SUBGRF_WriteCommand>
}
 80187f6:	bf00      	nop
 80187f8:	3710      	adds	r7, #16
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bd80      	pop	{r7, pc}

080187fe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80187fe:	b580      	push	{r7, lr}
 8018800:	b082      	sub	sp, #8
 8018802:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018804:	2300      	movs	r3, #0
 8018806:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018808:	1d3b      	adds	r3, r7, #4
 801880a:	2201      	movs	r2, #1
 801880c:	4619      	mov	r1, r3
 801880e:	2015      	movs	r0, #21
 8018810:	f000 f95a 	bl	8018ac8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018814:	793b      	ldrb	r3, [r7, #4]
 8018816:	425b      	negs	r3, r3
 8018818:	105b      	asrs	r3, r3, #1
 801881a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801881c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018820:	4618      	mov	r0, r3
 8018822:	3708      	adds	r7, #8
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}

08018828 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
 8018830:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018832:	f107 030c 	add.w	r3, r7, #12
 8018836:	2202      	movs	r2, #2
 8018838:	4619      	mov	r1, r3
 801883a:	2013      	movs	r0, #19
 801883c:	f000 f944 	bl	8018ac8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018840:	f7ff fd7e 	bl	8018340 <SUBGRF_GetPacketType>
 8018844:	4603      	mov	r3, r0
 8018846:	2b01      	cmp	r3, #1
 8018848:	d10d      	bne.n	8018866 <SUBGRF_GetRxBufferStatus+0x3e>
 801884a:	4b0c      	ldr	r3, [pc, #48]	; (801887c <SUBGRF_GetRxBufferStatus+0x54>)
 801884c:	781b      	ldrb	r3, [r3, #0]
 801884e:	b2db      	uxtb	r3, r3
 8018850:	2b01      	cmp	r3, #1
 8018852:	d108      	bne.n	8018866 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018854:	f240 7002 	movw	r0, #1794	; 0x702
 8018858:	f000 f878 	bl	801894c <SUBGRF_ReadRegister>
 801885c:	4603      	mov	r3, r0
 801885e:	461a      	mov	r2, r3
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	701a      	strb	r2, [r3, #0]
 8018864:	e002      	b.n	801886c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018866:	7b3a      	ldrb	r2, [r7, #12]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801886c:	7b7a      	ldrb	r2, [r7, #13]
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	701a      	strb	r2, [r3, #0]
}
 8018872:	bf00      	nop
 8018874:	3710      	adds	r7, #16
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	20001c76 	.word	0x20001c76

08018880 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b084      	sub	sp, #16
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018888:	f107 030c 	add.w	r3, r7, #12
 801888c:	2203      	movs	r2, #3
 801888e:	4619      	mov	r1, r3
 8018890:	2014      	movs	r0, #20
 8018892:	f000 f919 	bl	8018ac8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018896:	f7ff fd53 	bl	8018340 <SUBGRF_GetPacketType>
 801889a:	4603      	mov	r3, r0
 801889c:	461a      	mov	r2, r3
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d002      	beq.n	80188b0 <SUBGRF_GetPacketStatus+0x30>
 80188aa:	2b01      	cmp	r3, #1
 80188ac:	d013      	beq.n	80188d6 <SUBGRF_GetPacketStatus+0x56>
 80188ae:	e02a      	b.n	8018906 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80188b0:	7b3a      	ldrb	r2, [r7, #12]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80188b6:	7b7b      	ldrb	r3, [r7, #13]
 80188b8:	425b      	negs	r3, r3
 80188ba:	105b      	asrs	r3, r3, #1
 80188bc:	b25a      	sxtb	r2, r3
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80188c2:	7bbb      	ldrb	r3, [r7, #14]
 80188c4:	425b      	negs	r3, r3
 80188c6:	105b      	asrs	r3, r3, #1
 80188c8:	b25a      	sxtb	r2, r3
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2200      	movs	r2, #0
 80188d2:	609a      	str	r2, [r3, #8]
            break;
 80188d4:	e020      	b.n	8018918 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80188d6:	7b3b      	ldrb	r3, [r7, #12]
 80188d8:	425b      	negs	r3, r3
 80188da:	105b      	asrs	r3, r3, #1
 80188dc:	b25a      	sxtb	r2, r3
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80188e2:	7b7b      	ldrb	r3, [r7, #13]
 80188e4:	b25b      	sxtb	r3, r3
 80188e6:	3302      	adds	r3, #2
 80188e8:	109b      	asrs	r3, r3, #2
 80188ea:	b25a      	sxtb	r2, r3
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80188f0:	7bbb      	ldrb	r3, [r7, #14]
 80188f2:	425b      	negs	r3, r3
 80188f4:	105b      	asrs	r3, r3, #1
 80188f6:	b25a      	sxtb	r2, r3
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80188fc:	4b08      	ldr	r3, [pc, #32]	; (8018920 <SUBGRF_GetPacketStatus+0xa0>)
 80188fe:	681a      	ldr	r2, [r3, #0]
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	611a      	str	r2, [r3, #16]
            break;
 8018904:	e008      	b.n	8018918 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8018906:	2214      	movs	r2, #20
 8018908:	2100      	movs	r1, #0
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f000 fbf3 	bl	80190f6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	220f      	movs	r2, #15
 8018914:	701a      	strb	r2, [r3, #0]
            break;
 8018916:	bf00      	nop
    }
}
 8018918:	bf00      	nop
 801891a:	3710      	adds	r7, #16
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}
 8018920:	20001c78 	.word	0x20001c78

08018924 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	4603      	mov	r3, r0
 801892c:	460a      	mov	r2, r1
 801892e:	80fb      	strh	r3, [r7, #6]
 8018930:	4613      	mov	r3, r2
 8018932:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018934:	1d7a      	adds	r2, r7, #5
 8018936:	88f9      	ldrh	r1, [r7, #6]
 8018938:	2301      	movs	r3, #1
 801893a:	4803      	ldr	r0, [pc, #12]	; (8018948 <SUBGRF_WriteRegister+0x24>)
 801893c:	f7ee f92c 	bl	8006b98 <HAL_SUBGHZ_WriteRegisters>
}
 8018940:	bf00      	nop
 8018942:	3708      	adds	r7, #8
 8018944:	46bd      	mov	sp, r7
 8018946:	bd80      	pop	{r7, pc}
 8018948:	20000268 	.word	0x20000268

0801894c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b084      	sub	sp, #16
 8018950:	af00      	add	r7, sp, #0
 8018952:	4603      	mov	r3, r0
 8018954:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8018956:	f107 020f 	add.w	r2, r7, #15
 801895a:	88f9      	ldrh	r1, [r7, #6]
 801895c:	2301      	movs	r3, #1
 801895e:	4804      	ldr	r0, [pc, #16]	; (8018970 <SUBGRF_ReadRegister+0x24>)
 8018960:	f7ee f979 	bl	8006c56 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018964:	7bfb      	ldrb	r3, [r7, #15]
}
 8018966:	4618      	mov	r0, r3
 8018968:	3710      	adds	r7, #16
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}
 801896e:	bf00      	nop
 8018970:	20000268 	.word	0x20000268

08018974 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b086      	sub	sp, #24
 8018978:	af00      	add	r7, sp, #0
 801897a:	4603      	mov	r3, r0
 801897c:	6039      	str	r1, [r7, #0]
 801897e:	80fb      	strh	r3, [r7, #6]
 8018980:	4613      	mov	r3, r2
 8018982:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018984:	f3ef 8310 	mrs	r3, PRIMASK
 8018988:	60fb      	str	r3, [r7, #12]
  return(result);
 801898a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801898c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801898e:	b672      	cpsid	i
}
 8018990:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8018992:	88bb      	ldrh	r3, [r7, #4]
 8018994:	88f9      	ldrh	r1, [r7, #6]
 8018996:	683a      	ldr	r2, [r7, #0]
 8018998:	4806      	ldr	r0, [pc, #24]	; (80189b4 <SUBGRF_WriteRegisters+0x40>)
 801899a:	f7ee f8fd 	bl	8006b98 <HAL_SUBGHZ_WriteRegisters>
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189a2:	693b      	ldr	r3, [r7, #16]
 80189a4:	f383 8810 	msr	PRIMASK, r3
}
 80189a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80189aa:	bf00      	nop
 80189ac:	3718      	adds	r7, #24
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	20000268 	.word	0x20000268

080189b8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	4603      	mov	r3, r0
 80189c0:	6039      	str	r1, [r7, #0]
 80189c2:	80fb      	strh	r3, [r7, #6]
 80189c4:	4613      	mov	r3, r2
 80189c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189c8:	f3ef 8310 	mrs	r3, PRIMASK
 80189cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80189ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80189d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80189d2:	b672      	cpsid	i
}
 80189d4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80189d6:	88bb      	ldrh	r3, [r7, #4]
 80189d8:	88f9      	ldrh	r1, [r7, #6]
 80189da:	683a      	ldr	r2, [r7, #0]
 80189dc:	4806      	ldr	r0, [pc, #24]	; (80189f8 <SUBGRF_ReadRegisters+0x40>)
 80189de:	f7ee f93a 	bl	8006c56 <HAL_SUBGHZ_ReadRegisters>
 80189e2:	697b      	ldr	r3, [r7, #20]
 80189e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	f383 8810 	msr	PRIMASK, r3
}
 80189ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80189ee:	bf00      	nop
 80189f0:	3718      	adds	r7, #24
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	20000268 	.word	0x20000268

080189fc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b086      	sub	sp, #24
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	4603      	mov	r3, r0
 8018a04:	6039      	str	r1, [r7, #0]
 8018a06:	71fb      	strb	r3, [r7, #7]
 8018a08:	4613      	mov	r3, r2
 8018a0a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8018a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a16:	b672      	cpsid	i
}
 8018a18:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8018a1a:	79bb      	ldrb	r3, [r7, #6]
 8018a1c:	b29b      	uxth	r3, r3
 8018a1e:	79f9      	ldrb	r1, [r7, #7]
 8018a20:	683a      	ldr	r2, [r7, #0]
 8018a22:	4806      	ldr	r0, [pc, #24]	; (8018a3c <SUBGRF_WriteBuffer+0x40>)
 8018a24:	f7ee fa2b 	bl	8006e7e <HAL_SUBGHZ_WriteBuffer>
 8018a28:	697b      	ldr	r3, [r7, #20]
 8018a2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	f383 8810 	msr	PRIMASK, r3
}
 8018a32:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a34:	bf00      	nop
 8018a36:	3718      	adds	r7, #24
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	20000268 	.word	0x20000268

08018a40 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b086      	sub	sp, #24
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	4603      	mov	r3, r0
 8018a48:	6039      	str	r1, [r7, #0]
 8018a4a:	71fb      	strb	r3, [r7, #7]
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a50:	f3ef 8310 	mrs	r3, PRIMASK
 8018a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a56:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a5a:	b672      	cpsid	i
}
 8018a5c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8018a5e:	79bb      	ldrb	r3, [r7, #6]
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	79f9      	ldrb	r1, [r7, #7]
 8018a64:	683a      	ldr	r2, [r7, #0]
 8018a66:	4806      	ldr	r0, [pc, #24]	; (8018a80 <SUBGRF_ReadBuffer+0x40>)
 8018a68:	f7ee fa5c 	bl	8006f24 <HAL_SUBGHZ_ReadBuffer>
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a70:	693b      	ldr	r3, [r7, #16]
 8018a72:	f383 8810 	msr	PRIMASK, r3
}
 8018a76:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a78:	bf00      	nop
 8018a7a:	3718      	adds	r7, #24
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	20000268 	.word	0x20000268

08018a84 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b086      	sub	sp, #24
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	6039      	str	r1, [r7, #0]
 8018a8e:	71fb      	strb	r3, [r7, #7]
 8018a90:	4613      	mov	r3, r2
 8018a92:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a94:	f3ef 8310 	mrs	r3, PRIMASK
 8018a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a9a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a9e:	b672      	cpsid	i
}
 8018aa0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8018aa2:	88bb      	ldrh	r3, [r7, #4]
 8018aa4:	79f9      	ldrb	r1, [r7, #7]
 8018aa6:	683a      	ldr	r2, [r7, #0]
 8018aa8:	4806      	ldr	r0, [pc, #24]	; (8018ac4 <SUBGRF_WriteCommand+0x40>)
 8018aaa:	f7ee f935 	bl	8006d18 <HAL_SUBGHZ_ExecSetCmd>
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ab2:	693b      	ldr	r3, [r7, #16]
 8018ab4:	f383 8810 	msr	PRIMASK, r3
}
 8018ab8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018aba:	bf00      	nop
 8018abc:	3718      	adds	r7, #24
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	20000268 	.word	0x20000268

08018ac8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b086      	sub	sp, #24
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	4603      	mov	r3, r0
 8018ad0:	6039      	str	r1, [r7, #0]
 8018ad2:	71fb      	strb	r3, [r7, #7]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8018adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ade:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018ae0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018ae2:	b672      	cpsid	i
}
 8018ae4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8018ae6:	88bb      	ldrh	r3, [r7, #4]
 8018ae8:	79f9      	ldrb	r1, [r7, #7]
 8018aea:	683a      	ldr	r2, [r7, #0]
 8018aec:	4806      	ldr	r0, [pc, #24]	; (8018b08 <SUBGRF_ReadCommand+0x40>)
 8018aee:	f7ee f972 	bl	8006dd6 <HAL_SUBGHZ_ExecGetCmd>
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	f383 8810 	msr	PRIMASK, r3
}
 8018afc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018afe:	bf00      	nop
 8018b00:	3718      	adds	r7, #24
 8018b02:	46bd      	mov	sp, r7
 8018b04:	bd80      	pop	{r7, pc}
 8018b06:	bf00      	nop
 8018b08:	20000268 	.word	0x20000268

08018b0c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b084      	sub	sp, #16
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	4603      	mov	r3, r0
 8018b14:	460a      	mov	r2, r1
 8018b16:	71fb      	strb	r3, [r7, #7]
 8018b18:	4613      	mov	r3, r2
 8018b1a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8018b20:	79bb      	ldrb	r3, [r7, #6]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d10d      	bne.n	8018b42 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8018b26:	79fb      	ldrb	r3, [r7, #7]
 8018b28:	2b01      	cmp	r3, #1
 8018b2a:	d104      	bne.n	8018b36 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8018b2c:	2302      	movs	r3, #2
 8018b2e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8018b30:	2004      	movs	r0, #4
 8018b32:	f000 f8df 	bl	8018cf4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8018b36:	79fb      	ldrb	r3, [r7, #7]
 8018b38:	2b02      	cmp	r3, #2
 8018b3a:	d107      	bne.n	8018b4c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8018b3c:	2303      	movs	r3, #3
 8018b3e:	73fb      	strb	r3, [r7, #15]
 8018b40:	e004      	b.n	8018b4c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8018b42:	79bb      	ldrb	r3, [r7, #6]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d101      	bne.n	8018b4c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8018b48:	2301      	movs	r3, #1
 8018b4a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8018b4c:	7bfb      	ldrb	r3, [r7, #15]
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7f0 fff0 	bl	8009b34 <RBI_ConfigRFSwitch>
}
 8018b54:	bf00      	nop
 8018b56:	3710      	adds	r7, #16
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}

08018b5c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b084      	sub	sp, #16
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	4603      	mov	r3, r0
 8018b64:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8018b66:	2301      	movs	r3, #1
 8018b68:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8018b6a:	f7f1 f837 	bl	8009bdc <RBI_GetTxConfig>
 8018b6e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	2b02      	cmp	r3, #2
 8018b74:	d016      	beq.n	8018ba4 <SUBGRF_SetRfTxPower+0x48>
 8018b76:	68bb      	ldr	r3, [r7, #8]
 8018b78:	2b02      	cmp	r3, #2
 8018b7a:	dc16      	bgt.n	8018baa <SUBGRF_SetRfTxPower+0x4e>
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d003      	beq.n	8018b8a <SUBGRF_SetRfTxPower+0x2e>
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	2b01      	cmp	r3, #1
 8018b86:	d00a      	beq.n	8018b9e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8018b88:	e00f      	b.n	8018baa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8018b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b8e:	2b0f      	cmp	r3, #15
 8018b90:	dd02      	ble.n	8018b98 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8018b92:	2302      	movs	r3, #2
 8018b94:	73fb      	strb	r3, [r7, #15]
            break;
 8018b96:	e009      	b.n	8018bac <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8018b98:	2301      	movs	r3, #1
 8018b9a:	73fb      	strb	r3, [r7, #15]
            break;
 8018b9c:	e006      	b.n	8018bac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8018b9e:	2301      	movs	r3, #1
 8018ba0:	73fb      	strb	r3, [r7, #15]
            break;
 8018ba2:	e003      	b.n	8018bac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8018ba4:	2302      	movs	r3, #2
 8018ba6:	73fb      	strb	r3, [r7, #15]
            break;
 8018ba8:	e000      	b.n	8018bac <SUBGRF_SetRfTxPower+0x50>
            break;
 8018baa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8018bac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8018bb0:	7bfb      	ldrb	r3, [r7, #15]
 8018bb2:	2202      	movs	r2, #2
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7ff fbcd 	bl	8018354 <SUBGRF_SetTxParams>

    return paSelect;
 8018bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3710      	adds	r7, #16
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}

08018bc4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8018bc4:	b480      	push	{r7}
 8018bc6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8018bc8:	2301      	movs	r3, #1
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bc80      	pop	{r7}
 8018bd0:	4770      	bx	lr
	...

08018bd4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b082      	sub	sp, #8
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8018bdc:	4b03      	ldr	r3, [pc, #12]	; (8018bec <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	2001      	movs	r0, #1
 8018be2:	4798      	blx	r3
}
 8018be4:	bf00      	nop
 8018be6:	3708      	adds	r7, #8
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	20001c80 	.word	0x20001c80

08018bf0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b082      	sub	sp, #8
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8018bf8:	4b03      	ldr	r3, [pc, #12]	; (8018c08 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	2002      	movs	r0, #2
 8018bfe:	4798      	blx	r3
}
 8018c00:	bf00      	nop
 8018c02:	3708      	adds	r7, #8
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}
 8018c08:	20001c80 	.word	0x20001c80

08018c0c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8018c14:	4b03      	ldr	r3, [pc, #12]	; (8018c24 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2040      	movs	r0, #64	; 0x40
 8018c1a:	4798      	blx	r3
}
 8018c1c:	bf00      	nop
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}
 8018c24:	20001c80 	.word	0x20001c80

08018c28 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	460b      	mov	r3, r1
 8018c32:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8018c34:	78fb      	ldrb	r3, [r7, #3]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d002      	beq.n	8018c40 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8018c3a:	2b01      	cmp	r3, #1
 8018c3c:	d005      	beq.n	8018c4a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8018c3e:	e00a      	b.n	8018c56 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8018c40:	4b07      	ldr	r3, [pc, #28]	; (8018c60 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	2080      	movs	r0, #128	; 0x80
 8018c46:	4798      	blx	r3
            break;
 8018c48:	e005      	b.n	8018c56 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8018c4a:	4b05      	ldr	r3, [pc, #20]	; (8018c60 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018c52:	4798      	blx	r3
            break;
 8018c54:	bf00      	nop
    }
}
 8018c56:	bf00      	nop
 8018c58:	3708      	adds	r7, #8
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	20001c80 	.word	0x20001c80

08018c64 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8018c6c:	4b04      	ldr	r3, [pc, #16]	; (8018c80 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018c74:	4798      	blx	r3
}
 8018c76:	bf00      	nop
 8018c78:	3708      	adds	r7, #8
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	20001c80 	.word	0x20001c80

08018c84 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8018c8c:	4b03      	ldr	r3, [pc, #12]	; (8018c9c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	2020      	movs	r0, #32
 8018c92:	4798      	blx	r3
}
 8018c94:	bf00      	nop
 8018c96:	3708      	adds	r7, #8
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	20001c80 	.word	0x20001c80

08018ca0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8018ca8:	4b03      	ldr	r3, [pc, #12]	; (8018cb8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	2004      	movs	r0, #4
 8018cae:	4798      	blx	r3
}
 8018cb0:	bf00      	nop
 8018cb2:	3708      	adds	r7, #8
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	20001c80 	.word	0x20001c80

08018cbc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8018cc4:	4b03      	ldr	r3, [pc, #12]	; (8018cd4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	2008      	movs	r0, #8
 8018cca:	4798      	blx	r3
}
 8018ccc:	bf00      	nop
 8018cce:	3708      	adds	r7, #8
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}
 8018cd4:	20001c80 	.word	0x20001c80

08018cd8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8018ce0:	4b03      	ldr	r3, [pc, #12]	; (8018cf0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	2010      	movs	r0, #16
 8018ce6:	4798      	blx	r3
}
 8018ce8:	bf00      	nop
 8018cea:	3708      	adds	r7, #8
 8018cec:	46bd      	mov	sp, r7
 8018cee:	bd80      	pop	{r7, pc}
 8018cf0:	20001c80 	.word	0x20001c80

08018cf4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b084      	sub	sp, #16
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8018cfe:	f7f0 ff83 	bl	8009c08 <RBI_IsDCDC>
 8018d02:	4603      	mov	r3, r0
 8018d04:	2b01      	cmp	r3, #1
 8018d06:	d112      	bne.n	8018d2e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8018d08:	f640 1023 	movw	r0, #2339	; 0x923
 8018d0c:	f7ff fe1e 	bl	801894c <SUBGRF_ReadRegister>
 8018d10:	4603      	mov	r3, r0
 8018d12:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8018d14:	7bfb      	ldrb	r3, [r7, #15]
 8018d16:	f023 0306 	bic.w	r3, r3, #6
 8018d1a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8018d1c:	7bfa      	ldrb	r2, [r7, #15]
 8018d1e:	79fb      	ldrb	r3, [r7, #7]
 8018d20:	4313      	orrs	r3, r2
 8018d22:	b2db      	uxtb	r3, r3
 8018d24:	4619      	mov	r1, r3
 8018d26:	f640 1023 	movw	r0, #2339	; 0x923
 8018d2a:	f7ff fdfb 	bl	8018924 <SUBGRF_WriteRegister>
  }
}
 8018d2e:	bf00      	nop
 8018d30:	3710      	adds	r7, #16
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
	...

08018d38 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b085      	sub	sp, #20
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d101      	bne.n	8018d4a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8018d46:	231f      	movs	r3, #31
 8018d48:	e016      	b.n	8018d78 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	73fb      	strb	r3, [r7, #15]
 8018d4e:	e00f      	b.n	8018d70 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8018d50:	7bfb      	ldrb	r3, [r7, #15]
 8018d52:	4a0c      	ldr	r2, [pc, #48]	; (8018d84 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018d58:	687a      	ldr	r2, [r7, #4]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d205      	bcs.n	8018d6a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8018d5e:	7bfb      	ldrb	r3, [r7, #15]
 8018d60:	4a08      	ldr	r2, [pc, #32]	; (8018d84 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	4413      	add	r3, r2
 8018d66:	791b      	ldrb	r3, [r3, #4]
 8018d68:	e006      	b.n	8018d78 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018d6a:	7bfb      	ldrb	r3, [r7, #15]
 8018d6c:	3301      	adds	r3, #1
 8018d6e:	73fb      	strb	r3, [r7, #15]
 8018d70:	7bfb      	ldrb	r3, [r7, #15]
 8018d72:	2b15      	cmp	r3, #21
 8018d74:	d9ec      	bls.n	8018d50 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8018d76:	e7fe      	b.n	8018d76 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8018d78:	4618      	mov	r0, r3
 8018d7a:	3714      	adds	r7, #20
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bc80      	pop	{r7}
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop
 8018d84:	0801baa0 	.word	0x0801baa0

08018d88 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b08a      	sub	sp, #40	; 0x28
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
 8018d90:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8018d92:	4b35      	ldr	r3, [pc, #212]	; (8018e68 <SUBGRF_GetCFO+0xe0>)
 8018d94:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8018d96:	f640 0007 	movw	r0, #2055	; 0x807
 8018d9a:	f7ff fdd7 	bl	801894c <SUBGRF_ReadRegister>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8018da2:	7ffb      	ldrb	r3, [r7, #31]
 8018da4:	08db      	lsrs	r3, r3, #3
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	f003 0303 	and.w	r3, r3, #3
 8018dac:	3328      	adds	r3, #40	; 0x28
 8018dae:	443b      	add	r3, r7
 8018db0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8018db4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8018db6:	7ffb      	ldrb	r3, [r7, #31]
 8018db8:	f003 0307 	and.w	r3, r3, #7
 8018dbc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8018dbe:	7fba      	ldrb	r2, [r7, #30]
 8018dc0:	7f7b      	ldrb	r3, [r7, #29]
 8018dc2:	3b01      	subs	r3, #1
 8018dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8018dc8:	461a      	mov	r2, r3
 8018dca:	4b28      	ldr	r3, [pc, #160]	; (8018e6c <SUBGRF_GetCFO+0xe4>)
 8018dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018dd0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8018dd2:	69ba      	ldr	r2, [r7, #24]
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8018dda:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8018ddc:	2301      	movs	r3, #1
 8018dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8018de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018de6:	697a      	ldr	r2, [r7, #20]
 8018de8:	fb02 f303 	mul.w	r3, r2, r3
 8018dec:	2b07      	cmp	r3, #7
 8018dee:	d802      	bhi.n	8018df6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8018df0:	2302      	movs	r3, #2
 8018df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8018df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dfa:	697a      	ldr	r2, [r7, #20]
 8018dfc:	fb02 f303 	mul.w	r3, r2, r3
 8018e00:	2b03      	cmp	r3, #3
 8018e02:	d802      	bhi.n	8018e0a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8018e04:	2304      	movs	r3, #4
 8018e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8018e0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	fb02 f303 	mul.w	r3, r2, r3
 8018e14:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8018e16:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8018e1a:	f7ff fd97 	bl	801894c <SUBGRF_ReadRegister>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	021b      	lsls	r3, r3, #8
 8018e22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018e26:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8018e28:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8018e2c:	f7ff fd8e 	bl	801894c <SUBGRF_ReadRegister>
 8018e30:	4603      	mov	r3, r0
 8018e32:	461a      	mov	r2, r3
 8018e34:	6a3b      	ldr	r3, [r7, #32]
 8018e36:	4313      	orrs	r3, r2
 8018e38:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8018e3a:	6a3b      	ldr	r3, [r7, #32]
 8018e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d005      	beq.n	8018e50 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8018e44:	6a3b      	ldr	r3, [r7, #32]
 8018e46:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8018e4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8018e4e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8018e50:	693b      	ldr	r3, [r7, #16]
 8018e52:	095b      	lsrs	r3, r3, #5
 8018e54:	6a3a      	ldr	r2, [r7, #32]
 8018e56:	fb02 f303 	mul.w	r3, r2, r3
 8018e5a:	11da      	asrs	r2, r3, #7
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	601a      	str	r2, [r3, #0]
}
 8018e60:	bf00      	nop
 8018e62:	3728      	adds	r7, #40	; 0x28
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}
 8018e68:	0c0a0804 	.word	0x0c0a0804
 8018e6c:	01e84800 	.word	0x01e84800

08018e70 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8018e70:	b480      	push	{r7}
 8018e72:	b087      	sub	sp, #28
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	4603      	mov	r3, r0
 8018e78:	60b9      	str	r1, [r7, #8]
 8018e7a:	607a      	str	r2, [r7, #4]
 8018e7c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8018e82:	f04f 33ff 	mov.w	r3, #4294967295
 8018e86:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8018e88:	697b      	ldr	r3, [r7, #20]
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	371c      	adds	r7, #28
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bc80      	pop	{r7}
 8018e92:	4770      	bx	lr

08018e94 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8018e94:	b480      	push	{r7}
 8018e96:	b087      	sub	sp, #28
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	60b9      	str	r1, [r7, #8]
 8018e9e:	607a      	str	r2, [r7, #4]
 8018ea0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8018ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8018eaa:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8018eac:	697b      	ldr	r3, [r7, #20]
}
 8018eae:	4618      	mov	r0, r3
 8018eb0:	371c      	adds	r7, #28
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bc80      	pop	{r7}
 8018eb6:	4770      	bx	lr

08018eb8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b085      	sub	sp, #20
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	60f8      	str	r0, [r7, #12]
 8018ec0:	60b9      	str	r1, [r7, #8]
 8018ec2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8018ec4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	3714      	adds	r7, #20
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bc80      	pop	{r7}
 8018ed0:	4770      	bx	lr

08018ed2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8018ed2:	b480      	push	{r7}
 8018ed4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8018ed6:	bf00      	nop
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bc80      	pop	{r7}
 8018edc:	4770      	bx	lr

08018ede <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8018ede:	b480      	push	{r7}
 8018ee0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8018ee2:	2300      	movs	r3, #0
#endif
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bc80      	pop	{r7}
 8018eea:	4770      	bx	lr

08018eec <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8018eec:	b480      	push	{r7}
 8018eee:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8018ef0:	2300      	movs	r3, #0
#endif
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bc80      	pop	{r7}
 8018ef8:	4770      	bx	lr

08018efa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8018efa:	b480      	push	{r7}
 8018efc:	b083      	sub	sp, #12
 8018efe:	af00      	add	r7, sp, #0
 8018f00:	4603      	mov	r3, r0
 8018f02:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8018f04:	bf00      	nop
 8018f06:	370c      	adds	r7, #12
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bc80      	pop	{r7}
 8018f0c:	4770      	bx	lr

08018f0e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8018f0e:	b480      	push	{r7}
 8018f10:	b087      	sub	sp, #28
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	60f8      	str	r0, [r7, #12]
 8018f16:	460b      	mov	r3, r1
 8018f18:	607a      	str	r2, [r7, #4]
 8018f1a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8018f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f20:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8018f22:	697b      	ldr	r3, [r7, #20]
}
 8018f24:	4618      	mov	r0, r3
 8018f26:	371c      	adds	r7, #28
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bc80      	pop	{r7}
 8018f2c:	4770      	bx	lr

08018f2e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8018f2e:	b480      	push	{r7}
 8018f30:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8018f32:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bc80      	pop	{r7}
 8018f3c:	4770      	bx	lr

08018f3e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8018f3e:	b480      	push	{r7}
 8018f40:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8018f42:	bf00      	nop
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bc80      	pop	{r7}
 8018f48:	4770      	bx	lr

08018f4a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8018f4a:	b480      	push	{r7}
 8018f4c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8018f4e:	bf00      	nop
 8018f50:	46bd      	mov	sp, r7
 8018f52:	bc80      	pop	{r7}
 8018f54:	4770      	bx	lr

08018f56 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8018f56:	b480      	push	{r7}
 8018f58:	b083      	sub	sp, #12
 8018f5a:	af00      	add	r7, sp, #0
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8018f60:	bf00      	nop
 8018f62:	370c      	adds	r7, #12
 8018f64:	46bd      	mov	sp, r7
 8018f66:	bc80      	pop	{r7}
 8018f68:	4770      	bx	lr
	...

08018f6c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018f6c:	b480      	push	{r7}
 8018f6e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018f70:	4b04      	ldr	r3, [pc, #16]	; (8018f84 <UTIL_LPM_Init+0x18>)
 8018f72:	2200      	movs	r2, #0
 8018f74:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018f76:	4b04      	ldr	r3, [pc, #16]	; (8018f88 <UTIL_LPM_Init+0x1c>)
 8018f78:	2200      	movs	r2, #0
 8018f7a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018f7c:	bf00      	nop
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bc80      	pop	{r7}
 8018f82:	4770      	bx	lr
 8018f84:	20001c84 	.word	0x20001c84
 8018f88:	20001c88 	.word	0x20001c88

08018f8c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018f8c:	b480      	push	{r7}
 8018f8e:	b087      	sub	sp, #28
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
 8018f94:	460b      	mov	r3, r1
 8018f96:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f98:	f3ef 8310 	mrs	r3, PRIMASK
 8018f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8018f9e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018fa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fa2:	b672      	cpsid	i
}
 8018fa4:	bf00      	nop
  
  switch( state )
 8018fa6:	78fb      	ldrb	r3, [r7, #3]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d008      	beq.n	8018fbe <UTIL_LPM_SetStopMode+0x32>
 8018fac:	2b01      	cmp	r3, #1
 8018fae:	d10e      	bne.n	8018fce <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8018fb0:	4b0d      	ldr	r3, [pc, #52]	; (8018fe8 <UTIL_LPM_SetStopMode+0x5c>)
 8018fb2:	681a      	ldr	r2, [r3, #0]
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	4313      	orrs	r3, r2
 8018fb8:	4a0b      	ldr	r2, [pc, #44]	; (8018fe8 <UTIL_LPM_SetStopMode+0x5c>)
 8018fba:	6013      	str	r3, [r2, #0]
      break;
 8018fbc:	e008      	b.n	8018fd0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	43da      	mvns	r2, r3
 8018fc2:	4b09      	ldr	r3, [pc, #36]	; (8018fe8 <UTIL_LPM_SetStopMode+0x5c>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	4013      	ands	r3, r2
 8018fc8:	4a07      	ldr	r2, [pc, #28]	; (8018fe8 <UTIL_LPM_SetStopMode+0x5c>)
 8018fca:	6013      	str	r3, [r2, #0]
      break;
 8018fcc:	e000      	b.n	8018fd0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8018fce:	bf00      	nop
 8018fd0:	697b      	ldr	r3, [r7, #20]
 8018fd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	f383 8810 	msr	PRIMASK, r3
}
 8018fda:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018fdc:	bf00      	nop
 8018fde:	371c      	adds	r7, #28
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bc80      	pop	{r7}
 8018fe4:	4770      	bx	lr
 8018fe6:	bf00      	nop
 8018fe8:	20001c84 	.word	0x20001c84

08018fec <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018fec:	b480      	push	{r7}
 8018fee:	b087      	sub	sp, #28
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
 8018ff4:	460b      	mov	r3, r1
 8018ff6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8018ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8018ffe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019002:	b672      	cpsid	i
}
 8019004:	bf00      	nop
  
  switch(state)
 8019006:	78fb      	ldrb	r3, [r7, #3]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d008      	beq.n	801901e <UTIL_LPM_SetOffMode+0x32>
 801900c:	2b01      	cmp	r3, #1
 801900e:	d10e      	bne.n	801902e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019010:	4b0d      	ldr	r3, [pc, #52]	; (8019048 <UTIL_LPM_SetOffMode+0x5c>)
 8019012:	681a      	ldr	r2, [r3, #0]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	4313      	orrs	r3, r2
 8019018:	4a0b      	ldr	r2, [pc, #44]	; (8019048 <UTIL_LPM_SetOffMode+0x5c>)
 801901a:	6013      	str	r3, [r2, #0]
      break;
 801901c:	e008      	b.n	8019030 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	43da      	mvns	r2, r3
 8019022:	4b09      	ldr	r3, [pc, #36]	; (8019048 <UTIL_LPM_SetOffMode+0x5c>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	4013      	ands	r3, r2
 8019028:	4a07      	ldr	r2, [pc, #28]	; (8019048 <UTIL_LPM_SetOffMode+0x5c>)
 801902a:	6013      	str	r3, [r2, #0]
      break;
 801902c:	e000      	b.n	8019030 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801902e:	bf00      	nop
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	f383 8810 	msr	PRIMASK, r3
}
 801903a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801903c:	bf00      	nop
 801903e:	371c      	adds	r7, #28
 8019040:	46bd      	mov	sp, r7
 8019042:	bc80      	pop	{r7}
 8019044:	4770      	bx	lr
 8019046:	bf00      	nop
 8019048:	20001c88 	.word	0x20001c88

0801904c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b084      	sub	sp, #16
 8019050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019052:	f3ef 8310 	mrs	r3, PRIMASK
 8019056:	60bb      	str	r3, [r7, #8]
  return(result);
 8019058:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801905a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801905c:	b672      	cpsid	i
}
 801905e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019060:	4b12      	ldr	r3, [pc, #72]	; (80190ac <UTIL_LPM_EnterLowPower+0x60>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d006      	beq.n	8019076 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019068:	4b11      	ldr	r3, [pc, #68]	; (80190b0 <UTIL_LPM_EnterLowPower+0x64>)
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801906e:	4b10      	ldr	r3, [pc, #64]	; (80190b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019070:	685b      	ldr	r3, [r3, #4]
 8019072:	4798      	blx	r3
 8019074:	e010      	b.n	8019098 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019076:	4b0f      	ldr	r3, [pc, #60]	; (80190b4 <UTIL_LPM_EnterLowPower+0x68>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d006      	beq.n	801908c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801907e:	4b0c      	ldr	r3, [pc, #48]	; (80190b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019080:	689b      	ldr	r3, [r3, #8]
 8019082:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019084:	4b0a      	ldr	r3, [pc, #40]	; (80190b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019086:	68db      	ldr	r3, [r3, #12]
 8019088:	4798      	blx	r3
 801908a:	e005      	b.n	8019098 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801908c:	4b08      	ldr	r3, [pc, #32]	; (80190b0 <UTIL_LPM_EnterLowPower+0x64>)
 801908e:	691b      	ldr	r3, [r3, #16]
 8019090:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019092:	4b07      	ldr	r3, [pc, #28]	; (80190b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019094:	695b      	ldr	r3, [r3, #20]
 8019096:	4798      	blx	r3
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f383 8810 	msr	PRIMASK, r3
}
 80190a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80190a4:	bf00      	nop
 80190a6:	3710      	adds	r7, #16
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}
 80190ac:	20001c84 	.word	0x20001c84
 80190b0:	0801b5a0 	.word	0x0801b5a0
 80190b4:	20001c88 	.word	0x20001c88

080190b8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80190b8:	b480      	push	{r7}
 80190ba:	b087      	sub	sp, #28
 80190bc:	af00      	add	r7, sp, #0
 80190be:	60f8      	str	r0, [r7, #12]
 80190c0:	60b9      	str	r1, [r7, #8]
 80190c2:	4613      	mov	r3, r2
 80190c4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	613b      	str	r3, [r7, #16]

  while( size-- )
 80190ce:	e007      	b.n	80190e0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80190d0:	693a      	ldr	r2, [r7, #16]
 80190d2:	1c53      	adds	r3, r2, #1
 80190d4:	613b      	str	r3, [r7, #16]
 80190d6:	697b      	ldr	r3, [r7, #20]
 80190d8:	1c59      	adds	r1, r3, #1
 80190da:	6179      	str	r1, [r7, #20]
 80190dc:	7812      	ldrb	r2, [r2, #0]
 80190de:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80190e0:	88fb      	ldrh	r3, [r7, #6]
 80190e2:	1e5a      	subs	r2, r3, #1
 80190e4:	80fa      	strh	r2, [r7, #6]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d1f2      	bne.n	80190d0 <UTIL_MEM_cpy_8+0x18>
    }
}
 80190ea:	bf00      	nop
 80190ec:	bf00      	nop
 80190ee:	371c      	adds	r7, #28
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bc80      	pop	{r7}
 80190f4:	4770      	bx	lr

080190f6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80190f6:	b480      	push	{r7}
 80190f8:	b085      	sub	sp, #20
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	6078      	str	r0, [r7, #4]
 80190fe:	460b      	mov	r3, r1
 8019100:	70fb      	strb	r3, [r7, #3]
 8019102:	4613      	mov	r3, r2
 8019104:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801910a:	e004      	b.n	8019116 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	1c5a      	adds	r2, r3, #1
 8019110:	60fa      	str	r2, [r7, #12]
 8019112:	78fa      	ldrb	r2, [r7, #3]
 8019114:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019116:	883b      	ldrh	r3, [r7, #0]
 8019118:	1e5a      	subs	r2, r3, #1
 801911a:	803a      	strh	r2, [r7, #0]
 801911c:	2b00      	cmp	r3, #0
 801911e:	d1f5      	bne.n	801910c <UTIL_MEM_set_8+0x16>
  }
}
 8019120:	bf00      	nop
 8019122:	bf00      	nop
 8019124:	3714      	adds	r7, #20
 8019126:	46bd      	mov	sp, r7
 8019128:	bc80      	pop	{r7}
 801912a:	4770      	bx	lr

0801912c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801912c:	b082      	sub	sp, #8
 801912e:	b480      	push	{r7}
 8019130:	b087      	sub	sp, #28
 8019132:	af00      	add	r7, sp, #0
 8019134:	60f8      	str	r0, [r7, #12]
 8019136:	1d38      	adds	r0, r7, #4
 8019138:	e880 0006 	stmia.w	r0, {r1, r2}
 801913c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801913e:	2300      	movs	r3, #0
 8019140:	613b      	str	r3, [r7, #16]
 8019142:	2300      	movs	r3, #0
 8019144:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019146:	687a      	ldr	r2, [r7, #4]
 8019148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801914a:	4413      	add	r3, r2
 801914c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801914e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019152:	b29a      	uxth	r2, r3
 8019154:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019158:	b29b      	uxth	r3, r3
 801915a:	4413      	add	r3, r2
 801915c:	b29b      	uxth	r3, r3
 801915e:	b21b      	sxth	r3, r3
 8019160:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019162:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801916a:	db0a      	blt.n	8019182 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	3301      	adds	r3, #1
 8019170:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019172:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019176:	b29b      	uxth	r3, r3
 8019178:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801917c:	b29b      	uxth	r3, r3
 801917e:	b21b      	sxth	r3, r3
 8019180:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	461a      	mov	r2, r3
 8019186:	f107 0310 	add.w	r3, r7, #16
 801918a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801918e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019192:	68f8      	ldr	r0, [r7, #12]
 8019194:	371c      	adds	r7, #28
 8019196:	46bd      	mov	sp, r7
 8019198:	bc80      	pop	{r7}
 801919a:	b002      	add	sp, #8
 801919c:	4770      	bx	lr

0801919e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801919e:	b082      	sub	sp, #8
 80191a0:	b480      	push	{r7}
 80191a2:	b087      	sub	sp, #28
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	60f8      	str	r0, [r7, #12]
 80191a8:	1d38      	adds	r0, r7, #4
 80191aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80191ae:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80191b0:	2300      	movs	r3, #0
 80191b2:	613b      	str	r3, [r7, #16]
 80191b4:	2300      	movs	r3, #0
 80191b6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80191b8:	687a      	ldr	r2, [r7, #4]
 80191ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191bc:	1ad3      	subs	r3, r2, r3
 80191be:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80191c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80191c4:	b29a      	uxth	r2, r3
 80191c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80191ca:	b29b      	uxth	r3, r3
 80191cc:	1ad3      	subs	r3, r2, r3
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	b21b      	sxth	r3, r3
 80191d2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80191d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	da0a      	bge.n	80191f2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 80191dc:	693b      	ldr	r3, [r7, #16]
 80191de:	3b01      	subs	r3, #1
 80191e0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80191e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80191e6:	b29b      	uxth	r3, r3
 80191e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	b21b      	sxth	r3, r3
 80191f0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	461a      	mov	r2, r3
 80191f6:	f107 0310 	add.w	r3, r7, #16
 80191fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80191fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019202:	68f8      	ldr	r0, [r7, #12]
 8019204:	371c      	adds	r7, #28
 8019206:	46bd      	mov	sp, r7
 8019208:	bc80      	pop	{r7}
 801920a:	b002      	add	sp, #8
 801920c:	4770      	bx	lr
	...

08019210 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b088      	sub	sp, #32
 8019214:	af02      	add	r7, sp, #8
 8019216:	463b      	mov	r3, r7
 8019218:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801921c:	2300      	movs	r3, #0
 801921e:	60bb      	str	r3, [r7, #8]
 8019220:	2300      	movs	r3, #0
 8019222:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019224:	4b10      	ldr	r3, [pc, #64]	; (8019268 <SysTimeSet+0x58>)
 8019226:	691b      	ldr	r3, [r3, #16]
 8019228:	f107 0208 	add.w	r2, r7, #8
 801922c:	3204      	adds	r2, #4
 801922e:	4610      	mov	r0, r2
 8019230:	4798      	blx	r3
 8019232:	4603      	mov	r3, r0
 8019234:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019236:	f107 0010 	add.w	r0, r7, #16
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	9300      	str	r3, [sp, #0]
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	463a      	mov	r2, r7
 8019242:	ca06      	ldmia	r2, {r1, r2}
 8019244:	f7ff ffab 	bl	801919e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019248:	4b07      	ldr	r3, [pc, #28]	; (8019268 <SysTimeSet+0x58>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	693a      	ldr	r2, [r7, #16]
 801924e:	4610      	mov	r0, r2
 8019250:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019252:	4b05      	ldr	r3, [pc, #20]	; (8019268 <SysTimeSet+0x58>)
 8019254:	689b      	ldr	r3, [r3, #8]
 8019256:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801925a:	4610      	mov	r0, r2
 801925c:	4798      	blx	r3
}
 801925e:	bf00      	nop
 8019260:	3718      	adds	r7, #24
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
 8019266:	bf00      	nop
 8019268:	0801b684 	.word	0x0801b684

0801926c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b08a      	sub	sp, #40	; 0x28
 8019270:	af02      	add	r7, sp, #8
 8019272:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019274:	2300      	movs	r3, #0
 8019276:	61bb      	str	r3, [r7, #24]
 8019278:	2300      	movs	r3, #0
 801927a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801927c:	2300      	movs	r3, #0
 801927e:	613b      	str	r3, [r7, #16]
 8019280:	2300      	movs	r3, #0
 8019282:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019284:	4b14      	ldr	r3, [pc, #80]	; (80192d8 <SysTimeGet+0x6c>)
 8019286:	691b      	ldr	r3, [r3, #16]
 8019288:	f107 0218 	add.w	r2, r7, #24
 801928c:	3204      	adds	r2, #4
 801928e:	4610      	mov	r0, r2
 8019290:	4798      	blx	r3
 8019292:	4603      	mov	r3, r0
 8019294:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019296:	4b10      	ldr	r3, [pc, #64]	; (80192d8 <SysTimeGet+0x6c>)
 8019298:	68db      	ldr	r3, [r3, #12]
 801929a:	4798      	blx	r3
 801929c:	4603      	mov	r3, r0
 801929e:	b21b      	sxth	r3, r3
 80192a0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80192a2:	4b0d      	ldr	r3, [pc, #52]	; (80192d8 <SysTimeGet+0x6c>)
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	4798      	blx	r3
 80192a8:	4603      	mov	r3, r0
 80192aa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80192ac:	f107 0010 	add.w	r0, r7, #16
 80192b0:	69fb      	ldr	r3, [r7, #28]
 80192b2:	9300      	str	r3, [sp, #0]
 80192b4:	69bb      	ldr	r3, [r7, #24]
 80192b6:	f107 0208 	add.w	r2, r7, #8
 80192ba:	ca06      	ldmia	r2, {r1, r2}
 80192bc:	f7ff ff36 	bl	801912c <SysTimeAdd>

  return sysTime;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	461a      	mov	r2, r3
 80192c4:	f107 0310 	add.w	r3, r7, #16
 80192c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80192cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80192d0:	6878      	ldr	r0, [r7, #4]
 80192d2:	3720      	adds	r7, #32
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd80      	pop	{r7, pc}
 80192d8:	0801b684 	.word	0x0801b684

080192dc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80192e4:	2300      	movs	r3, #0
 80192e6:	60bb      	str	r3, [r7, #8]
 80192e8:	2300      	movs	r3, #0
 80192ea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80192ec:	4b0a      	ldr	r3, [pc, #40]	; (8019318 <SysTimeGetMcuTime+0x3c>)
 80192ee:	691b      	ldr	r3, [r3, #16]
 80192f0:	f107 0208 	add.w	r2, r7, #8
 80192f4:	3204      	adds	r2, #4
 80192f6:	4610      	mov	r0, r2
 80192f8:	4798      	blx	r3
 80192fa:	4603      	mov	r3, r0
 80192fc:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	461a      	mov	r2, r3
 8019302:	f107 0308 	add.w	r3, r7, #8
 8019306:	e893 0003 	ldmia.w	r3, {r0, r1}
 801930a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	3710      	adds	r7, #16
 8019312:	46bd      	mov	sp, r7
 8019314:	bd80      	pop	{r7, pc}
 8019316:	bf00      	nop
 8019318:	0801b684 	.word	0x0801b684

0801931c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b088      	sub	sp, #32
 8019320:	af02      	add	r7, sp, #8
 8019322:	463b      	mov	r3, r7
 8019324:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019328:	4b0f      	ldr	r3, [pc, #60]	; (8019368 <SysTimeToMs+0x4c>)
 801932a:	68db      	ldr	r3, [r3, #12]
 801932c:	4798      	blx	r3
 801932e:	4603      	mov	r3, r0
 8019330:	b21b      	sxth	r3, r3
 8019332:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019334:	4b0c      	ldr	r3, [pc, #48]	; (8019368 <SysTimeToMs+0x4c>)
 8019336:	685b      	ldr	r3, [r3, #4]
 8019338:	4798      	blx	r3
 801933a:	4603      	mov	r3, r0
 801933c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801933e:	f107 0008 	add.w	r0, r7, #8
 8019342:	697b      	ldr	r3, [r7, #20]
 8019344:	9300      	str	r3, [sp, #0]
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	463a      	mov	r2, r7
 801934a:	ca06      	ldmia	r2, {r1, r2}
 801934c:	f7ff ff27 	bl	801919e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019356:	fb02 f303 	mul.w	r3, r2, r3
 801935a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801935e:	4413      	add	r3, r2
}
 8019360:	4618      	mov	r0, r3
 8019362:	3718      	adds	r7, #24
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}
 8019368:	0801b684 	.word	0x0801b684

0801936c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801936c:	b580      	push	{r7, lr}
 801936e:	b08a      	sub	sp, #40	; 0x28
 8019370:	af02      	add	r7, sp, #8
 8019372:	6078      	str	r0, [r7, #4]
 8019374:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	4a19      	ldr	r2, [pc, #100]	; (80193e0 <SysTimeFromMs+0x74>)
 801937a:	fba2 2303 	umull	r2, r3, r2, r3
 801937e:	099b      	lsrs	r3, r3, #6
 8019380:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019382:	69fb      	ldr	r3, [r7, #28]
 8019384:	617b      	str	r3, [r7, #20]
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	b29a      	uxth	r2, r3
 801938a:	69fb      	ldr	r3, [r7, #28]
 801938c:	b29b      	uxth	r3, r3
 801938e:	4619      	mov	r1, r3
 8019390:	0149      	lsls	r1, r1, #5
 8019392:	1ac9      	subs	r1, r1, r3
 8019394:	0089      	lsls	r1, r1, #2
 8019396:	440b      	add	r3, r1
 8019398:	00db      	lsls	r3, r3, #3
 801939a:	b29b      	uxth	r3, r3
 801939c:	1ad3      	subs	r3, r2, r3
 801939e:	b29b      	uxth	r3, r3
 80193a0:	b21b      	sxth	r3, r3
 80193a2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 80193a4:	f107 030c 	add.w	r3, r7, #12
 80193a8:	2200      	movs	r2, #0
 80193aa:	601a      	str	r2, [r3, #0]
 80193ac:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80193ae:	4b0d      	ldr	r3, [pc, #52]	; (80193e4 <SysTimeFromMs+0x78>)
 80193b0:	68db      	ldr	r3, [r3, #12]
 80193b2:	4798      	blx	r3
 80193b4:	4603      	mov	r3, r0
 80193b6:	b21b      	sxth	r3, r3
 80193b8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80193ba:	4b0a      	ldr	r3, [pc, #40]	; (80193e4 <SysTimeFromMs+0x78>)
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	4798      	blx	r3
 80193c0:	4603      	mov	r3, r0
 80193c2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 80193c4:	6878      	ldr	r0, [r7, #4]
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	9300      	str	r3, [sp, #0]
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	f107 0214 	add.w	r2, r7, #20
 80193d0:	ca06      	ldmia	r2, {r1, r2}
 80193d2:	f7ff feab 	bl	801912c <SysTimeAdd>
}
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	3720      	adds	r7, #32
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}
 80193de:	bf00      	nop
 80193e0:	10624dd3 	.word	0x10624dd3
 80193e4:	0801b684 	.word	0x0801b684

080193e8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80193e8:	b480      	push	{r7}
 80193ea:	b085      	sub	sp, #20
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
  int i = 0;
 80193f0:	2300      	movs	r3, #0
 80193f2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80193f4:	e00e      	b.n	8019414 <ee_skip_atoi+0x2c>
 80193f6:	68fa      	ldr	r2, [r7, #12]
 80193f8:	4613      	mov	r3, r2
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	4413      	add	r3, r2
 80193fe:	005b      	lsls	r3, r3, #1
 8019400:	4618      	mov	r0, r3
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	1c59      	adds	r1, r3, #1
 8019408:	687a      	ldr	r2, [r7, #4]
 801940a:	6011      	str	r1, [r2, #0]
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	4403      	add	r3, r0
 8019410:	3b30      	subs	r3, #48	; 0x30
 8019412:	60fb      	str	r3, [r7, #12]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	781b      	ldrb	r3, [r3, #0]
 801941a:	2b2f      	cmp	r3, #47	; 0x2f
 801941c:	d904      	bls.n	8019428 <ee_skip_atoi+0x40>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	2b39      	cmp	r3, #57	; 0x39
 8019426:	d9e6      	bls.n	80193f6 <ee_skip_atoi+0xe>
  return i;
 8019428:	68fb      	ldr	r3, [r7, #12]
}
 801942a:	4618      	mov	r0, r3
 801942c:	3714      	adds	r7, #20
 801942e:	46bd      	mov	sp, r7
 8019430:	bc80      	pop	{r7}
 8019432:	4770      	bx	lr

08019434 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019434:	b480      	push	{r7}
 8019436:	b099      	sub	sp, #100	; 0x64
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
 8019440:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019442:	4b71      	ldr	r3, [pc, #452]	; (8019608 <ee_number+0x1d4>)
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801944e:	2b00      	cmp	r3, #0
 8019450:	d002      	beq.n	8019458 <ee_number+0x24>
 8019452:	4b6e      	ldr	r3, [pc, #440]	; (801960c <ee_number+0x1d8>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019458:	683b      	ldr	r3, [r7, #0]
 801945a:	2b01      	cmp	r3, #1
 801945c:	dd02      	ble.n	8019464 <ee_number+0x30>
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	2b24      	cmp	r3, #36	; 0x24
 8019462:	dd01      	ble.n	8019468 <ee_number+0x34>
 8019464:	2300      	movs	r3, #0
 8019466:	e0ca      	b.n	80195fe <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 8019468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801946a:	f003 0301 	and.w	r3, r3, #1
 801946e:	2b00      	cmp	r3, #0
 8019470:	d001      	beq.n	8019476 <ee_number+0x42>
 8019472:	2330      	movs	r3, #48	; 0x30
 8019474:	e000      	b.n	8019478 <ee_number+0x44>
 8019476:	2320      	movs	r3, #32
 8019478:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801947c:	2300      	movs	r3, #0
 801947e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019484:	f003 0302 	and.w	r3, r3, #2
 8019488:	2b00      	cmp	r3, #0
 801948a:	d00b      	beq.n	80194a4 <ee_number+0x70>
  {
    if (num < 0)
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	2b00      	cmp	r3, #0
 8019490:	da08      	bge.n	80194a4 <ee_number+0x70>
    {
      sign = '-';
 8019492:	232d      	movs	r3, #45	; 0x2d
 8019494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	425b      	negs	r3, r3
 801949c:	607b      	str	r3, [r7, #4]
      size--;
 801949e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80194a0:	3b01      	subs	r3, #1
 80194a2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 80194a4:	2300      	movs	r3, #0
 80194a6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d11e      	bne.n	80194ec <ee_number+0xb8>
    tmp[i++] = '0';
 80194ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194b0:	1c5a      	adds	r2, r3, #1
 80194b2:	657a      	str	r2, [r7, #84]	; 0x54
 80194b4:	3360      	adds	r3, #96	; 0x60
 80194b6:	443b      	add	r3, r7
 80194b8:	2230      	movs	r2, #48	; 0x30
 80194ba:	f803 2c50 	strb.w	r2, [r3, #-80]
 80194be:	e018      	b.n	80194f2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	683a      	ldr	r2, [r7, #0]
 80194c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80194c8:	fb01 f202 	mul.w	r2, r1, r2
 80194cc:	1a9b      	subs	r3, r3, r2
 80194ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80194d0:	441a      	add	r2, r3
 80194d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194d4:	1c59      	adds	r1, r3, #1
 80194d6:	6579      	str	r1, [r7, #84]	; 0x54
 80194d8:	7812      	ldrb	r2, [r2, #0]
 80194da:	3360      	adds	r3, #96	; 0x60
 80194dc:	443b      	add	r3, r7
 80194de:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80194ea:	607b      	str	r3, [r7, #4]
    while (num != 0)
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d1e6      	bne.n	80194c0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 80194f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80194f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194f6:	429a      	cmp	r2, r3
 80194f8:	dd01      	ble.n	80194fe <ee_number+0xca>
 80194fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 80194fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019502:	1ad3      	subs	r3, r2, r3
 8019504:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019508:	f003 0301 	and.w	r3, r3, #1
 801950c:	2b00      	cmp	r3, #0
 801950e:	d112      	bne.n	8019536 <ee_number+0x102>
 8019510:	e00c      	b.n	801952c <ee_number+0xf8>
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	1c5a      	adds	r2, r3, #1
 8019516:	60fa      	str	r2, [r7, #12]
 8019518:	2220      	movs	r2, #32
 801951a:	701a      	strb	r2, [r3, #0]
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	3b01      	subs	r3, #1
 8019520:	60bb      	str	r3, [r7, #8]
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d101      	bne.n	801952c <ee_number+0xf8>
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	e068      	b.n	80195fe <ee_number+0x1ca>
 801952c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801952e:	1e5a      	subs	r2, r3, #1
 8019530:	66ba      	str	r2, [r7, #104]	; 0x68
 8019532:	2b00      	cmp	r3, #0
 8019534:	dced      	bgt.n	8019512 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 8019536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801953a:	2b00      	cmp	r3, #0
 801953c:	d01b      	beq.n	8019576 <ee_number+0x142>
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	1c5a      	adds	r2, r3, #1
 8019542:	60fa      	str	r2, [r7, #12]
 8019544:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019548:	701a      	strb	r2, [r3, #0]
 801954a:	68bb      	ldr	r3, [r7, #8]
 801954c:	3b01      	subs	r3, #1
 801954e:	60bb      	str	r3, [r7, #8]
 8019550:	68bb      	ldr	r3, [r7, #8]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d10f      	bne.n	8019576 <ee_number+0x142>
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	e051      	b.n	80195fe <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	1c5a      	adds	r2, r3, #1
 801955e:	60fa      	str	r2, [r7, #12]
 8019560:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019564:	701a      	strb	r2, [r3, #0]
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	3b01      	subs	r3, #1
 801956a:	60bb      	str	r3, [r7, #8]
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d101      	bne.n	8019576 <ee_number+0x142>
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	e043      	b.n	80195fe <ee_number+0x1ca>
 8019576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019578:	1e5a      	subs	r2, r3, #1
 801957a:	66ba      	str	r2, [r7, #104]	; 0x68
 801957c:	2b00      	cmp	r3, #0
 801957e:	dcec      	bgt.n	801955a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019580:	e00c      	b.n	801959c <ee_number+0x168>
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	1c5a      	adds	r2, r3, #1
 8019586:	60fa      	str	r2, [r7, #12]
 8019588:	2230      	movs	r2, #48	; 0x30
 801958a:	701a      	strb	r2, [r3, #0]
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	3b01      	subs	r3, #1
 8019590:	60bb      	str	r3, [r7, #8]
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d101      	bne.n	801959c <ee_number+0x168>
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	e030      	b.n	80195fe <ee_number+0x1ca>
 801959c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801959e:	1e5a      	subs	r2, r3, #1
 80195a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80195a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80195a4:	429a      	cmp	r2, r3
 80195a6:	dbec      	blt.n	8019582 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80195a8:	e010      	b.n	80195cc <ee_number+0x198>
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	1c5a      	adds	r2, r3, #1
 80195ae:	60fa      	str	r2, [r7, #12]
 80195b0:	f107 0110 	add.w	r1, r7, #16
 80195b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80195b6:	440a      	add	r2, r1
 80195b8:	7812      	ldrb	r2, [r2, #0]
 80195ba:	701a      	strb	r2, [r3, #0]
 80195bc:	68bb      	ldr	r3, [r7, #8]
 80195be:	3b01      	subs	r3, #1
 80195c0:	60bb      	str	r3, [r7, #8]
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d101      	bne.n	80195cc <ee_number+0x198>
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	e018      	b.n	80195fe <ee_number+0x1ca>
 80195cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195ce:	1e5a      	subs	r2, r3, #1
 80195d0:	657a      	str	r2, [r7, #84]	; 0x54
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	dce9      	bgt.n	80195aa <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 80195d6:	e00c      	b.n	80195f2 <ee_number+0x1be>
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	1c5a      	adds	r2, r3, #1
 80195dc:	60fa      	str	r2, [r7, #12]
 80195de:	2220      	movs	r2, #32
 80195e0:	701a      	strb	r2, [r3, #0]
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	3b01      	subs	r3, #1
 80195e6:	60bb      	str	r3, [r7, #8]
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d101      	bne.n	80195f2 <ee_number+0x1be>
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	e005      	b.n	80195fe <ee_number+0x1ca>
 80195f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80195f4:	1e5a      	subs	r2, r3, #1
 80195f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	dced      	bgt.n	80195d8 <ee_number+0x1a4>

  return str;
 80195fc:	68fb      	ldr	r3, [r7, #12]
}
 80195fe:	4618      	mov	r0, r3
 8019600:	3764      	adds	r7, #100	; 0x64
 8019602:	46bd      	mov	sp, r7
 8019604:	bc80      	pop	{r7}
 8019606:	4770      	bx	lr
 8019608:	2000013c 	.word	0x2000013c
 801960c:	20000140 	.word	0x20000140

08019610 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b092      	sub	sp, #72	; 0x48
 8019614:	af04      	add	r7, sp, #16
 8019616:	60f8      	str	r0, [r7, #12]
 8019618:	60b9      	str	r1, [r7, #8]
 801961a:	607a      	str	r2, [r7, #4]
 801961c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	2b00      	cmp	r3, #0
 8019622:	dc01      	bgt.n	8019628 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019624:	2300      	movs	r3, #0
 8019626:	e142      	b.n	80198ae <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801962c:	e12a      	b.n	8019884 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801962e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	1ad2      	subs	r2, r2, r3
 8019634:	68bb      	ldr	r3, [r7, #8]
 8019636:	3b01      	subs	r3, #1
 8019638:	429a      	cmp	r2, r3
 801963a:	f280 8131 	bge.w	80198a0 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	781b      	ldrb	r3, [r3, #0]
 8019642:	2b25      	cmp	r3, #37	; 0x25
 8019644:	d006      	beq.n	8019654 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019646:	687a      	ldr	r2, [r7, #4]
 8019648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964a:	1c59      	adds	r1, r3, #1
 801964c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801964e:	7812      	ldrb	r2, [r2, #0]
 8019650:	701a      	strb	r2, [r3, #0]
      continue;
 8019652:	e114      	b.n	801987e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 8019654:	2300      	movs	r3, #0
 8019656:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	3301      	adds	r3, #1
 801965c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	2b30      	cmp	r3, #48	; 0x30
 8019664:	d103      	bne.n	801966e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019666:	6a3b      	ldr	r3, [r7, #32]
 8019668:	f043 0301 	orr.w	r3, r3, #1
 801966c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801966e:	f04f 33ff 	mov.w	r3, #4294967295
 8019672:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	2b2f      	cmp	r3, #47	; 0x2f
 801967a:	d908      	bls.n	801968e <tiny_vsnprintf_like+0x7e>
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	781b      	ldrb	r3, [r3, #0]
 8019680:	2b39      	cmp	r3, #57	; 0x39
 8019682:	d804      	bhi.n	801968e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019684:	1d3b      	adds	r3, r7, #4
 8019686:	4618      	mov	r0, r3
 8019688:	f7ff feae 	bl	80193e8 <ee_skip_atoi>
 801968c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801968e:	f04f 33ff 	mov.w	r3, #4294967295
 8019692:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 8019694:	f04f 33ff 	mov.w	r3, #4294967295
 8019698:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801969a:	230a      	movs	r3, #10
 801969c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	3b58      	subs	r3, #88	; 0x58
 80196a4:	2b20      	cmp	r3, #32
 80196a6:	f200 8094 	bhi.w	80197d2 <tiny_vsnprintf_like+0x1c2>
 80196aa:	a201      	add	r2, pc, #4	; (adr r2, 80196b0 <tiny_vsnprintf_like+0xa0>)
 80196ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196b0:	080197bb 	.word	0x080197bb
 80196b4:	080197d3 	.word	0x080197d3
 80196b8:	080197d3 	.word	0x080197d3
 80196bc:	080197d3 	.word	0x080197d3
 80196c0:	080197d3 	.word	0x080197d3
 80196c4:	080197d3 	.word	0x080197d3
 80196c8:	080197d3 	.word	0x080197d3
 80196cc:	080197d3 	.word	0x080197d3
 80196d0:	080197d3 	.word	0x080197d3
 80196d4:	080197d3 	.word	0x080197d3
 80196d8:	080197d3 	.word	0x080197d3
 80196dc:	0801973f 	.word	0x0801973f
 80196e0:	080197c9 	.word	0x080197c9
 80196e4:	080197d3 	.word	0x080197d3
 80196e8:	080197d3 	.word	0x080197d3
 80196ec:	080197d3 	.word	0x080197d3
 80196f0:	080197d3 	.word	0x080197d3
 80196f4:	080197c9 	.word	0x080197c9
 80196f8:	080197d3 	.word	0x080197d3
 80196fc:	080197d3 	.word	0x080197d3
 8019700:	080197d3 	.word	0x080197d3
 8019704:	080197d3 	.word	0x080197d3
 8019708:	080197d3 	.word	0x080197d3
 801970c:	080197d3 	.word	0x080197d3
 8019710:	080197d3 	.word	0x080197d3
 8019714:	080197d3 	.word	0x080197d3
 8019718:	080197d3 	.word	0x080197d3
 801971c:	0801975f 	.word	0x0801975f
 8019720:	080197d3 	.word	0x080197d3
 8019724:	0801981f 	.word	0x0801981f
 8019728:	080197d3 	.word	0x080197d3
 801972c:	080197d3 	.word	0x080197d3
 8019730:	080197c3 	.word	0x080197c3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019736:	1c5a      	adds	r2, r3, #1
 8019738:	62fa      	str	r2, [r7, #44]	; 0x2c
 801973a:	2220      	movs	r2, #32
 801973c:	701a      	strb	r2, [r3, #0]
 801973e:	69fb      	ldr	r3, [r7, #28]
 8019740:	3b01      	subs	r3, #1
 8019742:	61fb      	str	r3, [r7, #28]
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	2b00      	cmp	r3, #0
 8019748:	dcf4      	bgt.n	8019734 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	1d1a      	adds	r2, r3, #4
 801974e:	603a      	str	r2, [r7, #0]
 8019750:	6819      	ldr	r1, [r3, #0]
 8019752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019754:	1c5a      	adds	r2, r3, #1
 8019756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019758:	b2ca      	uxtb	r2, r1
 801975a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801975c:	e08f      	b.n	801987e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	1d1a      	adds	r2, r3, #4
 8019762:	603a      	str	r2, [r7, #0]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801976a:	2b00      	cmp	r3, #0
 801976c:	d101      	bne.n	8019772 <tiny_vsnprintf_like+0x162>
 801976e:	4b52      	ldr	r3, [pc, #328]	; (80198b8 <tiny_vsnprintf_like+0x2a8>)
 8019770:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019774:	f7e6 fd04 	bl	8000180 <strlen>
 8019778:	4603      	mov	r3, r0
 801977a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801977c:	e004      	b.n	8019788 <tiny_vsnprintf_like+0x178>
 801977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019780:	1c5a      	adds	r2, r3, #1
 8019782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019784:	2220      	movs	r2, #32
 8019786:	701a      	strb	r2, [r3, #0]
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	1e5a      	subs	r2, r3, #1
 801978c:	61fa      	str	r2, [r7, #28]
 801978e:	693a      	ldr	r2, [r7, #16]
 8019790:	429a      	cmp	r2, r3
 8019792:	dbf4      	blt.n	801977e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019794:	2300      	movs	r3, #0
 8019796:	62bb      	str	r3, [r7, #40]	; 0x28
 8019798:	e00a      	b.n	80197b0 <tiny_vsnprintf_like+0x1a0>
 801979a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801979c:	1c53      	adds	r3, r2, #1
 801979e:	627b      	str	r3, [r7, #36]	; 0x24
 80197a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a2:	1c59      	adds	r1, r3, #1
 80197a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80197a6:	7812      	ldrb	r2, [r2, #0]
 80197a8:	701a      	strb	r2, [r3, #0]
 80197aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ac:	3301      	adds	r3, #1
 80197ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80197b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197b2:	693b      	ldr	r3, [r7, #16]
 80197b4:	429a      	cmp	r2, r3
 80197b6:	dbf0      	blt.n	801979a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 80197b8:	e061      	b.n	801987e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80197ba:	6a3b      	ldr	r3, [r7, #32]
 80197bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197c0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 80197c2:	2310      	movs	r3, #16
 80197c4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80197c6:	e02d      	b.n	8019824 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 80197c8:	6a3b      	ldr	r3, [r7, #32]
 80197ca:	f043 0302 	orr.w	r3, r3, #2
 80197ce:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 80197d0:	e025      	b.n	801981e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	781b      	ldrb	r3, [r3, #0]
 80197d6:	2b25      	cmp	r3, #37	; 0x25
 80197d8:	d004      	beq.n	80197e4 <tiny_vsnprintf_like+0x1d4>
 80197da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197dc:	1c5a      	adds	r2, r3, #1
 80197de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80197e0:	2225      	movs	r2, #37	; 0x25
 80197e2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 80197e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	1ad2      	subs	r2, r2, r3
 80197ea:	68bb      	ldr	r3, [r7, #8]
 80197ec:	3b01      	subs	r3, #1
 80197ee:	429a      	cmp	r2, r3
 80197f0:	da17      	bge.n	8019822 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d006      	beq.n	8019808 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 80197fa:	687a      	ldr	r2, [r7, #4]
 80197fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197fe:	1c59      	adds	r1, r3, #1
 8019800:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019802:	7812      	ldrb	r2, [r2, #0]
 8019804:	701a      	strb	r2, [r3, #0]
 8019806:	e002      	b.n	801980e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	3b01      	subs	r3, #1
 801980c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801980e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	1ad2      	subs	r2, r2, r3
 8019814:	68bb      	ldr	r3, [r7, #8]
 8019816:	3b01      	subs	r3, #1
 8019818:	429a      	cmp	r2, r3
 801981a:	db2f      	blt.n	801987c <tiny_vsnprintf_like+0x26c>
 801981c:	e002      	b.n	8019824 <tiny_vsnprintf_like+0x214>
        break;
 801981e:	bf00      	nop
 8019820:	e000      	b.n	8019824 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019822:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	2b6c      	cmp	r3, #108	; 0x6c
 8019828:	d105      	bne.n	8019836 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	1d1a      	adds	r2, r3, #4
 801982e:	603a      	str	r2, [r7, #0]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	637b      	str	r3, [r7, #52]	; 0x34
 8019834:	e00f      	b.n	8019856 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019836:	6a3b      	ldr	r3, [r7, #32]
 8019838:	f003 0302 	and.w	r3, r3, #2
 801983c:	2b00      	cmp	r3, #0
 801983e:	d005      	beq.n	801984c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019840:	683b      	ldr	r3, [r7, #0]
 8019842:	1d1a      	adds	r2, r3, #4
 8019844:	603a      	str	r2, [r7, #0]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	637b      	str	r3, [r7, #52]	; 0x34
 801984a:	e004      	b.n	8019856 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	1d1a      	adds	r2, r3, #4
 8019850:	603a      	str	r2, [r7, #0]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	1e5a      	subs	r2, r3, #1
 801985a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	1acb      	subs	r3, r1, r3
 8019860:	1ad1      	subs	r1, r2, r3
 8019862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019864:	6a3b      	ldr	r3, [r7, #32]
 8019866:	9302      	str	r3, [sp, #8]
 8019868:	69bb      	ldr	r3, [r7, #24]
 801986a:	9301      	str	r3, [sp, #4]
 801986c:	69fb      	ldr	r3, [r7, #28]
 801986e:	9300      	str	r3, [sp, #0]
 8019870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019874:	f7ff fdde 	bl	8019434 <ee_number>
 8019878:	62f8      	str	r0, [r7, #44]	; 0x2c
 801987a:	e000      	b.n	801987e <tiny_vsnprintf_like+0x26e>
        continue;
 801987c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	3301      	adds	r3, #1
 8019882:	607b      	str	r3, [r7, #4]
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	781b      	ldrb	r3, [r3, #0]
 8019888:	2b00      	cmp	r3, #0
 801988a:	f47f aed0 	bne.w	801962e <tiny_vsnprintf_like+0x1e>
 801988e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	1ad2      	subs	r2, r2, r3
 8019894:	68bb      	ldr	r3, [r7, #8]
 8019896:	3b01      	subs	r3, #1
 8019898:	429a      	cmp	r2, r3
 801989a:	f6bf aec8 	bge.w	801962e <tiny_vsnprintf_like+0x1e>
 801989e:	e000      	b.n	80198a2 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 80198a0:	bf00      	nop
  }

  *str = '\0';
 80198a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198a4:	2200      	movs	r2, #0
 80198a6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 80198a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	1ad3      	subs	r3, r2, r3
}
 80198ae:	4618      	mov	r0, r3
 80198b0:	3738      	adds	r7, #56	; 0x38
 80198b2:	46bd      	mov	sp, r7
 80198b4:	bd80      	pop	{r7, pc}
 80198b6:	bf00      	nop
 80198b8:	0801b598 	.word	0x0801b598

080198bc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b090      	sub	sp, #64	; 0x40
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80198c4:	4b73      	ldr	r3, [pc, #460]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80198ca:	4b72      	ldr	r3, [pc, #456]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 80198cc:	681a      	ldr	r2, [r3, #0]
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	4013      	ands	r3, r2
 80198d2:	4a70      	ldr	r2, [pc, #448]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 80198d4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80198d6:	4b70      	ldr	r3, [pc, #448]	; (8019a98 <UTIL_SEQ_Run+0x1dc>)
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80198dc:	4b6f      	ldr	r3, [pc, #444]	; (8019a9c <UTIL_SEQ_Run+0x1e0>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80198e2:	4b6f      	ldr	r3, [pc, #444]	; (8019aa0 <UTIL_SEQ_Run+0x1e4>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80198e8:	4b6e      	ldr	r3, [pc, #440]	; (8019aa4 <UTIL_SEQ_Run+0x1e8>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80198ee:	e08d      	b.n	8019a0c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80198f0:	2300      	movs	r3, #0
 80198f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80198f4:	e002      	b.n	80198fc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80198f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198f8:	3301      	adds	r3, #1
 80198fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80198fc:	4a6a      	ldr	r2, [pc, #424]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 80198fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019900:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019906:	401a      	ands	r2, r3
 8019908:	4b62      	ldr	r3, [pc, #392]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	4013      	ands	r3, r2
 801990e:	2b00      	cmp	r3, #0
 8019910:	d0f1      	beq.n	80198f6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019912:	4a65      	ldr	r2, [pc, #404]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 8019914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019916:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801991c:	401a      	ands	r2, r3
 801991e:	4b5d      	ldr	r3, [pc, #372]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	4013      	ands	r3, r2
 8019924:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019926:	4a60      	ldr	r2, [pc, #384]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 8019928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801992a:	00db      	lsls	r3, r3, #3
 801992c:	4413      	add	r3, r2
 801992e:	685a      	ldr	r2, [r3, #4]
 8019930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019932:	4013      	ands	r3, r2
 8019934:	2b00      	cmp	r3, #0
 8019936:	d106      	bne.n	8019946 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019938:	4a5b      	ldr	r2, [pc, #364]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 801993a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801993c:	00db      	lsls	r3, r3, #3
 801993e:	4413      	add	r3, r2
 8019940:	f04f 32ff 	mov.w	r2, #4294967295
 8019944:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019946:	4a58      	ldr	r2, [pc, #352]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 8019948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801994a:	00db      	lsls	r3, r3, #3
 801994c:	4413      	add	r3, r2
 801994e:	685a      	ldr	r2, [r3, #4]
 8019950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019952:	4013      	ands	r3, r2
 8019954:	4618      	mov	r0, r3
 8019956:	f000 f907 	bl	8019b68 <SEQ_BitPosition>
 801995a:	4603      	mov	r3, r0
 801995c:	461a      	mov	r2, r3
 801995e:	4b53      	ldr	r3, [pc, #332]	; (8019aac <UTIL_SEQ_Run+0x1f0>)
 8019960:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019962:	4a51      	ldr	r2, [pc, #324]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 8019964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019966:	00db      	lsls	r3, r3, #3
 8019968:	4413      	add	r3, r2
 801996a:	685a      	ldr	r2, [r3, #4]
 801996c:	4b4f      	ldr	r3, [pc, #316]	; (8019aac <UTIL_SEQ_Run+0x1f0>)
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	2101      	movs	r1, #1
 8019972:	fa01 f303 	lsl.w	r3, r1, r3
 8019976:	43db      	mvns	r3, r3
 8019978:	401a      	ands	r2, r3
 801997a:	494b      	ldr	r1, [pc, #300]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 801997c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801997e:	00db      	lsls	r3, r3, #3
 8019980:	440b      	add	r3, r1
 8019982:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019984:	f3ef 8310 	mrs	r3, PRIMASK
 8019988:	61bb      	str	r3, [r7, #24]
  return(result);
 801998a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801998c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801998e:	b672      	cpsid	i
}
 8019990:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019992:	4b46      	ldr	r3, [pc, #280]	; (8019aac <UTIL_SEQ_Run+0x1f0>)
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	2201      	movs	r2, #1
 8019998:	fa02 f303 	lsl.w	r3, r2, r3
 801999c:	43da      	mvns	r2, r3
 801999e:	4b3e      	ldr	r3, [pc, #248]	; (8019a98 <UTIL_SEQ_Run+0x1dc>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	4013      	ands	r3, r2
 80199a4:	4a3c      	ldr	r2, [pc, #240]	; (8019a98 <UTIL_SEQ_Run+0x1dc>)
 80199a6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80199a8:	2301      	movs	r3, #1
 80199aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80199ac:	e013      	b.n	80199d6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80199ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199b0:	3b01      	subs	r3, #1
 80199b2:	4a3d      	ldr	r2, [pc, #244]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 80199b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80199b8:	4b3c      	ldr	r3, [pc, #240]	; (8019aac <UTIL_SEQ_Run+0x1f0>)
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	2201      	movs	r2, #1
 80199be:	fa02 f303 	lsl.w	r3, r2, r3
 80199c2:	43da      	mvns	r2, r3
 80199c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199c6:	3b01      	subs	r3, #1
 80199c8:	400a      	ands	r2, r1
 80199ca:	4937      	ldr	r1, [pc, #220]	; (8019aa8 <UTIL_SEQ_Run+0x1ec>)
 80199cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80199d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199d2:	3b01      	subs	r3, #1
 80199d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80199d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d1e8      	bne.n	80199ae <UTIL_SEQ_Run+0xf2>
 80199dc:	6a3b      	ldr	r3, [r7, #32]
 80199de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199e0:	697b      	ldr	r3, [r7, #20]
 80199e2:	f383 8810 	msr	PRIMASK, r3
}
 80199e6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80199e8:	4b30      	ldr	r3, [pc, #192]	; (8019aac <UTIL_SEQ_Run+0x1f0>)
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	4a30      	ldr	r2, [pc, #192]	; (8019ab0 <UTIL_SEQ_Run+0x1f4>)
 80199ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80199f2:	4798      	blx	r3

    local_taskset = TaskSet;
 80199f4:	4b28      	ldr	r3, [pc, #160]	; (8019a98 <UTIL_SEQ_Run+0x1dc>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80199fa:	4b28      	ldr	r3, [pc, #160]	; (8019a9c <UTIL_SEQ_Run+0x1e0>)
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8019a00:	4b27      	ldr	r3, [pc, #156]	; (8019aa0 <UTIL_SEQ_Run+0x1e4>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8019a06:	4b27      	ldr	r3, [pc, #156]	; (8019aa4 <UTIL_SEQ_Run+0x1e8>)
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a10:	401a      	ands	r2, r3
 8019a12:	4b20      	ldr	r3, [pc, #128]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	4013      	ands	r3, r2
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d005      	beq.n	8019a28 <UTIL_SEQ_Run+0x16c>
 8019a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a20:	4013      	ands	r3, r2
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	f43f af64 	beq.w	80198f0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019a28:	4b20      	ldr	r3, [pc, #128]	; (8019aac <UTIL_SEQ_Run+0x1f0>)
 8019a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a2e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019a30:	f000 f88e 	bl	8019b50 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a34:	f3ef 8310 	mrs	r3, PRIMASK
 8019a38:	613b      	str	r3, [r7, #16]
  return(result);
 8019a3a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a3e:	b672      	cpsid	i
}
 8019a40:	bf00      	nop
  local_taskset = TaskSet;
 8019a42:	4b15      	ldr	r3, [pc, #84]	; (8019a98 <UTIL_SEQ_Run+0x1dc>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8019a48:	4b14      	ldr	r3, [pc, #80]	; (8019a9c <UTIL_SEQ_Run+0x1e0>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8019a4e:	4b14      	ldr	r3, [pc, #80]	; (8019aa0 <UTIL_SEQ_Run+0x1e4>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a58:	401a      	ands	r2, r3
 8019a5a:	4b0e      	ldr	r3, [pc, #56]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	4013      	ands	r3, r2
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d107      	bne.n	8019a74 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019a64:	4b0f      	ldr	r3, [pc, #60]	; (8019aa4 <UTIL_SEQ_Run+0x1e8>)
 8019a66:	681a      	ldr	r2, [r3, #0]
 8019a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a6a:	4013      	ands	r3, r2
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d101      	bne.n	8019a74 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019a70:	f7e7 ff82 	bl	8001978 <UTIL_SEQ_Idle>
 8019a74:	69fb      	ldr	r3, [r7, #28]
 8019a76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	f383 8810 	msr	PRIMASK, r3
}
 8019a7e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8019a80:	f000 f86c 	bl	8019b5c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019a84:	4a03      	ldr	r2, [pc, #12]	; (8019a94 <UTIL_SEQ_Run+0x1d8>)
 8019a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a88:	6013      	str	r3, [r2, #0]

  return;
 8019a8a:	bf00      	nop
}
 8019a8c:	3740      	adds	r7, #64	; 0x40
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	bd80      	pop	{r7, pc}
 8019a92:	bf00      	nop
 8019a94:	20000148 	.word	0x20000148
 8019a98:	20001c8c 	.word	0x20001c8c
 8019a9c:	20001c90 	.word	0x20001c90
 8019aa0:	20000144 	.word	0x20000144
 8019aa4:	20001c94 	.word	0x20001c94
 8019aa8:	20001cac 	.word	0x20001cac
 8019aac:	20001c98 	.word	0x20001c98
 8019ab0:	20001c9c 	.word	0x20001c9c

08019ab4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b088      	sub	sp, #32
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	60f8      	str	r0, [r7, #12]
 8019abc:	60b9      	str	r1, [r7, #8]
 8019abe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8019ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8019ac6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019aca:	b672      	cpsid	i
}
 8019acc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019ace:	68f8      	ldr	r0, [r7, #12]
 8019ad0:	f000 f84a 	bl	8019b68 <SEQ_BitPosition>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	4619      	mov	r1, r3
 8019ad8:	4a06      	ldr	r2, [pc, #24]	; (8019af4 <UTIL_SEQ_RegTask+0x40>)
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019ae0:	69fb      	ldr	r3, [r7, #28]
 8019ae2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ae4:	69bb      	ldr	r3, [r7, #24]
 8019ae6:	f383 8810 	msr	PRIMASK, r3
}
 8019aea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019aec:	bf00      	nop
}
 8019aee:	3720      	adds	r7, #32
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}
 8019af4:	20001c9c 	.word	0x20001c9c

08019af8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019af8:	b480      	push	{r7}
 8019afa:	b087      	sub	sp, #28
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
 8019b00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b02:	f3ef 8310 	mrs	r3, PRIMASK
 8019b06:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b08:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019b0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b0c:	b672      	cpsid	i
}
 8019b0e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019b10:	4b0d      	ldr	r3, [pc, #52]	; (8019b48 <UTIL_SEQ_SetTask+0x50>)
 8019b12:	681a      	ldr	r2, [r3, #0]
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	4313      	orrs	r3, r2
 8019b18:	4a0b      	ldr	r2, [pc, #44]	; (8019b48 <UTIL_SEQ_SetTask+0x50>)
 8019b1a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019b1c:	4a0b      	ldr	r2, [pc, #44]	; (8019b4c <UTIL_SEQ_SetTask+0x54>)
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	431a      	orrs	r2, r3
 8019b28:	4908      	ldr	r1, [pc, #32]	; (8019b4c <UTIL_SEQ_SetTask+0x54>)
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b34:	693b      	ldr	r3, [r7, #16]
 8019b36:	f383 8810 	msr	PRIMASK, r3
}
 8019b3a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019b3c:	bf00      	nop
}
 8019b3e:	371c      	adds	r7, #28
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bc80      	pop	{r7}
 8019b44:	4770      	bx	lr
 8019b46:	bf00      	nop
 8019b48:	20001c8c 	.word	0x20001c8c
 8019b4c:	20001cac 	.word	0x20001cac

08019b50 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019b50:	b480      	push	{r7}
 8019b52:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019b54:	bf00      	nop
}
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bc80      	pop	{r7}
 8019b5a:	4770      	bx	lr

08019b5c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019b5c:	b480      	push	{r7}
 8019b5e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019b60:	bf00      	nop
}
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bc80      	pop	{r7}
 8019b66:	4770      	bx	lr

08019b68 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019b68:	b480      	push	{r7}
 8019b6a:	b085      	sub	sp, #20
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8019b70:	2300      	movs	r3, #0
 8019b72:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8019b78:	68bb      	ldr	r3, [r7, #8]
 8019b7a:	0c1b      	lsrs	r3, r3, #16
 8019b7c:	041b      	lsls	r3, r3, #16
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d104      	bne.n	8019b8c <SEQ_BitPosition+0x24>
 8019b82:	2310      	movs	r3, #16
 8019b84:	73fb      	strb	r3, [r7, #15]
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	041b      	lsls	r3, r3, #16
 8019b8a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8019b8c:	68bb      	ldr	r3, [r7, #8]
 8019b8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d105      	bne.n	8019ba2 <SEQ_BitPosition+0x3a>
 8019b96:	7bfb      	ldrb	r3, [r7, #15]
 8019b98:	3308      	adds	r3, #8
 8019b9a:	73fb      	strb	r3, [r7, #15]
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	021b      	lsls	r3, r3, #8
 8019ba0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d105      	bne.n	8019bb8 <SEQ_BitPosition+0x50>
 8019bac:	7bfb      	ldrb	r3, [r7, #15]
 8019bae:	3304      	adds	r3, #4
 8019bb0:	73fb      	strb	r3, [r7, #15]
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	011b      	lsls	r3, r3, #4
 8019bb6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	0f1b      	lsrs	r3, r3, #28
 8019bbc:	4a06      	ldr	r2, [pc, #24]	; (8019bd8 <SEQ_BitPosition+0x70>)
 8019bbe:	5cd2      	ldrb	r2, [r2, r3]
 8019bc0:	7bfb      	ldrb	r3, [r7, #15]
 8019bc2:	4413      	add	r3, r2
 8019bc4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019bc6:	7bfb      	ldrb	r3, [r7, #15]
 8019bc8:	f1c3 031f 	rsb	r3, r3, #31
 8019bcc:	b2db      	uxtb	r3, r3
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3714      	adds	r7, #20
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bc80      	pop	{r7}
 8019bd6:	4770      	bx	lr
 8019bd8:	0801bb50 	.word	0x0801bb50

08019bdc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8019be0:	4b04      	ldr	r3, [pc, #16]	; (8019bf4 <UTIL_TIMER_Init+0x18>)
 8019be2:	2200      	movs	r2, #0
 8019be4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8019be6:	4b04      	ldr	r3, [pc, #16]	; (8019bf8 <UTIL_TIMER_Init+0x1c>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	4798      	blx	r3
 8019bec:	4603      	mov	r3, r0
}
 8019bee:	4618      	mov	r0, r3
 8019bf0:	bd80      	pop	{r7, pc}
 8019bf2:	bf00      	nop
 8019bf4:	20001cb4 	.word	0x20001cb4
 8019bf8:	0801b658 	.word	0x0801b658

08019bfc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b084      	sub	sp, #16
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	60f8      	str	r0, [r7, #12]
 8019c04:	60b9      	str	r1, [r7, #8]
 8019c06:	603b      	str	r3, [r7, #0]
 8019c08:	4613      	mov	r3, r2
 8019c0a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d023      	beq.n	8019c5a <UTIL_TIMER_Create+0x5e>
 8019c12:	683b      	ldr	r3, [r7, #0]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d020      	beq.n	8019c5a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8019c1e:	4b11      	ldr	r3, [pc, #68]	; (8019c64 <UTIL_TIMER_Create+0x68>)
 8019c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c22:	68b8      	ldr	r0, [r7, #8]
 8019c24:	4798      	blx	r3
 8019c26:	4602      	mov	r2, r0
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2200      	movs	r2, #0
 8019c30:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	2200      	movs	r2, #0
 8019c36:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	683a      	ldr	r2, [r7, #0]
 8019c42:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	69ba      	ldr	r2, [r7, #24]
 8019c48:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	79fa      	ldrb	r2, [r7, #7]
 8019c4e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	2200      	movs	r2, #0
 8019c54:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8019c56:	2300      	movs	r3, #0
 8019c58:	e000      	b.n	8019c5c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8019c5a:	2301      	movs	r3, #1
  }
}
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	3710      	adds	r7, #16
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd80      	pop	{r7, pc}
 8019c64:	0801b658 	.word	0x0801b658

08019c68 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b08a      	sub	sp, #40	; 0x28
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019c70:	2300      	movs	r3, #0
 8019c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d056      	beq.n	8019d2a <UTIL_TIMER_Start+0xc2>
 8019c7c:	6878      	ldr	r0, [r7, #4]
 8019c7e:	f000 f9a9 	bl	8019fd4 <TimerExists>
 8019c82:	4603      	mov	r3, r0
 8019c84:	f083 0301 	eor.w	r3, r3, #1
 8019c88:	b2db      	uxtb	r3, r3
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d04d      	beq.n	8019d2a <UTIL_TIMER_Start+0xc2>
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	7a5b      	ldrb	r3, [r3, #9]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d149      	bne.n	8019d2a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c96:	f3ef 8310 	mrs	r3, PRIMASK
 8019c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8019c9c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019c9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ca0:	b672      	cpsid	i
}
 8019ca2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	685b      	ldr	r3, [r3, #4]
 8019ca8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8019caa:	4b24      	ldr	r3, [pc, #144]	; (8019d3c <UTIL_TIMER_Start+0xd4>)
 8019cac:	6a1b      	ldr	r3, [r3, #32]
 8019cae:	4798      	blx	r3
 8019cb0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8019cb2:	6a3a      	ldr	r2, [r7, #32]
 8019cb4:	69bb      	ldr	r3, [r7, #24]
 8019cb6:	429a      	cmp	r2, r3
 8019cb8:	d201      	bcs.n	8019cbe <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8019cba:	69bb      	ldr	r3, [r7, #24]
 8019cbc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	6a3a      	ldr	r2, [r7, #32]
 8019cc2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	2201      	movs	r2, #1
 8019cce:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8019cd6:	4b1a      	ldr	r3, [pc, #104]	; (8019d40 <UTIL_TIMER_Start+0xd8>)
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d106      	bne.n	8019cec <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8019cde:	4b17      	ldr	r3, [pc, #92]	; (8019d3c <UTIL_TIMER_Start+0xd4>)
 8019ce0:	691b      	ldr	r3, [r3, #16]
 8019ce2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f000 f9eb 	bl	801a0c0 <TimerInsertNewHeadTimer>
 8019cea:	e017      	b.n	8019d1c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8019cec:	4b13      	ldr	r3, [pc, #76]	; (8019d3c <UTIL_TIMER_Start+0xd4>)
 8019cee:	699b      	ldr	r3, [r3, #24]
 8019cf0:	4798      	blx	r3
 8019cf2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	681a      	ldr	r2, [r3, #0]
 8019cf8:	697b      	ldr	r3, [r7, #20]
 8019cfa:	441a      	add	r2, r3
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	681a      	ldr	r2, [r3, #0]
 8019d04:	4b0e      	ldr	r3, [pc, #56]	; (8019d40 <UTIL_TIMER_Start+0xd8>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d203      	bcs.n	8019d16 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8019d0e:	6878      	ldr	r0, [r7, #4]
 8019d10:	f000 f9d6 	bl	801a0c0 <TimerInsertNewHeadTimer>
 8019d14:	e002      	b.n	8019d1c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8019d16:	6878      	ldr	r0, [r7, #4]
 8019d18:	f000 f9a2 	bl	801a060 <TimerInsertTimer>
 8019d1c:	69fb      	ldr	r3, [r7, #28]
 8019d1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	f383 8810 	msr	PRIMASK, r3
}
 8019d26:	bf00      	nop
  {
 8019d28:	e002      	b.n	8019d30 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8019d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	3728      	adds	r7, #40	; 0x28
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	0801b658 	.word	0x0801b658
 8019d40:	20001cb4 	.word	0x20001cb4

08019d44 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b088      	sub	sp, #32
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d05b      	beq.n	8019e0e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d56:	f3ef 8310 	mrs	r3, PRIMASK
 8019d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d5c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d60:	b672      	cpsid	i
}
 8019d62:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8019d64:	4b2d      	ldr	r3, [pc, #180]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8019d6a:	4b2c      	ldr	r3, [pc, #176]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	2201      	movs	r2, #1
 8019d74:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8019d76:	4b29      	ldr	r3, [pc, #164]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d041      	beq.n	8019e02 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	2200      	movs	r2, #0
 8019d82:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8019d84:	4b25      	ldr	r3, [pc, #148]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	687a      	ldr	r2, [r7, #4]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d134      	bne.n	8019df8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8019d8e:	4b23      	ldr	r3, [pc, #140]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	2200      	movs	r2, #0
 8019d94:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8019d96:	4b21      	ldr	r3, [pc, #132]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	695b      	ldr	r3, [r3, #20]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d00a      	beq.n	8019db6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8019da0:	4b1e      	ldr	r3, [pc, #120]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	695b      	ldr	r3, [r3, #20]
 8019da6:	4a1d      	ldr	r2, [pc, #116]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019da8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8019daa:	4b1c      	ldr	r3, [pc, #112]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	4618      	mov	r0, r3
 8019db0:	f000 f92c 	bl	801a00c <TimerSetTimeout>
 8019db4:	e023      	b.n	8019dfe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8019db6:	4b1a      	ldr	r3, [pc, #104]	; (8019e20 <UTIL_TIMER_Stop+0xdc>)
 8019db8:	68db      	ldr	r3, [r3, #12]
 8019dba:	4798      	blx	r3
            TimerListHead = NULL;
 8019dbc:	4b17      	ldr	r3, [pc, #92]	; (8019e1c <UTIL_TIMER_Stop+0xd8>)
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	601a      	str	r2, [r3, #0]
 8019dc2:	e01c      	b.n	8019dfe <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8019dc4:	697a      	ldr	r2, [r7, #20]
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	d110      	bne.n	8019dee <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	695b      	ldr	r3, [r3, #20]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d006      	beq.n	8019de2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	695b      	ldr	r3, [r3, #20]
 8019dd8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019dda:	69bb      	ldr	r3, [r7, #24]
 8019ddc:	697a      	ldr	r2, [r7, #20]
 8019dde:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8019de0:	e00d      	b.n	8019dfe <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8019de2:	2300      	movs	r3, #0
 8019de4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019de6:	69bb      	ldr	r3, [r7, #24]
 8019de8:	697a      	ldr	r2, [r7, #20]
 8019dea:	615a      	str	r2, [r3, #20]
            break;
 8019dec:	e007      	b.n	8019dfe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	695b      	ldr	r3, [r3, #20]
 8019df6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8019df8:	697b      	ldr	r3, [r7, #20]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d1e2      	bne.n	8019dc4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	77fb      	strb	r3, [r7, #31]
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	f383 8810 	msr	PRIMASK, r3
}
 8019e0c:	e001      	b.n	8019e12 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8019e0e:	2301      	movs	r3, #1
 8019e10:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8019e12:	7ffb      	ldrb	r3, [r7, #31]
}
 8019e14:	4618      	mov	r0, r3
 8019e16:	3720      	adds	r7, #32
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	20001cb4 	.word	0x20001cb4
 8019e20:	0801b658 	.word	0x0801b658

08019e24 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b084      	sub	sp, #16
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
 8019e2c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d102      	bne.n	8019e3e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8019e38:	2301      	movs	r3, #1
 8019e3a:	73fb      	strb	r3, [r7, #15]
 8019e3c:	e014      	b.n	8019e68 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8019e3e:	4b0d      	ldr	r3, [pc, #52]	; (8019e74 <UTIL_TIMER_SetPeriod+0x50>)
 8019e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e42:	6838      	ldr	r0, [r7, #0]
 8019e44:	4798      	blx	r3
 8019e46:	4602      	mov	r2, r0
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8019e4c:	6878      	ldr	r0, [r7, #4]
 8019e4e:	f000 f8c1 	bl	8019fd4 <TimerExists>
 8019e52:	4603      	mov	r3, r0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d007      	beq.n	8019e68 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	f7ff ff73 	bl	8019d44 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8019e5e:	6878      	ldr	r0, [r7, #4]
 8019e60:	f7ff ff02 	bl	8019c68 <UTIL_TIMER_Start>
 8019e64:	4603      	mov	r3, r0
 8019e66:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8019e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	3710      	adds	r7, #16
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}
 8019e72:	bf00      	nop
 8019e74:	0801b658 	.word	0x0801b658

08019e78 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 8019e78:	b590      	push	{r4, r7, lr}
 8019e7a:	b089      	sub	sp, #36	; 0x24
 8019e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8019e82:	60bb      	str	r3, [r7, #8]
  return(result);
 8019e84:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019e86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e88:	b672      	cpsid	i
}
 8019e8a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8019e8c:	4b38      	ldr	r3, [pc, #224]	; (8019f70 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019e8e:	695b      	ldr	r3, [r3, #20]
 8019e90:	4798      	blx	r3
 8019e92:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8019e94:	4b36      	ldr	r3, [pc, #216]	; (8019f70 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019e96:	691b      	ldr	r3, [r3, #16]
 8019e98:	4798      	blx	r3
 8019e9a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8019e9c:	693a      	ldr	r2, [r7, #16]
 8019e9e:	697b      	ldr	r3, [r7, #20]
 8019ea0:	1ad3      	subs	r3, r2, r3
 8019ea2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8019ea4:	4b33      	ldr	r3, [pc, #204]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d037      	beq.n	8019f1c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 8019eac:	4b31      	ldr	r3, [pc, #196]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 8019eb2:	69fb      	ldr	r3, [r7, #28]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	68fa      	ldr	r2, [r7, #12]
 8019eb8:	429a      	cmp	r2, r3
 8019eba:	d206      	bcs.n	8019eca <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 8019ebc:	69fb      	ldr	r3, [r7, #28]
 8019ebe:	681a      	ldr	r2, [r3, #0]
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	1ad2      	subs	r2, r2, r3
 8019ec4:	69fb      	ldr	r3, [r7, #28]
 8019ec6:	601a      	str	r2, [r3, #0]
 8019ec8:	e002      	b.n	8019ed0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 8019eca:	69fb      	ldr	r3, [r7, #28]
 8019ecc:	2200      	movs	r2, #0
 8019ece:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 8019ed0:	69fb      	ldr	r3, [r7, #28]
 8019ed2:	695b      	ldr	r3, [r3, #20]
 8019ed4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 8019ed6:	69fb      	ldr	r3, [r7, #28]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d1ea      	bne.n	8019eb2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8019edc:	e01e      	b.n	8019f1c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 8019ede:	4b25      	ldr	r3, [pc, #148]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 8019ee4:	4b23      	ldr	r3, [pc, #140]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	695b      	ldr	r3, [r3, #20]
 8019eea:	4a22      	ldr	r2, [pc, #136]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019eec:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 8019eee:	69fb      	ldr	r3, [r7, #28]
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 8019ef4:	69fb      	ldr	r3, [r7, #28]
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8019efa:	69fb      	ldr	r3, [r7, #28]
 8019efc:	68db      	ldr	r3, [r3, #12]
 8019efe:	69fa      	ldr	r2, [r7, #28]
 8019f00:	6912      	ldr	r2, [r2, #16]
 8019f02:	4610      	mov	r0, r2
 8019f04:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8019f06:	69fb      	ldr	r3, [r7, #28]
 8019f08:	7adb      	ldrb	r3, [r3, #11]
 8019f0a:	2b01      	cmp	r3, #1
 8019f0c:	d106      	bne.n	8019f1c <UTIL_TIMER_IRQ_Handler+0xa4>
 8019f0e:	69fb      	ldr	r3, [r7, #28]
 8019f10:	7a9b      	ldrb	r3, [r3, #10]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d102      	bne.n	8019f1c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8019f16:	69f8      	ldr	r0, [r7, #28]
 8019f18:	f7ff fea6 	bl	8019c68 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8019f1c:	4b15      	ldr	r3, [pc, #84]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d00d      	beq.n	8019f40 <UTIL_TIMER_IRQ_Handler+0xc8>
 8019f24:	4b13      	ldr	r3, [pc, #76]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d0d7      	beq.n	8019ede <UTIL_TIMER_IRQ_Handler+0x66>
 8019f2e:	4b11      	ldr	r3, [pc, #68]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	681c      	ldr	r4, [r3, #0]
 8019f34:	4b0e      	ldr	r3, [pc, #56]	; (8019f70 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019f36:	699b      	ldr	r3, [r3, #24]
 8019f38:	4798      	blx	r3
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	429c      	cmp	r4, r3
 8019f3e:	d3ce      	bcc.n	8019ede <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8019f40:	4b0c      	ldr	r3, [pc, #48]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d009      	beq.n	8019f5c <UTIL_TIMER_IRQ_Handler+0xe4>
 8019f48:	4b0a      	ldr	r3, [pc, #40]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	7a1b      	ldrb	r3, [r3, #8]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d104      	bne.n	8019f5c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8019f52:	4b08      	ldr	r3, [pc, #32]	; (8019f74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	4618      	mov	r0, r3
 8019f58:	f000 f858 	bl	801a00c <TimerSetTimeout>
 8019f5c:	69bb      	ldr	r3, [r7, #24]
 8019f5e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f383 8810 	msr	PRIMASK, r3
}
 8019f66:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8019f68:	bf00      	nop
 8019f6a:	3724      	adds	r7, #36	; 0x24
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bd90      	pop	{r4, r7, pc}
 8019f70:	0801b658 	.word	0x0801b658
 8019f74:	20001cb4 	.word	0x20001cb4

08019f78 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b082      	sub	sp, #8
 8019f7c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8019f7e:	4b06      	ldr	r3, [pc, #24]	; (8019f98 <UTIL_TIMER_GetCurrentTime+0x20>)
 8019f80:	69db      	ldr	r3, [r3, #28]
 8019f82:	4798      	blx	r3
 8019f84:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8019f86:	4b04      	ldr	r3, [pc, #16]	; (8019f98 <UTIL_TIMER_GetCurrentTime+0x20>)
 8019f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f8a:	6878      	ldr	r0, [r7, #4]
 8019f8c:	4798      	blx	r3
 8019f8e:	4603      	mov	r3, r0
}
 8019f90:	4618      	mov	r0, r3
 8019f92:	3708      	adds	r7, #8
 8019f94:	46bd      	mov	sp, r7
 8019f96:	bd80      	pop	{r7, pc}
 8019f98:	0801b658 	.word	0x0801b658

08019f9c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b084      	sub	sp, #16
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8019fa4:	4b0a      	ldr	r3, [pc, #40]	; (8019fd0 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019fa6:	69db      	ldr	r3, [r3, #28]
 8019fa8:	4798      	blx	r3
 8019faa:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8019fac:	4b08      	ldr	r3, [pc, #32]	; (8019fd0 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fb0:	6878      	ldr	r0, [r7, #4]
 8019fb2:	4798      	blx	r3
 8019fb4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8019fb6:	4b06      	ldr	r3, [pc, #24]	; (8019fd0 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fba:	68f9      	ldr	r1, [r7, #12]
 8019fbc:	68ba      	ldr	r2, [r7, #8]
 8019fbe:	1a8a      	subs	r2, r1, r2
 8019fc0:	4610      	mov	r0, r2
 8019fc2:	4798      	blx	r3
 8019fc4:	4603      	mov	r3, r0
}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3710      	adds	r7, #16
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	0801b658 	.word	0x0801b658

08019fd4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8019fd4:	b480      	push	{r7}
 8019fd6:	b085      	sub	sp, #20
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019fdc:	4b0a      	ldr	r3, [pc, #40]	; (801a008 <TimerExists+0x34>)
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8019fe2:	e008      	b.n	8019ff6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8019fe4:	68fa      	ldr	r2, [r7, #12]
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d101      	bne.n	8019ff0 <TimerExists+0x1c>
    {
      return true;
 8019fec:	2301      	movs	r3, #1
 8019fee:	e006      	b.n	8019ffe <TimerExists+0x2a>
    }
    cur = cur->Next;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	695b      	ldr	r3, [r3, #20]
 8019ff4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d1f3      	bne.n	8019fe4 <TimerExists+0x10>
  }
  return false;
 8019ffc:	2300      	movs	r3, #0
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	3714      	adds	r7, #20
 801a002:	46bd      	mov	sp, r7
 801a004:	bc80      	pop	{r7}
 801a006:	4770      	bx	lr
 801a008:	20001cb4 	.word	0x20001cb4

0801a00c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a00c:	b590      	push	{r4, r7, lr}
 801a00e:	b085      	sub	sp, #20
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a014:	4b11      	ldr	r3, [pc, #68]	; (801a05c <TimerSetTimeout+0x50>)
 801a016:	6a1b      	ldr	r3, [r3, #32]
 801a018:	4798      	blx	r3
 801a01a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2201      	movs	r2, #1
 801a020:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	681c      	ldr	r4, [r3, #0]
 801a026:	4b0d      	ldr	r3, [pc, #52]	; (801a05c <TimerSetTimeout+0x50>)
 801a028:	699b      	ldr	r3, [r3, #24]
 801a02a:	4798      	blx	r3
 801a02c:	4602      	mov	r2, r0
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	4413      	add	r3, r2
 801a032:	429c      	cmp	r4, r3
 801a034:	d207      	bcs.n	801a046 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a036:	4b09      	ldr	r3, [pc, #36]	; (801a05c <TimerSetTimeout+0x50>)
 801a038:	699b      	ldr	r3, [r3, #24]
 801a03a:	4798      	blx	r3
 801a03c:	4602      	mov	r2, r0
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	441a      	add	r2, r3
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a046:	4b05      	ldr	r3, [pc, #20]	; (801a05c <TimerSetTimeout+0x50>)
 801a048:	689b      	ldr	r3, [r3, #8]
 801a04a:	687a      	ldr	r2, [r7, #4]
 801a04c:	6812      	ldr	r2, [r2, #0]
 801a04e:	4610      	mov	r0, r2
 801a050:	4798      	blx	r3
}
 801a052:	bf00      	nop
 801a054:	3714      	adds	r7, #20
 801a056:	46bd      	mov	sp, r7
 801a058:	bd90      	pop	{r4, r7, pc}
 801a05a:	bf00      	nop
 801a05c:	0801b658 	.word	0x0801b658

0801a060 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a060:	b480      	push	{r7}
 801a062:	b085      	sub	sp, #20
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a068:	4b14      	ldr	r3, [pc, #80]	; (801a0bc <TimerInsertTimer+0x5c>)
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a06e:	4b13      	ldr	r3, [pc, #76]	; (801a0bc <TimerInsertTimer+0x5c>)
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	695b      	ldr	r3, [r3, #20]
 801a074:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a076:	e012      	b.n	801a09e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681a      	ldr	r2, [r3, #0]
 801a07c:	68bb      	ldr	r3, [r7, #8]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	429a      	cmp	r2, r3
 801a082:	d905      	bls.n	801a090 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	695b      	ldr	r3, [r3, #20]
 801a08c:	60bb      	str	r3, [r7, #8]
 801a08e:	e006      	b.n	801a09e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	687a      	ldr	r2, [r7, #4]
 801a094:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	68ba      	ldr	r2, [r7, #8]
 801a09a:	615a      	str	r2, [r3, #20]
        return;
 801a09c:	e009      	b.n	801a0b2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	695b      	ldr	r3, [r3, #20]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d1e8      	bne.n	801a078 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	615a      	str	r2, [r3, #20]
}
 801a0b2:	3714      	adds	r7, #20
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bc80      	pop	{r7}
 801a0b8:	4770      	bx	lr
 801a0ba:	bf00      	nop
 801a0bc:	20001cb4 	.word	0x20001cb4

0801a0c0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b084      	sub	sp, #16
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a0c8:	4b0b      	ldr	r3, [pc, #44]	; (801a0f8 <TimerInsertNewHeadTimer+0x38>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d002      	beq.n	801a0da <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	68fa      	ldr	r2, [r7, #12]
 801a0de:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a0e0:	4a05      	ldr	r2, [pc, #20]	; (801a0f8 <TimerInsertNewHeadTimer+0x38>)
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a0e6:	4b04      	ldr	r3, [pc, #16]	; (801a0f8 <TimerInsertNewHeadTimer+0x38>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f7ff ff8e 	bl	801a00c <TimerSetTimeout>
}
 801a0f0:	bf00      	nop
 801a0f2:	3710      	adds	r7, #16
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	bd80      	pop	{r7, pc}
 801a0f8:	20001cb4 	.word	0x20001cb4

0801a0fc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a100:	2218      	movs	r2, #24
 801a102:	2100      	movs	r1, #0
 801a104:	4807      	ldr	r0, [pc, #28]	; (801a124 <UTIL_ADV_TRACE_Init+0x28>)
 801a106:	f7fe fff6 	bl	80190f6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a10a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a10e:	2100      	movs	r1, #0
 801a110:	4805      	ldr	r0, [pc, #20]	; (801a128 <UTIL_ADV_TRACE_Init+0x2c>)
 801a112:	f7fe fff0 	bl	80190f6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a116:	4b05      	ldr	r3, [pc, #20]	; (801a12c <UTIL_ADV_TRACE_Init+0x30>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	4805      	ldr	r0, [pc, #20]	; (801a130 <UTIL_ADV_TRACE_Init+0x34>)
 801a11c:	4798      	blx	r3
 801a11e:	4603      	mov	r3, r0
}
 801a120:	4618      	mov	r0, r3
 801a122:	bd80      	pop	{r7, pc}
 801a124:	20001cb8 	.word	0x20001cb8
 801a128:	20001cd0 	.word	0x20001cd0
 801a12c:	0801b698 	.word	0x0801b698
 801a130:	0801a39d 	.word	0x0801a39d

0801a134 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a134:	b480      	push	{r7}
 801a136:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a138:	4b06      	ldr	r3, [pc, #24]	; (801a154 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a13a:	8a5a      	ldrh	r2, [r3, #18]
 801a13c:	4b05      	ldr	r3, [pc, #20]	; (801a154 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a13e:	8a1b      	ldrh	r3, [r3, #16]
 801a140:	429a      	cmp	r2, r3
 801a142:	d101      	bne.n	801a148 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a144:	2301      	movs	r3, #1
 801a146:	e000      	b.n	801a14a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a148:	2300      	movs	r3, #0
}
 801a14a:	4618      	mov	r0, r3
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bc80      	pop	{r7}
 801a150:	4770      	bx	lr
 801a152:	bf00      	nop
 801a154:	20001cb8 	.word	0x20001cb8

0801a158 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a158:	b408      	push	{r3}
 801a15a:	b580      	push	{r7, lr}
 801a15c:	b08d      	sub	sp, #52	; 0x34
 801a15e:	af00      	add	r7, sp, #0
 801a160:	60f8      	str	r0, [r7, #12]
 801a162:	60b9      	str	r1, [r7, #8]
 801a164:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a166:	2300      	movs	r3, #0
 801a168:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a16a:	2300      	movs	r3, #0
 801a16c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a16e:	4b37      	ldr	r3, [pc, #220]	; (801a24c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a170:	7a1b      	ldrb	r3, [r3, #8]
 801a172:	461a      	mov	r2, r3
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	4293      	cmp	r3, r2
 801a178:	d902      	bls.n	801a180 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a17a:	f06f 0304 	mvn.w	r3, #4
 801a17e:	e05e      	b.n	801a23e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a180:	4b32      	ldr	r3, [pc, #200]	; (801a24c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a182:	68da      	ldr	r2, [r3, #12]
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	4013      	ands	r3, r2
 801a188:	68ba      	ldr	r2, [r7, #8]
 801a18a:	429a      	cmp	r2, r3
 801a18c:	d002      	beq.n	801a194 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a18e:	f06f 0305 	mvn.w	r3, #5
 801a192:	e054      	b.n	801a23e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a194:	4b2d      	ldr	r3, [pc, #180]	; (801a24c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a196:	685b      	ldr	r3, [r3, #4]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d00a      	beq.n	801a1b2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d007      	beq.n	801a1b2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a1a2:	4b2a      	ldr	r3, [pc, #168]	; (801a24c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a1a4:	685b      	ldr	r3, [r3, #4]
 801a1a6:	f107 0116 	add.w	r1, r7, #22
 801a1aa:	f107 0218 	add.w	r2, r7, #24
 801a1ae:	4610      	mov	r0, r2
 801a1b0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a1b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a1bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a1c0:	4823      	ldr	r0, [pc, #140]	; (801a250 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a1c2:	f7ff fa25 	bl	8019610 <tiny_vsnprintf_like>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a1ca:	f000 f9f1 	bl	801a5b0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a1ce:	8afa      	ldrh	r2, [r7, #22]
 801a1d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a1d2:	4413      	add	r3, r2
 801a1d4:	b29b      	uxth	r3, r3
 801a1d6:	f107 0214 	add.w	r2, r7, #20
 801a1da:	4611      	mov	r1, r2
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f000 f969 	bl	801a4b4 <TRACE_AllocateBufer>
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1e8:	d025      	beq.n	801a236 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a1ee:	e00e      	b.n	801a20e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a1f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a1f2:	8aba      	ldrh	r2, [r7, #20]
 801a1f4:	3330      	adds	r3, #48	; 0x30
 801a1f6:	443b      	add	r3, r7
 801a1f8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a1fc:	4b15      	ldr	r3, [pc, #84]	; (801a254 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a1fe:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a200:	8abb      	ldrh	r3, [r7, #20]
 801a202:	3301      	adds	r3, #1
 801a204:	b29b      	uxth	r3, r3
 801a206:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a20a:	3301      	adds	r3, #1
 801a20c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a20e:	8afb      	ldrh	r3, [r7, #22]
 801a210:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a212:	429a      	cmp	r2, r3
 801a214:	d3ec      	bcc.n	801a1f0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a216:	8abb      	ldrh	r3, [r7, #20]
 801a218:	461a      	mov	r2, r3
 801a21a:	4b0e      	ldr	r3, [pc, #56]	; (801a254 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a21c:	18d0      	adds	r0, r2, r3
 801a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a222:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a226:	f7ff f9f3 	bl	8019610 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a22a:	f000 f9df 	bl	801a5ec <TRACE_UnLock>

    return TRACE_Send();
 801a22e:	f000 f831 	bl	801a294 <TRACE_Send>
 801a232:	4603      	mov	r3, r0
 801a234:	e003      	b.n	801a23e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a236:	f000 f9d9 	bl	801a5ec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a23a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a23e:	4618      	mov	r0, r3
 801a240:	3734      	adds	r7, #52	; 0x34
 801a242:	46bd      	mov	sp, r7
 801a244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a248:	b001      	add	sp, #4
 801a24a:	4770      	bx	lr
 801a24c:	20001cb8 	.word	0x20001cb8
 801a250:	200020d0 	.word	0x200020d0
 801a254:	20001cd0 	.word	0x20001cd0

0801a258 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a258:	b480      	push	{r7}
 801a25a:	b083      	sub	sp, #12
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a260:	4a03      	ldr	r2, [pc, #12]	; (801a270 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	6053      	str	r3, [r2, #4]
}
 801a266:	bf00      	nop
 801a268:	370c      	adds	r7, #12
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bc80      	pop	{r7}
 801a26e:	4770      	bx	lr
 801a270:	20001cb8 	.word	0x20001cb8

0801a274 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a274:	b480      	push	{r7}
 801a276:	b083      	sub	sp, #12
 801a278:	af00      	add	r7, sp, #0
 801a27a:	4603      	mov	r3, r0
 801a27c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a27e:	4a04      	ldr	r2, [pc, #16]	; (801a290 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a280:	79fb      	ldrb	r3, [r7, #7]
 801a282:	7213      	strb	r3, [r2, #8]
}
 801a284:	bf00      	nop
 801a286:	370c      	adds	r7, #12
 801a288:	46bd      	mov	sp, r7
 801a28a:	bc80      	pop	{r7}
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop
 801a290:	20001cb8 	.word	0x20001cb8

0801a294 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b088      	sub	sp, #32
 801a298:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a29a:	2300      	movs	r3, #0
 801a29c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a29e:	2300      	movs	r3, #0
 801a2a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2a2:	f3ef 8310 	mrs	r3, PRIMASK
 801a2a6:	613b      	str	r3, [r7, #16]
  return(result);
 801a2a8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a2aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a2ac:	b672      	cpsid	i
}
 801a2ae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a2b0:	f000 f9ba 	bl	801a628 <TRACE_IsLocked>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d15d      	bne.n	801a376 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a2ba:	f000 f979 	bl	801a5b0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a2be:	4b34      	ldr	r3, [pc, #208]	; (801a390 <TRACE_Send+0xfc>)
 801a2c0:	8a1a      	ldrh	r2, [r3, #16]
 801a2c2:	4b33      	ldr	r3, [pc, #204]	; (801a390 <TRACE_Send+0xfc>)
 801a2c4:	8a5b      	ldrh	r3, [r3, #18]
 801a2c6:	429a      	cmp	r2, r3
 801a2c8:	d04d      	beq.n	801a366 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a2ca:	4b31      	ldr	r3, [pc, #196]	; (801a390 <TRACE_Send+0xfc>)
 801a2cc:	789b      	ldrb	r3, [r3, #2]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d117      	bne.n	801a302 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a2d2:	4b2f      	ldr	r3, [pc, #188]	; (801a390 <TRACE_Send+0xfc>)
 801a2d4:	881a      	ldrh	r2, [r3, #0]
 801a2d6:	4b2e      	ldr	r3, [pc, #184]	; (801a390 <TRACE_Send+0xfc>)
 801a2d8:	8a1b      	ldrh	r3, [r3, #16]
 801a2da:	1ad3      	subs	r3, r2, r3
 801a2dc:	b29a      	uxth	r2, r3
 801a2de:	4b2c      	ldr	r3, [pc, #176]	; (801a390 <TRACE_Send+0xfc>)
 801a2e0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a2e2:	4b2b      	ldr	r3, [pc, #172]	; (801a390 <TRACE_Send+0xfc>)
 801a2e4:	2202      	movs	r2, #2
 801a2e6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a2e8:	4b29      	ldr	r3, [pc, #164]	; (801a390 <TRACE_Send+0xfc>)
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a2ee:	4b28      	ldr	r3, [pc, #160]	; (801a390 <TRACE_Send+0xfc>)
 801a2f0:	8a9b      	ldrh	r3, [r3, #20]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d105      	bne.n	801a302 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a2f6:	4b26      	ldr	r3, [pc, #152]	; (801a390 <TRACE_Send+0xfc>)
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a2fc:	4b24      	ldr	r3, [pc, #144]	; (801a390 <TRACE_Send+0xfc>)
 801a2fe:	2200      	movs	r2, #0
 801a300:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a302:	4b23      	ldr	r3, [pc, #140]	; (801a390 <TRACE_Send+0xfc>)
 801a304:	789b      	ldrb	r3, [r3, #2]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d115      	bne.n	801a336 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a30a:	4b21      	ldr	r3, [pc, #132]	; (801a390 <TRACE_Send+0xfc>)
 801a30c:	8a5a      	ldrh	r2, [r3, #18]
 801a30e:	4b20      	ldr	r3, [pc, #128]	; (801a390 <TRACE_Send+0xfc>)
 801a310:	8a1b      	ldrh	r3, [r3, #16]
 801a312:	429a      	cmp	r2, r3
 801a314:	d908      	bls.n	801a328 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a316:	4b1e      	ldr	r3, [pc, #120]	; (801a390 <TRACE_Send+0xfc>)
 801a318:	8a5a      	ldrh	r2, [r3, #18]
 801a31a:	4b1d      	ldr	r3, [pc, #116]	; (801a390 <TRACE_Send+0xfc>)
 801a31c:	8a1b      	ldrh	r3, [r3, #16]
 801a31e:	1ad3      	subs	r3, r2, r3
 801a320:	b29a      	uxth	r2, r3
 801a322:	4b1b      	ldr	r3, [pc, #108]	; (801a390 <TRACE_Send+0xfc>)
 801a324:	829a      	strh	r2, [r3, #20]
 801a326:	e006      	b.n	801a336 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a328:	4b19      	ldr	r3, [pc, #100]	; (801a390 <TRACE_Send+0xfc>)
 801a32a:	8a1b      	ldrh	r3, [r3, #16]
 801a32c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a330:	b29a      	uxth	r2, r3
 801a332:	4b17      	ldr	r3, [pc, #92]	; (801a390 <TRACE_Send+0xfc>)
 801a334:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a336:	4b16      	ldr	r3, [pc, #88]	; (801a390 <TRACE_Send+0xfc>)
 801a338:	8a1b      	ldrh	r3, [r3, #16]
 801a33a:	461a      	mov	r2, r3
 801a33c:	4b15      	ldr	r3, [pc, #84]	; (801a394 <TRACE_Send+0x100>)
 801a33e:	4413      	add	r3, r2
 801a340:	61bb      	str	r3, [r7, #24]
 801a342:	697b      	ldr	r3, [r7, #20]
 801a344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	f383 8810 	msr	PRIMASK, r3
}
 801a34c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a34e:	f7e7 fc15 	bl	8001b7c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a352:	4b11      	ldr	r3, [pc, #68]	; (801a398 <TRACE_Send+0x104>)
 801a354:	68db      	ldr	r3, [r3, #12]
 801a356:	4a0e      	ldr	r2, [pc, #56]	; (801a390 <TRACE_Send+0xfc>)
 801a358:	8a92      	ldrh	r2, [r2, #20]
 801a35a:	4611      	mov	r1, r2
 801a35c:	69b8      	ldr	r0, [r7, #24]
 801a35e:	4798      	blx	r3
 801a360:	4603      	mov	r3, r0
 801a362:	77fb      	strb	r3, [r7, #31]
 801a364:	e00d      	b.n	801a382 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a366:	f000 f941 	bl	801a5ec <TRACE_UnLock>
 801a36a:	697b      	ldr	r3, [r7, #20]
 801a36c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	f383 8810 	msr	PRIMASK, r3
}
 801a374:	e005      	b.n	801a382 <TRACE_Send+0xee>
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f383 8810 	msr	PRIMASK, r3
}
 801a380:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a382:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a386:	4618      	mov	r0, r3
 801a388:	3720      	adds	r7, #32
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	bf00      	nop
 801a390:	20001cb8 	.word	0x20001cb8
 801a394:	20001cd0 	.word	0x20001cd0
 801a398:	0801b698 	.word	0x0801b698

0801a39c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a39c:	b580      	push	{r7, lr}
 801a39e:	b088      	sub	sp, #32
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a3ac:	617b      	str	r3, [r7, #20]
  return(result);
 801a3ae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a3b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3b2:	b672      	cpsid	i
}
 801a3b4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a3b6:	4b3c      	ldr	r3, [pc, #240]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3b8:	789b      	ldrb	r3, [r3, #2]
 801a3ba:	2b02      	cmp	r3, #2
 801a3bc:	d106      	bne.n	801a3cc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a3be:	4b3a      	ldr	r3, [pc, #232]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a3c4:	4b38      	ldr	r3, [pc, #224]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	821a      	strh	r2, [r3, #16]
 801a3ca:	e00a      	b.n	801a3e2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a3cc:	4b36      	ldr	r3, [pc, #216]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3ce:	8a1a      	ldrh	r2, [r3, #16]
 801a3d0:	4b35      	ldr	r3, [pc, #212]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3d2:	8a9b      	ldrh	r3, [r3, #20]
 801a3d4:	4413      	add	r3, r2
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	4b32      	ldr	r3, [pc, #200]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3e0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a3e2:	4b31      	ldr	r3, [pc, #196]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3e4:	8a1a      	ldrh	r2, [r3, #16]
 801a3e6:	4b30      	ldr	r3, [pc, #192]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3e8:	8a5b      	ldrh	r3, [r3, #18]
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d04d      	beq.n	801a48a <TRACE_TxCpltCallback+0xee>
 801a3ee:	4b2e      	ldr	r3, [pc, #184]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3f0:	8adb      	ldrh	r3, [r3, #22]
 801a3f2:	2b01      	cmp	r3, #1
 801a3f4:	d149      	bne.n	801a48a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a3f6:	4b2c      	ldr	r3, [pc, #176]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a3f8:	789b      	ldrb	r3, [r3, #2]
 801a3fa:	2b01      	cmp	r3, #1
 801a3fc:	d117      	bne.n	801a42e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a3fe:	4b2a      	ldr	r3, [pc, #168]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a400:	881a      	ldrh	r2, [r3, #0]
 801a402:	4b29      	ldr	r3, [pc, #164]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a404:	8a1b      	ldrh	r3, [r3, #16]
 801a406:	1ad3      	subs	r3, r2, r3
 801a408:	b29a      	uxth	r2, r3
 801a40a:	4b27      	ldr	r3, [pc, #156]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a40c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a40e:	4b26      	ldr	r3, [pc, #152]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a410:	2202      	movs	r2, #2
 801a412:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a414:	4b24      	ldr	r3, [pc, #144]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a416:	2200      	movs	r2, #0
 801a418:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a41a:	4b23      	ldr	r3, [pc, #140]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a41c:	8a9b      	ldrh	r3, [r3, #20]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d105      	bne.n	801a42e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a422:	4b21      	ldr	r3, [pc, #132]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a424:	2200      	movs	r2, #0
 801a426:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a428:	4b1f      	ldr	r3, [pc, #124]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a42a:	2200      	movs	r2, #0
 801a42c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a42e:	4b1e      	ldr	r3, [pc, #120]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a430:	789b      	ldrb	r3, [r3, #2]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d115      	bne.n	801a462 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a436:	4b1c      	ldr	r3, [pc, #112]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a438:	8a5a      	ldrh	r2, [r3, #18]
 801a43a:	4b1b      	ldr	r3, [pc, #108]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a43c:	8a1b      	ldrh	r3, [r3, #16]
 801a43e:	429a      	cmp	r2, r3
 801a440:	d908      	bls.n	801a454 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a442:	4b19      	ldr	r3, [pc, #100]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a444:	8a5a      	ldrh	r2, [r3, #18]
 801a446:	4b18      	ldr	r3, [pc, #96]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a448:	8a1b      	ldrh	r3, [r3, #16]
 801a44a:	1ad3      	subs	r3, r2, r3
 801a44c:	b29a      	uxth	r2, r3
 801a44e:	4b16      	ldr	r3, [pc, #88]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a450:	829a      	strh	r2, [r3, #20]
 801a452:	e006      	b.n	801a462 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a454:	4b14      	ldr	r3, [pc, #80]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a456:	8a1b      	ldrh	r3, [r3, #16]
 801a458:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a45c:	b29a      	uxth	r2, r3
 801a45e:	4b12      	ldr	r3, [pc, #72]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a460:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a462:	4b11      	ldr	r3, [pc, #68]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a464:	8a1b      	ldrh	r3, [r3, #16]
 801a466:	461a      	mov	r2, r3
 801a468:	4b10      	ldr	r3, [pc, #64]	; (801a4ac <TRACE_TxCpltCallback+0x110>)
 801a46a:	4413      	add	r3, r2
 801a46c:	61fb      	str	r3, [r7, #28]
 801a46e:	69bb      	ldr	r3, [r7, #24]
 801a470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a472:	693b      	ldr	r3, [r7, #16]
 801a474:	f383 8810 	msr	PRIMASK, r3
}
 801a478:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a47a:	4b0d      	ldr	r3, [pc, #52]	; (801a4b0 <TRACE_TxCpltCallback+0x114>)
 801a47c:	68db      	ldr	r3, [r3, #12]
 801a47e:	4a0a      	ldr	r2, [pc, #40]	; (801a4a8 <TRACE_TxCpltCallback+0x10c>)
 801a480:	8a92      	ldrh	r2, [r2, #20]
 801a482:	4611      	mov	r1, r2
 801a484:	69f8      	ldr	r0, [r7, #28]
 801a486:	4798      	blx	r3
 801a488:	e00a      	b.n	801a4a0 <TRACE_TxCpltCallback+0x104>
 801a48a:	69bb      	ldr	r3, [r7, #24]
 801a48c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	f383 8810 	msr	PRIMASK, r3
}
 801a494:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a496:	f7e7 fb79 	bl	8001b8c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a49a:	f000 f8a7 	bl	801a5ec <TRACE_UnLock>
  }
}
 801a49e:	bf00      	nop
 801a4a0:	bf00      	nop
 801a4a2:	3720      	adds	r7, #32
 801a4a4:	46bd      	mov	sp, r7
 801a4a6:	bd80      	pop	{r7, pc}
 801a4a8:	20001cb8 	.word	0x20001cb8
 801a4ac:	20001cd0 	.word	0x20001cd0
 801a4b0:	0801b698 	.word	0x0801b698

0801a4b4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	b087      	sub	sp, #28
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	6039      	str	r1, [r7, #0]
 801a4be:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a4c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4c4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4c6:	f3ef 8310 	mrs	r3, PRIMASK
 801a4ca:	60fb      	str	r3, [r7, #12]
  return(result);
 801a4cc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a4ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4d0:	b672      	cpsid	i
}
 801a4d2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a4d4:	4b35      	ldr	r3, [pc, #212]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a4d6:	8a5a      	ldrh	r2, [r3, #18]
 801a4d8:	4b34      	ldr	r3, [pc, #208]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a4da:	8a1b      	ldrh	r3, [r3, #16]
 801a4dc:	429a      	cmp	r2, r3
 801a4de:	d11b      	bne.n	801a518 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a4e0:	4b32      	ldr	r3, [pc, #200]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a4e2:	8a5b      	ldrh	r3, [r3, #18]
 801a4e4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a4e8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a4ea:	88fa      	ldrh	r2, [r7, #6]
 801a4ec:	8afb      	ldrh	r3, [r7, #22]
 801a4ee:	429a      	cmp	r2, r3
 801a4f0:	d33a      	bcc.n	801a568 <TRACE_AllocateBufer+0xb4>
 801a4f2:	4b2e      	ldr	r3, [pc, #184]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a4f4:	8a1b      	ldrh	r3, [r3, #16]
 801a4f6:	88fa      	ldrh	r2, [r7, #6]
 801a4f8:	429a      	cmp	r2, r3
 801a4fa:	d235      	bcs.n	801a568 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a4fc:	4b2b      	ldr	r3, [pc, #172]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a4fe:	2201      	movs	r2, #1
 801a500:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a502:	4b2a      	ldr	r3, [pc, #168]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a504:	8a5a      	ldrh	r2, [r3, #18]
 801a506:	4b29      	ldr	r3, [pc, #164]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a508:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a50a:	4b28      	ldr	r3, [pc, #160]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a50c:	8a1b      	ldrh	r3, [r3, #16]
 801a50e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a510:	4b26      	ldr	r3, [pc, #152]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a512:	2200      	movs	r2, #0
 801a514:	825a      	strh	r2, [r3, #18]
 801a516:	e027      	b.n	801a568 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a518:	4b24      	ldr	r3, [pc, #144]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a51a:	8a5a      	ldrh	r2, [r3, #18]
 801a51c:	4b23      	ldr	r3, [pc, #140]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a51e:	8a1b      	ldrh	r3, [r3, #16]
 801a520:	429a      	cmp	r2, r3
 801a522:	d91b      	bls.n	801a55c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a524:	4b21      	ldr	r3, [pc, #132]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a526:	8a5b      	ldrh	r3, [r3, #18]
 801a528:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a52c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801a52e:	88fa      	ldrh	r2, [r7, #6]
 801a530:	8afb      	ldrh	r3, [r7, #22]
 801a532:	429a      	cmp	r2, r3
 801a534:	d318      	bcc.n	801a568 <TRACE_AllocateBufer+0xb4>
 801a536:	4b1d      	ldr	r3, [pc, #116]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a538:	8a1b      	ldrh	r3, [r3, #16]
 801a53a:	88fa      	ldrh	r2, [r7, #6]
 801a53c:	429a      	cmp	r2, r3
 801a53e:	d213      	bcs.n	801a568 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a540:	4b1a      	ldr	r3, [pc, #104]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a542:	2201      	movs	r2, #1
 801a544:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a546:	4b19      	ldr	r3, [pc, #100]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a548:	8a5a      	ldrh	r2, [r3, #18]
 801a54a:	4b18      	ldr	r3, [pc, #96]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a54c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a54e:	4b17      	ldr	r3, [pc, #92]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a550:	8a1b      	ldrh	r3, [r3, #16]
 801a552:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a554:	4b15      	ldr	r3, [pc, #84]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a556:	2200      	movs	r2, #0
 801a558:	825a      	strh	r2, [r3, #18]
 801a55a:	e005      	b.n	801a568 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801a55c:	4b13      	ldr	r3, [pc, #76]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a55e:	8a1a      	ldrh	r2, [r3, #16]
 801a560:	4b12      	ldr	r3, [pc, #72]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a562:	8a5b      	ldrh	r3, [r3, #18]
 801a564:	1ad3      	subs	r3, r2, r3
 801a566:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801a568:	8afa      	ldrh	r2, [r7, #22]
 801a56a:	88fb      	ldrh	r3, [r7, #6]
 801a56c:	429a      	cmp	r2, r3
 801a56e:	d90f      	bls.n	801a590 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801a570:	4b0e      	ldr	r3, [pc, #56]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a572:	8a5a      	ldrh	r2, [r3, #18]
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a578:	4b0c      	ldr	r3, [pc, #48]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a57a:	8a5a      	ldrh	r2, [r3, #18]
 801a57c:	88fb      	ldrh	r3, [r7, #6]
 801a57e:	4413      	add	r3, r2
 801a580:	b29b      	uxth	r3, r3
 801a582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a586:	b29a      	uxth	r2, r3
 801a588:	4b08      	ldr	r3, [pc, #32]	; (801a5ac <TRACE_AllocateBufer+0xf8>)
 801a58a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801a58c:	2300      	movs	r3, #0
 801a58e:	82bb      	strh	r3, [r7, #20]
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a594:	68bb      	ldr	r3, [r7, #8]
 801a596:	f383 8810 	msr	PRIMASK, r3
}
 801a59a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801a59c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	371c      	adds	r7, #28
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bc80      	pop	{r7}
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop
 801a5ac:	20001cb8 	.word	0x20001cb8

0801a5b0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801a5b0:	b480      	push	{r7}
 801a5b2:	b085      	sub	sp, #20
 801a5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5b6:	f3ef 8310 	mrs	r3, PRIMASK
 801a5ba:	607b      	str	r3, [r7, #4]
  return(result);
 801a5bc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a5be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5c0:	b672      	cpsid	i
}
 801a5c2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801a5c4:	4b08      	ldr	r3, [pc, #32]	; (801a5e8 <TRACE_Lock+0x38>)
 801a5c6:	8adb      	ldrh	r3, [r3, #22]
 801a5c8:	3301      	adds	r3, #1
 801a5ca:	b29a      	uxth	r2, r3
 801a5cc:	4b06      	ldr	r3, [pc, #24]	; (801a5e8 <TRACE_Lock+0x38>)
 801a5ce:	82da      	strh	r2, [r3, #22]
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5d4:	68bb      	ldr	r3, [r7, #8]
 801a5d6:	f383 8810 	msr	PRIMASK, r3
}
 801a5da:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a5dc:	bf00      	nop
 801a5de:	3714      	adds	r7, #20
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bc80      	pop	{r7}
 801a5e4:	4770      	bx	lr
 801a5e6:	bf00      	nop
 801a5e8:	20001cb8 	.word	0x20001cb8

0801a5ec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801a5ec:	b480      	push	{r7}
 801a5ee:	b085      	sub	sp, #20
 801a5f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5f2:	f3ef 8310 	mrs	r3, PRIMASK
 801a5f6:	607b      	str	r3, [r7, #4]
  return(result);
 801a5f8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a5fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5fc:	b672      	cpsid	i
}
 801a5fe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801a600:	4b08      	ldr	r3, [pc, #32]	; (801a624 <TRACE_UnLock+0x38>)
 801a602:	8adb      	ldrh	r3, [r3, #22]
 801a604:	3b01      	subs	r3, #1
 801a606:	b29a      	uxth	r2, r3
 801a608:	4b06      	ldr	r3, [pc, #24]	; (801a624 <TRACE_UnLock+0x38>)
 801a60a:	82da      	strh	r2, [r3, #22]
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a610:	68bb      	ldr	r3, [r7, #8]
 801a612:	f383 8810 	msr	PRIMASK, r3
}
 801a616:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a618:	bf00      	nop
 801a61a:	3714      	adds	r7, #20
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bc80      	pop	{r7}
 801a620:	4770      	bx	lr
 801a622:	bf00      	nop
 801a624:	20001cb8 	.word	0x20001cb8

0801a628 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801a628:	b480      	push	{r7}
 801a62a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801a62c:	4b05      	ldr	r3, [pc, #20]	; (801a644 <TRACE_IsLocked+0x1c>)
 801a62e:	8adb      	ldrh	r3, [r3, #22]
 801a630:	2b00      	cmp	r3, #0
 801a632:	bf14      	ite	ne
 801a634:	2301      	movne	r3, #1
 801a636:	2300      	moveq	r3, #0
 801a638:	b2db      	uxtb	r3, r3
}
 801a63a:	4618      	mov	r0, r3
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bc80      	pop	{r7}
 801a640:	4770      	bx	lr
 801a642:	bf00      	nop
 801a644:	20001cb8 	.word	0x20001cb8

0801a648 <__libc_init_array>:
 801a648:	b570      	push	{r4, r5, r6, lr}
 801a64a:	4d0d      	ldr	r5, [pc, #52]	; (801a680 <__libc_init_array+0x38>)
 801a64c:	4c0d      	ldr	r4, [pc, #52]	; (801a684 <__libc_init_array+0x3c>)
 801a64e:	1b64      	subs	r4, r4, r5
 801a650:	10a4      	asrs	r4, r4, #2
 801a652:	2600      	movs	r6, #0
 801a654:	42a6      	cmp	r6, r4
 801a656:	d109      	bne.n	801a66c <__libc_init_array+0x24>
 801a658:	4d0b      	ldr	r5, [pc, #44]	; (801a688 <__libc_init_array+0x40>)
 801a65a:	4c0c      	ldr	r4, [pc, #48]	; (801a68c <__libc_init_array+0x44>)
 801a65c:	f000 fd2e 	bl	801b0bc <_init>
 801a660:	1b64      	subs	r4, r4, r5
 801a662:	10a4      	asrs	r4, r4, #2
 801a664:	2600      	movs	r6, #0
 801a666:	42a6      	cmp	r6, r4
 801a668:	d105      	bne.n	801a676 <__libc_init_array+0x2e>
 801a66a:	bd70      	pop	{r4, r5, r6, pc}
 801a66c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a670:	4798      	blx	r3
 801a672:	3601      	adds	r6, #1
 801a674:	e7ee      	b.n	801a654 <__libc_init_array+0xc>
 801a676:	f855 3b04 	ldr.w	r3, [r5], #4
 801a67a:	4798      	blx	r3
 801a67c:	3601      	adds	r6, #1
 801a67e:	e7f2      	b.n	801a666 <__libc_init_array+0x1e>
 801a680:	0801bc5c 	.word	0x0801bc5c
 801a684:	0801bc5c 	.word	0x0801bc5c
 801a688:	0801bc5c 	.word	0x0801bc5c
 801a68c:	0801bc60 	.word	0x0801bc60

0801a690 <memset>:
 801a690:	4402      	add	r2, r0
 801a692:	4603      	mov	r3, r0
 801a694:	4293      	cmp	r3, r2
 801a696:	d100      	bne.n	801a69a <memset+0xa>
 801a698:	4770      	bx	lr
 801a69a:	f803 1b01 	strb.w	r1, [r3], #1
 801a69e:	e7f9      	b.n	801a694 <memset+0x4>

0801a6a0 <sniprintf>:
 801a6a0:	b40c      	push	{r2, r3}
 801a6a2:	b530      	push	{r4, r5, lr}
 801a6a4:	4b17      	ldr	r3, [pc, #92]	; (801a704 <sniprintf+0x64>)
 801a6a6:	1e0c      	subs	r4, r1, #0
 801a6a8:	681d      	ldr	r5, [r3, #0]
 801a6aa:	b09d      	sub	sp, #116	; 0x74
 801a6ac:	da08      	bge.n	801a6c0 <sniprintf+0x20>
 801a6ae:	238b      	movs	r3, #139	; 0x8b
 801a6b0:	602b      	str	r3, [r5, #0]
 801a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 801a6b6:	b01d      	add	sp, #116	; 0x74
 801a6b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a6bc:	b002      	add	sp, #8
 801a6be:	4770      	bx	lr
 801a6c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a6c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a6c8:	bf14      	ite	ne
 801a6ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a6ce:	4623      	moveq	r3, r4
 801a6d0:	9304      	str	r3, [sp, #16]
 801a6d2:	9307      	str	r3, [sp, #28]
 801a6d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a6d8:	9002      	str	r0, [sp, #8]
 801a6da:	9006      	str	r0, [sp, #24]
 801a6dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a6e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a6e2:	ab21      	add	r3, sp, #132	; 0x84
 801a6e4:	a902      	add	r1, sp, #8
 801a6e6:	4628      	mov	r0, r5
 801a6e8:	9301      	str	r3, [sp, #4]
 801a6ea:	f000 f869 	bl	801a7c0 <_svfiprintf_r>
 801a6ee:	1c43      	adds	r3, r0, #1
 801a6f0:	bfbc      	itt	lt
 801a6f2:	238b      	movlt	r3, #139	; 0x8b
 801a6f4:	602b      	strlt	r3, [r5, #0]
 801a6f6:	2c00      	cmp	r4, #0
 801a6f8:	d0dd      	beq.n	801a6b6 <sniprintf+0x16>
 801a6fa:	9b02      	ldr	r3, [sp, #8]
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	701a      	strb	r2, [r3, #0]
 801a700:	e7d9      	b.n	801a6b6 <sniprintf+0x16>
 801a702:	bf00      	nop
 801a704:	2000014c 	.word	0x2000014c

0801a708 <__ssputs_r>:
 801a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a70c:	688e      	ldr	r6, [r1, #8]
 801a70e:	429e      	cmp	r6, r3
 801a710:	4682      	mov	sl, r0
 801a712:	460c      	mov	r4, r1
 801a714:	4690      	mov	r8, r2
 801a716:	461f      	mov	r7, r3
 801a718:	d838      	bhi.n	801a78c <__ssputs_r+0x84>
 801a71a:	898a      	ldrh	r2, [r1, #12]
 801a71c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a720:	d032      	beq.n	801a788 <__ssputs_r+0x80>
 801a722:	6825      	ldr	r5, [r4, #0]
 801a724:	6909      	ldr	r1, [r1, #16]
 801a726:	eba5 0901 	sub.w	r9, r5, r1
 801a72a:	6965      	ldr	r5, [r4, #20]
 801a72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a734:	3301      	adds	r3, #1
 801a736:	444b      	add	r3, r9
 801a738:	106d      	asrs	r5, r5, #1
 801a73a:	429d      	cmp	r5, r3
 801a73c:	bf38      	it	cc
 801a73e:	461d      	movcc	r5, r3
 801a740:	0553      	lsls	r3, r2, #21
 801a742:	d531      	bpl.n	801a7a8 <__ssputs_r+0xa0>
 801a744:	4629      	mov	r1, r5
 801a746:	f000 fb61 	bl	801ae0c <_malloc_r>
 801a74a:	4606      	mov	r6, r0
 801a74c:	b950      	cbnz	r0, 801a764 <__ssputs_r+0x5c>
 801a74e:	230c      	movs	r3, #12
 801a750:	f8ca 3000 	str.w	r3, [sl]
 801a754:	89a3      	ldrh	r3, [r4, #12]
 801a756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a75a:	81a3      	strh	r3, [r4, #12]
 801a75c:	f04f 30ff 	mov.w	r0, #4294967295
 801a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a764:	6921      	ldr	r1, [r4, #16]
 801a766:	464a      	mov	r2, r9
 801a768:	f000 fabe 	bl	801ace8 <memcpy>
 801a76c:	89a3      	ldrh	r3, [r4, #12]
 801a76e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a776:	81a3      	strh	r3, [r4, #12]
 801a778:	6126      	str	r6, [r4, #16]
 801a77a:	6165      	str	r5, [r4, #20]
 801a77c:	444e      	add	r6, r9
 801a77e:	eba5 0509 	sub.w	r5, r5, r9
 801a782:	6026      	str	r6, [r4, #0]
 801a784:	60a5      	str	r5, [r4, #8]
 801a786:	463e      	mov	r6, r7
 801a788:	42be      	cmp	r6, r7
 801a78a:	d900      	bls.n	801a78e <__ssputs_r+0x86>
 801a78c:	463e      	mov	r6, r7
 801a78e:	6820      	ldr	r0, [r4, #0]
 801a790:	4632      	mov	r2, r6
 801a792:	4641      	mov	r1, r8
 801a794:	f000 fab6 	bl	801ad04 <memmove>
 801a798:	68a3      	ldr	r3, [r4, #8]
 801a79a:	1b9b      	subs	r3, r3, r6
 801a79c:	60a3      	str	r3, [r4, #8]
 801a79e:	6823      	ldr	r3, [r4, #0]
 801a7a0:	4433      	add	r3, r6
 801a7a2:	6023      	str	r3, [r4, #0]
 801a7a4:	2000      	movs	r0, #0
 801a7a6:	e7db      	b.n	801a760 <__ssputs_r+0x58>
 801a7a8:	462a      	mov	r2, r5
 801a7aa:	f000 fba3 	bl	801aef4 <_realloc_r>
 801a7ae:	4606      	mov	r6, r0
 801a7b0:	2800      	cmp	r0, #0
 801a7b2:	d1e1      	bne.n	801a778 <__ssputs_r+0x70>
 801a7b4:	6921      	ldr	r1, [r4, #16]
 801a7b6:	4650      	mov	r0, sl
 801a7b8:	f000 fabe 	bl	801ad38 <_free_r>
 801a7bc:	e7c7      	b.n	801a74e <__ssputs_r+0x46>
	...

0801a7c0 <_svfiprintf_r>:
 801a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c4:	4698      	mov	r8, r3
 801a7c6:	898b      	ldrh	r3, [r1, #12]
 801a7c8:	061b      	lsls	r3, r3, #24
 801a7ca:	b09d      	sub	sp, #116	; 0x74
 801a7cc:	4607      	mov	r7, r0
 801a7ce:	460d      	mov	r5, r1
 801a7d0:	4614      	mov	r4, r2
 801a7d2:	d50e      	bpl.n	801a7f2 <_svfiprintf_r+0x32>
 801a7d4:	690b      	ldr	r3, [r1, #16]
 801a7d6:	b963      	cbnz	r3, 801a7f2 <_svfiprintf_r+0x32>
 801a7d8:	2140      	movs	r1, #64	; 0x40
 801a7da:	f000 fb17 	bl	801ae0c <_malloc_r>
 801a7de:	6028      	str	r0, [r5, #0]
 801a7e0:	6128      	str	r0, [r5, #16]
 801a7e2:	b920      	cbnz	r0, 801a7ee <_svfiprintf_r+0x2e>
 801a7e4:	230c      	movs	r3, #12
 801a7e6:	603b      	str	r3, [r7, #0]
 801a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7ec:	e0d1      	b.n	801a992 <_svfiprintf_r+0x1d2>
 801a7ee:	2340      	movs	r3, #64	; 0x40
 801a7f0:	616b      	str	r3, [r5, #20]
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 801a7f6:	2320      	movs	r3, #32
 801a7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a800:	2330      	movs	r3, #48	; 0x30
 801a802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a9ac <_svfiprintf_r+0x1ec>
 801a806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a80a:	f04f 0901 	mov.w	r9, #1
 801a80e:	4623      	mov	r3, r4
 801a810:	469a      	mov	sl, r3
 801a812:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a816:	b10a      	cbz	r2, 801a81c <_svfiprintf_r+0x5c>
 801a818:	2a25      	cmp	r2, #37	; 0x25
 801a81a:	d1f9      	bne.n	801a810 <_svfiprintf_r+0x50>
 801a81c:	ebba 0b04 	subs.w	fp, sl, r4
 801a820:	d00b      	beq.n	801a83a <_svfiprintf_r+0x7a>
 801a822:	465b      	mov	r3, fp
 801a824:	4622      	mov	r2, r4
 801a826:	4629      	mov	r1, r5
 801a828:	4638      	mov	r0, r7
 801a82a:	f7ff ff6d 	bl	801a708 <__ssputs_r>
 801a82e:	3001      	adds	r0, #1
 801a830:	f000 80aa 	beq.w	801a988 <_svfiprintf_r+0x1c8>
 801a834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a836:	445a      	add	r2, fp
 801a838:	9209      	str	r2, [sp, #36]	; 0x24
 801a83a:	f89a 3000 	ldrb.w	r3, [sl]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	f000 80a2 	beq.w	801a988 <_svfiprintf_r+0x1c8>
 801a844:	2300      	movs	r3, #0
 801a846:	f04f 32ff 	mov.w	r2, #4294967295
 801a84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a84e:	f10a 0a01 	add.w	sl, sl, #1
 801a852:	9304      	str	r3, [sp, #16]
 801a854:	9307      	str	r3, [sp, #28]
 801a856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a85a:	931a      	str	r3, [sp, #104]	; 0x68
 801a85c:	4654      	mov	r4, sl
 801a85e:	2205      	movs	r2, #5
 801a860:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a864:	4851      	ldr	r0, [pc, #324]	; (801a9ac <_svfiprintf_r+0x1ec>)
 801a866:	f7e5 fc93 	bl	8000190 <memchr>
 801a86a:	9a04      	ldr	r2, [sp, #16]
 801a86c:	b9d8      	cbnz	r0, 801a8a6 <_svfiprintf_r+0xe6>
 801a86e:	06d0      	lsls	r0, r2, #27
 801a870:	bf44      	itt	mi
 801a872:	2320      	movmi	r3, #32
 801a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a878:	0711      	lsls	r1, r2, #28
 801a87a:	bf44      	itt	mi
 801a87c:	232b      	movmi	r3, #43	; 0x2b
 801a87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a882:	f89a 3000 	ldrb.w	r3, [sl]
 801a886:	2b2a      	cmp	r3, #42	; 0x2a
 801a888:	d015      	beq.n	801a8b6 <_svfiprintf_r+0xf6>
 801a88a:	9a07      	ldr	r2, [sp, #28]
 801a88c:	4654      	mov	r4, sl
 801a88e:	2000      	movs	r0, #0
 801a890:	f04f 0c0a 	mov.w	ip, #10
 801a894:	4621      	mov	r1, r4
 801a896:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a89a:	3b30      	subs	r3, #48	; 0x30
 801a89c:	2b09      	cmp	r3, #9
 801a89e:	d94e      	bls.n	801a93e <_svfiprintf_r+0x17e>
 801a8a0:	b1b0      	cbz	r0, 801a8d0 <_svfiprintf_r+0x110>
 801a8a2:	9207      	str	r2, [sp, #28]
 801a8a4:	e014      	b.n	801a8d0 <_svfiprintf_r+0x110>
 801a8a6:	eba0 0308 	sub.w	r3, r0, r8
 801a8aa:	fa09 f303 	lsl.w	r3, r9, r3
 801a8ae:	4313      	orrs	r3, r2
 801a8b0:	9304      	str	r3, [sp, #16]
 801a8b2:	46a2      	mov	sl, r4
 801a8b4:	e7d2      	b.n	801a85c <_svfiprintf_r+0x9c>
 801a8b6:	9b03      	ldr	r3, [sp, #12]
 801a8b8:	1d19      	adds	r1, r3, #4
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	9103      	str	r1, [sp, #12]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	bfbb      	ittet	lt
 801a8c2:	425b      	neglt	r3, r3
 801a8c4:	f042 0202 	orrlt.w	r2, r2, #2
 801a8c8:	9307      	strge	r3, [sp, #28]
 801a8ca:	9307      	strlt	r3, [sp, #28]
 801a8cc:	bfb8      	it	lt
 801a8ce:	9204      	strlt	r2, [sp, #16]
 801a8d0:	7823      	ldrb	r3, [r4, #0]
 801a8d2:	2b2e      	cmp	r3, #46	; 0x2e
 801a8d4:	d10c      	bne.n	801a8f0 <_svfiprintf_r+0x130>
 801a8d6:	7863      	ldrb	r3, [r4, #1]
 801a8d8:	2b2a      	cmp	r3, #42	; 0x2a
 801a8da:	d135      	bne.n	801a948 <_svfiprintf_r+0x188>
 801a8dc:	9b03      	ldr	r3, [sp, #12]
 801a8de:	1d1a      	adds	r2, r3, #4
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	9203      	str	r2, [sp, #12]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	bfb8      	it	lt
 801a8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8ec:	3402      	adds	r4, #2
 801a8ee:	9305      	str	r3, [sp, #20]
 801a8f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801a9b0 <_svfiprintf_r+0x1f0>
 801a8f4:	7821      	ldrb	r1, [r4, #0]
 801a8f6:	2203      	movs	r2, #3
 801a8f8:	4650      	mov	r0, sl
 801a8fa:	f7e5 fc49 	bl	8000190 <memchr>
 801a8fe:	b140      	cbz	r0, 801a912 <_svfiprintf_r+0x152>
 801a900:	2340      	movs	r3, #64	; 0x40
 801a902:	eba0 000a 	sub.w	r0, r0, sl
 801a906:	fa03 f000 	lsl.w	r0, r3, r0
 801a90a:	9b04      	ldr	r3, [sp, #16]
 801a90c:	4303      	orrs	r3, r0
 801a90e:	3401      	adds	r4, #1
 801a910:	9304      	str	r3, [sp, #16]
 801a912:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a916:	4827      	ldr	r0, [pc, #156]	; (801a9b4 <_svfiprintf_r+0x1f4>)
 801a918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a91c:	2206      	movs	r2, #6
 801a91e:	f7e5 fc37 	bl	8000190 <memchr>
 801a922:	2800      	cmp	r0, #0
 801a924:	d038      	beq.n	801a998 <_svfiprintf_r+0x1d8>
 801a926:	4b24      	ldr	r3, [pc, #144]	; (801a9b8 <_svfiprintf_r+0x1f8>)
 801a928:	bb1b      	cbnz	r3, 801a972 <_svfiprintf_r+0x1b2>
 801a92a:	9b03      	ldr	r3, [sp, #12]
 801a92c:	3307      	adds	r3, #7
 801a92e:	f023 0307 	bic.w	r3, r3, #7
 801a932:	3308      	adds	r3, #8
 801a934:	9303      	str	r3, [sp, #12]
 801a936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a938:	4433      	add	r3, r6
 801a93a:	9309      	str	r3, [sp, #36]	; 0x24
 801a93c:	e767      	b.n	801a80e <_svfiprintf_r+0x4e>
 801a93e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a942:	460c      	mov	r4, r1
 801a944:	2001      	movs	r0, #1
 801a946:	e7a5      	b.n	801a894 <_svfiprintf_r+0xd4>
 801a948:	2300      	movs	r3, #0
 801a94a:	3401      	adds	r4, #1
 801a94c:	9305      	str	r3, [sp, #20]
 801a94e:	4619      	mov	r1, r3
 801a950:	f04f 0c0a 	mov.w	ip, #10
 801a954:	4620      	mov	r0, r4
 801a956:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a95a:	3a30      	subs	r2, #48	; 0x30
 801a95c:	2a09      	cmp	r2, #9
 801a95e:	d903      	bls.n	801a968 <_svfiprintf_r+0x1a8>
 801a960:	2b00      	cmp	r3, #0
 801a962:	d0c5      	beq.n	801a8f0 <_svfiprintf_r+0x130>
 801a964:	9105      	str	r1, [sp, #20]
 801a966:	e7c3      	b.n	801a8f0 <_svfiprintf_r+0x130>
 801a968:	fb0c 2101 	mla	r1, ip, r1, r2
 801a96c:	4604      	mov	r4, r0
 801a96e:	2301      	movs	r3, #1
 801a970:	e7f0      	b.n	801a954 <_svfiprintf_r+0x194>
 801a972:	ab03      	add	r3, sp, #12
 801a974:	9300      	str	r3, [sp, #0]
 801a976:	462a      	mov	r2, r5
 801a978:	4b10      	ldr	r3, [pc, #64]	; (801a9bc <_svfiprintf_r+0x1fc>)
 801a97a:	a904      	add	r1, sp, #16
 801a97c:	4638      	mov	r0, r7
 801a97e:	f3af 8000 	nop.w
 801a982:	1c42      	adds	r2, r0, #1
 801a984:	4606      	mov	r6, r0
 801a986:	d1d6      	bne.n	801a936 <_svfiprintf_r+0x176>
 801a988:	89ab      	ldrh	r3, [r5, #12]
 801a98a:	065b      	lsls	r3, r3, #25
 801a98c:	f53f af2c 	bmi.w	801a7e8 <_svfiprintf_r+0x28>
 801a990:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a992:	b01d      	add	sp, #116	; 0x74
 801a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a998:	ab03      	add	r3, sp, #12
 801a99a:	9300      	str	r3, [sp, #0]
 801a99c:	462a      	mov	r2, r5
 801a99e:	4b07      	ldr	r3, [pc, #28]	; (801a9bc <_svfiprintf_r+0x1fc>)
 801a9a0:	a904      	add	r1, sp, #16
 801a9a2:	4638      	mov	r0, r7
 801a9a4:	f000 f87a 	bl	801aa9c <_printf_i>
 801a9a8:	e7eb      	b.n	801a982 <_svfiprintf_r+0x1c2>
 801a9aa:	bf00      	nop
 801a9ac:	0801bb60 	.word	0x0801bb60
 801a9b0:	0801bb66 	.word	0x0801bb66
 801a9b4:	0801bb6a 	.word	0x0801bb6a
 801a9b8:	00000000 	.word	0x00000000
 801a9bc:	0801a709 	.word	0x0801a709

0801a9c0 <_printf_common>:
 801a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9c4:	4616      	mov	r6, r2
 801a9c6:	4699      	mov	r9, r3
 801a9c8:	688a      	ldr	r2, [r1, #8]
 801a9ca:	690b      	ldr	r3, [r1, #16]
 801a9cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a9d0:	4293      	cmp	r3, r2
 801a9d2:	bfb8      	it	lt
 801a9d4:	4613      	movlt	r3, r2
 801a9d6:	6033      	str	r3, [r6, #0]
 801a9d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a9dc:	4607      	mov	r7, r0
 801a9de:	460c      	mov	r4, r1
 801a9e0:	b10a      	cbz	r2, 801a9e6 <_printf_common+0x26>
 801a9e2:	3301      	adds	r3, #1
 801a9e4:	6033      	str	r3, [r6, #0]
 801a9e6:	6823      	ldr	r3, [r4, #0]
 801a9e8:	0699      	lsls	r1, r3, #26
 801a9ea:	bf42      	ittt	mi
 801a9ec:	6833      	ldrmi	r3, [r6, #0]
 801a9ee:	3302      	addmi	r3, #2
 801a9f0:	6033      	strmi	r3, [r6, #0]
 801a9f2:	6825      	ldr	r5, [r4, #0]
 801a9f4:	f015 0506 	ands.w	r5, r5, #6
 801a9f8:	d106      	bne.n	801aa08 <_printf_common+0x48>
 801a9fa:	f104 0a19 	add.w	sl, r4, #25
 801a9fe:	68e3      	ldr	r3, [r4, #12]
 801aa00:	6832      	ldr	r2, [r6, #0]
 801aa02:	1a9b      	subs	r3, r3, r2
 801aa04:	42ab      	cmp	r3, r5
 801aa06:	dc26      	bgt.n	801aa56 <_printf_common+0x96>
 801aa08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa0c:	1e13      	subs	r3, r2, #0
 801aa0e:	6822      	ldr	r2, [r4, #0]
 801aa10:	bf18      	it	ne
 801aa12:	2301      	movne	r3, #1
 801aa14:	0692      	lsls	r2, r2, #26
 801aa16:	d42b      	bmi.n	801aa70 <_printf_common+0xb0>
 801aa18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa1c:	4649      	mov	r1, r9
 801aa1e:	4638      	mov	r0, r7
 801aa20:	47c0      	blx	r8
 801aa22:	3001      	adds	r0, #1
 801aa24:	d01e      	beq.n	801aa64 <_printf_common+0xa4>
 801aa26:	6823      	ldr	r3, [r4, #0]
 801aa28:	68e5      	ldr	r5, [r4, #12]
 801aa2a:	6832      	ldr	r2, [r6, #0]
 801aa2c:	f003 0306 	and.w	r3, r3, #6
 801aa30:	2b04      	cmp	r3, #4
 801aa32:	bf08      	it	eq
 801aa34:	1aad      	subeq	r5, r5, r2
 801aa36:	68a3      	ldr	r3, [r4, #8]
 801aa38:	6922      	ldr	r2, [r4, #16]
 801aa3a:	bf0c      	ite	eq
 801aa3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa40:	2500      	movne	r5, #0
 801aa42:	4293      	cmp	r3, r2
 801aa44:	bfc4      	itt	gt
 801aa46:	1a9b      	subgt	r3, r3, r2
 801aa48:	18ed      	addgt	r5, r5, r3
 801aa4a:	2600      	movs	r6, #0
 801aa4c:	341a      	adds	r4, #26
 801aa4e:	42b5      	cmp	r5, r6
 801aa50:	d11a      	bne.n	801aa88 <_printf_common+0xc8>
 801aa52:	2000      	movs	r0, #0
 801aa54:	e008      	b.n	801aa68 <_printf_common+0xa8>
 801aa56:	2301      	movs	r3, #1
 801aa58:	4652      	mov	r2, sl
 801aa5a:	4649      	mov	r1, r9
 801aa5c:	4638      	mov	r0, r7
 801aa5e:	47c0      	blx	r8
 801aa60:	3001      	adds	r0, #1
 801aa62:	d103      	bne.n	801aa6c <_printf_common+0xac>
 801aa64:	f04f 30ff 	mov.w	r0, #4294967295
 801aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa6c:	3501      	adds	r5, #1
 801aa6e:	e7c6      	b.n	801a9fe <_printf_common+0x3e>
 801aa70:	18e1      	adds	r1, r4, r3
 801aa72:	1c5a      	adds	r2, r3, #1
 801aa74:	2030      	movs	r0, #48	; 0x30
 801aa76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa7a:	4422      	add	r2, r4
 801aa7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa84:	3302      	adds	r3, #2
 801aa86:	e7c7      	b.n	801aa18 <_printf_common+0x58>
 801aa88:	2301      	movs	r3, #1
 801aa8a:	4622      	mov	r2, r4
 801aa8c:	4649      	mov	r1, r9
 801aa8e:	4638      	mov	r0, r7
 801aa90:	47c0      	blx	r8
 801aa92:	3001      	adds	r0, #1
 801aa94:	d0e6      	beq.n	801aa64 <_printf_common+0xa4>
 801aa96:	3601      	adds	r6, #1
 801aa98:	e7d9      	b.n	801aa4e <_printf_common+0x8e>
	...

0801aa9c <_printf_i>:
 801aa9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aaa0:	7e0f      	ldrb	r7, [r1, #24]
 801aaa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aaa4:	2f78      	cmp	r7, #120	; 0x78
 801aaa6:	4691      	mov	r9, r2
 801aaa8:	4680      	mov	r8, r0
 801aaaa:	460c      	mov	r4, r1
 801aaac:	469a      	mov	sl, r3
 801aaae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aab2:	d807      	bhi.n	801aac4 <_printf_i+0x28>
 801aab4:	2f62      	cmp	r7, #98	; 0x62
 801aab6:	d80a      	bhi.n	801aace <_printf_i+0x32>
 801aab8:	2f00      	cmp	r7, #0
 801aaba:	f000 80d8 	beq.w	801ac6e <_printf_i+0x1d2>
 801aabe:	2f58      	cmp	r7, #88	; 0x58
 801aac0:	f000 80a3 	beq.w	801ac0a <_printf_i+0x16e>
 801aac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aacc:	e03a      	b.n	801ab44 <_printf_i+0xa8>
 801aace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aad2:	2b15      	cmp	r3, #21
 801aad4:	d8f6      	bhi.n	801aac4 <_printf_i+0x28>
 801aad6:	a101      	add	r1, pc, #4	; (adr r1, 801aadc <_printf_i+0x40>)
 801aad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aadc:	0801ab35 	.word	0x0801ab35
 801aae0:	0801ab49 	.word	0x0801ab49
 801aae4:	0801aac5 	.word	0x0801aac5
 801aae8:	0801aac5 	.word	0x0801aac5
 801aaec:	0801aac5 	.word	0x0801aac5
 801aaf0:	0801aac5 	.word	0x0801aac5
 801aaf4:	0801ab49 	.word	0x0801ab49
 801aaf8:	0801aac5 	.word	0x0801aac5
 801aafc:	0801aac5 	.word	0x0801aac5
 801ab00:	0801aac5 	.word	0x0801aac5
 801ab04:	0801aac5 	.word	0x0801aac5
 801ab08:	0801ac55 	.word	0x0801ac55
 801ab0c:	0801ab79 	.word	0x0801ab79
 801ab10:	0801ac37 	.word	0x0801ac37
 801ab14:	0801aac5 	.word	0x0801aac5
 801ab18:	0801aac5 	.word	0x0801aac5
 801ab1c:	0801ac77 	.word	0x0801ac77
 801ab20:	0801aac5 	.word	0x0801aac5
 801ab24:	0801ab79 	.word	0x0801ab79
 801ab28:	0801aac5 	.word	0x0801aac5
 801ab2c:	0801aac5 	.word	0x0801aac5
 801ab30:	0801ac3f 	.word	0x0801ac3f
 801ab34:	682b      	ldr	r3, [r5, #0]
 801ab36:	1d1a      	adds	r2, r3, #4
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	602a      	str	r2, [r5, #0]
 801ab3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ab40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ab44:	2301      	movs	r3, #1
 801ab46:	e0a3      	b.n	801ac90 <_printf_i+0x1f4>
 801ab48:	6820      	ldr	r0, [r4, #0]
 801ab4a:	6829      	ldr	r1, [r5, #0]
 801ab4c:	0606      	lsls	r6, r0, #24
 801ab4e:	f101 0304 	add.w	r3, r1, #4
 801ab52:	d50a      	bpl.n	801ab6a <_printf_i+0xce>
 801ab54:	680e      	ldr	r6, [r1, #0]
 801ab56:	602b      	str	r3, [r5, #0]
 801ab58:	2e00      	cmp	r6, #0
 801ab5a:	da03      	bge.n	801ab64 <_printf_i+0xc8>
 801ab5c:	232d      	movs	r3, #45	; 0x2d
 801ab5e:	4276      	negs	r6, r6
 801ab60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab64:	485e      	ldr	r0, [pc, #376]	; (801ace0 <_printf_i+0x244>)
 801ab66:	230a      	movs	r3, #10
 801ab68:	e019      	b.n	801ab9e <_printf_i+0x102>
 801ab6a:	680e      	ldr	r6, [r1, #0]
 801ab6c:	602b      	str	r3, [r5, #0]
 801ab6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ab72:	bf18      	it	ne
 801ab74:	b236      	sxthne	r6, r6
 801ab76:	e7ef      	b.n	801ab58 <_printf_i+0xbc>
 801ab78:	682b      	ldr	r3, [r5, #0]
 801ab7a:	6820      	ldr	r0, [r4, #0]
 801ab7c:	1d19      	adds	r1, r3, #4
 801ab7e:	6029      	str	r1, [r5, #0]
 801ab80:	0601      	lsls	r1, r0, #24
 801ab82:	d501      	bpl.n	801ab88 <_printf_i+0xec>
 801ab84:	681e      	ldr	r6, [r3, #0]
 801ab86:	e002      	b.n	801ab8e <_printf_i+0xf2>
 801ab88:	0646      	lsls	r6, r0, #25
 801ab8a:	d5fb      	bpl.n	801ab84 <_printf_i+0xe8>
 801ab8c:	881e      	ldrh	r6, [r3, #0]
 801ab8e:	4854      	ldr	r0, [pc, #336]	; (801ace0 <_printf_i+0x244>)
 801ab90:	2f6f      	cmp	r7, #111	; 0x6f
 801ab92:	bf0c      	ite	eq
 801ab94:	2308      	moveq	r3, #8
 801ab96:	230a      	movne	r3, #10
 801ab98:	2100      	movs	r1, #0
 801ab9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ab9e:	6865      	ldr	r5, [r4, #4]
 801aba0:	60a5      	str	r5, [r4, #8]
 801aba2:	2d00      	cmp	r5, #0
 801aba4:	bfa2      	ittt	ge
 801aba6:	6821      	ldrge	r1, [r4, #0]
 801aba8:	f021 0104 	bicge.w	r1, r1, #4
 801abac:	6021      	strge	r1, [r4, #0]
 801abae:	b90e      	cbnz	r6, 801abb4 <_printf_i+0x118>
 801abb0:	2d00      	cmp	r5, #0
 801abb2:	d04d      	beq.n	801ac50 <_printf_i+0x1b4>
 801abb4:	4615      	mov	r5, r2
 801abb6:	fbb6 f1f3 	udiv	r1, r6, r3
 801abba:	fb03 6711 	mls	r7, r3, r1, r6
 801abbe:	5dc7      	ldrb	r7, [r0, r7]
 801abc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801abc4:	4637      	mov	r7, r6
 801abc6:	42bb      	cmp	r3, r7
 801abc8:	460e      	mov	r6, r1
 801abca:	d9f4      	bls.n	801abb6 <_printf_i+0x11a>
 801abcc:	2b08      	cmp	r3, #8
 801abce:	d10b      	bne.n	801abe8 <_printf_i+0x14c>
 801abd0:	6823      	ldr	r3, [r4, #0]
 801abd2:	07de      	lsls	r6, r3, #31
 801abd4:	d508      	bpl.n	801abe8 <_printf_i+0x14c>
 801abd6:	6923      	ldr	r3, [r4, #16]
 801abd8:	6861      	ldr	r1, [r4, #4]
 801abda:	4299      	cmp	r1, r3
 801abdc:	bfde      	ittt	le
 801abde:	2330      	movle	r3, #48	; 0x30
 801abe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801abe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801abe8:	1b52      	subs	r2, r2, r5
 801abea:	6122      	str	r2, [r4, #16]
 801abec:	f8cd a000 	str.w	sl, [sp]
 801abf0:	464b      	mov	r3, r9
 801abf2:	aa03      	add	r2, sp, #12
 801abf4:	4621      	mov	r1, r4
 801abf6:	4640      	mov	r0, r8
 801abf8:	f7ff fee2 	bl	801a9c0 <_printf_common>
 801abfc:	3001      	adds	r0, #1
 801abfe:	d14c      	bne.n	801ac9a <_printf_i+0x1fe>
 801ac00:	f04f 30ff 	mov.w	r0, #4294967295
 801ac04:	b004      	add	sp, #16
 801ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac0a:	4835      	ldr	r0, [pc, #212]	; (801ace0 <_printf_i+0x244>)
 801ac0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ac10:	6829      	ldr	r1, [r5, #0]
 801ac12:	6823      	ldr	r3, [r4, #0]
 801ac14:	f851 6b04 	ldr.w	r6, [r1], #4
 801ac18:	6029      	str	r1, [r5, #0]
 801ac1a:	061d      	lsls	r5, r3, #24
 801ac1c:	d514      	bpl.n	801ac48 <_printf_i+0x1ac>
 801ac1e:	07df      	lsls	r7, r3, #31
 801ac20:	bf44      	itt	mi
 801ac22:	f043 0320 	orrmi.w	r3, r3, #32
 801ac26:	6023      	strmi	r3, [r4, #0]
 801ac28:	b91e      	cbnz	r6, 801ac32 <_printf_i+0x196>
 801ac2a:	6823      	ldr	r3, [r4, #0]
 801ac2c:	f023 0320 	bic.w	r3, r3, #32
 801ac30:	6023      	str	r3, [r4, #0]
 801ac32:	2310      	movs	r3, #16
 801ac34:	e7b0      	b.n	801ab98 <_printf_i+0xfc>
 801ac36:	6823      	ldr	r3, [r4, #0]
 801ac38:	f043 0320 	orr.w	r3, r3, #32
 801ac3c:	6023      	str	r3, [r4, #0]
 801ac3e:	2378      	movs	r3, #120	; 0x78
 801ac40:	4828      	ldr	r0, [pc, #160]	; (801ace4 <_printf_i+0x248>)
 801ac42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac46:	e7e3      	b.n	801ac10 <_printf_i+0x174>
 801ac48:	0659      	lsls	r1, r3, #25
 801ac4a:	bf48      	it	mi
 801ac4c:	b2b6      	uxthmi	r6, r6
 801ac4e:	e7e6      	b.n	801ac1e <_printf_i+0x182>
 801ac50:	4615      	mov	r5, r2
 801ac52:	e7bb      	b.n	801abcc <_printf_i+0x130>
 801ac54:	682b      	ldr	r3, [r5, #0]
 801ac56:	6826      	ldr	r6, [r4, #0]
 801ac58:	6961      	ldr	r1, [r4, #20]
 801ac5a:	1d18      	adds	r0, r3, #4
 801ac5c:	6028      	str	r0, [r5, #0]
 801ac5e:	0635      	lsls	r5, r6, #24
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	d501      	bpl.n	801ac68 <_printf_i+0x1cc>
 801ac64:	6019      	str	r1, [r3, #0]
 801ac66:	e002      	b.n	801ac6e <_printf_i+0x1d2>
 801ac68:	0670      	lsls	r0, r6, #25
 801ac6a:	d5fb      	bpl.n	801ac64 <_printf_i+0x1c8>
 801ac6c:	8019      	strh	r1, [r3, #0]
 801ac6e:	2300      	movs	r3, #0
 801ac70:	6123      	str	r3, [r4, #16]
 801ac72:	4615      	mov	r5, r2
 801ac74:	e7ba      	b.n	801abec <_printf_i+0x150>
 801ac76:	682b      	ldr	r3, [r5, #0]
 801ac78:	1d1a      	adds	r2, r3, #4
 801ac7a:	602a      	str	r2, [r5, #0]
 801ac7c:	681d      	ldr	r5, [r3, #0]
 801ac7e:	6862      	ldr	r2, [r4, #4]
 801ac80:	2100      	movs	r1, #0
 801ac82:	4628      	mov	r0, r5
 801ac84:	f7e5 fa84 	bl	8000190 <memchr>
 801ac88:	b108      	cbz	r0, 801ac8e <_printf_i+0x1f2>
 801ac8a:	1b40      	subs	r0, r0, r5
 801ac8c:	6060      	str	r0, [r4, #4]
 801ac8e:	6863      	ldr	r3, [r4, #4]
 801ac90:	6123      	str	r3, [r4, #16]
 801ac92:	2300      	movs	r3, #0
 801ac94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac98:	e7a8      	b.n	801abec <_printf_i+0x150>
 801ac9a:	6923      	ldr	r3, [r4, #16]
 801ac9c:	462a      	mov	r2, r5
 801ac9e:	4649      	mov	r1, r9
 801aca0:	4640      	mov	r0, r8
 801aca2:	47d0      	blx	sl
 801aca4:	3001      	adds	r0, #1
 801aca6:	d0ab      	beq.n	801ac00 <_printf_i+0x164>
 801aca8:	6823      	ldr	r3, [r4, #0]
 801acaa:	079b      	lsls	r3, r3, #30
 801acac:	d413      	bmi.n	801acd6 <_printf_i+0x23a>
 801acae:	68e0      	ldr	r0, [r4, #12]
 801acb0:	9b03      	ldr	r3, [sp, #12]
 801acb2:	4298      	cmp	r0, r3
 801acb4:	bfb8      	it	lt
 801acb6:	4618      	movlt	r0, r3
 801acb8:	e7a4      	b.n	801ac04 <_printf_i+0x168>
 801acba:	2301      	movs	r3, #1
 801acbc:	4632      	mov	r2, r6
 801acbe:	4649      	mov	r1, r9
 801acc0:	4640      	mov	r0, r8
 801acc2:	47d0      	blx	sl
 801acc4:	3001      	adds	r0, #1
 801acc6:	d09b      	beq.n	801ac00 <_printf_i+0x164>
 801acc8:	3501      	adds	r5, #1
 801acca:	68e3      	ldr	r3, [r4, #12]
 801accc:	9903      	ldr	r1, [sp, #12]
 801acce:	1a5b      	subs	r3, r3, r1
 801acd0:	42ab      	cmp	r3, r5
 801acd2:	dcf2      	bgt.n	801acba <_printf_i+0x21e>
 801acd4:	e7eb      	b.n	801acae <_printf_i+0x212>
 801acd6:	2500      	movs	r5, #0
 801acd8:	f104 0619 	add.w	r6, r4, #25
 801acdc:	e7f5      	b.n	801acca <_printf_i+0x22e>
 801acde:	bf00      	nop
 801ace0:	0801bb71 	.word	0x0801bb71
 801ace4:	0801bb82 	.word	0x0801bb82

0801ace8 <memcpy>:
 801ace8:	440a      	add	r2, r1
 801acea:	4291      	cmp	r1, r2
 801acec:	f100 33ff 	add.w	r3, r0, #4294967295
 801acf0:	d100      	bne.n	801acf4 <memcpy+0xc>
 801acf2:	4770      	bx	lr
 801acf4:	b510      	push	{r4, lr}
 801acf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801acfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801acfe:	4291      	cmp	r1, r2
 801ad00:	d1f9      	bne.n	801acf6 <memcpy+0xe>
 801ad02:	bd10      	pop	{r4, pc}

0801ad04 <memmove>:
 801ad04:	4288      	cmp	r0, r1
 801ad06:	b510      	push	{r4, lr}
 801ad08:	eb01 0402 	add.w	r4, r1, r2
 801ad0c:	d902      	bls.n	801ad14 <memmove+0x10>
 801ad0e:	4284      	cmp	r4, r0
 801ad10:	4623      	mov	r3, r4
 801ad12:	d807      	bhi.n	801ad24 <memmove+0x20>
 801ad14:	1e43      	subs	r3, r0, #1
 801ad16:	42a1      	cmp	r1, r4
 801ad18:	d008      	beq.n	801ad2c <memmove+0x28>
 801ad1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad22:	e7f8      	b.n	801ad16 <memmove+0x12>
 801ad24:	4402      	add	r2, r0
 801ad26:	4601      	mov	r1, r0
 801ad28:	428a      	cmp	r2, r1
 801ad2a:	d100      	bne.n	801ad2e <memmove+0x2a>
 801ad2c:	bd10      	pop	{r4, pc}
 801ad2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad36:	e7f7      	b.n	801ad28 <memmove+0x24>

0801ad38 <_free_r>:
 801ad38:	b538      	push	{r3, r4, r5, lr}
 801ad3a:	4605      	mov	r5, r0
 801ad3c:	2900      	cmp	r1, #0
 801ad3e:	d041      	beq.n	801adc4 <_free_r+0x8c>
 801ad40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad44:	1f0c      	subs	r4, r1, #4
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	bfb8      	it	lt
 801ad4a:	18e4      	addlt	r4, r4, r3
 801ad4c:	f000 f912 	bl	801af74 <__malloc_lock>
 801ad50:	4a1d      	ldr	r2, [pc, #116]	; (801adc8 <_free_r+0x90>)
 801ad52:	6813      	ldr	r3, [r2, #0]
 801ad54:	b933      	cbnz	r3, 801ad64 <_free_r+0x2c>
 801ad56:	6063      	str	r3, [r4, #4]
 801ad58:	6014      	str	r4, [r2, #0]
 801ad5a:	4628      	mov	r0, r5
 801ad5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad60:	f000 b90e 	b.w	801af80 <__malloc_unlock>
 801ad64:	42a3      	cmp	r3, r4
 801ad66:	d908      	bls.n	801ad7a <_free_r+0x42>
 801ad68:	6820      	ldr	r0, [r4, #0]
 801ad6a:	1821      	adds	r1, r4, r0
 801ad6c:	428b      	cmp	r3, r1
 801ad6e:	bf01      	itttt	eq
 801ad70:	6819      	ldreq	r1, [r3, #0]
 801ad72:	685b      	ldreq	r3, [r3, #4]
 801ad74:	1809      	addeq	r1, r1, r0
 801ad76:	6021      	streq	r1, [r4, #0]
 801ad78:	e7ed      	b.n	801ad56 <_free_r+0x1e>
 801ad7a:	461a      	mov	r2, r3
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	b10b      	cbz	r3, 801ad84 <_free_r+0x4c>
 801ad80:	42a3      	cmp	r3, r4
 801ad82:	d9fa      	bls.n	801ad7a <_free_r+0x42>
 801ad84:	6811      	ldr	r1, [r2, #0]
 801ad86:	1850      	adds	r0, r2, r1
 801ad88:	42a0      	cmp	r0, r4
 801ad8a:	d10b      	bne.n	801ada4 <_free_r+0x6c>
 801ad8c:	6820      	ldr	r0, [r4, #0]
 801ad8e:	4401      	add	r1, r0
 801ad90:	1850      	adds	r0, r2, r1
 801ad92:	4283      	cmp	r3, r0
 801ad94:	6011      	str	r1, [r2, #0]
 801ad96:	d1e0      	bne.n	801ad5a <_free_r+0x22>
 801ad98:	6818      	ldr	r0, [r3, #0]
 801ad9a:	685b      	ldr	r3, [r3, #4]
 801ad9c:	6053      	str	r3, [r2, #4]
 801ad9e:	4401      	add	r1, r0
 801ada0:	6011      	str	r1, [r2, #0]
 801ada2:	e7da      	b.n	801ad5a <_free_r+0x22>
 801ada4:	d902      	bls.n	801adac <_free_r+0x74>
 801ada6:	230c      	movs	r3, #12
 801ada8:	602b      	str	r3, [r5, #0]
 801adaa:	e7d6      	b.n	801ad5a <_free_r+0x22>
 801adac:	6820      	ldr	r0, [r4, #0]
 801adae:	1821      	adds	r1, r4, r0
 801adb0:	428b      	cmp	r3, r1
 801adb2:	bf04      	itt	eq
 801adb4:	6819      	ldreq	r1, [r3, #0]
 801adb6:	685b      	ldreq	r3, [r3, #4]
 801adb8:	6063      	str	r3, [r4, #4]
 801adba:	bf04      	itt	eq
 801adbc:	1809      	addeq	r1, r1, r0
 801adbe:	6021      	streq	r1, [r4, #0]
 801adc0:	6054      	str	r4, [r2, #4]
 801adc2:	e7ca      	b.n	801ad5a <_free_r+0x22>
 801adc4:	bd38      	pop	{r3, r4, r5, pc}
 801adc6:	bf00      	nop
 801adc8:	200022d0 	.word	0x200022d0

0801adcc <sbrk_aligned>:
 801adcc:	b570      	push	{r4, r5, r6, lr}
 801adce:	4e0e      	ldr	r6, [pc, #56]	; (801ae08 <sbrk_aligned+0x3c>)
 801add0:	460c      	mov	r4, r1
 801add2:	6831      	ldr	r1, [r6, #0]
 801add4:	4605      	mov	r5, r0
 801add6:	b911      	cbnz	r1, 801adde <sbrk_aligned+0x12>
 801add8:	f000 f8bc 	bl	801af54 <_sbrk_r>
 801addc:	6030      	str	r0, [r6, #0]
 801adde:	4621      	mov	r1, r4
 801ade0:	4628      	mov	r0, r5
 801ade2:	f000 f8b7 	bl	801af54 <_sbrk_r>
 801ade6:	1c43      	adds	r3, r0, #1
 801ade8:	d00a      	beq.n	801ae00 <sbrk_aligned+0x34>
 801adea:	1cc4      	adds	r4, r0, #3
 801adec:	f024 0403 	bic.w	r4, r4, #3
 801adf0:	42a0      	cmp	r0, r4
 801adf2:	d007      	beq.n	801ae04 <sbrk_aligned+0x38>
 801adf4:	1a21      	subs	r1, r4, r0
 801adf6:	4628      	mov	r0, r5
 801adf8:	f000 f8ac 	bl	801af54 <_sbrk_r>
 801adfc:	3001      	adds	r0, #1
 801adfe:	d101      	bne.n	801ae04 <sbrk_aligned+0x38>
 801ae00:	f04f 34ff 	mov.w	r4, #4294967295
 801ae04:	4620      	mov	r0, r4
 801ae06:	bd70      	pop	{r4, r5, r6, pc}
 801ae08:	200022d4 	.word	0x200022d4

0801ae0c <_malloc_r>:
 801ae0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae10:	1ccd      	adds	r5, r1, #3
 801ae12:	f025 0503 	bic.w	r5, r5, #3
 801ae16:	3508      	adds	r5, #8
 801ae18:	2d0c      	cmp	r5, #12
 801ae1a:	bf38      	it	cc
 801ae1c:	250c      	movcc	r5, #12
 801ae1e:	2d00      	cmp	r5, #0
 801ae20:	4607      	mov	r7, r0
 801ae22:	db01      	blt.n	801ae28 <_malloc_r+0x1c>
 801ae24:	42a9      	cmp	r1, r5
 801ae26:	d905      	bls.n	801ae34 <_malloc_r+0x28>
 801ae28:	230c      	movs	r3, #12
 801ae2a:	603b      	str	r3, [r7, #0]
 801ae2c:	2600      	movs	r6, #0
 801ae2e:	4630      	mov	r0, r6
 801ae30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae34:	4e2e      	ldr	r6, [pc, #184]	; (801aef0 <_malloc_r+0xe4>)
 801ae36:	f000 f89d 	bl	801af74 <__malloc_lock>
 801ae3a:	6833      	ldr	r3, [r6, #0]
 801ae3c:	461c      	mov	r4, r3
 801ae3e:	bb34      	cbnz	r4, 801ae8e <_malloc_r+0x82>
 801ae40:	4629      	mov	r1, r5
 801ae42:	4638      	mov	r0, r7
 801ae44:	f7ff ffc2 	bl	801adcc <sbrk_aligned>
 801ae48:	1c43      	adds	r3, r0, #1
 801ae4a:	4604      	mov	r4, r0
 801ae4c:	d14d      	bne.n	801aeea <_malloc_r+0xde>
 801ae4e:	6834      	ldr	r4, [r6, #0]
 801ae50:	4626      	mov	r6, r4
 801ae52:	2e00      	cmp	r6, #0
 801ae54:	d140      	bne.n	801aed8 <_malloc_r+0xcc>
 801ae56:	6823      	ldr	r3, [r4, #0]
 801ae58:	4631      	mov	r1, r6
 801ae5a:	4638      	mov	r0, r7
 801ae5c:	eb04 0803 	add.w	r8, r4, r3
 801ae60:	f000 f878 	bl	801af54 <_sbrk_r>
 801ae64:	4580      	cmp	r8, r0
 801ae66:	d13a      	bne.n	801aede <_malloc_r+0xd2>
 801ae68:	6821      	ldr	r1, [r4, #0]
 801ae6a:	3503      	adds	r5, #3
 801ae6c:	1a6d      	subs	r5, r5, r1
 801ae6e:	f025 0503 	bic.w	r5, r5, #3
 801ae72:	3508      	adds	r5, #8
 801ae74:	2d0c      	cmp	r5, #12
 801ae76:	bf38      	it	cc
 801ae78:	250c      	movcc	r5, #12
 801ae7a:	4629      	mov	r1, r5
 801ae7c:	4638      	mov	r0, r7
 801ae7e:	f7ff ffa5 	bl	801adcc <sbrk_aligned>
 801ae82:	3001      	adds	r0, #1
 801ae84:	d02b      	beq.n	801aede <_malloc_r+0xd2>
 801ae86:	6823      	ldr	r3, [r4, #0]
 801ae88:	442b      	add	r3, r5
 801ae8a:	6023      	str	r3, [r4, #0]
 801ae8c:	e00e      	b.n	801aeac <_malloc_r+0xa0>
 801ae8e:	6822      	ldr	r2, [r4, #0]
 801ae90:	1b52      	subs	r2, r2, r5
 801ae92:	d41e      	bmi.n	801aed2 <_malloc_r+0xc6>
 801ae94:	2a0b      	cmp	r2, #11
 801ae96:	d916      	bls.n	801aec6 <_malloc_r+0xba>
 801ae98:	1961      	adds	r1, r4, r5
 801ae9a:	42a3      	cmp	r3, r4
 801ae9c:	6025      	str	r5, [r4, #0]
 801ae9e:	bf18      	it	ne
 801aea0:	6059      	strne	r1, [r3, #4]
 801aea2:	6863      	ldr	r3, [r4, #4]
 801aea4:	bf08      	it	eq
 801aea6:	6031      	streq	r1, [r6, #0]
 801aea8:	5162      	str	r2, [r4, r5]
 801aeaa:	604b      	str	r3, [r1, #4]
 801aeac:	4638      	mov	r0, r7
 801aeae:	f104 060b 	add.w	r6, r4, #11
 801aeb2:	f000 f865 	bl	801af80 <__malloc_unlock>
 801aeb6:	f026 0607 	bic.w	r6, r6, #7
 801aeba:	1d23      	adds	r3, r4, #4
 801aebc:	1af2      	subs	r2, r6, r3
 801aebe:	d0b6      	beq.n	801ae2e <_malloc_r+0x22>
 801aec0:	1b9b      	subs	r3, r3, r6
 801aec2:	50a3      	str	r3, [r4, r2]
 801aec4:	e7b3      	b.n	801ae2e <_malloc_r+0x22>
 801aec6:	6862      	ldr	r2, [r4, #4]
 801aec8:	42a3      	cmp	r3, r4
 801aeca:	bf0c      	ite	eq
 801aecc:	6032      	streq	r2, [r6, #0]
 801aece:	605a      	strne	r2, [r3, #4]
 801aed0:	e7ec      	b.n	801aeac <_malloc_r+0xa0>
 801aed2:	4623      	mov	r3, r4
 801aed4:	6864      	ldr	r4, [r4, #4]
 801aed6:	e7b2      	b.n	801ae3e <_malloc_r+0x32>
 801aed8:	4634      	mov	r4, r6
 801aeda:	6876      	ldr	r6, [r6, #4]
 801aedc:	e7b9      	b.n	801ae52 <_malloc_r+0x46>
 801aede:	230c      	movs	r3, #12
 801aee0:	603b      	str	r3, [r7, #0]
 801aee2:	4638      	mov	r0, r7
 801aee4:	f000 f84c 	bl	801af80 <__malloc_unlock>
 801aee8:	e7a1      	b.n	801ae2e <_malloc_r+0x22>
 801aeea:	6025      	str	r5, [r4, #0]
 801aeec:	e7de      	b.n	801aeac <_malloc_r+0xa0>
 801aeee:	bf00      	nop
 801aef0:	200022d0 	.word	0x200022d0

0801aef4 <_realloc_r>:
 801aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aef8:	4680      	mov	r8, r0
 801aefa:	4614      	mov	r4, r2
 801aefc:	460e      	mov	r6, r1
 801aefe:	b921      	cbnz	r1, 801af0a <_realloc_r+0x16>
 801af00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af04:	4611      	mov	r1, r2
 801af06:	f7ff bf81 	b.w	801ae0c <_malloc_r>
 801af0a:	b92a      	cbnz	r2, 801af18 <_realloc_r+0x24>
 801af0c:	f7ff ff14 	bl	801ad38 <_free_r>
 801af10:	4625      	mov	r5, r4
 801af12:	4628      	mov	r0, r5
 801af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af18:	f000 f838 	bl	801af8c <_malloc_usable_size_r>
 801af1c:	4284      	cmp	r4, r0
 801af1e:	4607      	mov	r7, r0
 801af20:	d802      	bhi.n	801af28 <_realloc_r+0x34>
 801af22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801af26:	d812      	bhi.n	801af4e <_realloc_r+0x5a>
 801af28:	4621      	mov	r1, r4
 801af2a:	4640      	mov	r0, r8
 801af2c:	f7ff ff6e 	bl	801ae0c <_malloc_r>
 801af30:	4605      	mov	r5, r0
 801af32:	2800      	cmp	r0, #0
 801af34:	d0ed      	beq.n	801af12 <_realloc_r+0x1e>
 801af36:	42bc      	cmp	r4, r7
 801af38:	4622      	mov	r2, r4
 801af3a:	4631      	mov	r1, r6
 801af3c:	bf28      	it	cs
 801af3e:	463a      	movcs	r2, r7
 801af40:	f7ff fed2 	bl	801ace8 <memcpy>
 801af44:	4631      	mov	r1, r6
 801af46:	4640      	mov	r0, r8
 801af48:	f7ff fef6 	bl	801ad38 <_free_r>
 801af4c:	e7e1      	b.n	801af12 <_realloc_r+0x1e>
 801af4e:	4635      	mov	r5, r6
 801af50:	e7df      	b.n	801af12 <_realloc_r+0x1e>
	...

0801af54 <_sbrk_r>:
 801af54:	b538      	push	{r3, r4, r5, lr}
 801af56:	4d06      	ldr	r5, [pc, #24]	; (801af70 <_sbrk_r+0x1c>)
 801af58:	2300      	movs	r3, #0
 801af5a:	4604      	mov	r4, r0
 801af5c:	4608      	mov	r0, r1
 801af5e:	602b      	str	r3, [r5, #0]
 801af60:	f000 f89e 	bl	801b0a0 <_sbrk>
 801af64:	1c43      	adds	r3, r0, #1
 801af66:	d102      	bne.n	801af6e <_sbrk_r+0x1a>
 801af68:	682b      	ldr	r3, [r5, #0]
 801af6a:	b103      	cbz	r3, 801af6e <_sbrk_r+0x1a>
 801af6c:	6023      	str	r3, [r4, #0]
 801af6e:	bd38      	pop	{r3, r4, r5, pc}
 801af70:	200022d8 	.word	0x200022d8

0801af74 <__malloc_lock>:
 801af74:	4801      	ldr	r0, [pc, #4]	; (801af7c <__malloc_lock+0x8>)
 801af76:	f000 b811 	b.w	801af9c <__retarget_lock_acquire_recursive>
 801af7a:	bf00      	nop
 801af7c:	200022dc 	.word	0x200022dc

0801af80 <__malloc_unlock>:
 801af80:	4801      	ldr	r0, [pc, #4]	; (801af88 <__malloc_unlock+0x8>)
 801af82:	f000 b80c 	b.w	801af9e <__retarget_lock_release_recursive>
 801af86:	bf00      	nop
 801af88:	200022dc 	.word	0x200022dc

0801af8c <_malloc_usable_size_r>:
 801af8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af90:	1f18      	subs	r0, r3, #4
 801af92:	2b00      	cmp	r3, #0
 801af94:	bfbc      	itt	lt
 801af96:	580b      	ldrlt	r3, [r1, r0]
 801af98:	18c0      	addlt	r0, r0, r3
 801af9a:	4770      	bx	lr

0801af9c <__retarget_lock_acquire_recursive>:
 801af9c:	4770      	bx	lr

0801af9e <__retarget_lock_release_recursive>:
 801af9e:	4770      	bx	lr

0801afa0 <floor>:
 801afa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afa4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801afa8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801afac:	2e13      	cmp	r6, #19
 801afae:	4602      	mov	r2, r0
 801afb0:	460b      	mov	r3, r1
 801afb2:	4607      	mov	r7, r0
 801afb4:	460c      	mov	r4, r1
 801afb6:	4605      	mov	r5, r0
 801afb8:	dc33      	bgt.n	801b022 <floor+0x82>
 801afba:	2e00      	cmp	r6, #0
 801afbc:	da14      	bge.n	801afe8 <floor+0x48>
 801afbe:	a334      	add	r3, pc, #208	; (adr r3, 801b090 <floor+0xf0>)
 801afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc4:	f7e5 f93a 	bl	800023c <__adddf3>
 801afc8:	2200      	movs	r2, #0
 801afca:	2300      	movs	r3, #0
 801afcc:	f7e5 fb6a 	bl	80006a4 <__aeabi_dcmpgt>
 801afd0:	b138      	cbz	r0, 801afe2 <floor+0x42>
 801afd2:	2c00      	cmp	r4, #0
 801afd4:	da58      	bge.n	801b088 <floor+0xe8>
 801afd6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801afda:	431d      	orrs	r5, r3
 801afdc:	d001      	beq.n	801afe2 <floor+0x42>
 801afde:	4c2e      	ldr	r4, [pc, #184]	; (801b098 <floor+0xf8>)
 801afe0:	2500      	movs	r5, #0
 801afe2:	4623      	mov	r3, r4
 801afe4:	462f      	mov	r7, r5
 801afe6:	e025      	b.n	801b034 <floor+0x94>
 801afe8:	4a2c      	ldr	r2, [pc, #176]	; (801b09c <floor+0xfc>)
 801afea:	fa42 f806 	asr.w	r8, r2, r6
 801afee:	ea01 0208 	and.w	r2, r1, r8
 801aff2:	4302      	orrs	r2, r0
 801aff4:	d01e      	beq.n	801b034 <floor+0x94>
 801aff6:	a326      	add	r3, pc, #152	; (adr r3, 801b090 <floor+0xf0>)
 801aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affc:	f7e5 f91e 	bl	800023c <__adddf3>
 801b000:	2200      	movs	r2, #0
 801b002:	2300      	movs	r3, #0
 801b004:	f7e5 fb4e 	bl	80006a4 <__aeabi_dcmpgt>
 801b008:	2800      	cmp	r0, #0
 801b00a:	d0ea      	beq.n	801afe2 <floor+0x42>
 801b00c:	2c00      	cmp	r4, #0
 801b00e:	bfbe      	ittt	lt
 801b010:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b014:	fa43 f606 	asrlt.w	r6, r3, r6
 801b018:	19a4      	addlt	r4, r4, r6
 801b01a:	ea24 0408 	bic.w	r4, r4, r8
 801b01e:	2500      	movs	r5, #0
 801b020:	e7df      	b.n	801afe2 <floor+0x42>
 801b022:	2e33      	cmp	r6, #51	; 0x33
 801b024:	dd0a      	ble.n	801b03c <floor+0x9c>
 801b026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b02a:	d103      	bne.n	801b034 <floor+0x94>
 801b02c:	f7e5 f906 	bl	800023c <__adddf3>
 801b030:	4607      	mov	r7, r0
 801b032:	460b      	mov	r3, r1
 801b034:	4638      	mov	r0, r7
 801b036:	4619      	mov	r1, r3
 801b038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b03c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b040:	f04f 32ff 	mov.w	r2, #4294967295
 801b044:	fa22 f808 	lsr.w	r8, r2, r8
 801b048:	ea18 0f00 	tst.w	r8, r0
 801b04c:	d0f2      	beq.n	801b034 <floor+0x94>
 801b04e:	a310      	add	r3, pc, #64	; (adr r3, 801b090 <floor+0xf0>)
 801b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b054:	f7e5 f8f2 	bl	800023c <__adddf3>
 801b058:	2200      	movs	r2, #0
 801b05a:	2300      	movs	r3, #0
 801b05c:	f7e5 fb22 	bl	80006a4 <__aeabi_dcmpgt>
 801b060:	2800      	cmp	r0, #0
 801b062:	d0be      	beq.n	801afe2 <floor+0x42>
 801b064:	2c00      	cmp	r4, #0
 801b066:	da02      	bge.n	801b06e <floor+0xce>
 801b068:	2e14      	cmp	r6, #20
 801b06a:	d103      	bne.n	801b074 <floor+0xd4>
 801b06c:	3401      	adds	r4, #1
 801b06e:	ea25 0508 	bic.w	r5, r5, r8
 801b072:	e7b6      	b.n	801afe2 <floor+0x42>
 801b074:	2301      	movs	r3, #1
 801b076:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b07a:	fa03 f606 	lsl.w	r6, r3, r6
 801b07e:	4435      	add	r5, r6
 801b080:	42bd      	cmp	r5, r7
 801b082:	bf38      	it	cc
 801b084:	18e4      	addcc	r4, r4, r3
 801b086:	e7f2      	b.n	801b06e <floor+0xce>
 801b088:	2500      	movs	r5, #0
 801b08a:	462c      	mov	r4, r5
 801b08c:	e7a9      	b.n	801afe2 <floor+0x42>
 801b08e:	bf00      	nop
 801b090:	8800759c 	.word	0x8800759c
 801b094:	7e37e43c 	.word	0x7e37e43c
 801b098:	bff00000 	.word	0xbff00000
 801b09c:	000fffff 	.word	0x000fffff

0801b0a0 <_sbrk>:
 801b0a0:	4a04      	ldr	r2, [pc, #16]	; (801b0b4 <_sbrk+0x14>)
 801b0a2:	6811      	ldr	r1, [r2, #0]
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	b909      	cbnz	r1, 801b0ac <_sbrk+0xc>
 801b0a8:	4903      	ldr	r1, [pc, #12]	; (801b0b8 <_sbrk+0x18>)
 801b0aa:	6011      	str	r1, [r2, #0]
 801b0ac:	6810      	ldr	r0, [r2, #0]
 801b0ae:	4403      	add	r3, r0
 801b0b0:	6013      	str	r3, [r2, #0]
 801b0b2:	4770      	bx	lr
 801b0b4:	200022e0 	.word	0x200022e0
 801b0b8:	200022e8 	.word	0x200022e8

0801b0bc <_init>:
 801b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0be:	bf00      	nop
 801b0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0c2:	bc08      	pop	{r3}
 801b0c4:	469e      	mov	lr, r3
 801b0c6:	4770      	bx	lr

0801b0c8 <_fini>:
 801b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0ca:	bf00      	nop
 801b0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0ce:	bc08      	pop	{r3}
 801b0d0:	469e      	mov	lr, r3
 801b0d2:	4770      	bx	lr
